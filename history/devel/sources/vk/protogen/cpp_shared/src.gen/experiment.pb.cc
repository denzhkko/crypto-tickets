// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiment.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "experiment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace interleaving {
class FailStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FailStat>
     _instance;
} _FailStat_default_instance_;
class ExperimentStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExperimentStats>
     _instance;
} _ExperimentStats_default_instance_;
class ExperimentStatsListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExperimentStatsList>
     _instance;
} _ExperimentStatsList_default_instance_;
class ExperimentConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExperimentConfig>
     _instance;
} _ExperimentConfig_default_instance_;
class ExperimentMetaConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExperimentMetaConfig>
     _instance;
} _ExperimentMetaConfig_default_instance_;
class MetricsTaskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MetricsTask>
     _instance;
} _MetricsTask_default_instance_;
class MetricsMetaTaskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MetricsMetaTask>
     _instance;
} _MetricsMetaTask_default_instance_;
class MetricResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MetricResult>
     _instance;
} _MetricResult_default_instance_;
class MetricsResultsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MetricsResults>
     _instance;
} _MetricsResults_default_instance_;
class DumpTaskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DumpTask>
     _instance;
} _DumpTask_default_instance_;
class DumpTasksDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DumpTasks>
     _instance;
} _DumpTasks_default_instance_;
class DumpResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DumpResult>
     _instance;
} _DumpResult_default_instance_;
class DumpResultsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DumpResults>
     _instance;
} _DumpResults_default_instance_;
class DumpProgressDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DumpProgress>
     _instance;
} _DumpProgress_default_instance_;
class DumpsProgressDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DumpsProgress>
     _instance;
} _DumpsProgress_default_instance_;
class QueryLogDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryLog>
     _instance;
} _QueryLog_default_instance_;
class ShowedDocumentsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShowedDocuments>
     _instance;
} _ShowedDocuments_default_instance_;
class ShowedDocumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShowedDocument>
     _instance;
} _ShowedDocument_default_instance_;
class ClickDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Click>
     _instance;
} _Click_default_instance_;
class PlayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Play>
     _instance;
} _Play_default_instance_;
class ActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Action>
     _instance;
} _Action_default_instance_;
class SerpDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Serp>
     _instance;
} _Serp_default_instance_;
class EssrExperimentResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EssrExperimentResult>
     _instance;
} _EssrExperimentResult_default_instance_;
class QsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Qs>
     _instance;
} _Qs_default_instance_;
class SuggNavigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SuggNavig>
     _instance;
} _SuggNavig_default_instance_;
class AlSessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AlSession>
     _instance;
} _AlSession_default_instance_;
class AlSourceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AlSource>
     _instance;
} _AlSource_default_instance_;
class AlQueryDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AlQueryData>
     _instance;
} _AlQueryData_default_instance_;
class AlQueryDataListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AlQueryDataList>
     _instance;
} _AlQueryDataList_default_instance_;
class DocumentStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentStats>
     _instance;
} _DocumentStats_default_instance_;

namespace protobuf_experiment_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[30];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailStat, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailStat, count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentStats, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentStats, queries_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentStats, failed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentStats, fail_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentStats, trials_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentStats, fails_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentStats, failed_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentStats, failed_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentStats, fails_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentStats, info_),
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentStatsList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentStatsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentStatsList, stats_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, source_a_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, source_b_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, source_a_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, source_b_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, queries_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, min_per_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, max_per_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, start_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, quota_all_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, queries_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, homer_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, ae_set_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentConfig, max_sessions_),
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  10,
  11,
  12,
  13,
  14,
  6,
  7,
  8,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentMetaConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentMetaConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentMetaConfig, experiments_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsTask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsTask, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsTask, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsTask, experiment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsTask, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsTask, stop_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsTask, confidence_coefficient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsTask, filter_rx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsTask, queries_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsTask, send_graphite_),
  3,
  0,
  4,
  5,
  6,
  7,
  1,
  2,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsMetaTask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsMetaTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsMetaTask, metrics_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricResult, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricResult, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricResult, confidence_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricResult, confidence_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricResult, events_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricResult, reliability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricResult, probability_a_better_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricResult, probability_b_better_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricResult, a_wins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricResult, b_wins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricResult, no_clicks_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsResults, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsResults, results_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpTask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpTask, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpTask, experiment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpTask, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpTask, stop_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpTask, max_logs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpTask, filter_rx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpTask, experiment_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpTask, with_snippets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpTask, metric_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpTask, draw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpTask, noclicks_),
  3,
  4,
  5,
  6,
  10,
  0,
  1,
  7,
  2,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpTasks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpTasks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpTasks, tasks_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpResult, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpResult, dump_url_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpResults, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpResults, results_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpProgress, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpProgress, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpProgress, progress_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpsProgress, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpsProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpsProgress, progress_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, eid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, showeddocuments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, queryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, rawgekkolog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, replyquality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, essrsourcetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, original_query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, spc_json_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, webquality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, actions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, qs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, suggnavig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, suggnaviga_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, suggnavigb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, serp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, play_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, experimentddata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLog, use_whole_response_),
  15,
  0,
  16,
  11,
  ~0u,
  1,
  2,
  3,
  4,
  17,
  5,
  6,
  7,
  18,
  ~0u,
  ~0u,
  12,
  13,
  14,
  8,
  ~0u,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowedDocuments, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowedDocuments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowedDocuments, showeddocuments_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowedDocument, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowedDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowedDocument, showed_from_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowedDocument, position_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowedDocument, position_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowedDocument, interleaved_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowedDocument, clicked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowedDocument, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowedDocument, vertical_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowedDocument, sm_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowedDocument, rpos_),
  4,
  2,
  3,
  6,
  5,
  0,
  1,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, time_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, sub_position_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Play, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Play, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Play, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Play, time_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Play, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Play, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Play, type_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, position_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serp, urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serp, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serp, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serp, rb_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serp, timestamp_),
  ~0u,
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EssrExperimentResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EssrExperimentResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EssrExperimentResult, metric_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EssrExperimentResult, a_win_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EssrExperimentResult, b_win_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EssrExperimentResult, events_count_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qs, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qs, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggNavig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggNavig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggNavig, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggNavig, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggNavig, has_favicon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggNavig, clicked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggNavig, source_),
  0,
  1,
  3,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlSession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlSession, urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlSession, freq_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlSource, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlSource, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlSource, sessions_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlQueryData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlQueryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlQueryData, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlQueryData, rb_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlQueryData, sources_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlQueryDataList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlQueryDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlQueryDataList, queries_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentStats, showed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentStats, clicked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentStats, satisfied_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentStats, long_click_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentStats, snippet_),
  1,
  2,
  3,
  4,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(FailStat)},
  { 9, 24, sizeof(ExperimentStats)},
  { 34, 40, sizeof(ExperimentStatsList)},
  { 41, 62, sizeof(ExperimentConfig)},
  { 78, 84, sizeof(ExperimentMetaConfig)},
  { 85, 99, sizeof(MetricsTask)},
  { 108, 114, sizeof(MetricsMetaTask)},
  { 115, 131, sizeof(MetricResult)},
  { 142, 148, sizeof(MetricsResults)},
  { 149, 165, sizeof(DumpTask)},
  { 176, 182, sizeof(DumpTasks)},
  { 183, 190, sizeof(DumpResult)},
  { 192, 198, sizeof(DumpResults)},
  { 199, 206, sizeof(DumpProgress)},
  { 208, 214, sizeof(DumpsProgress)},
  { 215, 243, sizeof(QueryLog)},
  { 266, 272, sizeof(ShowedDocuments)},
  { 273, 287, sizeof(ShowedDocument)},
  { 296, 305, sizeof(Click)},
  { 309, 319, sizeof(Play)},
  { 324, 331, sizeof(Action)},
  { 333, 343, sizeof(Serp)},
  { 348, 357, sizeof(EssrExperimentResult)},
  { 361, 368, sizeof(Qs)},
  { 370, 380, sizeof(SuggNavig)},
  { 385, 392, sizeof(AlSession)},
  { 394, 401, sizeof(AlSource)},
  { 403, 411, sizeof(AlQueryData)},
  { 414, 420, sizeof(AlQueryDataList)},
  { 421, 431, sizeof(DocumentStats)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FailStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExperimentStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExperimentStatsList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExperimentConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExperimentMetaConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MetricsTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MetricsMetaTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MetricResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MetricsResults_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DumpTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DumpTasks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DumpResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DumpResults_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DumpProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DumpsProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowedDocuments_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowedDocument_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Click_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Play_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Action_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Serp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EssrExperimentResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Qs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SuggNavig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AlSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AlSource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AlQueryData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AlQueryDataList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentStats_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "experiment.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 30);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _FailStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FailStat_default_instance_);_ExperimentStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExperimentStats_default_instance_);_ExperimentStatsList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExperimentStatsList_default_instance_);_ExperimentConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExperimentConfig_default_instance_);_ExperimentMetaConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExperimentMetaConfig_default_instance_);_MetricsTask_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MetricsTask_default_instance_);_MetricsMetaTask_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MetricsMetaTask_default_instance_);_MetricResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MetricResult_default_instance_);_MetricsResults_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MetricsResults_default_instance_);_DumpTask_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DumpTask_default_instance_);_DumpTasks_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DumpTasks_default_instance_);_DumpResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DumpResult_default_instance_);_DumpResults_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DumpResults_default_instance_);_DumpProgress_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DumpProgress_default_instance_);_DumpsProgress_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DumpsProgress_default_instance_);_QueryLog_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryLog_default_instance_);_ShowedDocuments_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShowedDocuments_default_instance_);_ShowedDocument_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShowedDocument_default_instance_);_Click_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Click_default_instance_);_Play_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Play_default_instance_);_Action_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Action_default_instance_);_Serp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Serp_default_instance_);_EssrExperimentResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EssrExperimentResult_default_instance_);_Qs_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Qs_default_instance_);_SuggNavig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SuggNavig_default_instance_);_AlSession_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AlSession_default_instance_);_AlSource_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AlSource_default_instance_);_AlQueryData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AlQueryData_default_instance_);_AlQueryDataList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AlQueryDataList_default_instance_);_DocumentStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentStats_default_instance_);_QueryLog_default_instance_._instance.get_mutable()->showeddocuments_ = const_cast< ::ru::mail::go::webbase::interleaving::ShowedDocuments*>(
      ::ru::mail::go::webbase::interleaving::ShowedDocuments::internal_default_instance());
  _QueryLog_default_instance_._instance.get_mutable()->suggnavig_ = const_cast< ::ru::mail::go::webbase::interleaving::SuggNavig*>(
      ::ru::mail::go::webbase::interleaving::SuggNavig::internal_default_instance());
  _QueryLog_default_instance_._instance.get_mutable()->suggnaviga_ = const_cast< ::ru::mail::go::webbase::interleaving::SuggNavig*>(
      ::ru::mail::go::webbase::interleaving::SuggNavig::internal_default_instance());
  _QueryLog_default_instance_._instance.get_mutable()->suggnavigb_ = const_cast< ::ru::mail::go::webbase::interleaving::SuggNavig*>(
      ::ru::mail::go::webbase::interleaving::SuggNavig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020experiment.proto\022\037ru.mail.go.webbase.i"
      "nterleaving\"%\n\010FailStat\022\n\n\002id\030\001 \002(\t\022\r\n\005c"
      "ount\030\002 \001(\r\"\365\001\n\017ExperimentStats\022\n\n\002id\030\001 \002"
      "(\r\022\025\n\rqueries_count\030\002 \002(\r\022\016\n\006failed\030\003 \002("
      "\010\022\023\n\013fail_reason\030\004 \001(\t\022\024\n\014trials_count\030\005"
      " \001(\r\022\023\n\013fails_count\030\006 \001(\r\022\020\n\010failed_a\030\007 "
      "\001(\r\022\020\n\010failed_b\030\010 \001(\r\022=\n\nfails_stat\030\t \003("
      "\0132).ru.mail.go.webbase.interleaving.Fail"
      "Stat\022\014\n\004info\030\n \001(\t\"V\n\023ExperimentStatsLis"
      "t\022\?\n\005stats\030\001 \003(\01320.ru.mail.go.webbase.in"
      "terleaving.ExperimentStats\"\347\002\n\020Experimen"
      "tConfig\022\n\n\002id\030\001 \002(\r\022\014\n\004type\030\002 \002(\t\022\025\n\rsou"
      "rce_a_type\030\003 \002(\t\022\025\n\rsource_b_type\030\004 \002(\t\022"
      "\027\n\017source_a_config\030\005 \001(\t\022\027\n\017source_b_con"
      "fig\030\006 \001(\t\022\026\n\016queries_filter\030\007 \001(\t\022\023\n\013min"
      "_per_day\030\010 \002(\r\022\023\n\013max_per_day\030\t \002(\r\022\020\n\010p"
      "riority\030\n \002(\r\022\022\n\nstart_date\030\013 \002(\r\022\030\n\tquo"
      "ta_all\030\014 \001(\010:\005false\022\024\n\014queries_file\030\r \001("
      "\t\022\026\n\016homer_location\030\016 \001(\t\022\023\n\013ae_set_name"
      "\030\017 \001(\t\022\024\n\014max_sessions\030\020 \001(\r\"^\n\024Experime"
      "ntMetaConfig\022F\n\013experiments\030\001 \003(\01321.ru.m"
      "ail.go.webbase.interleaving.ExperimentCo"
      "nfig\"\305\001\n\013MetricsTask\022\n\n\002id\030\001 \002(\r\022\014\n\004type"
      "\030\002 \002(\t\022\025\n\rexperiment_id\030\003 \002(\r\022\022\n\nstart_t"
      "ime\030\004 \002(\004\022\021\n\tstop_time\030\005 \002(\004\022\036\n\026confiden"
      "ce_coefficient\030\006 \001(\002\022\021\n\tfilter_rx\030\007 \001(\t\022"
      "\024\n\014queries_file\030\010 \001(\t\022\025\n\rsend_graphite\030\t"
      " \001(\010\"P\n\017MetricsMetaTask\022=\n\007metrics\030\001 \003(\013"
      "2,.ru.mail.go.webbase.interleaving.Metri"
      "csTask\"\364\001\n\014MetricResult\022\n\n\002id\030\001 \002(\005\022\r\n\005v"
      "alue\030\004 \002(\002\022\026\n\016confidence_max\030\005 \002(\002\022\026\n\016co"
      "nfidence_min\030\006 \002(\002\022\025\n\revents_number\030\007 \002("
      "\r\022\023\n\013reliability\030\010 \002(\002\022\034\n\024probability_A_"
      "better\030\t \001(\002\022\034\n\024probability_B_better\030\n \001"
      "(\002\022\016\n\006a_wins\030\013 \001(\r\022\016\n\006b_wins\030\014 \001(\r\022\021\n\tno"
      "_clicks\030\r \001(\r\"P\n\016MetricsResults\022>\n\007resul"
      "ts\030\001 \003(\0132-.ru.mail.go.webbase.interleavi"
      "ng.MetricResult\"\345\001\n\010DumpTask\022\n\n\002id\030\001 \002(\r"
      "\022\025\n\rexperiment_id\030\002 \002(\r\022\022\n\nstart_time\030\004 "
      "\002(\004\022\021\n\tstop_time\030\005 \002(\004\022\027\n\010max_logs\030\006 \001(\r"
      ":\00510000\022\021\n\tfilter_rx\030\007 \001(\t\022\027\n\017experiment"
      "_type\030\010 \001(\t\022\025\n\rwith_snippets\030\t \001(\010\022\023\n\013me"
      "tric_type\030\n \001(\t\022\014\n\004draw\030\013 \001(\010\022\020\n\010noclick"
      "s\030\014 \001(\010\"E\n\tDumpTasks\0228\n\005tasks\030\001 \003(\0132).ru"
      ".mail.go.webbase.interleaving.DumpTask\"*"
      "\n\nDumpResult\022\n\n\002id\030\001 \002(\r\022\020\n\010dump_url\030\002 \002"
      "(\t\"K\n\013DumpResults\022<\n\007results\030\001 \003(\0132+.ru."
      "mail.go.webbase.interleaving.DumpResult\""
      ",\n\014DumpProgress\022\n\n\002id\030\001 \002(\r\022\020\n\010progress\030"
      "\002 \002(\r\"P\n\rDumpsProgress\022\?\n\010progress\030\001 \003(\013"
      "2-.ru.mail.go.webbase.interleaving.DumpP"
      "rogress\"\215\006\n\010QueryLog\022\021\n\ttimestamp\030\001 \002(\004\022"
      "\013\n\003UID\030\002 \002(\t\022\013\n\003EID\030\003 \002(\r\022I\n\017showedDocum"
      "ents\030\004 \002(\01320.ru.mail.go.webbase.interlea"
      "ving.ShowedDocuments\0226\n\006clicks\030\005 \003(\0132&.r"
      "u.mail.go.webbase.interleaving.Click\022\r\n\005"
      "query\030\006 \001(\t\022\013\n\003rid\030\007 \001(\t\022\017\n\007queryId\030\010 \001("
      "\t\022\023\n\013rawGekkoLog\030\t \001(\t\022\024\n\014replyQuality\030\n"
      " \001(\002\022\026\n\016essrSourceType\030\013 \001(\t\022\026\n\016original"
      "_query\030\014 \001(\t\022\020\n\010spc_json\030\r \001(\t\022\025\n\nwebQua"
      "lity\030\016 \001(\002:\0011\0228\n\007actions\030\017 \003(\0132\'.ru.mail"
      ".go.webbase.interleaving.Action\022/\n\002qs\030\020 "
      "\003(\0132#.ru.mail.go.webbase.interleaving.Qs"
      "\022=\n\tsuggNavig\030\021 \001(\0132*.ru.mail.go.webbase"
      ".interleaving.SuggNavig\022>\n\nsuggNavigA\030\022 "
      "\001(\0132*.ru.mail.go.webbase.interleaving.Su"
      "ggNavig\022>\n\nsuggNavigB\030\023 \001(\0132*.ru.mail.go"
      ".webbase.interleaving.SuggNavig\022\014\n\004serp\030"
      "\024 \001(\t\0223\n\004play\030\025 \003(\0132%.ru.mail.go.webbase"
      ".interleaving.Play\022\027\n\017experimentdData\030\026 "
      "\001(\t\022\032\n\022use_whole_response\030\027 \001(\t\"[\n\017Showe"
      "dDocuments\022H\n\017showedDocuments\030\001 \003(\0132/.ru"
      ".mail.go.webbase.interleaving.ShowedDocu"
      "ment\"\276\001\n\016ShowedDocument\022\025\n\rshowed_from_a"
      "\030\001 \002(\010\022\022\n\nposition_a\030\002 \001(\r\022\022\n\nposition_b"
      "\030\003 \001(\r\022\034\n\024interleaved_position\030\004 \002(\r\022\017\n\007"
      "clicked\030\005 \001(\010\022\013\n\003url\030\006 \001(\t\022\020\n\010vertical\030\007"
      " \001(\t\022\021\n\tsm_weight\030\010 \001(\002\022\014\n\004rpos\030\t \001(\r\"Q\n"
      "\005Click\022\020\n\010position\030\001 \002(\r\022\022\n\ntime_delay\030\002"
      " \002(\r\022\014\n\004type\030\003 \001(\t\022\024\n\014sub_position\030\004 \001(\r"
      "\"Z\n\004Play\022\020\n\010position\030\001 \002(\r\022\022\n\ntime_delay"
      "\030\002 \002(\r\022\014\n\004time\030\003 \002(\r\022\020\n\010duration\030\004 \002(\r\022\014"
      "\n\004type\030\005 \001(\t\"\226\001\n\006Action\022:\n\004type\030\001 \002(\0162,."
      "ru.mail.go.webbase.interleaving.Action.T"
      "ype\022\020\n\010position\030\002 \002(\r\">\n\004Type\022\t\n\005CLICK\020\000"
      "\022\t\n\005SHARE\020\001\022\010\n\004LIKE\020\002\022\t\n\005CLOSE\020\003\022\013\n\007DISL"
      "IKE\020\004\"\265\001\n\004Serp\022\014\n\004urls\030\001 \003(\t\022>\n\004type\030\002 \002"
      "(\01620.ru.mail.go.webbase.interleaving.Ser"
      "p.SourceType\022\r\n\005query\030\003 \002(\t\022\017\n\007rb_code\030\004"
      " \002(\r\022\021\n\ttimestamp\030\005 \002(\004\",\n\nSourceType\022\t\n"
      "\005UNDEF\020\000\022\010\n\004YNDX\020\001\022\t\n\005GOOGL\020\002\"l\n\024EssrExp"
      "erimentResult\022\024\n\014metric_value\030\001 \002(\001\022\023\n\013a"
      "_win_count\030\002 \002(\r\022\023\n\013b_win_count\030\003 \002(\r\022\024\n"
      "\014events_count\030\004 \002(\r\"!\n\002Qs\022\014\n\004name\030\001 \002(\t\022"
      "\r\n\005value\030\002 \002(\t\"k\n\tSuggNavig\022\013\n\003url\030\001 \001(\t"
      "\022\r\n\005query\030\002 \001(\t\022\032\n\013has_favicon\030\003 \001(\010:\005fa"
      "lse\022\026\n\007clicked\030\004 \001(\010:\005false\022\016\n\006source\030\005 "
      "\001(\t\"*\n\tAlSession\022\014\n\004urls\030\001 \003(\t\022\017\n\004freq\030\002"
      " \001(\r:\0011\"\272\001\n\010AlSource\022B\n\004type\030\001 \002(\01624.ru."
      "mail.go.webbase.interleaving.AlSource.So"
      "urceType\022<\n\010sessions\030\002 \003(\0132*.ru.mail.go."
      "webbase.interleaving.AlSession\",\n\nSource"
      "Type\022\t\n\005UNDEF\020\000\022\010\n\004YNDX\020\001\022\t\n\005GOOGL\020\002\"i\n\013"
      "AlQueryData\022\r\n\005query\030\001 \002(\t\022\017\n\007rb_code\030\002 "
      "\002(\005\022:\n\007sources\030\003 \003(\0132).ru.mail.go.webbas"
      "e.interleaving.AlSource\"P\n\017AlQueryDataLi"
      "st\022=\n\007queries\030\001 \003(\0132,.ru.mail.go.webbase"
      ".interleaving.AlQueryData\"h\n\rDocumentSta"
      "ts\022\016\n\006showed\030\001 \002(\010\022\017\n\007clicked\030\002 \002(\010\022\021\n\ts"
      "atisfied\030\003 \002(\010\022\022\n\nlong_click\030\004 \002(\010\022\017\n\007sn"
      "ippet\030\005 \001(\tB\027B\025InterleavingSerpProto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4436);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "experiment.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_experiment_2eproto

const ::google::protobuf::EnumDescriptor* Action_Type_descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_enum_descriptors[0];
}
bool Action_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Action_Type Action::CLICK;
const Action_Type Action::SHARE;
const Action_Type Action::LIKE;
const Action_Type Action::CLOSE;
const Action_Type Action::DISLIKE;
const Action_Type Action::Type_MIN;
const Action_Type Action::Type_MAX;
const int Action::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Serp_SourceType_descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_enum_descriptors[1];
}
bool Serp_SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Serp_SourceType Serp::UNDEF;
const Serp_SourceType Serp::YNDX;
const Serp_SourceType Serp::GOOGL;
const Serp_SourceType Serp::SourceType_MIN;
const Serp_SourceType Serp::SourceType_MAX;
const int Serp::SourceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AlSource_SourceType_descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_enum_descriptors[2];
}
bool AlSource_SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AlSource_SourceType AlSource::UNDEF;
const AlSource_SourceType AlSource::YNDX;
const AlSource_SourceType AlSource::GOOGL;
const AlSource_SourceType AlSource::SourceType_MIN;
const AlSource_SourceType AlSource::SourceType_MAX;
const int AlSource::SourceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FailStat::kIdFieldNumber;
const int FailStat::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FailStat::FailStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.FailStat)
}
FailStat::FailStat(const FailStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.FailStat)
}

void FailStat::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
}

FailStat::~FailStat() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.FailStat)
  SharedDtor();
}

void FailStat::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FailStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FailStat::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FailStat& FailStat::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

FailStat* FailStat::New(::google::protobuf::Arena* arena) const {
  FailStat* n = new FailStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FailStat::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.FailStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FailStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.FailStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.FailStat.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.FailStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.FailStat)
  return false;
#undef DO_
}

void FailStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.FailStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.FailStat.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.FailStat)
}

::google::protobuf::uint8* FailStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.FailStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.FailStat.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.FailStat)
  return target;
}

size_t FailStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.FailStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  // optional uint32 count = 2;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FailStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.FailStat)
  GOOGLE_DCHECK_NE(&from, this);
  const FailStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FailStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.FailStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.FailStat)
    MergeFrom(*source);
  }
}

void FailStat::MergeFrom(const FailStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.FailStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FailStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.FailStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FailStat::CopyFrom(const FailStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.FailStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FailStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FailStat::Swap(FailStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FailStat::InternalSwap(FailStat* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FailStat::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FailStat

// required string id = 1;
bool FailStat::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FailStat::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FailStat::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FailStat::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& FailStat::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.FailStat.id)
  return id_.GetNoArena();
}
void FailStat::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.FailStat.id)
}
#if LANG_CXX11
void FailStat::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.FailStat.id)
}
#endif
void FailStat::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.FailStat.id)
}
void FailStat::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.FailStat.id)
}
::std::string* FailStat::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.FailStat.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FailStat::release_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.FailStat.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FailStat::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.FailStat.id)
}

// optional uint32 count = 2;
bool FailStat::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FailStat::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void FailStat::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void FailStat::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 FailStat::count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.FailStat.count)
  return count_;
}
void FailStat::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.FailStat.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExperimentStats::kIdFieldNumber;
const int ExperimentStats::kQueriesCountFieldNumber;
const int ExperimentStats::kFailedFieldNumber;
const int ExperimentStats::kFailReasonFieldNumber;
const int ExperimentStats::kTrialsCountFieldNumber;
const int ExperimentStats::kFailsCountFieldNumber;
const int ExperimentStats::kFailedAFieldNumber;
const int ExperimentStats::kFailedBFieldNumber;
const int ExperimentStats::kFailsStatFieldNumber;
const int ExperimentStats::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExperimentStats::ExperimentStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.ExperimentStats)
}
ExperimentStats::ExperimentStats(const ExperimentStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fails_stat_(from.fails_stat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fail_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fail_reason()) {
    fail_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fail_reason_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info()) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&failed_b_) -
    reinterpret_cast<char*>(&id_)) + sizeof(failed_b_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.ExperimentStats)
}

void ExperimentStats::SharedCtor() {
  _cached_size_ = 0;
  fail_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failed_b_) -
      reinterpret_cast<char*>(&id_)) + sizeof(failed_b_));
}

ExperimentStats::~ExperimentStats() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.ExperimentStats)
  SharedDtor();
}

void ExperimentStats::SharedDtor() {
  fail_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExperimentStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExperimentStats::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExperimentStats& ExperimentStats::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExperimentStats* ExperimentStats::New(::google::protobuf::Arena* arena) const {
  ExperimentStats* n = new ExperimentStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExperimentStats::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.ExperimentStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fails_stat_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!fail_reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fail_reason_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!info_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*info_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failed_a_) -
        reinterpret_cast<char*>(&id_)) + sizeof(failed_a_));
  }
  failed_b_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExperimentStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.ExperimentStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 queries_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_queries_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queries_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool failed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_failed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fail_reason = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fail_reason().data(), static_cast<int>(this->fail_reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trials_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_trials_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trials_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fails_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_fails_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fails_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 failed_a = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_failed_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &failed_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 failed_b = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_failed_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &failed_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.interleaving.FailStat fails_stat = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fails_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.ExperimentStats.info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.ExperimentStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.ExperimentStats)
  return false;
#undef DO_
}

void ExperimentStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.ExperimentStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 queries_count = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->queries_count(), output);
  }

  // required bool failed = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->failed(), output);
  }

  // optional string fail_reason = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fail_reason().data(), static_cast<int>(this->fail_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fail_reason(), output);
  }

  // optional uint32 trials_count = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->trials_count(), output);
  }

  // optional uint32 fails_count = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fails_count(), output);
  }

  // optional uint32 failed_a = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->failed_a(), output);
  }

  // optional uint32 failed_b = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->failed_b(), output);
  }

  // repeated .ru.mail.go.webbase.interleaving.FailStat fails_stat = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fails_stat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->fails_stat(static_cast<int>(i)), output);
  }

  // optional string info = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentStats.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.ExperimentStats)
}

::google::protobuf::uint8* ExperimentStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.ExperimentStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 queries_count = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->queries_count(), target);
  }

  // required bool failed = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->failed(), target);
  }

  // optional string fail_reason = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fail_reason().data(), static_cast<int>(this->fail_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fail_reason(), target);
  }

  // optional uint32 trials_count = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->trials_count(), target);
  }

  // optional uint32 fails_count = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fails_count(), target);
  }

  // optional uint32 failed_a = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->failed_a(), target);
  }

  // optional uint32 failed_b = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->failed_b(), target);
  }

  // repeated .ru.mail.go.webbase.interleaving.FailStat fails_stat = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fails_stat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->fails_stat(static_cast<int>(i)), deterministic, target);
  }

  // optional string info = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentStats.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.ExperimentStats)
  return target;
}

size_t ExperimentStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.ExperimentStats)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_queries_count()) {
    // required uint32 queries_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->queries_count());
  }

  if (has_failed()) {
    // required bool failed = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ExperimentStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.ExperimentStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 queries_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->queries_count());

    // required bool failed = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.webbase.interleaving.FailStat fails_stat = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->fails_stat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fails_stat(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string fail_reason = 4;
    if (has_fail_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_reason());
    }

    // optional string info = 10;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional uint32 trials_count = 5;
    if (has_trials_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trials_count());
    }

    // optional uint32 fails_count = 6;
    if (has_fails_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fails_count());
    }

    // optional uint32 failed_a = 7;
    if (has_failed_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->failed_a());
    }

  }
  // optional uint32 failed_b = 8;
  if (has_failed_b()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->failed_b());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExperimentStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.ExperimentStats)
  GOOGLE_DCHECK_NE(&from, this);
  const ExperimentStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExperimentStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.ExperimentStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.ExperimentStats)
    MergeFrom(*source);
  }
}

void ExperimentStats::MergeFrom(const ExperimentStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.ExperimentStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fails_stat_.MergeFrom(from.fails_stat_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fail_reason();
      fail_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fail_reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_info();
      info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      queries_count_ = from.queries_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      failed_ = from.failed_;
    }
    if (cached_has_bits & 0x00000020u) {
      trials_count_ = from.trials_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      fails_count_ = from.fails_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      failed_a_ = from.failed_a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_failed_b(from.failed_b());
  }
}

void ExperimentStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.ExperimentStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExperimentStats::CopyFrom(const ExperimentStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.ExperimentStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExperimentStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fails_stat())) return false;
  return true;
}

void ExperimentStats::Swap(ExperimentStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExperimentStats::InternalSwap(ExperimentStats* other) {
  using std::swap;
  fails_stat_.InternalSwap(&other->fails_stat_);
  fail_reason_.Swap(&other->fail_reason_);
  info_.Swap(&other->info_);
  swap(id_, other->id_);
  swap(queries_count_, other->queries_count_);
  swap(failed_, other->failed_);
  swap(trials_count_, other->trials_count_);
  swap(fails_count_, other->fails_count_);
  swap(failed_a_, other->failed_a_);
  swap(failed_b_, other->failed_b_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExperimentStats::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExperimentStats

// required uint32 id = 1;
bool ExperimentStats::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ExperimentStats::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ExperimentStats::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ExperimentStats::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 ExperimentStats::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.id)
  return id_;
}
void ExperimentStats::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.id)
}

// required uint32 queries_count = 2;
bool ExperimentStats::has_queries_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ExperimentStats::set_has_queries_count() {
  _has_bits_[0] |= 0x00000008u;
}
void ExperimentStats::clear_has_queries_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void ExperimentStats::clear_queries_count() {
  queries_count_ = 0u;
  clear_has_queries_count();
}
::google::protobuf::uint32 ExperimentStats::queries_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.queries_count)
  return queries_count_;
}
void ExperimentStats::set_queries_count(::google::protobuf::uint32 value) {
  set_has_queries_count();
  queries_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.queries_count)
}

// required bool failed = 3;
bool ExperimentStats::has_failed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ExperimentStats::set_has_failed() {
  _has_bits_[0] |= 0x00000010u;
}
void ExperimentStats::clear_has_failed() {
  _has_bits_[0] &= ~0x00000010u;
}
void ExperimentStats::clear_failed() {
  failed_ = false;
  clear_has_failed();
}
bool ExperimentStats::failed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.failed)
  return failed_;
}
void ExperimentStats::set_failed(bool value) {
  set_has_failed();
  failed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.failed)
}

// optional string fail_reason = 4;
bool ExperimentStats::has_fail_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExperimentStats::set_has_fail_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void ExperimentStats::clear_has_fail_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExperimentStats::clear_fail_reason() {
  fail_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fail_reason();
}
const ::std::string& ExperimentStats::fail_reason() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason)
  return fail_reason_.GetNoArena();
}
void ExperimentStats::set_fail_reason(const ::std::string& value) {
  set_has_fail_reason();
  fail_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason)
}
#if LANG_CXX11
void ExperimentStats::set_fail_reason(::std::string&& value) {
  set_has_fail_reason();
  fail_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason)
}
#endif
void ExperimentStats::set_fail_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fail_reason();
  fail_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason)
}
void ExperimentStats::set_fail_reason(const char* value, size_t size) {
  set_has_fail_reason();
  fail_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason)
}
::std::string* ExperimentStats::mutable_fail_reason() {
  set_has_fail_reason();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason)
  return fail_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExperimentStats::release_fail_reason() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason)
  clear_has_fail_reason();
  return fail_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExperimentStats::set_allocated_fail_reason(::std::string* fail_reason) {
  if (fail_reason != NULL) {
    set_has_fail_reason();
  } else {
    clear_has_fail_reason();
  }
  fail_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fail_reason);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason)
}

// optional uint32 trials_count = 5;
bool ExperimentStats::has_trials_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ExperimentStats::set_has_trials_count() {
  _has_bits_[0] |= 0x00000020u;
}
void ExperimentStats::clear_has_trials_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void ExperimentStats::clear_trials_count() {
  trials_count_ = 0u;
  clear_has_trials_count();
}
::google::protobuf::uint32 ExperimentStats::trials_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.trials_count)
  return trials_count_;
}
void ExperimentStats::set_trials_count(::google::protobuf::uint32 value) {
  set_has_trials_count();
  trials_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.trials_count)
}

// optional uint32 fails_count = 6;
bool ExperimentStats::has_fails_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ExperimentStats::set_has_fails_count() {
  _has_bits_[0] |= 0x00000040u;
}
void ExperimentStats::clear_has_fails_count() {
  _has_bits_[0] &= ~0x00000040u;
}
void ExperimentStats::clear_fails_count() {
  fails_count_ = 0u;
  clear_has_fails_count();
}
::google::protobuf::uint32 ExperimentStats::fails_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.fails_count)
  return fails_count_;
}
void ExperimentStats::set_fails_count(::google::protobuf::uint32 value) {
  set_has_fails_count();
  fails_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.fails_count)
}

// optional uint32 failed_a = 7;
bool ExperimentStats::has_failed_a() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ExperimentStats::set_has_failed_a() {
  _has_bits_[0] |= 0x00000080u;
}
void ExperimentStats::clear_has_failed_a() {
  _has_bits_[0] &= ~0x00000080u;
}
void ExperimentStats::clear_failed_a() {
  failed_a_ = 0u;
  clear_has_failed_a();
}
::google::protobuf::uint32 ExperimentStats::failed_a() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.failed_a)
  return failed_a_;
}
void ExperimentStats::set_failed_a(::google::protobuf::uint32 value) {
  set_has_failed_a();
  failed_a_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.failed_a)
}

// optional uint32 failed_b = 8;
bool ExperimentStats::has_failed_b() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ExperimentStats::set_has_failed_b() {
  _has_bits_[0] |= 0x00000100u;
}
void ExperimentStats::clear_has_failed_b() {
  _has_bits_[0] &= ~0x00000100u;
}
void ExperimentStats::clear_failed_b() {
  failed_b_ = 0u;
  clear_has_failed_b();
}
::google::protobuf::uint32 ExperimentStats::failed_b() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.failed_b)
  return failed_b_;
}
void ExperimentStats::set_failed_b(::google::protobuf::uint32 value) {
  set_has_failed_b();
  failed_b_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.failed_b)
}

// repeated .ru.mail.go.webbase.interleaving.FailStat fails_stat = 9;
int ExperimentStats::fails_stat_size() const {
  return fails_stat_.size();
}
void ExperimentStats::clear_fails_stat() {
  fails_stat_.Clear();
}
const ::ru::mail::go::webbase::interleaving::FailStat& ExperimentStats::fails_stat(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.fails_stat)
  return fails_stat_.Get(index);
}
::ru::mail::go::webbase::interleaving::FailStat* ExperimentStats::mutable_fails_stat(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentStats.fails_stat)
  return fails_stat_.Mutable(index);
}
::ru::mail::go::webbase::interleaving::FailStat* ExperimentStats::add_fails_stat() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.ExperimentStats.fails_stat)
  return fails_stat_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::FailStat >*
ExperimentStats::mutable_fails_stat() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.ExperimentStats.fails_stat)
  return &fails_stat_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::FailStat >&
ExperimentStats::fails_stat() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.ExperimentStats.fails_stat)
  return fails_stat_;
}

// optional string info = 10;
bool ExperimentStats::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExperimentStats::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
void ExperimentStats::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExperimentStats::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info();
}
const ::std::string& ExperimentStats::info() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.info)
  return info_.GetNoArena();
}
void ExperimentStats::set_info(const ::std::string& value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.info)
}
#if LANG_CXX11
void ExperimentStats::set_info(::std::string&& value) {
  set_has_info();
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentStats.info)
}
#endif
void ExperimentStats::set_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentStats.info)
}
void ExperimentStats::set_info(const char* value, size_t size) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentStats.info)
}
::std::string* ExperimentStats::mutable_info() {
  set_has_info();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentStats.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExperimentStats::release_info() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentStats.info)
  clear_has_info();
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExperimentStats::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    set_has_info();
  } else {
    clear_has_info();
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentStats.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExperimentStatsList::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExperimentStatsList::ExperimentStatsList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.ExperimentStatsList)
}
ExperimentStatsList::ExperimentStatsList(const ExperimentStatsList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.ExperimentStatsList)
}

void ExperimentStatsList::SharedCtor() {
  _cached_size_ = 0;
}

ExperimentStatsList::~ExperimentStatsList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.ExperimentStatsList)
  SharedDtor();
}

void ExperimentStatsList::SharedDtor() {
}

void ExperimentStatsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExperimentStatsList::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExperimentStatsList& ExperimentStatsList::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExperimentStatsList* ExperimentStatsList::New(::google::protobuf::Arena* arena) const {
  ExperimentStatsList* n = new ExperimentStatsList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExperimentStatsList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.ExperimentStatsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExperimentStatsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.ExperimentStatsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.interleaving.ExperimentStats stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.ExperimentStatsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.ExperimentStatsList)
  return false;
#undef DO_
}

void ExperimentStatsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.ExperimentStatsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.ExperimentStats stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stats(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.ExperimentStatsList)
}

::google::protobuf::uint8* ExperimentStatsList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.ExperimentStatsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.ExperimentStats stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->stats(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.ExperimentStatsList)
  return target;
}

size_t ExperimentStatsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.ExperimentStatsList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.interleaving.ExperimentStats stats = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExperimentStatsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.ExperimentStatsList)
  GOOGLE_DCHECK_NE(&from, this);
  const ExperimentStatsList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExperimentStatsList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.ExperimentStatsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.ExperimentStatsList)
    MergeFrom(*source);
  }
}

void ExperimentStatsList::MergeFrom(const ExperimentStatsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.ExperimentStatsList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
}

void ExperimentStatsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.ExperimentStatsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExperimentStatsList::CopyFrom(const ExperimentStatsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.ExperimentStatsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExperimentStatsList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->stats())) return false;
  return true;
}

void ExperimentStatsList::Swap(ExperimentStatsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExperimentStatsList::InternalSwap(ExperimentStatsList* other) {
  using std::swap;
  stats_.InternalSwap(&other->stats_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExperimentStatsList::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExperimentStatsList

// repeated .ru.mail.go.webbase.interleaving.ExperimentStats stats = 1;
int ExperimentStatsList::stats_size() const {
  return stats_.size();
}
void ExperimentStatsList::clear_stats() {
  stats_.Clear();
}
const ::ru::mail::go::webbase::interleaving::ExperimentStats& ExperimentStatsList::stats(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStatsList.stats)
  return stats_.Get(index);
}
::ru::mail::go::webbase::interleaving::ExperimentStats* ExperimentStatsList::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentStatsList.stats)
  return stats_.Mutable(index);
}
::ru::mail::go::webbase::interleaving::ExperimentStats* ExperimentStatsList::add_stats() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.ExperimentStatsList.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ExperimentStats >*
ExperimentStatsList::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.ExperimentStatsList.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ExperimentStats >&
ExperimentStatsList::stats() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.ExperimentStatsList.stats)
  return stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExperimentConfig::kIdFieldNumber;
const int ExperimentConfig::kTypeFieldNumber;
const int ExperimentConfig::kSourceATypeFieldNumber;
const int ExperimentConfig::kSourceBTypeFieldNumber;
const int ExperimentConfig::kSourceAConfigFieldNumber;
const int ExperimentConfig::kSourceBConfigFieldNumber;
const int ExperimentConfig::kQueriesFilterFieldNumber;
const int ExperimentConfig::kMinPerDayFieldNumber;
const int ExperimentConfig::kMaxPerDayFieldNumber;
const int ExperimentConfig::kPriorityFieldNumber;
const int ExperimentConfig::kStartDateFieldNumber;
const int ExperimentConfig::kQuotaAllFieldNumber;
const int ExperimentConfig::kQueriesFileFieldNumber;
const int ExperimentConfig::kHomerLocationFieldNumber;
const int ExperimentConfig::kAeSetNameFieldNumber;
const int ExperimentConfig::kMaxSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExperimentConfig::ExperimentConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.ExperimentConfig)
}
ExperimentConfig::ExperimentConfig(const ExperimentConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  source_a_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_a_type()) {
    source_a_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_a_type_);
  }
  source_b_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_b_type()) {
    source_b_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_b_type_);
  }
  source_a_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_a_config()) {
    source_a_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_a_config_);
  }
  source_b_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_b_config()) {
    source_b_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_b_config_);
  }
  queries_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_queries_filter()) {
    queries_filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queries_filter_);
  }
  queries_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_queries_file()) {
    queries_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queries_file_);
  }
  homer_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_homer_location()) {
    homer_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.homer_location_);
  }
  ae_set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ae_set_name()) {
    ae_set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ae_set_name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_sessions_) -
    reinterpret_cast<char*>(&id_)) + sizeof(max_sessions_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.ExperimentConfig)
}

void ExperimentConfig::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_a_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_b_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_a_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_b_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queries_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queries_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  homer_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ae_set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_sessions_) -
      reinterpret_cast<char*>(&id_)) + sizeof(max_sessions_));
}

ExperimentConfig::~ExperimentConfig() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.ExperimentConfig)
  SharedDtor();
}

void ExperimentConfig::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_a_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_b_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_a_config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_b_config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queries_filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queries_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  homer_location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ae_set_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExperimentConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExperimentConfig::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExperimentConfig& ExperimentConfig::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExperimentConfig* ExperimentConfig::New(::google::protobuf::Arena* arena) const {
  ExperimentConfig* n = new ExperimentConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExperimentConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.ExperimentConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!source_a_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_a_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!source_b_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_b_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!source_a_config_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_a_config_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!source_b_config_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_b_config_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!queries_filter_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*queries_filter_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!queries_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*queries_file_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!homer_location_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*homer_location_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(!ae_set_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ae_set_name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 65024u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_sessions_) -
        reinterpret_cast<char*>(&id_)) + sizeof(max_sessions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExperimentConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.ExperimentConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.ExperimentConfig.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string source_a_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_a_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_a_type().data(), static_cast<int>(this->source_a_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string source_b_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_b_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_b_type().data(), static_cast<int>(this->source_b_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source_a_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_a_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_a_config().data(), static_cast<int>(this->source_a_config().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source_b_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_b_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_b_config().data(), static_cast<int>(this->source_b_config().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string queries_filter = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queries_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queries_filter().data(), static_cast<int>(this->queries_filter().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 min_per_day = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_min_per_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_per_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 max_per_day = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_max_per_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_per_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 priority = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 start_date = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_start_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool quota_all = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_quota_all();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &quota_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string queries_file = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queries_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queries_file().data(), static_cast<int>(this->queries_file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string homer_location = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_homer_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->homer_location().data(), static_cast<int>(this->homer_location().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ae_set_name = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ae_set_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ae_set_name().data(), static_cast<int>(this->ae_set_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_sessions = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_max_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.ExperimentConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.ExperimentConfig)
  return false;
#undef DO_
}

void ExperimentConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.ExperimentConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // required string source_a_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_a_type().data(), static_cast<int>(this->source_a_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source_a_type(), output);
  }

  // required string source_b_type = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_b_type().data(), static_cast<int>(this->source_b_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->source_b_type(), output);
  }

  // optional string source_a_config = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_a_config().data(), static_cast<int>(this->source_a_config().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source_a_config(), output);
  }

  // optional string source_b_config = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_b_config().data(), static_cast<int>(this->source_b_config().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->source_b_config(), output);
  }

  // optional string queries_filter = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queries_filter().data(), static_cast<int>(this->queries_filter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->queries_filter(), output);
  }

  // required uint32 min_per_day = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->min_per_day(), output);
  }

  // required uint32 max_per_day = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->max_per_day(), output);
  }

  // required uint32 priority = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->priority(), output);
  }

  // required uint32 start_date = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->start_date(), output);
  }

  // optional bool quota_all = 12 [default = false];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->quota_all(), output);
  }

  // optional string queries_file = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queries_file().data(), static_cast<int>(this->queries_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->queries_file(), output);
  }

  // optional string homer_location = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->homer_location().data(), static_cast<int>(this->homer_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->homer_location(), output);
  }

  // optional string ae_set_name = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ae_set_name().data(), static_cast<int>(this->ae_set_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->ae_set_name(), output);
  }

  // optional uint32 max_sessions = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->max_sessions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.ExperimentConfig)
}

::google::protobuf::uint8* ExperimentConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.ExperimentConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required string source_a_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_a_type().data(), static_cast<int>(this->source_a_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source_a_type(), target);
  }

  // required string source_b_type = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_b_type().data(), static_cast<int>(this->source_b_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->source_b_type(), target);
  }

  // optional string source_a_config = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_a_config().data(), static_cast<int>(this->source_a_config().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->source_a_config(), target);
  }

  // optional string source_b_config = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_b_config().data(), static_cast<int>(this->source_b_config().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->source_b_config(), target);
  }

  // optional string queries_filter = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queries_filter().data(), static_cast<int>(this->queries_filter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->queries_filter(), target);
  }

  // required uint32 min_per_day = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->min_per_day(), target);
  }

  // required uint32 max_per_day = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->max_per_day(), target);
  }

  // required uint32 priority = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->priority(), target);
  }

  // required uint32 start_date = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->start_date(), target);
  }

  // optional bool quota_all = 12 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->quota_all(), target);
  }

  // optional string queries_file = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queries_file().data(), static_cast<int>(this->queries_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->queries_file(), target);
  }

  // optional string homer_location = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->homer_location().data(), static_cast<int>(this->homer_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->homer_location(), target);
  }

  // optional string ae_set_name = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ae_set_name().data(), static_cast<int>(this->ae_set_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->ae_set_name(), target);
  }

  // optional uint32 max_sessions = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->max_sessions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.ExperimentConfig)
  return target;
}

size_t ExperimentConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.ExperimentConfig)
  size_t total_size = 0;

  if (has_type()) {
    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_source_a_type()) {
    // required string source_a_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_a_type());
  }

  if (has_source_b_type()) {
    // required string source_b_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_b_type());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_min_per_day()) {
    // required uint32 min_per_day = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min_per_day());
  }

  if (has_max_per_day()) {
    // required uint32 max_per_day = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_per_day());
  }

  if (has_priority()) {
    // required uint32 priority = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priority());
  }

  if (has_start_date()) {
    // required uint32 start_date = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_date());
  }

  return total_size;
}
size_t ExperimentConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.ExperimentConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00003e07) ^ 0x00003e07) == 0) {  // All required fields are present.
    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required string source_a_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_a_type());

    // required string source_b_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_b_type());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 min_per_day = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min_per_day());

    // required uint32 max_per_day = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_per_day());

    // required uint32 priority = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priority());

    // required uint32 start_date = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_date());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 248u) {
    // optional string source_a_config = 5;
    if (has_source_a_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_a_config());
    }

    // optional string source_b_config = 6;
    if (has_source_b_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_b_config());
    }

    // optional string queries_filter = 7;
    if (has_queries_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queries_filter());
    }

    // optional string queries_file = 13;
    if (has_queries_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queries_file());
    }

    // optional string homer_location = 14;
    if (has_homer_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->homer_location());
    }

  }
  // optional string ae_set_name = 15;
  if (has_ae_set_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ae_set_name());
  }

  if (_has_bits_[8 / 32] & 49152u) {
    // optional bool quota_all = 12 [default = false];
    if (has_quota_all()) {
      total_size += 1 + 1;
    }

    // optional uint32 max_sessions = 16;
    if (has_max_sessions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_sessions());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExperimentConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.ExperimentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ExperimentConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExperimentConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.ExperimentConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.ExperimentConfig)
    MergeFrom(*source);
  }
}

void ExperimentConfig::MergeFrom(const ExperimentConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.ExperimentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_source_a_type();
      source_a_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_a_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_source_b_type();
      source_b_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_b_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_source_a_config();
      source_a_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_a_config_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_source_b_config();
      source_b_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_b_config_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_queries_filter();
      queries_filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queries_filter_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_queries_file();
      queries_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queries_file_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_homer_location();
      homer_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.homer_location_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_ae_set_name();
      ae_set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ae_set_name_);
    }
    if (cached_has_bits & 0x00000200u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000400u) {
      min_per_day_ = from.min_per_day_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_per_day_ = from.max_per_day_;
    }
    if (cached_has_bits & 0x00001000u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00002000u) {
      start_date_ = from.start_date_;
    }
    if (cached_has_bits & 0x00004000u) {
      quota_all_ = from.quota_all_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_sessions_ = from.max_sessions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExperimentConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.ExperimentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExperimentConfig::CopyFrom(const ExperimentConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.ExperimentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExperimentConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003e07) != 0x00003e07) return false;
  return true;
}

void ExperimentConfig::Swap(ExperimentConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExperimentConfig::InternalSwap(ExperimentConfig* other) {
  using std::swap;
  type_.Swap(&other->type_);
  source_a_type_.Swap(&other->source_a_type_);
  source_b_type_.Swap(&other->source_b_type_);
  source_a_config_.Swap(&other->source_a_config_);
  source_b_config_.Swap(&other->source_b_config_);
  queries_filter_.Swap(&other->queries_filter_);
  queries_file_.Swap(&other->queries_file_);
  homer_location_.Swap(&other->homer_location_);
  ae_set_name_.Swap(&other->ae_set_name_);
  swap(id_, other->id_);
  swap(min_per_day_, other->min_per_day_);
  swap(max_per_day_, other->max_per_day_);
  swap(priority_, other->priority_);
  swap(start_date_, other->start_date_);
  swap(quota_all_, other->quota_all_);
  swap(max_sessions_, other->max_sessions_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExperimentConfig::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExperimentConfig

// required uint32 id = 1;
bool ExperimentConfig::has_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ExperimentConfig::set_has_id() {
  _has_bits_[0] |= 0x00000200u;
}
void ExperimentConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void ExperimentConfig::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 ExperimentConfig::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.id)
  return id_;
}
void ExperimentConfig::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.id)
}

// required string type = 2;
bool ExperimentConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExperimentConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ExperimentConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExperimentConfig::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& ExperimentConfig::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.type)
  return type_.GetNoArena();
}
void ExperimentConfig::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.type)
}
#if LANG_CXX11
void ExperimentConfig::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.type)
}
#endif
void ExperimentConfig::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.type)
}
void ExperimentConfig::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.type)
}
::std::string* ExperimentConfig::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExperimentConfig::release_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExperimentConfig::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.type)
}

// required string source_a_type = 3;
bool ExperimentConfig::has_source_a_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExperimentConfig::set_has_source_a_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ExperimentConfig::clear_has_source_a_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExperimentConfig::clear_source_a_type() {
  source_a_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_a_type();
}
const ::std::string& ExperimentConfig::source_a_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type)
  return source_a_type_.GetNoArena();
}
void ExperimentConfig::set_source_a_type(const ::std::string& value) {
  set_has_source_a_type();
  source_a_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type)
}
#if LANG_CXX11
void ExperimentConfig::set_source_a_type(::std::string&& value) {
  set_has_source_a_type();
  source_a_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type)
}
#endif
void ExperimentConfig::set_source_a_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_a_type();
  source_a_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type)
}
void ExperimentConfig::set_source_a_type(const char* value, size_t size) {
  set_has_source_a_type();
  source_a_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type)
}
::std::string* ExperimentConfig::mutable_source_a_type() {
  set_has_source_a_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type)
  return source_a_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExperimentConfig::release_source_a_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type)
  clear_has_source_a_type();
  return source_a_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExperimentConfig::set_allocated_source_a_type(::std::string* source_a_type) {
  if (source_a_type != NULL) {
    set_has_source_a_type();
  } else {
    clear_has_source_a_type();
  }
  source_a_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_a_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type)
}

// required string source_b_type = 4;
bool ExperimentConfig::has_source_b_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ExperimentConfig::set_has_source_b_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ExperimentConfig::clear_has_source_b_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ExperimentConfig::clear_source_b_type() {
  source_b_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_b_type();
}
const ::std::string& ExperimentConfig::source_b_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type)
  return source_b_type_.GetNoArena();
}
void ExperimentConfig::set_source_b_type(const ::std::string& value) {
  set_has_source_b_type();
  source_b_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type)
}
#if LANG_CXX11
void ExperimentConfig::set_source_b_type(::std::string&& value) {
  set_has_source_b_type();
  source_b_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type)
}
#endif
void ExperimentConfig::set_source_b_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_b_type();
  source_b_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type)
}
void ExperimentConfig::set_source_b_type(const char* value, size_t size) {
  set_has_source_b_type();
  source_b_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type)
}
::std::string* ExperimentConfig::mutable_source_b_type() {
  set_has_source_b_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type)
  return source_b_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExperimentConfig::release_source_b_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type)
  clear_has_source_b_type();
  return source_b_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExperimentConfig::set_allocated_source_b_type(::std::string* source_b_type) {
  if (source_b_type != NULL) {
    set_has_source_b_type();
  } else {
    clear_has_source_b_type();
  }
  source_b_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_b_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type)
}

// optional string source_a_config = 5;
bool ExperimentConfig::has_source_a_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ExperimentConfig::set_has_source_a_config() {
  _has_bits_[0] |= 0x00000008u;
}
void ExperimentConfig::clear_has_source_a_config() {
  _has_bits_[0] &= ~0x00000008u;
}
void ExperimentConfig::clear_source_a_config() {
  source_a_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_a_config();
}
const ::std::string& ExperimentConfig::source_a_config() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config)
  return source_a_config_.GetNoArena();
}
void ExperimentConfig::set_source_a_config(const ::std::string& value) {
  set_has_source_a_config();
  source_a_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config)
}
#if LANG_CXX11
void ExperimentConfig::set_source_a_config(::std::string&& value) {
  set_has_source_a_config();
  source_a_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config)
}
#endif
void ExperimentConfig::set_source_a_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_a_config();
  source_a_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config)
}
void ExperimentConfig::set_source_a_config(const char* value, size_t size) {
  set_has_source_a_config();
  source_a_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config)
}
::std::string* ExperimentConfig::mutable_source_a_config() {
  set_has_source_a_config();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config)
  return source_a_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExperimentConfig::release_source_a_config() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config)
  clear_has_source_a_config();
  return source_a_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExperimentConfig::set_allocated_source_a_config(::std::string* source_a_config) {
  if (source_a_config != NULL) {
    set_has_source_a_config();
  } else {
    clear_has_source_a_config();
  }
  source_a_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_a_config);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config)
}

// optional string source_b_config = 6;
bool ExperimentConfig::has_source_b_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ExperimentConfig::set_has_source_b_config() {
  _has_bits_[0] |= 0x00000010u;
}
void ExperimentConfig::clear_has_source_b_config() {
  _has_bits_[0] &= ~0x00000010u;
}
void ExperimentConfig::clear_source_b_config() {
  source_b_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_b_config();
}
const ::std::string& ExperimentConfig::source_b_config() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config)
  return source_b_config_.GetNoArena();
}
void ExperimentConfig::set_source_b_config(const ::std::string& value) {
  set_has_source_b_config();
  source_b_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config)
}
#if LANG_CXX11
void ExperimentConfig::set_source_b_config(::std::string&& value) {
  set_has_source_b_config();
  source_b_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config)
}
#endif
void ExperimentConfig::set_source_b_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_b_config();
  source_b_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config)
}
void ExperimentConfig::set_source_b_config(const char* value, size_t size) {
  set_has_source_b_config();
  source_b_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config)
}
::std::string* ExperimentConfig::mutable_source_b_config() {
  set_has_source_b_config();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config)
  return source_b_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExperimentConfig::release_source_b_config() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config)
  clear_has_source_b_config();
  return source_b_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExperimentConfig::set_allocated_source_b_config(::std::string* source_b_config) {
  if (source_b_config != NULL) {
    set_has_source_b_config();
  } else {
    clear_has_source_b_config();
  }
  source_b_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_b_config);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config)
}

// optional string queries_filter = 7;
bool ExperimentConfig::has_queries_filter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ExperimentConfig::set_has_queries_filter() {
  _has_bits_[0] |= 0x00000020u;
}
void ExperimentConfig::clear_has_queries_filter() {
  _has_bits_[0] &= ~0x00000020u;
}
void ExperimentConfig::clear_queries_filter() {
  queries_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queries_filter();
}
const ::std::string& ExperimentConfig::queries_filter() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter)
  return queries_filter_.GetNoArena();
}
void ExperimentConfig::set_queries_filter(const ::std::string& value) {
  set_has_queries_filter();
  queries_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter)
}
#if LANG_CXX11
void ExperimentConfig::set_queries_filter(::std::string&& value) {
  set_has_queries_filter();
  queries_filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter)
}
#endif
void ExperimentConfig::set_queries_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_queries_filter();
  queries_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter)
}
void ExperimentConfig::set_queries_filter(const char* value, size_t size) {
  set_has_queries_filter();
  queries_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter)
}
::std::string* ExperimentConfig::mutable_queries_filter() {
  set_has_queries_filter();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter)
  return queries_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExperimentConfig::release_queries_filter() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter)
  clear_has_queries_filter();
  return queries_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExperimentConfig::set_allocated_queries_filter(::std::string* queries_filter) {
  if (queries_filter != NULL) {
    set_has_queries_filter();
  } else {
    clear_has_queries_filter();
  }
  queries_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queries_filter);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter)
}

// required uint32 min_per_day = 8;
bool ExperimentConfig::has_min_per_day() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ExperimentConfig::set_has_min_per_day() {
  _has_bits_[0] |= 0x00000400u;
}
void ExperimentConfig::clear_has_min_per_day() {
  _has_bits_[0] &= ~0x00000400u;
}
void ExperimentConfig::clear_min_per_day() {
  min_per_day_ = 0u;
  clear_has_min_per_day();
}
::google::protobuf::uint32 ExperimentConfig::min_per_day() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.min_per_day)
  return min_per_day_;
}
void ExperimentConfig::set_min_per_day(::google::protobuf::uint32 value) {
  set_has_min_per_day();
  min_per_day_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.min_per_day)
}

// required uint32 max_per_day = 9;
bool ExperimentConfig::has_max_per_day() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ExperimentConfig::set_has_max_per_day() {
  _has_bits_[0] |= 0x00000800u;
}
void ExperimentConfig::clear_has_max_per_day() {
  _has_bits_[0] &= ~0x00000800u;
}
void ExperimentConfig::clear_max_per_day() {
  max_per_day_ = 0u;
  clear_has_max_per_day();
}
::google::protobuf::uint32 ExperimentConfig::max_per_day() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.max_per_day)
  return max_per_day_;
}
void ExperimentConfig::set_max_per_day(::google::protobuf::uint32 value) {
  set_has_max_per_day();
  max_per_day_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.max_per_day)
}

// required uint32 priority = 10;
bool ExperimentConfig::has_priority() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ExperimentConfig::set_has_priority() {
  _has_bits_[0] |= 0x00001000u;
}
void ExperimentConfig::clear_has_priority() {
  _has_bits_[0] &= ~0x00001000u;
}
void ExperimentConfig::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
::google::protobuf::uint32 ExperimentConfig::priority() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.priority)
  return priority_;
}
void ExperimentConfig::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.priority)
}

// required uint32 start_date = 11;
bool ExperimentConfig::has_start_date() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ExperimentConfig::set_has_start_date() {
  _has_bits_[0] |= 0x00002000u;
}
void ExperimentConfig::clear_has_start_date() {
  _has_bits_[0] &= ~0x00002000u;
}
void ExperimentConfig::clear_start_date() {
  start_date_ = 0u;
  clear_has_start_date();
}
::google::protobuf::uint32 ExperimentConfig::start_date() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.start_date)
  return start_date_;
}
void ExperimentConfig::set_start_date(::google::protobuf::uint32 value) {
  set_has_start_date();
  start_date_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.start_date)
}

// optional bool quota_all = 12 [default = false];
bool ExperimentConfig::has_quota_all() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ExperimentConfig::set_has_quota_all() {
  _has_bits_[0] |= 0x00004000u;
}
void ExperimentConfig::clear_has_quota_all() {
  _has_bits_[0] &= ~0x00004000u;
}
void ExperimentConfig::clear_quota_all() {
  quota_all_ = false;
  clear_has_quota_all();
}
bool ExperimentConfig::quota_all() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.quota_all)
  return quota_all_;
}
void ExperimentConfig::set_quota_all(bool value) {
  set_has_quota_all();
  quota_all_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.quota_all)
}

// optional string queries_file = 13;
bool ExperimentConfig::has_queries_file() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ExperimentConfig::set_has_queries_file() {
  _has_bits_[0] |= 0x00000040u;
}
void ExperimentConfig::clear_has_queries_file() {
  _has_bits_[0] &= ~0x00000040u;
}
void ExperimentConfig::clear_queries_file() {
  queries_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queries_file();
}
const ::std::string& ExperimentConfig::queries_file() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file)
  return queries_file_.GetNoArena();
}
void ExperimentConfig::set_queries_file(const ::std::string& value) {
  set_has_queries_file();
  queries_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file)
}
#if LANG_CXX11
void ExperimentConfig::set_queries_file(::std::string&& value) {
  set_has_queries_file();
  queries_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file)
}
#endif
void ExperimentConfig::set_queries_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_queries_file();
  queries_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file)
}
void ExperimentConfig::set_queries_file(const char* value, size_t size) {
  set_has_queries_file();
  queries_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file)
}
::std::string* ExperimentConfig::mutable_queries_file() {
  set_has_queries_file();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file)
  return queries_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExperimentConfig::release_queries_file() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file)
  clear_has_queries_file();
  return queries_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExperimentConfig::set_allocated_queries_file(::std::string* queries_file) {
  if (queries_file != NULL) {
    set_has_queries_file();
  } else {
    clear_has_queries_file();
  }
  queries_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queries_file);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file)
}

// optional string homer_location = 14;
bool ExperimentConfig::has_homer_location() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ExperimentConfig::set_has_homer_location() {
  _has_bits_[0] |= 0x00000080u;
}
void ExperimentConfig::clear_has_homer_location() {
  _has_bits_[0] &= ~0x00000080u;
}
void ExperimentConfig::clear_homer_location() {
  homer_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_homer_location();
}
const ::std::string& ExperimentConfig::homer_location() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location)
  return homer_location_.GetNoArena();
}
void ExperimentConfig::set_homer_location(const ::std::string& value) {
  set_has_homer_location();
  homer_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location)
}
#if LANG_CXX11
void ExperimentConfig::set_homer_location(::std::string&& value) {
  set_has_homer_location();
  homer_location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location)
}
#endif
void ExperimentConfig::set_homer_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_homer_location();
  homer_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location)
}
void ExperimentConfig::set_homer_location(const char* value, size_t size) {
  set_has_homer_location();
  homer_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location)
}
::std::string* ExperimentConfig::mutable_homer_location() {
  set_has_homer_location();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location)
  return homer_location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExperimentConfig::release_homer_location() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location)
  clear_has_homer_location();
  return homer_location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExperimentConfig::set_allocated_homer_location(::std::string* homer_location) {
  if (homer_location != NULL) {
    set_has_homer_location();
  } else {
    clear_has_homer_location();
  }
  homer_location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), homer_location);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location)
}

// optional string ae_set_name = 15;
bool ExperimentConfig::has_ae_set_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ExperimentConfig::set_has_ae_set_name() {
  _has_bits_[0] |= 0x00000100u;
}
void ExperimentConfig::clear_has_ae_set_name() {
  _has_bits_[0] &= ~0x00000100u;
}
void ExperimentConfig::clear_ae_set_name() {
  ae_set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ae_set_name();
}
const ::std::string& ExperimentConfig::ae_set_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name)
  return ae_set_name_.GetNoArena();
}
void ExperimentConfig::set_ae_set_name(const ::std::string& value) {
  set_has_ae_set_name();
  ae_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name)
}
#if LANG_CXX11
void ExperimentConfig::set_ae_set_name(::std::string&& value) {
  set_has_ae_set_name();
  ae_set_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name)
}
#endif
void ExperimentConfig::set_ae_set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ae_set_name();
  ae_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name)
}
void ExperimentConfig::set_ae_set_name(const char* value, size_t size) {
  set_has_ae_set_name();
  ae_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name)
}
::std::string* ExperimentConfig::mutable_ae_set_name() {
  set_has_ae_set_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name)
  return ae_set_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExperimentConfig::release_ae_set_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name)
  clear_has_ae_set_name();
  return ae_set_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExperimentConfig::set_allocated_ae_set_name(::std::string* ae_set_name) {
  if (ae_set_name != NULL) {
    set_has_ae_set_name();
  } else {
    clear_has_ae_set_name();
  }
  ae_set_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ae_set_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name)
}

// optional uint32 max_sessions = 16;
bool ExperimentConfig::has_max_sessions() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ExperimentConfig::set_has_max_sessions() {
  _has_bits_[0] |= 0x00008000u;
}
void ExperimentConfig::clear_has_max_sessions() {
  _has_bits_[0] &= ~0x00008000u;
}
void ExperimentConfig::clear_max_sessions() {
  max_sessions_ = 0u;
  clear_has_max_sessions();
}
::google::protobuf::uint32 ExperimentConfig::max_sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.max_sessions)
  return max_sessions_;
}
void ExperimentConfig::set_max_sessions(::google::protobuf::uint32 value) {
  set_has_max_sessions();
  max_sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.max_sessions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExperimentMetaConfig::kExperimentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExperimentMetaConfig::ExperimentMetaConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
}
ExperimentMetaConfig::ExperimentMetaConfig(const ExperimentMetaConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      experiments_(from.experiments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
}

void ExperimentMetaConfig::SharedCtor() {
  _cached_size_ = 0;
}

ExperimentMetaConfig::~ExperimentMetaConfig() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
  SharedDtor();
}

void ExperimentMetaConfig::SharedDtor() {
}

void ExperimentMetaConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExperimentMetaConfig::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExperimentMetaConfig& ExperimentMetaConfig::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExperimentMetaConfig* ExperimentMetaConfig::New(::google::protobuf::Arena* arena) const {
  ExperimentMetaConfig* n = new ExperimentMetaConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExperimentMetaConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  experiments_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExperimentMetaConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.interleaving.ExperimentConfig experiments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_experiments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
  return false;
#undef DO_
}

void ExperimentMetaConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.ExperimentConfig experiments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->experiments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->experiments(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
}

::google::protobuf::uint8* ExperimentMetaConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.ExperimentConfig experiments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->experiments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->experiments(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
  return target;
}

size_t ExperimentMetaConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.interleaving.ExperimentConfig experiments = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->experiments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->experiments(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExperimentMetaConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ExperimentMetaConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExperimentMetaConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
    MergeFrom(*source);
  }
}

void ExperimentMetaConfig::MergeFrom(const ExperimentMetaConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  experiments_.MergeFrom(from.experiments_);
}

void ExperimentMetaConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExperimentMetaConfig::CopyFrom(const ExperimentMetaConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExperimentMetaConfig::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->experiments())) return false;
  return true;
}

void ExperimentMetaConfig::Swap(ExperimentMetaConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExperimentMetaConfig::InternalSwap(ExperimentMetaConfig* other) {
  using std::swap;
  experiments_.InternalSwap(&other->experiments_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExperimentMetaConfig::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExperimentMetaConfig

// repeated .ru.mail.go.webbase.interleaving.ExperimentConfig experiments = 1;
int ExperimentMetaConfig::experiments_size() const {
  return experiments_.size();
}
void ExperimentMetaConfig::clear_experiments() {
  experiments_.Clear();
}
const ::ru::mail::go::webbase::interleaving::ExperimentConfig& ExperimentMetaConfig::experiments(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentMetaConfig.experiments)
  return experiments_.Get(index);
}
::ru::mail::go::webbase::interleaving::ExperimentConfig* ExperimentMetaConfig::mutable_experiments(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentMetaConfig.experiments)
  return experiments_.Mutable(index);
}
::ru::mail::go::webbase::interleaving::ExperimentConfig* ExperimentMetaConfig::add_experiments() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.ExperimentMetaConfig.experiments)
  return experiments_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ExperimentConfig >*
ExperimentMetaConfig::mutable_experiments() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.ExperimentMetaConfig.experiments)
  return &experiments_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ExperimentConfig >&
ExperimentMetaConfig::experiments() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.ExperimentMetaConfig.experiments)
  return experiments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricsTask::kIdFieldNumber;
const int MetricsTask::kTypeFieldNumber;
const int MetricsTask::kExperimentIdFieldNumber;
const int MetricsTask::kStartTimeFieldNumber;
const int MetricsTask::kStopTimeFieldNumber;
const int MetricsTask::kConfidenceCoefficientFieldNumber;
const int MetricsTask::kFilterRxFieldNumber;
const int MetricsTask::kQueriesFileFieldNumber;
const int MetricsTask::kSendGraphiteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricsTask::MetricsTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.MetricsTask)
}
MetricsTask::MetricsTask(const MetricsTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  filter_rx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filter_rx()) {
    filter_rx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_rx_);
  }
  queries_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_queries_file()) {
    queries_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queries_file_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_graphite_) -
    reinterpret_cast<char*>(&id_)) + sizeof(send_graphite_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.MetricsTask)
}

void MetricsTask::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_rx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queries_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_graphite_) -
      reinterpret_cast<char*>(&id_)) + sizeof(send_graphite_));
}

MetricsTask::~MetricsTask() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.MetricsTask)
  SharedDtor();
}

void MetricsTask::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_rx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queries_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MetricsTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricsTask::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MetricsTask& MetricsTask::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

MetricsTask* MetricsTask::New(::google::protobuf::Arena* arena) const {
  MetricsTask* n = new MetricsTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetricsTask::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.MetricsTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!filter_rx_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filter_rx_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!queries_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*queries_file_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&confidence_coefficient_) -
        reinterpret_cast<char*>(&id_)) + sizeof(confidence_coefficient_));
  }
  send_graphite_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MetricsTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.MetricsTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.MetricsTask.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 experiment_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_experiment_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experiment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 stop_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_stop_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stop_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float confidence_coefficient = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_confidence_coefficient();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_coefficient_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filter_rx = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter_rx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filter_rx().data(), static_cast<int>(this->filter_rx().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.MetricsTask.filter_rx");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string queries_file = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queries_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queries_file().data(), static_cast<int>(this->queries_file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.MetricsTask.queries_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_graphite = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_send_graphite();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_graphite_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.MetricsTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.MetricsTask)
  return false;
#undef DO_
}

void MetricsTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.MetricsTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.MetricsTask.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // required uint32 experiment_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->experiment_id(), output);
  }

  // required uint64 start_time = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->start_time(), output);
  }

  // required uint64 stop_time = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->stop_time(), output);
  }

  // optional float confidence_coefficient = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->confidence_coefficient(), output);
  }

  // optional string filter_rx = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter_rx().data(), static_cast<int>(this->filter_rx().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.MetricsTask.filter_rx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filter_rx(), output);
  }

  // optional string queries_file = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queries_file().data(), static_cast<int>(this->queries_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.MetricsTask.queries_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->queries_file(), output);
  }

  // optional bool send_graphite = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->send_graphite(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.MetricsTask)
}

::google::protobuf::uint8* MetricsTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.MetricsTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.MetricsTask.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required uint32 experiment_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->experiment_id(), target);
  }

  // required uint64 start_time = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->start_time(), target);
  }

  // required uint64 stop_time = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->stop_time(), target);
  }

  // optional float confidence_coefficient = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->confidence_coefficient(), target);
  }

  // optional string filter_rx = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter_rx().data(), static_cast<int>(this->filter_rx().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.MetricsTask.filter_rx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filter_rx(), target);
  }

  // optional string queries_file = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queries_file().data(), static_cast<int>(this->queries_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.MetricsTask.queries_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->queries_file(), target);
  }

  // optional bool send_graphite = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->send_graphite(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.MetricsTask)
  return target;
}

size_t MetricsTask::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.MetricsTask)
  size_t total_size = 0;

  if (has_type()) {
    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_experiment_id()) {
    // required uint32 experiment_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->experiment_id());
  }

  if (has_start_time()) {
    // required uint64 start_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_time());
  }

  if (has_stop_time()) {
    // required uint64 stop_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stop_time());
  }

  return total_size;
}
size_t MetricsTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.MetricsTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000079) ^ 0x00000079) == 0) {  // All required fields are present.
    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 experiment_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->experiment_id());

    // required uint64 start_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_time());

    // required uint64 stop_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stop_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string filter_rx = 7;
    if (has_filter_rx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter_rx());
    }

    // optional string queries_file = 8;
    if (has_queries_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queries_file());
    }

  }
  // optional float confidence_coefficient = 6;
  if (has_confidence_coefficient()) {
    total_size += 1 + 4;
  }

  // optional bool send_graphite = 9;
  if (has_send_graphite()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricsTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.MetricsTask)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricsTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetricsTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.MetricsTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.MetricsTask)
    MergeFrom(*source);
  }
}

void MetricsTask::MergeFrom(const MetricsTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.MetricsTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_filter_rx();
      filter_rx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_rx_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_queries_file();
      queries_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queries_file_);
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      experiment_id_ = from.experiment_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      stop_time_ = from.stop_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      confidence_coefficient_ = from.confidence_coefficient_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_send_graphite(from.send_graphite());
  }
}

void MetricsTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.MetricsTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricsTask::CopyFrom(const MetricsTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.MetricsTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000079) != 0x00000079) return false;
  return true;
}

void MetricsTask::Swap(MetricsTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricsTask::InternalSwap(MetricsTask* other) {
  using std::swap;
  type_.Swap(&other->type_);
  filter_rx_.Swap(&other->filter_rx_);
  queries_file_.Swap(&other->queries_file_);
  swap(id_, other->id_);
  swap(experiment_id_, other->experiment_id_);
  swap(start_time_, other->start_time_);
  swap(stop_time_, other->stop_time_);
  swap(confidence_coefficient_, other->confidence_coefficient_);
  swap(send_graphite_, other->send_graphite_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetricsTask::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetricsTask

// required uint32 id = 1;
bool MetricsTask::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MetricsTask::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void MetricsTask::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void MetricsTask::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 MetricsTask::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.id)
  return id_;
}
void MetricsTask::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.id)
}

// required string type = 2;
bool MetricsTask::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MetricsTask::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void MetricsTask::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void MetricsTask::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& MetricsTask::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.type)
  return type_.GetNoArena();
}
void MetricsTask::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.type)
}
#if LANG_CXX11
void MetricsTask::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.MetricsTask.type)
}
#endif
void MetricsTask::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.MetricsTask.type)
}
void MetricsTask::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.MetricsTask.type)
}
::std::string* MetricsTask::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.MetricsTask.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetricsTask::release_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.MetricsTask.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricsTask::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.MetricsTask.type)
}

// required uint32 experiment_id = 3;
bool MetricsTask::has_experiment_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MetricsTask::set_has_experiment_id() {
  _has_bits_[0] |= 0x00000010u;
}
void MetricsTask::clear_has_experiment_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void MetricsTask::clear_experiment_id() {
  experiment_id_ = 0u;
  clear_has_experiment_id();
}
::google::protobuf::uint32 MetricsTask::experiment_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.experiment_id)
  return experiment_id_;
}
void MetricsTask::set_experiment_id(::google::protobuf::uint32 value) {
  set_has_experiment_id();
  experiment_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.experiment_id)
}

// required uint64 start_time = 4;
bool MetricsTask::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MetricsTask::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
void MetricsTask::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void MetricsTask::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
::google::protobuf::uint64 MetricsTask::start_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.start_time)
  return start_time_;
}
void MetricsTask::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.start_time)
}

// required uint64 stop_time = 5;
bool MetricsTask::has_stop_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MetricsTask::set_has_stop_time() {
  _has_bits_[0] |= 0x00000040u;
}
void MetricsTask::clear_has_stop_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void MetricsTask::clear_stop_time() {
  stop_time_ = GOOGLE_ULONGLONG(0);
  clear_has_stop_time();
}
::google::protobuf::uint64 MetricsTask::stop_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.stop_time)
  return stop_time_;
}
void MetricsTask::set_stop_time(::google::protobuf::uint64 value) {
  set_has_stop_time();
  stop_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.stop_time)
}

// optional float confidence_coefficient = 6;
bool MetricsTask::has_confidence_coefficient() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MetricsTask::set_has_confidence_coefficient() {
  _has_bits_[0] |= 0x00000080u;
}
void MetricsTask::clear_has_confidence_coefficient() {
  _has_bits_[0] &= ~0x00000080u;
}
void MetricsTask::clear_confidence_coefficient() {
  confidence_coefficient_ = 0;
  clear_has_confidence_coefficient();
}
float MetricsTask::confidence_coefficient() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.confidence_coefficient)
  return confidence_coefficient_;
}
void MetricsTask::set_confidence_coefficient(float value) {
  set_has_confidence_coefficient();
  confidence_coefficient_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.confidence_coefficient)
}

// optional string filter_rx = 7;
bool MetricsTask::has_filter_rx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MetricsTask::set_has_filter_rx() {
  _has_bits_[0] |= 0x00000002u;
}
void MetricsTask::clear_has_filter_rx() {
  _has_bits_[0] &= ~0x00000002u;
}
void MetricsTask::clear_filter_rx() {
  filter_rx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter_rx();
}
const ::std::string& MetricsTask::filter_rx() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.filter_rx)
  return filter_rx_.GetNoArena();
}
void MetricsTask::set_filter_rx(const ::std::string& value) {
  set_has_filter_rx();
  filter_rx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.filter_rx)
}
#if LANG_CXX11
void MetricsTask::set_filter_rx(::std::string&& value) {
  set_has_filter_rx();
  filter_rx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.MetricsTask.filter_rx)
}
#endif
void MetricsTask::set_filter_rx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filter_rx();
  filter_rx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.MetricsTask.filter_rx)
}
void MetricsTask::set_filter_rx(const char* value, size_t size) {
  set_has_filter_rx();
  filter_rx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.MetricsTask.filter_rx)
}
::std::string* MetricsTask::mutable_filter_rx() {
  set_has_filter_rx();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.MetricsTask.filter_rx)
  return filter_rx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetricsTask::release_filter_rx() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.MetricsTask.filter_rx)
  clear_has_filter_rx();
  return filter_rx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricsTask::set_allocated_filter_rx(::std::string* filter_rx) {
  if (filter_rx != NULL) {
    set_has_filter_rx();
  } else {
    clear_has_filter_rx();
  }
  filter_rx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter_rx);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.MetricsTask.filter_rx)
}

// optional string queries_file = 8;
bool MetricsTask::has_queries_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MetricsTask::set_has_queries_file() {
  _has_bits_[0] |= 0x00000004u;
}
void MetricsTask::clear_has_queries_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void MetricsTask::clear_queries_file() {
  queries_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queries_file();
}
const ::std::string& MetricsTask::queries_file() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.queries_file)
  return queries_file_.GetNoArena();
}
void MetricsTask::set_queries_file(const ::std::string& value) {
  set_has_queries_file();
  queries_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.queries_file)
}
#if LANG_CXX11
void MetricsTask::set_queries_file(::std::string&& value) {
  set_has_queries_file();
  queries_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.MetricsTask.queries_file)
}
#endif
void MetricsTask::set_queries_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_queries_file();
  queries_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.MetricsTask.queries_file)
}
void MetricsTask::set_queries_file(const char* value, size_t size) {
  set_has_queries_file();
  queries_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.MetricsTask.queries_file)
}
::std::string* MetricsTask::mutable_queries_file() {
  set_has_queries_file();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.MetricsTask.queries_file)
  return queries_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetricsTask::release_queries_file() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.MetricsTask.queries_file)
  clear_has_queries_file();
  return queries_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricsTask::set_allocated_queries_file(::std::string* queries_file) {
  if (queries_file != NULL) {
    set_has_queries_file();
  } else {
    clear_has_queries_file();
  }
  queries_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queries_file);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.MetricsTask.queries_file)
}

// optional bool send_graphite = 9;
bool MetricsTask::has_send_graphite() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MetricsTask::set_has_send_graphite() {
  _has_bits_[0] |= 0x00000100u;
}
void MetricsTask::clear_has_send_graphite() {
  _has_bits_[0] &= ~0x00000100u;
}
void MetricsTask::clear_send_graphite() {
  send_graphite_ = false;
  clear_has_send_graphite();
}
bool MetricsTask::send_graphite() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.send_graphite)
  return send_graphite_;
}
void MetricsTask::set_send_graphite(bool value) {
  set_has_send_graphite();
  send_graphite_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.send_graphite)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricsMetaTask::kMetricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricsMetaTask::MetricsMetaTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.MetricsMetaTask)
}
MetricsMetaTask::MetricsMetaTask(const MetricsMetaTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.MetricsMetaTask)
}

void MetricsMetaTask::SharedCtor() {
  _cached_size_ = 0;
}

MetricsMetaTask::~MetricsMetaTask() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.MetricsMetaTask)
  SharedDtor();
}

void MetricsMetaTask::SharedDtor() {
}

void MetricsMetaTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricsMetaTask::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MetricsMetaTask& MetricsMetaTask::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

MetricsMetaTask* MetricsMetaTask::New(::google::protobuf::Arena* arena) const {
  MetricsMetaTask* n = new MetricsMetaTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetricsMetaTask::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.MetricsMetaTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MetricsMetaTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.MetricsMetaTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.interleaving.MetricsTask metrics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.MetricsMetaTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.MetricsMetaTask)
  return false;
#undef DO_
}

void MetricsMetaTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.MetricsMetaTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.MetricsTask metrics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metrics(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.MetricsMetaTask)
}

::google::protobuf::uint8* MetricsMetaTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.MetricsMetaTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.MetricsTask metrics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->metrics(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.MetricsMetaTask)
  return target;
}

size_t MetricsMetaTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.MetricsMetaTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.interleaving.MetricsTask metrics = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->metrics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metrics(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricsMetaTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.MetricsMetaTask)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricsMetaTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetricsMetaTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.MetricsMetaTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.MetricsMetaTask)
    MergeFrom(*source);
  }
}

void MetricsMetaTask::MergeFrom(const MetricsMetaTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.MetricsMetaTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
}

void MetricsMetaTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.MetricsMetaTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricsMetaTask::CopyFrom(const MetricsMetaTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.MetricsMetaTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsMetaTask::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->metrics())) return false;
  return true;
}

void MetricsMetaTask::Swap(MetricsMetaTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricsMetaTask::InternalSwap(MetricsMetaTask* other) {
  using std::swap;
  metrics_.InternalSwap(&other->metrics_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetricsMetaTask::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetricsMetaTask

// repeated .ru.mail.go.webbase.interleaving.MetricsTask metrics = 1;
int MetricsMetaTask::metrics_size() const {
  return metrics_.size();
}
void MetricsMetaTask::clear_metrics() {
  metrics_.Clear();
}
const ::ru::mail::go::webbase::interleaving::MetricsTask& MetricsMetaTask::metrics(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsMetaTask.metrics)
  return metrics_.Get(index);
}
::ru::mail::go::webbase::interleaving::MetricsTask* MetricsMetaTask::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.MetricsMetaTask.metrics)
  return metrics_.Mutable(index);
}
::ru::mail::go::webbase::interleaving::MetricsTask* MetricsMetaTask::add_metrics() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.MetricsMetaTask.metrics)
  return metrics_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::MetricsTask >*
MetricsMetaTask::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.MetricsMetaTask.metrics)
  return &metrics_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::MetricsTask >&
MetricsMetaTask::metrics() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.MetricsMetaTask.metrics)
  return metrics_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricResult::kIdFieldNumber;
const int MetricResult::kValueFieldNumber;
const int MetricResult::kConfidenceMaxFieldNumber;
const int MetricResult::kConfidenceMinFieldNumber;
const int MetricResult::kEventsNumberFieldNumber;
const int MetricResult::kReliabilityFieldNumber;
const int MetricResult::kProbabilityABetterFieldNumber;
const int MetricResult::kProbabilityBBetterFieldNumber;
const int MetricResult::kAWinsFieldNumber;
const int MetricResult::kBWinsFieldNumber;
const int MetricResult::kNoClicksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricResult::MetricResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.MetricResult)
}
MetricResult::MetricResult(const MetricResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_clicks_) -
    reinterpret_cast<char*>(&id_)) + sizeof(no_clicks_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.MetricResult)
}

void MetricResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_clicks_) -
      reinterpret_cast<char*>(&id_)) + sizeof(no_clicks_));
}

MetricResult::~MetricResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.MetricResult)
  SharedDtor();
}

void MetricResult::SharedDtor() {
}

void MetricResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricResult::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MetricResult& MetricResult::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

MetricResult* MetricResult::New(::google::protobuf::Arena* arena) const {
  MetricResult* n = new MetricResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetricResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.MetricResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&probability_b_better_) -
        reinterpret_cast<char*>(&id_)) + sizeof(probability_b_better_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&a_wins_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&no_clicks_) -
        reinterpret_cast<char*>(&a_wins_)) + sizeof(no_clicks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MetricResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.MetricResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float confidence_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_confidence_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float confidence_min = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_confidence_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 events_number = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_events_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &events_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float reliability = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_reliability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reliability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float probability_A_better = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_probability_a_better();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_a_better_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float probability_B_better = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_probability_b_better();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_b_better_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 a_wins = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_a_wins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 b_wins = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_b_wins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 no_clicks = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_no_clicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &no_clicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.MetricResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.MetricResult)
  return false;
#undef DO_
}

void MetricResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.MetricResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required float value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->value(), output);
  }

  // required float confidence_max = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->confidence_max(), output);
  }

  // required float confidence_min = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->confidence_min(), output);
  }

  // required uint32 events_number = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->events_number(), output);
  }

  // required float reliability = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->reliability(), output);
  }

  // optional float probability_A_better = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->probability_a_better(), output);
  }

  // optional float probability_B_better = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->probability_b_better(), output);
  }

  // optional uint32 a_wins = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->a_wins(), output);
  }

  // optional uint32 b_wins = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->b_wins(), output);
  }

  // optional uint32 no_clicks = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->no_clicks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.MetricResult)
}

::google::protobuf::uint8* MetricResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.MetricResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required float value = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->value(), target);
  }

  // required float confidence_max = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->confidence_max(), target);
  }

  // required float confidence_min = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->confidence_min(), target);
  }

  // required uint32 events_number = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->events_number(), target);
  }

  // required float reliability = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->reliability(), target);
  }

  // optional float probability_A_better = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->probability_a_better(), target);
  }

  // optional float probability_B_better = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->probability_b_better(), target);
  }

  // optional uint32 a_wins = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->a_wins(), target);
  }

  // optional uint32 b_wins = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->b_wins(), target);
  }

  // optional uint32 no_clicks = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->no_clicks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.MetricResult)
  return target;
}

size_t MetricResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.MetricResult)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_value()) {
    // required float value = 4;
    total_size += 1 + 4;
  }

  if (has_confidence_max()) {
    // required float confidence_max = 5;
    total_size += 1 + 4;
  }

  if (has_confidence_min()) {
    // required float confidence_min = 6;
    total_size += 1 + 4;
  }

  if (has_events_number()) {
    // required uint32 events_number = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->events_number());
  }

  if (has_reliability()) {
    // required float reliability = 8;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MetricResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.MetricResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required float value = 4;
    total_size += 1 + 4;

    // required float confidence_max = 5;
    total_size += 1 + 4;

    // required float confidence_min = 6;
    total_size += 1 + 4;

    // required uint32 events_number = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->events_number());

    // required float reliability = 8;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional float probability_A_better = 9;
    if (has_probability_a_better()) {
      total_size += 1 + 4;
    }

    // optional float probability_B_better = 10;
    if (has_probability_b_better()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 a_wins = 11;
    if (has_a_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->a_wins());
    }

    // optional uint32 b_wins = 12;
    if (has_b_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->b_wins());
    }

    // optional uint32 no_clicks = 13;
    if (has_no_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->no_clicks());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.MetricResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetricResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.MetricResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.MetricResult)
    MergeFrom(*source);
  }
}

void MetricResult::MergeFrom(const MetricResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.MetricResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      confidence_max_ = from.confidence_max_;
    }
    if (cached_has_bits & 0x00000008u) {
      confidence_min_ = from.confidence_min_;
    }
    if (cached_has_bits & 0x00000010u) {
      events_number_ = from.events_number_;
    }
    if (cached_has_bits & 0x00000020u) {
      reliability_ = from.reliability_;
    }
    if (cached_has_bits & 0x00000040u) {
      probability_a_better_ = from.probability_a_better_;
    }
    if (cached_has_bits & 0x00000080u) {
      probability_b_better_ = from.probability_b_better_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      a_wins_ = from.a_wins_;
    }
    if (cached_has_bits & 0x00000200u) {
      b_wins_ = from.b_wins_;
    }
    if (cached_has_bits & 0x00000400u) {
      no_clicks_ = from.no_clicks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MetricResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.MetricResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricResult::CopyFrom(const MetricResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.MetricResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void MetricResult::Swap(MetricResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricResult::InternalSwap(MetricResult* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(value_, other->value_);
  swap(confidence_max_, other->confidence_max_);
  swap(confidence_min_, other->confidence_min_);
  swap(events_number_, other->events_number_);
  swap(reliability_, other->reliability_);
  swap(probability_a_better_, other->probability_a_better_);
  swap(probability_b_better_, other->probability_b_better_);
  swap(a_wins_, other->a_wins_);
  swap(b_wins_, other->b_wins_);
  swap(no_clicks_, other->no_clicks_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetricResult::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetricResult

// required int32 id = 1;
bool MetricResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MetricResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MetricResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MetricResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 MetricResult::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.id)
  return id_;
}
void MetricResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.id)
}

// required float value = 4;
bool MetricResult::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MetricResult::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void MetricResult::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void MetricResult::clear_value() {
  value_ = 0;
  clear_has_value();
}
float MetricResult::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.value)
  return value_;
}
void MetricResult::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.value)
}

// required float confidence_max = 5;
bool MetricResult::has_confidence_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MetricResult::set_has_confidence_max() {
  _has_bits_[0] |= 0x00000004u;
}
void MetricResult::clear_has_confidence_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void MetricResult::clear_confidence_max() {
  confidence_max_ = 0;
  clear_has_confidence_max();
}
float MetricResult::confidence_max() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.confidence_max)
  return confidence_max_;
}
void MetricResult::set_confidence_max(float value) {
  set_has_confidence_max();
  confidence_max_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.confidence_max)
}

// required float confidence_min = 6;
bool MetricResult::has_confidence_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MetricResult::set_has_confidence_min() {
  _has_bits_[0] |= 0x00000008u;
}
void MetricResult::clear_has_confidence_min() {
  _has_bits_[0] &= ~0x00000008u;
}
void MetricResult::clear_confidence_min() {
  confidence_min_ = 0;
  clear_has_confidence_min();
}
float MetricResult::confidence_min() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.confidence_min)
  return confidence_min_;
}
void MetricResult::set_confidence_min(float value) {
  set_has_confidence_min();
  confidence_min_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.confidence_min)
}

// required uint32 events_number = 7;
bool MetricResult::has_events_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MetricResult::set_has_events_number() {
  _has_bits_[0] |= 0x00000010u;
}
void MetricResult::clear_has_events_number() {
  _has_bits_[0] &= ~0x00000010u;
}
void MetricResult::clear_events_number() {
  events_number_ = 0u;
  clear_has_events_number();
}
::google::protobuf::uint32 MetricResult::events_number() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.events_number)
  return events_number_;
}
void MetricResult::set_events_number(::google::protobuf::uint32 value) {
  set_has_events_number();
  events_number_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.events_number)
}

// required float reliability = 8;
bool MetricResult::has_reliability() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MetricResult::set_has_reliability() {
  _has_bits_[0] |= 0x00000020u;
}
void MetricResult::clear_has_reliability() {
  _has_bits_[0] &= ~0x00000020u;
}
void MetricResult::clear_reliability() {
  reliability_ = 0;
  clear_has_reliability();
}
float MetricResult::reliability() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.reliability)
  return reliability_;
}
void MetricResult::set_reliability(float value) {
  set_has_reliability();
  reliability_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.reliability)
}

// optional float probability_A_better = 9;
bool MetricResult::has_probability_a_better() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MetricResult::set_has_probability_a_better() {
  _has_bits_[0] |= 0x00000040u;
}
void MetricResult::clear_has_probability_a_better() {
  _has_bits_[0] &= ~0x00000040u;
}
void MetricResult::clear_probability_a_better() {
  probability_a_better_ = 0;
  clear_has_probability_a_better();
}
float MetricResult::probability_a_better() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.probability_A_better)
  return probability_a_better_;
}
void MetricResult::set_probability_a_better(float value) {
  set_has_probability_a_better();
  probability_a_better_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.probability_A_better)
}

// optional float probability_B_better = 10;
bool MetricResult::has_probability_b_better() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MetricResult::set_has_probability_b_better() {
  _has_bits_[0] |= 0x00000080u;
}
void MetricResult::clear_has_probability_b_better() {
  _has_bits_[0] &= ~0x00000080u;
}
void MetricResult::clear_probability_b_better() {
  probability_b_better_ = 0;
  clear_has_probability_b_better();
}
float MetricResult::probability_b_better() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.probability_B_better)
  return probability_b_better_;
}
void MetricResult::set_probability_b_better(float value) {
  set_has_probability_b_better();
  probability_b_better_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.probability_B_better)
}

// optional uint32 a_wins = 11;
bool MetricResult::has_a_wins() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MetricResult::set_has_a_wins() {
  _has_bits_[0] |= 0x00000100u;
}
void MetricResult::clear_has_a_wins() {
  _has_bits_[0] &= ~0x00000100u;
}
void MetricResult::clear_a_wins() {
  a_wins_ = 0u;
  clear_has_a_wins();
}
::google::protobuf::uint32 MetricResult::a_wins() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.a_wins)
  return a_wins_;
}
void MetricResult::set_a_wins(::google::protobuf::uint32 value) {
  set_has_a_wins();
  a_wins_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.a_wins)
}

// optional uint32 b_wins = 12;
bool MetricResult::has_b_wins() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MetricResult::set_has_b_wins() {
  _has_bits_[0] |= 0x00000200u;
}
void MetricResult::clear_has_b_wins() {
  _has_bits_[0] &= ~0x00000200u;
}
void MetricResult::clear_b_wins() {
  b_wins_ = 0u;
  clear_has_b_wins();
}
::google::protobuf::uint32 MetricResult::b_wins() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.b_wins)
  return b_wins_;
}
void MetricResult::set_b_wins(::google::protobuf::uint32 value) {
  set_has_b_wins();
  b_wins_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.b_wins)
}

// optional uint32 no_clicks = 13;
bool MetricResult::has_no_clicks() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MetricResult::set_has_no_clicks() {
  _has_bits_[0] |= 0x00000400u;
}
void MetricResult::clear_has_no_clicks() {
  _has_bits_[0] &= ~0x00000400u;
}
void MetricResult::clear_no_clicks() {
  no_clicks_ = 0u;
  clear_has_no_clicks();
}
::google::protobuf::uint32 MetricResult::no_clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.no_clicks)
  return no_clicks_;
}
void MetricResult::set_no_clicks(::google::protobuf::uint32 value) {
  set_has_no_clicks();
  no_clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.no_clicks)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricsResults::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricsResults::MetricsResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.MetricsResults)
}
MetricsResults::MetricsResults(const MetricsResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.MetricsResults)
}

void MetricsResults::SharedCtor() {
  _cached_size_ = 0;
}

MetricsResults::~MetricsResults() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.MetricsResults)
  SharedDtor();
}

void MetricsResults::SharedDtor() {
}

void MetricsResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricsResults::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MetricsResults& MetricsResults::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

MetricsResults* MetricsResults::New(::google::protobuf::Arena* arena) const {
  MetricsResults* n = new MetricsResults;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetricsResults::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.MetricsResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MetricsResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.MetricsResults)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.interleaving.MetricResult results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.MetricsResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.MetricsResults)
  return false;
#undef DO_
}

void MetricsResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.MetricsResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.MetricResult results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.MetricsResults)
}

::google::protobuf::uint8* MetricsResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.MetricsResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.MetricResult results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->results(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.MetricsResults)
  return target;
}

size_t MetricsResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.MetricsResults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.interleaving.MetricResult results = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricsResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.MetricsResults)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricsResults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetricsResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.MetricsResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.MetricsResults)
    MergeFrom(*source);
  }
}

void MetricsResults::MergeFrom(const MetricsResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.MetricsResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void MetricsResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.MetricsResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricsResults::CopyFrom(const MetricsResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.MetricsResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsResults::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->results())) return false;
  return true;
}

void MetricsResults::Swap(MetricsResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricsResults::InternalSwap(MetricsResults* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetricsResults::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetricsResults

// repeated .ru.mail.go.webbase.interleaving.MetricResult results = 1;
int MetricsResults::results_size() const {
  return results_.size();
}
void MetricsResults::clear_results() {
  results_.Clear();
}
const ::ru::mail::go::webbase::interleaving::MetricResult& MetricsResults::results(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsResults.results)
  return results_.Get(index);
}
::ru::mail::go::webbase::interleaving::MetricResult* MetricsResults::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.MetricsResults.results)
  return results_.Mutable(index);
}
::ru::mail::go::webbase::interleaving::MetricResult* MetricsResults::add_results() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.MetricsResults.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::MetricResult >*
MetricsResults::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.MetricsResults.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::MetricResult >&
MetricsResults::results() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.MetricsResults.results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DumpTask::kIdFieldNumber;
const int DumpTask::kExperimentIdFieldNumber;
const int DumpTask::kStartTimeFieldNumber;
const int DumpTask::kStopTimeFieldNumber;
const int DumpTask::kMaxLogsFieldNumber;
const int DumpTask::kFilterRxFieldNumber;
const int DumpTask::kExperimentTypeFieldNumber;
const int DumpTask::kWithSnippetsFieldNumber;
const int DumpTask::kMetricTypeFieldNumber;
const int DumpTask::kDrawFieldNumber;
const int DumpTask::kNoclicksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DumpTask::DumpTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.DumpTask)
}
DumpTask::DumpTask(const DumpTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_rx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filter_rx()) {
    filter_rx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_rx_);
  }
  experiment_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_experiment_type()) {
    experiment_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.experiment_type_);
  }
  metric_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metric_type()) {
    metric_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metric_type_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_logs_) -
    reinterpret_cast<char*>(&id_)) + sizeof(max_logs_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.DumpTask)
}

void DumpTask::SharedCtor() {
  _cached_size_ = 0;
  filter_rx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  experiment_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&noclicks_) -
      reinterpret_cast<char*>(&id_)) + sizeof(noclicks_));
  max_logs_ = 10000u;
}

DumpTask::~DumpTask() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.DumpTask)
  SharedDtor();
}

void DumpTask::SharedDtor() {
  filter_rx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  experiment_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DumpTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpTask::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DumpTask& DumpTask::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

DumpTask* DumpTask::New(::google::protobuf::Arena* arena) const {
  DumpTask* n = new DumpTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DumpTask::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.DumpTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!filter_rx_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filter_rx_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!experiment_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*experiment_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!metric_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*metric_type_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&with_snippets_) -
        reinterpret_cast<char*>(&id_)) + sizeof(with_snippets_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&draw_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&noclicks_) -
        reinterpret_cast<char*>(&draw_)) + sizeof(noclicks_));
    max_logs_ = 10000u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DumpTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.DumpTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 experiment_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_experiment_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experiment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 stop_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_stop_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stop_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_logs = 6 [default = 10000];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_max_logs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_logs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filter_rx = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter_rx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filter_rx().data(), static_cast<int>(this->filter_rx().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.DumpTask.filter_rx");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string experiment_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_experiment_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->experiment_type().data(), static_cast<int>(this->experiment_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.DumpTask.experiment_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool with_snippets = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_with_snippets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_snippets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string metric_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metric_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metric_type().data(), static_cast<int>(this->metric_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.DumpTask.metric_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool draw = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_draw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &draw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool noclicks = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_noclicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &noclicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.DumpTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.DumpTask)
  return false;
#undef DO_
}

void DumpTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.DumpTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 experiment_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->experiment_id(), output);
  }

  // required uint64 start_time = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->start_time(), output);
  }

  // required uint64 stop_time = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->stop_time(), output);
  }

  // optional uint32 max_logs = 6 [default = 10000];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_logs(), output);
  }

  // optional string filter_rx = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter_rx().data(), static_cast<int>(this->filter_rx().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.DumpTask.filter_rx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filter_rx(), output);
  }

  // optional string experiment_type = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->experiment_type().data(), static_cast<int>(this->experiment_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.DumpTask.experiment_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->experiment_type(), output);
  }

  // optional bool with_snippets = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->with_snippets(), output);
  }

  // optional string metric_type = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metric_type().data(), static_cast<int>(this->metric_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.DumpTask.metric_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->metric_type(), output);
  }

  // optional bool draw = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->draw(), output);
  }

  // optional bool noclicks = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->noclicks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.DumpTask)
}

::google::protobuf::uint8* DumpTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.DumpTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 experiment_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->experiment_id(), target);
  }

  // required uint64 start_time = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->start_time(), target);
  }

  // required uint64 stop_time = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->stop_time(), target);
  }

  // optional uint32 max_logs = 6 [default = 10000];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_logs(), target);
  }

  // optional string filter_rx = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter_rx().data(), static_cast<int>(this->filter_rx().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.DumpTask.filter_rx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filter_rx(), target);
  }

  // optional string experiment_type = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->experiment_type().data(), static_cast<int>(this->experiment_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.DumpTask.experiment_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->experiment_type(), target);
  }

  // optional bool with_snippets = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->with_snippets(), target);
  }

  // optional string metric_type = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metric_type().data(), static_cast<int>(this->metric_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.DumpTask.metric_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->metric_type(), target);
  }

  // optional bool draw = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->draw(), target);
  }

  // optional bool noclicks = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->noclicks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.DumpTask)
  return target;
}

size_t DumpTask::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.DumpTask)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_experiment_id()) {
    // required uint32 experiment_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->experiment_id());
  }

  if (has_start_time()) {
    // required uint64 start_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_time());
  }

  if (has_stop_time()) {
    // required uint64 stop_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stop_time());
  }

  return total_size;
}
size_t DumpTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.DumpTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000078) ^ 0x00000078) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 experiment_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->experiment_id());

    // required uint64 start_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_time());

    // required uint64 stop_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stop_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string filter_rx = 7;
    if (has_filter_rx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter_rx());
    }

    // optional string experiment_type = 8;
    if (has_experiment_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->experiment_type());
    }

    // optional string metric_type = 10;
    if (has_metric_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metric_type());
    }

  }
  // optional bool with_snippets = 9;
  if (has_with_snippets()) {
    total_size += 1 + 1;
  }

  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool draw = 11;
    if (has_draw()) {
      total_size += 1 + 1;
    }

    // optional bool noclicks = 12;
    if (has_noclicks()) {
      total_size += 1 + 1;
    }

    // optional uint32 max_logs = 6 [default = 10000];
    if (has_max_logs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_logs());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.DumpTask)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DumpTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.DumpTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.DumpTask)
    MergeFrom(*source);
  }
}

void DumpTask::MergeFrom(const DumpTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.DumpTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filter_rx();
      filter_rx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_rx_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_experiment_type();
      experiment_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.experiment_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_metric_type();
      metric_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metric_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      experiment_id_ = from.experiment_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      stop_time_ = from.stop_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      with_snippets_ = from.with_snippets_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      draw_ = from.draw_;
    }
    if (cached_has_bits & 0x00000200u) {
      noclicks_ = from.noclicks_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_logs_ = from.max_logs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DumpTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.DumpTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpTask::CopyFrom(const DumpTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.DumpTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000078) != 0x00000078) return false;
  return true;
}

void DumpTask::Swap(DumpTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DumpTask::InternalSwap(DumpTask* other) {
  using std::swap;
  filter_rx_.Swap(&other->filter_rx_);
  experiment_type_.Swap(&other->experiment_type_);
  metric_type_.Swap(&other->metric_type_);
  swap(id_, other->id_);
  swap(experiment_id_, other->experiment_id_);
  swap(start_time_, other->start_time_);
  swap(stop_time_, other->stop_time_);
  swap(with_snippets_, other->with_snippets_);
  swap(draw_, other->draw_);
  swap(noclicks_, other->noclicks_);
  swap(max_logs_, other->max_logs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DumpTask::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DumpTask

// required uint32 id = 1;
bool DumpTask::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DumpTask::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void DumpTask::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void DumpTask::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 DumpTask::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.id)
  return id_;
}
void DumpTask::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.id)
}

// required uint32 experiment_id = 2;
bool DumpTask::has_experiment_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DumpTask::set_has_experiment_id() {
  _has_bits_[0] |= 0x00000010u;
}
void DumpTask::clear_has_experiment_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void DumpTask::clear_experiment_id() {
  experiment_id_ = 0u;
  clear_has_experiment_id();
}
::google::protobuf::uint32 DumpTask::experiment_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.experiment_id)
  return experiment_id_;
}
void DumpTask::set_experiment_id(::google::protobuf::uint32 value) {
  set_has_experiment_id();
  experiment_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.experiment_id)
}

// required uint64 start_time = 4;
bool DumpTask::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DumpTask::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
void DumpTask::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void DumpTask::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
::google::protobuf::uint64 DumpTask::start_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.start_time)
  return start_time_;
}
void DumpTask::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.start_time)
}

// required uint64 stop_time = 5;
bool DumpTask::has_stop_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DumpTask::set_has_stop_time() {
  _has_bits_[0] |= 0x00000040u;
}
void DumpTask::clear_has_stop_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void DumpTask::clear_stop_time() {
  stop_time_ = GOOGLE_ULONGLONG(0);
  clear_has_stop_time();
}
::google::protobuf::uint64 DumpTask::stop_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.stop_time)
  return stop_time_;
}
void DumpTask::set_stop_time(::google::protobuf::uint64 value) {
  set_has_stop_time();
  stop_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.stop_time)
}

// optional uint32 max_logs = 6 [default = 10000];
bool DumpTask::has_max_logs() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DumpTask::set_has_max_logs() {
  _has_bits_[0] |= 0x00000400u;
}
void DumpTask::clear_has_max_logs() {
  _has_bits_[0] &= ~0x00000400u;
}
void DumpTask::clear_max_logs() {
  max_logs_ = 10000u;
  clear_has_max_logs();
}
::google::protobuf::uint32 DumpTask::max_logs() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.max_logs)
  return max_logs_;
}
void DumpTask::set_max_logs(::google::protobuf::uint32 value) {
  set_has_max_logs();
  max_logs_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.max_logs)
}

// optional string filter_rx = 7;
bool DumpTask::has_filter_rx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DumpTask::set_has_filter_rx() {
  _has_bits_[0] |= 0x00000001u;
}
void DumpTask::clear_has_filter_rx() {
  _has_bits_[0] &= ~0x00000001u;
}
void DumpTask::clear_filter_rx() {
  filter_rx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter_rx();
}
const ::std::string& DumpTask::filter_rx() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.filter_rx)
  return filter_rx_.GetNoArena();
}
void DumpTask::set_filter_rx(const ::std::string& value) {
  set_has_filter_rx();
  filter_rx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.filter_rx)
}
#if LANG_CXX11
void DumpTask::set_filter_rx(::std::string&& value) {
  set_has_filter_rx();
  filter_rx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.DumpTask.filter_rx)
}
#endif
void DumpTask::set_filter_rx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filter_rx();
  filter_rx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.DumpTask.filter_rx)
}
void DumpTask::set_filter_rx(const char* value, size_t size) {
  set_has_filter_rx();
  filter_rx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.DumpTask.filter_rx)
}
::std::string* DumpTask::mutable_filter_rx() {
  set_has_filter_rx();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.DumpTask.filter_rx)
  return filter_rx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpTask::release_filter_rx() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.DumpTask.filter_rx)
  clear_has_filter_rx();
  return filter_rx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpTask::set_allocated_filter_rx(::std::string* filter_rx) {
  if (filter_rx != NULL) {
    set_has_filter_rx();
  } else {
    clear_has_filter_rx();
  }
  filter_rx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter_rx);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.DumpTask.filter_rx)
}

// optional string experiment_type = 8;
bool DumpTask::has_experiment_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DumpTask::set_has_experiment_type() {
  _has_bits_[0] |= 0x00000002u;
}
void DumpTask::clear_has_experiment_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void DumpTask::clear_experiment_type() {
  experiment_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_experiment_type();
}
const ::std::string& DumpTask::experiment_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.experiment_type)
  return experiment_type_.GetNoArena();
}
void DumpTask::set_experiment_type(const ::std::string& value) {
  set_has_experiment_type();
  experiment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.experiment_type)
}
#if LANG_CXX11
void DumpTask::set_experiment_type(::std::string&& value) {
  set_has_experiment_type();
  experiment_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.DumpTask.experiment_type)
}
#endif
void DumpTask::set_experiment_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_experiment_type();
  experiment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.DumpTask.experiment_type)
}
void DumpTask::set_experiment_type(const char* value, size_t size) {
  set_has_experiment_type();
  experiment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.DumpTask.experiment_type)
}
::std::string* DumpTask::mutable_experiment_type() {
  set_has_experiment_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.DumpTask.experiment_type)
  return experiment_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpTask::release_experiment_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.DumpTask.experiment_type)
  clear_has_experiment_type();
  return experiment_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpTask::set_allocated_experiment_type(::std::string* experiment_type) {
  if (experiment_type != NULL) {
    set_has_experiment_type();
  } else {
    clear_has_experiment_type();
  }
  experiment_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), experiment_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.DumpTask.experiment_type)
}

// optional bool with_snippets = 9;
bool DumpTask::has_with_snippets() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DumpTask::set_has_with_snippets() {
  _has_bits_[0] |= 0x00000080u;
}
void DumpTask::clear_has_with_snippets() {
  _has_bits_[0] &= ~0x00000080u;
}
void DumpTask::clear_with_snippets() {
  with_snippets_ = false;
  clear_has_with_snippets();
}
bool DumpTask::with_snippets() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.with_snippets)
  return with_snippets_;
}
void DumpTask::set_with_snippets(bool value) {
  set_has_with_snippets();
  with_snippets_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.with_snippets)
}

// optional string metric_type = 10;
bool DumpTask::has_metric_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DumpTask::set_has_metric_type() {
  _has_bits_[0] |= 0x00000004u;
}
void DumpTask::clear_has_metric_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void DumpTask::clear_metric_type() {
  metric_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metric_type();
}
const ::std::string& DumpTask::metric_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.metric_type)
  return metric_type_.GetNoArena();
}
void DumpTask::set_metric_type(const ::std::string& value) {
  set_has_metric_type();
  metric_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.metric_type)
}
#if LANG_CXX11
void DumpTask::set_metric_type(::std::string&& value) {
  set_has_metric_type();
  metric_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.DumpTask.metric_type)
}
#endif
void DumpTask::set_metric_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metric_type();
  metric_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.DumpTask.metric_type)
}
void DumpTask::set_metric_type(const char* value, size_t size) {
  set_has_metric_type();
  metric_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.DumpTask.metric_type)
}
::std::string* DumpTask::mutable_metric_type() {
  set_has_metric_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.DumpTask.metric_type)
  return metric_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpTask::release_metric_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.DumpTask.metric_type)
  clear_has_metric_type();
  return metric_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpTask::set_allocated_metric_type(::std::string* metric_type) {
  if (metric_type != NULL) {
    set_has_metric_type();
  } else {
    clear_has_metric_type();
  }
  metric_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metric_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.DumpTask.metric_type)
}

// optional bool draw = 11;
bool DumpTask::has_draw() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DumpTask::set_has_draw() {
  _has_bits_[0] |= 0x00000100u;
}
void DumpTask::clear_has_draw() {
  _has_bits_[0] &= ~0x00000100u;
}
void DumpTask::clear_draw() {
  draw_ = false;
  clear_has_draw();
}
bool DumpTask::draw() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.draw)
  return draw_;
}
void DumpTask::set_draw(bool value) {
  set_has_draw();
  draw_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.draw)
}

// optional bool noclicks = 12;
bool DumpTask::has_noclicks() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DumpTask::set_has_noclicks() {
  _has_bits_[0] |= 0x00000200u;
}
void DumpTask::clear_has_noclicks() {
  _has_bits_[0] &= ~0x00000200u;
}
void DumpTask::clear_noclicks() {
  noclicks_ = false;
  clear_has_noclicks();
}
bool DumpTask::noclicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.noclicks)
  return noclicks_;
}
void DumpTask::set_noclicks(bool value) {
  set_has_noclicks();
  noclicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.noclicks)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DumpTasks::kTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DumpTasks::DumpTasks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.DumpTasks)
}
DumpTasks::DumpTasks(const DumpTasks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.DumpTasks)
}

void DumpTasks::SharedCtor() {
  _cached_size_ = 0;
}

DumpTasks::~DumpTasks() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.DumpTasks)
  SharedDtor();
}

void DumpTasks::SharedDtor() {
}

void DumpTasks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpTasks::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DumpTasks& DumpTasks::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

DumpTasks* DumpTasks::New(::google::protobuf::Arena* arena) const {
  DumpTasks* n = new DumpTasks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DumpTasks::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.DumpTasks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DumpTasks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.DumpTasks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.interleaving.DumpTask tasks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.DumpTasks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.DumpTasks)
  return false;
#undef DO_
}

void DumpTasks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.DumpTasks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.DumpTask tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.DumpTasks)
}

::google::protobuf::uint8* DumpTasks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.DumpTasks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.DumpTask tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tasks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.DumpTasks)
  return target;
}

size_t DumpTasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.DumpTasks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.interleaving.DumpTask tasks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tasks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tasks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpTasks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.DumpTasks)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpTasks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DumpTasks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.DumpTasks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.DumpTasks)
    MergeFrom(*source);
  }
}

void DumpTasks::MergeFrom(const DumpTasks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.DumpTasks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
}

void DumpTasks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.DumpTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpTasks::CopyFrom(const DumpTasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.DumpTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpTasks::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->tasks())) return false;
  return true;
}

void DumpTasks::Swap(DumpTasks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DumpTasks::InternalSwap(DumpTasks* other) {
  using std::swap;
  tasks_.InternalSwap(&other->tasks_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DumpTasks::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DumpTasks

// repeated .ru.mail.go.webbase.interleaving.DumpTask tasks = 1;
int DumpTasks::tasks_size() const {
  return tasks_.size();
}
void DumpTasks::clear_tasks() {
  tasks_.Clear();
}
const ::ru::mail::go::webbase::interleaving::DumpTask& DumpTasks::tasks(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTasks.tasks)
  return tasks_.Get(index);
}
::ru::mail::go::webbase::interleaving::DumpTask* DumpTasks::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.DumpTasks.tasks)
  return tasks_.Mutable(index);
}
::ru::mail::go::webbase::interleaving::DumpTask* DumpTasks::add_tasks() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.DumpTasks.tasks)
  return tasks_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpTask >*
DumpTasks::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.DumpTasks.tasks)
  return &tasks_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpTask >&
DumpTasks::tasks() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.DumpTasks.tasks)
  return tasks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DumpResult::kIdFieldNumber;
const int DumpResult::kDumpUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DumpResult::DumpResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.DumpResult)
}
DumpResult::DumpResult(const DumpResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dump_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dump_url()) {
    dump_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dump_url_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.DumpResult)
}

void DumpResult::SharedCtor() {
  _cached_size_ = 0;
  dump_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

DumpResult::~DumpResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.DumpResult)
  SharedDtor();
}

void DumpResult::SharedDtor() {
  dump_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DumpResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpResult::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DumpResult& DumpResult::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

DumpResult* DumpResult::New(::google::protobuf::Arena* arena) const {
  DumpResult* n = new DumpResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DumpResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.DumpResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_dump_url()) {
    GOOGLE_DCHECK(!dump_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*dump_url_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DumpResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.DumpResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string dump_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dump_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dump_url().data(), static_cast<int>(this->dump_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.DumpResult.dump_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.DumpResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.DumpResult)
  return false;
#undef DO_
}

void DumpResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.DumpResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string dump_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dump_url().data(), static_cast<int>(this->dump_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.DumpResult.dump_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dump_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.DumpResult)
}

::google::protobuf::uint8* DumpResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.DumpResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string dump_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dump_url().data(), static_cast<int>(this->dump_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.DumpResult.dump_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dump_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.DumpResult)
  return target;
}

size_t DumpResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.DumpResult)
  size_t total_size = 0;

  if (has_dump_url()) {
    // required string dump_url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dump_url());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  return total_size;
}
size_t DumpResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.DumpResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string dump_url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dump_url());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.DumpResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DumpResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.DumpResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.DumpResult)
    MergeFrom(*source);
  }
}

void DumpResult::MergeFrom(const DumpResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.DumpResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_dump_url();
      dump_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dump_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DumpResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.DumpResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpResult::CopyFrom(const DumpResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.DumpResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DumpResult::Swap(DumpResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DumpResult::InternalSwap(DumpResult* other) {
  using std::swap;
  dump_url_.Swap(&other->dump_url_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DumpResult::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DumpResult

// required uint32 id = 1;
bool DumpResult::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DumpResult::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void DumpResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void DumpResult::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 DumpResult::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpResult.id)
  return id_;
}
void DumpResult::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpResult.id)
}

// required string dump_url = 2;
bool DumpResult::has_dump_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DumpResult::set_has_dump_url() {
  _has_bits_[0] |= 0x00000001u;
}
void DumpResult::clear_has_dump_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void DumpResult::clear_dump_url() {
  dump_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dump_url();
}
const ::std::string& DumpResult::dump_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpResult.dump_url)
  return dump_url_.GetNoArena();
}
void DumpResult::set_dump_url(const ::std::string& value) {
  set_has_dump_url();
  dump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpResult.dump_url)
}
#if LANG_CXX11
void DumpResult::set_dump_url(::std::string&& value) {
  set_has_dump_url();
  dump_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.DumpResult.dump_url)
}
#endif
void DumpResult::set_dump_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dump_url();
  dump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.DumpResult.dump_url)
}
void DumpResult::set_dump_url(const char* value, size_t size) {
  set_has_dump_url();
  dump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.DumpResult.dump_url)
}
::std::string* DumpResult::mutable_dump_url() {
  set_has_dump_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.DumpResult.dump_url)
  return dump_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpResult::release_dump_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.DumpResult.dump_url)
  clear_has_dump_url();
  return dump_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpResult::set_allocated_dump_url(::std::string* dump_url) {
  if (dump_url != NULL) {
    set_has_dump_url();
  } else {
    clear_has_dump_url();
  }
  dump_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dump_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.DumpResult.dump_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DumpResults::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DumpResults::DumpResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.DumpResults)
}
DumpResults::DumpResults(const DumpResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.DumpResults)
}

void DumpResults::SharedCtor() {
  _cached_size_ = 0;
}

DumpResults::~DumpResults() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.DumpResults)
  SharedDtor();
}

void DumpResults::SharedDtor() {
}

void DumpResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpResults::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DumpResults& DumpResults::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

DumpResults* DumpResults::New(::google::protobuf::Arena* arena) const {
  DumpResults* n = new DumpResults;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DumpResults::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.DumpResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DumpResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.DumpResults)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.interleaving.DumpResult results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.DumpResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.DumpResults)
  return false;
#undef DO_
}

void DumpResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.DumpResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.DumpResult results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.DumpResults)
}

::google::protobuf::uint8* DumpResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.DumpResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.DumpResult results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->results(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.DumpResults)
  return target;
}

size_t DumpResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.DumpResults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.interleaving.DumpResult results = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.DumpResults)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpResults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DumpResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.DumpResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.DumpResults)
    MergeFrom(*source);
  }
}

void DumpResults::MergeFrom(const DumpResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.DumpResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void DumpResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.DumpResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpResults::CopyFrom(const DumpResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.DumpResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpResults::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->results())) return false;
  return true;
}

void DumpResults::Swap(DumpResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DumpResults::InternalSwap(DumpResults* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DumpResults::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DumpResults

// repeated .ru.mail.go.webbase.interleaving.DumpResult results = 1;
int DumpResults::results_size() const {
  return results_.size();
}
void DumpResults::clear_results() {
  results_.Clear();
}
const ::ru::mail::go::webbase::interleaving::DumpResult& DumpResults::results(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpResults.results)
  return results_.Get(index);
}
::ru::mail::go::webbase::interleaving::DumpResult* DumpResults::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.DumpResults.results)
  return results_.Mutable(index);
}
::ru::mail::go::webbase::interleaving::DumpResult* DumpResults::add_results() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.DumpResults.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpResult >*
DumpResults::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.DumpResults.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpResult >&
DumpResults::results() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.DumpResults.results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DumpProgress::kIdFieldNumber;
const int DumpProgress::kProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DumpProgress::DumpProgress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.DumpProgress)
}
DumpProgress::DumpProgress(const DumpProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&id_)) + sizeof(progress_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.DumpProgress)
}

void DumpProgress::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&id_)) + sizeof(progress_));
}

DumpProgress::~DumpProgress() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.DumpProgress)
  SharedDtor();
}

void DumpProgress::SharedDtor() {
}

void DumpProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpProgress::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DumpProgress& DumpProgress::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

DumpProgress* DumpProgress::New(::google::protobuf::Arena* arena) const {
  DumpProgress* n = new DumpProgress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DumpProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.DumpProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&progress_) -
        reinterpret_cast<char*>(&id_)) + sizeof(progress_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DumpProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.DumpProgress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 progress = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_progress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.DumpProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.DumpProgress)
  return false;
#undef DO_
}

void DumpProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.DumpProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 progress = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->progress(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.DumpProgress)
}

::google::protobuf::uint8* DumpProgress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.DumpProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 progress = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->progress(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.DumpProgress)
  return target;
}

size_t DumpProgress::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.DumpProgress)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_progress()) {
    // required uint32 progress = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->progress());
  }

  return total_size;
}
size_t DumpProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.DumpProgress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 progress = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->progress());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.DumpProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpProgress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DumpProgress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.DumpProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.DumpProgress)
    MergeFrom(*source);
  }
}

void DumpProgress::MergeFrom(const DumpProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.DumpProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      progress_ = from.progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DumpProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.DumpProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpProgress::CopyFrom(const DumpProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.DumpProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpProgress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DumpProgress::Swap(DumpProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DumpProgress::InternalSwap(DumpProgress* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(progress_, other->progress_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DumpProgress::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DumpProgress

// required uint32 id = 1;
bool DumpProgress::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DumpProgress::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DumpProgress::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DumpProgress::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 DumpProgress::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpProgress.id)
  return id_;
}
void DumpProgress::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpProgress.id)
}

// required uint32 progress = 2;
bool DumpProgress::has_progress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DumpProgress::set_has_progress() {
  _has_bits_[0] |= 0x00000002u;
}
void DumpProgress::clear_has_progress() {
  _has_bits_[0] &= ~0x00000002u;
}
void DumpProgress::clear_progress() {
  progress_ = 0u;
  clear_has_progress();
}
::google::protobuf::uint32 DumpProgress::progress() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpProgress.progress)
  return progress_;
}
void DumpProgress::set_progress(::google::protobuf::uint32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpProgress.progress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DumpsProgress::kProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DumpsProgress::DumpsProgress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.DumpsProgress)
}
DumpsProgress::DumpsProgress(const DumpsProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      progress_(from.progress_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.DumpsProgress)
}

void DumpsProgress::SharedCtor() {
  _cached_size_ = 0;
}

DumpsProgress::~DumpsProgress() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.DumpsProgress)
  SharedDtor();
}

void DumpsProgress::SharedDtor() {
}

void DumpsProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpsProgress::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DumpsProgress& DumpsProgress::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

DumpsProgress* DumpsProgress::New(::google::protobuf::Arena* arena) const {
  DumpsProgress* n = new DumpsProgress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DumpsProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.DumpsProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  progress_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DumpsProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.DumpsProgress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.interleaving.DumpProgress progress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_progress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.DumpsProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.DumpsProgress)
  return false;
#undef DO_
}

void DumpsProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.DumpsProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.DumpProgress progress = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->progress_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->progress(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.DumpsProgress)
}

::google::protobuf::uint8* DumpsProgress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.DumpsProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.DumpProgress progress = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->progress_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->progress(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.DumpsProgress)
  return target;
}

size_t DumpsProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.DumpsProgress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.interleaving.DumpProgress progress = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->progress_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->progress(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpsProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.DumpsProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpsProgress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DumpsProgress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.DumpsProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.DumpsProgress)
    MergeFrom(*source);
  }
}

void DumpsProgress::MergeFrom(const DumpsProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.DumpsProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  progress_.MergeFrom(from.progress_);
}

void DumpsProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.DumpsProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpsProgress::CopyFrom(const DumpsProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.DumpsProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpsProgress::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->progress())) return false;
  return true;
}

void DumpsProgress::Swap(DumpsProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DumpsProgress::InternalSwap(DumpsProgress* other) {
  using std::swap;
  progress_.InternalSwap(&other->progress_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DumpsProgress::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DumpsProgress

// repeated .ru.mail.go.webbase.interleaving.DumpProgress progress = 1;
int DumpsProgress::progress_size() const {
  return progress_.size();
}
void DumpsProgress::clear_progress() {
  progress_.Clear();
}
const ::ru::mail::go::webbase::interleaving::DumpProgress& DumpsProgress::progress(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpsProgress.progress)
  return progress_.Get(index);
}
::ru::mail::go::webbase::interleaving::DumpProgress* DumpsProgress::mutable_progress(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.DumpsProgress.progress)
  return progress_.Mutable(index);
}
::ru::mail::go::webbase::interleaving::DumpProgress* DumpsProgress::add_progress() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.DumpsProgress.progress)
  return progress_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpProgress >*
DumpsProgress::mutable_progress() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.DumpsProgress.progress)
  return &progress_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpProgress >&
DumpsProgress::progress() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.DumpsProgress.progress)
  return progress_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryLog::kTimestampFieldNumber;
const int QueryLog::kUIDFieldNumber;
const int QueryLog::kEIDFieldNumber;
const int QueryLog::kShowedDocumentsFieldNumber;
const int QueryLog::kClicksFieldNumber;
const int QueryLog::kQueryFieldNumber;
const int QueryLog::kRidFieldNumber;
const int QueryLog::kQueryIdFieldNumber;
const int QueryLog::kRawGekkoLogFieldNumber;
const int QueryLog::kReplyQualityFieldNumber;
const int QueryLog::kEssrSourceTypeFieldNumber;
const int QueryLog::kOriginalQueryFieldNumber;
const int QueryLog::kSpcJsonFieldNumber;
const int QueryLog::kWebQualityFieldNumber;
const int QueryLog::kActionsFieldNumber;
const int QueryLog::kQsFieldNumber;
const int QueryLog::kSuggNavigFieldNumber;
const int QueryLog::kSuggNavigAFieldNumber;
const int QueryLog::kSuggNavigBFieldNumber;
const int QueryLog::kSerpFieldNumber;
const int QueryLog::kPlayFieldNumber;
const int QueryLog::kExperimentdDataFieldNumber;
const int QueryLog::kUseWholeResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryLog::QueryLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.QueryLog)
}
QueryLog::QueryLog(const QueryLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      clicks_(from.clicks_),
      actions_(from.actions_),
      qs_(from.qs_),
      play_(from.play_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uid()) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rid()) {
    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  queryid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_queryid()) {
    queryid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queryid_);
  }
  rawgekkolog_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rawgekkolog()) {
    rawgekkolog_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rawgekkolog_);
  }
  essrsourcetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_essrsourcetype()) {
    essrsourcetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.essrsourcetype_);
  }
  original_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_original_query()) {
    original_query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_query_);
  }
  spc_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_spc_json()) {
    spc_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spc_json_);
  }
  serp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serp()) {
    serp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serp_);
  }
  experimentddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_experimentddata()) {
    experimentddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.experimentddata_);
  }
  use_whole_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_use_whole_response()) {
    use_whole_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.use_whole_response_);
  }
  if (from.has_showeddocuments()) {
    showeddocuments_ = new ::ru::mail::go::webbase::interleaving::ShowedDocuments(*from.showeddocuments_);
  } else {
    showeddocuments_ = NULL;
  }
  if (from.has_suggnavig()) {
    suggnavig_ = new ::ru::mail::go::webbase::interleaving::SuggNavig(*from.suggnavig_);
  } else {
    suggnavig_ = NULL;
  }
  if (from.has_suggnaviga()) {
    suggnaviga_ = new ::ru::mail::go::webbase::interleaving::SuggNavig(*from.suggnaviga_);
  } else {
    suggnaviga_ = NULL;
  }
  if (from.has_suggnavigb()) {
    suggnavigb_ = new ::ru::mail::go::webbase::interleaving::SuggNavig(*from.suggnavigb_);
  } else {
    suggnavigb_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&webquality_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(webquality_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.QueryLog)
}

void QueryLog::SharedCtor() {
  _cached_size_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queryid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rawgekkolog_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  essrsourcetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spc_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  experimentddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_whole_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&showeddocuments_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replyquality_) -
      reinterpret_cast<char*>(&showeddocuments_)) + sizeof(replyquality_));
  webquality_ = 1;
}

QueryLog::~QueryLog() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.QueryLog)
  SharedDtor();
}

void QueryLog::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queryid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rawgekkolog_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  essrsourcetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spc_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  experimentddata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_whole_response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete showeddocuments_;
  if (this != internal_default_instance()) delete suggnavig_;
  if (this != internal_default_instance()) delete suggnaviga_;
  if (this != internal_default_instance()) delete suggnavigb_;
}

void QueryLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryLog::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryLog& QueryLog::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryLog* QueryLog::New(::google::protobuf::Arena* arena) const {
  QueryLog* n = new QueryLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryLog::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.QueryLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clicks_.Clear();
  actions_.Clear();
  qs_.Clear();
  play_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!uid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!rid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!queryid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*queryid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!rawgekkolog_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rawgekkolog_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!essrsourcetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*essrsourcetype_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!original_query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*original_query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!spc_json_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*spc_json_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!serp_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serp_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!experimentddata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*experimentddata_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(!use_whole_response_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*use_whole_response_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(showeddocuments_ != NULL);
      showeddocuments_->::ru::mail::go::webbase::interleaving::ShowedDocuments::Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(suggnavig_ != NULL);
      suggnavig_->::ru::mail::go::webbase::interleaving::SuggNavig::Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(suggnaviga_ != NULL);
      suggnaviga_->::ru::mail::go::webbase::interleaving::SuggNavig::Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(suggnavigb_ != NULL);
      suggnavigb_->::ru::mail::go::webbase::interleaving::SuggNavig::Clear();
    }
  }
  timestamp_ = GOOGLE_ULONGLONG(0);
  if (cached_has_bits & 458752u) {
    ::memset(&eid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replyquality_) -
        reinterpret_cast<char*>(&eid_)) + sizeof(replyquality_));
    webquality_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.QueryLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string UID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), static_cast<int>(this->uid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.QueryLog.UID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_eid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.interleaving.ShowedDocuments showedDocuments = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showeddocuments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.interleaving.Click clicks = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clicks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.QueryLog.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rid().data(), static_cast<int>(this->rid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.QueryLog.rid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string queryId = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queryid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queryid().data(), static_cast<int>(this->queryid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.QueryLog.queryId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rawGekkoLog = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rawgekkolog()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rawgekkolog().data(), static_cast<int>(this->rawgekkolog().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float replyQuality = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_replyquality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &replyquality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string essrSourceType = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_essrsourcetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->essrsourcetype().data(), static_cast<int>(this->essrsourcetype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.QueryLog.essrSourceType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string original_query = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_original_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->original_query().data(), static_cast<int>(this->original_query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.QueryLog.original_query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string spc_json = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spc_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->spc_json().data(), static_cast<int>(this->spc_json().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.QueryLog.spc_json");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float webQuality = 14 [default = 1];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_webquality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &webquality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.interleaving.Action actions = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.interleaving.Qs qs = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavig = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_suggnavig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavigA = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_suggnaviga()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavigB = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_suggnavigb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serp = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serp().data(), static_cast<int>(this->serp().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.QueryLog.serp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.interleaving.Play play = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_play()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string experimentdData = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_experimentddata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->experimentddata().data(), static_cast<int>(this->experimentddata().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.QueryLog.experimentdData");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string use_whole_response = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_use_whole_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->use_whole_response().data(), static_cast<int>(this->use_whole_response().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.QueryLog.use_whole_response");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.QueryLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.QueryLog)
  return false;
#undef DO_
}

void QueryLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.QueryLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp = 1;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // required string UID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.UID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // required uint32 EID = 3;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->eid(), output);
  }

  // required .ru.mail.go.webbase.interleaving.ShowedDocuments showedDocuments = 4;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->showeddocuments_, output);
  }

  // repeated .ru.mail.go.webbase.interleaving.Click clicks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clicks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->clicks(static_cast<int>(i)), output);
  }

  // optional string query = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->query(), output);
  }

  // optional string rid = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rid().data(), static_cast<int>(this->rid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.rid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->rid(), output);
  }

  // optional string queryId = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queryid().data(), static_cast<int>(this->queryid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.queryId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->queryid(), output);
  }

  // optional string rawGekkoLog = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rawgekkolog().data(), static_cast<int>(this->rawgekkolog().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->rawgekkolog(), output);
  }

  // optional float replyQuality = 10;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->replyquality(), output);
  }

  // optional string essrSourceType = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->essrsourcetype().data(), static_cast<int>(this->essrsourcetype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.essrSourceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->essrsourcetype(), output);
  }

  // optional string original_query = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->original_query().data(), static_cast<int>(this->original_query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.original_query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->original_query(), output);
  }

  // optional string spc_json = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->spc_json().data(), static_cast<int>(this->spc_json().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.spc_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->spc_json(), output);
  }

  // optional float webQuality = 14 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->webquality(), output);
  }

  // repeated .ru.mail.go.webbase.interleaving.Action actions = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->actions(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.webbase.interleaving.Qs qs = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->qs(static_cast<int>(i)), output);
  }

  // optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavig = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->suggnavig_, output);
  }

  // optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavigA = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->suggnaviga_, output);
  }

  // optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavigB = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->suggnavigb_, output);
  }

  // optional string serp = 20;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serp().data(), static_cast<int>(this->serp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.serp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->serp(), output);
  }

  // repeated .ru.mail.go.webbase.interleaving.Play play = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->play_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->play(static_cast<int>(i)), output);
  }

  // optional string experimentdData = 22;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->experimentddata().data(), static_cast<int>(this->experimentddata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.experimentdData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->experimentddata(), output);
  }

  // optional string use_whole_response = 23;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->use_whole_response().data(), static_cast<int>(this->use_whole_response().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.use_whole_response");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->use_whole_response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.QueryLog)
}

::google::protobuf::uint8* QueryLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.QueryLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp = 1;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // required string UID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.UID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }

  // required uint32 EID = 3;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->eid(), target);
  }

  // required .ru.mail.go.webbase.interleaving.ShowedDocuments showedDocuments = 4;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->showeddocuments_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.interleaving.Click clicks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clicks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->clicks(static_cast<int>(i)), deterministic, target);
  }

  // optional string query = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->query(), target);
  }

  // optional string rid = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rid().data(), static_cast<int>(this->rid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.rid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rid(), target);
  }

  // optional string queryId = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queryid().data(), static_cast<int>(this->queryid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.queryId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->queryid(), target);
  }

  // optional string rawGekkoLog = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rawgekkolog().data(), static_cast<int>(this->rawgekkolog().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->rawgekkolog(), target);
  }

  // optional float replyQuality = 10;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->replyquality(), target);
  }

  // optional string essrSourceType = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->essrsourcetype().data(), static_cast<int>(this->essrsourcetype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.essrSourceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->essrsourcetype(), target);
  }

  // optional string original_query = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->original_query().data(), static_cast<int>(this->original_query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.original_query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->original_query(), target);
  }

  // optional string spc_json = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->spc_json().data(), static_cast<int>(this->spc_json().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.spc_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->spc_json(), target);
  }

  // optional float webQuality = 14 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->webquality(), target);
  }

  // repeated .ru.mail.go.webbase.interleaving.Action actions = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->actions(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.webbase.interleaving.Qs qs = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->qs(static_cast<int>(i)), deterministic, target);
  }

  // optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavig = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->suggnavig_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavigA = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->suggnaviga_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavigB = 19;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->suggnavigb_, deterministic, target);
  }

  // optional string serp = 20;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serp().data(), static_cast<int>(this->serp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.serp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->serp(), target);
  }

  // repeated .ru.mail.go.webbase.interleaving.Play play = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->play_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, this->play(static_cast<int>(i)), deterministic, target);
  }

  // optional string experimentdData = 22;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->experimentddata().data(), static_cast<int>(this->experimentddata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.experimentdData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->experimentddata(), target);
  }

  // optional string use_whole_response = 23;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->use_whole_response().data(), static_cast<int>(this->use_whole_response().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.QueryLog.use_whole_response");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->use_whole_response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.QueryLog)
  return target;
}

size_t QueryLog::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.QueryLog)
  size_t total_size = 0;

  if (has_uid()) {
    // required string UID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  if (has_showeddocuments()) {
    // required .ru.mail.go.webbase.interleaving.ShowedDocuments showedDocuments = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->showeddocuments_);
  }

  if (has_timestamp()) {
    // required uint64 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  if (has_eid()) {
    // required uint32 EID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eid());
  }

  return total_size;
}
size_t QueryLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.QueryLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00018801) ^ 0x00018801) == 0) {  // All required fields are present.
    // required string UID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());

    // required .ru.mail.go.webbase.interleaving.ShowedDocuments showedDocuments = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->showeddocuments_);

    // required uint64 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

    // required uint32 EID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.webbase.interleaving.Click clicks = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->clicks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clicks(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.interleaving.Action actions = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actions(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.interleaving.Qs qs = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->qs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qs(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.interleaving.Play play = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->play_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->play(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 254u) {
    // optional string query = 6;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional string rid = 7;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rid());
    }

    // optional string queryId = 8;
    if (has_queryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queryid());
    }

    // optional string rawGekkoLog = 9;
    if (has_rawgekkolog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rawgekkolog());
    }

    // optional string essrSourceType = 11;
    if (has_essrsourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->essrsourcetype());
    }

    // optional string original_query = 12;
    if (has_original_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->original_query());
    }

    // optional string spc_json = 13;
    if (has_spc_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spc_json());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional string serp = 20;
    if (has_serp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serp());
    }

    // optional string experimentdData = 22;
    if (has_experimentddata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->experimentddata());
    }

    // optional string use_whole_response = 23;
    if (has_use_whole_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->use_whole_response());
    }

  }
  if (_has_bits_[8 / 32] & 28672u) {
    // optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavig = 17;
    if (has_suggnavig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->suggnavig_);
    }

    // optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavigA = 18;
    if (has_suggnaviga()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->suggnaviga_);
    }

    // optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavigB = 19;
    if (has_suggnavigb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->suggnavigb_);
    }

  }
  if (_has_bits_[16 / 32] & 393216u) {
    // optional float replyQuality = 10;
    if (has_replyquality()) {
      total_size += 1 + 4;
    }

    // optional float webQuality = 14 [default = 1];
    if (has_webquality()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.QueryLog)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.QueryLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.QueryLog)
    MergeFrom(*source);
  }
}

void QueryLog::MergeFrom(const QueryLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.QueryLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clicks_.MergeFrom(from.clicks_);
  actions_.MergeFrom(from.actions_);
  qs_.MergeFrom(from.qs_);
  play_.MergeFrom(from.play_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uid();
      uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_rid();
      rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_queryid();
      queryid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queryid_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_rawgekkolog();
      rawgekkolog_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rawgekkolog_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_essrsourcetype();
      essrsourcetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.essrsourcetype_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_original_query();
      original_query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_query_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_spc_json();
      spc_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spc_json_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_serp();
      serp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serp_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_experimentddata();
      experimentddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.experimentddata_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_use_whole_response();
      use_whole_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.use_whole_response_);
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_showeddocuments()->::ru::mail::go::webbase::interleaving::ShowedDocuments::MergeFrom(from.showeddocuments());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_suggnavig()->::ru::mail::go::webbase::interleaving::SuggNavig::MergeFrom(from.suggnavig());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_suggnaviga()->::ru::mail::go::webbase::interleaving::SuggNavig::MergeFrom(from.suggnaviga());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_suggnavigb()->::ru::mail::go::webbase::interleaving::SuggNavig::MergeFrom(from.suggnavigb());
    }
    if (cached_has_bits & 0x00008000u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      eid_ = from.eid_;
    }
    if (cached_has_bits & 0x00020000u) {
      replyquality_ = from.replyquality_;
    }
    if (cached_has_bits & 0x00040000u) {
      webquality_ = from.webquality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.QueryLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryLog::CopyFrom(const QueryLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.QueryLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00018801) != 0x00018801) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->clicks())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->actions())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->qs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->play())) return false;
  if (has_showeddocuments()) {
    if (!this->showeddocuments_->IsInitialized()) return false;
  }
  return true;
}

void QueryLog::Swap(QueryLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryLog::InternalSwap(QueryLog* other) {
  using std::swap;
  clicks_.InternalSwap(&other->clicks_);
  actions_.InternalSwap(&other->actions_);
  qs_.InternalSwap(&other->qs_);
  play_.InternalSwap(&other->play_);
  uid_.Swap(&other->uid_);
  query_.Swap(&other->query_);
  rid_.Swap(&other->rid_);
  queryid_.Swap(&other->queryid_);
  rawgekkolog_.Swap(&other->rawgekkolog_);
  essrsourcetype_.Swap(&other->essrsourcetype_);
  original_query_.Swap(&other->original_query_);
  spc_json_.Swap(&other->spc_json_);
  serp_.Swap(&other->serp_);
  experimentddata_.Swap(&other->experimentddata_);
  use_whole_response_.Swap(&other->use_whole_response_);
  swap(showeddocuments_, other->showeddocuments_);
  swap(suggnavig_, other->suggnavig_);
  swap(suggnaviga_, other->suggnaviga_);
  swap(suggnavigb_, other->suggnavigb_);
  swap(timestamp_, other->timestamp_);
  swap(eid_, other->eid_);
  swap(replyquality_, other->replyquality_);
  swap(webquality_, other->webquality_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryLog::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryLog

// required uint64 timestamp = 1;
bool QueryLog::has_timestamp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void QueryLog::set_has_timestamp() {
  _has_bits_[0] |= 0x00008000u;
}
void QueryLog::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00008000u;
}
void QueryLog::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 QueryLog::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.timestamp)
  return timestamp_;
}
void QueryLog::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.timestamp)
}

// required string UID = 2;
bool QueryLog::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryLog::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryLog::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryLog::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
const ::std::string& QueryLog::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.UID)
  return uid_.GetNoArena();
}
void QueryLog::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.UID)
}
#if LANG_CXX11
void QueryLog::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.UID)
}
#endif
void QueryLog::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.UID)
}
void QueryLog::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.UID)
}
::std::string* QueryLog::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.UID)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryLog::release_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.UID)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryLog::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.UID)
}

// required uint32 EID = 3;
bool QueryLog::has_eid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void QueryLog::set_has_eid() {
  _has_bits_[0] |= 0x00010000u;
}
void QueryLog::clear_has_eid() {
  _has_bits_[0] &= ~0x00010000u;
}
void QueryLog::clear_eid() {
  eid_ = 0u;
  clear_has_eid();
}
::google::protobuf::uint32 QueryLog::eid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.EID)
  return eid_;
}
void QueryLog::set_eid(::google::protobuf::uint32 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.EID)
}

// required .ru.mail.go.webbase.interleaving.ShowedDocuments showedDocuments = 4;
bool QueryLog::has_showeddocuments() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void QueryLog::set_has_showeddocuments() {
  _has_bits_[0] |= 0x00000800u;
}
void QueryLog::clear_has_showeddocuments() {
  _has_bits_[0] &= ~0x00000800u;
}
void QueryLog::clear_showeddocuments() {
  if (showeddocuments_ != NULL) showeddocuments_->::ru::mail::go::webbase::interleaving::ShowedDocuments::Clear();
  clear_has_showeddocuments();
}
const ::ru::mail::go::webbase::interleaving::ShowedDocuments& QueryLog::showeddocuments() const {
  const ::ru::mail::go::webbase::interleaving::ShowedDocuments* p = showeddocuments_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.showedDocuments)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::interleaving::ShowedDocuments*>(
      &::ru::mail::go::webbase::interleaving::_ShowedDocuments_default_instance_);
}
::ru::mail::go::webbase::interleaving::ShowedDocuments* QueryLog::mutable_showeddocuments() {
  set_has_showeddocuments();
  if (showeddocuments_ == NULL) {
    showeddocuments_ = new ::ru::mail::go::webbase::interleaving::ShowedDocuments;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.showedDocuments)
  return showeddocuments_;
}
::ru::mail::go::webbase::interleaving::ShowedDocuments* QueryLog::release_showeddocuments() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.showedDocuments)
  clear_has_showeddocuments();
  ::ru::mail::go::webbase::interleaving::ShowedDocuments* temp = showeddocuments_;
  showeddocuments_ = NULL;
  return temp;
}
void QueryLog::set_allocated_showeddocuments(::ru::mail::go::webbase::interleaving::ShowedDocuments* showeddocuments) {
  delete showeddocuments_;
  showeddocuments_ = showeddocuments;
  if (showeddocuments) {
    set_has_showeddocuments();
  } else {
    clear_has_showeddocuments();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.showedDocuments)
}

// repeated .ru.mail.go.webbase.interleaving.Click clicks = 5;
int QueryLog::clicks_size() const {
  return clicks_.size();
}
void QueryLog::clear_clicks() {
  clicks_.Clear();
}
const ::ru::mail::go::webbase::interleaving::Click& QueryLog::clicks(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.clicks)
  return clicks_.Get(index);
}
::ru::mail::go::webbase::interleaving::Click* QueryLog::mutable_clicks(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.clicks)
  return clicks_.Mutable(index);
}
::ru::mail::go::webbase::interleaving::Click* QueryLog::add_clicks() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.QueryLog.clicks)
  return clicks_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Click >*
QueryLog::mutable_clicks() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.QueryLog.clicks)
  return &clicks_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Click >&
QueryLog::clicks() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.QueryLog.clicks)
  return clicks_;
}

// optional string query = 6;
bool QueryLog::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryLog::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryLog::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryLog::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& QueryLog::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.query)
  return query_.GetNoArena();
}
void QueryLog::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.query)
}
#if LANG_CXX11
void QueryLog::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.query)
}
#endif
void QueryLog::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.query)
}
void QueryLog::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.query)
}
::std::string* QueryLog::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryLog::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryLog::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.query)
}

// optional string rid = 7;
bool QueryLog::has_rid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QueryLog::set_has_rid() {
  _has_bits_[0] |= 0x00000004u;
}
void QueryLog::clear_has_rid() {
  _has_bits_[0] &= ~0x00000004u;
}
void QueryLog::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rid();
}
const ::std::string& QueryLog::rid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.rid)
  return rid_.GetNoArena();
}
void QueryLog::set_rid(const ::std::string& value) {
  set_has_rid();
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.rid)
}
#if LANG_CXX11
void QueryLog::set_rid(::std::string&& value) {
  set_has_rid();
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.rid)
}
#endif
void QueryLog::set_rid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rid();
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.rid)
}
void QueryLog::set_rid(const char* value, size_t size) {
  set_has_rid();
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.rid)
}
::std::string* QueryLog::mutable_rid() {
  set_has_rid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryLog::release_rid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.rid)
  clear_has_rid();
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryLog::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    set_has_rid();
  } else {
    clear_has_rid();
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.rid)
}

// optional string queryId = 8;
bool QueryLog::has_queryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QueryLog::set_has_queryid() {
  _has_bits_[0] |= 0x00000008u;
}
void QueryLog::clear_has_queryid() {
  _has_bits_[0] &= ~0x00000008u;
}
void QueryLog::clear_queryid() {
  queryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queryid();
}
const ::std::string& QueryLog::queryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.queryId)
  return queryid_.GetNoArena();
}
void QueryLog::set_queryid(const ::std::string& value) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.queryId)
}
#if LANG_CXX11
void QueryLog::set_queryid(::std::string&& value) {
  set_has_queryid();
  queryid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.queryId)
}
#endif
void QueryLog::set_queryid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.queryId)
}
void QueryLog::set_queryid(const char* value, size_t size) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.queryId)
}
::std::string* QueryLog::mutable_queryid() {
  set_has_queryid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.queryId)
  return queryid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryLog::release_queryid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.queryId)
  clear_has_queryid();
  return queryid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryLog::set_allocated_queryid(::std::string* queryid) {
  if (queryid != NULL) {
    set_has_queryid();
  } else {
    clear_has_queryid();
  }
  queryid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queryid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.queryId)
}

// optional string rawGekkoLog = 9;
bool QueryLog::has_rawgekkolog() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QueryLog::set_has_rawgekkolog() {
  _has_bits_[0] |= 0x00000010u;
}
void QueryLog::clear_has_rawgekkolog() {
  _has_bits_[0] &= ~0x00000010u;
}
void QueryLog::clear_rawgekkolog() {
  rawgekkolog_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rawgekkolog();
}
const ::std::string& QueryLog::rawgekkolog() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog)
  return rawgekkolog_.GetNoArena();
}
void QueryLog::set_rawgekkolog(const ::std::string& value) {
  set_has_rawgekkolog();
  rawgekkolog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog)
}
#if LANG_CXX11
void QueryLog::set_rawgekkolog(::std::string&& value) {
  set_has_rawgekkolog();
  rawgekkolog_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog)
}
#endif
void QueryLog::set_rawgekkolog(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rawgekkolog();
  rawgekkolog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog)
}
void QueryLog::set_rawgekkolog(const char* value, size_t size) {
  set_has_rawgekkolog();
  rawgekkolog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog)
}
::std::string* QueryLog::mutable_rawgekkolog() {
  set_has_rawgekkolog();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog)
  return rawgekkolog_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryLog::release_rawgekkolog() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog)
  clear_has_rawgekkolog();
  return rawgekkolog_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryLog::set_allocated_rawgekkolog(::std::string* rawgekkolog) {
  if (rawgekkolog != NULL) {
    set_has_rawgekkolog();
  } else {
    clear_has_rawgekkolog();
  }
  rawgekkolog_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rawgekkolog);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog)
}

// optional float replyQuality = 10;
bool QueryLog::has_replyquality() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void QueryLog::set_has_replyquality() {
  _has_bits_[0] |= 0x00020000u;
}
void QueryLog::clear_has_replyquality() {
  _has_bits_[0] &= ~0x00020000u;
}
void QueryLog::clear_replyquality() {
  replyquality_ = 0;
  clear_has_replyquality();
}
float QueryLog::replyquality() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.replyQuality)
  return replyquality_;
}
void QueryLog::set_replyquality(float value) {
  set_has_replyquality();
  replyquality_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.replyQuality)
}

// optional string essrSourceType = 11;
bool QueryLog::has_essrsourcetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void QueryLog::set_has_essrsourcetype() {
  _has_bits_[0] |= 0x00000020u;
}
void QueryLog::clear_has_essrsourcetype() {
  _has_bits_[0] &= ~0x00000020u;
}
void QueryLog::clear_essrsourcetype() {
  essrsourcetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_essrsourcetype();
}
const ::std::string& QueryLog::essrsourcetype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.essrSourceType)
  return essrsourcetype_.GetNoArena();
}
void QueryLog::set_essrsourcetype(const ::std::string& value) {
  set_has_essrsourcetype();
  essrsourcetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.essrSourceType)
}
#if LANG_CXX11
void QueryLog::set_essrsourcetype(::std::string&& value) {
  set_has_essrsourcetype();
  essrsourcetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.essrSourceType)
}
#endif
void QueryLog::set_essrsourcetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_essrsourcetype();
  essrsourcetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.essrSourceType)
}
void QueryLog::set_essrsourcetype(const char* value, size_t size) {
  set_has_essrsourcetype();
  essrsourcetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.essrSourceType)
}
::std::string* QueryLog::mutable_essrsourcetype() {
  set_has_essrsourcetype();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.essrSourceType)
  return essrsourcetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryLog::release_essrsourcetype() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.essrSourceType)
  clear_has_essrsourcetype();
  return essrsourcetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryLog::set_allocated_essrsourcetype(::std::string* essrsourcetype) {
  if (essrsourcetype != NULL) {
    set_has_essrsourcetype();
  } else {
    clear_has_essrsourcetype();
  }
  essrsourcetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), essrsourcetype);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.essrSourceType)
}

// optional string original_query = 12;
bool QueryLog::has_original_query() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QueryLog::set_has_original_query() {
  _has_bits_[0] |= 0x00000040u;
}
void QueryLog::clear_has_original_query() {
  _has_bits_[0] &= ~0x00000040u;
}
void QueryLog::clear_original_query() {
  original_query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_original_query();
}
const ::std::string& QueryLog::original_query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.original_query)
  return original_query_.GetNoArena();
}
void QueryLog::set_original_query(const ::std::string& value) {
  set_has_original_query();
  original_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.original_query)
}
#if LANG_CXX11
void QueryLog::set_original_query(::std::string&& value) {
  set_has_original_query();
  original_query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.original_query)
}
#endif
void QueryLog::set_original_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_original_query();
  original_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.original_query)
}
void QueryLog::set_original_query(const char* value, size_t size) {
  set_has_original_query();
  original_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.original_query)
}
::std::string* QueryLog::mutable_original_query() {
  set_has_original_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.original_query)
  return original_query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryLog::release_original_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.original_query)
  clear_has_original_query();
  return original_query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryLog::set_allocated_original_query(::std::string* original_query) {
  if (original_query != NULL) {
    set_has_original_query();
  } else {
    clear_has_original_query();
  }
  original_query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.original_query)
}

// optional string spc_json = 13;
bool QueryLog::has_spc_json() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void QueryLog::set_has_spc_json() {
  _has_bits_[0] |= 0x00000080u;
}
void QueryLog::clear_has_spc_json() {
  _has_bits_[0] &= ~0x00000080u;
}
void QueryLog::clear_spc_json() {
  spc_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_spc_json();
}
const ::std::string& QueryLog::spc_json() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.spc_json)
  return spc_json_.GetNoArena();
}
void QueryLog::set_spc_json(const ::std::string& value) {
  set_has_spc_json();
  spc_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.spc_json)
}
#if LANG_CXX11
void QueryLog::set_spc_json(::std::string&& value) {
  set_has_spc_json();
  spc_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.spc_json)
}
#endif
void QueryLog::set_spc_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_spc_json();
  spc_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.spc_json)
}
void QueryLog::set_spc_json(const char* value, size_t size) {
  set_has_spc_json();
  spc_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.spc_json)
}
::std::string* QueryLog::mutable_spc_json() {
  set_has_spc_json();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.spc_json)
  return spc_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryLog::release_spc_json() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.spc_json)
  clear_has_spc_json();
  return spc_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryLog::set_allocated_spc_json(::std::string* spc_json) {
  if (spc_json != NULL) {
    set_has_spc_json();
  } else {
    clear_has_spc_json();
  }
  spc_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spc_json);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.spc_json)
}

// optional float webQuality = 14 [default = 1];
bool QueryLog::has_webquality() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void QueryLog::set_has_webquality() {
  _has_bits_[0] |= 0x00040000u;
}
void QueryLog::clear_has_webquality() {
  _has_bits_[0] &= ~0x00040000u;
}
void QueryLog::clear_webquality() {
  webquality_ = 1;
  clear_has_webquality();
}
float QueryLog::webquality() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.webQuality)
  return webquality_;
}
void QueryLog::set_webquality(float value) {
  set_has_webquality();
  webquality_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.webQuality)
}

// repeated .ru.mail.go.webbase.interleaving.Action actions = 15;
int QueryLog::actions_size() const {
  return actions_.size();
}
void QueryLog::clear_actions() {
  actions_.Clear();
}
const ::ru::mail::go::webbase::interleaving::Action& QueryLog::actions(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.actions)
  return actions_.Get(index);
}
::ru::mail::go::webbase::interleaving::Action* QueryLog::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.actions)
  return actions_.Mutable(index);
}
::ru::mail::go::webbase::interleaving::Action* QueryLog::add_actions() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.QueryLog.actions)
  return actions_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Action >*
QueryLog::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.QueryLog.actions)
  return &actions_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Action >&
QueryLog::actions() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.QueryLog.actions)
  return actions_;
}

// repeated .ru.mail.go.webbase.interleaving.Qs qs = 16;
int QueryLog::qs_size() const {
  return qs_.size();
}
void QueryLog::clear_qs() {
  qs_.Clear();
}
const ::ru::mail::go::webbase::interleaving::Qs& QueryLog::qs(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.qs)
  return qs_.Get(index);
}
::ru::mail::go::webbase::interleaving::Qs* QueryLog::mutable_qs(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.qs)
  return qs_.Mutable(index);
}
::ru::mail::go::webbase::interleaving::Qs* QueryLog::add_qs() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.QueryLog.qs)
  return qs_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Qs >*
QueryLog::mutable_qs() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.QueryLog.qs)
  return &qs_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Qs >&
QueryLog::qs() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.QueryLog.qs)
  return qs_;
}

// optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavig = 17;
bool QueryLog::has_suggnavig() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void QueryLog::set_has_suggnavig() {
  _has_bits_[0] |= 0x00001000u;
}
void QueryLog::clear_has_suggnavig() {
  _has_bits_[0] &= ~0x00001000u;
}
void QueryLog::clear_suggnavig() {
  if (suggnavig_ != NULL) suggnavig_->::ru::mail::go::webbase::interleaving::SuggNavig::Clear();
  clear_has_suggnavig();
}
const ::ru::mail::go::webbase::interleaving::SuggNavig& QueryLog::suggnavig() const {
  const ::ru::mail::go::webbase::interleaving::SuggNavig* p = suggnavig_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.suggNavig)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::interleaving::SuggNavig*>(
      &::ru::mail::go::webbase::interleaving::_SuggNavig_default_instance_);
}
::ru::mail::go::webbase::interleaving::SuggNavig* QueryLog::mutable_suggnavig() {
  set_has_suggnavig();
  if (suggnavig_ == NULL) {
    suggnavig_ = new ::ru::mail::go::webbase::interleaving::SuggNavig;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.suggNavig)
  return suggnavig_;
}
::ru::mail::go::webbase::interleaving::SuggNavig* QueryLog::release_suggnavig() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.suggNavig)
  clear_has_suggnavig();
  ::ru::mail::go::webbase::interleaving::SuggNavig* temp = suggnavig_;
  suggnavig_ = NULL;
  return temp;
}
void QueryLog::set_allocated_suggnavig(::ru::mail::go::webbase::interleaving::SuggNavig* suggnavig) {
  delete suggnavig_;
  suggnavig_ = suggnavig;
  if (suggnavig) {
    set_has_suggnavig();
  } else {
    clear_has_suggnavig();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.suggNavig)
}

// optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavigA = 18;
bool QueryLog::has_suggnaviga() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void QueryLog::set_has_suggnaviga() {
  _has_bits_[0] |= 0x00002000u;
}
void QueryLog::clear_has_suggnaviga() {
  _has_bits_[0] &= ~0x00002000u;
}
void QueryLog::clear_suggnaviga() {
  if (suggnaviga_ != NULL) suggnaviga_->::ru::mail::go::webbase::interleaving::SuggNavig::Clear();
  clear_has_suggnaviga();
}
const ::ru::mail::go::webbase::interleaving::SuggNavig& QueryLog::suggnaviga() const {
  const ::ru::mail::go::webbase::interleaving::SuggNavig* p = suggnaviga_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.suggNavigA)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::interleaving::SuggNavig*>(
      &::ru::mail::go::webbase::interleaving::_SuggNavig_default_instance_);
}
::ru::mail::go::webbase::interleaving::SuggNavig* QueryLog::mutable_suggnaviga() {
  set_has_suggnaviga();
  if (suggnaviga_ == NULL) {
    suggnaviga_ = new ::ru::mail::go::webbase::interleaving::SuggNavig;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.suggNavigA)
  return suggnaviga_;
}
::ru::mail::go::webbase::interleaving::SuggNavig* QueryLog::release_suggnaviga() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.suggNavigA)
  clear_has_suggnaviga();
  ::ru::mail::go::webbase::interleaving::SuggNavig* temp = suggnaviga_;
  suggnaviga_ = NULL;
  return temp;
}
void QueryLog::set_allocated_suggnaviga(::ru::mail::go::webbase::interleaving::SuggNavig* suggnaviga) {
  delete suggnaviga_;
  suggnaviga_ = suggnaviga;
  if (suggnaviga) {
    set_has_suggnaviga();
  } else {
    clear_has_suggnaviga();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.suggNavigA)
}

// optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavigB = 19;
bool QueryLog::has_suggnavigb() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void QueryLog::set_has_suggnavigb() {
  _has_bits_[0] |= 0x00004000u;
}
void QueryLog::clear_has_suggnavigb() {
  _has_bits_[0] &= ~0x00004000u;
}
void QueryLog::clear_suggnavigb() {
  if (suggnavigb_ != NULL) suggnavigb_->::ru::mail::go::webbase::interleaving::SuggNavig::Clear();
  clear_has_suggnavigb();
}
const ::ru::mail::go::webbase::interleaving::SuggNavig& QueryLog::suggnavigb() const {
  const ::ru::mail::go::webbase::interleaving::SuggNavig* p = suggnavigb_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.suggNavigB)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::interleaving::SuggNavig*>(
      &::ru::mail::go::webbase::interleaving::_SuggNavig_default_instance_);
}
::ru::mail::go::webbase::interleaving::SuggNavig* QueryLog::mutable_suggnavigb() {
  set_has_suggnavigb();
  if (suggnavigb_ == NULL) {
    suggnavigb_ = new ::ru::mail::go::webbase::interleaving::SuggNavig;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.suggNavigB)
  return suggnavigb_;
}
::ru::mail::go::webbase::interleaving::SuggNavig* QueryLog::release_suggnavigb() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.suggNavigB)
  clear_has_suggnavigb();
  ::ru::mail::go::webbase::interleaving::SuggNavig* temp = suggnavigb_;
  suggnavigb_ = NULL;
  return temp;
}
void QueryLog::set_allocated_suggnavigb(::ru::mail::go::webbase::interleaving::SuggNavig* suggnavigb) {
  delete suggnavigb_;
  suggnavigb_ = suggnavigb;
  if (suggnavigb) {
    set_has_suggnavigb();
  } else {
    clear_has_suggnavigb();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.suggNavigB)
}

// optional string serp = 20;
bool QueryLog::has_serp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void QueryLog::set_has_serp() {
  _has_bits_[0] |= 0x00000100u;
}
void QueryLog::clear_has_serp() {
  _has_bits_[0] &= ~0x00000100u;
}
void QueryLog::clear_serp() {
  serp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serp();
}
const ::std::string& QueryLog::serp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.serp)
  return serp_.GetNoArena();
}
void QueryLog::set_serp(const ::std::string& value) {
  set_has_serp();
  serp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.serp)
}
#if LANG_CXX11
void QueryLog::set_serp(::std::string&& value) {
  set_has_serp();
  serp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.serp)
}
#endif
void QueryLog::set_serp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serp();
  serp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.serp)
}
void QueryLog::set_serp(const char* value, size_t size) {
  set_has_serp();
  serp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.serp)
}
::std::string* QueryLog::mutable_serp() {
  set_has_serp();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.serp)
  return serp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryLog::release_serp() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.serp)
  clear_has_serp();
  return serp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryLog::set_allocated_serp(::std::string* serp) {
  if (serp != NULL) {
    set_has_serp();
  } else {
    clear_has_serp();
  }
  serp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serp);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.serp)
}

// repeated .ru.mail.go.webbase.interleaving.Play play = 21;
int QueryLog::play_size() const {
  return play_.size();
}
void QueryLog::clear_play() {
  play_.Clear();
}
const ::ru::mail::go::webbase::interleaving::Play& QueryLog::play(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.play)
  return play_.Get(index);
}
::ru::mail::go::webbase::interleaving::Play* QueryLog::mutable_play(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.play)
  return play_.Mutable(index);
}
::ru::mail::go::webbase::interleaving::Play* QueryLog::add_play() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.QueryLog.play)
  return play_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Play >*
QueryLog::mutable_play() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.QueryLog.play)
  return &play_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Play >&
QueryLog::play() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.QueryLog.play)
  return play_;
}

// optional string experimentdData = 22;
bool QueryLog::has_experimentddata() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void QueryLog::set_has_experimentddata() {
  _has_bits_[0] |= 0x00000200u;
}
void QueryLog::clear_has_experimentddata() {
  _has_bits_[0] &= ~0x00000200u;
}
void QueryLog::clear_experimentddata() {
  experimentddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_experimentddata();
}
const ::std::string& QueryLog::experimentddata() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.experimentdData)
  return experimentddata_.GetNoArena();
}
void QueryLog::set_experimentddata(const ::std::string& value) {
  set_has_experimentddata();
  experimentddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.experimentdData)
}
#if LANG_CXX11
void QueryLog::set_experimentddata(::std::string&& value) {
  set_has_experimentddata();
  experimentddata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.experimentdData)
}
#endif
void QueryLog::set_experimentddata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_experimentddata();
  experimentddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.experimentdData)
}
void QueryLog::set_experimentddata(const char* value, size_t size) {
  set_has_experimentddata();
  experimentddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.experimentdData)
}
::std::string* QueryLog::mutable_experimentddata() {
  set_has_experimentddata();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.experimentdData)
  return experimentddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryLog::release_experimentddata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.experimentdData)
  clear_has_experimentddata();
  return experimentddata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryLog::set_allocated_experimentddata(::std::string* experimentddata) {
  if (experimentddata != NULL) {
    set_has_experimentddata();
  } else {
    clear_has_experimentddata();
  }
  experimentddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), experimentddata);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.experimentdData)
}

// optional string use_whole_response = 23;
bool QueryLog::has_use_whole_response() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void QueryLog::set_has_use_whole_response() {
  _has_bits_[0] |= 0x00000400u;
}
void QueryLog::clear_has_use_whole_response() {
  _has_bits_[0] &= ~0x00000400u;
}
void QueryLog::clear_use_whole_response() {
  use_whole_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_use_whole_response();
}
const ::std::string& QueryLog::use_whole_response() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.use_whole_response)
  return use_whole_response_.GetNoArena();
}
void QueryLog::set_use_whole_response(const ::std::string& value) {
  set_has_use_whole_response();
  use_whole_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.use_whole_response)
}
#if LANG_CXX11
void QueryLog::set_use_whole_response(::std::string&& value) {
  set_has_use_whole_response();
  use_whole_response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.use_whole_response)
}
#endif
void QueryLog::set_use_whole_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_use_whole_response();
  use_whole_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.use_whole_response)
}
void QueryLog::set_use_whole_response(const char* value, size_t size) {
  set_has_use_whole_response();
  use_whole_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.use_whole_response)
}
::std::string* QueryLog::mutable_use_whole_response() {
  set_has_use_whole_response();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.use_whole_response)
  return use_whole_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryLog::release_use_whole_response() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.use_whole_response)
  clear_has_use_whole_response();
  return use_whole_response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryLog::set_allocated_use_whole_response(::std::string* use_whole_response) {
  if (use_whole_response != NULL) {
    set_has_use_whole_response();
  } else {
    clear_has_use_whole_response();
  }
  use_whole_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), use_whole_response);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.use_whole_response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowedDocuments::kShowedDocumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowedDocuments::ShowedDocuments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.ShowedDocuments)
}
ShowedDocuments::ShowedDocuments(const ShowedDocuments& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      showeddocuments_(from.showeddocuments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.ShowedDocuments)
}

void ShowedDocuments::SharedCtor() {
  _cached_size_ = 0;
}

ShowedDocuments::~ShowedDocuments() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.ShowedDocuments)
  SharedDtor();
}

void ShowedDocuments::SharedDtor() {
}

void ShowedDocuments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowedDocuments::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShowedDocuments& ShowedDocuments::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShowedDocuments* ShowedDocuments::New(::google::protobuf::Arena* arena) const {
  ShowedDocuments* n = new ShowedDocuments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowedDocuments::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.ShowedDocuments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  showeddocuments_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShowedDocuments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.ShowedDocuments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.interleaving.ShowedDocument showedDocuments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showeddocuments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.ShowedDocuments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.ShowedDocuments)
  return false;
#undef DO_
}

void ShowedDocuments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.ShowedDocuments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.ShowedDocument showedDocuments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->showeddocuments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->showeddocuments(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.ShowedDocuments)
}

::google::protobuf::uint8* ShowedDocuments::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.ShowedDocuments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.ShowedDocument showedDocuments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->showeddocuments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->showeddocuments(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.ShowedDocuments)
  return target;
}

size_t ShowedDocuments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.ShowedDocuments)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.interleaving.ShowedDocument showedDocuments = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->showeddocuments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->showeddocuments(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowedDocuments::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.ShowedDocuments)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowedDocuments* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowedDocuments>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.ShowedDocuments)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.ShowedDocuments)
    MergeFrom(*source);
  }
}

void ShowedDocuments::MergeFrom(const ShowedDocuments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.ShowedDocuments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  showeddocuments_.MergeFrom(from.showeddocuments_);
}

void ShowedDocuments::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.ShowedDocuments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowedDocuments::CopyFrom(const ShowedDocuments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.ShowedDocuments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowedDocuments::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->showeddocuments())) return false;
  return true;
}

void ShowedDocuments::Swap(ShowedDocuments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowedDocuments::InternalSwap(ShowedDocuments* other) {
  using std::swap;
  showeddocuments_.InternalSwap(&other->showeddocuments_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowedDocuments::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowedDocuments

// repeated .ru.mail.go.webbase.interleaving.ShowedDocument showedDocuments = 1;
int ShowedDocuments::showeddocuments_size() const {
  return showeddocuments_.size();
}
void ShowedDocuments::clear_showeddocuments() {
  showeddocuments_.Clear();
}
const ::ru::mail::go::webbase::interleaving::ShowedDocument& ShowedDocuments::showeddocuments(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocuments.showedDocuments)
  return showeddocuments_.Get(index);
}
::ru::mail::go::webbase::interleaving::ShowedDocument* ShowedDocuments::mutable_showeddocuments(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ShowedDocuments.showedDocuments)
  return showeddocuments_.Mutable(index);
}
::ru::mail::go::webbase::interleaving::ShowedDocument* ShowedDocuments::add_showeddocuments() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.ShowedDocuments.showedDocuments)
  return showeddocuments_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ShowedDocument >*
ShowedDocuments::mutable_showeddocuments() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.ShowedDocuments.showedDocuments)
  return &showeddocuments_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ShowedDocument >&
ShowedDocuments::showeddocuments() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.ShowedDocuments.showedDocuments)
  return showeddocuments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowedDocument::kShowedFromAFieldNumber;
const int ShowedDocument::kPositionAFieldNumber;
const int ShowedDocument::kPositionBFieldNumber;
const int ShowedDocument::kInterleavedPositionFieldNumber;
const int ShowedDocument::kClickedFieldNumber;
const int ShowedDocument::kUrlFieldNumber;
const int ShowedDocument::kVerticalFieldNumber;
const int ShowedDocument::kSmWeightFieldNumber;
const int ShowedDocument::kRposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowedDocument::ShowedDocument()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.ShowedDocument)
}
ShowedDocument::ShowedDocument(const ShowedDocument& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  vertical_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vertical()) {
    vertical_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vertical_);
  }
  ::memcpy(&position_a_, &from.position_a_,
    static_cast<size_t>(reinterpret_cast<char*>(&rpos_) -
    reinterpret_cast<char*>(&position_a_)) + sizeof(rpos_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.ShowedDocument)
}

void ShowedDocument::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vertical_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rpos_) -
      reinterpret_cast<char*>(&position_a_)) + sizeof(rpos_));
}

ShowedDocument::~ShowedDocument() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.ShowedDocument)
  SharedDtor();
}

void ShowedDocument::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vertical_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShowedDocument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowedDocument::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShowedDocument& ShowedDocument::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShowedDocument* ShowedDocument::New(::google::protobuf::Arena* arena) const {
  ShowedDocument* n = new ShowedDocument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowedDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.ShowedDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!vertical_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vertical_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&position_a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sm_weight_) -
        reinterpret_cast<char*>(&position_a_)) + sizeof(sm_weight_));
  }
  rpos_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShowedDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.ShowedDocument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool showed_from_a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_showed_from_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showed_from_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position_a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_position_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position_b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_position_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 interleaved_position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_interleaved_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interleaved_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clicked = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_clicked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clicked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.ShowedDocument.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vertical = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vertical()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vertical().data(), static_cast<int>(this->vertical().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.ShowedDocument.vertical");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sm_weight = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_sm_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sm_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpos = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_rpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.ShowedDocument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.ShowedDocument)
  return false;
#undef DO_
}

void ShowedDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.ShowedDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool showed_from_a = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->showed_from_a(), output);
  }

  // optional uint32 position_a = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position_a(), output);
  }

  // optional uint32 position_b = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->position_b(), output);
  }

  // required uint32 interleaved_position = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->interleaved_position(), output);
  }

  // optional bool clicked = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->clicked(), output);
  }

  // optional string url = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ShowedDocument.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->url(), output);
  }

  // optional string vertical = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vertical().data(), static_cast<int>(this->vertical().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ShowedDocument.vertical");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->vertical(), output);
  }

  // optional float sm_weight = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->sm_weight(), output);
  }

  // optional uint32 rpos = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rpos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.ShowedDocument)
}

::google::protobuf::uint8* ShowedDocument::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.ShowedDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool showed_from_a = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->showed_from_a(), target);
  }

  // optional uint32 position_a = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position_a(), target);
  }

  // optional uint32 position_b = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->position_b(), target);
  }

  // required uint32 interleaved_position = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->interleaved_position(), target);
  }

  // optional bool clicked = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->clicked(), target);
  }

  // optional string url = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ShowedDocument.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->url(), target);
  }

  // optional string vertical = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vertical().data(), static_cast<int>(this->vertical().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.ShowedDocument.vertical");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->vertical(), target);
  }

  // optional float sm_weight = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->sm_weight(), target);
  }

  // optional uint32 rpos = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->rpos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.ShowedDocument)
  return target;
}

size_t ShowedDocument::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.ShowedDocument)
  size_t total_size = 0;

  if (has_showed_from_a()) {
    // required bool showed_from_a = 1;
    total_size += 1 + 1;
  }

  if (has_interleaved_position()) {
    // required uint32 interleaved_position = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->interleaved_position());
  }

  return total_size;
}
size_t ShowedDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.ShowedDocument)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000050) ^ 0x00000050) == 0) {  // All required fields are present.
    // required bool showed_from_a = 1;
    total_size += 1 + 1;

    // required uint32 interleaved_position = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->interleaved_position());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string url = 6;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string vertical = 7;
    if (has_vertical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vertical());
    }

    // optional uint32 position_a = 2;
    if (has_position_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_a());
    }

    // optional uint32 position_b = 3;
    if (has_position_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_b());
    }

  }
  // optional bool clicked = 5;
  if (has_clicked()) {
    total_size += 1 + 1;
  }

  // optional float sm_weight = 8;
  if (has_sm_weight()) {
    total_size += 1 + 4;
  }

  // optional uint32 rpos = 9;
  if (has_rpos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rpos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowedDocument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.ShowedDocument)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowedDocument* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowedDocument>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.ShowedDocument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.ShowedDocument)
    MergeFrom(*source);
  }
}

void ShowedDocument::MergeFrom(const ShowedDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.ShowedDocument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_vertical();
      vertical_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vertical_);
    }
    if (cached_has_bits & 0x00000004u) {
      position_a_ = from.position_a_;
    }
    if (cached_has_bits & 0x00000008u) {
      position_b_ = from.position_b_;
    }
    if (cached_has_bits & 0x00000010u) {
      showed_from_a_ = from.showed_from_a_;
    }
    if (cached_has_bits & 0x00000020u) {
      clicked_ = from.clicked_;
    }
    if (cached_has_bits & 0x00000040u) {
      interleaved_position_ = from.interleaved_position_;
    }
    if (cached_has_bits & 0x00000080u) {
      sm_weight_ = from.sm_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_rpos(from.rpos());
  }
}

void ShowedDocument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.ShowedDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowedDocument::CopyFrom(const ShowedDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.ShowedDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowedDocument::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000050) != 0x00000050) return false;
  return true;
}

void ShowedDocument::Swap(ShowedDocument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowedDocument::InternalSwap(ShowedDocument* other) {
  using std::swap;
  url_.Swap(&other->url_);
  vertical_.Swap(&other->vertical_);
  swap(position_a_, other->position_a_);
  swap(position_b_, other->position_b_);
  swap(showed_from_a_, other->showed_from_a_);
  swap(clicked_, other->clicked_);
  swap(interleaved_position_, other->interleaved_position_);
  swap(sm_weight_, other->sm_weight_);
  swap(rpos_, other->rpos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowedDocument::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowedDocument

// required bool showed_from_a = 1;
bool ShowedDocument::has_showed_from_a() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ShowedDocument::set_has_showed_from_a() {
  _has_bits_[0] |= 0x00000010u;
}
void ShowedDocument::clear_has_showed_from_a() {
  _has_bits_[0] &= ~0x00000010u;
}
void ShowedDocument::clear_showed_from_a() {
  showed_from_a_ = false;
  clear_has_showed_from_a();
}
bool ShowedDocument::showed_from_a() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.showed_from_a)
  return showed_from_a_;
}
void ShowedDocument::set_showed_from_a(bool value) {
  set_has_showed_from_a();
  showed_from_a_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.showed_from_a)
}

// optional uint32 position_a = 2;
bool ShowedDocument::has_position_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ShowedDocument::set_has_position_a() {
  _has_bits_[0] |= 0x00000004u;
}
void ShowedDocument::clear_has_position_a() {
  _has_bits_[0] &= ~0x00000004u;
}
void ShowedDocument::clear_position_a() {
  position_a_ = 0u;
  clear_has_position_a();
}
::google::protobuf::uint32 ShowedDocument::position_a() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.position_a)
  return position_a_;
}
void ShowedDocument::set_position_a(::google::protobuf::uint32 value) {
  set_has_position_a();
  position_a_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.position_a)
}

// optional uint32 position_b = 3;
bool ShowedDocument::has_position_b() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ShowedDocument::set_has_position_b() {
  _has_bits_[0] |= 0x00000008u;
}
void ShowedDocument::clear_has_position_b() {
  _has_bits_[0] &= ~0x00000008u;
}
void ShowedDocument::clear_position_b() {
  position_b_ = 0u;
  clear_has_position_b();
}
::google::protobuf::uint32 ShowedDocument::position_b() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.position_b)
  return position_b_;
}
void ShowedDocument::set_position_b(::google::protobuf::uint32 value) {
  set_has_position_b();
  position_b_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.position_b)
}

// required uint32 interleaved_position = 4;
bool ShowedDocument::has_interleaved_position() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ShowedDocument::set_has_interleaved_position() {
  _has_bits_[0] |= 0x00000040u;
}
void ShowedDocument::clear_has_interleaved_position() {
  _has_bits_[0] &= ~0x00000040u;
}
void ShowedDocument::clear_interleaved_position() {
  interleaved_position_ = 0u;
  clear_has_interleaved_position();
}
::google::protobuf::uint32 ShowedDocument::interleaved_position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.interleaved_position)
  return interleaved_position_;
}
void ShowedDocument::set_interleaved_position(::google::protobuf::uint32 value) {
  set_has_interleaved_position();
  interleaved_position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.interleaved_position)
}

// optional bool clicked = 5;
bool ShowedDocument::has_clicked() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ShowedDocument::set_has_clicked() {
  _has_bits_[0] |= 0x00000020u;
}
void ShowedDocument::clear_has_clicked() {
  _has_bits_[0] &= ~0x00000020u;
}
void ShowedDocument::clear_clicked() {
  clicked_ = false;
  clear_has_clicked();
}
bool ShowedDocument::clicked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.clicked)
  return clicked_;
}
void ShowedDocument::set_clicked(bool value) {
  set_has_clicked();
  clicked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.clicked)
}

// optional string url = 6;
bool ShowedDocument::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShowedDocument::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ShowedDocument::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShowedDocument::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ShowedDocument::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.url)
  return url_.GetNoArena();
}
void ShowedDocument::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.url)
}
#if LANG_CXX11
void ShowedDocument::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ShowedDocument.url)
}
#endif
void ShowedDocument::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ShowedDocument.url)
}
void ShowedDocument::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ShowedDocument.url)
}
::std::string* ShowedDocument::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ShowedDocument.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShowedDocument::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ShowedDocument.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShowedDocument::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ShowedDocument.url)
}

// optional string vertical = 7;
bool ShowedDocument::has_vertical() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShowedDocument::set_has_vertical() {
  _has_bits_[0] |= 0x00000002u;
}
void ShowedDocument::clear_has_vertical() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShowedDocument::clear_vertical() {
  vertical_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vertical();
}
const ::std::string& ShowedDocument::vertical() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.vertical)
  return vertical_.GetNoArena();
}
void ShowedDocument::set_vertical(const ::std::string& value) {
  set_has_vertical();
  vertical_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.vertical)
}
#if LANG_CXX11
void ShowedDocument::set_vertical(::std::string&& value) {
  set_has_vertical();
  vertical_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ShowedDocument.vertical)
}
#endif
void ShowedDocument::set_vertical(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vertical();
  vertical_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ShowedDocument.vertical)
}
void ShowedDocument::set_vertical(const char* value, size_t size) {
  set_has_vertical();
  vertical_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ShowedDocument.vertical)
}
::std::string* ShowedDocument::mutable_vertical() {
  set_has_vertical();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ShowedDocument.vertical)
  return vertical_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShowedDocument::release_vertical() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ShowedDocument.vertical)
  clear_has_vertical();
  return vertical_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShowedDocument::set_allocated_vertical(::std::string* vertical) {
  if (vertical != NULL) {
    set_has_vertical();
  } else {
    clear_has_vertical();
  }
  vertical_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vertical);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ShowedDocument.vertical)
}

// optional float sm_weight = 8;
bool ShowedDocument::has_sm_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ShowedDocument::set_has_sm_weight() {
  _has_bits_[0] |= 0x00000080u;
}
void ShowedDocument::clear_has_sm_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
void ShowedDocument::clear_sm_weight() {
  sm_weight_ = 0;
  clear_has_sm_weight();
}
float ShowedDocument::sm_weight() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.sm_weight)
  return sm_weight_;
}
void ShowedDocument::set_sm_weight(float value) {
  set_has_sm_weight();
  sm_weight_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.sm_weight)
}

// optional uint32 rpos = 9;
bool ShowedDocument::has_rpos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ShowedDocument::set_has_rpos() {
  _has_bits_[0] |= 0x00000100u;
}
void ShowedDocument::clear_has_rpos() {
  _has_bits_[0] &= ~0x00000100u;
}
void ShowedDocument::clear_rpos() {
  rpos_ = 0u;
  clear_has_rpos();
}
::google::protobuf::uint32 ShowedDocument::rpos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.rpos)
  return rpos_;
}
void ShowedDocument::set_rpos(::google::protobuf::uint32 value) {
  set_has_rpos();
  rpos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.rpos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Click::kPositionFieldNumber;
const int Click::kTimeDelayFieldNumber;
const int Click::kTypeFieldNumber;
const int Click::kSubPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Click::Click()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.Click)
}
Click::Click(const Click& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_position_) -
    reinterpret_cast<char*>(&position_)) + sizeof(sub_position_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.Click)
}

void Click::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_position_) -
      reinterpret_cast<char*>(&position_)) + sizeof(sub_position_));
}

Click::~Click() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.Click)
  SharedDtor();
}

void Click::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Click::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Click::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Click& Click::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

Click* Click::New(::google::protobuf::Arena* arena) const {
  Click* n = new Click;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Click::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.Click)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_type()) {
    GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*type_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sub_position_) -
        reinterpret_cast<char*>(&position_)) + sizeof(sub_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Click::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.Click)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 time_delay = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.Click.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sub_position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_sub_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.Click)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.Click)
  return false;
#undef DO_
}

void Click::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.Click)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 position = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // required uint32 time_delay = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_delay(), output);
  }

  // optional string type = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.Click.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // optional uint32 sub_position = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sub_position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.Click)
}

::google::protobuf::uint8* Click::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.Click)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 position = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // required uint32 time_delay = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_delay(), target);
  }

  // optional string type = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.Click.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional uint32 sub_position = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sub_position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.Click)
  return target;
}

size_t Click::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.Click)
  size_t total_size = 0;

  if (has_position()) {
    // required uint32 position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  if (has_time_delay()) {
    // required uint32 time_delay = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_delay());
  }

  return total_size;
}
size_t Click::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.Click)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());

    // required uint32 time_delay = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_delay());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string type = 3;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional uint32 sub_position = 4;
  if (has_sub_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sub_position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Click::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.Click)
  GOOGLE_DCHECK_NE(&from, this);
  const Click* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Click>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.Click)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.Click)
    MergeFrom(*source);
  }
}

void Click::MergeFrom(const Click& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.Click)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_delay_ = from.time_delay_;
    }
    if (cached_has_bits & 0x00000008u) {
      sub_position_ = from.sub_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Click::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.Click)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Click::CopyFrom(const Click& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.Click)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Click::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void Click::Swap(Click* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Click::InternalSwap(Click* other) {
  using std::swap;
  type_.Swap(&other->type_);
  swap(position_, other->position_);
  swap(time_delay_, other->time_delay_);
  swap(sub_position_, other->sub_position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Click::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Click

// required uint32 position = 1;
bool Click::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Click::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void Click::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void Click::clear_position() {
  position_ = 0u;
  clear_has_position();
}
::google::protobuf::uint32 Click::position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Click.position)
  return position_;
}
void Click::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Click.position)
}

// required uint32 time_delay = 2;
bool Click::has_time_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Click::set_has_time_delay() {
  _has_bits_[0] |= 0x00000004u;
}
void Click::clear_has_time_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
void Click::clear_time_delay() {
  time_delay_ = 0u;
  clear_has_time_delay();
}
::google::protobuf::uint32 Click::time_delay() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Click.time_delay)
  return time_delay_;
}
void Click::set_time_delay(::google::protobuf::uint32 value) {
  set_has_time_delay();
  time_delay_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Click.time_delay)
}

// optional string type = 3;
bool Click::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Click::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Click::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Click::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& Click::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Click.type)
  return type_.GetNoArena();
}
void Click::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Click.type)
}
#if LANG_CXX11
void Click::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.Click.type)
}
#endif
void Click::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.Click.type)
}
void Click::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.Click.type)
}
::std::string* Click::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.Click.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Click::release_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.Click.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Click::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.Click.type)
}

// optional uint32 sub_position = 4;
bool Click::has_sub_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Click::set_has_sub_position() {
  _has_bits_[0] |= 0x00000008u;
}
void Click::clear_has_sub_position() {
  _has_bits_[0] &= ~0x00000008u;
}
void Click::clear_sub_position() {
  sub_position_ = 0u;
  clear_has_sub_position();
}
::google::protobuf::uint32 Click::sub_position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Click.sub_position)
  return sub_position_;
}
void Click::set_sub_position(::google::protobuf::uint32 value) {
  set_has_sub_position();
  sub_position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Click.sub_position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Play::kPositionFieldNumber;
const int Play::kTimeDelayFieldNumber;
const int Play::kTimeFieldNumber;
const int Play::kDurationFieldNumber;
const int Play::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Play::Play()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.Play)
}
Play::Play(const Play& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&position_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.Play)
}

void Play::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&position_)) + sizeof(duration_));
}

Play::~Play() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.Play)
  SharedDtor();
}

void Play::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Play::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Play::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Play& Play::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

Play* Play::New(::google::protobuf::Arena* arena) const {
  Play* n = new Play;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Play::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.Play)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_type()) {
    GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*type_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&position_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Play::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.Play)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 time_delay = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.Play.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.Play)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.Play)
  return false;
#undef DO_
}

void Play::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.Play)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 position = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // required uint32 time_delay = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_delay(), output);
  }

  // required uint32 time = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // required uint32 duration = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->duration(), output);
  }

  // optional string type = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.Play.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.Play)
}

::google::protobuf::uint8* Play::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.Play)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 position = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // required uint32 time_delay = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_delay(), target);
  }

  // required uint32 time = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // required uint32 duration = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->duration(), target);
  }

  // optional string type = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.Play.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.Play)
  return target;
}

size_t Play::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.Play)
  size_t total_size = 0;

  if (has_position()) {
    // required uint32 position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  if (has_time_delay()) {
    // required uint32 time_delay = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_delay());
  }

  if (has_time()) {
    // required uint32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  if (has_duration()) {
    // required uint32 duration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  return total_size;
}
size_t Play::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.Play)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required uint32 position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());

    // required uint32 time_delay = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_delay());

    // required uint32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());

    // required uint32 duration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string type = 5;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Play::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.Play)
  GOOGLE_DCHECK_NE(&from, this);
  const Play* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Play>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.Play)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.Play)
    MergeFrom(*source);
  }
}

void Play::MergeFrom(const Play& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.Play)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_delay_ = from.time_delay_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Play::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.Play)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Play::CopyFrom(const Play& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.Play)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Play::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  return true;
}

void Play::Swap(Play* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Play::InternalSwap(Play* other) {
  using std::swap;
  type_.Swap(&other->type_);
  swap(position_, other->position_);
  swap(time_delay_, other->time_delay_);
  swap(time_, other->time_);
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Play::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Play

// required uint32 position = 1;
bool Play::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Play::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void Play::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void Play::clear_position() {
  position_ = 0u;
  clear_has_position();
}
::google::protobuf::uint32 Play::position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Play.position)
  return position_;
}
void Play::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Play.position)
}

// required uint32 time_delay = 2;
bool Play::has_time_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Play::set_has_time_delay() {
  _has_bits_[0] |= 0x00000004u;
}
void Play::clear_has_time_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
void Play::clear_time_delay() {
  time_delay_ = 0u;
  clear_has_time_delay();
}
::google::protobuf::uint32 Play::time_delay() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Play.time_delay)
  return time_delay_;
}
void Play::set_time_delay(::google::protobuf::uint32 value) {
  set_has_time_delay();
  time_delay_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Play.time_delay)
}

// required uint32 time = 3;
bool Play::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Play::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
void Play::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void Play::clear_time() {
  time_ = 0u;
  clear_has_time();
}
::google::protobuf::uint32 Play::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Play.time)
  return time_;
}
void Play::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Play.time)
}

// required uint32 duration = 4;
bool Play::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Play::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void Play::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void Play::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 Play::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Play.duration)
  return duration_;
}
void Play::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Play.duration)
}

// optional string type = 5;
bool Play::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Play::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Play::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Play::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& Play::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Play.type)
  return type_.GetNoArena();
}
void Play::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Play.type)
}
#if LANG_CXX11
void Play::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.Play.type)
}
#endif
void Play::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.Play.type)
}
void Play::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.Play.type)
}
::std::string* Play::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.Play.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Play::release_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.Play.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Play::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.Play.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Action::kTypeFieldNumber;
const int Action::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action::Action()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.Action)
}
Action::Action(const Action& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&type_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.Action)
}

void Action::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&type_)) + sizeof(position_));
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.Action)
  SharedDtor();
}

void Action::SharedDtor() {
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Action& Action::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

Action* Action::New(::google::protobuf::Arena* arena) const {
  Action* n = new Action;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_) -
        reinterpret_cast<char*>(&type_)) + sizeof(position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.Action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.interleaving.Action.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::interleaving::Action_Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::interleaving::Action_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.Action)
  return false;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.interleaving.Action.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.Action)
}

::google::protobuf::uint8* Action::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.interleaving.Action.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.Action)
  return target;
}

size_t Action::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.Action)
  size_t total_size = 0;

  if (has_type()) {
    // required .ru.mail.go.webbase.interleaving.Action.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_position()) {
    // required uint32 position = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  return total_size;
}
size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.Action)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ru.mail.go.webbase.interleaving.Action.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint32 position = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Action>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.Action)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Action::Swap(Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action::InternalSwap(Action* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(position_, other->position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Action

// required .ru.mail.go.webbase.interleaving.Action.Type type = 1;
bool Action::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Action::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Action::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Action::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::interleaving::Action_Type Action::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Action.type)
  return static_cast< ::ru::mail::go::webbase::interleaving::Action_Type >(type_);
}
void Action::set_type(::ru::mail::go::webbase::interleaving::Action_Type value) {
  assert(::ru::mail::go::webbase::interleaving::Action_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Action.type)
}

// required uint32 position = 2;
bool Action::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Action::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void Action::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void Action::clear_position() {
  position_ = 0u;
  clear_has_position();
}
::google::protobuf::uint32 Action::position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Action.position)
  return position_;
}
void Action::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Action.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Serp::kUrlsFieldNumber;
const int Serp::kTypeFieldNumber;
const int Serp::kQueryFieldNumber;
const int Serp::kRbCodeFieldNumber;
const int Serp::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Serp::Serp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.Serp)
}
Serp::Serp(const Serp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&type_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.Serp)
}

void Serp::SharedCtor() {
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&type_)) + sizeof(timestamp_));
}

Serp::~Serp() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.Serp)
  SharedDtor();
}

void Serp::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Serp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Serp::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Serp& Serp::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

Serp* Serp::New(::google::protobuf::Arena* arena) const {
  Serp* n = new Serp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Serp::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.Serp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  if (has_query()) {
    GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*query_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&type_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Serp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.Serp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string urls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urls(this->urls_size() - 1).data(),
            static_cast<int>(this->urls(this->urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.Serp.urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.interleaving.Serp.SourceType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::interleaving::Serp_SourceType_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::interleaving::Serp_SourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string query = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.Serp.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 rb_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rb_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rb_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.Serp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.Serp)
  return false;
#undef DO_
}

void Serp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.Serp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.Serp.urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->urls(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.interleaving.Serp.SourceType type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required string query = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.Serp.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->query(), output);
  }

  // required uint32 rb_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rb_code(), output);
  }

  // required uint64 timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.Serp)
}

::google::protobuf::uint8* Serp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.Serp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.Serp.urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->urls(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.interleaving.Serp.SourceType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required string query = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.Serp.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->query(), target);
  }

  // required uint32 rb_code = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rb_code(), target);
  }

  // required uint64 timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.Serp)
  return target;
}

size_t Serp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.Serp)
  size_t total_size = 0;

  if (has_query()) {
    // required string query = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  if (has_type()) {
    // required .ru.mail.go.webbase.interleaving.Serp.SourceType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_rb_code()) {
    // required uint32 rb_code = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rb_code());
  }

  if (has_timestamp()) {
    // required uint64 timestamp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  return total_size;
}
size_t Serp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.Serp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string query = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());

    // required .ru.mail.go.webbase.interleaving.Serp.SourceType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint32 rb_code = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rb_code());

    // required uint64 timestamp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string urls = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->urls_size());
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->urls(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Serp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.Serp)
  GOOGLE_DCHECK_NE(&from, this);
  const Serp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Serp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.Serp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.Serp)
    MergeFrom(*source);
  }
}

void Serp::MergeFrom(const Serp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.Serp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      rb_code_ = from.rb_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Serp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.Serp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Serp::CopyFrom(const Serp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.Serp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Serp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Serp::Swap(Serp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Serp::InternalSwap(Serp* other) {
  using std::swap;
  urls_.InternalSwap(&other->urls_);
  query_.Swap(&other->query_);
  swap(type_, other->type_);
  swap(rb_code_, other->rb_code_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Serp::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Serp

// repeated string urls = 1;
int Serp::urls_size() const {
  return urls_.size();
}
void Serp::clear_urls() {
  urls_.Clear();
}
const ::std::string& Serp::urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Serp.urls)
  return urls_.Get(index);
}
::std::string* Serp::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.Serp.urls)
  return urls_.Mutable(index);
}
void Serp::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Serp.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Serp::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Serp.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
void Serp::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.Serp.urls)
}
void Serp::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.Serp.urls)
}
::std::string* Serp::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.interleaving.Serp.urls)
  return urls_.Add();
}
void Serp::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.Serp.urls)
}
#if LANG_CXX11
void Serp::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.Serp.urls)
}
#endif
void Serp::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.interleaving.Serp.urls)
}
void Serp::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.interleaving.Serp.urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Serp::urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.Serp.urls)
  return urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Serp::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.Serp.urls)
  return &urls_;
}

// required .ru.mail.go.webbase.interleaving.Serp.SourceType type = 2;
bool Serp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Serp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Serp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Serp::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::interleaving::Serp_SourceType Serp::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Serp.type)
  return static_cast< ::ru::mail::go::webbase::interleaving::Serp_SourceType >(type_);
}
void Serp::set_type(::ru::mail::go::webbase::interleaving::Serp_SourceType value) {
  assert(::ru::mail::go::webbase::interleaving::Serp_SourceType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Serp.type)
}

// required string query = 3;
bool Serp::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Serp::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void Serp::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void Serp::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& Serp::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Serp.query)
  return query_.GetNoArena();
}
void Serp::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Serp.query)
}
#if LANG_CXX11
void Serp::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.Serp.query)
}
#endif
void Serp::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.Serp.query)
}
void Serp::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.Serp.query)
}
::std::string* Serp::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.Serp.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Serp::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.Serp.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Serp::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.Serp.query)
}

// required uint32 rb_code = 4;
bool Serp::has_rb_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Serp::set_has_rb_code() {
  _has_bits_[0] |= 0x00000004u;
}
void Serp::clear_has_rb_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void Serp::clear_rb_code() {
  rb_code_ = 0u;
  clear_has_rb_code();
}
::google::protobuf::uint32 Serp::rb_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Serp.rb_code)
  return rb_code_;
}
void Serp::set_rb_code(::google::protobuf::uint32 value) {
  set_has_rb_code();
  rb_code_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Serp.rb_code)
}

// required uint64 timestamp = 5;
bool Serp::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Serp::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void Serp::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void Serp::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 Serp::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Serp.timestamp)
  return timestamp_;
}
void Serp::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Serp.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EssrExperimentResult::kMetricValueFieldNumber;
const int EssrExperimentResult::kAWinCountFieldNumber;
const int EssrExperimentResult::kBWinCountFieldNumber;
const int EssrExperimentResult::kEventsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EssrExperimentResult::EssrExperimentResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.EssrExperimentResult)
}
EssrExperimentResult::EssrExperimentResult(const EssrExperimentResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&metric_value_, &from.metric_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&events_count_) -
    reinterpret_cast<char*>(&metric_value_)) + sizeof(events_count_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.EssrExperimentResult)
}

void EssrExperimentResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&metric_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&events_count_) -
      reinterpret_cast<char*>(&metric_value_)) + sizeof(events_count_));
}

EssrExperimentResult::~EssrExperimentResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.EssrExperimentResult)
  SharedDtor();
}

void EssrExperimentResult::SharedDtor() {
}

void EssrExperimentResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EssrExperimentResult::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EssrExperimentResult& EssrExperimentResult::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

EssrExperimentResult* EssrExperimentResult::New(::google::protobuf::Arena* arena) const {
  EssrExperimentResult* n = new EssrExperimentResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EssrExperimentResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.EssrExperimentResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&metric_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&events_count_) -
        reinterpret_cast<char*>(&metric_value_)) + sizeof(events_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EssrExperimentResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.EssrExperimentResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double metric_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_metric_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &metric_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 a_win_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_a_win_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_win_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 b_win_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_b_win_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_win_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 events_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_events_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &events_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.EssrExperimentResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.EssrExperimentResult)
  return false;
#undef DO_
}

void EssrExperimentResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.EssrExperimentResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double metric_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->metric_value(), output);
  }

  // required uint32 a_win_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->a_win_count(), output);
  }

  // required uint32 b_win_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->b_win_count(), output);
  }

  // required uint32 events_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->events_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.EssrExperimentResult)
}

::google::protobuf::uint8* EssrExperimentResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.EssrExperimentResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double metric_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->metric_value(), target);
  }

  // required uint32 a_win_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->a_win_count(), target);
  }

  // required uint32 b_win_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->b_win_count(), target);
  }

  // required uint32 events_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->events_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.EssrExperimentResult)
  return target;
}

size_t EssrExperimentResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.EssrExperimentResult)
  size_t total_size = 0;

  if (has_metric_value()) {
    // required double metric_value = 1;
    total_size += 1 + 8;
  }

  if (has_a_win_count()) {
    // required uint32 a_win_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->a_win_count());
  }

  if (has_b_win_count()) {
    // required uint32 b_win_count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->b_win_count());
  }

  if (has_events_count()) {
    // required uint32 events_count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->events_count());
  }

  return total_size;
}
size_t EssrExperimentResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.EssrExperimentResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double metric_value = 1;
    total_size += 1 + 8;

    // required uint32 a_win_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->a_win_count());

    // required uint32 b_win_count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->b_win_count());

    // required uint32 events_count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->events_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EssrExperimentResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.EssrExperimentResult)
  GOOGLE_DCHECK_NE(&from, this);
  const EssrExperimentResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EssrExperimentResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.EssrExperimentResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.EssrExperimentResult)
    MergeFrom(*source);
  }
}

void EssrExperimentResult::MergeFrom(const EssrExperimentResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.EssrExperimentResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      metric_value_ = from.metric_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      a_win_count_ = from.a_win_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_win_count_ = from.b_win_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      events_count_ = from.events_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EssrExperimentResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.EssrExperimentResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EssrExperimentResult::CopyFrom(const EssrExperimentResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.EssrExperimentResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EssrExperimentResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void EssrExperimentResult::Swap(EssrExperimentResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EssrExperimentResult::InternalSwap(EssrExperimentResult* other) {
  using std::swap;
  swap(metric_value_, other->metric_value_);
  swap(a_win_count_, other->a_win_count_);
  swap(b_win_count_, other->b_win_count_);
  swap(events_count_, other->events_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EssrExperimentResult::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EssrExperimentResult

// required double metric_value = 1;
bool EssrExperimentResult::has_metric_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EssrExperimentResult::set_has_metric_value() {
  _has_bits_[0] |= 0x00000001u;
}
void EssrExperimentResult::clear_has_metric_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void EssrExperimentResult::clear_metric_value() {
  metric_value_ = 0;
  clear_has_metric_value();
}
double EssrExperimentResult::metric_value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.EssrExperimentResult.metric_value)
  return metric_value_;
}
void EssrExperimentResult::set_metric_value(double value) {
  set_has_metric_value();
  metric_value_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.EssrExperimentResult.metric_value)
}

// required uint32 a_win_count = 2;
bool EssrExperimentResult::has_a_win_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EssrExperimentResult::set_has_a_win_count() {
  _has_bits_[0] |= 0x00000002u;
}
void EssrExperimentResult::clear_has_a_win_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void EssrExperimentResult::clear_a_win_count() {
  a_win_count_ = 0u;
  clear_has_a_win_count();
}
::google::protobuf::uint32 EssrExperimentResult::a_win_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.EssrExperimentResult.a_win_count)
  return a_win_count_;
}
void EssrExperimentResult::set_a_win_count(::google::protobuf::uint32 value) {
  set_has_a_win_count();
  a_win_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.EssrExperimentResult.a_win_count)
}

// required uint32 b_win_count = 3;
bool EssrExperimentResult::has_b_win_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EssrExperimentResult::set_has_b_win_count() {
  _has_bits_[0] |= 0x00000004u;
}
void EssrExperimentResult::clear_has_b_win_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void EssrExperimentResult::clear_b_win_count() {
  b_win_count_ = 0u;
  clear_has_b_win_count();
}
::google::protobuf::uint32 EssrExperimentResult::b_win_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.EssrExperimentResult.b_win_count)
  return b_win_count_;
}
void EssrExperimentResult::set_b_win_count(::google::protobuf::uint32 value) {
  set_has_b_win_count();
  b_win_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.EssrExperimentResult.b_win_count)
}

// required uint32 events_count = 4;
bool EssrExperimentResult::has_events_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EssrExperimentResult::set_has_events_count() {
  _has_bits_[0] |= 0x00000008u;
}
void EssrExperimentResult::clear_has_events_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void EssrExperimentResult::clear_events_count() {
  events_count_ = 0u;
  clear_has_events_count();
}
::google::protobuf::uint32 EssrExperimentResult::events_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.EssrExperimentResult.events_count)
  return events_count_;
}
void EssrExperimentResult::set_events_count(::google::protobuf::uint32 value) {
  set_has_events_count();
  events_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.EssrExperimentResult.events_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qs::kNameFieldNumber;
const int Qs::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qs::Qs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.Qs)
}
Qs::Qs(const Qs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.Qs)
}

void Qs::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Qs::~Qs() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.Qs)
  SharedDtor();
}

void Qs::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Qs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qs::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qs& Qs::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

Qs* Qs::New(::google::protobuf::Arena* arena) const {
  Qs* n = new Qs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qs::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.Qs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Qs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.Qs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.Qs.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.Qs.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.Qs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.Qs)
  return false;
#undef DO_
}

void Qs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.Qs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.Qs.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.Qs.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.Qs)
}

::google::protobuf::uint8* Qs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.Qs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.Qs.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.Qs.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.Qs)
  return target;
}

size_t Qs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.Qs)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
size_t Qs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.Qs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.Qs)
  GOOGLE_DCHECK_NE(&from, this);
  const Qs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.Qs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.Qs)
    MergeFrom(*source);
  }
}

void Qs::MergeFrom(const Qs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.Qs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void Qs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.Qs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qs::CopyFrom(const Qs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.Qs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Qs::Swap(Qs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qs::InternalSwap(Qs* other) {
  using std::swap;
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qs::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Qs

// required string name = 1;
bool Qs::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Qs::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Qs::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Qs::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Qs::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Qs.name)
  return name_.GetNoArena();
}
void Qs::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Qs.name)
}
#if LANG_CXX11
void Qs::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.Qs.name)
}
#endif
void Qs::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.Qs.name)
}
void Qs::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.Qs.name)
}
::std::string* Qs::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.Qs.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Qs::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.Qs.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Qs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.Qs.name)
}

// required string value = 2;
bool Qs::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Qs::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Qs::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Qs::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& Qs::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Qs.value)
  return value_.GetNoArena();
}
void Qs::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Qs.value)
}
#if LANG_CXX11
void Qs::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.Qs.value)
}
#endif
void Qs::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.Qs.value)
}
void Qs::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.Qs.value)
}
::std::string* Qs::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.Qs.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Qs::release_value() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.Qs.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Qs::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.Qs.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggNavig::kUrlFieldNumber;
const int SuggNavig::kQueryFieldNumber;
const int SuggNavig::kHasFaviconFieldNumber;
const int SuggNavig::kClickedFieldNumber;
const int SuggNavig::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggNavig::SuggNavig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.SuggNavig)
}
SuggNavig::SuggNavig(const SuggNavig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  ::memcpy(&has_favicon_, &from.has_favicon_,
    static_cast<size_t>(reinterpret_cast<char*>(&clicked_) -
    reinterpret_cast<char*>(&has_favicon_)) + sizeof(clicked_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.SuggNavig)
}

void SuggNavig::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&has_favicon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clicked_) -
      reinterpret_cast<char*>(&has_favicon_)) + sizeof(clicked_));
}

SuggNavig::~SuggNavig() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.SuggNavig)
  SharedDtor();
}

void SuggNavig::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SuggNavig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuggNavig::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuggNavig& SuggNavig::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuggNavig* SuggNavig::New(::google::protobuf::Arena* arena) const {
  SuggNavig* n = new SuggNavig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggNavig::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.SuggNavig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&has_favicon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clicked_) -
        reinterpret_cast<char*>(&has_favicon_)) + sizeof(clicked_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggNavig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.SuggNavig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.SuggNavig.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.SuggNavig.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_favicon = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_has_favicon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_favicon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clicked = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_clicked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clicked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.SuggNavig.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.SuggNavig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.SuggNavig)
  return false;
#undef DO_
}

void SuggNavig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.SuggNavig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.SuggNavig.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string query = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.SuggNavig.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  // optional bool has_favicon = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_favicon(), output);
  }

  // optional bool clicked = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->clicked(), output);
  }

  // optional string source = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.SuggNavig.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.SuggNavig)
}

::google::protobuf::uint8* SuggNavig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.SuggNavig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.SuggNavig.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional string query = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.SuggNavig.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  // optional bool has_favicon = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_favicon(), target);
  }

  // optional bool clicked = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->clicked(), target);
  }

  // optional string source = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.SuggNavig.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.SuggNavig)
  return target;
}

size_t SuggNavig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.SuggNavig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional string source = 5;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional bool has_favicon = 3 [default = false];
    if (has_has_favicon()) {
      total_size += 1 + 1;
    }

    // optional bool clicked = 4 [default = false];
    if (has_clicked()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggNavig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.SuggNavig)
  GOOGLE_DCHECK_NE(&from, this);
  const SuggNavig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuggNavig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.SuggNavig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.SuggNavig)
    MergeFrom(*source);
  }
}

void SuggNavig::MergeFrom(const SuggNavig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.SuggNavig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000008u) {
      has_favicon_ = from.has_favicon_;
    }
    if (cached_has_bits & 0x00000010u) {
      clicked_ = from.clicked_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SuggNavig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.SuggNavig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggNavig::CopyFrom(const SuggNavig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.SuggNavig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggNavig::IsInitialized() const {
  return true;
}

void SuggNavig::Swap(SuggNavig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggNavig::InternalSwap(SuggNavig* other) {
  using std::swap;
  url_.Swap(&other->url_);
  query_.Swap(&other->query_);
  source_.Swap(&other->source_);
  swap(has_favicon_, other->has_favicon_);
  swap(clicked_, other->clicked_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuggNavig::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggNavig

// optional string url = 1;
bool SuggNavig::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuggNavig::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void SuggNavig::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuggNavig::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& SuggNavig::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.SuggNavig.url)
  return url_.GetNoArena();
}
void SuggNavig::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.SuggNavig.url)
}
#if LANG_CXX11
void SuggNavig::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.SuggNavig.url)
}
#endif
void SuggNavig::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.SuggNavig.url)
}
void SuggNavig::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.SuggNavig.url)
}
::std::string* SuggNavig::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.SuggNavig.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggNavig::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.SuggNavig.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggNavig::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.SuggNavig.url)
}

// optional string query = 2;
bool SuggNavig::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SuggNavig::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
void SuggNavig::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
void SuggNavig::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& SuggNavig::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.SuggNavig.query)
  return query_.GetNoArena();
}
void SuggNavig::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.SuggNavig.query)
}
#if LANG_CXX11
void SuggNavig::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.SuggNavig.query)
}
#endif
void SuggNavig::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.SuggNavig.query)
}
void SuggNavig::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.SuggNavig.query)
}
::std::string* SuggNavig::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.SuggNavig.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggNavig::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.SuggNavig.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggNavig::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.SuggNavig.query)
}

// optional bool has_favicon = 3 [default = false];
bool SuggNavig::has_has_favicon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SuggNavig::set_has_has_favicon() {
  _has_bits_[0] |= 0x00000008u;
}
void SuggNavig::clear_has_has_favicon() {
  _has_bits_[0] &= ~0x00000008u;
}
void SuggNavig::clear_has_favicon() {
  has_favicon_ = false;
  clear_has_has_favicon();
}
bool SuggNavig::has_favicon() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.SuggNavig.has_favicon)
  return has_favicon_;
}
void SuggNavig::set_has_favicon(bool value) {
  set_has_has_favicon();
  has_favicon_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.SuggNavig.has_favicon)
}

// optional bool clicked = 4 [default = false];
bool SuggNavig::has_clicked() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SuggNavig::set_has_clicked() {
  _has_bits_[0] |= 0x00000010u;
}
void SuggNavig::clear_has_clicked() {
  _has_bits_[0] &= ~0x00000010u;
}
void SuggNavig::clear_clicked() {
  clicked_ = false;
  clear_has_clicked();
}
bool SuggNavig::clicked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.SuggNavig.clicked)
  return clicked_;
}
void SuggNavig::set_clicked(bool value) {
  set_has_clicked();
  clicked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.SuggNavig.clicked)
}

// optional string source = 5;
bool SuggNavig::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SuggNavig::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
void SuggNavig::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
void SuggNavig::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& SuggNavig::source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.SuggNavig.source)
  return source_.GetNoArena();
}
void SuggNavig::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.SuggNavig.source)
}
#if LANG_CXX11
void SuggNavig::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.SuggNavig.source)
}
#endif
void SuggNavig::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.SuggNavig.source)
}
void SuggNavig::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.SuggNavig.source)
}
::std::string* SuggNavig::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.SuggNavig.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggNavig::release_source() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.SuggNavig.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggNavig::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.SuggNavig.source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlSession::kUrlsFieldNumber;
const int AlSession::kFreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlSession::AlSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.AlSession)
}
AlSession::AlSession(const AlSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  freq_ = from.freq_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.AlSession)
}

void AlSession::SharedCtor() {
  _cached_size_ = 0;
  freq_ = 1u;
}

AlSession::~AlSession() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.AlSession)
  SharedDtor();
}

void AlSession::SharedDtor() {
}

void AlSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlSession::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AlSession& AlSession::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

AlSession* AlSession::New(::google::protobuf::Arena* arena) const {
  AlSession* n = new AlSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlSession::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.AlSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  freq_ = 1u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AlSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.AlSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string urls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urls(this->urls_size() - 1).data(),
            static_cast<int>(this->urls(this->urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.AlSession.urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 freq = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_freq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.AlSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.AlSession)
  return false;
#undef DO_
}

void AlSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.AlSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.AlSession.urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->urls(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 freq = 2 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->freq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.AlSession)
}

::google::protobuf::uint8* AlSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.AlSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.AlSession.urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->urls(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 freq = 2 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->freq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.AlSession)
  return target;
}

size_t AlSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.AlSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string urls = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->urls_size());
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->urls(i));
  }

  // optional uint32 freq = 2 [default = 1];
  if (has_freq()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->freq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.AlSession)
  GOOGLE_DCHECK_NE(&from, this);
  const AlSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.AlSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.AlSession)
    MergeFrom(*source);
  }
}

void AlSession::MergeFrom(const AlSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.AlSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
  if (from.has_freq()) {
    set_freq(from.freq());
  }
}

void AlSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.AlSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlSession::CopyFrom(const AlSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.AlSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlSession::IsInitialized() const {
  return true;
}

void AlSession::Swap(AlSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlSession::InternalSwap(AlSession* other) {
  using std::swap;
  urls_.InternalSwap(&other->urls_);
  swap(freq_, other->freq_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AlSession::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlSession

// repeated string urls = 1;
int AlSession::urls_size() const {
  return urls_.size();
}
void AlSession::clear_urls() {
  urls_.Clear();
}
const ::std::string& AlSession::urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.AlSession.urls)
  return urls_.Get(index);
}
::std::string* AlSession::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.AlSession.urls)
  return urls_.Mutable(index);
}
void AlSession::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.AlSession.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void AlSession::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.AlSession.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
void AlSession::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.AlSession.urls)
}
void AlSession::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.AlSession.urls)
}
::std::string* AlSession::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.interleaving.AlSession.urls)
  return urls_.Add();
}
void AlSession::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.AlSession.urls)
}
#if LANG_CXX11
void AlSession::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.AlSession.urls)
}
#endif
void AlSession::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.interleaving.AlSession.urls)
}
void AlSession::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.interleaving.AlSession.urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
AlSession::urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.AlSession.urls)
  return urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
AlSession::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.AlSession.urls)
  return &urls_;
}

// optional uint32 freq = 2 [default = 1];
bool AlSession::has_freq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AlSession::set_has_freq() {
  _has_bits_[0] |= 0x00000001u;
}
void AlSession::clear_has_freq() {
  _has_bits_[0] &= ~0x00000001u;
}
void AlSession::clear_freq() {
  freq_ = 1u;
  clear_has_freq();
}
::google::protobuf::uint32 AlSession::freq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.AlSession.freq)
  return freq_;
}
void AlSession::set_freq(::google::protobuf::uint32 value) {
  set_has_freq();
  freq_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.AlSession.freq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlSource::kTypeFieldNumber;
const int AlSource::kSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlSource::AlSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.AlSource)
}
AlSource::AlSource(const AlSource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.AlSource)
}

void AlSource::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
}

AlSource::~AlSource() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.AlSource)
  SharedDtor();
}

void AlSource::SharedDtor() {
}

void AlSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlSource::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AlSource& AlSource::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

AlSource* AlSource::New(::google::protobuf::Arena* arena) const {
  AlSource* n = new AlSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlSource::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.AlSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_.Clear();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AlSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.AlSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.interleaving.AlSource.SourceType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::interleaving::AlSource_SourceType_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::interleaving::AlSource_SourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.interleaving.AlSession sessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.AlSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.AlSource)
  return false;
#undef DO_
}

void AlSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.AlSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.interleaving.AlSource.SourceType type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .ru.mail.go.webbase.interleaving.AlSession sessions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sessions(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.AlSource)
}

::google::protobuf::uint8* AlSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.AlSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.interleaving.AlSource.SourceType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .ru.mail.go.webbase.interleaving.AlSession sessions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->sessions(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.AlSource)
  return target;
}

size_t AlSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.AlSource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.interleaving.AlSource.SourceType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated .ru.mail.go.webbase.interleaving.AlSession sessions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sessions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.AlSource)
  GOOGLE_DCHECK_NE(&from, this);
  const AlSource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.AlSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.AlSource)
    MergeFrom(*source);
  }
}

void AlSource::MergeFrom(const AlSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.AlSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
  if (from.has_type()) {
    set_type(from.type());
  }
}

void AlSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.AlSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlSource::CopyFrom(const AlSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.AlSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlSource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AlSource::Swap(AlSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlSource::InternalSwap(AlSource* other) {
  using std::swap;
  sessions_.InternalSwap(&other->sessions_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AlSource::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlSource

// required .ru.mail.go.webbase.interleaving.AlSource.SourceType type = 1;
bool AlSource::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AlSource::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void AlSource::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void AlSource::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::interleaving::AlSource_SourceType AlSource::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.AlSource.type)
  return static_cast< ::ru::mail::go::webbase::interleaving::AlSource_SourceType >(type_);
}
void AlSource::set_type(::ru::mail::go::webbase::interleaving::AlSource_SourceType value) {
  assert(::ru::mail::go::webbase::interleaving::AlSource_SourceType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.AlSource.type)
}

// repeated .ru.mail.go.webbase.interleaving.AlSession sessions = 2;
int AlSource::sessions_size() const {
  return sessions_.size();
}
void AlSource::clear_sessions() {
  sessions_.Clear();
}
const ::ru::mail::go::webbase::interleaving::AlSession& AlSource::sessions(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.AlSource.sessions)
  return sessions_.Get(index);
}
::ru::mail::go::webbase::interleaving::AlSession* AlSource::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.AlSource.sessions)
  return sessions_.Mutable(index);
}
::ru::mail::go::webbase::interleaving::AlSession* AlSource::add_sessions() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.AlSource.sessions)
  return sessions_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlSession >*
AlSource::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.AlSource.sessions)
  return &sessions_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlSession >&
AlSource::sessions() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.AlSource.sessions)
  return sessions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlQueryData::kQueryFieldNumber;
const int AlQueryData::kRbCodeFieldNumber;
const int AlQueryData::kSourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlQueryData::AlQueryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.AlQueryData)
}
AlQueryData::AlQueryData(const AlQueryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sources_(from.sources_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  rb_code_ = from.rb_code_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.AlQueryData)
}

void AlQueryData::SharedCtor() {
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rb_code_ = 0;
}

AlQueryData::~AlQueryData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.AlQueryData)
  SharedDtor();
}

void AlQueryData::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AlQueryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlQueryData::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AlQueryData& AlQueryData::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

AlQueryData* AlQueryData::New(::google::protobuf::Arena* arena) const {
  AlQueryData* n = new AlQueryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlQueryData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.AlQueryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_.Clear();
  if (has_query()) {
    GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*query_.UnsafeRawStringPointer())->clear();
  }
  rb_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AlQueryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.AlQueryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.AlQueryData.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 rb_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_rb_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rb_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.interleaving.AlSource sources = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.AlQueryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.AlQueryData)
  return false;
#undef DO_
}

void AlQueryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.AlQueryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.AlQueryData.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // required int32 rb_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rb_code(), output);
  }

  // repeated .ru.mail.go.webbase.interleaving.AlSource sources = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sources(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.AlQueryData)
}

::google::protobuf::uint8* AlQueryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.AlQueryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.AlQueryData.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // required int32 rb_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rb_code(), target);
  }

  // repeated .ru.mail.go.webbase.interleaving.AlSource sources = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->sources(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.AlQueryData)
  return target;
}

size_t AlQueryData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.AlQueryData)
  size_t total_size = 0;

  if (has_query()) {
    // required string query = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  if (has_rb_code()) {
    // required int32 rb_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rb_code());
  }

  return total_size;
}
size_t AlQueryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.AlQueryData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string query = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());

    // required int32 rb_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rb_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.webbase.interleaving.AlSource sources = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->sources_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sources(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlQueryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.AlQueryData)
  GOOGLE_DCHECK_NE(&from, this);
  const AlQueryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlQueryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.AlQueryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.AlQueryData)
    MergeFrom(*source);
  }
}

void AlQueryData::MergeFrom(const AlQueryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.AlQueryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sources_.MergeFrom(from.sources_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      rb_code_ = from.rb_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlQueryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.AlQueryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlQueryData::CopyFrom(const AlQueryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.AlQueryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlQueryData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sources())) return false;
  return true;
}

void AlQueryData::Swap(AlQueryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlQueryData::InternalSwap(AlQueryData* other) {
  using std::swap;
  sources_.InternalSwap(&other->sources_);
  query_.Swap(&other->query_);
  swap(rb_code_, other->rb_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AlQueryData::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlQueryData

// required string query = 1;
bool AlQueryData::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AlQueryData::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void AlQueryData::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void AlQueryData::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& AlQueryData::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.AlQueryData.query)
  return query_.GetNoArena();
}
void AlQueryData::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.AlQueryData.query)
}
#if LANG_CXX11
void AlQueryData::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.AlQueryData.query)
}
#endif
void AlQueryData::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.AlQueryData.query)
}
void AlQueryData::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.AlQueryData.query)
}
::std::string* AlQueryData::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.AlQueryData.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlQueryData::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.AlQueryData.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlQueryData::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.AlQueryData.query)
}

// required int32 rb_code = 2;
bool AlQueryData::has_rb_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AlQueryData::set_has_rb_code() {
  _has_bits_[0] |= 0x00000002u;
}
void AlQueryData::clear_has_rb_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void AlQueryData::clear_rb_code() {
  rb_code_ = 0;
  clear_has_rb_code();
}
::google::protobuf::int32 AlQueryData::rb_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.AlQueryData.rb_code)
  return rb_code_;
}
void AlQueryData::set_rb_code(::google::protobuf::int32 value) {
  set_has_rb_code();
  rb_code_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.AlQueryData.rb_code)
}

// repeated .ru.mail.go.webbase.interleaving.AlSource sources = 3;
int AlQueryData::sources_size() const {
  return sources_.size();
}
void AlQueryData::clear_sources() {
  sources_.Clear();
}
const ::ru::mail::go::webbase::interleaving::AlSource& AlQueryData::sources(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.AlQueryData.sources)
  return sources_.Get(index);
}
::ru::mail::go::webbase::interleaving::AlSource* AlQueryData::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.AlQueryData.sources)
  return sources_.Mutable(index);
}
::ru::mail::go::webbase::interleaving::AlSource* AlQueryData::add_sources() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.AlQueryData.sources)
  return sources_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlSource >*
AlQueryData::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.AlQueryData.sources)
  return &sources_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlSource >&
AlQueryData::sources() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.AlQueryData.sources)
  return sources_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlQueryDataList::kQueriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlQueryDataList::AlQueryDataList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.AlQueryDataList)
}
AlQueryDataList::AlQueryDataList(const AlQueryDataList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      queries_(from.queries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.AlQueryDataList)
}

void AlQueryDataList::SharedCtor() {
  _cached_size_ = 0;
}

AlQueryDataList::~AlQueryDataList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.AlQueryDataList)
  SharedDtor();
}

void AlQueryDataList::SharedDtor() {
}

void AlQueryDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlQueryDataList::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AlQueryDataList& AlQueryDataList::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

AlQueryDataList* AlQueryDataList::New(::google::protobuf::Arena* arena) const {
  AlQueryDataList* n = new AlQueryDataList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlQueryDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.AlQueryDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AlQueryDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.AlQueryDataList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.interleaving.AlQueryData queries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.AlQueryDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.AlQueryDataList)
  return false;
#undef DO_
}

void AlQueryDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.AlQueryDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.AlQueryData queries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->queries(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.AlQueryDataList)
}

::google::protobuf::uint8* AlQueryDataList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.AlQueryDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.interleaving.AlQueryData queries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->queries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.AlQueryDataList)
  return target;
}

size_t AlQueryDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.AlQueryDataList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.interleaving.AlQueryData queries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->queries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlQueryDataList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.AlQueryDataList)
  GOOGLE_DCHECK_NE(&from, this);
  const AlQueryDataList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlQueryDataList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.AlQueryDataList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.AlQueryDataList)
    MergeFrom(*source);
  }
}

void AlQueryDataList::MergeFrom(const AlQueryDataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.AlQueryDataList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queries_.MergeFrom(from.queries_);
}

void AlQueryDataList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.AlQueryDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlQueryDataList::CopyFrom(const AlQueryDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.AlQueryDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlQueryDataList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->queries())) return false;
  return true;
}

void AlQueryDataList::Swap(AlQueryDataList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlQueryDataList::InternalSwap(AlQueryDataList* other) {
  using std::swap;
  queries_.InternalSwap(&other->queries_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AlQueryDataList::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlQueryDataList

// repeated .ru.mail.go.webbase.interleaving.AlQueryData queries = 1;
int AlQueryDataList::queries_size() const {
  return queries_.size();
}
void AlQueryDataList::clear_queries() {
  queries_.Clear();
}
const ::ru::mail::go::webbase::interleaving::AlQueryData& AlQueryDataList::queries(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.AlQueryDataList.queries)
  return queries_.Get(index);
}
::ru::mail::go::webbase::interleaving::AlQueryData* AlQueryDataList::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.AlQueryDataList.queries)
  return queries_.Mutable(index);
}
::ru::mail::go::webbase::interleaving::AlQueryData* AlQueryDataList::add_queries() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.AlQueryDataList.queries)
  return queries_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlQueryData >*
AlQueryDataList::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.AlQueryDataList.queries)
  return &queries_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlQueryData >&
AlQueryDataList::queries() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.AlQueryDataList.queries)
  return queries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentStats::kShowedFieldNumber;
const int DocumentStats::kClickedFieldNumber;
const int DocumentStats::kSatisfiedFieldNumber;
const int DocumentStats::kLongClickFieldNumber;
const int DocumentStats::kSnippetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentStats::DocumentStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_experiment_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.interleaving.DocumentStats)
}
DocumentStats::DocumentStats(const DocumentStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_snippet()) {
    snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snippet_);
  }
  ::memcpy(&showed_, &from.showed_,
    static_cast<size_t>(reinterpret_cast<char*>(&long_click_) -
    reinterpret_cast<char*>(&showed_)) + sizeof(long_click_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.interleaving.DocumentStats)
}

void DocumentStats::SharedCtor() {
  _cached_size_ = 0;
  snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&showed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&long_click_) -
      reinterpret_cast<char*>(&showed_)) + sizeof(long_click_));
}

DocumentStats::~DocumentStats() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.interleaving.DocumentStats)
  SharedDtor();
}

void DocumentStats::SharedDtor() {
  snippet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DocumentStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentStats::descriptor() {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentStats& DocumentStats::default_instance() {
  protobuf_experiment_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentStats* DocumentStats::New(::google::protobuf::Arena* arena) const {
  DocumentStats* n = new DocumentStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentStats::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.interleaving.DocumentStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_snippet()) {
    GOOGLE_DCHECK(!snippet_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*snippet_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&showed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&long_click_) -
        reinterpret_cast<char*>(&showed_)) + sizeof(long_click_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.interleaving.DocumentStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool showed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_showed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool clicked = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_clicked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clicked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool satisfied = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_satisfied();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &satisfied_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool long_click = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_long_click();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &long_click_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string snippet = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snippet().data(), static_cast<int>(this->snippet().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.interleaving.DocumentStats.snippet");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.interleaving.DocumentStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.interleaving.DocumentStats)
  return false;
#undef DO_
}

void DocumentStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.interleaving.DocumentStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool showed = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->showed(), output);
  }

  // required bool clicked = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clicked(), output);
  }

  // required bool satisfied = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->satisfied(), output);
  }

  // required bool long_click = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->long_click(), output);
  }

  // optional string snippet = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snippet().data(), static_cast<int>(this->snippet().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.DocumentStats.snippet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->snippet(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.interleaving.DocumentStats)
}

::google::protobuf::uint8* DocumentStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.interleaving.DocumentStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool showed = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->showed(), target);
  }

  // required bool clicked = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clicked(), target);
  }

  // required bool satisfied = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->satisfied(), target);
  }

  // required bool long_click = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->long_click(), target);
  }

  // optional string snippet = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snippet().data(), static_cast<int>(this->snippet().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.interleaving.DocumentStats.snippet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->snippet(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.interleaving.DocumentStats)
  return target;
}

size_t DocumentStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.interleaving.DocumentStats)
  size_t total_size = 0;

  if (has_showed()) {
    // required bool showed = 1;
    total_size += 1 + 1;
  }

  if (has_clicked()) {
    // required bool clicked = 2;
    total_size += 1 + 1;
  }

  if (has_satisfied()) {
    // required bool satisfied = 3;
    total_size += 1 + 1;
  }

  if (has_long_click()) {
    // required bool long_click = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t DocumentStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.interleaving.DocumentStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required bool showed = 1;
    total_size += 1 + 1;

    // required bool clicked = 2;
    total_size += 1 + 1;

    // required bool satisfied = 3;
    total_size += 1 + 1;

    // required bool long_click = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string snippet = 5;
  if (has_snippet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snippet());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.interleaving.DocumentStats)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.interleaving.DocumentStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.interleaving.DocumentStats)
    MergeFrom(*source);
  }
}

void DocumentStats::MergeFrom(const DocumentStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.interleaving.DocumentStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_snippet();
      snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snippet_);
    }
    if (cached_has_bits & 0x00000002u) {
      showed_ = from.showed_;
    }
    if (cached_has_bits & 0x00000004u) {
      clicked_ = from.clicked_;
    }
    if (cached_has_bits & 0x00000008u) {
      satisfied_ = from.satisfied_;
    }
    if (cached_has_bits & 0x00000010u) {
      long_click_ = from.long_click_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.interleaving.DocumentStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentStats::CopyFrom(const DocumentStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.interleaving.DocumentStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  return true;
}

void DocumentStats::Swap(DocumentStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentStats::InternalSwap(DocumentStats* other) {
  using std::swap;
  snippet_.Swap(&other->snippet_);
  swap(showed_, other->showed_);
  swap(clicked_, other->clicked_);
  swap(satisfied_, other->satisfied_);
  swap(long_click_, other->long_click_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentStats::GetMetadata() const {
  protobuf_experiment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_experiment_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentStats

// required bool showed = 1;
bool DocumentStats::has_showed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentStats::set_has_showed() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentStats::clear_has_showed() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentStats::clear_showed() {
  showed_ = false;
  clear_has_showed();
}
bool DocumentStats::showed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DocumentStats.showed)
  return showed_;
}
void DocumentStats::set_showed(bool value) {
  set_has_showed();
  showed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DocumentStats.showed)
}

// required bool clicked = 2;
bool DocumentStats::has_clicked() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentStats::set_has_clicked() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentStats::clear_has_clicked() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentStats::clear_clicked() {
  clicked_ = false;
  clear_has_clicked();
}
bool DocumentStats::clicked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DocumentStats.clicked)
  return clicked_;
}
void DocumentStats::set_clicked(bool value) {
  set_has_clicked();
  clicked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DocumentStats.clicked)
}

// required bool satisfied = 3;
bool DocumentStats::has_satisfied() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DocumentStats::set_has_satisfied() {
  _has_bits_[0] |= 0x00000008u;
}
void DocumentStats::clear_has_satisfied() {
  _has_bits_[0] &= ~0x00000008u;
}
void DocumentStats::clear_satisfied() {
  satisfied_ = false;
  clear_has_satisfied();
}
bool DocumentStats::satisfied() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DocumentStats.satisfied)
  return satisfied_;
}
void DocumentStats::set_satisfied(bool value) {
  set_has_satisfied();
  satisfied_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DocumentStats.satisfied)
}

// required bool long_click = 4;
bool DocumentStats::has_long_click() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DocumentStats::set_has_long_click() {
  _has_bits_[0] |= 0x00000010u;
}
void DocumentStats::clear_has_long_click() {
  _has_bits_[0] &= ~0x00000010u;
}
void DocumentStats::clear_long_click() {
  long_click_ = false;
  clear_has_long_click();
}
bool DocumentStats::long_click() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DocumentStats.long_click)
  return long_click_;
}
void DocumentStats::set_long_click(bool value) {
  set_has_long_click();
  long_click_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DocumentStats.long_click)
}

// optional string snippet = 5;
bool DocumentStats::has_snippet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentStats::set_has_snippet() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentStats::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentStats::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snippet();
}
const ::std::string& DocumentStats::snippet() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DocumentStats.snippet)
  return snippet_.GetNoArena();
}
void DocumentStats::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DocumentStats.snippet)
}
#if LANG_CXX11
void DocumentStats::set_snippet(::std::string&& value) {
  set_has_snippet();
  snippet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.DocumentStats.snippet)
}
#endif
void DocumentStats::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.DocumentStats.snippet)
}
void DocumentStats::set_snippet(const char* value, size_t size) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.DocumentStats.snippet)
}
::std::string* DocumentStats::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.DocumentStats.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocumentStats::release_snippet() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.DocumentStats.snippet)
  clear_has_snippet();
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocumentStats::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.DocumentStats.snippet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace interleaving
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
