// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiment.proto

#ifndef PROTOBUF_experiment_2eproto__INCLUDED
#define PROTOBUF_experiment_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace interleaving {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class AlQueryData;
class AlQueryDataDefaultTypeInternal;
extern AlQueryDataDefaultTypeInternal _AlQueryData_default_instance_;
class AlQueryDataList;
class AlQueryDataListDefaultTypeInternal;
extern AlQueryDataListDefaultTypeInternal _AlQueryDataList_default_instance_;
class AlSession;
class AlSessionDefaultTypeInternal;
extern AlSessionDefaultTypeInternal _AlSession_default_instance_;
class AlSource;
class AlSourceDefaultTypeInternal;
extern AlSourceDefaultTypeInternal _AlSource_default_instance_;
class Click;
class ClickDefaultTypeInternal;
extern ClickDefaultTypeInternal _Click_default_instance_;
class DocumentStats;
class DocumentStatsDefaultTypeInternal;
extern DocumentStatsDefaultTypeInternal _DocumentStats_default_instance_;
class DumpProgress;
class DumpProgressDefaultTypeInternal;
extern DumpProgressDefaultTypeInternal _DumpProgress_default_instance_;
class DumpResult;
class DumpResultDefaultTypeInternal;
extern DumpResultDefaultTypeInternal _DumpResult_default_instance_;
class DumpResults;
class DumpResultsDefaultTypeInternal;
extern DumpResultsDefaultTypeInternal _DumpResults_default_instance_;
class DumpTask;
class DumpTaskDefaultTypeInternal;
extern DumpTaskDefaultTypeInternal _DumpTask_default_instance_;
class DumpTasks;
class DumpTasksDefaultTypeInternal;
extern DumpTasksDefaultTypeInternal _DumpTasks_default_instance_;
class DumpsProgress;
class DumpsProgressDefaultTypeInternal;
extern DumpsProgressDefaultTypeInternal _DumpsProgress_default_instance_;
class EssrExperimentResult;
class EssrExperimentResultDefaultTypeInternal;
extern EssrExperimentResultDefaultTypeInternal _EssrExperimentResult_default_instance_;
class ExperimentConfig;
class ExperimentConfigDefaultTypeInternal;
extern ExperimentConfigDefaultTypeInternal _ExperimentConfig_default_instance_;
class ExperimentMetaConfig;
class ExperimentMetaConfigDefaultTypeInternal;
extern ExperimentMetaConfigDefaultTypeInternal _ExperimentMetaConfig_default_instance_;
class ExperimentStats;
class ExperimentStatsDefaultTypeInternal;
extern ExperimentStatsDefaultTypeInternal _ExperimentStats_default_instance_;
class ExperimentStatsList;
class ExperimentStatsListDefaultTypeInternal;
extern ExperimentStatsListDefaultTypeInternal _ExperimentStatsList_default_instance_;
class FailStat;
class FailStatDefaultTypeInternal;
extern FailStatDefaultTypeInternal _FailStat_default_instance_;
class MetricResult;
class MetricResultDefaultTypeInternal;
extern MetricResultDefaultTypeInternal _MetricResult_default_instance_;
class MetricsMetaTask;
class MetricsMetaTaskDefaultTypeInternal;
extern MetricsMetaTaskDefaultTypeInternal _MetricsMetaTask_default_instance_;
class MetricsResults;
class MetricsResultsDefaultTypeInternal;
extern MetricsResultsDefaultTypeInternal _MetricsResults_default_instance_;
class MetricsTask;
class MetricsTaskDefaultTypeInternal;
extern MetricsTaskDefaultTypeInternal _MetricsTask_default_instance_;
class Play;
class PlayDefaultTypeInternal;
extern PlayDefaultTypeInternal _Play_default_instance_;
class Qs;
class QsDefaultTypeInternal;
extern QsDefaultTypeInternal _Qs_default_instance_;
class QueryLog;
class QueryLogDefaultTypeInternal;
extern QueryLogDefaultTypeInternal _QueryLog_default_instance_;
class Serp;
class SerpDefaultTypeInternal;
extern SerpDefaultTypeInternal _Serp_default_instance_;
class ShowedDocument;
class ShowedDocumentDefaultTypeInternal;
extern ShowedDocumentDefaultTypeInternal _ShowedDocument_default_instance_;
class ShowedDocuments;
class ShowedDocumentsDefaultTypeInternal;
extern ShowedDocumentsDefaultTypeInternal _ShowedDocuments_default_instance_;
class SuggNavig;
class SuggNavigDefaultTypeInternal;
extern SuggNavigDefaultTypeInternal _SuggNavig_default_instance_;
}  // namespace interleaving
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace interleaving {

namespace protobuf_experiment_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_experiment_2eproto

enum Action_Type {
  Action_Type_CLICK = 0,
  Action_Type_SHARE = 1,
  Action_Type_LIKE = 2,
  Action_Type_CLOSE = 3,
  Action_Type_DISLIKE = 4
};
bool Action_Type_IsValid(int value);
const Action_Type Action_Type_Type_MIN = Action_Type_CLICK;
const Action_Type Action_Type_Type_MAX = Action_Type_DISLIKE;
const int Action_Type_Type_ARRAYSIZE = Action_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Action_Type_descriptor();
inline const ::std::string& Action_Type_Name(Action_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Action_Type_descriptor(), value);
}
inline bool Action_Type_Parse(
    const ::std::string& name, Action_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Action_Type>(
    Action_Type_descriptor(), name, value);
}
enum Serp_SourceType {
  Serp_SourceType_UNDEF = 0,
  Serp_SourceType_YNDX = 1,
  Serp_SourceType_GOOGL = 2
};
bool Serp_SourceType_IsValid(int value);
const Serp_SourceType Serp_SourceType_SourceType_MIN = Serp_SourceType_UNDEF;
const Serp_SourceType Serp_SourceType_SourceType_MAX = Serp_SourceType_GOOGL;
const int Serp_SourceType_SourceType_ARRAYSIZE = Serp_SourceType_SourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Serp_SourceType_descriptor();
inline const ::std::string& Serp_SourceType_Name(Serp_SourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Serp_SourceType_descriptor(), value);
}
inline bool Serp_SourceType_Parse(
    const ::std::string& name, Serp_SourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Serp_SourceType>(
    Serp_SourceType_descriptor(), name, value);
}
enum AlSource_SourceType {
  AlSource_SourceType_UNDEF = 0,
  AlSource_SourceType_YNDX = 1,
  AlSource_SourceType_GOOGL = 2
};
bool AlSource_SourceType_IsValid(int value);
const AlSource_SourceType AlSource_SourceType_SourceType_MIN = AlSource_SourceType_UNDEF;
const AlSource_SourceType AlSource_SourceType_SourceType_MAX = AlSource_SourceType_GOOGL;
const int AlSource_SourceType_SourceType_ARRAYSIZE = AlSource_SourceType_SourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AlSource_SourceType_descriptor();
inline const ::std::string& AlSource_SourceType_Name(AlSource_SourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AlSource_SourceType_descriptor(), value);
}
inline bool AlSource_SourceType_Parse(
    const ::std::string& name, AlSource_SourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AlSource_SourceType>(
    AlSource_SourceType_descriptor(), name, value);
}
// ===================================================================

class FailStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.FailStat) */ {
 public:
  FailStat();
  virtual ~FailStat();

  FailStat(const FailStat& from);

  inline FailStat& operator=(const FailStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FailStat(FailStat&& from) noexcept
    : FailStat() {
    *this = ::std::move(from);
  }

  inline FailStat& operator=(FailStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FailStat& default_instance();

  static inline const FailStat* internal_default_instance() {
    return reinterpret_cast<const FailStat*>(
               &_FailStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FailStat* other);
  friend void swap(FailStat& a, FailStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FailStat* New() const PROTOBUF_FINAL { return New(NULL); }

  FailStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FailStat& from);
  void MergeFrom(const FailStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FailStat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional uint32 count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.FailStat)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExperimentStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.ExperimentStats) */ {
 public:
  ExperimentStats();
  virtual ~ExperimentStats();

  ExperimentStats(const ExperimentStats& from);

  inline ExperimentStats& operator=(const ExperimentStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExperimentStats(ExperimentStats&& from) noexcept
    : ExperimentStats() {
    *this = ::std::move(from);
  }

  inline ExperimentStats& operator=(ExperimentStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExperimentStats& default_instance();

  static inline const ExperimentStats* internal_default_instance() {
    return reinterpret_cast<const ExperimentStats*>(
               &_ExperimentStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ExperimentStats* other);
  friend void swap(ExperimentStats& a, ExperimentStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExperimentStats* New() const PROTOBUF_FINAL { return New(NULL); }

  ExperimentStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExperimentStats& from);
  void MergeFrom(const ExperimentStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExperimentStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.interleaving.FailStat fails_stat = 9;
  int fails_stat_size() const;
  void clear_fails_stat();
  static const int kFailsStatFieldNumber = 9;
  const ::ru::mail::go::webbase::interleaving::FailStat& fails_stat(int index) const;
  ::ru::mail::go::webbase::interleaving::FailStat* mutable_fails_stat(int index);
  ::ru::mail::go::webbase::interleaving::FailStat* add_fails_stat();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::FailStat >*
      mutable_fails_stat();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::FailStat >&
      fails_stat() const;

  // optional string fail_reason = 4;
  bool has_fail_reason() const;
  void clear_fail_reason();
  static const int kFailReasonFieldNumber = 4;
  const ::std::string& fail_reason() const;
  void set_fail_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_fail_reason(::std::string&& value);
  #endif
  void set_fail_reason(const char* value);
  void set_fail_reason(const char* value, size_t size);
  ::std::string* mutable_fail_reason();
  ::std::string* release_fail_reason();
  void set_allocated_fail_reason(::std::string* fail_reason);

  // optional string info = 10;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 10;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  #if LANG_CXX11
  void set_info(::std::string&& value);
  #endif
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // required uint32 queries_count = 2;
  bool has_queries_count() const;
  void clear_queries_count();
  static const int kQueriesCountFieldNumber = 2;
  ::google::protobuf::uint32 queries_count() const;
  void set_queries_count(::google::protobuf::uint32 value);

  // required bool failed = 3;
  bool has_failed() const;
  void clear_failed();
  static const int kFailedFieldNumber = 3;
  bool failed() const;
  void set_failed(bool value);

  // optional uint32 trials_count = 5;
  bool has_trials_count() const;
  void clear_trials_count();
  static const int kTrialsCountFieldNumber = 5;
  ::google::protobuf::uint32 trials_count() const;
  void set_trials_count(::google::protobuf::uint32 value);

  // optional uint32 fails_count = 6;
  bool has_fails_count() const;
  void clear_fails_count();
  static const int kFailsCountFieldNumber = 6;
  ::google::protobuf::uint32 fails_count() const;
  void set_fails_count(::google::protobuf::uint32 value);

  // optional uint32 failed_a = 7;
  bool has_failed_a() const;
  void clear_failed_a();
  static const int kFailedAFieldNumber = 7;
  ::google::protobuf::uint32 failed_a() const;
  void set_failed_a(::google::protobuf::uint32 value);

  // optional uint32 failed_b = 8;
  bool has_failed_b() const;
  void clear_failed_b();
  static const int kFailedBFieldNumber = 8;
  ::google::protobuf::uint32 failed_b() const;
  void set_failed_b(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.ExperimentStats)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_queries_count();
  void clear_has_queries_count();
  void set_has_failed();
  void clear_has_failed();
  void set_has_fail_reason();
  void clear_has_fail_reason();
  void set_has_trials_count();
  void clear_has_trials_count();
  void set_has_fails_count();
  void clear_has_fails_count();
  void set_has_failed_a();
  void clear_has_failed_a();
  void set_has_failed_b();
  void clear_has_failed_b();
  void set_has_info();
  void clear_has_info();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::FailStat > fails_stat_;
  ::google::protobuf::internal::ArenaStringPtr fail_reason_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 queries_count_;
  bool failed_;
  ::google::protobuf::uint32 trials_count_;
  ::google::protobuf::uint32 fails_count_;
  ::google::protobuf::uint32 failed_a_;
  ::google::protobuf::uint32 failed_b_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExperimentStatsList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.ExperimentStatsList) */ {
 public:
  ExperimentStatsList();
  virtual ~ExperimentStatsList();

  ExperimentStatsList(const ExperimentStatsList& from);

  inline ExperimentStatsList& operator=(const ExperimentStatsList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExperimentStatsList(ExperimentStatsList&& from) noexcept
    : ExperimentStatsList() {
    *this = ::std::move(from);
  }

  inline ExperimentStatsList& operator=(ExperimentStatsList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExperimentStatsList& default_instance();

  static inline const ExperimentStatsList* internal_default_instance() {
    return reinterpret_cast<const ExperimentStatsList*>(
               &_ExperimentStatsList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ExperimentStatsList* other);
  friend void swap(ExperimentStatsList& a, ExperimentStatsList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExperimentStatsList* New() const PROTOBUF_FINAL { return New(NULL); }

  ExperimentStatsList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExperimentStatsList& from);
  void MergeFrom(const ExperimentStatsList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExperimentStatsList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.interleaving.ExperimentStats stats = 1;
  int stats_size() const;
  void clear_stats();
  static const int kStatsFieldNumber = 1;
  const ::ru::mail::go::webbase::interleaving::ExperimentStats& stats(int index) const;
  ::ru::mail::go::webbase::interleaving::ExperimentStats* mutable_stats(int index);
  ::ru::mail::go::webbase::interleaving::ExperimentStats* add_stats();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ExperimentStats >*
      mutable_stats();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ExperimentStats >&
      stats() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.ExperimentStatsList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ExperimentStats > stats_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExperimentConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.ExperimentConfig) */ {
 public:
  ExperimentConfig();
  virtual ~ExperimentConfig();

  ExperimentConfig(const ExperimentConfig& from);

  inline ExperimentConfig& operator=(const ExperimentConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExperimentConfig(ExperimentConfig&& from) noexcept
    : ExperimentConfig() {
    *this = ::std::move(from);
  }

  inline ExperimentConfig& operator=(ExperimentConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExperimentConfig& default_instance();

  static inline const ExperimentConfig* internal_default_instance() {
    return reinterpret_cast<const ExperimentConfig*>(
               &_ExperimentConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ExperimentConfig* other);
  friend void swap(ExperimentConfig& a, ExperimentConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExperimentConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ExperimentConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExperimentConfig& from);
  void MergeFrom(const ExperimentConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExperimentConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string source_a_type = 3;
  bool has_source_a_type() const;
  void clear_source_a_type();
  static const int kSourceATypeFieldNumber = 3;
  const ::std::string& source_a_type() const;
  void set_source_a_type(const ::std::string& value);
  #if LANG_CXX11
  void set_source_a_type(::std::string&& value);
  #endif
  void set_source_a_type(const char* value);
  void set_source_a_type(const char* value, size_t size);
  ::std::string* mutable_source_a_type();
  ::std::string* release_source_a_type();
  void set_allocated_source_a_type(::std::string* source_a_type);

  // required string source_b_type = 4;
  bool has_source_b_type() const;
  void clear_source_b_type();
  static const int kSourceBTypeFieldNumber = 4;
  const ::std::string& source_b_type() const;
  void set_source_b_type(const ::std::string& value);
  #if LANG_CXX11
  void set_source_b_type(::std::string&& value);
  #endif
  void set_source_b_type(const char* value);
  void set_source_b_type(const char* value, size_t size);
  ::std::string* mutable_source_b_type();
  ::std::string* release_source_b_type();
  void set_allocated_source_b_type(::std::string* source_b_type);

  // optional string source_a_config = 5;
  bool has_source_a_config() const;
  void clear_source_a_config();
  static const int kSourceAConfigFieldNumber = 5;
  const ::std::string& source_a_config() const;
  void set_source_a_config(const ::std::string& value);
  #if LANG_CXX11
  void set_source_a_config(::std::string&& value);
  #endif
  void set_source_a_config(const char* value);
  void set_source_a_config(const char* value, size_t size);
  ::std::string* mutable_source_a_config();
  ::std::string* release_source_a_config();
  void set_allocated_source_a_config(::std::string* source_a_config);

  // optional string source_b_config = 6;
  bool has_source_b_config() const;
  void clear_source_b_config();
  static const int kSourceBConfigFieldNumber = 6;
  const ::std::string& source_b_config() const;
  void set_source_b_config(const ::std::string& value);
  #if LANG_CXX11
  void set_source_b_config(::std::string&& value);
  #endif
  void set_source_b_config(const char* value);
  void set_source_b_config(const char* value, size_t size);
  ::std::string* mutable_source_b_config();
  ::std::string* release_source_b_config();
  void set_allocated_source_b_config(::std::string* source_b_config);

  // optional string queries_filter = 7;
  bool has_queries_filter() const;
  void clear_queries_filter();
  static const int kQueriesFilterFieldNumber = 7;
  const ::std::string& queries_filter() const;
  void set_queries_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_queries_filter(::std::string&& value);
  #endif
  void set_queries_filter(const char* value);
  void set_queries_filter(const char* value, size_t size);
  ::std::string* mutable_queries_filter();
  ::std::string* release_queries_filter();
  void set_allocated_queries_filter(::std::string* queries_filter);

  // optional string queries_file = 13;
  bool has_queries_file() const;
  void clear_queries_file();
  static const int kQueriesFileFieldNumber = 13;
  const ::std::string& queries_file() const;
  void set_queries_file(const ::std::string& value);
  #if LANG_CXX11
  void set_queries_file(::std::string&& value);
  #endif
  void set_queries_file(const char* value);
  void set_queries_file(const char* value, size_t size);
  ::std::string* mutable_queries_file();
  ::std::string* release_queries_file();
  void set_allocated_queries_file(::std::string* queries_file);

  // optional string homer_location = 14;
  bool has_homer_location() const;
  void clear_homer_location();
  static const int kHomerLocationFieldNumber = 14;
  const ::std::string& homer_location() const;
  void set_homer_location(const ::std::string& value);
  #if LANG_CXX11
  void set_homer_location(::std::string&& value);
  #endif
  void set_homer_location(const char* value);
  void set_homer_location(const char* value, size_t size);
  ::std::string* mutable_homer_location();
  ::std::string* release_homer_location();
  void set_allocated_homer_location(::std::string* homer_location);

  // optional string ae_set_name = 15;
  bool has_ae_set_name() const;
  void clear_ae_set_name();
  static const int kAeSetNameFieldNumber = 15;
  const ::std::string& ae_set_name() const;
  void set_ae_set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_ae_set_name(::std::string&& value);
  #endif
  void set_ae_set_name(const char* value);
  void set_ae_set_name(const char* value, size_t size);
  ::std::string* mutable_ae_set_name();
  ::std::string* release_ae_set_name();
  void set_allocated_ae_set_name(::std::string* ae_set_name);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // required uint32 min_per_day = 8;
  bool has_min_per_day() const;
  void clear_min_per_day();
  static const int kMinPerDayFieldNumber = 8;
  ::google::protobuf::uint32 min_per_day() const;
  void set_min_per_day(::google::protobuf::uint32 value);

  // required uint32 max_per_day = 9;
  bool has_max_per_day() const;
  void clear_max_per_day();
  static const int kMaxPerDayFieldNumber = 9;
  ::google::protobuf::uint32 max_per_day() const;
  void set_max_per_day(::google::protobuf::uint32 value);

  // required uint32 priority = 10;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 10;
  ::google::protobuf::uint32 priority() const;
  void set_priority(::google::protobuf::uint32 value);

  // required uint32 start_date = 11;
  bool has_start_date() const;
  void clear_start_date();
  static const int kStartDateFieldNumber = 11;
  ::google::protobuf::uint32 start_date() const;
  void set_start_date(::google::protobuf::uint32 value);

  // optional bool quota_all = 12 [default = false];
  bool has_quota_all() const;
  void clear_quota_all();
  static const int kQuotaAllFieldNumber = 12;
  bool quota_all() const;
  void set_quota_all(bool value);

  // optional uint32 max_sessions = 16;
  bool has_max_sessions() const;
  void clear_max_sessions();
  static const int kMaxSessionsFieldNumber = 16;
  ::google::protobuf::uint32 max_sessions() const;
  void set_max_sessions(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.ExperimentConfig)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_source_a_type();
  void clear_has_source_a_type();
  void set_has_source_b_type();
  void clear_has_source_b_type();
  void set_has_source_a_config();
  void clear_has_source_a_config();
  void set_has_source_b_config();
  void clear_has_source_b_config();
  void set_has_queries_filter();
  void clear_has_queries_filter();
  void set_has_min_per_day();
  void clear_has_min_per_day();
  void set_has_max_per_day();
  void clear_has_max_per_day();
  void set_has_priority();
  void clear_has_priority();
  void set_has_start_date();
  void clear_has_start_date();
  void set_has_quota_all();
  void clear_has_quota_all();
  void set_has_queries_file();
  void clear_has_queries_file();
  void set_has_homer_location();
  void clear_has_homer_location();
  void set_has_ae_set_name();
  void clear_has_ae_set_name();
  void set_has_max_sessions();
  void clear_has_max_sessions();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr source_a_type_;
  ::google::protobuf::internal::ArenaStringPtr source_b_type_;
  ::google::protobuf::internal::ArenaStringPtr source_a_config_;
  ::google::protobuf::internal::ArenaStringPtr source_b_config_;
  ::google::protobuf::internal::ArenaStringPtr queries_filter_;
  ::google::protobuf::internal::ArenaStringPtr queries_file_;
  ::google::protobuf::internal::ArenaStringPtr homer_location_;
  ::google::protobuf::internal::ArenaStringPtr ae_set_name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 min_per_day_;
  ::google::protobuf::uint32 max_per_day_;
  ::google::protobuf::uint32 priority_;
  ::google::protobuf::uint32 start_date_;
  bool quota_all_;
  ::google::protobuf::uint32 max_sessions_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExperimentMetaConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.ExperimentMetaConfig) */ {
 public:
  ExperimentMetaConfig();
  virtual ~ExperimentMetaConfig();

  ExperimentMetaConfig(const ExperimentMetaConfig& from);

  inline ExperimentMetaConfig& operator=(const ExperimentMetaConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExperimentMetaConfig(ExperimentMetaConfig&& from) noexcept
    : ExperimentMetaConfig() {
    *this = ::std::move(from);
  }

  inline ExperimentMetaConfig& operator=(ExperimentMetaConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExperimentMetaConfig& default_instance();

  static inline const ExperimentMetaConfig* internal_default_instance() {
    return reinterpret_cast<const ExperimentMetaConfig*>(
               &_ExperimentMetaConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ExperimentMetaConfig* other);
  friend void swap(ExperimentMetaConfig& a, ExperimentMetaConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExperimentMetaConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ExperimentMetaConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExperimentMetaConfig& from);
  void MergeFrom(const ExperimentMetaConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExperimentMetaConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.interleaving.ExperimentConfig experiments = 1;
  int experiments_size() const;
  void clear_experiments();
  static const int kExperimentsFieldNumber = 1;
  const ::ru::mail::go::webbase::interleaving::ExperimentConfig& experiments(int index) const;
  ::ru::mail::go::webbase::interleaving::ExperimentConfig* mutable_experiments(int index);
  ::ru::mail::go::webbase::interleaving::ExperimentConfig* add_experiments();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ExperimentConfig >*
      mutable_experiments();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ExperimentConfig >&
      experiments() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.ExperimentMetaConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ExperimentConfig > experiments_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MetricsTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.MetricsTask) */ {
 public:
  MetricsTask();
  virtual ~MetricsTask();

  MetricsTask(const MetricsTask& from);

  inline MetricsTask& operator=(const MetricsTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MetricsTask(MetricsTask&& from) noexcept
    : MetricsTask() {
    *this = ::std::move(from);
  }

  inline MetricsTask& operator=(MetricsTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetricsTask& default_instance();

  static inline const MetricsTask* internal_default_instance() {
    return reinterpret_cast<const MetricsTask*>(
               &_MetricsTask_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(MetricsTask* other);
  friend void swap(MetricsTask& a, MetricsTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetricsTask* New() const PROTOBUF_FINAL { return New(NULL); }

  MetricsTask* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MetricsTask& from);
  void MergeFrom(const MetricsTask& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MetricsTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string filter_rx = 7;
  bool has_filter_rx() const;
  void clear_filter_rx();
  static const int kFilterRxFieldNumber = 7;
  const ::std::string& filter_rx() const;
  void set_filter_rx(const ::std::string& value);
  #if LANG_CXX11
  void set_filter_rx(::std::string&& value);
  #endif
  void set_filter_rx(const char* value);
  void set_filter_rx(const char* value, size_t size);
  ::std::string* mutable_filter_rx();
  ::std::string* release_filter_rx();
  void set_allocated_filter_rx(::std::string* filter_rx);

  // optional string queries_file = 8;
  bool has_queries_file() const;
  void clear_queries_file();
  static const int kQueriesFileFieldNumber = 8;
  const ::std::string& queries_file() const;
  void set_queries_file(const ::std::string& value);
  #if LANG_CXX11
  void set_queries_file(::std::string&& value);
  #endif
  void set_queries_file(const char* value);
  void set_queries_file(const char* value, size_t size);
  ::std::string* mutable_queries_file();
  ::std::string* release_queries_file();
  void set_allocated_queries_file(::std::string* queries_file);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // required uint32 experiment_id = 3;
  bool has_experiment_id() const;
  void clear_experiment_id();
  static const int kExperimentIdFieldNumber = 3;
  ::google::protobuf::uint32 experiment_id() const;
  void set_experiment_id(::google::protobuf::uint32 value);

  // required uint64 start_time = 4;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  ::google::protobuf::uint64 start_time() const;
  void set_start_time(::google::protobuf::uint64 value);

  // required uint64 stop_time = 5;
  bool has_stop_time() const;
  void clear_stop_time();
  static const int kStopTimeFieldNumber = 5;
  ::google::protobuf::uint64 stop_time() const;
  void set_stop_time(::google::protobuf::uint64 value);

  // optional float confidence_coefficient = 6;
  bool has_confidence_coefficient() const;
  void clear_confidence_coefficient();
  static const int kConfidenceCoefficientFieldNumber = 6;
  float confidence_coefficient() const;
  void set_confidence_coefficient(float value);

  // optional bool send_graphite = 9;
  bool has_send_graphite() const;
  void clear_send_graphite();
  static const int kSendGraphiteFieldNumber = 9;
  bool send_graphite() const;
  void set_send_graphite(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.MetricsTask)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_experiment_id();
  void clear_has_experiment_id();
  void set_has_start_time();
  void clear_has_start_time();
  void set_has_stop_time();
  void clear_has_stop_time();
  void set_has_confidence_coefficient();
  void clear_has_confidence_coefficient();
  void set_has_filter_rx();
  void clear_has_filter_rx();
  void set_has_queries_file();
  void clear_has_queries_file();
  void set_has_send_graphite();
  void clear_has_send_graphite();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr filter_rx_;
  ::google::protobuf::internal::ArenaStringPtr queries_file_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 experiment_id_;
  ::google::protobuf::uint64 start_time_;
  ::google::protobuf::uint64 stop_time_;
  float confidence_coefficient_;
  bool send_graphite_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MetricsMetaTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.MetricsMetaTask) */ {
 public:
  MetricsMetaTask();
  virtual ~MetricsMetaTask();

  MetricsMetaTask(const MetricsMetaTask& from);

  inline MetricsMetaTask& operator=(const MetricsMetaTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MetricsMetaTask(MetricsMetaTask&& from) noexcept
    : MetricsMetaTask() {
    *this = ::std::move(from);
  }

  inline MetricsMetaTask& operator=(MetricsMetaTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetricsMetaTask& default_instance();

  static inline const MetricsMetaTask* internal_default_instance() {
    return reinterpret_cast<const MetricsMetaTask*>(
               &_MetricsMetaTask_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(MetricsMetaTask* other);
  friend void swap(MetricsMetaTask& a, MetricsMetaTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetricsMetaTask* New() const PROTOBUF_FINAL { return New(NULL); }

  MetricsMetaTask* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MetricsMetaTask& from);
  void MergeFrom(const MetricsMetaTask& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MetricsMetaTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.interleaving.MetricsTask metrics = 1;
  int metrics_size() const;
  void clear_metrics();
  static const int kMetricsFieldNumber = 1;
  const ::ru::mail::go::webbase::interleaving::MetricsTask& metrics(int index) const;
  ::ru::mail::go::webbase::interleaving::MetricsTask* mutable_metrics(int index);
  ::ru::mail::go::webbase::interleaving::MetricsTask* add_metrics();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::MetricsTask >*
      mutable_metrics();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::MetricsTask >&
      metrics() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.MetricsMetaTask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::MetricsTask > metrics_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MetricResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.MetricResult) */ {
 public:
  MetricResult();
  virtual ~MetricResult();

  MetricResult(const MetricResult& from);

  inline MetricResult& operator=(const MetricResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MetricResult(MetricResult&& from) noexcept
    : MetricResult() {
    *this = ::std::move(from);
  }

  inline MetricResult& operator=(MetricResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetricResult& default_instance();

  static inline const MetricResult* internal_default_instance() {
    return reinterpret_cast<const MetricResult*>(
               &_MetricResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(MetricResult* other);
  friend void swap(MetricResult& a, MetricResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetricResult* New() const PROTOBUF_FINAL { return New(NULL); }

  MetricResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MetricResult& from);
  void MergeFrom(const MetricResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MetricResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required float value = 4;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 4;
  float value() const;
  void set_value(float value);

  // required float confidence_max = 5;
  bool has_confidence_max() const;
  void clear_confidence_max();
  static const int kConfidenceMaxFieldNumber = 5;
  float confidence_max() const;
  void set_confidence_max(float value);

  // required float confidence_min = 6;
  bool has_confidence_min() const;
  void clear_confidence_min();
  static const int kConfidenceMinFieldNumber = 6;
  float confidence_min() const;
  void set_confidence_min(float value);

  // required uint32 events_number = 7;
  bool has_events_number() const;
  void clear_events_number();
  static const int kEventsNumberFieldNumber = 7;
  ::google::protobuf::uint32 events_number() const;
  void set_events_number(::google::protobuf::uint32 value);

  // required float reliability = 8;
  bool has_reliability() const;
  void clear_reliability();
  static const int kReliabilityFieldNumber = 8;
  float reliability() const;
  void set_reliability(float value);

  // optional float probability_A_better = 9;
  bool has_probability_a_better() const;
  void clear_probability_a_better();
  static const int kProbabilityABetterFieldNumber = 9;
  float probability_a_better() const;
  void set_probability_a_better(float value);

  // optional float probability_B_better = 10;
  bool has_probability_b_better() const;
  void clear_probability_b_better();
  static const int kProbabilityBBetterFieldNumber = 10;
  float probability_b_better() const;
  void set_probability_b_better(float value);

  // optional uint32 a_wins = 11;
  bool has_a_wins() const;
  void clear_a_wins();
  static const int kAWinsFieldNumber = 11;
  ::google::protobuf::uint32 a_wins() const;
  void set_a_wins(::google::protobuf::uint32 value);

  // optional uint32 b_wins = 12;
  bool has_b_wins() const;
  void clear_b_wins();
  static const int kBWinsFieldNumber = 12;
  ::google::protobuf::uint32 b_wins() const;
  void set_b_wins(::google::protobuf::uint32 value);

  // optional uint32 no_clicks = 13;
  bool has_no_clicks() const;
  void clear_no_clicks();
  static const int kNoClicksFieldNumber = 13;
  ::google::protobuf::uint32 no_clicks() const;
  void set_no_clicks(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.MetricResult)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_value();
  void clear_has_value();
  void set_has_confidence_max();
  void clear_has_confidence_max();
  void set_has_confidence_min();
  void clear_has_confidence_min();
  void set_has_events_number();
  void clear_has_events_number();
  void set_has_reliability();
  void clear_has_reliability();
  void set_has_probability_a_better();
  void clear_has_probability_a_better();
  void set_has_probability_b_better();
  void clear_has_probability_b_better();
  void set_has_a_wins();
  void clear_has_a_wins();
  void set_has_b_wins();
  void clear_has_b_wins();
  void set_has_no_clicks();
  void clear_has_no_clicks();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  float value_;
  float confidence_max_;
  float confidence_min_;
  ::google::protobuf::uint32 events_number_;
  float reliability_;
  float probability_a_better_;
  float probability_b_better_;
  ::google::protobuf::uint32 a_wins_;
  ::google::protobuf::uint32 b_wins_;
  ::google::protobuf::uint32 no_clicks_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MetricsResults : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.MetricsResults) */ {
 public:
  MetricsResults();
  virtual ~MetricsResults();

  MetricsResults(const MetricsResults& from);

  inline MetricsResults& operator=(const MetricsResults& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MetricsResults(MetricsResults&& from) noexcept
    : MetricsResults() {
    *this = ::std::move(from);
  }

  inline MetricsResults& operator=(MetricsResults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetricsResults& default_instance();

  static inline const MetricsResults* internal_default_instance() {
    return reinterpret_cast<const MetricsResults*>(
               &_MetricsResults_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(MetricsResults* other);
  friend void swap(MetricsResults& a, MetricsResults& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetricsResults* New() const PROTOBUF_FINAL { return New(NULL); }

  MetricsResults* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MetricsResults& from);
  void MergeFrom(const MetricsResults& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MetricsResults* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.interleaving.MetricResult results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  const ::ru::mail::go::webbase::interleaving::MetricResult& results(int index) const;
  ::ru::mail::go::webbase::interleaving::MetricResult* mutable_results(int index);
  ::ru::mail::go::webbase::interleaving::MetricResult* add_results();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::MetricResult >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::MetricResult >&
      results() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.MetricsResults)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::MetricResult > results_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DumpTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.DumpTask) */ {
 public:
  DumpTask();
  virtual ~DumpTask();

  DumpTask(const DumpTask& from);

  inline DumpTask& operator=(const DumpTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DumpTask(DumpTask&& from) noexcept
    : DumpTask() {
    *this = ::std::move(from);
  }

  inline DumpTask& operator=(DumpTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpTask& default_instance();

  static inline const DumpTask* internal_default_instance() {
    return reinterpret_cast<const DumpTask*>(
               &_DumpTask_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DumpTask* other);
  friend void swap(DumpTask& a, DumpTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DumpTask* New() const PROTOBUF_FINAL { return New(NULL); }

  DumpTask* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DumpTask& from);
  void MergeFrom(const DumpTask& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DumpTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filter_rx = 7;
  bool has_filter_rx() const;
  void clear_filter_rx();
  static const int kFilterRxFieldNumber = 7;
  const ::std::string& filter_rx() const;
  void set_filter_rx(const ::std::string& value);
  #if LANG_CXX11
  void set_filter_rx(::std::string&& value);
  #endif
  void set_filter_rx(const char* value);
  void set_filter_rx(const char* value, size_t size);
  ::std::string* mutable_filter_rx();
  ::std::string* release_filter_rx();
  void set_allocated_filter_rx(::std::string* filter_rx);

  // optional string experiment_type = 8;
  bool has_experiment_type() const;
  void clear_experiment_type();
  static const int kExperimentTypeFieldNumber = 8;
  const ::std::string& experiment_type() const;
  void set_experiment_type(const ::std::string& value);
  #if LANG_CXX11
  void set_experiment_type(::std::string&& value);
  #endif
  void set_experiment_type(const char* value);
  void set_experiment_type(const char* value, size_t size);
  ::std::string* mutable_experiment_type();
  ::std::string* release_experiment_type();
  void set_allocated_experiment_type(::std::string* experiment_type);

  // optional string metric_type = 10;
  bool has_metric_type() const;
  void clear_metric_type();
  static const int kMetricTypeFieldNumber = 10;
  const ::std::string& metric_type() const;
  void set_metric_type(const ::std::string& value);
  #if LANG_CXX11
  void set_metric_type(::std::string&& value);
  #endif
  void set_metric_type(const char* value);
  void set_metric_type(const char* value, size_t size);
  ::std::string* mutable_metric_type();
  ::std::string* release_metric_type();
  void set_allocated_metric_type(::std::string* metric_type);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // required uint32 experiment_id = 2;
  bool has_experiment_id() const;
  void clear_experiment_id();
  static const int kExperimentIdFieldNumber = 2;
  ::google::protobuf::uint32 experiment_id() const;
  void set_experiment_id(::google::protobuf::uint32 value);

  // required uint64 start_time = 4;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  ::google::protobuf::uint64 start_time() const;
  void set_start_time(::google::protobuf::uint64 value);

  // required uint64 stop_time = 5;
  bool has_stop_time() const;
  void clear_stop_time();
  static const int kStopTimeFieldNumber = 5;
  ::google::protobuf::uint64 stop_time() const;
  void set_stop_time(::google::protobuf::uint64 value);

  // optional bool with_snippets = 9;
  bool has_with_snippets() const;
  void clear_with_snippets();
  static const int kWithSnippetsFieldNumber = 9;
  bool with_snippets() const;
  void set_with_snippets(bool value);

  // optional bool draw = 11;
  bool has_draw() const;
  void clear_draw();
  static const int kDrawFieldNumber = 11;
  bool draw() const;
  void set_draw(bool value);

  // optional bool noclicks = 12;
  bool has_noclicks() const;
  void clear_noclicks();
  static const int kNoclicksFieldNumber = 12;
  bool noclicks() const;
  void set_noclicks(bool value);

  // optional uint32 max_logs = 6 [default = 10000];
  bool has_max_logs() const;
  void clear_max_logs();
  static const int kMaxLogsFieldNumber = 6;
  ::google::protobuf::uint32 max_logs() const;
  void set_max_logs(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.DumpTask)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_experiment_id();
  void clear_has_experiment_id();
  void set_has_start_time();
  void clear_has_start_time();
  void set_has_stop_time();
  void clear_has_stop_time();
  void set_has_max_logs();
  void clear_has_max_logs();
  void set_has_filter_rx();
  void clear_has_filter_rx();
  void set_has_experiment_type();
  void clear_has_experiment_type();
  void set_has_with_snippets();
  void clear_has_with_snippets();
  void set_has_metric_type();
  void clear_has_metric_type();
  void set_has_draw();
  void clear_has_draw();
  void set_has_noclicks();
  void clear_has_noclicks();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filter_rx_;
  ::google::protobuf::internal::ArenaStringPtr experiment_type_;
  ::google::protobuf::internal::ArenaStringPtr metric_type_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 experiment_id_;
  ::google::protobuf::uint64 start_time_;
  ::google::protobuf::uint64 stop_time_;
  bool with_snippets_;
  bool draw_;
  bool noclicks_;
  ::google::protobuf::uint32 max_logs_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DumpTasks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.DumpTasks) */ {
 public:
  DumpTasks();
  virtual ~DumpTasks();

  DumpTasks(const DumpTasks& from);

  inline DumpTasks& operator=(const DumpTasks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DumpTasks(DumpTasks&& from) noexcept
    : DumpTasks() {
    *this = ::std::move(from);
  }

  inline DumpTasks& operator=(DumpTasks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpTasks& default_instance();

  static inline const DumpTasks* internal_default_instance() {
    return reinterpret_cast<const DumpTasks*>(
               &_DumpTasks_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(DumpTasks* other);
  friend void swap(DumpTasks& a, DumpTasks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DumpTasks* New() const PROTOBUF_FINAL { return New(NULL); }

  DumpTasks* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DumpTasks& from);
  void MergeFrom(const DumpTasks& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DumpTasks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.interleaving.DumpTask tasks = 1;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 1;
  const ::ru::mail::go::webbase::interleaving::DumpTask& tasks(int index) const;
  ::ru::mail::go::webbase::interleaving::DumpTask* mutable_tasks(int index);
  ::ru::mail::go::webbase::interleaving::DumpTask* add_tasks();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpTask >*
      mutable_tasks();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpTask >&
      tasks() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.DumpTasks)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpTask > tasks_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DumpResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.DumpResult) */ {
 public:
  DumpResult();
  virtual ~DumpResult();

  DumpResult(const DumpResult& from);

  inline DumpResult& operator=(const DumpResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DumpResult(DumpResult&& from) noexcept
    : DumpResult() {
    *this = ::std::move(from);
  }

  inline DumpResult& operator=(DumpResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpResult& default_instance();

  static inline const DumpResult* internal_default_instance() {
    return reinterpret_cast<const DumpResult*>(
               &_DumpResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(DumpResult* other);
  friend void swap(DumpResult& a, DumpResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DumpResult* New() const PROTOBUF_FINAL { return New(NULL); }

  DumpResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DumpResult& from);
  void MergeFrom(const DumpResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DumpResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string dump_url = 2;
  bool has_dump_url() const;
  void clear_dump_url();
  static const int kDumpUrlFieldNumber = 2;
  const ::std::string& dump_url() const;
  void set_dump_url(const ::std::string& value);
  #if LANG_CXX11
  void set_dump_url(::std::string&& value);
  #endif
  void set_dump_url(const char* value);
  void set_dump_url(const char* value, size_t size);
  ::std::string* mutable_dump_url();
  ::std::string* release_dump_url();
  void set_allocated_dump_url(::std::string* dump_url);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.DumpResult)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_dump_url();
  void clear_has_dump_url();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dump_url_;
  ::google::protobuf::uint32 id_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DumpResults : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.DumpResults) */ {
 public:
  DumpResults();
  virtual ~DumpResults();

  DumpResults(const DumpResults& from);

  inline DumpResults& operator=(const DumpResults& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DumpResults(DumpResults&& from) noexcept
    : DumpResults() {
    *this = ::std::move(from);
  }

  inline DumpResults& operator=(DumpResults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpResults& default_instance();

  static inline const DumpResults* internal_default_instance() {
    return reinterpret_cast<const DumpResults*>(
               &_DumpResults_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(DumpResults* other);
  friend void swap(DumpResults& a, DumpResults& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DumpResults* New() const PROTOBUF_FINAL { return New(NULL); }

  DumpResults* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DumpResults& from);
  void MergeFrom(const DumpResults& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DumpResults* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.interleaving.DumpResult results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  const ::ru::mail::go::webbase::interleaving::DumpResult& results(int index) const;
  ::ru::mail::go::webbase::interleaving::DumpResult* mutable_results(int index);
  ::ru::mail::go::webbase::interleaving::DumpResult* add_results();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpResult >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpResult >&
      results() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.DumpResults)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpResult > results_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DumpProgress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.DumpProgress) */ {
 public:
  DumpProgress();
  virtual ~DumpProgress();

  DumpProgress(const DumpProgress& from);

  inline DumpProgress& operator=(const DumpProgress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DumpProgress(DumpProgress&& from) noexcept
    : DumpProgress() {
    *this = ::std::move(from);
  }

  inline DumpProgress& operator=(DumpProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpProgress& default_instance();

  static inline const DumpProgress* internal_default_instance() {
    return reinterpret_cast<const DumpProgress*>(
               &_DumpProgress_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(DumpProgress* other);
  friend void swap(DumpProgress& a, DumpProgress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DumpProgress* New() const PROTOBUF_FINAL { return New(NULL); }

  DumpProgress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DumpProgress& from);
  void MergeFrom(const DumpProgress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DumpProgress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // required uint32 progress = 2;
  bool has_progress() const;
  void clear_progress();
  static const int kProgressFieldNumber = 2;
  ::google::protobuf::uint32 progress() const;
  void set_progress(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.DumpProgress)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_progress();
  void clear_has_progress();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 progress_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DumpsProgress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.DumpsProgress) */ {
 public:
  DumpsProgress();
  virtual ~DumpsProgress();

  DumpsProgress(const DumpsProgress& from);

  inline DumpsProgress& operator=(const DumpsProgress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DumpsProgress(DumpsProgress&& from) noexcept
    : DumpsProgress() {
    *this = ::std::move(from);
  }

  inline DumpsProgress& operator=(DumpsProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpsProgress& default_instance();

  static inline const DumpsProgress* internal_default_instance() {
    return reinterpret_cast<const DumpsProgress*>(
               &_DumpsProgress_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(DumpsProgress* other);
  friend void swap(DumpsProgress& a, DumpsProgress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DumpsProgress* New() const PROTOBUF_FINAL { return New(NULL); }

  DumpsProgress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DumpsProgress& from);
  void MergeFrom(const DumpsProgress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DumpsProgress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.interleaving.DumpProgress progress = 1;
  int progress_size() const;
  void clear_progress();
  static const int kProgressFieldNumber = 1;
  const ::ru::mail::go::webbase::interleaving::DumpProgress& progress(int index) const;
  ::ru::mail::go::webbase::interleaving::DumpProgress* mutable_progress(int index);
  ::ru::mail::go::webbase::interleaving::DumpProgress* add_progress();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpProgress >*
      mutable_progress();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpProgress >&
      progress() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.DumpsProgress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpProgress > progress_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.QueryLog) */ {
 public:
  QueryLog();
  virtual ~QueryLog();

  QueryLog(const QueryLog& from);

  inline QueryLog& operator=(const QueryLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryLog(QueryLog&& from) noexcept
    : QueryLog() {
    *this = ::std::move(from);
  }

  inline QueryLog& operator=(QueryLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryLog& default_instance();

  static inline const QueryLog* internal_default_instance() {
    return reinterpret_cast<const QueryLog*>(
               &_QueryLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(QueryLog* other);
  friend void swap(QueryLog& a, QueryLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryLog* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryLog& from);
  void MergeFrom(const QueryLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.interleaving.Click clicks = 5;
  int clicks_size() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 5;
  const ::ru::mail::go::webbase::interleaving::Click& clicks(int index) const;
  ::ru::mail::go::webbase::interleaving::Click* mutable_clicks(int index);
  ::ru::mail::go::webbase::interleaving::Click* add_clicks();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Click >*
      mutable_clicks();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Click >&
      clicks() const;

  // repeated .ru.mail.go.webbase.interleaving.Action actions = 15;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 15;
  const ::ru::mail::go::webbase::interleaving::Action& actions(int index) const;
  ::ru::mail::go::webbase::interleaving::Action* mutable_actions(int index);
  ::ru::mail::go::webbase::interleaving::Action* add_actions();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Action >*
      mutable_actions();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Action >&
      actions() const;

  // repeated .ru.mail.go.webbase.interleaving.Qs qs = 16;
  int qs_size() const;
  void clear_qs();
  static const int kQsFieldNumber = 16;
  const ::ru::mail::go::webbase::interleaving::Qs& qs(int index) const;
  ::ru::mail::go::webbase::interleaving::Qs* mutable_qs(int index);
  ::ru::mail::go::webbase::interleaving::Qs* add_qs();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Qs >*
      mutable_qs();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Qs >&
      qs() const;

  // repeated .ru.mail.go.webbase.interleaving.Play play = 21;
  int play_size() const;
  void clear_play();
  static const int kPlayFieldNumber = 21;
  const ::ru::mail::go::webbase::interleaving::Play& play(int index) const;
  ::ru::mail::go::webbase::interleaving::Play* mutable_play(int index);
  ::ru::mail::go::webbase::interleaving::Play* add_play();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Play >*
      mutable_play();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Play >&
      play() const;

  // required string UID = 2;
  bool has_uid() const;
  void clear_uid();
  static const int kUIDFieldNumber = 2;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // optional string query = 6;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 6;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional string rid = 7;
  bool has_rid() const;
  void clear_rid();
  static const int kRidFieldNumber = 7;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  #if LANG_CXX11
  void set_rid(::std::string&& value);
  #endif
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // optional string queryId = 8;
  bool has_queryid() const;
  void clear_queryid();
  static const int kQueryIdFieldNumber = 8;
  const ::std::string& queryid() const;
  void set_queryid(const ::std::string& value);
  #if LANG_CXX11
  void set_queryid(::std::string&& value);
  #endif
  void set_queryid(const char* value);
  void set_queryid(const char* value, size_t size);
  ::std::string* mutable_queryid();
  ::std::string* release_queryid();
  void set_allocated_queryid(::std::string* queryid);

  // optional string rawGekkoLog = 9;
  bool has_rawgekkolog() const;
  void clear_rawgekkolog();
  static const int kRawGekkoLogFieldNumber = 9;
  const ::std::string& rawgekkolog() const;
  void set_rawgekkolog(const ::std::string& value);
  #if LANG_CXX11
  void set_rawgekkolog(::std::string&& value);
  #endif
  void set_rawgekkolog(const char* value);
  void set_rawgekkolog(const char* value, size_t size);
  ::std::string* mutable_rawgekkolog();
  ::std::string* release_rawgekkolog();
  void set_allocated_rawgekkolog(::std::string* rawgekkolog);

  // optional string essrSourceType = 11;
  bool has_essrsourcetype() const;
  void clear_essrsourcetype();
  static const int kEssrSourceTypeFieldNumber = 11;
  const ::std::string& essrsourcetype() const;
  void set_essrsourcetype(const ::std::string& value);
  #if LANG_CXX11
  void set_essrsourcetype(::std::string&& value);
  #endif
  void set_essrsourcetype(const char* value);
  void set_essrsourcetype(const char* value, size_t size);
  ::std::string* mutable_essrsourcetype();
  ::std::string* release_essrsourcetype();
  void set_allocated_essrsourcetype(::std::string* essrsourcetype);

  // optional string original_query = 12;
  bool has_original_query() const;
  void clear_original_query();
  static const int kOriginalQueryFieldNumber = 12;
  const ::std::string& original_query() const;
  void set_original_query(const ::std::string& value);
  #if LANG_CXX11
  void set_original_query(::std::string&& value);
  #endif
  void set_original_query(const char* value);
  void set_original_query(const char* value, size_t size);
  ::std::string* mutable_original_query();
  ::std::string* release_original_query();
  void set_allocated_original_query(::std::string* original_query);

  // optional string spc_json = 13;
  bool has_spc_json() const;
  void clear_spc_json();
  static const int kSpcJsonFieldNumber = 13;
  const ::std::string& spc_json() const;
  void set_spc_json(const ::std::string& value);
  #if LANG_CXX11
  void set_spc_json(::std::string&& value);
  #endif
  void set_spc_json(const char* value);
  void set_spc_json(const char* value, size_t size);
  ::std::string* mutable_spc_json();
  ::std::string* release_spc_json();
  void set_allocated_spc_json(::std::string* spc_json);

  // optional string serp = 20;
  bool has_serp() const;
  void clear_serp();
  static const int kSerpFieldNumber = 20;
  const ::std::string& serp() const;
  void set_serp(const ::std::string& value);
  #if LANG_CXX11
  void set_serp(::std::string&& value);
  #endif
  void set_serp(const char* value);
  void set_serp(const char* value, size_t size);
  ::std::string* mutable_serp();
  ::std::string* release_serp();
  void set_allocated_serp(::std::string* serp);

  // optional string experimentdData = 22;
  bool has_experimentddata() const;
  void clear_experimentddata();
  static const int kExperimentdDataFieldNumber = 22;
  const ::std::string& experimentddata() const;
  void set_experimentddata(const ::std::string& value);
  #if LANG_CXX11
  void set_experimentddata(::std::string&& value);
  #endif
  void set_experimentddata(const char* value);
  void set_experimentddata(const char* value, size_t size);
  ::std::string* mutable_experimentddata();
  ::std::string* release_experimentddata();
  void set_allocated_experimentddata(::std::string* experimentddata);

  // optional string use_whole_response = 23;
  bool has_use_whole_response() const;
  void clear_use_whole_response();
  static const int kUseWholeResponseFieldNumber = 23;
  const ::std::string& use_whole_response() const;
  void set_use_whole_response(const ::std::string& value);
  #if LANG_CXX11
  void set_use_whole_response(::std::string&& value);
  #endif
  void set_use_whole_response(const char* value);
  void set_use_whole_response(const char* value, size_t size);
  ::std::string* mutable_use_whole_response();
  ::std::string* release_use_whole_response();
  void set_allocated_use_whole_response(::std::string* use_whole_response);

  // required .ru.mail.go.webbase.interleaving.ShowedDocuments showedDocuments = 4;
  bool has_showeddocuments() const;
  void clear_showeddocuments();
  static const int kShowedDocumentsFieldNumber = 4;
  const ::ru::mail::go::webbase::interleaving::ShowedDocuments& showeddocuments() const;
  ::ru::mail::go::webbase::interleaving::ShowedDocuments* mutable_showeddocuments();
  ::ru::mail::go::webbase::interleaving::ShowedDocuments* release_showeddocuments();
  void set_allocated_showeddocuments(::ru::mail::go::webbase::interleaving::ShowedDocuments* showeddocuments);

  // optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavig = 17;
  bool has_suggnavig() const;
  void clear_suggnavig();
  static const int kSuggNavigFieldNumber = 17;
  const ::ru::mail::go::webbase::interleaving::SuggNavig& suggnavig() const;
  ::ru::mail::go::webbase::interleaving::SuggNavig* mutable_suggnavig();
  ::ru::mail::go::webbase::interleaving::SuggNavig* release_suggnavig();
  void set_allocated_suggnavig(::ru::mail::go::webbase::interleaving::SuggNavig* suggnavig);

  // optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavigA = 18;
  bool has_suggnaviga() const;
  void clear_suggnaviga();
  static const int kSuggNavigAFieldNumber = 18;
  const ::ru::mail::go::webbase::interleaving::SuggNavig& suggnaviga() const;
  ::ru::mail::go::webbase::interleaving::SuggNavig* mutable_suggnaviga();
  ::ru::mail::go::webbase::interleaving::SuggNavig* release_suggnaviga();
  void set_allocated_suggnaviga(::ru::mail::go::webbase::interleaving::SuggNavig* suggnaviga);

  // optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavigB = 19;
  bool has_suggnavigb() const;
  void clear_suggnavigb();
  static const int kSuggNavigBFieldNumber = 19;
  const ::ru::mail::go::webbase::interleaving::SuggNavig& suggnavigb() const;
  ::ru::mail::go::webbase::interleaving::SuggNavig* mutable_suggnavigb();
  ::ru::mail::go::webbase::interleaving::SuggNavig* release_suggnavigb();
  void set_allocated_suggnavigb(::ru::mail::go::webbase::interleaving::SuggNavig* suggnavigb);

  // required uint64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // required uint32 EID = 3;
  bool has_eid() const;
  void clear_eid();
  static const int kEIDFieldNumber = 3;
  ::google::protobuf::uint32 eid() const;
  void set_eid(::google::protobuf::uint32 value);

  // optional float replyQuality = 10;
  bool has_replyquality() const;
  void clear_replyquality();
  static const int kReplyQualityFieldNumber = 10;
  float replyquality() const;
  void set_replyquality(float value);

  // optional float webQuality = 14 [default = 1];
  bool has_webquality() const;
  void clear_webquality();
  static const int kWebQualityFieldNumber = 14;
  float webquality() const;
  void set_webquality(float value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.QueryLog)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_uid();
  void clear_has_uid();
  void set_has_eid();
  void clear_has_eid();
  void set_has_showeddocuments();
  void clear_has_showeddocuments();
  void set_has_query();
  void clear_has_query();
  void set_has_rid();
  void clear_has_rid();
  void set_has_queryid();
  void clear_has_queryid();
  void set_has_rawgekkolog();
  void clear_has_rawgekkolog();
  void set_has_replyquality();
  void clear_has_replyquality();
  void set_has_essrsourcetype();
  void clear_has_essrsourcetype();
  void set_has_original_query();
  void clear_has_original_query();
  void set_has_spc_json();
  void clear_has_spc_json();
  void set_has_webquality();
  void clear_has_webquality();
  void set_has_suggnavig();
  void clear_has_suggnavig();
  void set_has_suggnaviga();
  void clear_has_suggnaviga();
  void set_has_suggnavigb();
  void clear_has_suggnavigb();
  void set_has_serp();
  void clear_has_serp();
  void set_has_experimentddata();
  void clear_has_experimentddata();
  void set_has_use_whole_response();
  void clear_has_use_whole_response();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Click > clicks_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Action > actions_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Qs > qs_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Play > play_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  ::google::protobuf::internal::ArenaStringPtr queryid_;
  ::google::protobuf::internal::ArenaStringPtr rawgekkolog_;
  ::google::protobuf::internal::ArenaStringPtr essrsourcetype_;
  ::google::protobuf::internal::ArenaStringPtr original_query_;
  ::google::protobuf::internal::ArenaStringPtr spc_json_;
  ::google::protobuf::internal::ArenaStringPtr serp_;
  ::google::protobuf::internal::ArenaStringPtr experimentddata_;
  ::google::protobuf::internal::ArenaStringPtr use_whole_response_;
  ::ru::mail::go::webbase::interleaving::ShowedDocuments* showeddocuments_;
  ::ru::mail::go::webbase::interleaving::SuggNavig* suggnavig_;
  ::ru::mail::go::webbase::interleaving::SuggNavig* suggnaviga_;
  ::ru::mail::go::webbase::interleaving::SuggNavig* suggnavigb_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 eid_;
  float replyquality_;
  float webquality_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowedDocuments : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.ShowedDocuments) */ {
 public:
  ShowedDocuments();
  virtual ~ShowedDocuments();

  ShowedDocuments(const ShowedDocuments& from);

  inline ShowedDocuments& operator=(const ShowedDocuments& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowedDocuments(ShowedDocuments&& from) noexcept
    : ShowedDocuments() {
    *this = ::std::move(from);
  }

  inline ShowedDocuments& operator=(ShowedDocuments&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowedDocuments& default_instance();

  static inline const ShowedDocuments* internal_default_instance() {
    return reinterpret_cast<const ShowedDocuments*>(
               &_ShowedDocuments_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ShowedDocuments* other);
  friend void swap(ShowedDocuments& a, ShowedDocuments& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowedDocuments* New() const PROTOBUF_FINAL { return New(NULL); }

  ShowedDocuments* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShowedDocuments& from);
  void MergeFrom(const ShowedDocuments& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShowedDocuments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.interleaving.ShowedDocument showedDocuments = 1;
  int showeddocuments_size() const;
  void clear_showeddocuments();
  static const int kShowedDocumentsFieldNumber = 1;
  const ::ru::mail::go::webbase::interleaving::ShowedDocument& showeddocuments(int index) const;
  ::ru::mail::go::webbase::interleaving::ShowedDocument* mutable_showeddocuments(int index);
  ::ru::mail::go::webbase::interleaving::ShowedDocument* add_showeddocuments();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ShowedDocument >*
      mutable_showeddocuments();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ShowedDocument >&
      showeddocuments() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.ShowedDocuments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ShowedDocument > showeddocuments_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowedDocument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.ShowedDocument) */ {
 public:
  ShowedDocument();
  virtual ~ShowedDocument();

  ShowedDocument(const ShowedDocument& from);

  inline ShowedDocument& operator=(const ShowedDocument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowedDocument(ShowedDocument&& from) noexcept
    : ShowedDocument() {
    *this = ::std::move(from);
  }

  inline ShowedDocument& operator=(ShowedDocument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowedDocument& default_instance();

  static inline const ShowedDocument* internal_default_instance() {
    return reinterpret_cast<const ShowedDocument*>(
               &_ShowedDocument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(ShowedDocument* other);
  friend void swap(ShowedDocument& a, ShowedDocument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowedDocument* New() const PROTOBUF_FINAL { return New(NULL); }

  ShowedDocument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShowedDocument& from);
  void MergeFrom(const ShowedDocument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShowedDocument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 6;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 6;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string vertical = 7;
  bool has_vertical() const;
  void clear_vertical();
  static const int kVerticalFieldNumber = 7;
  const ::std::string& vertical() const;
  void set_vertical(const ::std::string& value);
  #if LANG_CXX11
  void set_vertical(::std::string&& value);
  #endif
  void set_vertical(const char* value);
  void set_vertical(const char* value, size_t size);
  ::std::string* mutable_vertical();
  ::std::string* release_vertical();
  void set_allocated_vertical(::std::string* vertical);

  // optional uint32 position_a = 2;
  bool has_position_a() const;
  void clear_position_a();
  static const int kPositionAFieldNumber = 2;
  ::google::protobuf::uint32 position_a() const;
  void set_position_a(::google::protobuf::uint32 value);

  // optional uint32 position_b = 3;
  bool has_position_b() const;
  void clear_position_b();
  static const int kPositionBFieldNumber = 3;
  ::google::protobuf::uint32 position_b() const;
  void set_position_b(::google::protobuf::uint32 value);

  // required bool showed_from_a = 1;
  bool has_showed_from_a() const;
  void clear_showed_from_a();
  static const int kShowedFromAFieldNumber = 1;
  bool showed_from_a() const;
  void set_showed_from_a(bool value);

  // optional bool clicked = 5;
  bool has_clicked() const;
  void clear_clicked();
  static const int kClickedFieldNumber = 5;
  bool clicked() const;
  void set_clicked(bool value);

  // required uint32 interleaved_position = 4;
  bool has_interleaved_position() const;
  void clear_interleaved_position();
  static const int kInterleavedPositionFieldNumber = 4;
  ::google::protobuf::uint32 interleaved_position() const;
  void set_interleaved_position(::google::protobuf::uint32 value);

  // optional float sm_weight = 8;
  bool has_sm_weight() const;
  void clear_sm_weight();
  static const int kSmWeightFieldNumber = 8;
  float sm_weight() const;
  void set_sm_weight(float value);

  // optional uint32 rpos = 9;
  bool has_rpos() const;
  void clear_rpos();
  static const int kRposFieldNumber = 9;
  ::google::protobuf::uint32 rpos() const;
  void set_rpos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.ShowedDocument)
 private:
  void set_has_showed_from_a();
  void clear_has_showed_from_a();
  void set_has_position_a();
  void clear_has_position_a();
  void set_has_position_b();
  void clear_has_position_b();
  void set_has_interleaved_position();
  void clear_has_interleaved_position();
  void set_has_clicked();
  void clear_has_clicked();
  void set_has_url();
  void clear_has_url();
  void set_has_vertical();
  void clear_has_vertical();
  void set_has_sm_weight();
  void clear_has_sm_weight();
  void set_has_rpos();
  void clear_has_rpos();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr vertical_;
  ::google::protobuf::uint32 position_a_;
  ::google::protobuf::uint32 position_b_;
  bool showed_from_a_;
  bool clicked_;
  ::google::protobuf::uint32 interleaved_position_;
  float sm_weight_;
  ::google::protobuf::uint32 rpos_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Click : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.Click) */ {
 public:
  Click();
  virtual ~Click();

  Click(const Click& from);

  inline Click& operator=(const Click& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Click(Click&& from) noexcept
    : Click() {
    *this = ::std::move(from);
  }

  inline Click& operator=(Click&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Click& default_instance();

  static inline const Click* internal_default_instance() {
    return reinterpret_cast<const Click*>(
               &_Click_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(Click* other);
  friend void swap(Click& a, Click& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Click* New() const PROTOBUF_FINAL { return New(NULL); }

  Click* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Click& from);
  void MergeFrom(const Click& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Click* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required uint32 position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  ::google::protobuf::uint32 position() const;
  void set_position(::google::protobuf::uint32 value);

  // required uint32 time_delay = 2;
  bool has_time_delay() const;
  void clear_time_delay();
  static const int kTimeDelayFieldNumber = 2;
  ::google::protobuf::uint32 time_delay() const;
  void set_time_delay(::google::protobuf::uint32 value);

  // optional uint32 sub_position = 4;
  bool has_sub_position() const;
  void clear_sub_position();
  static const int kSubPositionFieldNumber = 4;
  ::google::protobuf::uint32 sub_position() const;
  void set_sub_position(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.Click)
 private:
  void set_has_position();
  void clear_has_position();
  void set_has_time_delay();
  void clear_has_time_delay();
  void set_has_type();
  void clear_has_type();
  void set_has_sub_position();
  void clear_has_sub_position();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 time_delay_;
  ::google::protobuf::uint32 sub_position_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Play : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.Play) */ {
 public:
  Play();
  virtual ~Play();

  Play(const Play& from);

  inline Play& operator=(const Play& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Play(Play&& from) noexcept
    : Play() {
    *this = ::std::move(from);
  }

  inline Play& operator=(Play&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Play& default_instance();

  static inline const Play* internal_default_instance() {
    return reinterpret_cast<const Play*>(
               &_Play_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(Play* other);
  friend void swap(Play& a, Play& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Play* New() const PROTOBUF_FINAL { return New(NULL); }

  Play* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Play& from);
  void MergeFrom(const Play& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Play* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required uint32 position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  ::google::protobuf::uint32 position() const;
  void set_position(::google::protobuf::uint32 value);

  // required uint32 time_delay = 2;
  bool has_time_delay() const;
  void clear_time_delay();
  static const int kTimeDelayFieldNumber = 2;
  ::google::protobuf::uint32 time_delay() const;
  void set_time_delay(::google::protobuf::uint32 value);

  // required uint32 time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // required uint32 duration = 4;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 4;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.Play)
 private:
  void set_has_position();
  void clear_has_position();
  void set_has_time_delay();
  void clear_has_time_delay();
  void set_has_time();
  void clear_has_time();
  void set_has_duration();
  void clear_has_duration();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 time_delay_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 duration_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.Action) */ {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(Action* other);
  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const PROTOBUF_FINAL { return New(NULL); }

  Action* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Action* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Action_Type Type;
  static const Type CLICK =
    Action_Type_CLICK;
  static const Type SHARE =
    Action_Type_SHARE;
  static const Type LIKE =
    Action_Type_LIKE;
  static const Type CLOSE =
    Action_Type_CLOSE;
  static const Type DISLIKE =
    Action_Type_DISLIKE;
  static inline bool Type_IsValid(int value) {
    return Action_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Action_Type_Type_MIN;
  static const Type Type_MAX =
    Action_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Action_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Action_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Action_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Action_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ru.mail.go.webbase.interleaving.Action.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ru::mail::go::webbase::interleaving::Action_Type type() const;
  void set_type(::ru::mail::go::webbase::interleaving::Action_Type value);

  // required uint32 position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::google::protobuf::uint32 position() const;
  void set_position(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.Action)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_position();
  void clear_has_position();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::uint32 position_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Serp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.Serp) */ {
 public:
  Serp();
  virtual ~Serp();

  Serp(const Serp& from);

  inline Serp& operator=(const Serp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Serp(Serp&& from) noexcept
    : Serp() {
    *this = ::std::move(from);
  }

  inline Serp& operator=(Serp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Serp& default_instance();

  static inline const Serp* internal_default_instance() {
    return reinterpret_cast<const Serp*>(
               &_Serp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(Serp* other);
  friend void swap(Serp& a, Serp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Serp* New() const PROTOBUF_FINAL { return New(NULL); }

  Serp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Serp& from);
  void MergeFrom(const Serp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Serp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Serp_SourceType SourceType;
  static const SourceType UNDEF =
    Serp_SourceType_UNDEF;
  static const SourceType YNDX =
    Serp_SourceType_YNDX;
  static const SourceType GOOGL =
    Serp_SourceType_GOOGL;
  static inline bool SourceType_IsValid(int value) {
    return Serp_SourceType_IsValid(value);
  }
  static const SourceType SourceType_MIN =
    Serp_SourceType_SourceType_MIN;
  static const SourceType SourceType_MAX =
    Serp_SourceType_SourceType_MAX;
  static const int SourceType_ARRAYSIZE =
    Serp_SourceType_SourceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SourceType_descriptor() {
    return Serp_SourceType_descriptor();
  }
  static inline const ::std::string& SourceType_Name(SourceType value) {
    return Serp_SourceType_Name(value);
  }
  static inline bool SourceType_Parse(const ::std::string& name,
      SourceType* value) {
    return Serp_SourceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string urls = 1;
  int urls_size() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 1;
  const ::std::string& urls(int index) const;
  ::std::string* mutable_urls(int index);
  void set_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_urls(int index, ::std::string&& value);
  #endif
  void set_urls(int index, const char* value);
  void set_urls(int index, const char* value, size_t size);
  ::std::string* add_urls();
  void add_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_urls(::std::string&& value);
  #endif
  void add_urls(const char* value);
  void add_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_urls();

  // required string query = 3;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 3;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // required .ru.mail.go.webbase.interleaving.Serp.SourceType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::ru::mail::go::webbase::interleaving::Serp_SourceType type() const;
  void set_type(::ru::mail::go::webbase::interleaving::Serp_SourceType value);

  // required uint32 rb_code = 4;
  bool has_rb_code() const;
  void clear_rb_code();
  static const int kRbCodeFieldNumber = 4;
  ::google::protobuf::uint32 rb_code() const;
  void set_rb_code(::google::protobuf::uint32 value);

  // required uint64 timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.Serp)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_query();
  void clear_has_query();
  void set_has_rb_code();
  void clear_has_rb_code();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> urls_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  int type_;
  ::google::protobuf::uint32 rb_code_;
  ::google::protobuf::uint64 timestamp_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EssrExperimentResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.EssrExperimentResult) */ {
 public:
  EssrExperimentResult();
  virtual ~EssrExperimentResult();

  EssrExperimentResult(const EssrExperimentResult& from);

  inline EssrExperimentResult& operator=(const EssrExperimentResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EssrExperimentResult(EssrExperimentResult&& from) noexcept
    : EssrExperimentResult() {
    *this = ::std::move(from);
  }

  inline EssrExperimentResult& operator=(EssrExperimentResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EssrExperimentResult& default_instance();

  static inline const EssrExperimentResult* internal_default_instance() {
    return reinterpret_cast<const EssrExperimentResult*>(
               &_EssrExperimentResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(EssrExperimentResult* other);
  friend void swap(EssrExperimentResult& a, EssrExperimentResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EssrExperimentResult* New() const PROTOBUF_FINAL { return New(NULL); }

  EssrExperimentResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EssrExperimentResult& from);
  void MergeFrom(const EssrExperimentResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EssrExperimentResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double metric_value = 1;
  bool has_metric_value() const;
  void clear_metric_value();
  static const int kMetricValueFieldNumber = 1;
  double metric_value() const;
  void set_metric_value(double value);

  // required uint32 a_win_count = 2;
  bool has_a_win_count() const;
  void clear_a_win_count();
  static const int kAWinCountFieldNumber = 2;
  ::google::protobuf::uint32 a_win_count() const;
  void set_a_win_count(::google::protobuf::uint32 value);

  // required uint32 b_win_count = 3;
  bool has_b_win_count() const;
  void clear_b_win_count();
  static const int kBWinCountFieldNumber = 3;
  ::google::protobuf::uint32 b_win_count() const;
  void set_b_win_count(::google::protobuf::uint32 value);

  // required uint32 events_count = 4;
  bool has_events_count() const;
  void clear_events_count();
  static const int kEventsCountFieldNumber = 4;
  ::google::protobuf::uint32 events_count() const;
  void set_events_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.EssrExperimentResult)
 private:
  void set_has_metric_value();
  void clear_has_metric_value();
  void set_has_a_win_count();
  void clear_has_a_win_count();
  void set_has_b_win_count();
  void clear_has_b_win_count();
  void set_has_events_count();
  void clear_has_events_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double metric_value_;
  ::google::protobuf::uint32 a_win_count_;
  ::google::protobuf::uint32 b_win_count_;
  ::google::protobuf::uint32 events_count_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Qs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.Qs) */ {
 public:
  Qs();
  virtual ~Qs();

  Qs(const Qs& from);

  inline Qs& operator=(const Qs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qs(Qs&& from) noexcept
    : Qs() {
    *this = ::std::move(from);
  }

  inline Qs& operator=(Qs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Qs& default_instance();

  static inline const Qs* internal_default_instance() {
    return reinterpret_cast<const Qs*>(
               &_Qs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(Qs* other);
  friend void swap(Qs& a, Qs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qs* New() const PROTOBUF_FINAL { return New(NULL); }

  Qs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qs& from);
  void MergeFrom(const Qs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.Qs)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuggNavig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.SuggNavig) */ {
 public:
  SuggNavig();
  virtual ~SuggNavig();

  SuggNavig(const SuggNavig& from);

  inline SuggNavig& operator=(const SuggNavig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuggNavig(SuggNavig&& from) noexcept
    : SuggNavig() {
    *this = ::std::move(from);
  }

  inline SuggNavig& operator=(SuggNavig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuggNavig& default_instance();

  static inline const SuggNavig* internal_default_instance() {
    return reinterpret_cast<const SuggNavig*>(
               &_SuggNavig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(SuggNavig* other);
  friend void swap(SuggNavig& a, SuggNavig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuggNavig* New() const PROTOBUF_FINAL { return New(NULL); }

  SuggNavig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuggNavig& from);
  void MergeFrom(const SuggNavig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuggNavig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string query = 2;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional string source = 5;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 5;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional bool has_favicon = 3 [default = false];
  bool has_has_favicon() const;
  void clear_has_favicon();
  static const int kHasFaviconFieldNumber = 3;
  bool has_favicon() const;
  void set_has_favicon(bool value);

  // optional bool clicked = 4 [default = false];
  bool has_clicked() const;
  void clear_clicked();
  static const int kClickedFieldNumber = 4;
  bool clicked() const;
  void set_clicked(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.SuggNavig)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_query();
  void clear_has_query();
  void set_has_has_favicon();
  void clear_has_has_favicon();
  void set_has_clicked();
  void clear_has_clicked();
  void set_has_source();
  void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  bool has_favicon_;
  bool clicked_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.AlSession) */ {
 public:
  AlSession();
  virtual ~AlSession();

  AlSession(const AlSession& from);

  inline AlSession& operator=(const AlSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlSession(AlSession&& from) noexcept
    : AlSession() {
    *this = ::std::move(from);
  }

  inline AlSession& operator=(AlSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlSession& default_instance();

  static inline const AlSession* internal_default_instance() {
    return reinterpret_cast<const AlSession*>(
               &_AlSession_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(AlSession* other);
  friend void swap(AlSession& a, AlSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlSession* New() const PROTOBUF_FINAL { return New(NULL); }

  AlSession* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AlSession& from);
  void MergeFrom(const AlSession& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AlSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string urls = 1;
  int urls_size() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 1;
  const ::std::string& urls(int index) const;
  ::std::string* mutable_urls(int index);
  void set_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_urls(int index, ::std::string&& value);
  #endif
  void set_urls(int index, const char* value);
  void set_urls(int index, const char* value, size_t size);
  ::std::string* add_urls();
  void add_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_urls(::std::string&& value);
  #endif
  void add_urls(const char* value);
  void add_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_urls();

  // optional uint32 freq = 2 [default = 1];
  bool has_freq() const;
  void clear_freq();
  static const int kFreqFieldNumber = 2;
  ::google::protobuf::uint32 freq() const;
  void set_freq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.AlSession)
 private:
  void set_has_freq();
  void clear_has_freq();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> urls_;
  ::google::protobuf::uint32 freq_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.AlSource) */ {
 public:
  AlSource();
  virtual ~AlSource();

  AlSource(const AlSource& from);

  inline AlSource& operator=(const AlSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlSource(AlSource&& from) noexcept
    : AlSource() {
    *this = ::std::move(from);
  }

  inline AlSource& operator=(AlSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlSource& default_instance();

  static inline const AlSource* internal_default_instance() {
    return reinterpret_cast<const AlSource*>(
               &_AlSource_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(AlSource* other);
  friend void swap(AlSource& a, AlSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlSource* New() const PROTOBUF_FINAL { return New(NULL); }

  AlSource* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AlSource& from);
  void MergeFrom(const AlSource& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AlSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AlSource_SourceType SourceType;
  static const SourceType UNDEF =
    AlSource_SourceType_UNDEF;
  static const SourceType YNDX =
    AlSource_SourceType_YNDX;
  static const SourceType GOOGL =
    AlSource_SourceType_GOOGL;
  static inline bool SourceType_IsValid(int value) {
    return AlSource_SourceType_IsValid(value);
  }
  static const SourceType SourceType_MIN =
    AlSource_SourceType_SourceType_MIN;
  static const SourceType SourceType_MAX =
    AlSource_SourceType_SourceType_MAX;
  static const int SourceType_ARRAYSIZE =
    AlSource_SourceType_SourceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SourceType_descriptor() {
    return AlSource_SourceType_descriptor();
  }
  static inline const ::std::string& SourceType_Name(SourceType value) {
    return AlSource_SourceType_Name(value);
  }
  static inline bool SourceType_Parse(const ::std::string& name,
      SourceType* value) {
    return AlSource_SourceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.interleaving.AlSession sessions = 2;
  int sessions_size() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 2;
  const ::ru::mail::go::webbase::interleaving::AlSession& sessions(int index) const;
  ::ru::mail::go::webbase::interleaving::AlSession* mutable_sessions(int index);
  ::ru::mail::go::webbase::interleaving::AlSession* add_sessions();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlSession >*
      mutable_sessions();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlSession >&
      sessions() const;

  // required .ru.mail.go.webbase.interleaving.AlSource.SourceType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ru::mail::go::webbase::interleaving::AlSource_SourceType type() const;
  void set_type(::ru::mail::go::webbase::interleaving::AlSource_SourceType value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.AlSource)
 private:
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlSession > sessions_;
  int type_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlQueryData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.AlQueryData) */ {
 public:
  AlQueryData();
  virtual ~AlQueryData();

  AlQueryData(const AlQueryData& from);

  inline AlQueryData& operator=(const AlQueryData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlQueryData(AlQueryData&& from) noexcept
    : AlQueryData() {
    *this = ::std::move(from);
  }

  inline AlQueryData& operator=(AlQueryData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlQueryData& default_instance();

  static inline const AlQueryData* internal_default_instance() {
    return reinterpret_cast<const AlQueryData*>(
               &_AlQueryData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(AlQueryData* other);
  friend void swap(AlQueryData& a, AlQueryData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlQueryData* New() const PROTOBUF_FINAL { return New(NULL); }

  AlQueryData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AlQueryData& from);
  void MergeFrom(const AlQueryData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AlQueryData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.interleaving.AlSource sources = 3;
  int sources_size() const;
  void clear_sources();
  static const int kSourcesFieldNumber = 3;
  const ::ru::mail::go::webbase::interleaving::AlSource& sources(int index) const;
  ::ru::mail::go::webbase::interleaving::AlSource* mutable_sources(int index);
  ::ru::mail::go::webbase::interleaving::AlSource* add_sources();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlSource >*
      mutable_sources();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlSource >&
      sources() const;

  // required string query = 1;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // required int32 rb_code = 2;
  bool has_rb_code() const;
  void clear_rb_code();
  static const int kRbCodeFieldNumber = 2;
  ::google::protobuf::int32 rb_code() const;
  void set_rb_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.AlQueryData)
 private:
  void set_has_query();
  void clear_has_query();
  void set_has_rb_code();
  void clear_has_rb_code();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlSource > sources_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::int32 rb_code_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlQueryDataList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.AlQueryDataList) */ {
 public:
  AlQueryDataList();
  virtual ~AlQueryDataList();

  AlQueryDataList(const AlQueryDataList& from);

  inline AlQueryDataList& operator=(const AlQueryDataList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlQueryDataList(AlQueryDataList&& from) noexcept
    : AlQueryDataList() {
    *this = ::std::move(from);
  }

  inline AlQueryDataList& operator=(AlQueryDataList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlQueryDataList& default_instance();

  static inline const AlQueryDataList* internal_default_instance() {
    return reinterpret_cast<const AlQueryDataList*>(
               &_AlQueryDataList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(AlQueryDataList* other);
  friend void swap(AlQueryDataList& a, AlQueryDataList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlQueryDataList* New() const PROTOBUF_FINAL { return New(NULL); }

  AlQueryDataList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AlQueryDataList& from);
  void MergeFrom(const AlQueryDataList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AlQueryDataList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.interleaving.AlQueryData queries = 1;
  int queries_size() const;
  void clear_queries();
  static const int kQueriesFieldNumber = 1;
  const ::ru::mail::go::webbase::interleaving::AlQueryData& queries(int index) const;
  ::ru::mail::go::webbase::interleaving::AlQueryData* mutable_queries(int index);
  ::ru::mail::go::webbase::interleaving::AlQueryData* add_queries();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlQueryData >*
      mutable_queries();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlQueryData >&
      queries() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.AlQueryDataList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlQueryData > queries_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.interleaving.DocumentStats) */ {
 public:
  DocumentStats();
  virtual ~DocumentStats();

  DocumentStats(const DocumentStats& from);

  inline DocumentStats& operator=(const DocumentStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentStats(DocumentStats&& from) noexcept
    : DocumentStats() {
    *this = ::std::move(from);
  }

  inline DocumentStats& operator=(DocumentStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentStats& default_instance();

  static inline const DocumentStats* internal_default_instance() {
    return reinterpret_cast<const DocumentStats*>(
               &_DocumentStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(DocumentStats* other);
  friend void swap(DocumentStats& a, DocumentStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentStats* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentStats& from);
  void MergeFrom(const DocumentStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string snippet = 5;
  bool has_snippet() const;
  void clear_snippet();
  static const int kSnippetFieldNumber = 5;
  const ::std::string& snippet() const;
  void set_snippet(const ::std::string& value);
  #if LANG_CXX11
  void set_snippet(::std::string&& value);
  #endif
  void set_snippet(const char* value);
  void set_snippet(const char* value, size_t size);
  ::std::string* mutable_snippet();
  ::std::string* release_snippet();
  void set_allocated_snippet(::std::string* snippet);

  // required bool showed = 1;
  bool has_showed() const;
  void clear_showed();
  static const int kShowedFieldNumber = 1;
  bool showed() const;
  void set_showed(bool value);

  // required bool clicked = 2;
  bool has_clicked() const;
  void clear_clicked();
  static const int kClickedFieldNumber = 2;
  bool clicked() const;
  void set_clicked(bool value);

  // required bool satisfied = 3;
  bool has_satisfied() const;
  void clear_satisfied();
  static const int kSatisfiedFieldNumber = 3;
  bool satisfied() const;
  void set_satisfied(bool value);

  // required bool long_click = 4;
  bool has_long_click() const;
  void clear_long_click();
  static const int kLongClickFieldNumber = 4;
  bool long_click() const;
  void set_long_click(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.interleaving.DocumentStats)
 private:
  void set_has_showed();
  void clear_has_showed();
  void set_has_clicked();
  void clear_has_clicked();
  void set_has_satisfied();
  void clear_has_satisfied();
  void set_has_long_click();
  void clear_has_long_click();
  void set_has_snippet();
  void clear_has_snippet();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr snippet_;
  bool showed_;
  bool clicked_;
  bool satisfied_;
  bool long_click_;
  friend struct protobuf_experiment_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FailStat

// required string id = 1;
inline bool FailStat::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FailStat::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FailStat::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FailStat::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& FailStat::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.FailStat.id)
  return id_.GetNoArena();
}
inline void FailStat::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.FailStat.id)
}
#if LANG_CXX11
inline void FailStat::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.FailStat.id)
}
#endif
inline void FailStat::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.FailStat.id)
}
inline void FailStat::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.FailStat.id)
}
inline ::std::string* FailStat::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.FailStat.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FailStat::release_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.FailStat.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FailStat::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.FailStat.id)
}

// optional uint32 count = 2;
inline bool FailStat::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FailStat::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FailStat::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FailStat::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 FailStat::count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.FailStat.count)
  return count_;
}
inline void FailStat::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.FailStat.count)
}

// -------------------------------------------------------------------

// ExperimentStats

// required uint32 id = 1;
inline bool ExperimentStats::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExperimentStats::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExperimentStats::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExperimentStats::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ExperimentStats::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.id)
  return id_;
}
inline void ExperimentStats::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.id)
}

// required uint32 queries_count = 2;
inline bool ExperimentStats::has_queries_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExperimentStats::set_has_queries_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExperimentStats::clear_has_queries_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExperimentStats::clear_queries_count() {
  queries_count_ = 0u;
  clear_has_queries_count();
}
inline ::google::protobuf::uint32 ExperimentStats::queries_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.queries_count)
  return queries_count_;
}
inline void ExperimentStats::set_queries_count(::google::protobuf::uint32 value) {
  set_has_queries_count();
  queries_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.queries_count)
}

// required bool failed = 3;
inline bool ExperimentStats::has_failed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExperimentStats::set_has_failed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExperimentStats::clear_has_failed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExperimentStats::clear_failed() {
  failed_ = false;
  clear_has_failed();
}
inline bool ExperimentStats::failed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.failed)
  return failed_;
}
inline void ExperimentStats::set_failed(bool value) {
  set_has_failed();
  failed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.failed)
}

// optional string fail_reason = 4;
inline bool ExperimentStats::has_fail_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExperimentStats::set_has_fail_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExperimentStats::clear_has_fail_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExperimentStats::clear_fail_reason() {
  fail_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fail_reason();
}
inline const ::std::string& ExperimentStats::fail_reason() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason)
  return fail_reason_.GetNoArena();
}
inline void ExperimentStats::set_fail_reason(const ::std::string& value) {
  set_has_fail_reason();
  fail_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason)
}
#if LANG_CXX11
inline void ExperimentStats::set_fail_reason(::std::string&& value) {
  set_has_fail_reason();
  fail_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason)
}
#endif
inline void ExperimentStats::set_fail_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fail_reason();
  fail_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason)
}
inline void ExperimentStats::set_fail_reason(const char* value, size_t size) {
  set_has_fail_reason();
  fail_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason)
}
inline ::std::string* ExperimentStats::mutable_fail_reason() {
  set_has_fail_reason();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason)
  return fail_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExperimentStats::release_fail_reason() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason)
  clear_has_fail_reason();
  return fail_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExperimentStats::set_allocated_fail_reason(::std::string* fail_reason) {
  if (fail_reason != NULL) {
    set_has_fail_reason();
  } else {
    clear_has_fail_reason();
  }
  fail_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fail_reason);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentStats.fail_reason)
}

// optional uint32 trials_count = 5;
inline bool ExperimentStats::has_trials_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExperimentStats::set_has_trials_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExperimentStats::clear_has_trials_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExperimentStats::clear_trials_count() {
  trials_count_ = 0u;
  clear_has_trials_count();
}
inline ::google::protobuf::uint32 ExperimentStats::trials_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.trials_count)
  return trials_count_;
}
inline void ExperimentStats::set_trials_count(::google::protobuf::uint32 value) {
  set_has_trials_count();
  trials_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.trials_count)
}

// optional uint32 fails_count = 6;
inline bool ExperimentStats::has_fails_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExperimentStats::set_has_fails_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExperimentStats::clear_has_fails_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExperimentStats::clear_fails_count() {
  fails_count_ = 0u;
  clear_has_fails_count();
}
inline ::google::protobuf::uint32 ExperimentStats::fails_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.fails_count)
  return fails_count_;
}
inline void ExperimentStats::set_fails_count(::google::protobuf::uint32 value) {
  set_has_fails_count();
  fails_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.fails_count)
}

// optional uint32 failed_a = 7;
inline bool ExperimentStats::has_failed_a() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExperimentStats::set_has_failed_a() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ExperimentStats::clear_has_failed_a() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ExperimentStats::clear_failed_a() {
  failed_a_ = 0u;
  clear_has_failed_a();
}
inline ::google::protobuf::uint32 ExperimentStats::failed_a() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.failed_a)
  return failed_a_;
}
inline void ExperimentStats::set_failed_a(::google::protobuf::uint32 value) {
  set_has_failed_a();
  failed_a_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.failed_a)
}

// optional uint32 failed_b = 8;
inline bool ExperimentStats::has_failed_b() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ExperimentStats::set_has_failed_b() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ExperimentStats::clear_has_failed_b() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ExperimentStats::clear_failed_b() {
  failed_b_ = 0u;
  clear_has_failed_b();
}
inline ::google::protobuf::uint32 ExperimentStats::failed_b() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.failed_b)
  return failed_b_;
}
inline void ExperimentStats::set_failed_b(::google::protobuf::uint32 value) {
  set_has_failed_b();
  failed_b_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.failed_b)
}

// repeated .ru.mail.go.webbase.interleaving.FailStat fails_stat = 9;
inline int ExperimentStats::fails_stat_size() const {
  return fails_stat_.size();
}
inline void ExperimentStats::clear_fails_stat() {
  fails_stat_.Clear();
}
inline const ::ru::mail::go::webbase::interleaving::FailStat& ExperimentStats::fails_stat(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.fails_stat)
  return fails_stat_.Get(index);
}
inline ::ru::mail::go::webbase::interleaving::FailStat* ExperimentStats::mutable_fails_stat(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentStats.fails_stat)
  return fails_stat_.Mutable(index);
}
inline ::ru::mail::go::webbase::interleaving::FailStat* ExperimentStats::add_fails_stat() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.ExperimentStats.fails_stat)
  return fails_stat_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::FailStat >*
ExperimentStats::mutable_fails_stat() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.ExperimentStats.fails_stat)
  return &fails_stat_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::FailStat >&
ExperimentStats::fails_stat() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.ExperimentStats.fails_stat)
  return fails_stat_;
}

// optional string info = 10;
inline bool ExperimentStats::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExperimentStats::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExperimentStats::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExperimentStats::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info();
}
inline const ::std::string& ExperimentStats::info() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStats.info)
  return info_.GetNoArena();
}
inline void ExperimentStats::set_info(const ::std::string& value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentStats.info)
}
#if LANG_CXX11
inline void ExperimentStats::set_info(::std::string&& value) {
  set_has_info();
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentStats.info)
}
#endif
inline void ExperimentStats::set_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentStats.info)
}
inline void ExperimentStats::set_info(const char* value, size_t size) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentStats.info)
}
inline ::std::string* ExperimentStats::mutable_info() {
  set_has_info();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentStats.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExperimentStats::release_info() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentStats.info)
  clear_has_info();
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExperimentStats::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    set_has_info();
  } else {
    clear_has_info();
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentStats.info)
}

// -------------------------------------------------------------------

// ExperimentStatsList

// repeated .ru.mail.go.webbase.interleaving.ExperimentStats stats = 1;
inline int ExperimentStatsList::stats_size() const {
  return stats_.size();
}
inline void ExperimentStatsList::clear_stats() {
  stats_.Clear();
}
inline const ::ru::mail::go::webbase::interleaving::ExperimentStats& ExperimentStatsList::stats(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentStatsList.stats)
  return stats_.Get(index);
}
inline ::ru::mail::go::webbase::interleaving::ExperimentStats* ExperimentStatsList::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentStatsList.stats)
  return stats_.Mutable(index);
}
inline ::ru::mail::go::webbase::interleaving::ExperimentStats* ExperimentStatsList::add_stats() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.ExperimentStatsList.stats)
  return stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ExperimentStats >*
ExperimentStatsList::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.ExperimentStatsList.stats)
  return &stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ExperimentStats >&
ExperimentStatsList::stats() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.ExperimentStatsList.stats)
  return stats_;
}

// -------------------------------------------------------------------

// ExperimentConfig

// required uint32 id = 1;
inline bool ExperimentConfig::has_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ExperimentConfig::set_has_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ExperimentConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ExperimentConfig::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ExperimentConfig::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.id)
  return id_;
}
inline void ExperimentConfig::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.id)
}

// required string type = 2;
inline bool ExperimentConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExperimentConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExperimentConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExperimentConfig::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& ExperimentConfig::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.type)
  return type_.GetNoArena();
}
inline void ExperimentConfig::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.type)
}
#if LANG_CXX11
inline void ExperimentConfig::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.type)
}
#endif
inline void ExperimentConfig::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.type)
}
inline void ExperimentConfig::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.type)
}
inline ::std::string* ExperimentConfig::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExperimentConfig::release_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExperimentConfig::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.type)
}

// required string source_a_type = 3;
inline bool ExperimentConfig::has_source_a_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExperimentConfig::set_has_source_a_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExperimentConfig::clear_has_source_a_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExperimentConfig::clear_source_a_type() {
  source_a_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_a_type();
}
inline const ::std::string& ExperimentConfig::source_a_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type)
  return source_a_type_.GetNoArena();
}
inline void ExperimentConfig::set_source_a_type(const ::std::string& value) {
  set_has_source_a_type();
  source_a_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type)
}
#if LANG_CXX11
inline void ExperimentConfig::set_source_a_type(::std::string&& value) {
  set_has_source_a_type();
  source_a_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type)
}
#endif
inline void ExperimentConfig::set_source_a_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_a_type();
  source_a_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type)
}
inline void ExperimentConfig::set_source_a_type(const char* value, size_t size) {
  set_has_source_a_type();
  source_a_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type)
}
inline ::std::string* ExperimentConfig::mutable_source_a_type() {
  set_has_source_a_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type)
  return source_a_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExperimentConfig::release_source_a_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type)
  clear_has_source_a_type();
  return source_a_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExperimentConfig::set_allocated_source_a_type(::std::string* source_a_type) {
  if (source_a_type != NULL) {
    set_has_source_a_type();
  } else {
    clear_has_source_a_type();
  }
  source_a_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_a_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_type)
}

// required string source_b_type = 4;
inline bool ExperimentConfig::has_source_b_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExperimentConfig::set_has_source_b_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExperimentConfig::clear_has_source_b_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExperimentConfig::clear_source_b_type() {
  source_b_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_b_type();
}
inline const ::std::string& ExperimentConfig::source_b_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type)
  return source_b_type_.GetNoArena();
}
inline void ExperimentConfig::set_source_b_type(const ::std::string& value) {
  set_has_source_b_type();
  source_b_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type)
}
#if LANG_CXX11
inline void ExperimentConfig::set_source_b_type(::std::string&& value) {
  set_has_source_b_type();
  source_b_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type)
}
#endif
inline void ExperimentConfig::set_source_b_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_b_type();
  source_b_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type)
}
inline void ExperimentConfig::set_source_b_type(const char* value, size_t size) {
  set_has_source_b_type();
  source_b_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type)
}
inline ::std::string* ExperimentConfig::mutable_source_b_type() {
  set_has_source_b_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type)
  return source_b_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExperimentConfig::release_source_b_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type)
  clear_has_source_b_type();
  return source_b_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExperimentConfig::set_allocated_source_b_type(::std::string* source_b_type) {
  if (source_b_type != NULL) {
    set_has_source_b_type();
  } else {
    clear_has_source_b_type();
  }
  source_b_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_b_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_type)
}

// optional string source_a_config = 5;
inline bool ExperimentConfig::has_source_a_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExperimentConfig::set_has_source_a_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExperimentConfig::clear_has_source_a_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExperimentConfig::clear_source_a_config() {
  source_a_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_a_config();
}
inline const ::std::string& ExperimentConfig::source_a_config() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config)
  return source_a_config_.GetNoArena();
}
inline void ExperimentConfig::set_source_a_config(const ::std::string& value) {
  set_has_source_a_config();
  source_a_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config)
}
#if LANG_CXX11
inline void ExperimentConfig::set_source_a_config(::std::string&& value) {
  set_has_source_a_config();
  source_a_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config)
}
#endif
inline void ExperimentConfig::set_source_a_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_a_config();
  source_a_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config)
}
inline void ExperimentConfig::set_source_a_config(const char* value, size_t size) {
  set_has_source_a_config();
  source_a_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config)
}
inline ::std::string* ExperimentConfig::mutable_source_a_config() {
  set_has_source_a_config();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config)
  return source_a_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExperimentConfig::release_source_a_config() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config)
  clear_has_source_a_config();
  return source_a_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExperimentConfig::set_allocated_source_a_config(::std::string* source_a_config) {
  if (source_a_config != NULL) {
    set_has_source_a_config();
  } else {
    clear_has_source_a_config();
  }
  source_a_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_a_config);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.source_a_config)
}

// optional string source_b_config = 6;
inline bool ExperimentConfig::has_source_b_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExperimentConfig::set_has_source_b_config() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExperimentConfig::clear_has_source_b_config() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExperimentConfig::clear_source_b_config() {
  source_b_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_b_config();
}
inline const ::std::string& ExperimentConfig::source_b_config() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config)
  return source_b_config_.GetNoArena();
}
inline void ExperimentConfig::set_source_b_config(const ::std::string& value) {
  set_has_source_b_config();
  source_b_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config)
}
#if LANG_CXX11
inline void ExperimentConfig::set_source_b_config(::std::string&& value) {
  set_has_source_b_config();
  source_b_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config)
}
#endif
inline void ExperimentConfig::set_source_b_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_b_config();
  source_b_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config)
}
inline void ExperimentConfig::set_source_b_config(const char* value, size_t size) {
  set_has_source_b_config();
  source_b_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config)
}
inline ::std::string* ExperimentConfig::mutable_source_b_config() {
  set_has_source_b_config();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config)
  return source_b_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExperimentConfig::release_source_b_config() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config)
  clear_has_source_b_config();
  return source_b_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExperimentConfig::set_allocated_source_b_config(::std::string* source_b_config) {
  if (source_b_config != NULL) {
    set_has_source_b_config();
  } else {
    clear_has_source_b_config();
  }
  source_b_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_b_config);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.source_b_config)
}

// optional string queries_filter = 7;
inline bool ExperimentConfig::has_queries_filter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExperimentConfig::set_has_queries_filter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExperimentConfig::clear_has_queries_filter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExperimentConfig::clear_queries_filter() {
  queries_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queries_filter();
}
inline const ::std::string& ExperimentConfig::queries_filter() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter)
  return queries_filter_.GetNoArena();
}
inline void ExperimentConfig::set_queries_filter(const ::std::string& value) {
  set_has_queries_filter();
  queries_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter)
}
#if LANG_CXX11
inline void ExperimentConfig::set_queries_filter(::std::string&& value) {
  set_has_queries_filter();
  queries_filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter)
}
#endif
inline void ExperimentConfig::set_queries_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_queries_filter();
  queries_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter)
}
inline void ExperimentConfig::set_queries_filter(const char* value, size_t size) {
  set_has_queries_filter();
  queries_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter)
}
inline ::std::string* ExperimentConfig::mutable_queries_filter() {
  set_has_queries_filter();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter)
  return queries_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExperimentConfig::release_queries_filter() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter)
  clear_has_queries_filter();
  return queries_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExperimentConfig::set_allocated_queries_filter(::std::string* queries_filter) {
  if (queries_filter != NULL) {
    set_has_queries_filter();
  } else {
    clear_has_queries_filter();
  }
  queries_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queries_filter);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_filter)
}

// required uint32 min_per_day = 8;
inline bool ExperimentConfig::has_min_per_day() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ExperimentConfig::set_has_min_per_day() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ExperimentConfig::clear_has_min_per_day() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ExperimentConfig::clear_min_per_day() {
  min_per_day_ = 0u;
  clear_has_min_per_day();
}
inline ::google::protobuf::uint32 ExperimentConfig::min_per_day() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.min_per_day)
  return min_per_day_;
}
inline void ExperimentConfig::set_min_per_day(::google::protobuf::uint32 value) {
  set_has_min_per_day();
  min_per_day_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.min_per_day)
}

// required uint32 max_per_day = 9;
inline bool ExperimentConfig::has_max_per_day() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ExperimentConfig::set_has_max_per_day() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ExperimentConfig::clear_has_max_per_day() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ExperimentConfig::clear_max_per_day() {
  max_per_day_ = 0u;
  clear_has_max_per_day();
}
inline ::google::protobuf::uint32 ExperimentConfig::max_per_day() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.max_per_day)
  return max_per_day_;
}
inline void ExperimentConfig::set_max_per_day(::google::protobuf::uint32 value) {
  set_has_max_per_day();
  max_per_day_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.max_per_day)
}

// required uint32 priority = 10;
inline bool ExperimentConfig::has_priority() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ExperimentConfig::set_has_priority() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ExperimentConfig::clear_has_priority() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ExperimentConfig::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
inline ::google::protobuf::uint32 ExperimentConfig::priority() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.priority)
  return priority_;
}
inline void ExperimentConfig::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.priority)
}

// required uint32 start_date = 11;
inline bool ExperimentConfig::has_start_date() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ExperimentConfig::set_has_start_date() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ExperimentConfig::clear_has_start_date() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ExperimentConfig::clear_start_date() {
  start_date_ = 0u;
  clear_has_start_date();
}
inline ::google::protobuf::uint32 ExperimentConfig::start_date() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.start_date)
  return start_date_;
}
inline void ExperimentConfig::set_start_date(::google::protobuf::uint32 value) {
  set_has_start_date();
  start_date_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.start_date)
}

// optional bool quota_all = 12 [default = false];
inline bool ExperimentConfig::has_quota_all() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ExperimentConfig::set_has_quota_all() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ExperimentConfig::clear_has_quota_all() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ExperimentConfig::clear_quota_all() {
  quota_all_ = false;
  clear_has_quota_all();
}
inline bool ExperimentConfig::quota_all() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.quota_all)
  return quota_all_;
}
inline void ExperimentConfig::set_quota_all(bool value) {
  set_has_quota_all();
  quota_all_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.quota_all)
}

// optional string queries_file = 13;
inline bool ExperimentConfig::has_queries_file() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExperimentConfig::set_has_queries_file() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExperimentConfig::clear_has_queries_file() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExperimentConfig::clear_queries_file() {
  queries_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queries_file();
}
inline const ::std::string& ExperimentConfig::queries_file() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file)
  return queries_file_.GetNoArena();
}
inline void ExperimentConfig::set_queries_file(const ::std::string& value) {
  set_has_queries_file();
  queries_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file)
}
#if LANG_CXX11
inline void ExperimentConfig::set_queries_file(::std::string&& value) {
  set_has_queries_file();
  queries_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file)
}
#endif
inline void ExperimentConfig::set_queries_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_queries_file();
  queries_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file)
}
inline void ExperimentConfig::set_queries_file(const char* value, size_t size) {
  set_has_queries_file();
  queries_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file)
}
inline ::std::string* ExperimentConfig::mutable_queries_file() {
  set_has_queries_file();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file)
  return queries_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExperimentConfig::release_queries_file() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file)
  clear_has_queries_file();
  return queries_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExperimentConfig::set_allocated_queries_file(::std::string* queries_file) {
  if (queries_file != NULL) {
    set_has_queries_file();
  } else {
    clear_has_queries_file();
  }
  queries_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queries_file);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.queries_file)
}

// optional string homer_location = 14;
inline bool ExperimentConfig::has_homer_location() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExperimentConfig::set_has_homer_location() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ExperimentConfig::clear_has_homer_location() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ExperimentConfig::clear_homer_location() {
  homer_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_homer_location();
}
inline const ::std::string& ExperimentConfig::homer_location() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location)
  return homer_location_.GetNoArena();
}
inline void ExperimentConfig::set_homer_location(const ::std::string& value) {
  set_has_homer_location();
  homer_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location)
}
#if LANG_CXX11
inline void ExperimentConfig::set_homer_location(::std::string&& value) {
  set_has_homer_location();
  homer_location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location)
}
#endif
inline void ExperimentConfig::set_homer_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_homer_location();
  homer_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location)
}
inline void ExperimentConfig::set_homer_location(const char* value, size_t size) {
  set_has_homer_location();
  homer_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location)
}
inline ::std::string* ExperimentConfig::mutable_homer_location() {
  set_has_homer_location();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location)
  return homer_location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExperimentConfig::release_homer_location() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location)
  clear_has_homer_location();
  return homer_location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExperimentConfig::set_allocated_homer_location(::std::string* homer_location) {
  if (homer_location != NULL) {
    set_has_homer_location();
  } else {
    clear_has_homer_location();
  }
  homer_location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), homer_location);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.homer_location)
}

// optional string ae_set_name = 15;
inline bool ExperimentConfig::has_ae_set_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ExperimentConfig::set_has_ae_set_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ExperimentConfig::clear_has_ae_set_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ExperimentConfig::clear_ae_set_name() {
  ae_set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ae_set_name();
}
inline const ::std::string& ExperimentConfig::ae_set_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name)
  return ae_set_name_.GetNoArena();
}
inline void ExperimentConfig::set_ae_set_name(const ::std::string& value) {
  set_has_ae_set_name();
  ae_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name)
}
#if LANG_CXX11
inline void ExperimentConfig::set_ae_set_name(::std::string&& value) {
  set_has_ae_set_name();
  ae_set_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name)
}
#endif
inline void ExperimentConfig::set_ae_set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ae_set_name();
  ae_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name)
}
inline void ExperimentConfig::set_ae_set_name(const char* value, size_t size) {
  set_has_ae_set_name();
  ae_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name)
}
inline ::std::string* ExperimentConfig::mutable_ae_set_name() {
  set_has_ae_set_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name)
  return ae_set_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExperimentConfig::release_ae_set_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name)
  clear_has_ae_set_name();
  return ae_set_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExperimentConfig::set_allocated_ae_set_name(::std::string* ae_set_name) {
  if (ae_set_name != NULL) {
    set_has_ae_set_name();
  } else {
    clear_has_ae_set_name();
  }
  ae_set_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ae_set_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ExperimentConfig.ae_set_name)
}

// optional uint32 max_sessions = 16;
inline bool ExperimentConfig::has_max_sessions() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ExperimentConfig::set_has_max_sessions() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ExperimentConfig::clear_has_max_sessions() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ExperimentConfig::clear_max_sessions() {
  max_sessions_ = 0u;
  clear_has_max_sessions();
}
inline ::google::protobuf::uint32 ExperimentConfig::max_sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentConfig.max_sessions)
  return max_sessions_;
}
inline void ExperimentConfig::set_max_sessions(::google::protobuf::uint32 value) {
  set_has_max_sessions();
  max_sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ExperimentConfig.max_sessions)
}

// -------------------------------------------------------------------

// ExperimentMetaConfig

// repeated .ru.mail.go.webbase.interleaving.ExperimentConfig experiments = 1;
inline int ExperimentMetaConfig::experiments_size() const {
  return experiments_.size();
}
inline void ExperimentMetaConfig::clear_experiments() {
  experiments_.Clear();
}
inline const ::ru::mail::go::webbase::interleaving::ExperimentConfig& ExperimentMetaConfig::experiments(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ExperimentMetaConfig.experiments)
  return experiments_.Get(index);
}
inline ::ru::mail::go::webbase::interleaving::ExperimentConfig* ExperimentMetaConfig::mutable_experiments(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ExperimentMetaConfig.experiments)
  return experiments_.Mutable(index);
}
inline ::ru::mail::go::webbase::interleaving::ExperimentConfig* ExperimentMetaConfig::add_experiments() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.ExperimentMetaConfig.experiments)
  return experiments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ExperimentConfig >*
ExperimentMetaConfig::mutable_experiments() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.ExperimentMetaConfig.experiments)
  return &experiments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ExperimentConfig >&
ExperimentMetaConfig::experiments() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.ExperimentMetaConfig.experiments)
  return experiments_;
}

// -------------------------------------------------------------------

// MetricsTask

// required uint32 id = 1;
inline bool MetricsTask::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MetricsTask::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MetricsTask::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MetricsTask::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MetricsTask::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.id)
  return id_;
}
inline void MetricsTask::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.id)
}

// required string type = 2;
inline bool MetricsTask::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetricsTask::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetricsTask::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetricsTask::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& MetricsTask::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.type)
  return type_.GetNoArena();
}
inline void MetricsTask::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.type)
}
#if LANG_CXX11
inline void MetricsTask::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.MetricsTask.type)
}
#endif
inline void MetricsTask::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.MetricsTask.type)
}
inline void MetricsTask::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.MetricsTask.type)
}
inline ::std::string* MetricsTask::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.MetricsTask.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetricsTask::release_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.MetricsTask.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetricsTask::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.MetricsTask.type)
}

// required uint32 experiment_id = 3;
inline bool MetricsTask::has_experiment_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MetricsTask::set_has_experiment_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MetricsTask::clear_has_experiment_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MetricsTask::clear_experiment_id() {
  experiment_id_ = 0u;
  clear_has_experiment_id();
}
inline ::google::protobuf::uint32 MetricsTask::experiment_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.experiment_id)
  return experiment_id_;
}
inline void MetricsTask::set_experiment_id(::google::protobuf::uint32 value) {
  set_has_experiment_id();
  experiment_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.experiment_id)
}

// required uint64 start_time = 4;
inline bool MetricsTask::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MetricsTask::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MetricsTask::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MetricsTask::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::uint64 MetricsTask::start_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.start_time)
  return start_time_;
}
inline void MetricsTask::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.start_time)
}

// required uint64 stop_time = 5;
inline bool MetricsTask::has_stop_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MetricsTask::set_has_stop_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MetricsTask::clear_has_stop_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MetricsTask::clear_stop_time() {
  stop_time_ = GOOGLE_ULONGLONG(0);
  clear_has_stop_time();
}
inline ::google::protobuf::uint64 MetricsTask::stop_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.stop_time)
  return stop_time_;
}
inline void MetricsTask::set_stop_time(::google::protobuf::uint64 value) {
  set_has_stop_time();
  stop_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.stop_time)
}

// optional float confidence_coefficient = 6;
inline bool MetricsTask::has_confidence_coefficient() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MetricsTask::set_has_confidence_coefficient() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MetricsTask::clear_has_confidence_coefficient() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MetricsTask::clear_confidence_coefficient() {
  confidence_coefficient_ = 0;
  clear_has_confidence_coefficient();
}
inline float MetricsTask::confidence_coefficient() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.confidence_coefficient)
  return confidence_coefficient_;
}
inline void MetricsTask::set_confidence_coefficient(float value) {
  set_has_confidence_coefficient();
  confidence_coefficient_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.confidence_coefficient)
}

// optional string filter_rx = 7;
inline bool MetricsTask::has_filter_rx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetricsTask::set_has_filter_rx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetricsTask::clear_has_filter_rx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetricsTask::clear_filter_rx() {
  filter_rx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter_rx();
}
inline const ::std::string& MetricsTask::filter_rx() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.filter_rx)
  return filter_rx_.GetNoArena();
}
inline void MetricsTask::set_filter_rx(const ::std::string& value) {
  set_has_filter_rx();
  filter_rx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.filter_rx)
}
#if LANG_CXX11
inline void MetricsTask::set_filter_rx(::std::string&& value) {
  set_has_filter_rx();
  filter_rx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.MetricsTask.filter_rx)
}
#endif
inline void MetricsTask::set_filter_rx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filter_rx();
  filter_rx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.MetricsTask.filter_rx)
}
inline void MetricsTask::set_filter_rx(const char* value, size_t size) {
  set_has_filter_rx();
  filter_rx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.MetricsTask.filter_rx)
}
inline ::std::string* MetricsTask::mutable_filter_rx() {
  set_has_filter_rx();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.MetricsTask.filter_rx)
  return filter_rx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetricsTask::release_filter_rx() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.MetricsTask.filter_rx)
  clear_has_filter_rx();
  return filter_rx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetricsTask::set_allocated_filter_rx(::std::string* filter_rx) {
  if (filter_rx != NULL) {
    set_has_filter_rx();
  } else {
    clear_has_filter_rx();
  }
  filter_rx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter_rx);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.MetricsTask.filter_rx)
}

// optional string queries_file = 8;
inline bool MetricsTask::has_queries_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MetricsTask::set_has_queries_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MetricsTask::clear_has_queries_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MetricsTask::clear_queries_file() {
  queries_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queries_file();
}
inline const ::std::string& MetricsTask::queries_file() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.queries_file)
  return queries_file_.GetNoArena();
}
inline void MetricsTask::set_queries_file(const ::std::string& value) {
  set_has_queries_file();
  queries_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.queries_file)
}
#if LANG_CXX11
inline void MetricsTask::set_queries_file(::std::string&& value) {
  set_has_queries_file();
  queries_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.MetricsTask.queries_file)
}
#endif
inline void MetricsTask::set_queries_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_queries_file();
  queries_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.MetricsTask.queries_file)
}
inline void MetricsTask::set_queries_file(const char* value, size_t size) {
  set_has_queries_file();
  queries_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.MetricsTask.queries_file)
}
inline ::std::string* MetricsTask::mutable_queries_file() {
  set_has_queries_file();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.MetricsTask.queries_file)
  return queries_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetricsTask::release_queries_file() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.MetricsTask.queries_file)
  clear_has_queries_file();
  return queries_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetricsTask::set_allocated_queries_file(::std::string* queries_file) {
  if (queries_file != NULL) {
    set_has_queries_file();
  } else {
    clear_has_queries_file();
  }
  queries_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queries_file);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.MetricsTask.queries_file)
}

// optional bool send_graphite = 9;
inline bool MetricsTask::has_send_graphite() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MetricsTask::set_has_send_graphite() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MetricsTask::clear_has_send_graphite() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MetricsTask::clear_send_graphite() {
  send_graphite_ = false;
  clear_has_send_graphite();
}
inline bool MetricsTask::send_graphite() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsTask.send_graphite)
  return send_graphite_;
}
inline void MetricsTask::set_send_graphite(bool value) {
  set_has_send_graphite();
  send_graphite_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricsTask.send_graphite)
}

// -------------------------------------------------------------------

// MetricsMetaTask

// repeated .ru.mail.go.webbase.interleaving.MetricsTask metrics = 1;
inline int MetricsMetaTask::metrics_size() const {
  return metrics_.size();
}
inline void MetricsMetaTask::clear_metrics() {
  metrics_.Clear();
}
inline const ::ru::mail::go::webbase::interleaving::MetricsTask& MetricsMetaTask::metrics(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsMetaTask.metrics)
  return metrics_.Get(index);
}
inline ::ru::mail::go::webbase::interleaving::MetricsTask* MetricsMetaTask::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.MetricsMetaTask.metrics)
  return metrics_.Mutable(index);
}
inline ::ru::mail::go::webbase::interleaving::MetricsTask* MetricsMetaTask::add_metrics() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.MetricsMetaTask.metrics)
  return metrics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::MetricsTask >*
MetricsMetaTask::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.MetricsMetaTask.metrics)
  return &metrics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::MetricsTask >&
MetricsMetaTask::metrics() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.MetricsMetaTask.metrics)
  return metrics_;
}

// -------------------------------------------------------------------

// MetricResult

// required int32 id = 1;
inline bool MetricResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetricResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetricResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetricResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MetricResult::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.id)
  return id_;
}
inline void MetricResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.id)
}

// required float value = 4;
inline bool MetricResult::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetricResult::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetricResult::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetricResult::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float MetricResult::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.value)
  return value_;
}
inline void MetricResult::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.value)
}

// required float confidence_max = 5;
inline bool MetricResult::has_confidence_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MetricResult::set_has_confidence_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MetricResult::clear_has_confidence_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MetricResult::clear_confidence_max() {
  confidence_max_ = 0;
  clear_has_confidence_max();
}
inline float MetricResult::confidence_max() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.confidence_max)
  return confidence_max_;
}
inline void MetricResult::set_confidence_max(float value) {
  set_has_confidence_max();
  confidence_max_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.confidence_max)
}

// required float confidence_min = 6;
inline bool MetricResult::has_confidence_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MetricResult::set_has_confidence_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MetricResult::clear_has_confidence_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MetricResult::clear_confidence_min() {
  confidence_min_ = 0;
  clear_has_confidence_min();
}
inline float MetricResult::confidence_min() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.confidence_min)
  return confidence_min_;
}
inline void MetricResult::set_confidence_min(float value) {
  set_has_confidence_min();
  confidence_min_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.confidence_min)
}

// required uint32 events_number = 7;
inline bool MetricResult::has_events_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MetricResult::set_has_events_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MetricResult::clear_has_events_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MetricResult::clear_events_number() {
  events_number_ = 0u;
  clear_has_events_number();
}
inline ::google::protobuf::uint32 MetricResult::events_number() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.events_number)
  return events_number_;
}
inline void MetricResult::set_events_number(::google::protobuf::uint32 value) {
  set_has_events_number();
  events_number_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.events_number)
}

// required float reliability = 8;
inline bool MetricResult::has_reliability() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MetricResult::set_has_reliability() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MetricResult::clear_has_reliability() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MetricResult::clear_reliability() {
  reliability_ = 0;
  clear_has_reliability();
}
inline float MetricResult::reliability() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.reliability)
  return reliability_;
}
inline void MetricResult::set_reliability(float value) {
  set_has_reliability();
  reliability_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.reliability)
}

// optional float probability_A_better = 9;
inline bool MetricResult::has_probability_a_better() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MetricResult::set_has_probability_a_better() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MetricResult::clear_has_probability_a_better() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MetricResult::clear_probability_a_better() {
  probability_a_better_ = 0;
  clear_has_probability_a_better();
}
inline float MetricResult::probability_a_better() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.probability_A_better)
  return probability_a_better_;
}
inline void MetricResult::set_probability_a_better(float value) {
  set_has_probability_a_better();
  probability_a_better_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.probability_A_better)
}

// optional float probability_B_better = 10;
inline bool MetricResult::has_probability_b_better() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MetricResult::set_has_probability_b_better() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MetricResult::clear_has_probability_b_better() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MetricResult::clear_probability_b_better() {
  probability_b_better_ = 0;
  clear_has_probability_b_better();
}
inline float MetricResult::probability_b_better() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.probability_B_better)
  return probability_b_better_;
}
inline void MetricResult::set_probability_b_better(float value) {
  set_has_probability_b_better();
  probability_b_better_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.probability_B_better)
}

// optional uint32 a_wins = 11;
inline bool MetricResult::has_a_wins() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MetricResult::set_has_a_wins() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MetricResult::clear_has_a_wins() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MetricResult::clear_a_wins() {
  a_wins_ = 0u;
  clear_has_a_wins();
}
inline ::google::protobuf::uint32 MetricResult::a_wins() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.a_wins)
  return a_wins_;
}
inline void MetricResult::set_a_wins(::google::protobuf::uint32 value) {
  set_has_a_wins();
  a_wins_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.a_wins)
}

// optional uint32 b_wins = 12;
inline bool MetricResult::has_b_wins() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MetricResult::set_has_b_wins() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MetricResult::clear_has_b_wins() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MetricResult::clear_b_wins() {
  b_wins_ = 0u;
  clear_has_b_wins();
}
inline ::google::protobuf::uint32 MetricResult::b_wins() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.b_wins)
  return b_wins_;
}
inline void MetricResult::set_b_wins(::google::protobuf::uint32 value) {
  set_has_b_wins();
  b_wins_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.b_wins)
}

// optional uint32 no_clicks = 13;
inline bool MetricResult::has_no_clicks() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MetricResult::set_has_no_clicks() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MetricResult::clear_has_no_clicks() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MetricResult::clear_no_clicks() {
  no_clicks_ = 0u;
  clear_has_no_clicks();
}
inline ::google::protobuf::uint32 MetricResult::no_clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricResult.no_clicks)
  return no_clicks_;
}
inline void MetricResult::set_no_clicks(::google::protobuf::uint32 value) {
  set_has_no_clicks();
  no_clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.MetricResult.no_clicks)
}

// -------------------------------------------------------------------

// MetricsResults

// repeated .ru.mail.go.webbase.interleaving.MetricResult results = 1;
inline int MetricsResults::results_size() const {
  return results_.size();
}
inline void MetricsResults::clear_results() {
  results_.Clear();
}
inline const ::ru::mail::go::webbase::interleaving::MetricResult& MetricsResults::results(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.MetricsResults.results)
  return results_.Get(index);
}
inline ::ru::mail::go::webbase::interleaving::MetricResult* MetricsResults::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.MetricsResults.results)
  return results_.Mutable(index);
}
inline ::ru::mail::go::webbase::interleaving::MetricResult* MetricsResults::add_results() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.MetricsResults.results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::MetricResult >*
MetricsResults::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.MetricsResults.results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::MetricResult >&
MetricsResults::results() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.MetricsResults.results)
  return results_;
}

// -------------------------------------------------------------------

// DumpTask

// required uint32 id = 1;
inline bool DumpTask::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DumpTask::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DumpTask::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DumpTask::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 DumpTask::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.id)
  return id_;
}
inline void DumpTask::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.id)
}

// required uint32 experiment_id = 2;
inline bool DumpTask::has_experiment_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DumpTask::set_has_experiment_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DumpTask::clear_has_experiment_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DumpTask::clear_experiment_id() {
  experiment_id_ = 0u;
  clear_has_experiment_id();
}
inline ::google::protobuf::uint32 DumpTask::experiment_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.experiment_id)
  return experiment_id_;
}
inline void DumpTask::set_experiment_id(::google::protobuf::uint32 value) {
  set_has_experiment_id();
  experiment_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.experiment_id)
}

// required uint64 start_time = 4;
inline bool DumpTask::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DumpTask::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DumpTask::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DumpTask::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::uint64 DumpTask::start_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.start_time)
  return start_time_;
}
inline void DumpTask::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.start_time)
}

// required uint64 stop_time = 5;
inline bool DumpTask::has_stop_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DumpTask::set_has_stop_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DumpTask::clear_has_stop_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DumpTask::clear_stop_time() {
  stop_time_ = GOOGLE_ULONGLONG(0);
  clear_has_stop_time();
}
inline ::google::protobuf::uint64 DumpTask::stop_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.stop_time)
  return stop_time_;
}
inline void DumpTask::set_stop_time(::google::protobuf::uint64 value) {
  set_has_stop_time();
  stop_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.stop_time)
}

// optional uint32 max_logs = 6 [default = 10000];
inline bool DumpTask::has_max_logs() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DumpTask::set_has_max_logs() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DumpTask::clear_has_max_logs() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DumpTask::clear_max_logs() {
  max_logs_ = 10000u;
  clear_has_max_logs();
}
inline ::google::protobuf::uint32 DumpTask::max_logs() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.max_logs)
  return max_logs_;
}
inline void DumpTask::set_max_logs(::google::protobuf::uint32 value) {
  set_has_max_logs();
  max_logs_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.max_logs)
}

// optional string filter_rx = 7;
inline bool DumpTask::has_filter_rx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DumpTask::set_has_filter_rx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DumpTask::clear_has_filter_rx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DumpTask::clear_filter_rx() {
  filter_rx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter_rx();
}
inline const ::std::string& DumpTask::filter_rx() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.filter_rx)
  return filter_rx_.GetNoArena();
}
inline void DumpTask::set_filter_rx(const ::std::string& value) {
  set_has_filter_rx();
  filter_rx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.filter_rx)
}
#if LANG_CXX11
inline void DumpTask::set_filter_rx(::std::string&& value) {
  set_has_filter_rx();
  filter_rx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.DumpTask.filter_rx)
}
#endif
inline void DumpTask::set_filter_rx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filter_rx();
  filter_rx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.DumpTask.filter_rx)
}
inline void DumpTask::set_filter_rx(const char* value, size_t size) {
  set_has_filter_rx();
  filter_rx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.DumpTask.filter_rx)
}
inline ::std::string* DumpTask::mutable_filter_rx() {
  set_has_filter_rx();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.DumpTask.filter_rx)
  return filter_rx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpTask::release_filter_rx() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.DumpTask.filter_rx)
  clear_has_filter_rx();
  return filter_rx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpTask::set_allocated_filter_rx(::std::string* filter_rx) {
  if (filter_rx != NULL) {
    set_has_filter_rx();
  } else {
    clear_has_filter_rx();
  }
  filter_rx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter_rx);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.DumpTask.filter_rx)
}

// optional string experiment_type = 8;
inline bool DumpTask::has_experiment_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DumpTask::set_has_experiment_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DumpTask::clear_has_experiment_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DumpTask::clear_experiment_type() {
  experiment_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_experiment_type();
}
inline const ::std::string& DumpTask::experiment_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.experiment_type)
  return experiment_type_.GetNoArena();
}
inline void DumpTask::set_experiment_type(const ::std::string& value) {
  set_has_experiment_type();
  experiment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.experiment_type)
}
#if LANG_CXX11
inline void DumpTask::set_experiment_type(::std::string&& value) {
  set_has_experiment_type();
  experiment_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.DumpTask.experiment_type)
}
#endif
inline void DumpTask::set_experiment_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_experiment_type();
  experiment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.DumpTask.experiment_type)
}
inline void DumpTask::set_experiment_type(const char* value, size_t size) {
  set_has_experiment_type();
  experiment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.DumpTask.experiment_type)
}
inline ::std::string* DumpTask::mutable_experiment_type() {
  set_has_experiment_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.DumpTask.experiment_type)
  return experiment_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpTask::release_experiment_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.DumpTask.experiment_type)
  clear_has_experiment_type();
  return experiment_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpTask::set_allocated_experiment_type(::std::string* experiment_type) {
  if (experiment_type != NULL) {
    set_has_experiment_type();
  } else {
    clear_has_experiment_type();
  }
  experiment_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), experiment_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.DumpTask.experiment_type)
}

// optional bool with_snippets = 9;
inline bool DumpTask::has_with_snippets() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DumpTask::set_has_with_snippets() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DumpTask::clear_has_with_snippets() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DumpTask::clear_with_snippets() {
  with_snippets_ = false;
  clear_has_with_snippets();
}
inline bool DumpTask::with_snippets() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.with_snippets)
  return with_snippets_;
}
inline void DumpTask::set_with_snippets(bool value) {
  set_has_with_snippets();
  with_snippets_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.with_snippets)
}

// optional string metric_type = 10;
inline bool DumpTask::has_metric_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DumpTask::set_has_metric_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DumpTask::clear_has_metric_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DumpTask::clear_metric_type() {
  metric_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metric_type();
}
inline const ::std::string& DumpTask::metric_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.metric_type)
  return metric_type_.GetNoArena();
}
inline void DumpTask::set_metric_type(const ::std::string& value) {
  set_has_metric_type();
  metric_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.metric_type)
}
#if LANG_CXX11
inline void DumpTask::set_metric_type(::std::string&& value) {
  set_has_metric_type();
  metric_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.DumpTask.metric_type)
}
#endif
inline void DumpTask::set_metric_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metric_type();
  metric_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.DumpTask.metric_type)
}
inline void DumpTask::set_metric_type(const char* value, size_t size) {
  set_has_metric_type();
  metric_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.DumpTask.metric_type)
}
inline ::std::string* DumpTask::mutable_metric_type() {
  set_has_metric_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.DumpTask.metric_type)
  return metric_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpTask::release_metric_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.DumpTask.metric_type)
  clear_has_metric_type();
  return metric_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpTask::set_allocated_metric_type(::std::string* metric_type) {
  if (metric_type != NULL) {
    set_has_metric_type();
  } else {
    clear_has_metric_type();
  }
  metric_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metric_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.DumpTask.metric_type)
}

// optional bool draw = 11;
inline bool DumpTask::has_draw() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DumpTask::set_has_draw() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DumpTask::clear_has_draw() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DumpTask::clear_draw() {
  draw_ = false;
  clear_has_draw();
}
inline bool DumpTask::draw() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.draw)
  return draw_;
}
inline void DumpTask::set_draw(bool value) {
  set_has_draw();
  draw_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.draw)
}

// optional bool noclicks = 12;
inline bool DumpTask::has_noclicks() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DumpTask::set_has_noclicks() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DumpTask::clear_has_noclicks() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DumpTask::clear_noclicks() {
  noclicks_ = false;
  clear_has_noclicks();
}
inline bool DumpTask::noclicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTask.noclicks)
  return noclicks_;
}
inline void DumpTask::set_noclicks(bool value) {
  set_has_noclicks();
  noclicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpTask.noclicks)
}

// -------------------------------------------------------------------

// DumpTasks

// repeated .ru.mail.go.webbase.interleaving.DumpTask tasks = 1;
inline int DumpTasks::tasks_size() const {
  return tasks_.size();
}
inline void DumpTasks::clear_tasks() {
  tasks_.Clear();
}
inline const ::ru::mail::go::webbase::interleaving::DumpTask& DumpTasks::tasks(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpTasks.tasks)
  return tasks_.Get(index);
}
inline ::ru::mail::go::webbase::interleaving::DumpTask* DumpTasks::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.DumpTasks.tasks)
  return tasks_.Mutable(index);
}
inline ::ru::mail::go::webbase::interleaving::DumpTask* DumpTasks::add_tasks() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.DumpTasks.tasks)
  return tasks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpTask >*
DumpTasks::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.DumpTasks.tasks)
  return &tasks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpTask >&
DumpTasks::tasks() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.DumpTasks.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// DumpResult

// required uint32 id = 1;
inline bool DumpResult::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DumpResult::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DumpResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DumpResult::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 DumpResult::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpResult.id)
  return id_;
}
inline void DumpResult::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpResult.id)
}

// required string dump_url = 2;
inline bool DumpResult::has_dump_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DumpResult::set_has_dump_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DumpResult::clear_has_dump_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DumpResult::clear_dump_url() {
  dump_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dump_url();
}
inline const ::std::string& DumpResult::dump_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpResult.dump_url)
  return dump_url_.GetNoArena();
}
inline void DumpResult::set_dump_url(const ::std::string& value) {
  set_has_dump_url();
  dump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpResult.dump_url)
}
#if LANG_CXX11
inline void DumpResult::set_dump_url(::std::string&& value) {
  set_has_dump_url();
  dump_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.DumpResult.dump_url)
}
#endif
inline void DumpResult::set_dump_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dump_url();
  dump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.DumpResult.dump_url)
}
inline void DumpResult::set_dump_url(const char* value, size_t size) {
  set_has_dump_url();
  dump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.DumpResult.dump_url)
}
inline ::std::string* DumpResult::mutable_dump_url() {
  set_has_dump_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.DumpResult.dump_url)
  return dump_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpResult::release_dump_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.DumpResult.dump_url)
  clear_has_dump_url();
  return dump_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpResult::set_allocated_dump_url(::std::string* dump_url) {
  if (dump_url != NULL) {
    set_has_dump_url();
  } else {
    clear_has_dump_url();
  }
  dump_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dump_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.DumpResult.dump_url)
}

// -------------------------------------------------------------------

// DumpResults

// repeated .ru.mail.go.webbase.interleaving.DumpResult results = 1;
inline int DumpResults::results_size() const {
  return results_.size();
}
inline void DumpResults::clear_results() {
  results_.Clear();
}
inline const ::ru::mail::go::webbase::interleaving::DumpResult& DumpResults::results(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpResults.results)
  return results_.Get(index);
}
inline ::ru::mail::go::webbase::interleaving::DumpResult* DumpResults::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.DumpResults.results)
  return results_.Mutable(index);
}
inline ::ru::mail::go::webbase::interleaving::DumpResult* DumpResults::add_results() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.DumpResults.results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpResult >*
DumpResults::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.DumpResults.results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpResult >&
DumpResults::results() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.DumpResults.results)
  return results_;
}

// -------------------------------------------------------------------

// DumpProgress

// required uint32 id = 1;
inline bool DumpProgress::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DumpProgress::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DumpProgress::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DumpProgress::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 DumpProgress::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpProgress.id)
  return id_;
}
inline void DumpProgress::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpProgress.id)
}

// required uint32 progress = 2;
inline bool DumpProgress::has_progress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DumpProgress::set_has_progress() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DumpProgress::clear_has_progress() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DumpProgress::clear_progress() {
  progress_ = 0u;
  clear_has_progress();
}
inline ::google::protobuf::uint32 DumpProgress::progress() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpProgress.progress)
  return progress_;
}
inline void DumpProgress::set_progress(::google::protobuf::uint32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DumpProgress.progress)
}

// -------------------------------------------------------------------

// DumpsProgress

// repeated .ru.mail.go.webbase.interleaving.DumpProgress progress = 1;
inline int DumpsProgress::progress_size() const {
  return progress_.size();
}
inline void DumpsProgress::clear_progress() {
  progress_.Clear();
}
inline const ::ru::mail::go::webbase::interleaving::DumpProgress& DumpsProgress::progress(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DumpsProgress.progress)
  return progress_.Get(index);
}
inline ::ru::mail::go::webbase::interleaving::DumpProgress* DumpsProgress::mutable_progress(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.DumpsProgress.progress)
  return progress_.Mutable(index);
}
inline ::ru::mail::go::webbase::interleaving::DumpProgress* DumpsProgress::add_progress() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.DumpsProgress.progress)
  return progress_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpProgress >*
DumpsProgress::mutable_progress() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.DumpsProgress.progress)
  return &progress_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::DumpProgress >&
DumpsProgress::progress() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.DumpsProgress.progress)
  return progress_;
}

// -------------------------------------------------------------------

// QueryLog

// required uint64 timestamp = 1;
inline bool QueryLog::has_timestamp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void QueryLog::set_has_timestamp() {
  _has_bits_[0] |= 0x00008000u;
}
inline void QueryLog::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void QueryLog::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 QueryLog::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.timestamp)
  return timestamp_;
}
inline void QueryLog::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.timestamp)
}

// required string UID = 2;
inline bool QueryLog::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryLog::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryLog::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryLog::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
inline const ::std::string& QueryLog::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.UID)
  return uid_.GetNoArena();
}
inline void QueryLog::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.UID)
}
#if LANG_CXX11
inline void QueryLog::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.UID)
}
#endif
inline void QueryLog::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.UID)
}
inline void QueryLog::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.UID)
}
inline ::std::string* QueryLog::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.UID)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryLog::release_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.UID)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryLog::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.UID)
}

// required uint32 EID = 3;
inline bool QueryLog::has_eid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void QueryLog::set_has_eid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void QueryLog::clear_has_eid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void QueryLog::clear_eid() {
  eid_ = 0u;
  clear_has_eid();
}
inline ::google::protobuf::uint32 QueryLog::eid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.EID)
  return eid_;
}
inline void QueryLog::set_eid(::google::protobuf::uint32 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.EID)
}

// required .ru.mail.go.webbase.interleaving.ShowedDocuments showedDocuments = 4;
inline bool QueryLog::has_showeddocuments() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void QueryLog::set_has_showeddocuments() {
  _has_bits_[0] |= 0x00000800u;
}
inline void QueryLog::clear_has_showeddocuments() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void QueryLog::clear_showeddocuments() {
  if (showeddocuments_ != NULL) showeddocuments_->::ru::mail::go::webbase::interleaving::ShowedDocuments::Clear();
  clear_has_showeddocuments();
}
inline const ::ru::mail::go::webbase::interleaving::ShowedDocuments& QueryLog::showeddocuments() const {
  const ::ru::mail::go::webbase::interleaving::ShowedDocuments* p = showeddocuments_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.showedDocuments)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::interleaving::ShowedDocuments*>(
      &::ru::mail::go::webbase::interleaving::_ShowedDocuments_default_instance_);
}
inline ::ru::mail::go::webbase::interleaving::ShowedDocuments* QueryLog::mutable_showeddocuments() {
  set_has_showeddocuments();
  if (showeddocuments_ == NULL) {
    showeddocuments_ = new ::ru::mail::go::webbase::interleaving::ShowedDocuments;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.showedDocuments)
  return showeddocuments_;
}
inline ::ru::mail::go::webbase::interleaving::ShowedDocuments* QueryLog::release_showeddocuments() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.showedDocuments)
  clear_has_showeddocuments();
  ::ru::mail::go::webbase::interleaving::ShowedDocuments* temp = showeddocuments_;
  showeddocuments_ = NULL;
  return temp;
}
inline void QueryLog::set_allocated_showeddocuments(::ru::mail::go::webbase::interleaving::ShowedDocuments* showeddocuments) {
  delete showeddocuments_;
  showeddocuments_ = showeddocuments;
  if (showeddocuments) {
    set_has_showeddocuments();
  } else {
    clear_has_showeddocuments();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.showedDocuments)
}

// repeated .ru.mail.go.webbase.interleaving.Click clicks = 5;
inline int QueryLog::clicks_size() const {
  return clicks_.size();
}
inline void QueryLog::clear_clicks() {
  clicks_.Clear();
}
inline const ::ru::mail::go::webbase::interleaving::Click& QueryLog::clicks(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.clicks)
  return clicks_.Get(index);
}
inline ::ru::mail::go::webbase::interleaving::Click* QueryLog::mutable_clicks(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.clicks)
  return clicks_.Mutable(index);
}
inline ::ru::mail::go::webbase::interleaving::Click* QueryLog::add_clicks() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.QueryLog.clicks)
  return clicks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Click >*
QueryLog::mutable_clicks() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.QueryLog.clicks)
  return &clicks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Click >&
QueryLog::clicks() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.QueryLog.clicks)
  return clicks_;
}

// optional string query = 6;
inline bool QueryLog::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryLog::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryLog::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryLog::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& QueryLog::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.query)
  return query_.GetNoArena();
}
inline void QueryLog::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.query)
}
#if LANG_CXX11
inline void QueryLog::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.query)
}
#endif
inline void QueryLog::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.query)
}
inline void QueryLog::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.query)
}
inline ::std::string* QueryLog::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryLog::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryLog::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.query)
}

// optional string rid = 7;
inline bool QueryLog::has_rid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryLog::set_has_rid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryLog::clear_has_rid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryLog::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rid();
}
inline const ::std::string& QueryLog::rid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.rid)
  return rid_.GetNoArena();
}
inline void QueryLog::set_rid(const ::std::string& value) {
  set_has_rid();
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.rid)
}
#if LANG_CXX11
inline void QueryLog::set_rid(::std::string&& value) {
  set_has_rid();
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.rid)
}
#endif
inline void QueryLog::set_rid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rid();
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.rid)
}
inline void QueryLog::set_rid(const char* value, size_t size) {
  set_has_rid();
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.rid)
}
inline ::std::string* QueryLog::mutable_rid() {
  set_has_rid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryLog::release_rid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.rid)
  clear_has_rid();
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryLog::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    set_has_rid();
  } else {
    clear_has_rid();
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.rid)
}

// optional string queryId = 8;
inline bool QueryLog::has_queryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryLog::set_has_queryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryLog::clear_has_queryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryLog::clear_queryid() {
  queryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queryid();
}
inline const ::std::string& QueryLog::queryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.queryId)
  return queryid_.GetNoArena();
}
inline void QueryLog::set_queryid(const ::std::string& value) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.queryId)
}
#if LANG_CXX11
inline void QueryLog::set_queryid(::std::string&& value) {
  set_has_queryid();
  queryid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.queryId)
}
#endif
inline void QueryLog::set_queryid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.queryId)
}
inline void QueryLog::set_queryid(const char* value, size_t size) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.queryId)
}
inline ::std::string* QueryLog::mutable_queryid() {
  set_has_queryid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.queryId)
  return queryid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryLog::release_queryid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.queryId)
  clear_has_queryid();
  return queryid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryLog::set_allocated_queryid(::std::string* queryid) {
  if (queryid != NULL) {
    set_has_queryid();
  } else {
    clear_has_queryid();
  }
  queryid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queryid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.queryId)
}

// optional string rawGekkoLog = 9;
inline bool QueryLog::has_rawgekkolog() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryLog::set_has_rawgekkolog() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryLog::clear_has_rawgekkolog() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryLog::clear_rawgekkolog() {
  rawgekkolog_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rawgekkolog();
}
inline const ::std::string& QueryLog::rawgekkolog() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog)
  return rawgekkolog_.GetNoArena();
}
inline void QueryLog::set_rawgekkolog(const ::std::string& value) {
  set_has_rawgekkolog();
  rawgekkolog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog)
}
#if LANG_CXX11
inline void QueryLog::set_rawgekkolog(::std::string&& value) {
  set_has_rawgekkolog();
  rawgekkolog_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog)
}
#endif
inline void QueryLog::set_rawgekkolog(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rawgekkolog();
  rawgekkolog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog)
}
inline void QueryLog::set_rawgekkolog(const char* value, size_t size) {
  set_has_rawgekkolog();
  rawgekkolog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog)
}
inline ::std::string* QueryLog::mutable_rawgekkolog() {
  set_has_rawgekkolog();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog)
  return rawgekkolog_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryLog::release_rawgekkolog() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog)
  clear_has_rawgekkolog();
  return rawgekkolog_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryLog::set_allocated_rawgekkolog(::std::string* rawgekkolog) {
  if (rawgekkolog != NULL) {
    set_has_rawgekkolog();
  } else {
    clear_has_rawgekkolog();
  }
  rawgekkolog_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rawgekkolog);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.rawGekkoLog)
}

// optional float replyQuality = 10;
inline bool QueryLog::has_replyquality() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void QueryLog::set_has_replyquality() {
  _has_bits_[0] |= 0x00020000u;
}
inline void QueryLog::clear_has_replyquality() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void QueryLog::clear_replyquality() {
  replyquality_ = 0;
  clear_has_replyquality();
}
inline float QueryLog::replyquality() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.replyQuality)
  return replyquality_;
}
inline void QueryLog::set_replyquality(float value) {
  set_has_replyquality();
  replyquality_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.replyQuality)
}

// optional string essrSourceType = 11;
inline bool QueryLog::has_essrsourcetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryLog::set_has_essrsourcetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryLog::clear_has_essrsourcetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryLog::clear_essrsourcetype() {
  essrsourcetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_essrsourcetype();
}
inline const ::std::string& QueryLog::essrsourcetype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.essrSourceType)
  return essrsourcetype_.GetNoArena();
}
inline void QueryLog::set_essrsourcetype(const ::std::string& value) {
  set_has_essrsourcetype();
  essrsourcetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.essrSourceType)
}
#if LANG_CXX11
inline void QueryLog::set_essrsourcetype(::std::string&& value) {
  set_has_essrsourcetype();
  essrsourcetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.essrSourceType)
}
#endif
inline void QueryLog::set_essrsourcetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_essrsourcetype();
  essrsourcetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.essrSourceType)
}
inline void QueryLog::set_essrsourcetype(const char* value, size_t size) {
  set_has_essrsourcetype();
  essrsourcetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.essrSourceType)
}
inline ::std::string* QueryLog::mutable_essrsourcetype() {
  set_has_essrsourcetype();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.essrSourceType)
  return essrsourcetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryLog::release_essrsourcetype() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.essrSourceType)
  clear_has_essrsourcetype();
  return essrsourcetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryLog::set_allocated_essrsourcetype(::std::string* essrsourcetype) {
  if (essrsourcetype != NULL) {
    set_has_essrsourcetype();
  } else {
    clear_has_essrsourcetype();
  }
  essrsourcetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), essrsourcetype);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.essrSourceType)
}

// optional string original_query = 12;
inline bool QueryLog::has_original_query() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryLog::set_has_original_query() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryLog::clear_has_original_query() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryLog::clear_original_query() {
  original_query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_original_query();
}
inline const ::std::string& QueryLog::original_query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.original_query)
  return original_query_.GetNoArena();
}
inline void QueryLog::set_original_query(const ::std::string& value) {
  set_has_original_query();
  original_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.original_query)
}
#if LANG_CXX11
inline void QueryLog::set_original_query(::std::string&& value) {
  set_has_original_query();
  original_query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.original_query)
}
#endif
inline void QueryLog::set_original_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_original_query();
  original_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.original_query)
}
inline void QueryLog::set_original_query(const char* value, size_t size) {
  set_has_original_query();
  original_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.original_query)
}
inline ::std::string* QueryLog::mutable_original_query() {
  set_has_original_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.original_query)
  return original_query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryLog::release_original_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.original_query)
  clear_has_original_query();
  return original_query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryLog::set_allocated_original_query(::std::string* original_query) {
  if (original_query != NULL) {
    set_has_original_query();
  } else {
    clear_has_original_query();
  }
  original_query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.original_query)
}

// optional string spc_json = 13;
inline bool QueryLog::has_spc_json() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QueryLog::set_has_spc_json() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QueryLog::clear_has_spc_json() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QueryLog::clear_spc_json() {
  spc_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_spc_json();
}
inline const ::std::string& QueryLog::spc_json() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.spc_json)
  return spc_json_.GetNoArena();
}
inline void QueryLog::set_spc_json(const ::std::string& value) {
  set_has_spc_json();
  spc_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.spc_json)
}
#if LANG_CXX11
inline void QueryLog::set_spc_json(::std::string&& value) {
  set_has_spc_json();
  spc_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.spc_json)
}
#endif
inline void QueryLog::set_spc_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_spc_json();
  spc_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.spc_json)
}
inline void QueryLog::set_spc_json(const char* value, size_t size) {
  set_has_spc_json();
  spc_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.spc_json)
}
inline ::std::string* QueryLog::mutable_spc_json() {
  set_has_spc_json();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.spc_json)
  return spc_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryLog::release_spc_json() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.spc_json)
  clear_has_spc_json();
  return spc_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryLog::set_allocated_spc_json(::std::string* spc_json) {
  if (spc_json != NULL) {
    set_has_spc_json();
  } else {
    clear_has_spc_json();
  }
  spc_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spc_json);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.spc_json)
}

// optional float webQuality = 14 [default = 1];
inline bool QueryLog::has_webquality() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void QueryLog::set_has_webquality() {
  _has_bits_[0] |= 0x00040000u;
}
inline void QueryLog::clear_has_webquality() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void QueryLog::clear_webquality() {
  webquality_ = 1;
  clear_has_webquality();
}
inline float QueryLog::webquality() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.webQuality)
  return webquality_;
}
inline void QueryLog::set_webquality(float value) {
  set_has_webquality();
  webquality_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.webQuality)
}

// repeated .ru.mail.go.webbase.interleaving.Action actions = 15;
inline int QueryLog::actions_size() const {
  return actions_.size();
}
inline void QueryLog::clear_actions() {
  actions_.Clear();
}
inline const ::ru::mail::go::webbase::interleaving::Action& QueryLog::actions(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.actions)
  return actions_.Get(index);
}
inline ::ru::mail::go::webbase::interleaving::Action* QueryLog::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.actions)
  return actions_.Mutable(index);
}
inline ::ru::mail::go::webbase::interleaving::Action* QueryLog::add_actions() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.QueryLog.actions)
  return actions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Action >*
QueryLog::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.QueryLog.actions)
  return &actions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Action >&
QueryLog::actions() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.QueryLog.actions)
  return actions_;
}

// repeated .ru.mail.go.webbase.interleaving.Qs qs = 16;
inline int QueryLog::qs_size() const {
  return qs_.size();
}
inline void QueryLog::clear_qs() {
  qs_.Clear();
}
inline const ::ru::mail::go::webbase::interleaving::Qs& QueryLog::qs(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.qs)
  return qs_.Get(index);
}
inline ::ru::mail::go::webbase::interleaving::Qs* QueryLog::mutable_qs(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.qs)
  return qs_.Mutable(index);
}
inline ::ru::mail::go::webbase::interleaving::Qs* QueryLog::add_qs() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.QueryLog.qs)
  return qs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Qs >*
QueryLog::mutable_qs() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.QueryLog.qs)
  return &qs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Qs >&
QueryLog::qs() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.QueryLog.qs)
  return qs_;
}

// optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavig = 17;
inline bool QueryLog::has_suggnavig() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void QueryLog::set_has_suggnavig() {
  _has_bits_[0] |= 0x00001000u;
}
inline void QueryLog::clear_has_suggnavig() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void QueryLog::clear_suggnavig() {
  if (suggnavig_ != NULL) suggnavig_->::ru::mail::go::webbase::interleaving::SuggNavig::Clear();
  clear_has_suggnavig();
}
inline const ::ru::mail::go::webbase::interleaving::SuggNavig& QueryLog::suggnavig() const {
  const ::ru::mail::go::webbase::interleaving::SuggNavig* p = suggnavig_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.suggNavig)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::interleaving::SuggNavig*>(
      &::ru::mail::go::webbase::interleaving::_SuggNavig_default_instance_);
}
inline ::ru::mail::go::webbase::interleaving::SuggNavig* QueryLog::mutable_suggnavig() {
  set_has_suggnavig();
  if (suggnavig_ == NULL) {
    suggnavig_ = new ::ru::mail::go::webbase::interleaving::SuggNavig;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.suggNavig)
  return suggnavig_;
}
inline ::ru::mail::go::webbase::interleaving::SuggNavig* QueryLog::release_suggnavig() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.suggNavig)
  clear_has_suggnavig();
  ::ru::mail::go::webbase::interleaving::SuggNavig* temp = suggnavig_;
  suggnavig_ = NULL;
  return temp;
}
inline void QueryLog::set_allocated_suggnavig(::ru::mail::go::webbase::interleaving::SuggNavig* suggnavig) {
  delete suggnavig_;
  suggnavig_ = suggnavig;
  if (suggnavig) {
    set_has_suggnavig();
  } else {
    clear_has_suggnavig();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.suggNavig)
}

// optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavigA = 18;
inline bool QueryLog::has_suggnaviga() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void QueryLog::set_has_suggnaviga() {
  _has_bits_[0] |= 0x00002000u;
}
inline void QueryLog::clear_has_suggnaviga() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void QueryLog::clear_suggnaviga() {
  if (suggnaviga_ != NULL) suggnaviga_->::ru::mail::go::webbase::interleaving::SuggNavig::Clear();
  clear_has_suggnaviga();
}
inline const ::ru::mail::go::webbase::interleaving::SuggNavig& QueryLog::suggnaviga() const {
  const ::ru::mail::go::webbase::interleaving::SuggNavig* p = suggnaviga_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.suggNavigA)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::interleaving::SuggNavig*>(
      &::ru::mail::go::webbase::interleaving::_SuggNavig_default_instance_);
}
inline ::ru::mail::go::webbase::interleaving::SuggNavig* QueryLog::mutable_suggnaviga() {
  set_has_suggnaviga();
  if (suggnaviga_ == NULL) {
    suggnaviga_ = new ::ru::mail::go::webbase::interleaving::SuggNavig;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.suggNavigA)
  return suggnaviga_;
}
inline ::ru::mail::go::webbase::interleaving::SuggNavig* QueryLog::release_suggnaviga() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.suggNavigA)
  clear_has_suggnaviga();
  ::ru::mail::go::webbase::interleaving::SuggNavig* temp = suggnaviga_;
  suggnaviga_ = NULL;
  return temp;
}
inline void QueryLog::set_allocated_suggnaviga(::ru::mail::go::webbase::interleaving::SuggNavig* suggnaviga) {
  delete suggnaviga_;
  suggnaviga_ = suggnaviga;
  if (suggnaviga) {
    set_has_suggnaviga();
  } else {
    clear_has_suggnaviga();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.suggNavigA)
}

// optional .ru.mail.go.webbase.interleaving.SuggNavig suggNavigB = 19;
inline bool QueryLog::has_suggnavigb() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void QueryLog::set_has_suggnavigb() {
  _has_bits_[0] |= 0x00004000u;
}
inline void QueryLog::clear_has_suggnavigb() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void QueryLog::clear_suggnavigb() {
  if (suggnavigb_ != NULL) suggnavigb_->::ru::mail::go::webbase::interleaving::SuggNavig::Clear();
  clear_has_suggnavigb();
}
inline const ::ru::mail::go::webbase::interleaving::SuggNavig& QueryLog::suggnavigb() const {
  const ::ru::mail::go::webbase::interleaving::SuggNavig* p = suggnavigb_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.suggNavigB)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::interleaving::SuggNavig*>(
      &::ru::mail::go::webbase::interleaving::_SuggNavig_default_instance_);
}
inline ::ru::mail::go::webbase::interleaving::SuggNavig* QueryLog::mutable_suggnavigb() {
  set_has_suggnavigb();
  if (suggnavigb_ == NULL) {
    suggnavigb_ = new ::ru::mail::go::webbase::interleaving::SuggNavig;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.suggNavigB)
  return suggnavigb_;
}
inline ::ru::mail::go::webbase::interleaving::SuggNavig* QueryLog::release_suggnavigb() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.suggNavigB)
  clear_has_suggnavigb();
  ::ru::mail::go::webbase::interleaving::SuggNavig* temp = suggnavigb_;
  suggnavigb_ = NULL;
  return temp;
}
inline void QueryLog::set_allocated_suggnavigb(::ru::mail::go::webbase::interleaving::SuggNavig* suggnavigb) {
  delete suggnavigb_;
  suggnavigb_ = suggnavigb;
  if (suggnavigb) {
    set_has_suggnavigb();
  } else {
    clear_has_suggnavigb();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.suggNavigB)
}

// optional string serp = 20;
inline bool QueryLog::has_serp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QueryLog::set_has_serp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QueryLog::clear_has_serp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QueryLog::clear_serp() {
  serp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serp();
}
inline const ::std::string& QueryLog::serp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.serp)
  return serp_.GetNoArena();
}
inline void QueryLog::set_serp(const ::std::string& value) {
  set_has_serp();
  serp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.serp)
}
#if LANG_CXX11
inline void QueryLog::set_serp(::std::string&& value) {
  set_has_serp();
  serp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.serp)
}
#endif
inline void QueryLog::set_serp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serp();
  serp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.serp)
}
inline void QueryLog::set_serp(const char* value, size_t size) {
  set_has_serp();
  serp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.serp)
}
inline ::std::string* QueryLog::mutable_serp() {
  set_has_serp();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.serp)
  return serp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryLog::release_serp() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.serp)
  clear_has_serp();
  return serp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryLog::set_allocated_serp(::std::string* serp) {
  if (serp != NULL) {
    set_has_serp();
  } else {
    clear_has_serp();
  }
  serp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serp);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.serp)
}

// repeated .ru.mail.go.webbase.interleaving.Play play = 21;
inline int QueryLog::play_size() const {
  return play_.size();
}
inline void QueryLog::clear_play() {
  play_.Clear();
}
inline const ::ru::mail::go::webbase::interleaving::Play& QueryLog::play(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.play)
  return play_.Get(index);
}
inline ::ru::mail::go::webbase::interleaving::Play* QueryLog::mutable_play(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.play)
  return play_.Mutable(index);
}
inline ::ru::mail::go::webbase::interleaving::Play* QueryLog::add_play() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.QueryLog.play)
  return play_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Play >*
QueryLog::mutable_play() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.QueryLog.play)
  return &play_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::Play >&
QueryLog::play() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.QueryLog.play)
  return play_;
}

// optional string experimentdData = 22;
inline bool QueryLog::has_experimentddata() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QueryLog::set_has_experimentddata() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QueryLog::clear_has_experimentddata() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QueryLog::clear_experimentddata() {
  experimentddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_experimentddata();
}
inline const ::std::string& QueryLog::experimentddata() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.experimentdData)
  return experimentddata_.GetNoArena();
}
inline void QueryLog::set_experimentddata(const ::std::string& value) {
  set_has_experimentddata();
  experimentddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.experimentdData)
}
#if LANG_CXX11
inline void QueryLog::set_experimentddata(::std::string&& value) {
  set_has_experimentddata();
  experimentddata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.experimentdData)
}
#endif
inline void QueryLog::set_experimentddata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_experimentddata();
  experimentddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.experimentdData)
}
inline void QueryLog::set_experimentddata(const char* value, size_t size) {
  set_has_experimentddata();
  experimentddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.experimentdData)
}
inline ::std::string* QueryLog::mutable_experimentddata() {
  set_has_experimentddata();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.experimentdData)
  return experimentddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryLog::release_experimentddata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.experimentdData)
  clear_has_experimentddata();
  return experimentddata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryLog::set_allocated_experimentddata(::std::string* experimentddata) {
  if (experimentddata != NULL) {
    set_has_experimentddata();
  } else {
    clear_has_experimentddata();
  }
  experimentddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), experimentddata);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.experimentdData)
}

// optional string use_whole_response = 23;
inline bool QueryLog::has_use_whole_response() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void QueryLog::set_has_use_whole_response() {
  _has_bits_[0] |= 0x00000400u;
}
inline void QueryLog::clear_has_use_whole_response() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void QueryLog::clear_use_whole_response() {
  use_whole_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_use_whole_response();
}
inline const ::std::string& QueryLog::use_whole_response() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.QueryLog.use_whole_response)
  return use_whole_response_.GetNoArena();
}
inline void QueryLog::set_use_whole_response(const ::std::string& value) {
  set_has_use_whole_response();
  use_whole_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.QueryLog.use_whole_response)
}
#if LANG_CXX11
inline void QueryLog::set_use_whole_response(::std::string&& value) {
  set_has_use_whole_response();
  use_whole_response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.QueryLog.use_whole_response)
}
#endif
inline void QueryLog::set_use_whole_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_use_whole_response();
  use_whole_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.QueryLog.use_whole_response)
}
inline void QueryLog::set_use_whole_response(const char* value, size_t size) {
  set_has_use_whole_response();
  use_whole_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.QueryLog.use_whole_response)
}
inline ::std::string* QueryLog::mutable_use_whole_response() {
  set_has_use_whole_response();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.QueryLog.use_whole_response)
  return use_whole_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryLog::release_use_whole_response() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.QueryLog.use_whole_response)
  clear_has_use_whole_response();
  return use_whole_response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryLog::set_allocated_use_whole_response(::std::string* use_whole_response) {
  if (use_whole_response != NULL) {
    set_has_use_whole_response();
  } else {
    clear_has_use_whole_response();
  }
  use_whole_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), use_whole_response);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.QueryLog.use_whole_response)
}

// -------------------------------------------------------------------

// ShowedDocuments

// repeated .ru.mail.go.webbase.interleaving.ShowedDocument showedDocuments = 1;
inline int ShowedDocuments::showeddocuments_size() const {
  return showeddocuments_.size();
}
inline void ShowedDocuments::clear_showeddocuments() {
  showeddocuments_.Clear();
}
inline const ::ru::mail::go::webbase::interleaving::ShowedDocument& ShowedDocuments::showeddocuments(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocuments.showedDocuments)
  return showeddocuments_.Get(index);
}
inline ::ru::mail::go::webbase::interleaving::ShowedDocument* ShowedDocuments::mutable_showeddocuments(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ShowedDocuments.showedDocuments)
  return showeddocuments_.Mutable(index);
}
inline ::ru::mail::go::webbase::interleaving::ShowedDocument* ShowedDocuments::add_showeddocuments() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.ShowedDocuments.showedDocuments)
  return showeddocuments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ShowedDocument >*
ShowedDocuments::mutable_showeddocuments() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.ShowedDocuments.showedDocuments)
  return &showeddocuments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::ShowedDocument >&
ShowedDocuments::showeddocuments() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.ShowedDocuments.showedDocuments)
  return showeddocuments_;
}

// -------------------------------------------------------------------

// ShowedDocument

// required bool showed_from_a = 1;
inline bool ShowedDocument::has_showed_from_a() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShowedDocument::set_has_showed_from_a() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShowedDocument::clear_has_showed_from_a() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShowedDocument::clear_showed_from_a() {
  showed_from_a_ = false;
  clear_has_showed_from_a();
}
inline bool ShowedDocument::showed_from_a() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.showed_from_a)
  return showed_from_a_;
}
inline void ShowedDocument::set_showed_from_a(bool value) {
  set_has_showed_from_a();
  showed_from_a_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.showed_from_a)
}

// optional uint32 position_a = 2;
inline bool ShowedDocument::has_position_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShowedDocument::set_has_position_a() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShowedDocument::clear_has_position_a() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShowedDocument::clear_position_a() {
  position_a_ = 0u;
  clear_has_position_a();
}
inline ::google::protobuf::uint32 ShowedDocument::position_a() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.position_a)
  return position_a_;
}
inline void ShowedDocument::set_position_a(::google::protobuf::uint32 value) {
  set_has_position_a();
  position_a_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.position_a)
}

// optional uint32 position_b = 3;
inline bool ShowedDocument::has_position_b() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShowedDocument::set_has_position_b() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShowedDocument::clear_has_position_b() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShowedDocument::clear_position_b() {
  position_b_ = 0u;
  clear_has_position_b();
}
inline ::google::protobuf::uint32 ShowedDocument::position_b() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.position_b)
  return position_b_;
}
inline void ShowedDocument::set_position_b(::google::protobuf::uint32 value) {
  set_has_position_b();
  position_b_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.position_b)
}

// required uint32 interleaved_position = 4;
inline bool ShowedDocument::has_interleaved_position() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ShowedDocument::set_has_interleaved_position() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ShowedDocument::clear_has_interleaved_position() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ShowedDocument::clear_interleaved_position() {
  interleaved_position_ = 0u;
  clear_has_interleaved_position();
}
inline ::google::protobuf::uint32 ShowedDocument::interleaved_position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.interleaved_position)
  return interleaved_position_;
}
inline void ShowedDocument::set_interleaved_position(::google::protobuf::uint32 value) {
  set_has_interleaved_position();
  interleaved_position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.interleaved_position)
}

// optional bool clicked = 5;
inline bool ShowedDocument::has_clicked() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShowedDocument::set_has_clicked() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShowedDocument::clear_has_clicked() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShowedDocument::clear_clicked() {
  clicked_ = false;
  clear_has_clicked();
}
inline bool ShowedDocument::clicked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.clicked)
  return clicked_;
}
inline void ShowedDocument::set_clicked(bool value) {
  set_has_clicked();
  clicked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.clicked)
}

// optional string url = 6;
inline bool ShowedDocument::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowedDocument::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowedDocument::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowedDocument::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& ShowedDocument::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.url)
  return url_.GetNoArena();
}
inline void ShowedDocument::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.url)
}
#if LANG_CXX11
inline void ShowedDocument::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ShowedDocument.url)
}
#endif
inline void ShowedDocument::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ShowedDocument.url)
}
inline void ShowedDocument::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ShowedDocument.url)
}
inline ::std::string* ShowedDocument::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ShowedDocument.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowedDocument::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ShowedDocument.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowedDocument::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ShowedDocument.url)
}

// optional string vertical = 7;
inline bool ShowedDocument::has_vertical() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowedDocument::set_has_vertical() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowedDocument::clear_has_vertical() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowedDocument::clear_vertical() {
  vertical_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vertical();
}
inline const ::std::string& ShowedDocument::vertical() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.vertical)
  return vertical_.GetNoArena();
}
inline void ShowedDocument::set_vertical(const ::std::string& value) {
  set_has_vertical();
  vertical_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.vertical)
}
#if LANG_CXX11
inline void ShowedDocument::set_vertical(::std::string&& value) {
  set_has_vertical();
  vertical_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.ShowedDocument.vertical)
}
#endif
inline void ShowedDocument::set_vertical(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vertical();
  vertical_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.ShowedDocument.vertical)
}
inline void ShowedDocument::set_vertical(const char* value, size_t size) {
  set_has_vertical();
  vertical_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.ShowedDocument.vertical)
}
inline ::std::string* ShowedDocument::mutable_vertical() {
  set_has_vertical();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.ShowedDocument.vertical)
  return vertical_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowedDocument::release_vertical() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.ShowedDocument.vertical)
  clear_has_vertical();
  return vertical_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowedDocument::set_allocated_vertical(::std::string* vertical) {
  if (vertical != NULL) {
    set_has_vertical();
  } else {
    clear_has_vertical();
  }
  vertical_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vertical);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.ShowedDocument.vertical)
}

// optional float sm_weight = 8;
inline bool ShowedDocument::has_sm_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ShowedDocument::set_has_sm_weight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ShowedDocument::clear_has_sm_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ShowedDocument::clear_sm_weight() {
  sm_weight_ = 0;
  clear_has_sm_weight();
}
inline float ShowedDocument::sm_weight() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.sm_weight)
  return sm_weight_;
}
inline void ShowedDocument::set_sm_weight(float value) {
  set_has_sm_weight();
  sm_weight_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.sm_weight)
}

// optional uint32 rpos = 9;
inline bool ShowedDocument::has_rpos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ShowedDocument::set_has_rpos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ShowedDocument::clear_has_rpos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ShowedDocument::clear_rpos() {
  rpos_ = 0u;
  clear_has_rpos();
}
inline ::google::protobuf::uint32 ShowedDocument::rpos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.ShowedDocument.rpos)
  return rpos_;
}
inline void ShowedDocument::set_rpos(::google::protobuf::uint32 value) {
  set_has_rpos();
  rpos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.ShowedDocument.rpos)
}

// -------------------------------------------------------------------

// Click

// required uint32 position = 1;
inline bool Click::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Click::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Click::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Click::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 Click::position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Click.position)
  return position_;
}
inline void Click::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Click.position)
}

// required uint32 time_delay = 2;
inline bool Click::has_time_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Click::set_has_time_delay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Click::clear_has_time_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Click::clear_time_delay() {
  time_delay_ = 0u;
  clear_has_time_delay();
}
inline ::google::protobuf::uint32 Click::time_delay() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Click.time_delay)
  return time_delay_;
}
inline void Click::set_time_delay(::google::protobuf::uint32 value) {
  set_has_time_delay();
  time_delay_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Click.time_delay)
}

// optional string type = 3;
inline bool Click::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Click::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Click::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Click::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& Click::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Click.type)
  return type_.GetNoArena();
}
inline void Click::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Click.type)
}
#if LANG_CXX11
inline void Click::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.Click.type)
}
#endif
inline void Click::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.Click.type)
}
inline void Click::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.Click.type)
}
inline ::std::string* Click::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.Click.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Click::release_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.Click.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Click::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.Click.type)
}

// optional uint32 sub_position = 4;
inline bool Click::has_sub_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Click::set_has_sub_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Click::clear_has_sub_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Click::clear_sub_position() {
  sub_position_ = 0u;
  clear_has_sub_position();
}
inline ::google::protobuf::uint32 Click::sub_position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Click.sub_position)
  return sub_position_;
}
inline void Click::set_sub_position(::google::protobuf::uint32 value) {
  set_has_sub_position();
  sub_position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Click.sub_position)
}

// -------------------------------------------------------------------

// Play

// required uint32 position = 1;
inline bool Play::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Play::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Play::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Play::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 Play::position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Play.position)
  return position_;
}
inline void Play::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Play.position)
}

// required uint32 time_delay = 2;
inline bool Play::has_time_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Play::set_has_time_delay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Play::clear_has_time_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Play::clear_time_delay() {
  time_delay_ = 0u;
  clear_has_time_delay();
}
inline ::google::protobuf::uint32 Play::time_delay() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Play.time_delay)
  return time_delay_;
}
inline void Play::set_time_delay(::google::protobuf::uint32 value) {
  set_has_time_delay();
  time_delay_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Play.time_delay)
}

// required uint32 time = 3;
inline bool Play::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Play::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Play::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Play::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 Play::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Play.time)
  return time_;
}
inline void Play::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Play.time)
}

// required uint32 duration = 4;
inline bool Play::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Play::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Play::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Play::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 Play::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Play.duration)
  return duration_;
}
inline void Play::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Play.duration)
}

// optional string type = 5;
inline bool Play::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Play::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Play::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Play::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& Play::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Play.type)
  return type_.GetNoArena();
}
inline void Play::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Play.type)
}
#if LANG_CXX11
inline void Play::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.Play.type)
}
#endif
inline void Play::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.Play.type)
}
inline void Play::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.Play.type)
}
inline ::std::string* Play::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.Play.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Play::release_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.Play.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Play::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.Play.type)
}

// -------------------------------------------------------------------

// Action

// required .ru.mail.go.webbase.interleaving.Action.Type type = 1;
inline bool Action::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Action::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Action::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::webbase::interleaving::Action_Type Action::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Action.type)
  return static_cast< ::ru::mail::go::webbase::interleaving::Action_Type >(type_);
}
inline void Action::set_type(::ru::mail::go::webbase::interleaving::Action_Type value) {
  assert(::ru::mail::go::webbase::interleaving::Action_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Action.type)
}

// required uint32 position = 2;
inline bool Action::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Action::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Action::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Action::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 Action::position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Action.position)
  return position_;
}
inline void Action::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Action.position)
}

// -------------------------------------------------------------------

// Serp

// repeated string urls = 1;
inline int Serp::urls_size() const {
  return urls_.size();
}
inline void Serp::clear_urls() {
  urls_.Clear();
}
inline const ::std::string& Serp::urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Serp.urls)
  return urls_.Get(index);
}
inline ::std::string* Serp::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.Serp.urls)
  return urls_.Mutable(index);
}
inline void Serp::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Serp.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Serp::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Serp.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Serp::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.Serp.urls)
}
inline void Serp::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.Serp.urls)
}
inline ::std::string* Serp::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.interleaving.Serp.urls)
  return urls_.Add();
}
inline void Serp::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.Serp.urls)
}
#if LANG_CXX11
inline void Serp::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.Serp.urls)
}
#endif
inline void Serp::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.interleaving.Serp.urls)
}
inline void Serp::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.interleaving.Serp.urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Serp::urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.Serp.urls)
  return urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Serp::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.Serp.urls)
  return &urls_;
}

// required .ru.mail.go.webbase.interleaving.Serp.SourceType type = 2;
inline bool Serp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Serp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Serp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Serp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::webbase::interleaving::Serp_SourceType Serp::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Serp.type)
  return static_cast< ::ru::mail::go::webbase::interleaving::Serp_SourceType >(type_);
}
inline void Serp::set_type(::ru::mail::go::webbase::interleaving::Serp_SourceType value) {
  assert(::ru::mail::go::webbase::interleaving::Serp_SourceType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Serp.type)
}

// required string query = 3;
inline bool Serp::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Serp::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Serp::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Serp::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& Serp::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Serp.query)
  return query_.GetNoArena();
}
inline void Serp::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Serp.query)
}
#if LANG_CXX11
inline void Serp::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.Serp.query)
}
#endif
inline void Serp::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.Serp.query)
}
inline void Serp::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.Serp.query)
}
inline ::std::string* Serp::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.Serp.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Serp::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.Serp.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Serp::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.Serp.query)
}

// required uint32 rb_code = 4;
inline bool Serp::has_rb_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Serp::set_has_rb_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Serp::clear_has_rb_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Serp::clear_rb_code() {
  rb_code_ = 0u;
  clear_has_rb_code();
}
inline ::google::protobuf::uint32 Serp::rb_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Serp.rb_code)
  return rb_code_;
}
inline void Serp::set_rb_code(::google::protobuf::uint32 value) {
  set_has_rb_code();
  rb_code_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Serp.rb_code)
}

// required uint64 timestamp = 5;
inline bool Serp::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Serp::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Serp::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Serp::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Serp::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Serp.timestamp)
  return timestamp_;
}
inline void Serp::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Serp.timestamp)
}

// -------------------------------------------------------------------

// EssrExperimentResult

// required double metric_value = 1;
inline bool EssrExperimentResult::has_metric_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EssrExperimentResult::set_has_metric_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EssrExperimentResult::clear_has_metric_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EssrExperimentResult::clear_metric_value() {
  metric_value_ = 0;
  clear_has_metric_value();
}
inline double EssrExperimentResult::metric_value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.EssrExperimentResult.metric_value)
  return metric_value_;
}
inline void EssrExperimentResult::set_metric_value(double value) {
  set_has_metric_value();
  metric_value_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.EssrExperimentResult.metric_value)
}

// required uint32 a_win_count = 2;
inline bool EssrExperimentResult::has_a_win_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EssrExperimentResult::set_has_a_win_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EssrExperimentResult::clear_has_a_win_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EssrExperimentResult::clear_a_win_count() {
  a_win_count_ = 0u;
  clear_has_a_win_count();
}
inline ::google::protobuf::uint32 EssrExperimentResult::a_win_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.EssrExperimentResult.a_win_count)
  return a_win_count_;
}
inline void EssrExperimentResult::set_a_win_count(::google::protobuf::uint32 value) {
  set_has_a_win_count();
  a_win_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.EssrExperimentResult.a_win_count)
}

// required uint32 b_win_count = 3;
inline bool EssrExperimentResult::has_b_win_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EssrExperimentResult::set_has_b_win_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EssrExperimentResult::clear_has_b_win_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EssrExperimentResult::clear_b_win_count() {
  b_win_count_ = 0u;
  clear_has_b_win_count();
}
inline ::google::protobuf::uint32 EssrExperimentResult::b_win_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.EssrExperimentResult.b_win_count)
  return b_win_count_;
}
inline void EssrExperimentResult::set_b_win_count(::google::protobuf::uint32 value) {
  set_has_b_win_count();
  b_win_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.EssrExperimentResult.b_win_count)
}

// required uint32 events_count = 4;
inline bool EssrExperimentResult::has_events_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EssrExperimentResult::set_has_events_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EssrExperimentResult::clear_has_events_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EssrExperimentResult::clear_events_count() {
  events_count_ = 0u;
  clear_has_events_count();
}
inline ::google::protobuf::uint32 EssrExperimentResult::events_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.EssrExperimentResult.events_count)
  return events_count_;
}
inline void EssrExperimentResult::set_events_count(::google::protobuf::uint32 value) {
  set_has_events_count();
  events_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.EssrExperimentResult.events_count)
}

// -------------------------------------------------------------------

// Qs

// required string name = 1;
inline bool Qs::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Qs::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Qs::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Qs::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Qs::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Qs.name)
  return name_.GetNoArena();
}
inline void Qs::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Qs.name)
}
#if LANG_CXX11
inline void Qs::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.Qs.name)
}
#endif
inline void Qs::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.Qs.name)
}
inline void Qs::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.Qs.name)
}
inline ::std::string* Qs::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.Qs.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qs::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.Qs.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.Qs.name)
}

// required string value = 2;
inline bool Qs::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Qs::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Qs::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Qs::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Qs::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.Qs.value)
  return value_.GetNoArena();
}
inline void Qs::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.Qs.value)
}
#if LANG_CXX11
inline void Qs::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.Qs.value)
}
#endif
inline void Qs::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.Qs.value)
}
inline void Qs::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.Qs.value)
}
inline ::std::string* Qs::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.Qs.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qs::release_value() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.Qs.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qs::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.Qs.value)
}

// -------------------------------------------------------------------

// SuggNavig

// optional string url = 1;
inline bool SuggNavig::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggNavig::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuggNavig::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuggNavig::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& SuggNavig::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.SuggNavig.url)
  return url_.GetNoArena();
}
inline void SuggNavig::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.SuggNavig.url)
}
#if LANG_CXX11
inline void SuggNavig::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.SuggNavig.url)
}
#endif
inline void SuggNavig::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.SuggNavig.url)
}
inline void SuggNavig::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.SuggNavig.url)
}
inline ::std::string* SuggNavig::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.SuggNavig.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggNavig::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.SuggNavig.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggNavig::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.SuggNavig.url)
}

// optional string query = 2;
inline bool SuggNavig::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuggNavig::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuggNavig::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuggNavig::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& SuggNavig::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.SuggNavig.query)
  return query_.GetNoArena();
}
inline void SuggNavig::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.SuggNavig.query)
}
#if LANG_CXX11
inline void SuggNavig::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.SuggNavig.query)
}
#endif
inline void SuggNavig::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.SuggNavig.query)
}
inline void SuggNavig::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.SuggNavig.query)
}
inline ::std::string* SuggNavig::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.SuggNavig.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggNavig::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.SuggNavig.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggNavig::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.SuggNavig.query)
}

// optional bool has_favicon = 3 [default = false];
inline bool SuggNavig::has_has_favicon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SuggNavig::set_has_has_favicon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SuggNavig::clear_has_has_favicon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SuggNavig::clear_has_favicon() {
  has_favicon_ = false;
  clear_has_has_favicon();
}
inline bool SuggNavig::has_favicon() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.SuggNavig.has_favicon)
  return has_favicon_;
}
inline void SuggNavig::set_has_favicon(bool value) {
  set_has_has_favicon();
  has_favicon_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.SuggNavig.has_favicon)
}

// optional bool clicked = 4 [default = false];
inline bool SuggNavig::has_clicked() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SuggNavig::set_has_clicked() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SuggNavig::clear_has_clicked() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SuggNavig::clear_clicked() {
  clicked_ = false;
  clear_has_clicked();
}
inline bool SuggNavig::clicked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.SuggNavig.clicked)
  return clicked_;
}
inline void SuggNavig::set_clicked(bool value) {
  set_has_clicked();
  clicked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.SuggNavig.clicked)
}

// optional string source = 5;
inline bool SuggNavig::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuggNavig::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuggNavig::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuggNavig::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& SuggNavig::source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.SuggNavig.source)
  return source_.GetNoArena();
}
inline void SuggNavig::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.SuggNavig.source)
}
#if LANG_CXX11
inline void SuggNavig::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.SuggNavig.source)
}
#endif
inline void SuggNavig::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.SuggNavig.source)
}
inline void SuggNavig::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.SuggNavig.source)
}
inline ::std::string* SuggNavig::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.SuggNavig.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggNavig::release_source() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.SuggNavig.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggNavig::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.SuggNavig.source)
}

// -------------------------------------------------------------------

// AlSession

// repeated string urls = 1;
inline int AlSession::urls_size() const {
  return urls_.size();
}
inline void AlSession::clear_urls() {
  urls_.Clear();
}
inline const ::std::string& AlSession::urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.AlSession.urls)
  return urls_.Get(index);
}
inline ::std::string* AlSession::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.AlSession.urls)
  return urls_.Mutable(index);
}
inline void AlSession::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.AlSession.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AlSession::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.AlSession.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AlSession::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.AlSession.urls)
}
inline void AlSession::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.AlSession.urls)
}
inline ::std::string* AlSession::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.interleaving.AlSession.urls)
  return urls_.Add();
}
inline void AlSession::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.AlSession.urls)
}
#if LANG_CXX11
inline void AlSession::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.AlSession.urls)
}
#endif
inline void AlSession::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.interleaving.AlSession.urls)
}
inline void AlSession::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.interleaving.AlSession.urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AlSession::urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.AlSession.urls)
  return urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AlSession::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.AlSession.urls)
  return &urls_;
}

// optional uint32 freq = 2 [default = 1];
inline bool AlSession::has_freq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlSession::set_has_freq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlSession::clear_has_freq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlSession::clear_freq() {
  freq_ = 1u;
  clear_has_freq();
}
inline ::google::protobuf::uint32 AlSession::freq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.AlSession.freq)
  return freq_;
}
inline void AlSession::set_freq(::google::protobuf::uint32 value) {
  set_has_freq();
  freq_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.AlSession.freq)
}

// -------------------------------------------------------------------

// AlSource

// required .ru.mail.go.webbase.interleaving.AlSource.SourceType type = 1;
inline bool AlSource::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlSource::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlSource::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlSource::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::webbase::interleaving::AlSource_SourceType AlSource::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.AlSource.type)
  return static_cast< ::ru::mail::go::webbase::interleaving::AlSource_SourceType >(type_);
}
inline void AlSource::set_type(::ru::mail::go::webbase::interleaving::AlSource_SourceType value) {
  assert(::ru::mail::go::webbase::interleaving::AlSource_SourceType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.AlSource.type)
}

// repeated .ru.mail.go.webbase.interleaving.AlSession sessions = 2;
inline int AlSource::sessions_size() const {
  return sessions_.size();
}
inline void AlSource::clear_sessions() {
  sessions_.Clear();
}
inline const ::ru::mail::go::webbase::interleaving::AlSession& AlSource::sessions(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.AlSource.sessions)
  return sessions_.Get(index);
}
inline ::ru::mail::go::webbase::interleaving::AlSession* AlSource::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.AlSource.sessions)
  return sessions_.Mutable(index);
}
inline ::ru::mail::go::webbase::interleaving::AlSession* AlSource::add_sessions() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.AlSource.sessions)
  return sessions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlSession >*
AlSource::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.AlSource.sessions)
  return &sessions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlSession >&
AlSource::sessions() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.AlSource.sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// AlQueryData

// required string query = 1;
inline bool AlQueryData::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlQueryData::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlQueryData::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlQueryData::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& AlQueryData::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.AlQueryData.query)
  return query_.GetNoArena();
}
inline void AlQueryData::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.AlQueryData.query)
}
#if LANG_CXX11
inline void AlQueryData::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.AlQueryData.query)
}
#endif
inline void AlQueryData::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.AlQueryData.query)
}
inline void AlQueryData::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.AlQueryData.query)
}
inline ::std::string* AlQueryData::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.AlQueryData.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlQueryData::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.AlQueryData.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlQueryData::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.AlQueryData.query)
}

// required int32 rb_code = 2;
inline bool AlQueryData::has_rb_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlQueryData::set_has_rb_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlQueryData::clear_has_rb_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlQueryData::clear_rb_code() {
  rb_code_ = 0;
  clear_has_rb_code();
}
inline ::google::protobuf::int32 AlQueryData::rb_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.AlQueryData.rb_code)
  return rb_code_;
}
inline void AlQueryData::set_rb_code(::google::protobuf::int32 value) {
  set_has_rb_code();
  rb_code_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.AlQueryData.rb_code)
}

// repeated .ru.mail.go.webbase.interleaving.AlSource sources = 3;
inline int AlQueryData::sources_size() const {
  return sources_.size();
}
inline void AlQueryData::clear_sources() {
  sources_.Clear();
}
inline const ::ru::mail::go::webbase::interleaving::AlSource& AlQueryData::sources(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.AlQueryData.sources)
  return sources_.Get(index);
}
inline ::ru::mail::go::webbase::interleaving::AlSource* AlQueryData::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.AlQueryData.sources)
  return sources_.Mutable(index);
}
inline ::ru::mail::go::webbase::interleaving::AlSource* AlQueryData::add_sources() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.AlQueryData.sources)
  return sources_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlSource >*
AlQueryData::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.AlQueryData.sources)
  return &sources_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlSource >&
AlQueryData::sources() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.AlQueryData.sources)
  return sources_;
}

// -------------------------------------------------------------------

// AlQueryDataList

// repeated .ru.mail.go.webbase.interleaving.AlQueryData queries = 1;
inline int AlQueryDataList::queries_size() const {
  return queries_.size();
}
inline void AlQueryDataList::clear_queries() {
  queries_.Clear();
}
inline const ::ru::mail::go::webbase::interleaving::AlQueryData& AlQueryDataList::queries(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.AlQueryDataList.queries)
  return queries_.Get(index);
}
inline ::ru::mail::go::webbase::interleaving::AlQueryData* AlQueryDataList::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.AlQueryDataList.queries)
  return queries_.Mutable(index);
}
inline ::ru::mail::go::webbase::interleaving::AlQueryData* AlQueryDataList::add_queries() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.interleaving.AlQueryDataList.queries)
  return queries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlQueryData >*
AlQueryDataList::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.interleaving.AlQueryDataList.queries)
  return &queries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::interleaving::AlQueryData >&
AlQueryDataList::queries() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.interleaving.AlQueryDataList.queries)
  return queries_;
}

// -------------------------------------------------------------------

// DocumentStats

// required bool showed = 1;
inline bool DocumentStats::has_showed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentStats::set_has_showed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentStats::clear_has_showed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentStats::clear_showed() {
  showed_ = false;
  clear_has_showed();
}
inline bool DocumentStats::showed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DocumentStats.showed)
  return showed_;
}
inline void DocumentStats::set_showed(bool value) {
  set_has_showed();
  showed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DocumentStats.showed)
}

// required bool clicked = 2;
inline bool DocumentStats::has_clicked() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentStats::set_has_clicked() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentStats::clear_has_clicked() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentStats::clear_clicked() {
  clicked_ = false;
  clear_has_clicked();
}
inline bool DocumentStats::clicked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DocumentStats.clicked)
  return clicked_;
}
inline void DocumentStats::set_clicked(bool value) {
  set_has_clicked();
  clicked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DocumentStats.clicked)
}

// required bool satisfied = 3;
inline bool DocumentStats::has_satisfied() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentStats::set_has_satisfied() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentStats::clear_has_satisfied() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentStats::clear_satisfied() {
  satisfied_ = false;
  clear_has_satisfied();
}
inline bool DocumentStats::satisfied() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DocumentStats.satisfied)
  return satisfied_;
}
inline void DocumentStats::set_satisfied(bool value) {
  set_has_satisfied();
  satisfied_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DocumentStats.satisfied)
}

// required bool long_click = 4;
inline bool DocumentStats::has_long_click() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentStats::set_has_long_click() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentStats::clear_has_long_click() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentStats::clear_long_click() {
  long_click_ = false;
  clear_has_long_click();
}
inline bool DocumentStats::long_click() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DocumentStats.long_click)
  return long_click_;
}
inline void DocumentStats::set_long_click(bool value) {
  set_has_long_click();
  long_click_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DocumentStats.long_click)
}

// optional string snippet = 5;
inline bool DocumentStats::has_snippet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentStats::set_has_snippet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentStats::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentStats::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snippet();
}
inline const ::std::string& DocumentStats::snippet() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.interleaving.DocumentStats.snippet)
  return snippet_.GetNoArena();
}
inline void DocumentStats::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.interleaving.DocumentStats.snippet)
}
#if LANG_CXX11
inline void DocumentStats::set_snippet(::std::string&& value) {
  set_has_snippet();
  snippet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.interleaving.DocumentStats.snippet)
}
#endif
inline void DocumentStats::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.interleaving.DocumentStats.snippet)
}
inline void DocumentStats::set_snippet(const char* value, size_t size) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.interleaving.DocumentStats.snippet)
}
inline ::std::string* DocumentStats::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.interleaving.DocumentStats.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentStats::release_snippet() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.interleaving.DocumentStats.snippet)
  clear_has_snippet();
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentStats::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.interleaving.DocumentStats.snippet)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace interleaving
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::webbase::interleaving::Action_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::interleaving::Action_Type>() {
  return ::ru::mail::go::webbase::interleaving::Action_Type_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::interleaving::Serp_SourceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::interleaving::Serp_SourceType>() {
  return ::ru::mail::go::webbase::interleaving::Serp_SourceType_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::interleaving::AlSource_SourceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::interleaving::AlSource_SourceType>() {
  return ::ru::mail::go::webbase::interleaving::AlSource_SourceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_experiment_2eproto__INCLUDED
