// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: featured_snippet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "featured_snippet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace snippet {
namespace featured {
class ImgDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Img>
     _instance;
} _Img_default_instance_;
class QuestionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QuestionInfo>
     _instance;
} _QuestionInfo_default_instance_;
class QuestionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Question>
     _instance;
} _Question_default_instance_;
class QuestionCommentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QuestionComment>
     _instance;
} _QuestionComment_default_instance_;
class AnswerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AnswerInfo>
     _instance;
} _AnswerInfo_default_instance_;
class AnswerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Answer>
     _instance;
} _Answer_default_instance_;
class QAItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QAItem>
     _instance;
} _QAItem_default_instance_;
class DocumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Document>
     _instance;
} _Document_default_instance_;

namespace protobuf_featured_5fsnippet_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, url_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionInfo, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionInfo, sub_category_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Question, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Question, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Question, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Question, info_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionComment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionComment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionComment, text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerInfo, is_best_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerInfo, likes_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerInfo, comments_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerInfo, author_rating_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, img_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, info_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QAItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QAItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QAItem, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QAItem, question_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QAItem, answers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QAItem, question_comment_),
  2,
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, qa_items_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(Img)},
  { 7, 14, sizeof(QuestionInfo)},
  { 16, 23, sizeof(Question)},
  { 25, 31, sizeof(QuestionComment)},
  { 32, 41, sizeof(AnswerInfo)},
  { 45, 53, sizeof(Answer)},
  { 56, 65, sizeof(QAItem)},
  { 69, 76, sizeof(Document)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Img_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuestionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Question_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuestionComment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnswerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Answer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QAItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Document_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "featured_snippet.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Img_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Img_default_instance_);_QuestionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QuestionInfo_default_instance_);_Question_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Question_default_instance_);_QuestionComment_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QuestionComment_default_instance_);_AnswerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AnswerInfo_default_instance_);_Answer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Answer_default_instance_);_QAItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QAItem_default_instance_);_Document_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Document_default_instance_);_Question_default_instance_._instance.get_mutable()->info_ = const_cast< ::ru::mail::go::snippet::featured::QuestionInfo*>(
      ::ru::mail::go::snippet::featured::QuestionInfo::internal_default_instance());
  _Answer_default_instance_._instance.get_mutable()->info_ = const_cast< ::ru::mail::go::snippet::featured::AnswerInfo*>(
      ::ru::mail::go::snippet::featured::AnswerInfo::internal_default_instance());
  _QAItem_default_instance_._instance.get_mutable()->question_ = const_cast< ::ru::mail::go::snippet::featured::Question*>(
      ::ru::mail::go::snippet::featured::Question::internal_default_instance());
  _QAItem_default_instance_._instance.get_mutable()->question_comment_ = const_cast< ::ru::mail::go::snippet::featured::QuestionComment*>(
      ::ru::mail::go::snippet::featured::QuestionComment::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026featured_snippet.proto\022\033ru.mail.go.sni"
      "ppet.featured\"\022\n\003Img\022\013\n\003url\030\001 \002(\t\"6\n\014Que"
      "stionInfo\022\020\n\010category\030\001 \001(\t\022\024\n\014sub_categ"
      "ory\030\002 \001(\t\"Q\n\010Question\022\014\n\004text\030\001 \002(\t\0227\n\004i"
      "nfo\030\002 \001(\0132).ru.mail.go.snippet.featured."
      "QuestionInfo\"\037\n\017QuestionComment\022\014\n\004text\030"
      "\001 \002(\t\"a\n\nAnswerInfo\022\017\n\007is_best\030\001 \001(\010\022\023\n\013"
      "likes_count\030\002 \001(\005\022\026\n\016comments_count\030\003 \001("
      "\005\022\025\n\rauthor_rating\030\004 \001(\005\"|\n\006Answer\022\014\n\004te"
      "xt\030\001 \002(\t\022-\n\003img\030\002 \003(\0132 .ru.mail.go.snipp"
      "et.featured.Img\0225\n\004info\030\003 \001(\0132\'.ru.mail."
      "go.snippet.featured.AnswerInfo\"\364\001\n\006QAIte"
      "m\0223\n\006source\030\001 \002(\0162#.ru.mail.go.snippet.f"
      "eatured.Source\0227\n\010question\030\002 \002(\0132%.ru.ma"
      "il.go.snippet.featured.Question\0224\n\007answe"
      "rs\030\003 \003(\0132#.ru.mail.go.snippet.featured.A"
      "nswer\022F\n\020question_comment\030\004 \001(\0132,.ru.mai"
      "l.go.snippet.featured.QuestionComment\"N\n"
      "\010Document\022\013\n\003uri\030\001 \002(\t\0225\n\010qa_items\030\002 \003(\013"
      "2#.ru.mail.go.snippet.featured.QAItem*\243\001"
      "\n\006Source\022\010\n\004NONE\020\000\022\021\n\rOTVET_MAIL_RU\020\001\022\022\n"
      "\016BOLSHOY_VOPROS\020\002\022\006\n\002FB\020\003\022\013\n\007ZNANIJA\020\004\022\016"
      "\n\nKAK_PROSTO\020\005\022\013\n\007WIKI_RU\020\006\022\007\n\003SYL\020\007\022\016\n\n"
      "SOVET_CLUB\020\010\022\t\n\005ELHOW\020\t\022\n\n\006SOVETS\020\n\022\006\n\002O"
      "K\020\013B\021B\017FeaturedSnippet"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 982);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "featured_snippet.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_featured_5fsnippet_2eproto

const ::google::protobuf::EnumDescriptor* Source_descriptor() {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_enum_descriptors[0];
}
bool Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Img::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Img::Img()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_featured_5fsnippet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.snippet.featured.Img)
}
Img::Img(const Img& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.snippet.featured.Img)
}

void Img::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Img::~Img() {
  // @@protoc_insertion_point(destructor:ru.mail.go.snippet.featured.Img)
  SharedDtor();
}

void Img::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Img::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Img::descriptor() {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Img& Img::default_instance() {
  protobuf_featured_5fsnippet_2eproto::InitDefaults();
  return *internal_default_instance();
}

Img* Img::New(::google::protobuf::Arena* arena) const {
  Img* n = new Img;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Img::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.snippet.featured.Img)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Img::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.snippet.featured.Img)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.snippet.featured.Img.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.snippet.featured.Img)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.snippet.featured.Img)
  return false;
#undef DO_
}

void Img::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.snippet.featured.Img)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.snippet.featured.Img.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.snippet.featured.Img)
}

::google::protobuf::uint8* Img::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.snippet.featured.Img)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.snippet.featured.Img.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.snippet.featured.Img)
  return target;
}

size_t Img::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.snippet.featured.Img)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Img::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.snippet.featured.Img)
  GOOGLE_DCHECK_NE(&from, this);
  const Img* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Img>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.snippet.featured.Img)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.snippet.featured.Img)
    MergeFrom(*source);
  }
}

void Img::MergeFrom(const Img& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.snippet.featured.Img)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_url()) {
    set_has_url();
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void Img::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.snippet.featured.Img)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Img::CopyFrom(const Img& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.snippet.featured.Img)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Img::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Img::Swap(Img* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Img::InternalSwap(Img* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Img::GetMetadata() const {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Img

// required string url = 1;
bool Img::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Img::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void Img::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void Img::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& Img::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.Img.url)
  return url_.GetNoArena();
}
void Img::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippet.featured.Img.url)
}
#if LANG_CXX11
void Img::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippet.featured.Img.url)
}
#endif
void Img::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippet.featured.Img.url)
}
void Img::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippet.featured.Img.url)
}
::std::string* Img::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippet.featured.Img.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Img::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippet.featured.Img.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Img::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippet.featured.Img.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuestionInfo::kCategoryFieldNumber;
const int QuestionInfo::kSubCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuestionInfo::QuestionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_featured_5fsnippet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.snippet.featured.QuestionInfo)
}
QuestionInfo::QuestionInfo(const QuestionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_category()) {
    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  sub_category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sub_category()) {
    sub_category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_category_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.snippet.featured.QuestionInfo)
}

void QuestionInfo::SharedCtor() {
  _cached_size_ = 0;
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QuestionInfo::~QuestionInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.snippet.featured.QuestionInfo)
  SharedDtor();
}

void QuestionInfo::SharedDtor() {
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QuestionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestionInfo::descriptor() {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuestionInfo& QuestionInfo::default_instance() {
  protobuf_featured_5fsnippet_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuestionInfo* QuestionInfo::New(::google::protobuf::Arena* arena) const {
  QuestionInfo* n = new QuestionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuestionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.snippet.featured.QuestionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!category_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*category_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!sub_category_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sub_category_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuestionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.snippet.featured.QuestionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string category = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category().data(), static_cast<int>(this->category().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.snippet.featured.QuestionInfo.category");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sub_category = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sub_category().data(), static_cast<int>(this->sub_category().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.snippet.featured.QuestionInfo.sub_category");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.snippet.featured.QuestionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.snippet.featured.QuestionInfo)
  return false;
#undef DO_
}

void QuestionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.snippet.featured.QuestionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string category = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.snippet.featured.QuestionInfo.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->category(), output);
  }

  // optional string sub_category = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub_category().data(), static_cast<int>(this->sub_category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.snippet.featured.QuestionInfo.sub_category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sub_category(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.snippet.featured.QuestionInfo)
}

::google::protobuf::uint8* QuestionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.snippet.featured.QuestionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string category = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.snippet.featured.QuestionInfo.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->category(), target);
  }

  // optional string sub_category = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub_category().data(), static_cast<int>(this->sub_category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.snippet.featured.QuestionInfo.sub_category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sub_category(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.snippet.featured.QuestionInfo)
  return target;
}

size_t QuestionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.snippet.featured.QuestionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string category = 1;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }

    // optional string sub_category = 2;
    if (has_sub_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sub_category());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.snippet.featured.QuestionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QuestionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuestionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.snippet.featured.QuestionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.snippet.featured.QuestionInfo)
    MergeFrom(*source);
  }
}

void QuestionInfo::MergeFrom(const QuestionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.snippet.featured.QuestionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_category();
      category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sub_category();
      sub_category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_category_);
    }
  }
}

void QuestionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.snippet.featured.QuestionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestionInfo::CopyFrom(const QuestionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.snippet.featured.QuestionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestionInfo::IsInitialized() const {
  return true;
}

void QuestionInfo::Swap(QuestionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuestionInfo::InternalSwap(QuestionInfo* other) {
  using std::swap;
  category_.Swap(&other->category_);
  sub_category_.Swap(&other->sub_category_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuestionInfo::GetMetadata() const {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuestionInfo

// optional string category = 1;
bool QuestionInfo::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QuestionInfo::set_has_category() {
  _has_bits_[0] |= 0x00000001u;
}
void QuestionInfo::clear_has_category() {
  _has_bits_[0] &= ~0x00000001u;
}
void QuestionInfo::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
const ::std::string& QuestionInfo::category() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.QuestionInfo.category)
  return category_.GetNoArena();
}
void QuestionInfo::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippet.featured.QuestionInfo.category)
}
#if LANG_CXX11
void QuestionInfo::set_category(::std::string&& value) {
  set_has_category();
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippet.featured.QuestionInfo.category)
}
#endif
void QuestionInfo::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippet.featured.QuestionInfo.category)
}
void QuestionInfo::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippet.featured.QuestionInfo.category)
}
::std::string* QuestionInfo::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippet.featured.QuestionInfo.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuestionInfo::release_category() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippet.featured.QuestionInfo.category)
  clear_has_category();
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuestionInfo::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippet.featured.QuestionInfo.category)
}

// optional string sub_category = 2;
bool QuestionInfo::has_sub_category() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QuestionInfo::set_has_sub_category() {
  _has_bits_[0] |= 0x00000002u;
}
void QuestionInfo::clear_has_sub_category() {
  _has_bits_[0] &= ~0x00000002u;
}
void QuestionInfo::clear_sub_category() {
  sub_category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sub_category();
}
const ::std::string& QuestionInfo::sub_category() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.QuestionInfo.sub_category)
  return sub_category_.GetNoArena();
}
void QuestionInfo::set_sub_category(const ::std::string& value) {
  set_has_sub_category();
  sub_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippet.featured.QuestionInfo.sub_category)
}
#if LANG_CXX11
void QuestionInfo::set_sub_category(::std::string&& value) {
  set_has_sub_category();
  sub_category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippet.featured.QuestionInfo.sub_category)
}
#endif
void QuestionInfo::set_sub_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sub_category();
  sub_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippet.featured.QuestionInfo.sub_category)
}
void QuestionInfo::set_sub_category(const char* value, size_t size) {
  set_has_sub_category();
  sub_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippet.featured.QuestionInfo.sub_category)
}
::std::string* QuestionInfo::mutable_sub_category() {
  set_has_sub_category();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippet.featured.QuestionInfo.sub_category)
  return sub_category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuestionInfo::release_sub_category() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippet.featured.QuestionInfo.sub_category)
  clear_has_sub_category();
  return sub_category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuestionInfo::set_allocated_sub_category(::std::string* sub_category) {
  if (sub_category != NULL) {
    set_has_sub_category();
  } else {
    clear_has_sub_category();
  }
  sub_category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sub_category);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippet.featured.QuestionInfo.sub_category)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Question::kTextFieldNumber;
const int Question::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Question::Question()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_featured_5fsnippet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.snippet.featured.Question)
}
Question::Question(const Question& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_info()) {
    info_ = new ::ru::mail::go::snippet::featured::QuestionInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.snippet.featured.Question)
}

void Question::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = NULL;
}

Question::~Question() {
  // @@protoc_insertion_point(destructor:ru.mail.go.snippet.featured.Question)
  SharedDtor();
}

void Question::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void Question::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Question::descriptor() {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Question& Question::default_instance() {
  protobuf_featured_5fsnippet_2eproto::InitDefaults();
  return *internal_default_instance();
}

Question* Question::New(::google::protobuf::Arena* arena) const {
  Question* n = new Question;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Question::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.snippet.featured.Question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(info_ != NULL);
      info_->::ru::mail::go::snippet::featured::QuestionInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Question::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.snippet.featured.Question)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.snippet.featured.Question.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.snippet.featured.QuestionInfo info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.snippet.featured.Question)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.snippet.featured.Question)
  return false;
#undef DO_
}

void Question::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.snippet.featured.Question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.snippet.featured.Question.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional .ru.mail.go.snippet.featured.QuestionInfo info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.snippet.featured.Question)
}

::google::protobuf::uint8* Question::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.snippet.featured.Question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.snippet.featured.Question.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional .ru.mail.go.snippet.featured.QuestionInfo info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.snippet.featured.Question)
  return target;
}

size_t Question::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.snippet.featured.Question)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }
  // optional .ru.mail.go.snippet.featured.QuestionInfo info = 2;
  if (has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Question::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.snippet.featured.Question)
  GOOGLE_DCHECK_NE(&from, this);
  const Question* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Question>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.snippet.featured.Question)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.snippet.featured.Question)
    MergeFrom(*source);
  }
}

void Question::MergeFrom(const Question& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.snippet.featured.Question)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_info()->::ru::mail::go::snippet::featured::QuestionInfo::MergeFrom(from.info());
    }
  }
}

void Question::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.snippet.featured.Question)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Question::CopyFrom(const Question& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.snippet.featured.Question)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Question::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Question::Swap(Question* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Question::InternalSwap(Question* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(info_, other->info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Question::GetMetadata() const {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Question

// required string text = 1;
bool Question::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Question::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void Question::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void Question::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& Question::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.Question.text)
  return text_.GetNoArena();
}
void Question::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippet.featured.Question.text)
}
#if LANG_CXX11
void Question::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippet.featured.Question.text)
}
#endif
void Question::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippet.featured.Question.text)
}
void Question::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippet.featured.Question.text)
}
::std::string* Question::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippet.featured.Question.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Question::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippet.featured.Question.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Question::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippet.featured.Question.text)
}

// optional .ru.mail.go.snippet.featured.QuestionInfo info = 2;
bool Question::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Question::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
void Question::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void Question::clear_info() {
  if (info_ != NULL) info_->::ru::mail::go::snippet::featured::QuestionInfo::Clear();
  clear_has_info();
}
const ::ru::mail::go::snippet::featured::QuestionInfo& Question::info() const {
  const ::ru::mail::go::snippet::featured::QuestionInfo* p = info_;
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.Question.info)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::snippet::featured::QuestionInfo*>(
      &::ru::mail::go::snippet::featured::_QuestionInfo_default_instance_);
}
::ru::mail::go::snippet::featured::QuestionInfo* Question::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::ru::mail::go::snippet::featured::QuestionInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippet.featured.Question.info)
  return info_;
}
::ru::mail::go::snippet::featured::QuestionInfo* Question::release_info() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippet.featured.Question.info)
  clear_has_info();
  ::ru::mail::go::snippet::featured::QuestionInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void Question::set_allocated_info(::ru::mail::go::snippet::featured::QuestionInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippet.featured.Question.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuestionComment::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuestionComment::QuestionComment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_featured_5fsnippet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.snippet.featured.QuestionComment)
}
QuestionComment::QuestionComment(const QuestionComment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.snippet.featured.QuestionComment)
}

void QuestionComment::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QuestionComment::~QuestionComment() {
  // @@protoc_insertion_point(destructor:ru.mail.go.snippet.featured.QuestionComment)
  SharedDtor();
}

void QuestionComment::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QuestionComment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestionComment::descriptor() {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuestionComment& QuestionComment::default_instance() {
  protobuf_featured_5fsnippet_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuestionComment* QuestionComment::New(::google::protobuf::Arena* arena) const {
  QuestionComment* n = new QuestionComment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuestionComment::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.snippet.featured.QuestionComment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuestionComment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.snippet.featured.QuestionComment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.snippet.featured.QuestionComment.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.snippet.featured.QuestionComment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.snippet.featured.QuestionComment)
  return false;
#undef DO_
}

void QuestionComment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.snippet.featured.QuestionComment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.snippet.featured.QuestionComment.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.snippet.featured.QuestionComment)
}

::google::protobuf::uint8* QuestionComment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.snippet.featured.QuestionComment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.snippet.featured.QuestionComment.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.snippet.featured.QuestionComment)
  return target;
}

size_t QuestionComment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.snippet.featured.QuestionComment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestionComment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.snippet.featured.QuestionComment)
  GOOGLE_DCHECK_NE(&from, this);
  const QuestionComment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuestionComment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.snippet.featured.QuestionComment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.snippet.featured.QuestionComment)
    MergeFrom(*source);
  }
}

void QuestionComment::MergeFrom(const QuestionComment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.snippet.featured.QuestionComment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    set_has_text();
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void QuestionComment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.snippet.featured.QuestionComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestionComment::CopyFrom(const QuestionComment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.snippet.featured.QuestionComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestionComment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void QuestionComment::Swap(QuestionComment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuestionComment::InternalSwap(QuestionComment* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuestionComment::GetMetadata() const {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuestionComment

// required string text = 1;
bool QuestionComment::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QuestionComment::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void QuestionComment::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void QuestionComment::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& QuestionComment::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.QuestionComment.text)
  return text_.GetNoArena();
}
void QuestionComment::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippet.featured.QuestionComment.text)
}
#if LANG_CXX11
void QuestionComment::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippet.featured.QuestionComment.text)
}
#endif
void QuestionComment::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippet.featured.QuestionComment.text)
}
void QuestionComment::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippet.featured.QuestionComment.text)
}
::std::string* QuestionComment::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippet.featured.QuestionComment.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuestionComment::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippet.featured.QuestionComment.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuestionComment::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippet.featured.QuestionComment.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnswerInfo::kIsBestFieldNumber;
const int AnswerInfo::kLikesCountFieldNumber;
const int AnswerInfo::kCommentsCountFieldNumber;
const int AnswerInfo::kAuthorRatingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnswerInfo::AnswerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_featured_5fsnippet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.snippet.featured.AnswerInfo)
}
AnswerInfo::AnswerInfo(const AnswerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_best_, &from.is_best_,
    static_cast<size_t>(reinterpret_cast<char*>(&author_rating_) -
    reinterpret_cast<char*>(&is_best_)) + sizeof(author_rating_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.snippet.featured.AnswerInfo)
}

void AnswerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&is_best_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&author_rating_) -
      reinterpret_cast<char*>(&is_best_)) + sizeof(author_rating_));
}

AnswerInfo::~AnswerInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.snippet.featured.AnswerInfo)
  SharedDtor();
}

void AnswerInfo::SharedDtor() {
}

void AnswerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerInfo::descriptor() {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnswerInfo& AnswerInfo::default_instance() {
  protobuf_featured_5fsnippet_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnswerInfo* AnswerInfo::New(::google::protobuf::Arena* arena) const {
  AnswerInfo* n = new AnswerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnswerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.snippet.featured.AnswerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&is_best_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&author_rating_) -
        reinterpret_cast<char*>(&is_best_)) + sizeof(author_rating_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AnswerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.snippet.featured.AnswerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_best = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_best();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_best_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 likes_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_likes_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &likes_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 comments_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_comments_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comments_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 author_rating = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_author_rating();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &author_rating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.snippet.featured.AnswerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.snippet.featured.AnswerInfo)
  return false;
#undef DO_
}

void AnswerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.snippet.featured.AnswerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_best = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_best(), output);
  }

  // optional int32 likes_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->likes_count(), output);
  }

  // optional int32 comments_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->comments_count(), output);
  }

  // optional int32 author_rating = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->author_rating(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.snippet.featured.AnswerInfo)
}

::google::protobuf::uint8* AnswerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.snippet.featured.AnswerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_best = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_best(), target);
  }

  // optional int32 likes_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->likes_count(), target);
  }

  // optional int32 comments_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->comments_count(), target);
  }

  // optional int32 author_rating = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->author_rating(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.snippet.featured.AnswerInfo)
  return target;
}

size_t AnswerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.snippet.featured.AnswerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool is_best = 1;
    if (has_is_best()) {
      total_size += 1 + 1;
    }

    // optional int32 likes_count = 2;
    if (has_likes_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->likes_count());
    }

    // optional int32 comments_count = 3;
    if (has_comments_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comments_count());
    }

    // optional int32 author_rating = 4;
    if (has_author_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->author_rating());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.snippet.featured.AnswerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AnswerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnswerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.snippet.featured.AnswerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.snippet.featured.AnswerInfo)
    MergeFrom(*source);
  }
}

void AnswerInfo::MergeFrom(const AnswerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.snippet.featured.AnswerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      is_best_ = from.is_best_;
    }
    if (cached_has_bits & 0x00000002u) {
      likes_count_ = from.likes_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      comments_count_ = from.comments_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      author_rating_ = from.author_rating_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnswerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.snippet.featured.AnswerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerInfo::CopyFrom(const AnswerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.snippet.featured.AnswerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerInfo::IsInitialized() const {
  return true;
}

void AnswerInfo::Swap(AnswerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnswerInfo::InternalSwap(AnswerInfo* other) {
  using std::swap;
  swap(is_best_, other->is_best_);
  swap(likes_count_, other->likes_count_);
  swap(comments_count_, other->comments_count_);
  swap(author_rating_, other->author_rating_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnswerInfo::GetMetadata() const {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnswerInfo

// optional bool is_best = 1;
bool AnswerInfo::has_is_best() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AnswerInfo::set_has_is_best() {
  _has_bits_[0] |= 0x00000001u;
}
void AnswerInfo::clear_has_is_best() {
  _has_bits_[0] &= ~0x00000001u;
}
void AnswerInfo::clear_is_best() {
  is_best_ = false;
  clear_has_is_best();
}
bool AnswerInfo::is_best() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.AnswerInfo.is_best)
  return is_best_;
}
void AnswerInfo::set_is_best(bool value) {
  set_has_is_best();
  is_best_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.snippet.featured.AnswerInfo.is_best)
}

// optional int32 likes_count = 2;
bool AnswerInfo::has_likes_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AnswerInfo::set_has_likes_count() {
  _has_bits_[0] |= 0x00000002u;
}
void AnswerInfo::clear_has_likes_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void AnswerInfo::clear_likes_count() {
  likes_count_ = 0;
  clear_has_likes_count();
}
::google::protobuf::int32 AnswerInfo::likes_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.AnswerInfo.likes_count)
  return likes_count_;
}
void AnswerInfo::set_likes_count(::google::protobuf::int32 value) {
  set_has_likes_count();
  likes_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.snippet.featured.AnswerInfo.likes_count)
}

// optional int32 comments_count = 3;
bool AnswerInfo::has_comments_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AnswerInfo::set_has_comments_count() {
  _has_bits_[0] |= 0x00000004u;
}
void AnswerInfo::clear_has_comments_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void AnswerInfo::clear_comments_count() {
  comments_count_ = 0;
  clear_has_comments_count();
}
::google::protobuf::int32 AnswerInfo::comments_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.AnswerInfo.comments_count)
  return comments_count_;
}
void AnswerInfo::set_comments_count(::google::protobuf::int32 value) {
  set_has_comments_count();
  comments_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.snippet.featured.AnswerInfo.comments_count)
}

// optional int32 author_rating = 4;
bool AnswerInfo::has_author_rating() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AnswerInfo::set_has_author_rating() {
  _has_bits_[0] |= 0x00000008u;
}
void AnswerInfo::clear_has_author_rating() {
  _has_bits_[0] &= ~0x00000008u;
}
void AnswerInfo::clear_author_rating() {
  author_rating_ = 0;
  clear_has_author_rating();
}
::google::protobuf::int32 AnswerInfo::author_rating() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.AnswerInfo.author_rating)
  return author_rating_;
}
void AnswerInfo::set_author_rating(::google::protobuf::int32 value) {
  set_has_author_rating();
  author_rating_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.snippet.featured.AnswerInfo.author_rating)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Answer::kTextFieldNumber;
const int Answer::kImgFieldNumber;
const int Answer::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Answer::Answer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_featured_5fsnippet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.snippet.featured.Answer)
}
Answer::Answer(const Answer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      img_(from.img_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_info()) {
    info_ = new ::ru::mail::go::snippet::featured::AnswerInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.snippet.featured.Answer)
}

void Answer::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = NULL;
}

Answer::~Answer() {
  // @@protoc_insertion_point(destructor:ru.mail.go.snippet.featured.Answer)
  SharedDtor();
}

void Answer::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void Answer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Answer::descriptor() {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Answer& Answer::default_instance() {
  protobuf_featured_5fsnippet_2eproto::InitDefaults();
  return *internal_default_instance();
}

Answer* Answer::New(::google::protobuf::Arena* arena) const {
  Answer* n = new Answer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Answer::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.snippet.featured.Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  img_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(info_ != NULL);
      info_->::ru::mail::go::snippet::featured::AnswerInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Answer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.snippet.featured.Answer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.snippet.featured.Answer.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.snippet.featured.Img img = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_img()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.snippet.featured.AnswerInfo info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.snippet.featured.Answer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.snippet.featured.Answer)
  return false;
#undef DO_
}

void Answer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.snippet.featured.Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.snippet.featured.Answer.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // repeated .ru.mail.go.snippet.featured.Img img = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->img_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->img(static_cast<int>(i)), output);
  }

  // optional .ru.mail.go.snippet.featured.AnswerInfo info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.snippet.featured.Answer)
}

::google::protobuf::uint8* Answer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.snippet.featured.Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.snippet.featured.Answer.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // repeated .ru.mail.go.snippet.featured.Img img = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->img_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->img(static_cast<int>(i)), deterministic, target);
  }

  // optional .ru.mail.go.snippet.featured.AnswerInfo info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.snippet.featured.Answer)
  return target;
}

size_t Answer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.snippet.featured.Answer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }
  // repeated .ru.mail.go.snippet.featured.Img img = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->img_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->img(static_cast<int>(i)));
    }
  }

  // optional .ru.mail.go.snippet.featured.AnswerInfo info = 3;
  if (has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Answer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.snippet.featured.Answer)
  GOOGLE_DCHECK_NE(&from, this);
  const Answer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Answer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.snippet.featured.Answer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.snippet.featured.Answer)
    MergeFrom(*source);
  }
}

void Answer::MergeFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.snippet.featured.Answer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  img_.MergeFrom(from.img_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_info()->::ru::mail::go::snippet::featured::AnswerInfo::MergeFrom(from.info());
    }
  }
}

void Answer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.snippet.featured.Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Answer::CopyFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.snippet.featured.Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Answer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->img())) return false;
  return true;
}

void Answer::Swap(Answer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Answer::InternalSwap(Answer* other) {
  using std::swap;
  img_.InternalSwap(&other->img_);
  text_.Swap(&other->text_);
  swap(info_, other->info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Answer::GetMetadata() const {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Answer

// required string text = 1;
bool Answer::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Answer::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void Answer::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void Answer::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& Answer::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.Answer.text)
  return text_.GetNoArena();
}
void Answer::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippet.featured.Answer.text)
}
#if LANG_CXX11
void Answer::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippet.featured.Answer.text)
}
#endif
void Answer::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippet.featured.Answer.text)
}
void Answer::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippet.featured.Answer.text)
}
::std::string* Answer::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippet.featured.Answer.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Answer::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippet.featured.Answer.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Answer::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippet.featured.Answer.text)
}

// repeated .ru.mail.go.snippet.featured.Img img = 2;
int Answer::img_size() const {
  return img_.size();
}
void Answer::clear_img() {
  img_.Clear();
}
const ::ru::mail::go::snippet::featured::Img& Answer::img(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.Answer.img)
  return img_.Get(index);
}
::ru::mail::go::snippet::featured::Img* Answer::mutable_img(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippet.featured.Answer.img)
  return img_.Mutable(index);
}
::ru::mail::go::snippet::featured::Img* Answer::add_img() {
  // @@protoc_insertion_point(field_add:ru.mail.go.snippet.featured.Answer.img)
  return img_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippet::featured::Img >*
Answer::mutable_img() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.snippet.featured.Answer.img)
  return &img_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippet::featured::Img >&
Answer::img() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.snippet.featured.Answer.img)
  return img_;
}

// optional .ru.mail.go.snippet.featured.AnswerInfo info = 3;
bool Answer::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Answer::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
void Answer::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void Answer::clear_info() {
  if (info_ != NULL) info_->::ru::mail::go::snippet::featured::AnswerInfo::Clear();
  clear_has_info();
}
const ::ru::mail::go::snippet::featured::AnswerInfo& Answer::info() const {
  const ::ru::mail::go::snippet::featured::AnswerInfo* p = info_;
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.Answer.info)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::snippet::featured::AnswerInfo*>(
      &::ru::mail::go::snippet::featured::_AnswerInfo_default_instance_);
}
::ru::mail::go::snippet::featured::AnswerInfo* Answer::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::ru::mail::go::snippet::featured::AnswerInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippet.featured.Answer.info)
  return info_;
}
::ru::mail::go::snippet::featured::AnswerInfo* Answer::release_info() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippet.featured.Answer.info)
  clear_has_info();
  ::ru::mail::go::snippet::featured::AnswerInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void Answer::set_allocated_info(::ru::mail::go::snippet::featured::AnswerInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippet.featured.Answer.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QAItem::kSourceFieldNumber;
const int QAItem::kQuestionFieldNumber;
const int QAItem::kAnswersFieldNumber;
const int QAItem::kQuestionCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QAItem::QAItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_featured_5fsnippet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.snippet.featured.QAItem)
}
QAItem::QAItem(const QAItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      answers_(from.answers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_question()) {
    question_ = new ::ru::mail::go::snippet::featured::Question(*from.question_);
  } else {
    question_ = NULL;
  }
  if (from.has_question_comment()) {
    question_comment_ = new ::ru::mail::go::snippet::featured::QuestionComment(*from.question_comment_);
  } else {
    question_comment_ = NULL;
  }
  source_ = from.source_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.snippet.featured.QAItem)
}

void QAItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&question_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&question_)) + sizeof(source_));
}

QAItem::~QAItem() {
  // @@protoc_insertion_point(destructor:ru.mail.go.snippet.featured.QAItem)
  SharedDtor();
}

void QAItem::SharedDtor() {
  if (this != internal_default_instance()) delete question_;
  if (this != internal_default_instance()) delete question_comment_;
}

void QAItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QAItem::descriptor() {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QAItem& QAItem::default_instance() {
  protobuf_featured_5fsnippet_2eproto::InitDefaults();
  return *internal_default_instance();
}

QAItem* QAItem::New(::google::protobuf::Arena* arena) const {
  QAItem* n = new QAItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QAItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.snippet.featured.QAItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  answers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(question_ != NULL);
      question_->::ru::mail::go::snippet::featured::Question::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(question_comment_ != NULL);
      question_comment_->::ru::mail::go::snippet::featured::QuestionComment::Clear();
    }
  }
  source_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QAItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.snippet.featured.QAItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.snippet.featured.Source source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::snippet::featured::Source_IsValid(value)) {
            set_source(static_cast< ::ru::mail::go::snippet::featured::Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.snippet.featured.Question question = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_question()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.snippet.featured.Answer answers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_answers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.snippet.featured.QuestionComment question_comment = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_question_comment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.snippet.featured.QAItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.snippet.featured.QAItem)
  return false;
#undef DO_
}

void QAItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.snippet.featured.QAItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.snippet.featured.Source source = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->source(), output);
  }

  // required .ru.mail.go.snippet.featured.Question question = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->question_, output);
  }

  // repeated .ru.mail.go.snippet.featured.Answer answers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->answers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->answers(static_cast<int>(i)), output);
  }

  // optional .ru.mail.go.snippet.featured.QuestionComment question_comment = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->question_comment_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.snippet.featured.QAItem)
}

::google::protobuf::uint8* QAItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.snippet.featured.QAItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.snippet.featured.Source source = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->source(), target);
  }

  // required .ru.mail.go.snippet.featured.Question question = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->question_, deterministic, target);
  }

  // repeated .ru.mail.go.snippet.featured.Answer answers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->answers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->answers(static_cast<int>(i)), deterministic, target);
  }

  // optional .ru.mail.go.snippet.featured.QuestionComment question_comment = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->question_comment_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.snippet.featured.QAItem)
  return target;
}

size_t QAItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.snippet.featured.QAItem)
  size_t total_size = 0;

  if (has_question()) {
    // required .ru.mail.go.snippet.featured.Question question = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->question_);
  }

  if (has_source()) {
    // required .ru.mail.go.snippet.featured.Source source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
  }

  return total_size;
}
size_t QAItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.snippet.featured.QAItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .ru.mail.go.snippet.featured.Question question = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->question_);

    // required .ru.mail.go.snippet.featured.Source source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.snippet.featured.Answer answers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->answers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->answers(static_cast<int>(i)));
    }
  }

  // optional .ru.mail.go.snippet.featured.QuestionComment question_comment = 4;
  if (has_question_comment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->question_comment_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QAItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.snippet.featured.QAItem)
  GOOGLE_DCHECK_NE(&from, this);
  const QAItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QAItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.snippet.featured.QAItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.snippet.featured.QAItem)
    MergeFrom(*source);
  }
}

void QAItem::MergeFrom(const QAItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.snippet.featured.QAItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  answers_.MergeFrom(from.answers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_question()->::ru::mail::go::snippet::featured::Question::MergeFrom(from.question());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_question_comment()->::ru::mail::go::snippet::featured::QuestionComment::MergeFrom(from.question_comment());
    }
    if (cached_has_bits & 0x00000004u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QAItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.snippet.featured.QAItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QAItem::CopyFrom(const QAItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.snippet.featured.QAItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QAItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->answers())) return false;
  if (has_question()) {
    if (!this->question_->IsInitialized()) return false;
  }
  if (has_question_comment()) {
    if (!this->question_comment_->IsInitialized()) return false;
  }
  return true;
}

void QAItem::Swap(QAItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QAItem::InternalSwap(QAItem* other) {
  using std::swap;
  answers_.InternalSwap(&other->answers_);
  swap(question_, other->question_);
  swap(question_comment_, other->question_comment_);
  swap(source_, other->source_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QAItem::GetMetadata() const {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QAItem

// required .ru.mail.go.snippet.featured.Source source = 1;
bool QAItem::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QAItem::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
void QAItem::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
void QAItem::clear_source() {
  source_ = 0;
  clear_has_source();
}
::ru::mail::go::snippet::featured::Source QAItem::source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.QAItem.source)
  return static_cast< ::ru::mail::go::snippet::featured::Source >(source_);
}
void QAItem::set_source(::ru::mail::go::snippet::featured::Source value) {
  assert(::ru::mail::go::snippet::featured::Source_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.snippet.featured.QAItem.source)
}

// required .ru.mail.go.snippet.featured.Question question = 2;
bool QAItem::has_question() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QAItem::set_has_question() {
  _has_bits_[0] |= 0x00000001u;
}
void QAItem::clear_has_question() {
  _has_bits_[0] &= ~0x00000001u;
}
void QAItem::clear_question() {
  if (question_ != NULL) question_->::ru::mail::go::snippet::featured::Question::Clear();
  clear_has_question();
}
const ::ru::mail::go::snippet::featured::Question& QAItem::question() const {
  const ::ru::mail::go::snippet::featured::Question* p = question_;
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.QAItem.question)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::snippet::featured::Question*>(
      &::ru::mail::go::snippet::featured::_Question_default_instance_);
}
::ru::mail::go::snippet::featured::Question* QAItem::mutable_question() {
  set_has_question();
  if (question_ == NULL) {
    question_ = new ::ru::mail::go::snippet::featured::Question;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippet.featured.QAItem.question)
  return question_;
}
::ru::mail::go::snippet::featured::Question* QAItem::release_question() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippet.featured.QAItem.question)
  clear_has_question();
  ::ru::mail::go::snippet::featured::Question* temp = question_;
  question_ = NULL;
  return temp;
}
void QAItem::set_allocated_question(::ru::mail::go::snippet::featured::Question* question) {
  delete question_;
  question_ = question;
  if (question) {
    set_has_question();
  } else {
    clear_has_question();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippet.featured.QAItem.question)
}

// repeated .ru.mail.go.snippet.featured.Answer answers = 3;
int QAItem::answers_size() const {
  return answers_.size();
}
void QAItem::clear_answers() {
  answers_.Clear();
}
const ::ru::mail::go::snippet::featured::Answer& QAItem::answers(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.QAItem.answers)
  return answers_.Get(index);
}
::ru::mail::go::snippet::featured::Answer* QAItem::mutable_answers(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippet.featured.QAItem.answers)
  return answers_.Mutable(index);
}
::ru::mail::go::snippet::featured::Answer* QAItem::add_answers() {
  // @@protoc_insertion_point(field_add:ru.mail.go.snippet.featured.QAItem.answers)
  return answers_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippet::featured::Answer >*
QAItem::mutable_answers() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.snippet.featured.QAItem.answers)
  return &answers_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippet::featured::Answer >&
QAItem::answers() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.snippet.featured.QAItem.answers)
  return answers_;
}

// optional .ru.mail.go.snippet.featured.QuestionComment question_comment = 4;
bool QAItem::has_question_comment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QAItem::set_has_question_comment() {
  _has_bits_[0] |= 0x00000002u;
}
void QAItem::clear_has_question_comment() {
  _has_bits_[0] &= ~0x00000002u;
}
void QAItem::clear_question_comment() {
  if (question_comment_ != NULL) question_comment_->::ru::mail::go::snippet::featured::QuestionComment::Clear();
  clear_has_question_comment();
}
const ::ru::mail::go::snippet::featured::QuestionComment& QAItem::question_comment() const {
  const ::ru::mail::go::snippet::featured::QuestionComment* p = question_comment_;
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.QAItem.question_comment)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::snippet::featured::QuestionComment*>(
      &::ru::mail::go::snippet::featured::_QuestionComment_default_instance_);
}
::ru::mail::go::snippet::featured::QuestionComment* QAItem::mutable_question_comment() {
  set_has_question_comment();
  if (question_comment_ == NULL) {
    question_comment_ = new ::ru::mail::go::snippet::featured::QuestionComment;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippet.featured.QAItem.question_comment)
  return question_comment_;
}
::ru::mail::go::snippet::featured::QuestionComment* QAItem::release_question_comment() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippet.featured.QAItem.question_comment)
  clear_has_question_comment();
  ::ru::mail::go::snippet::featured::QuestionComment* temp = question_comment_;
  question_comment_ = NULL;
  return temp;
}
void QAItem::set_allocated_question_comment(::ru::mail::go::snippet::featured::QuestionComment* question_comment) {
  delete question_comment_;
  question_comment_ = question_comment;
  if (question_comment) {
    set_has_question_comment();
  } else {
    clear_has_question_comment();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippet.featured.QAItem.question_comment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Document::kUriFieldNumber;
const int Document::kQaItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Document::Document()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_featured_5fsnippet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.snippet.featured.Document)
}
Document::Document(const Document& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      qa_items_(from.qa_items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uri()) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.snippet.featured.Document)
}

void Document::SharedCtor() {
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Document::~Document() {
  // @@protoc_insertion_point(destructor:ru.mail.go.snippet.featured.Document)
  SharedDtor();
}

void Document::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Document& Document::default_instance() {
  protobuf_featured_5fsnippet_2eproto::InitDefaults();
  return *internal_default_instance();
}

Document* Document::New(::google::protobuf::Arena* arena) const {
  Document* n = new Document;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Document::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.snippet.featured.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qa_items_.Clear();
  if (has_uri()) {
    GOOGLE_DCHECK(!uri_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*uri_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.snippet.featured.Document)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.snippet.featured.Document.uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.snippet.featured.QAItem qa_items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qa_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.snippet.featured.Document)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.snippet.featured.Document)
  return false;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.snippet.featured.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string uri = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.snippet.featured.Document.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // repeated .ru.mail.go.snippet.featured.QAItem qa_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qa_items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->qa_items(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.snippet.featured.Document)
}

::google::protobuf::uint8* Document::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.snippet.featured.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string uri = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.snippet.featured.Document.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // repeated .ru.mail.go.snippet.featured.QAItem qa_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qa_items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->qa_items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.snippet.featured.Document)
  return target;
}

size_t Document::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.snippet.featured.Document)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string uri = 1;
  if (has_uri()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }
  // repeated .ru.mail.go.snippet.featured.QAItem qa_items = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->qa_items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qa_items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.snippet.featured.Document)
  GOOGLE_DCHECK_NE(&from, this);
  const Document* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Document>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.snippet.featured.Document)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.snippet.featured.Document)
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.snippet.featured.Document)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qa_items_.MergeFrom(from.qa_items_);
  if (from.has_uri()) {
    set_has_uri();
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.snippet.featured.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.snippet.featured.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->qa_items())) return false;
  return true;
}

void Document::Swap(Document* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Document::InternalSwap(Document* other) {
  using std::swap;
  qa_items_.InternalSwap(&other->qa_items_);
  uri_.Swap(&other->uri_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_featured_5fsnippet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_featured_5fsnippet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Document

// required string uri = 1;
bool Document::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Document::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void Document::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void Document::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
const ::std::string& Document::uri() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.Document.uri)
  return uri_.GetNoArena();
}
void Document::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippet.featured.Document.uri)
}
#if LANG_CXX11
void Document::set_uri(::std::string&& value) {
  set_has_uri();
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippet.featured.Document.uri)
}
#endif
void Document::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippet.featured.Document.uri)
}
void Document::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippet.featured.Document.uri)
}
::std::string* Document::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippet.featured.Document.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_uri() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippet.featured.Document.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippet.featured.Document.uri)
}

// repeated .ru.mail.go.snippet.featured.QAItem qa_items = 2;
int Document::qa_items_size() const {
  return qa_items_.size();
}
void Document::clear_qa_items() {
  qa_items_.Clear();
}
const ::ru::mail::go::snippet::featured::QAItem& Document::qa_items(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippet.featured.Document.qa_items)
  return qa_items_.Get(index);
}
::ru::mail::go::snippet::featured::QAItem* Document::mutable_qa_items(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippet.featured.Document.qa_items)
  return qa_items_.Mutable(index);
}
::ru::mail::go::snippet::featured::QAItem* Document::add_qa_items() {
  // @@protoc_insertion_point(field_add:ru.mail.go.snippet.featured.Document.qa_items)
  return qa_items_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippet::featured::QAItem >*
Document::mutable_qa_items() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.snippet.featured.Document.qa_items)
  return &qa_items_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippet::featured::QAItem >&
Document::qa_items() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.snippet.featured.Document.qa_items)
  return qa_items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace featured
}  // namespace snippet
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
