// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fetcher_storage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fetcher_storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gogo {
namespace fetcher {
class SerializedBlockDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SerializedBlock>
     _instance;
} _SerializedBlock_default_instance_;
class fetcher_imageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<fetcher_image>
     _instance;
} _fetcher_image_default_instance_;
class fetcher_document_detailDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<fetcher_document_detail>
     _instance;
} _fetcher_document_detail_default_instance_;
class fetcher_host_detailsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<fetcher_host_details>
     _instance;
} _fetcher_host_details_default_instance_;
class url_upload_detailDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<url_upload_detail>
     _instance;
} _url_upload_detail_default_instance_;
class post_document_detailDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<post_document_detail>
     _instance;
} _post_document_detail_default_instance_;
class insta_profile_extraDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<insta_profile_extra>
     _instance;
} _insta_profile_extra_default_instance_;
class vk_snippet_dataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<vk_snippet_data>
     _instance;
} _vk_snippet_data_default_instance_;
class image_discoveryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<image_discovery>
     _instance;
} _image_discovery_default_instance_;
class images_discoveryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<images_discovery>
     _instance;
} _images_discovery_default_instance_;

namespace protobuf_fetcher_5fstorage_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedBlock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedBlock, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedBlock, proto_class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedBlock, proto_blobs_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_image, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_image, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_image, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_image, download_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_image, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_image, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_image, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_image, type_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, download_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, http_head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, redirects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, fetch_url_proto_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, forumtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, robotsstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, rendertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, forcedencoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, leadtoproviderblock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, isfromredirectchain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, sourcemark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, redirect_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, scriptremoved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, profileimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, coverimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, microdata_markup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_document_detail, imagesonpage_),
  0,
  9,
  1,
  10,
  2,
  11,
  3,
  12,
  ~0u,
  4,
  13,
  14,
  15,
  16,
  18,
  19,
  17,
  21,
  20,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_host_details, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_host_details, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_host_details, hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_host_details, thread_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_host_details, crawl_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fetcher_host_details, avg_response_time_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_upload_detail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_upload_detail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_upload_detail, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_upload_detail, flag_disabled_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, text_context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, user_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, user_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, public_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, public_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, download_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, post_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, views_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, share_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, spam_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, porno_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_document_detail, source_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insta_profile_extra, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insta_profile_extra, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insta_profile_extra, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insta_profile_extra, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insta_profile_extra, posts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insta_profile_extra, followers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insta_profile_extra, following_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insta_profile_extra, official_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insta_profile_extra, download_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insta_profile_extra, avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insta_profile_extra, last_),
  0,
  1,
  3,
  4,
  5,
  7,
  6,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vk_snippet_data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vk_snippet_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vk_snippet_data, bahroma_json_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vk_snippet_data, phalanx_images_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_discovery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_discovery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_discovery, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_discovery, http_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_discovery, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_discovery, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_discovery, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_discovery, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_discovery, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_discovery, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_discovery, zindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_discovery, href_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_discovery, meta_),
  0,
  5,
  1,
  2,
  6,
  7,
  8,
  9,
  10,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(images_discovery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(images_discovery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(images_discovery, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(images_discovery, download_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(images_discovery, images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(images_discovery, html_),
  0,
  2,
  ~0u,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(SerializedBlock)},
  { 11, 23, sizeof(fetcher_image)},
  { 30, 58, sizeof(fetcher_document_detail)},
  { 81, 90, sizeof(fetcher_host_details)},
  { 94, 101, sizeof(url_upload_detail)},
  { 103, 125, sizeof(post_document_detail)},
  { 142, 156, sizeof(insta_profile_extra)},
  { 165, 172, sizeof(vk_snippet_data)},
  { 174, 190, sizeof(image_discovery)},
  { 201, 210, sizeof(images_discovery)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SerializedBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_fetcher_image_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_fetcher_document_detail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_fetcher_host_details_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_url_upload_detail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_post_document_detail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_insta_profile_extra_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_vk_snippet_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_image_discovery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_images_discovery_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fetcher_storage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_fetch_5flist_2eproto::InitDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::InitDefaults();
  _SerializedBlock_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SerializedBlock_default_instance_);_fetcher_image_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_fetcher_image_default_instance_);_fetcher_document_detail_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_fetcher_document_detail_default_instance_);_fetcher_host_details_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_fetcher_host_details_default_instance_);_url_upload_detail_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_url_upload_detail_default_instance_);_post_document_detail_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_post_document_detail_default_instance_);_insta_profile_extra_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_insta_profile_extra_default_instance_);_vk_snippet_data_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_vk_snippet_data_default_instance_);_image_discovery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_image_discovery_default_instance_);_images_discovery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_images_discovery_default_instance_);_fetcher_document_detail_default_instance_._instance.get_mutable()->fetch_url_proto_ = const_cast< ::ru::mail::go::webbase::blobs::FetchUrl*>(
      ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance());
  _fetcher_document_detail_default_instance_._instance.get_mutable()->profileimage_ = const_cast< ::gogo::fetcher::fetcher_image*>(
      ::gogo::fetcher::fetcher_image::internal_default_instance());
  _fetcher_document_detail_default_instance_._instance.get_mutable()->coverimage_ = const_cast< ::gogo::fetcher::fetcher_image*>(
      ::gogo::fetcher::fetcher_image::internal_default_instance());
  _fetcher_document_detail_default_instance_._instance.get_mutable()->microdata_markup_ = const_cast< ::ru::mail::go::webbase::blobs::PublicationMarkup*>(
      ::ru::mail::go::webbase::blobs::PublicationMarkup::internal_default_instance());
  _fetcher_document_detail_default_instance_._instance.get_mutable()->imagesonpage_ = const_cast< ::gogo::fetcher::images_discovery*>(
      ::gogo::fetcher::images_discovery::internal_default_instance());
  _insta_profile_extra_default_instance_._instance.get_mutable()->avatar_ = const_cast< ::gogo::fetcher::fetcher_image*>(
      ::gogo::fetcher::fetcher_image::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025fetcher_storage.proto\022\014gogo.fetcher\032\020f"
      "etch_list.proto\032\024document_enums.proto\"Q\n"
      "\017SerializedBlock\022\017\n\007version\030\001 \001(\005\022\030\n\020pro"
      "to_class_name\030\002 \001(\t\022\023\n\013proto_blobs\030\003 \003(\014"
      "\"\356\001\n\rfetcher_image\022\013\n\003url\030\001 \002(\t\022\017\n\007conte"
      "nt\030\002 \002(\014\022\025\n\rdownload_time\030\003 \001(\004\022\r\n\005width"
      "\030\004 \001(\r\022\016\n\006height\030\005 \001(\r\0225\n\006format\030\006 \001(\0162%"
      ".ru.mail.go.webbase.blobs.ContentType\0220\n"
      "\004type\030\007 \001(\0162\".gogo.fetcher.fetcher_image"
      ".type_t\" \n\006type_t\022\013\n\007picture\020\001\022\t\n\005video\020"
      "\002\"\203\014\n\027fetcher_document_detail\022\013\n\003url\030\001 \002"
      "(\t\022\025\n\rdownload_time\030\002 \002(\004\022\017\n\007content\030\003 \001"
      "(\014\022:\n\004flag\030\004 \002(\0162,.gogo.fetcher.fetcher_"
      "document_detail.flag_t\022\021\n\thttp_head\030\005 \001("
      "\014\022<\n\005error\030\006 \001(\0162-.gogo.fetcher.fetcher_"
      "document_detail.error_t\022\n\n\002ip\030\007 \001(\t\022\r\n\005f"
      "lags\030\010 \001(\r\022\021\n\tredirects\030\t \003(\t\022;\n\017fetch_u"
      "rl_proto\030\n \001(\0132\".ru.mail.go.webbase.blob"
      "s.FetchUrl\0226\n\tforumType\030\013 \001(\0162#.ru.mail."
      "go.webbase.blobs.ForumType\022:\n\013robotsStat"
      "e\030\014 \001(\0162%.ru.mail.go.webbase.blobs.Robot"
      "sState\0228\n\nrenderType\030\r \001(\0162$.ru.mail.go."
      "webbase.blobs.RenderType\022:\n\016forcedEncodi"
      "ng\030\016 \001(\0162\".ru.mail.go.webbase.blobs.Enco"
      "ding\022\"\n\023leadToProviderBlock\030\022 \001(\010:\005false"
      "\022\"\n\023isFromRedirectChain\030\023 \001(\010:\005false\0228\n\n"
      "sourceMark\030\024 \001(\0162$.ru.mail.go.webbase.bl"
      "obs.SourceMark\022G\n\rredirect_type\030\025 \001(\01620."
      "gogo.fetcher.fetcher_document_detail.red"
      "irect_t\022\025\n\rscriptRemoved\030\027 \001(\010\0221\n\014profil"
      "eImage\030\030 \001(\0132\033.gogo.fetcher.fetcher_imag"
      "e\022/\n\ncoverImage\030\031 \001(\0132\033.gogo.fetcher.fet"
      "cher_image\022E\n\020microdata_markup\030\032 \001(\0132+.r"
      "u.mail.go.webbase.blobs.PublicationMarku"
      "p\0224\n\014imagesOnPage\030\033 \001(\0132\036.gogo.fetcher.i"
      "mages_discovery\"\201\001\n\006flag_t\022\t\n\005empty\020\000\022\013\n"
      "\007fetched\020\001\022\020\n\014conn_failure\020\002\022\r\n\tfetch_er"
      "r\020\003\022\013\n\007skipped\020\004\022\023\n\017robots_filtered\020\005\022\017\n"
      "\013blacklisted\020\006\022\013\n\007rkn_ban\020\007\"\346\001\n\007error_t\022"
      "\010\n\004none\020\000\022\013\n\007resolve\020\001\022\016\n\nconnection\020\002\022\016"
      "\n\nempty_head\020\003\022\024\n\020invalid_protocol\020\004\022\023\n\017"
      "socket_buf_size\020\005\022\r\n\thead_size\020\006\022\r\n\tbody"
      "_size\020\007\022\024\n\020error_in_parsing\020\010\022\026\n\022filtere"
      "d_by_robots\020\t\022\030\n\024skipped_by_blacklist\020\n\022"
      "\023\n\017connection_lost\020\013\"\240\001\n\nredirect_t\022\021\n\rr"
      "edirect_none\020\000\022\023\n\017redirect_normal\020\001\022\022\n\016r"
      "edirect_outer\020\002\022\025\n\021redirect_overflow\020\003\022\025"
      "\n\021redirect_infinite\020\004\022\024\n\020redirect_failur"
      "e\020\005\022\022\n\016redirect_other\020\006\"n\n\024fetcher_host_"
      "details\022\020\n\010hostname\030\001 \002(\t\022\024\n\014thread_limi"
      "t\030\002 \001(\r\022\023\n\013crawl_delay\030\003 \001(\r\022\031\n\021avg_resp"
      "onse_time\030\004 \001(\001\"7\n\021url_upload_detail\022\013\n\003"
      "url\030\001 \001(\t\022\025\n\rflag_disabled\030\002 \001(\010\"\251\004\n\024pos"
      "t_document_detail\022\013\n\003url\030\001 \002(\t\022\r\n\005title\030"
      "\002 \002(\t\022\024\n\014text_context\030\003 \002(\t\022\021\n\tuser_name"
      "\030\004 \001(\t\022\020\n\010user_url\030\005 \001(\t\022\023\n\013public_name\030"
      "\006 \001(\t\022\022\n\npublic_url\030\007 \001(\t\022\025\n\rdownload_ti"
      "me\030\010 \002(\004\022*\n\005image\030\t \003(\0132\033.gogo.fetcher.f"
      "etcher_image\022\021\n\tpost_time\030\n \001(\004\022\r\n\005views"
      "\030\013 \001(\r\022\r\n\005likes\030\014 \001(\r\022\r\n\005share\030\r \001(\r\022\022\n\n"
      "spam_level\030\016 \001(\r\022\023\n\013porno_level\030\017 \001(\r\0227\n"
      "\004type\030\020 \001(\0162).gogo.fetcher.post_document"
      "_detail.type_t\022;\n\006source\030\021 \001(\0162+.gogo.fe"
      "tcher.post_document_detail.source_t\"[\n\006t"
      "ype_t\022\010\n\004post\020\001\022\014\n\010longread\020\002\022\t\n\005video\020\003"
      "\022\t\n\005topic\020\004\022\013\n\007profile\020\005\022\t\n\005group\020\006\022\013\n\007o"
      "rganic\020\007\"\022\n\010source_t\022\006\n\002vk\020\001\"\350\001\n\023insta_p"
      "rofile_extra\022\014\n\004name\030\001 \002(\t\022\r\n\005login\030\002 \002("
      "\t\022\r\n\005posts\030\003 \002(\004\022\021\n\tfollowers\030\004 \002(\004\022\021\n\tf"
      "ollowing\030\005 \002(\004\022\020\n\010official\030\006 \002(\010\022\025\n\rdown"
      "load_time\030\007 \002(\004\022+\n\006avatar\030\010 \001(\0132\033.gogo.f"
      "etcher.fetcher_image\022)\n\004last\030\t \003(\0132\033.gog"
      "o.fetcher.fetcher_image\"\\\n\017vk_snippet_da"
      "ta\022\024\n\014bahroma_json\030\001 \002(\t\0223\n\016phalanx_imag"
      "es\030\002 \003(\0132\033.gogo.fetcher.fetcher_image\"\273\001"
      "\n\017image_discovery\022\013\n\003url\030\001 \002(\t\022\023\n\013http_s"
      "tatus\030\002 \002(\r\022\017\n\007headers\030\003 \001(\t\022\017\n\007content\030"
      "\004 \001(\014\022\r\n\005width\030\005 \001(\r\022\016\n\006height\030\006 \001(\r\022\014\n\004"
      "left\030\007 \001(\005\022\013\n\003top\030\010 \001(\005\022\016\n\006zindex\030\t \001(\005\022"
      "\014\n\004href\030\n \001(\t\022\014\n\004meta\030\013 \001(\t\"s\n\020images_di"
      "scovery\022\013\n\003url\030\001 \002(\t\022\025\n\rdownload_time\030\002 "
      "\002(\004\022-\n\006images\030\003 \003(\0132\035.gogo.fetcher.image"
      "_discovery\022\014\n\004html\030\004 \001(\tB\016B\014outputFormat"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fetcher_storage.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::blobs::protobuf_fetch_5flist_2eproto::AddDescriptors();
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fetcher_5fstorage_2eproto

const ::google::protobuf::EnumDescriptor* fetcher_image_type_t_descriptor() {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_enum_descriptors[0];
}
bool fetcher_image_type_t_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const fetcher_image_type_t fetcher_image::picture;
const fetcher_image_type_t fetcher_image::video;
const fetcher_image_type_t fetcher_image::type_t_MIN;
const fetcher_image_type_t fetcher_image::type_t_MAX;
const int fetcher_image::type_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* fetcher_document_detail_flag_t_descriptor() {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_enum_descriptors[1];
}
bool fetcher_document_detail_flag_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const fetcher_document_detail_flag_t fetcher_document_detail::empty;
const fetcher_document_detail_flag_t fetcher_document_detail::fetched;
const fetcher_document_detail_flag_t fetcher_document_detail::conn_failure;
const fetcher_document_detail_flag_t fetcher_document_detail::fetch_err;
const fetcher_document_detail_flag_t fetcher_document_detail::skipped;
const fetcher_document_detail_flag_t fetcher_document_detail::robots_filtered;
const fetcher_document_detail_flag_t fetcher_document_detail::blacklisted;
const fetcher_document_detail_flag_t fetcher_document_detail::rkn_ban;
const fetcher_document_detail_flag_t fetcher_document_detail::flag_t_MIN;
const fetcher_document_detail_flag_t fetcher_document_detail::flag_t_MAX;
const int fetcher_document_detail::flag_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* fetcher_document_detail_error_t_descriptor() {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_enum_descriptors[2];
}
bool fetcher_document_detail_error_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const fetcher_document_detail_error_t fetcher_document_detail::none;
const fetcher_document_detail_error_t fetcher_document_detail::resolve;
const fetcher_document_detail_error_t fetcher_document_detail::connection;
const fetcher_document_detail_error_t fetcher_document_detail::empty_head;
const fetcher_document_detail_error_t fetcher_document_detail::invalid_protocol;
const fetcher_document_detail_error_t fetcher_document_detail::socket_buf_size;
const fetcher_document_detail_error_t fetcher_document_detail::head_size;
const fetcher_document_detail_error_t fetcher_document_detail::body_size;
const fetcher_document_detail_error_t fetcher_document_detail::error_in_parsing;
const fetcher_document_detail_error_t fetcher_document_detail::filtered_by_robots;
const fetcher_document_detail_error_t fetcher_document_detail::skipped_by_blacklist;
const fetcher_document_detail_error_t fetcher_document_detail::connection_lost;
const fetcher_document_detail_error_t fetcher_document_detail::error_t_MIN;
const fetcher_document_detail_error_t fetcher_document_detail::error_t_MAX;
const int fetcher_document_detail::error_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* fetcher_document_detail_redirect_t_descriptor() {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_enum_descriptors[3];
}
bool fetcher_document_detail_redirect_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const fetcher_document_detail_redirect_t fetcher_document_detail::redirect_none;
const fetcher_document_detail_redirect_t fetcher_document_detail::redirect_normal;
const fetcher_document_detail_redirect_t fetcher_document_detail::redirect_outer;
const fetcher_document_detail_redirect_t fetcher_document_detail::redirect_overflow;
const fetcher_document_detail_redirect_t fetcher_document_detail::redirect_infinite;
const fetcher_document_detail_redirect_t fetcher_document_detail::redirect_failure;
const fetcher_document_detail_redirect_t fetcher_document_detail::redirect_other;
const fetcher_document_detail_redirect_t fetcher_document_detail::redirect_t_MIN;
const fetcher_document_detail_redirect_t fetcher_document_detail::redirect_t_MAX;
const int fetcher_document_detail::redirect_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* post_document_detail_type_t_descriptor() {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_enum_descriptors[4];
}
bool post_document_detail_type_t_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const post_document_detail_type_t post_document_detail::post;
const post_document_detail_type_t post_document_detail::longread;
const post_document_detail_type_t post_document_detail::video;
const post_document_detail_type_t post_document_detail::topic;
const post_document_detail_type_t post_document_detail::profile;
const post_document_detail_type_t post_document_detail::group;
const post_document_detail_type_t post_document_detail::organic;
const post_document_detail_type_t post_document_detail::type_t_MIN;
const post_document_detail_type_t post_document_detail::type_t_MAX;
const int post_document_detail::type_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* post_document_detail_source_t_descriptor() {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_enum_descriptors[5];
}
bool post_document_detail_source_t_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const post_document_detail_source_t post_document_detail::vk;
const post_document_detail_source_t post_document_detail::source_t_MIN;
const post_document_detail_source_t post_document_detail::source_t_MAX;
const int post_document_detail::source_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedBlock::kVersionFieldNumber;
const int SerializedBlock::kProtoClassNameFieldNumber;
const int SerializedBlock::kProtoBlobsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedBlock::SerializedBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.fetcher.SerializedBlock)
}
SerializedBlock::SerializedBlock(const SerializedBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      proto_blobs_(from.proto_blobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proto_class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proto_class_name()) {
    proto_class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_class_name_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:gogo.fetcher.SerializedBlock)
}

void SerializedBlock::SharedCtor() {
  _cached_size_ = 0;
  proto_class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
}

SerializedBlock::~SerializedBlock() {
  // @@protoc_insertion_point(destructor:gogo.fetcher.SerializedBlock)
  SharedDtor();
}

void SerializedBlock::SharedDtor() {
  proto_class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SerializedBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedBlock::descriptor() {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SerializedBlock& SerializedBlock::default_instance() {
  protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

SerializedBlock* SerializedBlock::New(::google::protobuf::Arena* arena) const {
  SerializedBlock* n = new SerializedBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.fetcher.SerializedBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proto_blobs_.Clear();
  if (has_proto_class_name()) {
    GOOGLE_DCHECK(!proto_class_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*proto_class_name_.UnsafeRawStringPointer())->clear();
  }
  version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SerializedBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.fetcher.SerializedBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string proto_class_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proto_class_name().data(), static_cast<int>(this->proto_class_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.SerializedBlock.proto_class_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes proto_blobs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_proto_blobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.fetcher.SerializedBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.fetcher.SerializedBlock)
  return false;
#undef DO_
}

void SerializedBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.fetcher.SerializedBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional string proto_class_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_class_name().data(), static_cast<int>(this->proto_class_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.SerializedBlock.proto_class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proto_class_name(), output);
  }

  // repeated bytes proto_blobs = 3;
  for (int i = 0, n = this->proto_blobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->proto_blobs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.fetcher.SerializedBlock)
}

::google::protobuf::uint8* SerializedBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.fetcher.SerializedBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional string proto_class_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_class_name().data(), static_cast<int>(this->proto_class_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.SerializedBlock.proto_class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proto_class_name(), target);
  }

  // repeated bytes proto_blobs = 3;
  for (int i = 0, n = this->proto_blobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->proto_blobs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.fetcher.SerializedBlock)
  return target;
}

size_t SerializedBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.fetcher.SerializedBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes proto_blobs = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->proto_blobs_size());
  for (int i = 0, n = this->proto_blobs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->proto_blobs(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string proto_class_name = 2;
    if (has_proto_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proto_class_name());
    }

    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.fetcher.SerializedBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.fetcher.SerializedBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.fetcher.SerializedBlock)
    MergeFrom(*source);
  }
}

void SerializedBlock::MergeFrom(const SerializedBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.fetcher.SerializedBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proto_blobs_.MergeFrom(from.proto_blobs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_proto_class_name();
      proto_class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_class_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SerializedBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.fetcher.SerializedBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedBlock::CopyFrom(const SerializedBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.fetcher.SerializedBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedBlock::IsInitialized() const {
  return true;
}

void SerializedBlock::Swap(SerializedBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedBlock::InternalSwap(SerializedBlock* other) {
  using std::swap;
  proto_blobs_.InternalSwap(&other->proto_blobs_);
  proto_class_name_.Swap(&other->proto_class_name_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedBlock::GetMetadata() const {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedBlock

// optional int32 version = 1;
bool SerializedBlock::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SerializedBlock::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void SerializedBlock::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void SerializedBlock::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 SerializedBlock::version() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.SerializedBlock.version)
  return version_;
}
void SerializedBlock::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.SerializedBlock.version)
}

// optional string proto_class_name = 2;
bool SerializedBlock::has_proto_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SerializedBlock::set_has_proto_class_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SerializedBlock::clear_has_proto_class_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SerializedBlock::clear_proto_class_name() {
  proto_class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proto_class_name();
}
const ::std::string& SerializedBlock::proto_class_name() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.SerializedBlock.proto_class_name)
  return proto_class_name_.GetNoArena();
}
void SerializedBlock::set_proto_class_name(const ::std::string& value) {
  set_has_proto_class_name();
  proto_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.SerializedBlock.proto_class_name)
}
#if LANG_CXX11
void SerializedBlock::set_proto_class_name(::std::string&& value) {
  set_has_proto_class_name();
  proto_class_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.SerializedBlock.proto_class_name)
}
#endif
void SerializedBlock::set_proto_class_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proto_class_name();
  proto_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.SerializedBlock.proto_class_name)
}
void SerializedBlock::set_proto_class_name(const char* value, size_t size) {
  set_has_proto_class_name();
  proto_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.SerializedBlock.proto_class_name)
}
::std::string* SerializedBlock::mutable_proto_class_name() {
  set_has_proto_class_name();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.SerializedBlock.proto_class_name)
  return proto_class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SerializedBlock::release_proto_class_name() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.SerializedBlock.proto_class_name)
  clear_has_proto_class_name();
  return proto_class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SerializedBlock::set_allocated_proto_class_name(::std::string* proto_class_name) {
  if (proto_class_name != NULL) {
    set_has_proto_class_name();
  } else {
    clear_has_proto_class_name();
  }
  proto_class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto_class_name);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.SerializedBlock.proto_class_name)
}

// repeated bytes proto_blobs = 3;
int SerializedBlock::proto_blobs_size() const {
  return proto_blobs_.size();
}
void SerializedBlock::clear_proto_blobs() {
  proto_blobs_.Clear();
}
const ::std::string& SerializedBlock::proto_blobs(int index) const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.SerializedBlock.proto_blobs)
  return proto_blobs_.Get(index);
}
::std::string* SerializedBlock::mutable_proto_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.SerializedBlock.proto_blobs)
  return proto_blobs_.Mutable(index);
}
void SerializedBlock::set_proto_blobs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.fetcher.SerializedBlock.proto_blobs)
  proto_blobs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SerializedBlock::set_proto_blobs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.fetcher.SerializedBlock.proto_blobs)
  proto_blobs_.Mutable(index)->assign(std::move(value));
}
#endif
void SerializedBlock::set_proto_blobs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  proto_blobs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.SerializedBlock.proto_blobs)
}
void SerializedBlock::set_proto_blobs(int index, const void* value, size_t size) {
  proto_blobs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.SerializedBlock.proto_blobs)
}
::std::string* SerializedBlock::add_proto_blobs() {
  // @@protoc_insertion_point(field_add_mutable:gogo.fetcher.SerializedBlock.proto_blobs)
  return proto_blobs_.Add();
}
void SerializedBlock::add_proto_blobs(const ::std::string& value) {
  proto_blobs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.fetcher.SerializedBlock.proto_blobs)
}
#if LANG_CXX11
void SerializedBlock::add_proto_blobs(::std::string&& value) {
  proto_blobs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.fetcher.SerializedBlock.proto_blobs)
}
#endif
void SerializedBlock::add_proto_blobs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  proto_blobs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.fetcher.SerializedBlock.proto_blobs)
}
void SerializedBlock::add_proto_blobs(const void* value, size_t size) {
  proto_blobs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.fetcher.SerializedBlock.proto_blobs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SerializedBlock::proto_blobs() const {
  // @@protoc_insertion_point(field_list:gogo.fetcher.SerializedBlock.proto_blobs)
  return proto_blobs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SerializedBlock::mutable_proto_blobs() {
  // @@protoc_insertion_point(field_mutable_list:gogo.fetcher.SerializedBlock.proto_blobs)
  return &proto_blobs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fetcher_image::kUrlFieldNumber;
const int fetcher_image::kContentFieldNumber;
const int fetcher_image::kDownloadTimeFieldNumber;
const int fetcher_image::kWidthFieldNumber;
const int fetcher_image::kHeightFieldNumber;
const int fetcher_image::kFormatFieldNumber;
const int fetcher_image::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fetcher_image::fetcher_image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.fetcher.fetcher_image)
}
fetcher_image::fetcher_image(const fetcher_image& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&download_time_, &from.download_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&download_time_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:gogo.fetcher.fetcher_image)
}

void fetcher_image::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&download_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&download_time_)) + sizeof(format_));
  type_ = 1;
}

fetcher_image::~fetcher_image() {
  // @@protoc_insertion_point(destructor:gogo.fetcher.fetcher_image)
  SharedDtor();
}

void fetcher_image::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void fetcher_image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fetcher_image::descriptor() {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const fetcher_image& fetcher_image::default_instance() {
  protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

fetcher_image* fetcher_image::New(::google::protobuf::Arena* arena) const {
  fetcher_image* n = new fetcher_image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fetcher_image::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.fetcher.fetcher_image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&download_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&format_) -
        reinterpret_cast<char*>(&download_time_)) + sizeof(format_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fetcher_image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.fetcher.fetcher_image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.fetcher_image.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 download_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_download_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &download_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ContentType format = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ContentType_IsValid(value)) {
            set_format(static_cast< ::ru::mail::go::webbase::blobs::ContentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.fetcher.fetcher_image.type_t type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::fetcher::fetcher_image_type_t_IsValid(value)) {
            set_type(static_cast< ::gogo::fetcher::fetcher_image_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.fetcher.fetcher_image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.fetcher.fetcher_image)
  return false;
#undef DO_
}

void fetcher_image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.fetcher.fetcher_image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.fetcher_image.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required bytes content = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  // optional uint64 download_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->download_time(), output);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->height(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ContentType format = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->format(), output);
  }

  // optional .gogo.fetcher.fetcher_image.type_t type = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.fetcher.fetcher_image)
}

::google::protobuf::uint8* fetcher_image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.fetcher.fetcher_image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.fetcher_image.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required bytes content = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  // optional uint64 download_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->download_time(), target);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->height(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ContentType format = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->format(), target);
  }

  // optional .gogo.fetcher.fetcher_image.type_t type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.fetcher.fetcher_image)
  return target;
}

size_t fetcher_image::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.fetcher.fetcher_image)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_content()) {
    // required bytes content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  return total_size;
}
size_t fetcher_image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.fetcher.fetcher_image)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required bytes content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 124u) {
    // optional uint64 download_time = 3;
    if (has_download_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->download_time());
    }

    // optional uint32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional .ru.mail.go.webbase.blobs.ContentType format = 6;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

    // optional .gogo.fetcher.fetcher_image.type_t type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fetcher_image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.fetcher.fetcher_image)
  GOOGLE_DCHECK_NE(&from, this);
  const fetcher_image* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fetcher_image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.fetcher.fetcher_image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.fetcher.fetcher_image)
    MergeFrom(*source);
  }
}

void fetcher_image::MergeFrom(const fetcher_image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.fetcher.fetcher_image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      download_time_ = from.download_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      format_ = from.format_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void fetcher_image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.fetcher.fetcher_image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fetcher_image::CopyFrom(const fetcher_image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.fetcher.fetcher_image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fetcher_image::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void fetcher_image::Swap(fetcher_image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fetcher_image::InternalSwap(fetcher_image* other) {
  using std::swap;
  url_.Swap(&other->url_);
  content_.Swap(&other->content_);
  swap(download_time_, other->download_time_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(format_, other->format_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fetcher_image::GetMetadata() const {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fetcher_image

// required string url = 1;
bool fetcher_image::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void fetcher_image::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void fetcher_image::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void fetcher_image::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& fetcher_image::url() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_image.url)
  return url_.GetNoArena();
}
void fetcher_image::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_image.url)
}
#if LANG_CXX11
void fetcher_image::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.fetcher_image.url)
}
#endif
void fetcher_image::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.fetcher_image.url)
}
void fetcher_image::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.fetcher_image.url)
}
::std::string* fetcher_image::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_image.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* fetcher_image::release_url() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_image.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void fetcher_image::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_image.url)
}

// required bytes content = 2;
bool fetcher_image::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void fetcher_image::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void fetcher_image::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void fetcher_image::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& fetcher_image::content() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_image.content)
  return content_.GetNoArena();
}
void fetcher_image::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_image.content)
}
#if LANG_CXX11
void fetcher_image::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.fetcher_image.content)
}
#endif
void fetcher_image::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.fetcher_image.content)
}
void fetcher_image::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.fetcher_image.content)
}
::std::string* fetcher_image::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_image.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* fetcher_image::release_content() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_image.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void fetcher_image::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_image.content)
}

// optional uint64 download_time = 3;
bool fetcher_image::has_download_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void fetcher_image::set_has_download_time() {
  _has_bits_[0] |= 0x00000004u;
}
void fetcher_image::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void fetcher_image::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
::google::protobuf::uint64 fetcher_image::download_time() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_image.download_time)
  return download_time_;
}
void fetcher_image::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_image.download_time)
}

// optional uint32 width = 4;
bool fetcher_image::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void fetcher_image::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void fetcher_image::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void fetcher_image::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 fetcher_image::width() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_image.width)
  return width_;
}
void fetcher_image::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_image.width)
}

// optional uint32 height = 5;
bool fetcher_image::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void fetcher_image::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
void fetcher_image::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void fetcher_image::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 fetcher_image::height() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_image.height)
  return height_;
}
void fetcher_image::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_image.height)
}

// optional .ru.mail.go.webbase.blobs.ContentType format = 6;
bool fetcher_image::has_format() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void fetcher_image::set_has_format() {
  _has_bits_[0] |= 0x00000020u;
}
void fetcher_image::clear_has_format() {
  _has_bits_[0] &= ~0x00000020u;
}
void fetcher_image::clear_format() {
  format_ = 0;
  clear_has_format();
}
::ru::mail::go::webbase::blobs::ContentType fetcher_image::format() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_image.format)
  return static_cast< ::ru::mail::go::webbase::blobs::ContentType >(format_);
}
void fetcher_image::set_format(::ru::mail::go::webbase::blobs::ContentType value) {
  assert(::ru::mail::go::webbase::blobs::ContentType_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_image.format)
}

// optional .gogo.fetcher.fetcher_image.type_t type = 7;
bool fetcher_image::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void fetcher_image::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
void fetcher_image::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void fetcher_image::clear_type() {
  type_ = 1;
  clear_has_type();
}
::gogo::fetcher::fetcher_image_type_t fetcher_image::type() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_image.type)
  return static_cast< ::gogo::fetcher::fetcher_image_type_t >(type_);
}
void fetcher_image::set_type(::gogo::fetcher::fetcher_image_type_t value) {
  assert(::gogo::fetcher::fetcher_image_type_t_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_image.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fetcher_document_detail::kUrlFieldNumber;
const int fetcher_document_detail::kDownloadTimeFieldNumber;
const int fetcher_document_detail::kContentFieldNumber;
const int fetcher_document_detail::kFlagFieldNumber;
const int fetcher_document_detail::kHttpHeadFieldNumber;
const int fetcher_document_detail::kErrorFieldNumber;
const int fetcher_document_detail::kIpFieldNumber;
const int fetcher_document_detail::kFlagsFieldNumber;
const int fetcher_document_detail::kRedirectsFieldNumber;
const int fetcher_document_detail::kFetchUrlProtoFieldNumber;
const int fetcher_document_detail::kForumTypeFieldNumber;
const int fetcher_document_detail::kRobotsStateFieldNumber;
const int fetcher_document_detail::kRenderTypeFieldNumber;
const int fetcher_document_detail::kForcedEncodingFieldNumber;
const int fetcher_document_detail::kLeadToProviderBlockFieldNumber;
const int fetcher_document_detail::kIsFromRedirectChainFieldNumber;
const int fetcher_document_detail::kSourceMarkFieldNumber;
const int fetcher_document_detail::kRedirectTypeFieldNumber;
const int fetcher_document_detail::kScriptRemovedFieldNumber;
const int fetcher_document_detail::kProfileImageFieldNumber;
const int fetcher_document_detail::kCoverImageFieldNumber;
const int fetcher_document_detail::kMicrodataMarkupFieldNumber;
const int fetcher_document_detail::kImagesOnPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fetcher_document_detail::fetcher_document_detail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.fetcher.fetcher_document_detail)
}
fetcher_document_detail::fetcher_document_detail(const fetcher_document_detail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      redirects_(from.redirects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  http_head_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_http_head()) {
    http_head_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_head_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.has_fetch_url_proto()) {
    fetch_url_proto_ = new ::ru::mail::go::webbase::blobs::FetchUrl(*from.fetch_url_proto_);
  } else {
    fetch_url_proto_ = NULL;
  }
  if (from.has_profileimage()) {
    profileimage_ = new ::gogo::fetcher::fetcher_image(*from.profileimage_);
  } else {
    profileimage_ = NULL;
  }
  if (from.has_coverimage()) {
    coverimage_ = new ::gogo::fetcher::fetcher_image(*from.coverimage_);
  } else {
    coverimage_ = NULL;
  }
  if (from.has_microdata_markup()) {
    microdata_markup_ = new ::ru::mail::go::webbase::blobs::PublicationMarkup(*from.microdata_markup_);
  } else {
    microdata_markup_ = NULL;
  }
  if (from.has_imagesonpage()) {
    imagesonpage_ = new ::gogo::fetcher::images_discovery(*from.imagesonpage_);
  } else {
    imagesonpage_ = NULL;
  }
  ::memcpy(&download_time_, &from.download_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&redirect_type_) -
    reinterpret_cast<char*>(&download_time_)) + sizeof(redirect_type_));
  // @@protoc_insertion_point(copy_constructor:gogo.fetcher.fetcher_document_detail)
}

void fetcher_document_detail::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_head_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fetch_url_proto_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&redirect_type_) -
      reinterpret_cast<char*>(&fetch_url_proto_)) + sizeof(redirect_type_));
}

fetcher_document_detail::~fetcher_document_detail() {
  // @@protoc_insertion_point(destructor:gogo.fetcher.fetcher_document_detail)
  SharedDtor();
}

void fetcher_document_detail::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_head_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fetch_url_proto_;
  if (this != internal_default_instance()) delete profileimage_;
  if (this != internal_default_instance()) delete coverimage_;
  if (this != internal_default_instance()) delete microdata_markup_;
  if (this != internal_default_instance()) delete imagesonpage_;
}

void fetcher_document_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fetcher_document_detail::descriptor() {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const fetcher_document_detail& fetcher_document_detail::default_instance() {
  protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

fetcher_document_detail* fetcher_document_detail::New(::google::protobuf::Arena* arena) const {
  fetcher_document_detail* n = new fetcher_document_detail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fetcher_document_detail::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.fetcher.fetcher_document_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  redirects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!http_head_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*http_head_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(fetch_url_proto_ != NULL);
      fetch_url_proto_->::ru::mail::go::webbase::blobs::FetchUrl::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(profileimage_ != NULL);
      profileimage_->::gogo::fetcher::fetcher_image::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(coverimage_ != NULL);
      coverimage_->::gogo::fetcher::fetcher_image::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(microdata_markup_ != NULL);
      microdata_markup_->::ru::mail::go::webbase::blobs::PublicationMarkup::Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(imagesonpage_ != NULL);
    imagesonpage_->::gogo::fetcher::images_discovery::Clear();
  }
  if (cached_has_bits & 65024u) {
    ::memset(&download_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rendertype_) -
        reinterpret_cast<char*>(&download_time_)) + sizeof(rendertype_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&forcedencoding_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&redirect_type_) -
        reinterpret_cast<char*>(&forcedencoding_)) + sizeof(redirect_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fetcher_document_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.fetcher.fetcher_document_detail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.fetcher_document_detail.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 download_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_download_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &download_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gogo.fetcher.fetcher_document_detail.flag_t flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::fetcher::fetcher_document_detail_flag_t_IsValid(value)) {
            set_flag(static_cast< ::gogo::fetcher::fetcher_document_detail_flag_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes http_head = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_http_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.fetcher.fetcher_document_detail.error_t error = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::fetcher::fetcher_document_detail_error_t_IsValid(value)) {
            set_error(static_cast< ::gogo::fetcher::fetcher_document_detail_error_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.fetcher_document_detail.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string redirects = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_redirects()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirects(this->redirects_size() - 1).data(),
            static_cast<int>(this->redirects(this->redirects_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.fetcher_document_detail.redirects");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.FetchUrl fetch_url_proto = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetch_url_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ForumType forumType = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ForumType_IsValid(value)) {
            set_forumtype(static_cast< ::ru::mail::go::webbase::blobs::ForumType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.RobotsState robotsState = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::RobotsState_IsValid(value)) {
            set_robotsstate(static_cast< ::ru::mail::go::webbase::blobs::RobotsState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.RenderType renderType = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::RenderType_IsValid(value)) {
            set_rendertype(static_cast< ::ru::mail::go::webbase::blobs::RenderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                13, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Encoding forcedEncoding = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Encoding_IsValid(value)) {
            set_forcedencoding(static_cast< ::ru::mail::go::webbase::blobs::Encoding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool leadToProviderBlock = 18 [default = false];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_leadtoproviderblock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leadtoproviderblock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isFromRedirectChain = 19 [default = false];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_isfromredirectchain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfromredirectchain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SourceMark sourceMark = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::SourceMark_IsValid(value)) {
            set_sourcemark(static_cast< ::ru::mail::go::webbase::blobs::SourceMark >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                20, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.fetcher.fetcher_document_detail.redirect_t redirect_type = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::fetcher::fetcher_document_detail_redirect_t_IsValid(value)) {
            set_redirect_type(static_cast< ::gogo::fetcher::fetcher_document_detail_redirect_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool scriptRemoved = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_scriptremoved();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scriptremoved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.fetcher.fetcher_image profileImage = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profileimage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.fetcher.fetcher_image coverImage = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coverimage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.PublicationMarkup microdata_markup = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_microdata_markup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.fetcher.images_discovery imagesOnPage = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagesonpage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.fetcher.fetcher_document_detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.fetcher.fetcher_document_detail)
  return false;
#undef DO_
}

void fetcher_document_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.fetcher.fetcher_document_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.fetcher_document_detail.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required uint64 download_time = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->download_time(), output);
  }

  // optional bytes content = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // required .gogo.fetcher.fetcher_document_detail.flag_t flag = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->flag(), output);
  }

  // optional bytes http_head = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->http_head(), output);
  }

  // optional .gogo.fetcher.fetcher_document_detail.error_t error = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->error(), output);
  }

  // optional string ip = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.fetcher_document_detail.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ip(), output);
  }

  // optional uint32 flags = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->flags(), output);
  }

  // repeated string redirects = 9;
  for (int i = 0, n = this->redirects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirects(i).data(), static_cast<int>(this->redirects(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.fetcher_document_detail.redirects");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->redirects(i), output);
  }

  // optional .ru.mail.go.webbase.blobs.FetchUrl fetch_url_proto = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->fetch_url_proto_, output);
  }

  // optional .ru.mail.go.webbase.blobs.ForumType forumType = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->forumtype(), output);
  }

  // optional .ru.mail.go.webbase.blobs.RobotsState robotsState = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->robotsstate(), output);
  }

  // optional .ru.mail.go.webbase.blobs.RenderType renderType = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->rendertype(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Encoding forcedEncoding = 14;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->forcedencoding(), output);
  }

  // optional bool leadToProviderBlock = 18 [default = false];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->leadtoproviderblock(), output);
  }

  // optional bool isFromRedirectChain = 19 [default = false];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->isfromredirectchain(), output);
  }

  // optional .ru.mail.go.webbase.blobs.SourceMark sourceMark = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->sourcemark(), output);
  }

  // optional .gogo.fetcher.fetcher_document_detail.redirect_t redirect_type = 21;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->redirect_type(), output);
  }

  // optional bool scriptRemoved = 23;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->scriptremoved(), output);
  }

  // optional .gogo.fetcher.fetcher_image profileImage = 24;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->profileimage_, output);
  }

  // optional .gogo.fetcher.fetcher_image coverImage = 25;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->coverimage_, output);
  }

  // optional .ru.mail.go.webbase.blobs.PublicationMarkup microdata_markup = 26;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->microdata_markup_, output);
  }

  // optional .gogo.fetcher.images_discovery imagesOnPage = 27;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->imagesonpage_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.fetcher.fetcher_document_detail)
}

::google::protobuf::uint8* fetcher_document_detail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.fetcher.fetcher_document_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.fetcher_document_detail.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required uint64 download_time = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->download_time(), target);
  }

  // optional bytes content = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // required .gogo.fetcher.fetcher_document_detail.flag_t flag = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->flag(), target);
  }

  // optional bytes http_head = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->http_head(), target);
  }

  // optional .gogo.fetcher.fetcher_document_detail.error_t error = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->error(), target);
  }

  // optional string ip = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.fetcher_document_detail.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ip(), target);
  }

  // optional uint32 flags = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->flags(), target);
  }

  // repeated string redirects = 9;
  for (int i = 0, n = this->redirects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirects(i).data(), static_cast<int>(this->redirects(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.fetcher_document_detail.redirects");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->redirects(i), target);
  }

  // optional .ru.mail.go.webbase.blobs.FetchUrl fetch_url_proto = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->fetch_url_proto_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.ForumType forumType = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->forumtype(), target);
  }

  // optional .ru.mail.go.webbase.blobs.RobotsState robotsState = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->robotsstate(), target);
  }

  // optional .ru.mail.go.webbase.blobs.RenderType renderType = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->rendertype(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Encoding forcedEncoding = 14;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->forcedencoding(), target);
  }

  // optional bool leadToProviderBlock = 18 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->leadtoproviderblock(), target);
  }

  // optional bool isFromRedirectChain = 19 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->isfromredirectchain(), target);
  }

  // optional .ru.mail.go.webbase.blobs.SourceMark sourceMark = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->sourcemark(), target);
  }

  // optional .gogo.fetcher.fetcher_document_detail.redirect_t redirect_type = 21;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->redirect_type(), target);
  }

  // optional bool scriptRemoved = 23;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->scriptremoved(), target);
  }

  // optional .gogo.fetcher.fetcher_image profileImage = 24;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->profileimage_, deterministic, target);
  }

  // optional .gogo.fetcher.fetcher_image coverImage = 25;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->coverimage_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.PublicationMarkup microdata_markup = 26;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->microdata_markup_, deterministic, target);
  }

  // optional .gogo.fetcher.images_discovery imagesOnPage = 27;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->imagesonpage_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.fetcher.fetcher_document_detail)
  return target;
}

size_t fetcher_document_detail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.fetcher.fetcher_document_detail)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_download_time()) {
    // required uint64 download_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->download_time());
  }

  if (has_flag()) {
    // required .gogo.fetcher.fetcher_document_detail.flag_t flag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
  }

  return total_size;
}
size_t fetcher_document_detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.fetcher.fetcher_document_detail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000601) ^ 0x00000601) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required uint64 download_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->download_time());

    // required .gogo.fetcher.fetcher_document_detail.flag_t flag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string redirects = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->redirects_size());
  for (int i = 0, n = this->redirects_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->redirects(i));
  }

  if (_has_bits_[0 / 32] & 254u) {
    // optional bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional bytes http_head = 5;
    if (has_http_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->http_head());
    }

    // optional string ip = 7;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional .ru.mail.go.webbase.blobs.FetchUrl fetch_url_proto = 10;
    if (has_fetch_url_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fetch_url_proto_);
    }

    // optional .gogo.fetcher.fetcher_image profileImage = 24;
    if (has_profileimage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->profileimage_);
    }

    // optional .gogo.fetcher.fetcher_image coverImage = 25;
    if (has_coverimage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->coverimage_);
    }

    // optional .ru.mail.go.webbase.blobs.PublicationMarkup microdata_markup = 26;
    if (has_microdata_markup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->microdata_markup_);
    }

  }
  // optional .gogo.fetcher.images_discovery imagesOnPage = 27;
  if (has_imagesonpage()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imagesonpage_);
  }

  if (_has_bits_[8 / 32] & 63488u) {
    // optional .gogo.fetcher.fetcher_document_detail.error_t error = 6;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional uint32 flags = 8;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional .ru.mail.go.webbase.blobs.ForumType forumType = 11;
    if (has_forumtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->forumtype());
    }

    // optional .ru.mail.go.webbase.blobs.RobotsState robotsState = 12;
    if (has_robotsstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->robotsstate());
    }

    // optional .ru.mail.go.webbase.blobs.RenderType renderType = 13;
    if (has_rendertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rendertype());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional .ru.mail.go.webbase.blobs.Encoding forcedEncoding = 14;
    if (has_forcedencoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->forcedencoding());
    }

    // optional .ru.mail.go.webbase.blobs.SourceMark sourceMark = 20;
    if (has_sourcemark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sourcemark());
    }

    // optional bool leadToProviderBlock = 18 [default = false];
    if (has_leadtoproviderblock()) {
      total_size += 2 + 1;
    }

    // optional bool isFromRedirectChain = 19 [default = false];
    if (has_isfromredirectchain()) {
      total_size += 2 + 1;
    }

    // optional bool scriptRemoved = 23;
    if (has_scriptremoved()) {
      total_size += 2 + 1;
    }

    // optional .gogo.fetcher.fetcher_document_detail.redirect_t redirect_type = 21;
    if (has_redirect_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->redirect_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fetcher_document_detail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.fetcher.fetcher_document_detail)
  GOOGLE_DCHECK_NE(&from, this);
  const fetcher_document_detail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fetcher_document_detail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.fetcher.fetcher_document_detail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.fetcher.fetcher_document_detail)
    MergeFrom(*source);
  }
}

void fetcher_document_detail::MergeFrom(const fetcher_document_detail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.fetcher.fetcher_document_detail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  redirects_.MergeFrom(from.redirects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_http_head();
      http_head_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_head_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_fetch_url_proto()->::ru::mail::go::webbase::blobs::FetchUrl::MergeFrom(from.fetch_url_proto());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_profileimage()->::gogo::fetcher::fetcher_image::MergeFrom(from.profileimage());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_coverimage()->::gogo::fetcher::fetcher_image::MergeFrom(from.coverimage());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_microdata_markup()->::ru::mail::go::webbase::blobs::PublicationMarkup::MergeFrom(from.microdata_markup());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_imagesonpage()->::gogo::fetcher::images_discovery::MergeFrom(from.imagesonpage());
    }
    if (cached_has_bits & 0x00000200u) {
      download_time_ = from.download_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000800u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00001000u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00002000u) {
      forumtype_ = from.forumtype_;
    }
    if (cached_has_bits & 0x00004000u) {
      robotsstate_ = from.robotsstate_;
    }
    if (cached_has_bits & 0x00008000u) {
      rendertype_ = from.rendertype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      forcedencoding_ = from.forcedencoding_;
    }
    if (cached_has_bits & 0x00020000u) {
      sourcemark_ = from.sourcemark_;
    }
    if (cached_has_bits & 0x00040000u) {
      leadtoproviderblock_ = from.leadtoproviderblock_;
    }
    if (cached_has_bits & 0x00080000u) {
      isfromredirectchain_ = from.isfromredirectchain_;
    }
    if (cached_has_bits & 0x00100000u) {
      scriptremoved_ = from.scriptremoved_;
    }
    if (cached_has_bits & 0x00200000u) {
      redirect_type_ = from.redirect_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void fetcher_document_detail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.fetcher.fetcher_document_detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fetcher_document_detail::CopyFrom(const fetcher_document_detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.fetcher.fetcher_document_detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fetcher_document_detail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000601) != 0x00000601) return false;
  if (has_fetch_url_proto()) {
    if (!this->fetch_url_proto_->IsInitialized()) return false;
  }
  if (has_profileimage()) {
    if (!this->profileimage_->IsInitialized()) return false;
  }
  if (has_coverimage()) {
    if (!this->coverimage_->IsInitialized()) return false;
  }
  if (has_microdata_markup()) {
    if (!this->microdata_markup_->IsInitialized()) return false;
  }
  if (has_imagesonpage()) {
    if (!this->imagesonpage_->IsInitialized()) return false;
  }
  return true;
}

void fetcher_document_detail::Swap(fetcher_document_detail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fetcher_document_detail::InternalSwap(fetcher_document_detail* other) {
  using std::swap;
  redirects_.InternalSwap(&other->redirects_);
  url_.Swap(&other->url_);
  content_.Swap(&other->content_);
  http_head_.Swap(&other->http_head_);
  ip_.Swap(&other->ip_);
  swap(fetch_url_proto_, other->fetch_url_proto_);
  swap(profileimage_, other->profileimage_);
  swap(coverimage_, other->coverimage_);
  swap(microdata_markup_, other->microdata_markup_);
  swap(imagesonpage_, other->imagesonpage_);
  swap(download_time_, other->download_time_);
  swap(flag_, other->flag_);
  swap(error_, other->error_);
  swap(flags_, other->flags_);
  swap(forumtype_, other->forumtype_);
  swap(robotsstate_, other->robotsstate_);
  swap(rendertype_, other->rendertype_);
  swap(forcedencoding_, other->forcedencoding_);
  swap(sourcemark_, other->sourcemark_);
  swap(leadtoproviderblock_, other->leadtoproviderblock_);
  swap(isfromredirectchain_, other->isfromredirectchain_);
  swap(scriptremoved_, other->scriptremoved_);
  swap(redirect_type_, other->redirect_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fetcher_document_detail::GetMetadata() const {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fetcher_document_detail

// required string url = 1;
bool fetcher_document_detail::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void fetcher_document_detail::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void fetcher_document_detail::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void fetcher_document_detail::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& fetcher_document_detail::url() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.url)
  return url_.GetNoArena();
}
void fetcher_document_detail::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.url)
}
#if LANG_CXX11
void fetcher_document_detail::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.fetcher_document_detail.url)
}
#endif
void fetcher_document_detail::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.fetcher_document_detail.url)
}
void fetcher_document_detail::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.fetcher_document_detail.url)
}
::std::string* fetcher_document_detail::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* fetcher_document_detail::release_url() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void fetcher_document_detail::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.url)
}

// required uint64 download_time = 2;
bool fetcher_document_detail::has_download_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void fetcher_document_detail::set_has_download_time() {
  _has_bits_[0] |= 0x00000200u;
}
void fetcher_document_detail::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000200u;
}
void fetcher_document_detail::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
::google::protobuf::uint64 fetcher_document_detail::download_time() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.download_time)
  return download_time_;
}
void fetcher_document_detail::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.download_time)
}

// optional bytes content = 3;
bool fetcher_document_detail::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void fetcher_document_detail::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void fetcher_document_detail::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void fetcher_document_detail::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& fetcher_document_detail::content() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.content)
  return content_.GetNoArena();
}
void fetcher_document_detail::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.content)
}
#if LANG_CXX11
void fetcher_document_detail::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.fetcher_document_detail.content)
}
#endif
void fetcher_document_detail::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.fetcher_document_detail.content)
}
void fetcher_document_detail::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.fetcher_document_detail.content)
}
::std::string* fetcher_document_detail::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* fetcher_document_detail::release_content() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void fetcher_document_detail::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.content)
}

// required .gogo.fetcher.fetcher_document_detail.flag_t flag = 4;
bool fetcher_document_detail::has_flag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void fetcher_document_detail::set_has_flag() {
  _has_bits_[0] |= 0x00000400u;
}
void fetcher_document_detail::clear_has_flag() {
  _has_bits_[0] &= ~0x00000400u;
}
void fetcher_document_detail::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
::gogo::fetcher::fetcher_document_detail_flag_t fetcher_document_detail::flag() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.flag)
  return static_cast< ::gogo::fetcher::fetcher_document_detail_flag_t >(flag_);
}
void fetcher_document_detail::set_flag(::gogo::fetcher::fetcher_document_detail_flag_t value) {
  assert(::gogo::fetcher::fetcher_document_detail_flag_t_IsValid(value));
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.flag)
}

// optional bytes http_head = 5;
bool fetcher_document_detail::has_http_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void fetcher_document_detail::set_has_http_head() {
  _has_bits_[0] |= 0x00000004u;
}
void fetcher_document_detail::clear_has_http_head() {
  _has_bits_[0] &= ~0x00000004u;
}
void fetcher_document_detail::clear_http_head() {
  http_head_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_http_head();
}
const ::std::string& fetcher_document_detail::http_head() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.http_head)
  return http_head_.GetNoArena();
}
void fetcher_document_detail::set_http_head(const ::std::string& value) {
  set_has_http_head();
  http_head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.http_head)
}
#if LANG_CXX11
void fetcher_document_detail::set_http_head(::std::string&& value) {
  set_has_http_head();
  http_head_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.fetcher_document_detail.http_head)
}
#endif
void fetcher_document_detail::set_http_head(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_http_head();
  http_head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.fetcher_document_detail.http_head)
}
void fetcher_document_detail::set_http_head(const void* value, size_t size) {
  set_has_http_head();
  http_head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.fetcher_document_detail.http_head)
}
::std::string* fetcher_document_detail::mutable_http_head() {
  set_has_http_head();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.http_head)
  return http_head_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* fetcher_document_detail::release_http_head() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.http_head)
  clear_has_http_head();
  return http_head_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void fetcher_document_detail::set_allocated_http_head(::std::string* http_head) {
  if (http_head != NULL) {
    set_has_http_head();
  } else {
    clear_has_http_head();
  }
  http_head_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_head);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.http_head)
}

// optional .gogo.fetcher.fetcher_document_detail.error_t error = 6;
bool fetcher_document_detail::has_error() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void fetcher_document_detail::set_has_error() {
  _has_bits_[0] |= 0x00000800u;
}
void fetcher_document_detail::clear_has_error() {
  _has_bits_[0] &= ~0x00000800u;
}
void fetcher_document_detail::clear_error() {
  error_ = 0;
  clear_has_error();
}
::gogo::fetcher::fetcher_document_detail_error_t fetcher_document_detail::error() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.error)
  return static_cast< ::gogo::fetcher::fetcher_document_detail_error_t >(error_);
}
void fetcher_document_detail::set_error(::gogo::fetcher::fetcher_document_detail_error_t value) {
  assert(::gogo::fetcher::fetcher_document_detail_error_t_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.error)
}

// optional string ip = 7;
bool fetcher_document_detail::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void fetcher_document_detail::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
void fetcher_document_detail::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
void fetcher_document_detail::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& fetcher_document_detail::ip() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.ip)
  return ip_.GetNoArena();
}
void fetcher_document_detail::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.ip)
}
#if LANG_CXX11
void fetcher_document_detail::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.fetcher_document_detail.ip)
}
#endif
void fetcher_document_detail::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.fetcher_document_detail.ip)
}
void fetcher_document_detail::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.fetcher_document_detail.ip)
}
::std::string* fetcher_document_detail::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* fetcher_document_detail::release_ip() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void fetcher_document_detail::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.ip)
}

// optional uint32 flags = 8;
bool fetcher_document_detail::has_flags() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void fetcher_document_detail::set_has_flags() {
  _has_bits_[0] |= 0x00001000u;
}
void fetcher_document_detail::clear_has_flags() {
  _has_bits_[0] &= ~0x00001000u;
}
void fetcher_document_detail::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 fetcher_document_detail::flags() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.flags)
  return flags_;
}
void fetcher_document_detail::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.flags)
}

// repeated string redirects = 9;
int fetcher_document_detail::redirects_size() const {
  return redirects_.size();
}
void fetcher_document_detail::clear_redirects() {
  redirects_.Clear();
}
const ::std::string& fetcher_document_detail::redirects(int index) const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.redirects)
  return redirects_.Get(index);
}
::std::string* fetcher_document_detail::mutable_redirects(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.redirects)
  return redirects_.Mutable(index);
}
void fetcher_document_detail::set_redirects(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.redirects)
  redirects_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void fetcher_document_detail::set_redirects(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.redirects)
  redirects_.Mutable(index)->assign(std::move(value));
}
#endif
void fetcher_document_detail::set_redirects(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirects_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.fetcher_document_detail.redirects)
}
void fetcher_document_detail::set_redirects(int index, const char* value, size_t size) {
  redirects_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.fetcher_document_detail.redirects)
}
::std::string* fetcher_document_detail::add_redirects() {
  // @@protoc_insertion_point(field_add_mutable:gogo.fetcher.fetcher_document_detail.redirects)
  return redirects_.Add();
}
void fetcher_document_detail::add_redirects(const ::std::string& value) {
  redirects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.fetcher.fetcher_document_detail.redirects)
}
#if LANG_CXX11
void fetcher_document_detail::add_redirects(::std::string&& value) {
  redirects_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.fetcher.fetcher_document_detail.redirects)
}
#endif
void fetcher_document_detail::add_redirects(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.fetcher.fetcher_document_detail.redirects)
}
void fetcher_document_detail::add_redirects(const char* value, size_t size) {
  redirects_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.fetcher.fetcher_document_detail.redirects)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
fetcher_document_detail::redirects() const {
  // @@protoc_insertion_point(field_list:gogo.fetcher.fetcher_document_detail.redirects)
  return redirects_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
fetcher_document_detail::mutable_redirects() {
  // @@protoc_insertion_point(field_mutable_list:gogo.fetcher.fetcher_document_detail.redirects)
  return &redirects_;
}

// optional .ru.mail.go.webbase.blobs.FetchUrl fetch_url_proto = 10;
bool fetcher_document_detail::has_fetch_url_proto() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void fetcher_document_detail::set_has_fetch_url_proto() {
  _has_bits_[0] |= 0x00000010u;
}
void fetcher_document_detail::clear_has_fetch_url_proto() {
  _has_bits_[0] &= ~0x00000010u;
}
void fetcher_document_detail::clear_fetch_url_proto() {
  if (fetch_url_proto_ != NULL) fetch_url_proto_->::ru::mail::go::webbase::blobs::FetchUrl::Clear();
  clear_has_fetch_url_proto();
}
const ::ru::mail::go::webbase::blobs::FetchUrl& fetcher_document_detail::fetch_url_proto() const {
  const ::ru::mail::go::webbase::blobs::FetchUrl* p = fetch_url_proto_;
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.fetch_url_proto)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::FetchUrl*>(
      &::ru::mail::go::webbase::blobs::_FetchUrl_default_instance_);
}
::ru::mail::go::webbase::blobs::FetchUrl* fetcher_document_detail::mutable_fetch_url_proto() {
  set_has_fetch_url_proto();
  if (fetch_url_proto_ == NULL) {
    fetch_url_proto_ = new ::ru::mail::go::webbase::blobs::FetchUrl;
  }
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.fetch_url_proto)
  return fetch_url_proto_;
}
::ru::mail::go::webbase::blobs::FetchUrl* fetcher_document_detail::release_fetch_url_proto() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.fetch_url_proto)
  clear_has_fetch_url_proto();
  ::ru::mail::go::webbase::blobs::FetchUrl* temp = fetch_url_proto_;
  fetch_url_proto_ = NULL;
  return temp;
}
void fetcher_document_detail::set_allocated_fetch_url_proto(::ru::mail::go::webbase::blobs::FetchUrl* fetch_url_proto) {
  delete fetch_url_proto_;
  fetch_url_proto_ = fetch_url_proto;
  if (fetch_url_proto) {
    set_has_fetch_url_proto();
  } else {
    clear_has_fetch_url_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.fetch_url_proto)
}

// optional .ru.mail.go.webbase.blobs.ForumType forumType = 11;
bool fetcher_document_detail::has_forumtype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void fetcher_document_detail::set_has_forumtype() {
  _has_bits_[0] |= 0x00002000u;
}
void fetcher_document_detail::clear_has_forumtype() {
  _has_bits_[0] &= ~0x00002000u;
}
void fetcher_document_detail::clear_forumtype() {
  forumtype_ = 0;
  clear_has_forumtype();
}
::ru::mail::go::webbase::blobs::ForumType fetcher_document_detail::forumtype() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.forumType)
  return static_cast< ::ru::mail::go::webbase::blobs::ForumType >(forumtype_);
}
void fetcher_document_detail::set_forumtype(::ru::mail::go::webbase::blobs::ForumType value) {
  assert(::ru::mail::go::webbase::blobs::ForumType_IsValid(value));
  set_has_forumtype();
  forumtype_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.forumType)
}

// optional .ru.mail.go.webbase.blobs.RobotsState robotsState = 12;
bool fetcher_document_detail::has_robotsstate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void fetcher_document_detail::set_has_robotsstate() {
  _has_bits_[0] |= 0x00004000u;
}
void fetcher_document_detail::clear_has_robotsstate() {
  _has_bits_[0] &= ~0x00004000u;
}
void fetcher_document_detail::clear_robotsstate() {
  robotsstate_ = 0;
  clear_has_robotsstate();
}
::ru::mail::go::webbase::blobs::RobotsState fetcher_document_detail::robotsstate() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.robotsState)
  return static_cast< ::ru::mail::go::webbase::blobs::RobotsState >(robotsstate_);
}
void fetcher_document_detail::set_robotsstate(::ru::mail::go::webbase::blobs::RobotsState value) {
  assert(::ru::mail::go::webbase::blobs::RobotsState_IsValid(value));
  set_has_robotsstate();
  robotsstate_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.robotsState)
}

// optional .ru.mail.go.webbase.blobs.RenderType renderType = 13;
bool fetcher_document_detail::has_rendertype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void fetcher_document_detail::set_has_rendertype() {
  _has_bits_[0] |= 0x00008000u;
}
void fetcher_document_detail::clear_has_rendertype() {
  _has_bits_[0] &= ~0x00008000u;
}
void fetcher_document_detail::clear_rendertype() {
  rendertype_ = 0;
  clear_has_rendertype();
}
::ru::mail::go::webbase::blobs::RenderType fetcher_document_detail::rendertype() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.renderType)
  return static_cast< ::ru::mail::go::webbase::blobs::RenderType >(rendertype_);
}
void fetcher_document_detail::set_rendertype(::ru::mail::go::webbase::blobs::RenderType value) {
  assert(::ru::mail::go::webbase::blobs::RenderType_IsValid(value));
  set_has_rendertype();
  rendertype_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.renderType)
}

// optional .ru.mail.go.webbase.blobs.Encoding forcedEncoding = 14;
bool fetcher_document_detail::has_forcedencoding() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void fetcher_document_detail::set_has_forcedencoding() {
  _has_bits_[0] |= 0x00010000u;
}
void fetcher_document_detail::clear_has_forcedencoding() {
  _has_bits_[0] &= ~0x00010000u;
}
void fetcher_document_detail::clear_forcedencoding() {
  forcedencoding_ = 0;
  clear_has_forcedencoding();
}
::ru::mail::go::webbase::blobs::Encoding fetcher_document_detail::forcedencoding() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.forcedEncoding)
  return static_cast< ::ru::mail::go::webbase::blobs::Encoding >(forcedencoding_);
}
void fetcher_document_detail::set_forcedencoding(::ru::mail::go::webbase::blobs::Encoding value) {
  assert(::ru::mail::go::webbase::blobs::Encoding_IsValid(value));
  set_has_forcedencoding();
  forcedencoding_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.forcedEncoding)
}

// optional bool leadToProviderBlock = 18 [default = false];
bool fetcher_document_detail::has_leadtoproviderblock() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void fetcher_document_detail::set_has_leadtoproviderblock() {
  _has_bits_[0] |= 0x00040000u;
}
void fetcher_document_detail::clear_has_leadtoproviderblock() {
  _has_bits_[0] &= ~0x00040000u;
}
void fetcher_document_detail::clear_leadtoproviderblock() {
  leadtoproviderblock_ = false;
  clear_has_leadtoproviderblock();
}
bool fetcher_document_detail::leadtoproviderblock() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.leadToProviderBlock)
  return leadtoproviderblock_;
}
void fetcher_document_detail::set_leadtoproviderblock(bool value) {
  set_has_leadtoproviderblock();
  leadtoproviderblock_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.leadToProviderBlock)
}

// optional bool isFromRedirectChain = 19 [default = false];
bool fetcher_document_detail::has_isfromredirectchain() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void fetcher_document_detail::set_has_isfromredirectchain() {
  _has_bits_[0] |= 0x00080000u;
}
void fetcher_document_detail::clear_has_isfromredirectchain() {
  _has_bits_[0] &= ~0x00080000u;
}
void fetcher_document_detail::clear_isfromredirectchain() {
  isfromredirectchain_ = false;
  clear_has_isfromredirectchain();
}
bool fetcher_document_detail::isfromredirectchain() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.isFromRedirectChain)
  return isfromredirectchain_;
}
void fetcher_document_detail::set_isfromredirectchain(bool value) {
  set_has_isfromredirectchain();
  isfromredirectchain_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.isFromRedirectChain)
}

// optional .ru.mail.go.webbase.blobs.SourceMark sourceMark = 20;
bool fetcher_document_detail::has_sourcemark() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void fetcher_document_detail::set_has_sourcemark() {
  _has_bits_[0] |= 0x00020000u;
}
void fetcher_document_detail::clear_has_sourcemark() {
  _has_bits_[0] &= ~0x00020000u;
}
void fetcher_document_detail::clear_sourcemark() {
  sourcemark_ = 0;
  clear_has_sourcemark();
}
::ru::mail::go::webbase::blobs::SourceMark fetcher_document_detail::sourcemark() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.sourceMark)
  return static_cast< ::ru::mail::go::webbase::blobs::SourceMark >(sourcemark_);
}
void fetcher_document_detail::set_sourcemark(::ru::mail::go::webbase::blobs::SourceMark value) {
  assert(::ru::mail::go::webbase::blobs::SourceMark_IsValid(value));
  set_has_sourcemark();
  sourcemark_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.sourceMark)
}

// optional .gogo.fetcher.fetcher_document_detail.redirect_t redirect_type = 21;
bool fetcher_document_detail::has_redirect_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void fetcher_document_detail::set_has_redirect_type() {
  _has_bits_[0] |= 0x00200000u;
}
void fetcher_document_detail::clear_has_redirect_type() {
  _has_bits_[0] &= ~0x00200000u;
}
void fetcher_document_detail::clear_redirect_type() {
  redirect_type_ = 0;
  clear_has_redirect_type();
}
::gogo::fetcher::fetcher_document_detail_redirect_t fetcher_document_detail::redirect_type() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.redirect_type)
  return static_cast< ::gogo::fetcher::fetcher_document_detail_redirect_t >(redirect_type_);
}
void fetcher_document_detail::set_redirect_type(::gogo::fetcher::fetcher_document_detail_redirect_t value) {
  assert(::gogo::fetcher::fetcher_document_detail_redirect_t_IsValid(value));
  set_has_redirect_type();
  redirect_type_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.redirect_type)
}

// optional bool scriptRemoved = 23;
bool fetcher_document_detail::has_scriptremoved() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void fetcher_document_detail::set_has_scriptremoved() {
  _has_bits_[0] |= 0x00100000u;
}
void fetcher_document_detail::clear_has_scriptremoved() {
  _has_bits_[0] &= ~0x00100000u;
}
void fetcher_document_detail::clear_scriptremoved() {
  scriptremoved_ = false;
  clear_has_scriptremoved();
}
bool fetcher_document_detail::scriptremoved() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.scriptRemoved)
  return scriptremoved_;
}
void fetcher_document_detail::set_scriptremoved(bool value) {
  set_has_scriptremoved();
  scriptremoved_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.scriptRemoved)
}

// optional .gogo.fetcher.fetcher_image profileImage = 24;
bool fetcher_document_detail::has_profileimage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void fetcher_document_detail::set_has_profileimage() {
  _has_bits_[0] |= 0x00000020u;
}
void fetcher_document_detail::clear_has_profileimage() {
  _has_bits_[0] &= ~0x00000020u;
}
void fetcher_document_detail::clear_profileimage() {
  if (profileimage_ != NULL) profileimage_->::gogo::fetcher::fetcher_image::Clear();
  clear_has_profileimage();
}
const ::gogo::fetcher::fetcher_image& fetcher_document_detail::profileimage() const {
  const ::gogo::fetcher::fetcher_image* p = profileimage_;
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.profileImage)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::fetcher::fetcher_image*>(
      &::gogo::fetcher::_fetcher_image_default_instance_);
}
::gogo::fetcher::fetcher_image* fetcher_document_detail::mutable_profileimage() {
  set_has_profileimage();
  if (profileimage_ == NULL) {
    profileimage_ = new ::gogo::fetcher::fetcher_image;
  }
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.profileImage)
  return profileimage_;
}
::gogo::fetcher::fetcher_image* fetcher_document_detail::release_profileimage() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.profileImage)
  clear_has_profileimage();
  ::gogo::fetcher::fetcher_image* temp = profileimage_;
  profileimage_ = NULL;
  return temp;
}
void fetcher_document_detail::set_allocated_profileimage(::gogo::fetcher::fetcher_image* profileimage) {
  delete profileimage_;
  profileimage_ = profileimage;
  if (profileimage) {
    set_has_profileimage();
  } else {
    clear_has_profileimage();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.profileImage)
}

// optional .gogo.fetcher.fetcher_image coverImage = 25;
bool fetcher_document_detail::has_coverimage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void fetcher_document_detail::set_has_coverimage() {
  _has_bits_[0] |= 0x00000040u;
}
void fetcher_document_detail::clear_has_coverimage() {
  _has_bits_[0] &= ~0x00000040u;
}
void fetcher_document_detail::clear_coverimage() {
  if (coverimage_ != NULL) coverimage_->::gogo::fetcher::fetcher_image::Clear();
  clear_has_coverimage();
}
const ::gogo::fetcher::fetcher_image& fetcher_document_detail::coverimage() const {
  const ::gogo::fetcher::fetcher_image* p = coverimage_;
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.coverImage)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::fetcher::fetcher_image*>(
      &::gogo::fetcher::_fetcher_image_default_instance_);
}
::gogo::fetcher::fetcher_image* fetcher_document_detail::mutable_coverimage() {
  set_has_coverimage();
  if (coverimage_ == NULL) {
    coverimage_ = new ::gogo::fetcher::fetcher_image;
  }
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.coverImage)
  return coverimage_;
}
::gogo::fetcher::fetcher_image* fetcher_document_detail::release_coverimage() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.coverImage)
  clear_has_coverimage();
  ::gogo::fetcher::fetcher_image* temp = coverimage_;
  coverimage_ = NULL;
  return temp;
}
void fetcher_document_detail::set_allocated_coverimage(::gogo::fetcher::fetcher_image* coverimage) {
  delete coverimage_;
  coverimage_ = coverimage;
  if (coverimage) {
    set_has_coverimage();
  } else {
    clear_has_coverimage();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.coverImage)
}

// optional .ru.mail.go.webbase.blobs.PublicationMarkup microdata_markup = 26;
bool fetcher_document_detail::has_microdata_markup() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void fetcher_document_detail::set_has_microdata_markup() {
  _has_bits_[0] |= 0x00000080u;
}
void fetcher_document_detail::clear_has_microdata_markup() {
  _has_bits_[0] &= ~0x00000080u;
}
void fetcher_document_detail::clear_microdata_markup() {
  if (microdata_markup_ != NULL) microdata_markup_->::ru::mail::go::webbase::blobs::PublicationMarkup::Clear();
  clear_has_microdata_markup();
}
const ::ru::mail::go::webbase::blobs::PublicationMarkup& fetcher_document_detail::microdata_markup() const {
  const ::ru::mail::go::webbase::blobs::PublicationMarkup* p = microdata_markup_;
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.microdata_markup)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::PublicationMarkup*>(
      &::ru::mail::go::webbase::blobs::_PublicationMarkup_default_instance_);
}
::ru::mail::go::webbase::blobs::PublicationMarkup* fetcher_document_detail::mutable_microdata_markup() {
  set_has_microdata_markup();
  if (microdata_markup_ == NULL) {
    microdata_markup_ = new ::ru::mail::go::webbase::blobs::PublicationMarkup;
  }
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.microdata_markup)
  return microdata_markup_;
}
::ru::mail::go::webbase::blobs::PublicationMarkup* fetcher_document_detail::release_microdata_markup() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.microdata_markup)
  clear_has_microdata_markup();
  ::ru::mail::go::webbase::blobs::PublicationMarkup* temp = microdata_markup_;
  microdata_markup_ = NULL;
  return temp;
}
void fetcher_document_detail::set_allocated_microdata_markup(::ru::mail::go::webbase::blobs::PublicationMarkup* microdata_markup) {
  delete microdata_markup_;
  microdata_markup_ = microdata_markup;
  if (microdata_markup) {
    set_has_microdata_markup();
  } else {
    clear_has_microdata_markup();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.microdata_markup)
}

// optional .gogo.fetcher.images_discovery imagesOnPage = 27;
bool fetcher_document_detail::has_imagesonpage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void fetcher_document_detail::set_has_imagesonpage() {
  _has_bits_[0] |= 0x00000100u;
}
void fetcher_document_detail::clear_has_imagesonpage() {
  _has_bits_[0] &= ~0x00000100u;
}
void fetcher_document_detail::clear_imagesonpage() {
  if (imagesonpage_ != NULL) imagesonpage_->::gogo::fetcher::images_discovery::Clear();
  clear_has_imagesonpage();
}
const ::gogo::fetcher::images_discovery& fetcher_document_detail::imagesonpage() const {
  const ::gogo::fetcher::images_discovery* p = imagesonpage_;
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.imagesOnPage)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::fetcher::images_discovery*>(
      &::gogo::fetcher::_images_discovery_default_instance_);
}
::gogo::fetcher::images_discovery* fetcher_document_detail::mutable_imagesonpage() {
  set_has_imagesonpage();
  if (imagesonpage_ == NULL) {
    imagesonpage_ = new ::gogo::fetcher::images_discovery;
  }
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.imagesOnPage)
  return imagesonpage_;
}
::gogo::fetcher::images_discovery* fetcher_document_detail::release_imagesonpage() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.imagesOnPage)
  clear_has_imagesonpage();
  ::gogo::fetcher::images_discovery* temp = imagesonpage_;
  imagesonpage_ = NULL;
  return temp;
}
void fetcher_document_detail::set_allocated_imagesonpage(::gogo::fetcher::images_discovery* imagesonpage) {
  delete imagesonpage_;
  imagesonpage_ = imagesonpage;
  if (imagesonpage) {
    set_has_imagesonpage();
  } else {
    clear_has_imagesonpage();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.imagesOnPage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fetcher_host_details::kHostnameFieldNumber;
const int fetcher_host_details::kThreadLimitFieldNumber;
const int fetcher_host_details::kCrawlDelayFieldNumber;
const int fetcher_host_details::kAvgResponseTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fetcher_host_details::fetcher_host_details()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.fetcher.fetcher_host_details)
}
fetcher_host_details::fetcher_host_details(const fetcher_host_details& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  ::memcpy(&thread_limit_, &from.thread_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&avg_response_time_) -
    reinterpret_cast<char*>(&thread_limit_)) + sizeof(avg_response_time_));
  // @@protoc_insertion_point(copy_constructor:gogo.fetcher.fetcher_host_details)
}

void fetcher_host_details::SharedCtor() {
  _cached_size_ = 0;
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&thread_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avg_response_time_) -
      reinterpret_cast<char*>(&thread_limit_)) + sizeof(avg_response_time_));
}

fetcher_host_details::~fetcher_host_details() {
  // @@protoc_insertion_point(destructor:gogo.fetcher.fetcher_host_details)
  SharedDtor();
}

void fetcher_host_details::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void fetcher_host_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fetcher_host_details::descriptor() {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const fetcher_host_details& fetcher_host_details::default_instance() {
  protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

fetcher_host_details* fetcher_host_details::New(::google::protobuf::Arena* arena) const {
  fetcher_host_details* n = new fetcher_host_details;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fetcher_host_details::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.fetcher.fetcher_host_details)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_hostname()) {
    GOOGLE_DCHECK(!hostname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*hostname_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&thread_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avg_response_time_) -
        reinterpret_cast<char*>(&thread_limit_)) + sizeof(avg_response_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fetcher_host_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.fetcher.fetcher_host_details)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.fetcher_host_details.hostname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 thread_limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_thread_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crawl_delay = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_crawl_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crawl_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double avg_response_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_avg_response_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_response_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.fetcher.fetcher_host_details)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.fetcher.fetcher_host_details)
  return false;
#undef DO_
}

void fetcher_host_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.fetcher.fetcher_host_details)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string hostname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.fetcher_host_details.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // optional uint32 thread_limit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thread_limit(), output);
  }

  // optional uint32 crawl_delay = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crawl_delay(), output);
  }

  // optional double avg_response_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->avg_response_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.fetcher.fetcher_host_details)
}

::google::protobuf::uint8* fetcher_host_details::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.fetcher.fetcher_host_details)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string hostname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.fetcher_host_details.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // optional uint32 thread_limit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->thread_limit(), target);
  }

  // optional uint32 crawl_delay = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crawl_delay(), target);
  }

  // optional double avg_response_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->avg_response_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.fetcher.fetcher_host_details)
  return target;
}

size_t fetcher_host_details::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.fetcher.fetcher_host_details)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string hostname = 1;
  if (has_hostname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional uint32 thread_limit = 2;
    if (has_thread_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_limit());
    }

    // optional uint32 crawl_delay = 3;
    if (has_crawl_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crawl_delay());
    }

    // optional double avg_response_time = 4;
    if (has_avg_response_time()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fetcher_host_details::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.fetcher.fetcher_host_details)
  GOOGLE_DCHECK_NE(&from, this);
  const fetcher_host_details* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fetcher_host_details>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.fetcher.fetcher_host_details)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.fetcher.fetcher_host_details)
    MergeFrom(*source);
  }
}

void fetcher_host_details::MergeFrom(const fetcher_host_details& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.fetcher.fetcher_host_details)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hostname();
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (cached_has_bits & 0x00000002u) {
      thread_limit_ = from.thread_limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      crawl_delay_ = from.crawl_delay_;
    }
    if (cached_has_bits & 0x00000008u) {
      avg_response_time_ = from.avg_response_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void fetcher_host_details::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.fetcher.fetcher_host_details)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fetcher_host_details::CopyFrom(const fetcher_host_details& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.fetcher.fetcher_host_details)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fetcher_host_details::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void fetcher_host_details::Swap(fetcher_host_details* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fetcher_host_details::InternalSwap(fetcher_host_details* other) {
  using std::swap;
  hostname_.Swap(&other->hostname_);
  swap(thread_limit_, other->thread_limit_);
  swap(crawl_delay_, other->crawl_delay_);
  swap(avg_response_time_, other->avg_response_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fetcher_host_details::GetMetadata() const {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fetcher_host_details

// required string hostname = 1;
bool fetcher_host_details::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void fetcher_host_details::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
void fetcher_host_details::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
void fetcher_host_details::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
const ::std::string& fetcher_host_details::hostname() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_host_details.hostname)
  return hostname_.GetNoArena();
}
void fetcher_host_details::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_host_details.hostname)
}
#if LANG_CXX11
void fetcher_host_details::set_hostname(::std::string&& value) {
  set_has_hostname();
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.fetcher_host_details.hostname)
}
#endif
void fetcher_host_details::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.fetcher_host_details.hostname)
}
void fetcher_host_details::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.fetcher_host_details.hostname)
}
::std::string* fetcher_host_details::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_host_details.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* fetcher_host_details::release_hostname() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_host_details.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void fetcher_host_details::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_host_details.hostname)
}

// optional uint32 thread_limit = 2;
bool fetcher_host_details::has_thread_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void fetcher_host_details::set_has_thread_limit() {
  _has_bits_[0] |= 0x00000002u;
}
void fetcher_host_details::clear_has_thread_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
void fetcher_host_details::clear_thread_limit() {
  thread_limit_ = 0u;
  clear_has_thread_limit();
}
::google::protobuf::uint32 fetcher_host_details::thread_limit() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_host_details.thread_limit)
  return thread_limit_;
}
void fetcher_host_details::set_thread_limit(::google::protobuf::uint32 value) {
  set_has_thread_limit();
  thread_limit_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_host_details.thread_limit)
}

// optional uint32 crawl_delay = 3;
bool fetcher_host_details::has_crawl_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void fetcher_host_details::set_has_crawl_delay() {
  _has_bits_[0] |= 0x00000004u;
}
void fetcher_host_details::clear_has_crawl_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
void fetcher_host_details::clear_crawl_delay() {
  crawl_delay_ = 0u;
  clear_has_crawl_delay();
}
::google::protobuf::uint32 fetcher_host_details::crawl_delay() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_host_details.crawl_delay)
  return crawl_delay_;
}
void fetcher_host_details::set_crawl_delay(::google::protobuf::uint32 value) {
  set_has_crawl_delay();
  crawl_delay_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_host_details.crawl_delay)
}

// optional double avg_response_time = 4;
bool fetcher_host_details::has_avg_response_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void fetcher_host_details::set_has_avg_response_time() {
  _has_bits_[0] |= 0x00000008u;
}
void fetcher_host_details::clear_has_avg_response_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void fetcher_host_details::clear_avg_response_time() {
  avg_response_time_ = 0;
  clear_has_avg_response_time();
}
double fetcher_host_details::avg_response_time() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_host_details.avg_response_time)
  return avg_response_time_;
}
void fetcher_host_details::set_avg_response_time(double value) {
  set_has_avg_response_time();
  avg_response_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_host_details.avg_response_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int url_upload_detail::kUrlFieldNumber;
const int url_upload_detail::kFlagDisabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

url_upload_detail::url_upload_detail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.fetcher.url_upload_detail)
}
url_upload_detail::url_upload_detail(const url_upload_detail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  flag_disabled_ = from.flag_disabled_;
  // @@protoc_insertion_point(copy_constructor:gogo.fetcher.url_upload_detail)
}

void url_upload_detail::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_disabled_ = false;
}

url_upload_detail::~url_upload_detail() {
  // @@protoc_insertion_point(destructor:gogo.fetcher.url_upload_detail)
  SharedDtor();
}

void url_upload_detail::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void url_upload_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* url_upload_detail::descriptor() {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const url_upload_detail& url_upload_detail::default_instance() {
  protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

url_upload_detail* url_upload_detail::New(::google::protobuf::Arena* arena) const {
  url_upload_detail* n = new url_upload_detail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void url_upload_detail::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.fetcher.url_upload_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  flag_disabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool url_upload_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.fetcher.url_upload_detail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.url_upload_detail.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool flag_disabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_flag_disabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.fetcher.url_upload_detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.fetcher.url_upload_detail)
  return false;
#undef DO_
}

void url_upload_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.fetcher.url_upload_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.url_upload_detail.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional bool flag_disabled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag_disabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.fetcher.url_upload_detail)
}

::google::protobuf::uint8* url_upload_detail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.fetcher.url_upload_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.url_upload_detail.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional bool flag_disabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag_disabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.fetcher.url_upload_detail)
  return target;
}

size_t url_upload_detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.fetcher.url_upload_detail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional bool flag_disabled = 2;
    if (has_flag_disabled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void url_upload_detail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.fetcher.url_upload_detail)
  GOOGLE_DCHECK_NE(&from, this);
  const url_upload_detail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const url_upload_detail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.fetcher.url_upload_detail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.fetcher.url_upload_detail)
    MergeFrom(*source);
  }
}

void url_upload_detail::MergeFrom(const url_upload_detail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.fetcher.url_upload_detail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      flag_disabled_ = from.flag_disabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void url_upload_detail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.fetcher.url_upload_detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void url_upload_detail::CopyFrom(const url_upload_detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.fetcher.url_upload_detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool url_upload_detail::IsInitialized() const {
  return true;
}

void url_upload_detail::Swap(url_upload_detail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void url_upload_detail::InternalSwap(url_upload_detail* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(flag_disabled_, other->flag_disabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata url_upload_detail::GetMetadata() const {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// url_upload_detail

// optional string url = 1;
bool url_upload_detail::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void url_upload_detail::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void url_upload_detail::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void url_upload_detail::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& url_upload_detail::url() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.url_upload_detail.url)
  return url_.GetNoArena();
}
void url_upload_detail::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.url_upload_detail.url)
}
#if LANG_CXX11
void url_upload_detail::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.url_upload_detail.url)
}
#endif
void url_upload_detail::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.url_upload_detail.url)
}
void url_upload_detail::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.url_upload_detail.url)
}
::std::string* url_upload_detail::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.url_upload_detail.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* url_upload_detail::release_url() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.url_upload_detail.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void url_upload_detail::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.url_upload_detail.url)
}

// optional bool flag_disabled = 2;
bool url_upload_detail::has_flag_disabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void url_upload_detail::set_has_flag_disabled() {
  _has_bits_[0] |= 0x00000002u;
}
void url_upload_detail::clear_has_flag_disabled() {
  _has_bits_[0] &= ~0x00000002u;
}
void url_upload_detail::clear_flag_disabled() {
  flag_disabled_ = false;
  clear_has_flag_disabled();
}
bool url_upload_detail::flag_disabled() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.url_upload_detail.flag_disabled)
  return flag_disabled_;
}
void url_upload_detail::set_flag_disabled(bool value) {
  set_has_flag_disabled();
  flag_disabled_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.url_upload_detail.flag_disabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int post_document_detail::kUrlFieldNumber;
const int post_document_detail::kTitleFieldNumber;
const int post_document_detail::kTextContextFieldNumber;
const int post_document_detail::kUserNameFieldNumber;
const int post_document_detail::kUserUrlFieldNumber;
const int post_document_detail::kPublicNameFieldNumber;
const int post_document_detail::kPublicUrlFieldNumber;
const int post_document_detail::kDownloadTimeFieldNumber;
const int post_document_detail::kImageFieldNumber;
const int post_document_detail::kPostTimeFieldNumber;
const int post_document_detail::kViewsFieldNumber;
const int post_document_detail::kLikesFieldNumber;
const int post_document_detail::kShareFieldNumber;
const int post_document_detail::kSpamLevelFieldNumber;
const int post_document_detail::kPornoLevelFieldNumber;
const int post_document_detail::kTypeFieldNumber;
const int post_document_detail::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

post_document_detail::post_document_detail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.fetcher.post_document_detail)
}
post_document_detail::post_document_detail(const post_document_detail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      image_(from.image_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  text_context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_context()) {
    text_context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_context_);
  }
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_name()) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  user_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_url()) {
    user_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_url_);
  }
  public_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_name()) {
    public_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_name_);
  }
  public_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_url()) {
    public_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_url_);
  }
  ::memcpy(&download_time_, &from.download_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&download_time_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:gogo.fetcher.post_document_detail)
}

void post_document_detail::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&download_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&porno_level_) -
      reinterpret_cast<char*>(&download_time_)) + sizeof(porno_level_));
  type_ = 1;
  source_ = 1;
}

post_document_detail::~post_document_detail() {
  // @@protoc_insertion_point(destructor:gogo.fetcher.post_document_detail)
  SharedDtor();
}

void post_document_detail::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void post_document_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* post_document_detail::descriptor() {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const post_document_detail& post_document_detail::default_instance() {
  protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

post_document_detail* post_document_detail::New(::google::protobuf::Arena* arena) const {
  post_document_detail* n = new post_document_detail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void post_document_detail::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.fetcher.post_document_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!text_context_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_context_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!user_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!user_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!public_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*public_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!public_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*public_url_.UnsafeRawStringPointer())->clear();
    }
  }
  download_time_ = GOOGLE_ULONGLONG(0);
  if (cached_has_bits & 65280u) {
    ::memset(&post_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&porno_level_) -
        reinterpret_cast<char*>(&post_time_)) + sizeof(porno_level_));
    type_ = 1;
    source_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool post_document_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.fetcher.post_document_detail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.post_document_detail.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.post_document_detail.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string text_context = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_context().data(), static_cast<int>(this->text_context().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.post_document_detail.text_context");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.post_document_detail.user_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_url().data(), static_cast<int>(this->user_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.post_document_detail.user_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string public_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_name().data(), static_cast<int>(this->public_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.post_document_detail.public_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string public_url = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_url().data(), static_cast<int>(this->public_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.post_document_detail.public_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 download_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_download_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &download_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.fetcher.fetcher_image image = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 post_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_post_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &post_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 views = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 likes = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 share = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_share();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &share_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spam_level = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_spam_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spam_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 porno_level = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_porno_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &porno_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.fetcher.post_document_detail.type_t type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::fetcher::post_document_detail_type_t_IsValid(value)) {
            set_type(static_cast< ::gogo::fetcher::post_document_detail_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                16, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.fetcher.post_document_detail.source_t source = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::fetcher::post_document_detail_source_t_IsValid(value)) {
            set_source(static_cast< ::gogo::fetcher::post_document_detail_source_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                17, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.fetcher.post_document_detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.fetcher.post_document_detail)
  return false;
#undef DO_
}

void post_document_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.fetcher.post_document_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.post_document_detail.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.post_document_detail.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // required string text_context = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_context().data(), static_cast<int>(this->text_context().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.post_document_detail.text_context");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text_context(), output);
  }

  // optional string user_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.post_document_detail.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_name(), output);
  }

  // optional string user_url = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_url().data(), static_cast<int>(this->user_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.post_document_detail.user_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_url(), output);
  }

  // optional string public_name = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_name().data(), static_cast<int>(this->public_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.post_document_detail.public_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->public_name(), output);
  }

  // optional string public_url = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_url().data(), static_cast<int>(this->public_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.post_document_detail.public_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->public_url(), output);
  }

  // required uint64 download_time = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->download_time(), output);
  }

  // repeated .gogo.fetcher.fetcher_image image = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->image(static_cast<int>(i)), output);
  }

  // optional uint64 post_time = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->post_time(), output);
  }

  // optional uint32 views = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->views(), output);
  }

  // optional uint32 likes = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->likes(), output);
  }

  // optional uint32 share = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->share(), output);
  }

  // optional uint32 spam_level = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->spam_level(), output);
  }

  // optional uint32 porno_level = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->porno_level(), output);
  }

  // optional .gogo.fetcher.post_document_detail.type_t type = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->type(), output);
  }

  // optional .gogo.fetcher.post_document_detail.source_t source = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.fetcher.post_document_detail)
}

::google::protobuf::uint8* post_document_detail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.fetcher.post_document_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.post_document_detail.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.post_document_detail.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // required string text_context = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_context().data(), static_cast<int>(this->text_context().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.post_document_detail.text_context");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text_context(), target);
  }

  // optional string user_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.post_document_detail.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_name(), target);
  }

  // optional string user_url = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_url().data(), static_cast<int>(this->user_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.post_document_detail.user_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_url(), target);
  }

  // optional string public_name = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_name().data(), static_cast<int>(this->public_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.post_document_detail.public_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->public_name(), target);
  }

  // optional string public_url = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_url().data(), static_cast<int>(this->public_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.post_document_detail.public_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->public_url(), target);
  }

  // required uint64 download_time = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->download_time(), target);
  }

  // repeated .gogo.fetcher.fetcher_image image = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->image(static_cast<int>(i)), deterministic, target);
  }

  // optional uint64 post_time = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->post_time(), target);
  }

  // optional uint32 views = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->views(), target);
  }

  // optional uint32 likes = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->likes(), target);
  }

  // optional uint32 share = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->share(), target);
  }

  // optional uint32 spam_level = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->spam_level(), target);
  }

  // optional uint32 porno_level = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->porno_level(), target);
  }

  // optional .gogo.fetcher.post_document_detail.type_t type = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->type(), target);
  }

  // optional .gogo.fetcher.post_document_detail.source_t source = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.fetcher.post_document_detail)
  return target;
}

size_t post_document_detail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.fetcher.post_document_detail)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_title()) {
    // required string title = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  if (has_text_context()) {
    // required string text_context = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_context());
  }

  if (has_download_time()) {
    // required uint64 download_time = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->download_time());
  }

  return total_size;
}
size_t post_document_detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.fetcher.post_document_detail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000087) ^ 0x00000087) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required string title = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());

    // required string text_context = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_context());

    // required uint64 download_time = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->download_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .gogo.fetcher.fetcher_image image = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->image_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 120u) {
    // optional string user_name = 4;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string user_url = 5;
    if (has_user_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_url());
    }

    // optional string public_name = 6;
    if (has_public_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_name());
    }

    // optional string public_url = 7;
    if (has_public_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_url());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint64 post_time = 10;
    if (has_post_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->post_time());
    }

    // optional uint32 views = 11;
    if (has_views()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->views());
    }

    // optional uint32 likes = 12;
    if (has_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->likes());
    }

    // optional uint32 share = 13;
    if (has_share()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->share());
    }

    // optional uint32 spam_level = 14;
    if (has_spam_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spam_level());
    }

    // optional uint32 porno_level = 15;
    if (has_porno_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->porno_level());
    }

    // optional .gogo.fetcher.post_document_detail.type_t type = 16;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .gogo.fetcher.post_document_detail.source_t source = 17;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void post_document_detail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.fetcher.post_document_detail)
  GOOGLE_DCHECK_NE(&from, this);
  const post_document_detail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const post_document_detail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.fetcher.post_document_detail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.fetcher.post_document_detail)
    MergeFrom(*source);
  }
}

void post_document_detail::MergeFrom(const post_document_detail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.fetcher.post_document_detail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_.MergeFrom(from.image_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_text_context();
      text_context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_context_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_user_url();
      user_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_url_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_public_name();
      public_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_name_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_public_url();
      public_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_url_);
    }
    if (cached_has_bits & 0x00000080u) {
      download_time_ = from.download_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      post_time_ = from.post_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      views_ = from.views_;
    }
    if (cached_has_bits & 0x00000400u) {
      likes_ = from.likes_;
    }
    if (cached_has_bits & 0x00000800u) {
      share_ = from.share_;
    }
    if (cached_has_bits & 0x00001000u) {
      spam_level_ = from.spam_level_;
    }
    if (cached_has_bits & 0x00002000u) {
      porno_level_ = from.porno_level_;
    }
    if (cached_has_bits & 0x00004000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00008000u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void post_document_detail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.fetcher.post_document_detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void post_document_detail::CopyFrom(const post_document_detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.fetcher.post_document_detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool post_document_detail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000087) != 0x00000087) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->image())) return false;
  return true;
}

void post_document_detail::Swap(post_document_detail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void post_document_detail::InternalSwap(post_document_detail* other) {
  using std::swap;
  image_.InternalSwap(&other->image_);
  url_.Swap(&other->url_);
  title_.Swap(&other->title_);
  text_context_.Swap(&other->text_context_);
  user_name_.Swap(&other->user_name_);
  user_url_.Swap(&other->user_url_);
  public_name_.Swap(&other->public_name_);
  public_url_.Swap(&other->public_url_);
  swap(download_time_, other->download_time_);
  swap(post_time_, other->post_time_);
  swap(views_, other->views_);
  swap(likes_, other->likes_);
  swap(share_, other->share_);
  swap(spam_level_, other->spam_level_);
  swap(porno_level_, other->porno_level_);
  swap(type_, other->type_);
  swap(source_, other->source_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata post_document_detail::GetMetadata() const {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// post_document_detail

// required string url = 1;
bool post_document_detail::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void post_document_detail::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void post_document_detail::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void post_document_detail::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& post_document_detail::url() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.url)
  return url_.GetNoArena();
}
void post_document_detail::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.url)
}
#if LANG_CXX11
void post_document_detail::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.post_document_detail.url)
}
#endif
void post_document_detail::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.post_document_detail.url)
}
void post_document_detail::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.post_document_detail.url)
}
::std::string* post_document_detail::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.post_document_detail.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* post_document_detail::release_url() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.post_document_detail.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void post_document_detail::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.post_document_detail.url)
}

// required string title = 2;
bool post_document_detail::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void post_document_detail::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void post_document_detail::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void post_document_detail::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& post_document_detail::title() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.title)
  return title_.GetNoArena();
}
void post_document_detail::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.title)
}
#if LANG_CXX11
void post_document_detail::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.post_document_detail.title)
}
#endif
void post_document_detail::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.post_document_detail.title)
}
void post_document_detail::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.post_document_detail.title)
}
::std::string* post_document_detail::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.post_document_detail.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* post_document_detail::release_title() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.post_document_detail.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void post_document_detail::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.post_document_detail.title)
}

// required string text_context = 3;
bool post_document_detail::has_text_context() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void post_document_detail::set_has_text_context() {
  _has_bits_[0] |= 0x00000004u;
}
void post_document_detail::clear_has_text_context() {
  _has_bits_[0] &= ~0x00000004u;
}
void post_document_detail::clear_text_context() {
  text_context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_context();
}
const ::std::string& post_document_detail::text_context() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.text_context)
  return text_context_.GetNoArena();
}
void post_document_detail::set_text_context(const ::std::string& value) {
  set_has_text_context();
  text_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.text_context)
}
#if LANG_CXX11
void post_document_detail::set_text_context(::std::string&& value) {
  set_has_text_context();
  text_context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.post_document_detail.text_context)
}
#endif
void post_document_detail::set_text_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text_context();
  text_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.post_document_detail.text_context)
}
void post_document_detail::set_text_context(const char* value, size_t size) {
  set_has_text_context();
  text_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.post_document_detail.text_context)
}
::std::string* post_document_detail::mutable_text_context() {
  set_has_text_context();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.post_document_detail.text_context)
  return text_context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* post_document_detail::release_text_context() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.post_document_detail.text_context)
  clear_has_text_context();
  return text_context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void post_document_detail::set_allocated_text_context(::std::string* text_context) {
  if (text_context != NULL) {
    set_has_text_context();
  } else {
    clear_has_text_context();
  }
  text_context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_context);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.post_document_detail.text_context)
}

// optional string user_name = 4;
bool post_document_detail::has_user_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void post_document_detail::set_has_user_name() {
  _has_bits_[0] |= 0x00000008u;
}
void post_document_detail::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void post_document_detail::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
const ::std::string& post_document_detail::user_name() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.user_name)
  return user_name_.GetNoArena();
}
void post_document_detail::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.user_name)
}
#if LANG_CXX11
void post_document_detail::set_user_name(::std::string&& value) {
  set_has_user_name();
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.post_document_detail.user_name)
}
#endif
void post_document_detail::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.post_document_detail.user_name)
}
void post_document_detail::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.post_document_detail.user_name)
}
::std::string* post_document_detail::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.post_document_detail.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* post_document_detail::release_user_name() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.post_document_detail.user_name)
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void post_document_detail::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.post_document_detail.user_name)
}

// optional string user_url = 5;
bool post_document_detail::has_user_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void post_document_detail::set_has_user_url() {
  _has_bits_[0] |= 0x00000010u;
}
void post_document_detail::clear_has_user_url() {
  _has_bits_[0] &= ~0x00000010u;
}
void post_document_detail::clear_user_url() {
  user_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_url();
}
const ::std::string& post_document_detail::user_url() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.user_url)
  return user_url_.GetNoArena();
}
void post_document_detail::set_user_url(const ::std::string& value) {
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.user_url)
}
#if LANG_CXX11
void post_document_detail::set_user_url(::std::string&& value) {
  set_has_user_url();
  user_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.post_document_detail.user_url)
}
#endif
void post_document_detail::set_user_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.post_document_detail.user_url)
}
void post_document_detail::set_user_url(const char* value, size_t size) {
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.post_document_detail.user_url)
}
::std::string* post_document_detail::mutable_user_url() {
  set_has_user_url();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.post_document_detail.user_url)
  return user_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* post_document_detail::release_user_url() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.post_document_detail.user_url)
  clear_has_user_url();
  return user_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void post_document_detail::set_allocated_user_url(::std::string* user_url) {
  if (user_url != NULL) {
    set_has_user_url();
  } else {
    clear_has_user_url();
  }
  user_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_url);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.post_document_detail.user_url)
}

// optional string public_name = 6;
bool post_document_detail::has_public_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void post_document_detail::set_has_public_name() {
  _has_bits_[0] |= 0x00000020u;
}
void post_document_detail::clear_has_public_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void post_document_detail::clear_public_name() {
  public_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_name();
}
const ::std::string& post_document_detail::public_name() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.public_name)
  return public_name_.GetNoArena();
}
void post_document_detail::set_public_name(const ::std::string& value) {
  set_has_public_name();
  public_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.public_name)
}
#if LANG_CXX11
void post_document_detail::set_public_name(::std::string&& value) {
  set_has_public_name();
  public_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.post_document_detail.public_name)
}
#endif
void post_document_detail::set_public_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_name();
  public_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.post_document_detail.public_name)
}
void post_document_detail::set_public_name(const char* value, size_t size) {
  set_has_public_name();
  public_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.post_document_detail.public_name)
}
::std::string* post_document_detail::mutable_public_name() {
  set_has_public_name();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.post_document_detail.public_name)
  return public_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* post_document_detail::release_public_name() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.post_document_detail.public_name)
  clear_has_public_name();
  return public_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void post_document_detail::set_allocated_public_name(::std::string* public_name) {
  if (public_name != NULL) {
    set_has_public_name();
  } else {
    clear_has_public_name();
  }
  public_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_name);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.post_document_detail.public_name)
}

// optional string public_url = 7;
bool post_document_detail::has_public_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void post_document_detail::set_has_public_url() {
  _has_bits_[0] |= 0x00000040u;
}
void post_document_detail::clear_has_public_url() {
  _has_bits_[0] &= ~0x00000040u;
}
void post_document_detail::clear_public_url() {
  public_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_url();
}
const ::std::string& post_document_detail::public_url() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.public_url)
  return public_url_.GetNoArena();
}
void post_document_detail::set_public_url(const ::std::string& value) {
  set_has_public_url();
  public_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.public_url)
}
#if LANG_CXX11
void post_document_detail::set_public_url(::std::string&& value) {
  set_has_public_url();
  public_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.post_document_detail.public_url)
}
#endif
void post_document_detail::set_public_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_url();
  public_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.post_document_detail.public_url)
}
void post_document_detail::set_public_url(const char* value, size_t size) {
  set_has_public_url();
  public_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.post_document_detail.public_url)
}
::std::string* post_document_detail::mutable_public_url() {
  set_has_public_url();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.post_document_detail.public_url)
  return public_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* post_document_detail::release_public_url() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.post_document_detail.public_url)
  clear_has_public_url();
  return public_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void post_document_detail::set_allocated_public_url(::std::string* public_url) {
  if (public_url != NULL) {
    set_has_public_url();
  } else {
    clear_has_public_url();
  }
  public_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_url);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.post_document_detail.public_url)
}

// required uint64 download_time = 8;
bool post_document_detail::has_download_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void post_document_detail::set_has_download_time() {
  _has_bits_[0] |= 0x00000080u;
}
void post_document_detail::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void post_document_detail::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
::google::protobuf::uint64 post_document_detail::download_time() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.download_time)
  return download_time_;
}
void post_document_detail::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.download_time)
}

// repeated .gogo.fetcher.fetcher_image image = 9;
int post_document_detail::image_size() const {
  return image_.size();
}
void post_document_detail::clear_image() {
  image_.Clear();
}
const ::gogo::fetcher::fetcher_image& post_document_detail::image(int index) const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.image)
  return image_.Get(index);
}
::gogo::fetcher::fetcher_image* post_document_detail::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.post_document_detail.image)
  return image_.Mutable(index);
}
::gogo::fetcher::fetcher_image* post_document_detail::add_image() {
  // @@protoc_insertion_point(field_add:gogo.fetcher.post_document_detail.image)
  return image_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >*
post_document_detail::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:gogo.fetcher.post_document_detail.image)
  return &image_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >&
post_document_detail::image() const {
  // @@protoc_insertion_point(field_list:gogo.fetcher.post_document_detail.image)
  return image_;
}

// optional uint64 post_time = 10;
bool post_document_detail::has_post_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void post_document_detail::set_has_post_time() {
  _has_bits_[0] |= 0x00000100u;
}
void post_document_detail::clear_has_post_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void post_document_detail::clear_post_time() {
  post_time_ = GOOGLE_ULONGLONG(0);
  clear_has_post_time();
}
::google::protobuf::uint64 post_document_detail::post_time() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.post_time)
  return post_time_;
}
void post_document_detail::set_post_time(::google::protobuf::uint64 value) {
  set_has_post_time();
  post_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.post_time)
}

// optional uint32 views = 11;
bool post_document_detail::has_views() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void post_document_detail::set_has_views() {
  _has_bits_[0] |= 0x00000200u;
}
void post_document_detail::clear_has_views() {
  _has_bits_[0] &= ~0x00000200u;
}
void post_document_detail::clear_views() {
  views_ = 0u;
  clear_has_views();
}
::google::protobuf::uint32 post_document_detail::views() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.views)
  return views_;
}
void post_document_detail::set_views(::google::protobuf::uint32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.views)
}

// optional uint32 likes = 12;
bool post_document_detail::has_likes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void post_document_detail::set_has_likes() {
  _has_bits_[0] |= 0x00000400u;
}
void post_document_detail::clear_has_likes() {
  _has_bits_[0] &= ~0x00000400u;
}
void post_document_detail::clear_likes() {
  likes_ = 0u;
  clear_has_likes();
}
::google::protobuf::uint32 post_document_detail::likes() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.likes)
  return likes_;
}
void post_document_detail::set_likes(::google::protobuf::uint32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.likes)
}

// optional uint32 share = 13;
bool post_document_detail::has_share() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void post_document_detail::set_has_share() {
  _has_bits_[0] |= 0x00000800u;
}
void post_document_detail::clear_has_share() {
  _has_bits_[0] &= ~0x00000800u;
}
void post_document_detail::clear_share() {
  share_ = 0u;
  clear_has_share();
}
::google::protobuf::uint32 post_document_detail::share() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.share)
  return share_;
}
void post_document_detail::set_share(::google::protobuf::uint32 value) {
  set_has_share();
  share_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.share)
}

// optional uint32 spam_level = 14;
bool post_document_detail::has_spam_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void post_document_detail::set_has_spam_level() {
  _has_bits_[0] |= 0x00001000u;
}
void post_document_detail::clear_has_spam_level() {
  _has_bits_[0] &= ~0x00001000u;
}
void post_document_detail::clear_spam_level() {
  spam_level_ = 0u;
  clear_has_spam_level();
}
::google::protobuf::uint32 post_document_detail::spam_level() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.spam_level)
  return spam_level_;
}
void post_document_detail::set_spam_level(::google::protobuf::uint32 value) {
  set_has_spam_level();
  spam_level_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.spam_level)
}

// optional uint32 porno_level = 15;
bool post_document_detail::has_porno_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void post_document_detail::set_has_porno_level() {
  _has_bits_[0] |= 0x00002000u;
}
void post_document_detail::clear_has_porno_level() {
  _has_bits_[0] &= ~0x00002000u;
}
void post_document_detail::clear_porno_level() {
  porno_level_ = 0u;
  clear_has_porno_level();
}
::google::protobuf::uint32 post_document_detail::porno_level() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.porno_level)
  return porno_level_;
}
void post_document_detail::set_porno_level(::google::protobuf::uint32 value) {
  set_has_porno_level();
  porno_level_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.porno_level)
}

// optional .gogo.fetcher.post_document_detail.type_t type = 16;
bool post_document_detail::has_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void post_document_detail::set_has_type() {
  _has_bits_[0] |= 0x00004000u;
}
void post_document_detail::clear_has_type() {
  _has_bits_[0] &= ~0x00004000u;
}
void post_document_detail::clear_type() {
  type_ = 1;
  clear_has_type();
}
::gogo::fetcher::post_document_detail_type_t post_document_detail::type() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.type)
  return static_cast< ::gogo::fetcher::post_document_detail_type_t >(type_);
}
void post_document_detail::set_type(::gogo::fetcher::post_document_detail_type_t value) {
  assert(::gogo::fetcher::post_document_detail_type_t_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.type)
}

// optional .gogo.fetcher.post_document_detail.source_t source = 17;
bool post_document_detail::has_source() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void post_document_detail::set_has_source() {
  _has_bits_[0] |= 0x00008000u;
}
void post_document_detail::clear_has_source() {
  _has_bits_[0] &= ~0x00008000u;
}
void post_document_detail::clear_source() {
  source_ = 1;
  clear_has_source();
}
::gogo::fetcher::post_document_detail_source_t post_document_detail::source() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.source)
  return static_cast< ::gogo::fetcher::post_document_detail_source_t >(source_);
}
void post_document_detail::set_source(::gogo::fetcher::post_document_detail_source_t value) {
  assert(::gogo::fetcher::post_document_detail_source_t_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int insta_profile_extra::kNameFieldNumber;
const int insta_profile_extra::kLoginFieldNumber;
const int insta_profile_extra::kPostsFieldNumber;
const int insta_profile_extra::kFollowersFieldNumber;
const int insta_profile_extra::kFollowingFieldNumber;
const int insta_profile_extra::kOfficialFieldNumber;
const int insta_profile_extra::kDownloadTimeFieldNumber;
const int insta_profile_extra::kAvatarFieldNumber;
const int insta_profile_extra::kLastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

insta_profile_extra::insta_profile_extra()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.fetcher.insta_profile_extra)
}
insta_profile_extra::insta_profile_extra(const insta_profile_extra& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      last_(from.last_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_login()) {
    login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
  if (from.has_avatar()) {
    avatar_ = new ::gogo::fetcher::fetcher_image(*from.avatar_);
  } else {
    avatar_ = NULL;
  }
  ::memcpy(&posts_, &from.posts_,
    static_cast<size_t>(reinterpret_cast<char*>(&official_) -
    reinterpret_cast<char*>(&posts_)) + sizeof(official_));
  // @@protoc_insertion_point(copy_constructor:gogo.fetcher.insta_profile_extra)
}

void insta_profile_extra::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&avatar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&official_) -
      reinterpret_cast<char*>(&avatar_)) + sizeof(official_));
}

insta_profile_extra::~insta_profile_extra() {
  // @@protoc_insertion_point(destructor:gogo.fetcher.insta_profile_extra)
  SharedDtor();
}

void insta_profile_extra::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete avatar_;
}

void insta_profile_extra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* insta_profile_extra::descriptor() {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const insta_profile_extra& insta_profile_extra::default_instance() {
  protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

insta_profile_extra* insta_profile_extra::New(::google::protobuf::Arena* arena) const {
  insta_profile_extra* n = new insta_profile_extra;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void insta_profile_extra::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.fetcher.insta_profile_extra)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!login_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*login_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(avatar_ != NULL);
      avatar_->::gogo::fetcher::fetcher_image::Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&posts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&official_) -
        reinterpret_cast<char*>(&posts_)) + sizeof(official_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool insta_profile_extra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.fetcher.insta_profile_extra)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.insta_profile_extra.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string login = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login().data(), static_cast<int>(this->login().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.insta_profile_extra.login");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 posts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_posts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &posts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 followers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_followers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &followers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 following = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_following();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &following_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool official = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_official();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &official_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 download_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_download_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &download_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.fetcher.fetcher_image avatar = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.fetcher.fetcher_image last = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_last()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.fetcher.insta_profile_extra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.fetcher.insta_profile_extra)
  return false;
#undef DO_
}

void insta_profile_extra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.fetcher.insta_profile_extra)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.insta_profile_extra.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string login = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), static_cast<int>(this->login().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.insta_profile_extra.login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->login(), output);
  }

  // required uint64 posts = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->posts(), output);
  }

  // required uint64 followers = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->followers(), output);
  }

  // required uint64 following = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->following(), output);
  }

  // required bool official = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->official(), output);
  }

  // required uint64 download_time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->download_time(), output);
  }

  // optional .gogo.fetcher.fetcher_image avatar = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->avatar_, output);
  }

  // repeated .gogo.fetcher.fetcher_image last = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->last_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->last(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.fetcher.insta_profile_extra)
}

::google::protobuf::uint8* insta_profile_extra::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.fetcher.insta_profile_extra)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.insta_profile_extra.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string login = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), static_cast<int>(this->login().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.insta_profile_extra.login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->login(), target);
  }

  // required uint64 posts = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->posts(), target);
  }

  // required uint64 followers = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->followers(), target);
  }

  // required uint64 following = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->following(), target);
  }

  // required bool official = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->official(), target);
  }

  // required uint64 download_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->download_time(), target);
  }

  // optional .gogo.fetcher.fetcher_image avatar = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->avatar_, deterministic, target);
  }

  // repeated .gogo.fetcher.fetcher_image last = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->last_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->last(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.fetcher.insta_profile_extra)
  return target;
}

size_t insta_profile_extra::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.fetcher.insta_profile_extra)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_login()) {
    // required string login = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->login());
  }

  if (has_posts()) {
    // required uint64 posts = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->posts());
  }

  if (has_followers()) {
    // required uint64 followers = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->followers());
  }

  if (has_following()) {
    // required uint64 following = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->following());
  }

  if (has_download_time()) {
    // required uint64 download_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->download_time());
  }

  if (has_official()) {
    // required bool official = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t insta_profile_extra::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.fetcher.insta_profile_extra)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000fb) ^ 0x000000fb) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string login = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->login());

    // required uint64 posts = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->posts());

    // required uint64 followers = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->followers());

    // required uint64 following = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->following());

    // required uint64 download_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->download_time());

    // required bool official = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .gogo.fetcher.fetcher_image last = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->last_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last(static_cast<int>(i)));
    }
  }

  // optional .gogo.fetcher.fetcher_image avatar = 8;
  if (has_avatar()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->avatar_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void insta_profile_extra::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.fetcher.insta_profile_extra)
  GOOGLE_DCHECK_NE(&from, this);
  const insta_profile_extra* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const insta_profile_extra>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.fetcher.insta_profile_extra)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.fetcher.insta_profile_extra)
    MergeFrom(*source);
  }
}

void insta_profile_extra::MergeFrom(const insta_profile_extra& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.fetcher.insta_profile_extra)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  last_.MergeFrom(from.last_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_login();
      login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_avatar()->::gogo::fetcher::fetcher_image::MergeFrom(from.avatar());
    }
    if (cached_has_bits & 0x00000008u) {
      posts_ = from.posts_;
    }
    if (cached_has_bits & 0x00000010u) {
      followers_ = from.followers_;
    }
    if (cached_has_bits & 0x00000020u) {
      following_ = from.following_;
    }
    if (cached_has_bits & 0x00000040u) {
      download_time_ = from.download_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      official_ = from.official_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void insta_profile_extra::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.fetcher.insta_profile_extra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void insta_profile_extra::CopyFrom(const insta_profile_extra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.fetcher.insta_profile_extra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool insta_profile_extra::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fb) != 0x000000fb) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->last())) return false;
  if (has_avatar()) {
    if (!this->avatar_->IsInitialized()) return false;
  }
  return true;
}

void insta_profile_extra::Swap(insta_profile_extra* other) {
  if (other == this) return;
  InternalSwap(other);
}
void insta_profile_extra::InternalSwap(insta_profile_extra* other) {
  using std::swap;
  last_.InternalSwap(&other->last_);
  name_.Swap(&other->name_);
  login_.Swap(&other->login_);
  swap(avatar_, other->avatar_);
  swap(posts_, other->posts_);
  swap(followers_, other->followers_);
  swap(following_, other->following_);
  swap(download_time_, other->download_time_);
  swap(official_, other->official_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata insta_profile_extra::GetMetadata() const {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// insta_profile_extra

// required string name = 1;
bool insta_profile_extra::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void insta_profile_extra::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void insta_profile_extra::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void insta_profile_extra::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& insta_profile_extra::name() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.name)
  return name_.GetNoArena();
}
void insta_profile_extra::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.insta_profile_extra.name)
}
#if LANG_CXX11
void insta_profile_extra::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.insta_profile_extra.name)
}
#endif
void insta_profile_extra::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.insta_profile_extra.name)
}
void insta_profile_extra::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.insta_profile_extra.name)
}
::std::string* insta_profile_extra::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.insta_profile_extra.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* insta_profile_extra::release_name() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.insta_profile_extra.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void insta_profile_extra::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.insta_profile_extra.name)
}

// required string login = 2;
bool insta_profile_extra::has_login() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void insta_profile_extra::set_has_login() {
  _has_bits_[0] |= 0x00000002u;
}
void insta_profile_extra::clear_has_login() {
  _has_bits_[0] &= ~0x00000002u;
}
void insta_profile_extra::clear_login() {
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_login();
}
const ::std::string& insta_profile_extra::login() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.login)
  return login_.GetNoArena();
}
void insta_profile_extra::set_login(const ::std::string& value) {
  set_has_login();
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.insta_profile_extra.login)
}
#if LANG_CXX11
void insta_profile_extra::set_login(::std::string&& value) {
  set_has_login();
  login_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.insta_profile_extra.login)
}
#endif
void insta_profile_extra::set_login(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_login();
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.insta_profile_extra.login)
}
void insta_profile_extra::set_login(const char* value, size_t size) {
  set_has_login();
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.insta_profile_extra.login)
}
::std::string* insta_profile_extra::mutable_login() {
  set_has_login();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.insta_profile_extra.login)
  return login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* insta_profile_extra::release_login() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.insta_profile_extra.login)
  clear_has_login();
  return login_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void insta_profile_extra::set_allocated_login(::std::string* login) {
  if (login != NULL) {
    set_has_login();
  } else {
    clear_has_login();
  }
  login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.insta_profile_extra.login)
}

// required uint64 posts = 3;
bool insta_profile_extra::has_posts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void insta_profile_extra::set_has_posts() {
  _has_bits_[0] |= 0x00000008u;
}
void insta_profile_extra::clear_has_posts() {
  _has_bits_[0] &= ~0x00000008u;
}
void insta_profile_extra::clear_posts() {
  posts_ = GOOGLE_ULONGLONG(0);
  clear_has_posts();
}
::google::protobuf::uint64 insta_profile_extra::posts() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.posts)
  return posts_;
}
void insta_profile_extra::set_posts(::google::protobuf::uint64 value) {
  set_has_posts();
  posts_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.insta_profile_extra.posts)
}

// required uint64 followers = 4;
bool insta_profile_extra::has_followers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void insta_profile_extra::set_has_followers() {
  _has_bits_[0] |= 0x00000010u;
}
void insta_profile_extra::clear_has_followers() {
  _has_bits_[0] &= ~0x00000010u;
}
void insta_profile_extra::clear_followers() {
  followers_ = GOOGLE_ULONGLONG(0);
  clear_has_followers();
}
::google::protobuf::uint64 insta_profile_extra::followers() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.followers)
  return followers_;
}
void insta_profile_extra::set_followers(::google::protobuf::uint64 value) {
  set_has_followers();
  followers_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.insta_profile_extra.followers)
}

// required uint64 following = 5;
bool insta_profile_extra::has_following() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void insta_profile_extra::set_has_following() {
  _has_bits_[0] |= 0x00000020u;
}
void insta_profile_extra::clear_has_following() {
  _has_bits_[0] &= ~0x00000020u;
}
void insta_profile_extra::clear_following() {
  following_ = GOOGLE_ULONGLONG(0);
  clear_has_following();
}
::google::protobuf::uint64 insta_profile_extra::following() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.following)
  return following_;
}
void insta_profile_extra::set_following(::google::protobuf::uint64 value) {
  set_has_following();
  following_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.insta_profile_extra.following)
}

// required bool official = 6;
bool insta_profile_extra::has_official() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void insta_profile_extra::set_has_official() {
  _has_bits_[0] |= 0x00000080u;
}
void insta_profile_extra::clear_has_official() {
  _has_bits_[0] &= ~0x00000080u;
}
void insta_profile_extra::clear_official() {
  official_ = false;
  clear_has_official();
}
bool insta_profile_extra::official() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.official)
  return official_;
}
void insta_profile_extra::set_official(bool value) {
  set_has_official();
  official_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.insta_profile_extra.official)
}

// required uint64 download_time = 7;
bool insta_profile_extra::has_download_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void insta_profile_extra::set_has_download_time() {
  _has_bits_[0] |= 0x00000040u;
}
void insta_profile_extra::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void insta_profile_extra::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
::google::protobuf::uint64 insta_profile_extra::download_time() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.download_time)
  return download_time_;
}
void insta_profile_extra::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.insta_profile_extra.download_time)
}

// optional .gogo.fetcher.fetcher_image avatar = 8;
bool insta_profile_extra::has_avatar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void insta_profile_extra::set_has_avatar() {
  _has_bits_[0] |= 0x00000004u;
}
void insta_profile_extra::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000004u;
}
void insta_profile_extra::clear_avatar() {
  if (avatar_ != NULL) avatar_->::gogo::fetcher::fetcher_image::Clear();
  clear_has_avatar();
}
const ::gogo::fetcher::fetcher_image& insta_profile_extra::avatar() const {
  const ::gogo::fetcher::fetcher_image* p = avatar_;
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.avatar)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::fetcher::fetcher_image*>(
      &::gogo::fetcher::_fetcher_image_default_instance_);
}
::gogo::fetcher::fetcher_image* insta_profile_extra::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == NULL) {
    avatar_ = new ::gogo::fetcher::fetcher_image;
  }
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.insta_profile_extra.avatar)
  return avatar_;
}
::gogo::fetcher::fetcher_image* insta_profile_extra::release_avatar() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.insta_profile_extra.avatar)
  clear_has_avatar();
  ::gogo::fetcher::fetcher_image* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
void insta_profile_extra::set_allocated_avatar(::gogo::fetcher::fetcher_image* avatar) {
  delete avatar_;
  avatar_ = avatar;
  if (avatar) {
    set_has_avatar();
  } else {
    clear_has_avatar();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.insta_profile_extra.avatar)
}

// repeated .gogo.fetcher.fetcher_image last = 9;
int insta_profile_extra::last_size() const {
  return last_.size();
}
void insta_profile_extra::clear_last() {
  last_.Clear();
}
const ::gogo::fetcher::fetcher_image& insta_profile_extra::last(int index) const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.last)
  return last_.Get(index);
}
::gogo::fetcher::fetcher_image* insta_profile_extra::mutable_last(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.insta_profile_extra.last)
  return last_.Mutable(index);
}
::gogo::fetcher::fetcher_image* insta_profile_extra::add_last() {
  // @@protoc_insertion_point(field_add:gogo.fetcher.insta_profile_extra.last)
  return last_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >*
insta_profile_extra::mutable_last() {
  // @@protoc_insertion_point(field_mutable_list:gogo.fetcher.insta_profile_extra.last)
  return &last_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >&
insta_profile_extra::last() const {
  // @@protoc_insertion_point(field_list:gogo.fetcher.insta_profile_extra.last)
  return last_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int vk_snippet_data::kBahromaJsonFieldNumber;
const int vk_snippet_data::kPhalanxImagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

vk_snippet_data::vk_snippet_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.fetcher.vk_snippet_data)
}
vk_snippet_data::vk_snippet_data(const vk_snippet_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      phalanx_images_(from.phalanx_images_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bahroma_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bahroma_json()) {
    bahroma_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bahroma_json_);
  }
  // @@protoc_insertion_point(copy_constructor:gogo.fetcher.vk_snippet_data)
}

void vk_snippet_data::SharedCtor() {
  _cached_size_ = 0;
  bahroma_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

vk_snippet_data::~vk_snippet_data() {
  // @@protoc_insertion_point(destructor:gogo.fetcher.vk_snippet_data)
  SharedDtor();
}

void vk_snippet_data::SharedDtor() {
  bahroma_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void vk_snippet_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vk_snippet_data::descriptor() {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const vk_snippet_data& vk_snippet_data::default_instance() {
  protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

vk_snippet_data* vk_snippet_data::New(::google::protobuf::Arena* arena) const {
  vk_snippet_data* n = new vk_snippet_data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void vk_snippet_data::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.fetcher.vk_snippet_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phalanx_images_.Clear();
  if (has_bahroma_json()) {
    GOOGLE_DCHECK(!bahroma_json_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*bahroma_json_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool vk_snippet_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.fetcher.vk_snippet_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string bahroma_json = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bahroma_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bahroma_json().data(), static_cast<int>(this->bahroma_json().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.vk_snippet_data.bahroma_json");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.fetcher.fetcher_image phalanx_images = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phalanx_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.fetcher.vk_snippet_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.fetcher.vk_snippet_data)
  return false;
#undef DO_
}

void vk_snippet_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.fetcher.vk_snippet_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string bahroma_json = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bahroma_json().data(), static_cast<int>(this->bahroma_json().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.vk_snippet_data.bahroma_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bahroma_json(), output);
  }

  // repeated .gogo.fetcher.fetcher_image phalanx_images = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->phalanx_images_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->phalanx_images(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.fetcher.vk_snippet_data)
}

::google::protobuf::uint8* vk_snippet_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.fetcher.vk_snippet_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string bahroma_json = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bahroma_json().data(), static_cast<int>(this->bahroma_json().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.vk_snippet_data.bahroma_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bahroma_json(), target);
  }

  // repeated .gogo.fetcher.fetcher_image phalanx_images = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->phalanx_images_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->phalanx_images(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.fetcher.vk_snippet_data)
  return target;
}

size_t vk_snippet_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.fetcher.vk_snippet_data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string bahroma_json = 1;
  if (has_bahroma_json()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bahroma_json());
  }
  // repeated .gogo.fetcher.fetcher_image phalanx_images = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->phalanx_images_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->phalanx_images(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vk_snippet_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.fetcher.vk_snippet_data)
  GOOGLE_DCHECK_NE(&from, this);
  const vk_snippet_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const vk_snippet_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.fetcher.vk_snippet_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.fetcher.vk_snippet_data)
    MergeFrom(*source);
  }
}

void vk_snippet_data::MergeFrom(const vk_snippet_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.fetcher.vk_snippet_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phalanx_images_.MergeFrom(from.phalanx_images_);
  if (from.has_bahroma_json()) {
    set_has_bahroma_json();
    bahroma_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bahroma_json_);
  }
}

void vk_snippet_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.fetcher.vk_snippet_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vk_snippet_data::CopyFrom(const vk_snippet_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.fetcher.vk_snippet_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vk_snippet_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->phalanx_images())) return false;
  return true;
}

void vk_snippet_data::Swap(vk_snippet_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void vk_snippet_data::InternalSwap(vk_snippet_data* other) {
  using std::swap;
  phalanx_images_.InternalSwap(&other->phalanx_images_);
  bahroma_json_.Swap(&other->bahroma_json_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata vk_snippet_data::GetMetadata() const {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// vk_snippet_data

// required string bahroma_json = 1;
bool vk_snippet_data::has_bahroma_json() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void vk_snippet_data::set_has_bahroma_json() {
  _has_bits_[0] |= 0x00000001u;
}
void vk_snippet_data::clear_has_bahroma_json() {
  _has_bits_[0] &= ~0x00000001u;
}
void vk_snippet_data::clear_bahroma_json() {
  bahroma_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bahroma_json();
}
const ::std::string& vk_snippet_data::bahroma_json() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.vk_snippet_data.bahroma_json)
  return bahroma_json_.GetNoArena();
}
void vk_snippet_data::set_bahroma_json(const ::std::string& value) {
  set_has_bahroma_json();
  bahroma_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.vk_snippet_data.bahroma_json)
}
#if LANG_CXX11
void vk_snippet_data::set_bahroma_json(::std::string&& value) {
  set_has_bahroma_json();
  bahroma_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.vk_snippet_data.bahroma_json)
}
#endif
void vk_snippet_data::set_bahroma_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bahroma_json();
  bahroma_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.vk_snippet_data.bahroma_json)
}
void vk_snippet_data::set_bahroma_json(const char* value, size_t size) {
  set_has_bahroma_json();
  bahroma_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.vk_snippet_data.bahroma_json)
}
::std::string* vk_snippet_data::mutable_bahroma_json() {
  set_has_bahroma_json();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.vk_snippet_data.bahroma_json)
  return bahroma_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* vk_snippet_data::release_bahroma_json() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.vk_snippet_data.bahroma_json)
  clear_has_bahroma_json();
  return bahroma_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void vk_snippet_data::set_allocated_bahroma_json(::std::string* bahroma_json) {
  if (bahroma_json != NULL) {
    set_has_bahroma_json();
  } else {
    clear_has_bahroma_json();
  }
  bahroma_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bahroma_json);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.vk_snippet_data.bahroma_json)
}

// repeated .gogo.fetcher.fetcher_image phalanx_images = 2;
int vk_snippet_data::phalanx_images_size() const {
  return phalanx_images_.size();
}
void vk_snippet_data::clear_phalanx_images() {
  phalanx_images_.Clear();
}
const ::gogo::fetcher::fetcher_image& vk_snippet_data::phalanx_images(int index) const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.vk_snippet_data.phalanx_images)
  return phalanx_images_.Get(index);
}
::gogo::fetcher::fetcher_image* vk_snippet_data::mutable_phalanx_images(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.vk_snippet_data.phalanx_images)
  return phalanx_images_.Mutable(index);
}
::gogo::fetcher::fetcher_image* vk_snippet_data::add_phalanx_images() {
  // @@protoc_insertion_point(field_add:gogo.fetcher.vk_snippet_data.phalanx_images)
  return phalanx_images_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >*
vk_snippet_data::mutable_phalanx_images() {
  // @@protoc_insertion_point(field_mutable_list:gogo.fetcher.vk_snippet_data.phalanx_images)
  return &phalanx_images_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >&
vk_snippet_data::phalanx_images() const {
  // @@protoc_insertion_point(field_list:gogo.fetcher.vk_snippet_data.phalanx_images)
  return phalanx_images_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int image_discovery::kUrlFieldNumber;
const int image_discovery::kHttpStatusFieldNumber;
const int image_discovery::kHeadersFieldNumber;
const int image_discovery::kContentFieldNumber;
const int image_discovery::kWidthFieldNumber;
const int image_discovery::kHeightFieldNumber;
const int image_discovery::kLeftFieldNumber;
const int image_discovery::kTopFieldNumber;
const int image_discovery::kZindexFieldNumber;
const int image_discovery::kHrefFieldNumber;
const int image_discovery::kMetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

image_discovery::image_discovery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.fetcher.image_discovery)
}
image_discovery::image_discovery(const image_discovery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  headers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_headers()) {
    headers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headers_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  href_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_href()) {
    href_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.href_);
  }
  meta_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_meta()) {
    meta_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meta_);
  }
  ::memcpy(&http_status_, &from.http_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&zindex_) -
    reinterpret_cast<char*>(&http_status_)) + sizeof(zindex_));
  // @@protoc_insertion_point(copy_constructor:gogo.fetcher.image_discovery)
}

void image_discovery::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  href_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&http_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zindex_) -
      reinterpret_cast<char*>(&http_status_)) + sizeof(zindex_));
}

image_discovery::~image_discovery() {
  // @@protoc_insertion_point(destructor:gogo.fetcher.image_discovery)
  SharedDtor();
}

void image_discovery::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headers_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  href_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void image_discovery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* image_discovery::descriptor() {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const image_discovery& image_discovery::default_instance() {
  protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

image_discovery* image_discovery::New(::google::protobuf::Arena* arena) const {
  image_discovery* n = new image_discovery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void image_discovery::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.fetcher.image_discovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!headers_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*headers_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!href_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*href_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!meta_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*meta_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&http_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&http_status_)) + sizeof(height_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&zindex_) -
        reinterpret_cast<char*>(&left_)) + sizeof(zindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool image_discovery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.fetcher.image_discovery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.image_discovery.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 http_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_http_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &http_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string headers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headers().data(), static_cast<int>(this->headers().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.image_discovery.headers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 left = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 top = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_top();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 zindex = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_zindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string href = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_href()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->href().data(), static_cast<int>(this->href().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.image_discovery.href");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string meta = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meta()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->meta().data(), static_cast<int>(this->meta().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.image_discovery.meta");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.fetcher.image_discovery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.fetcher.image_discovery)
  return false;
#undef DO_
}

void image_discovery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.fetcher.image_discovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.image_discovery.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required uint32 http_status = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->http_status(), output);
  }

  // optional string headers = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headers().data(), static_cast<int>(this->headers().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.image_discovery.headers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->headers(), output);
  }

  // optional bytes content = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  // optional uint32 width = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->width(), output);
  }

  // optional uint32 height = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->height(), output);
  }

  // optional int32 left = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->left(), output);
  }

  // optional int32 top = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->top(), output);
  }

  // optional int32 zindex = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->zindex(), output);
  }

  // optional string href = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->href().data(), static_cast<int>(this->href().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.image_discovery.href");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->href(), output);
  }

  // optional string meta = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meta().data(), static_cast<int>(this->meta().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.image_discovery.meta");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->meta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.fetcher.image_discovery)
}

::google::protobuf::uint8* image_discovery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.fetcher.image_discovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.image_discovery.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required uint32 http_status = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->http_status(), target);
  }

  // optional string headers = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headers().data(), static_cast<int>(this->headers().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.image_discovery.headers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->headers(), target);
  }

  // optional bytes content = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // optional uint32 width = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->width(), target);
  }

  // optional uint32 height = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->height(), target);
  }

  // optional int32 left = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->left(), target);
  }

  // optional int32 top = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->top(), target);
  }

  // optional int32 zindex = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->zindex(), target);
  }

  // optional string href = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->href().data(), static_cast<int>(this->href().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.image_discovery.href");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->href(), target);
  }

  // optional string meta = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meta().data(), static_cast<int>(this->meta().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.image_discovery.meta");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->meta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.fetcher.image_discovery)
  return target;
}

size_t image_discovery::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.fetcher.image_discovery)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_http_status()) {
    // required uint32 http_status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->http_status());
  }

  return total_size;
}
size_t image_discovery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.fetcher.image_discovery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000021) ^ 0x00000021) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required uint32 http_status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->http_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional string headers = 3;
    if (has_headers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headers());
    }

    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional string href = 10;
    if (has_href()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->href());
    }

    // optional string meta = 11;
    if (has_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meta());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional uint32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 6;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 left = 7;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left());
    }

    // optional int32 top = 8;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top());
    }

    // optional int32 zindex = 9;
    if (has_zindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void image_discovery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.fetcher.image_discovery)
  GOOGLE_DCHECK_NE(&from, this);
  const image_discovery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const image_discovery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.fetcher.image_discovery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.fetcher.image_discovery)
    MergeFrom(*source);
  }
}

void image_discovery::MergeFrom(const image_discovery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.fetcher.image_discovery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_headers();
      headers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headers_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_href();
      href_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.href_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_meta();
      meta_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meta_);
    }
    if (cached_has_bits & 0x00000020u) {
      http_status_ = from.http_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000080u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000200u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000400u) {
      zindex_ = from.zindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void image_discovery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.fetcher.image_discovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void image_discovery::CopyFrom(const image_discovery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.fetcher.image_discovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool image_discovery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;
  return true;
}

void image_discovery::Swap(image_discovery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void image_discovery::InternalSwap(image_discovery* other) {
  using std::swap;
  url_.Swap(&other->url_);
  headers_.Swap(&other->headers_);
  content_.Swap(&other->content_);
  href_.Swap(&other->href_);
  meta_.Swap(&other->meta_);
  swap(http_status_, other->http_status_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(left_, other->left_);
  swap(top_, other->top_);
  swap(zindex_, other->zindex_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata image_discovery::GetMetadata() const {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// image_discovery

// required string url = 1;
bool image_discovery::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void image_discovery::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void image_discovery::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void image_discovery::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& image_discovery::url() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.url)
  return url_.GetNoArena();
}
void image_discovery::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.url)
}
#if LANG_CXX11
void image_discovery::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.image_discovery.url)
}
#endif
void image_discovery::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.image_discovery.url)
}
void image_discovery::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.image_discovery.url)
}
::std::string* image_discovery::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.image_discovery.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* image_discovery::release_url() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.image_discovery.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void image_discovery::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.image_discovery.url)
}

// required uint32 http_status = 2;
bool image_discovery::has_http_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void image_discovery::set_has_http_status() {
  _has_bits_[0] |= 0x00000020u;
}
void image_discovery::clear_has_http_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void image_discovery::clear_http_status() {
  http_status_ = 0u;
  clear_has_http_status();
}
::google::protobuf::uint32 image_discovery::http_status() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.http_status)
  return http_status_;
}
void image_discovery::set_http_status(::google::protobuf::uint32 value) {
  set_has_http_status();
  http_status_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.http_status)
}

// optional string headers = 3;
bool image_discovery::has_headers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void image_discovery::set_has_headers() {
  _has_bits_[0] |= 0x00000002u;
}
void image_discovery::clear_has_headers() {
  _has_bits_[0] &= ~0x00000002u;
}
void image_discovery::clear_headers() {
  headers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headers();
}
const ::std::string& image_discovery::headers() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.headers)
  return headers_.GetNoArena();
}
void image_discovery::set_headers(const ::std::string& value) {
  set_has_headers();
  headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.headers)
}
#if LANG_CXX11
void image_discovery::set_headers(::std::string&& value) {
  set_has_headers();
  headers_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.image_discovery.headers)
}
#endif
void image_discovery::set_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headers();
  headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.image_discovery.headers)
}
void image_discovery::set_headers(const char* value, size_t size) {
  set_has_headers();
  headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.image_discovery.headers)
}
::std::string* image_discovery::mutable_headers() {
  set_has_headers();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.image_discovery.headers)
  return headers_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* image_discovery::release_headers() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.image_discovery.headers)
  clear_has_headers();
  return headers_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void image_discovery::set_allocated_headers(::std::string* headers) {
  if (headers != NULL) {
    set_has_headers();
  } else {
    clear_has_headers();
  }
  headers_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headers);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.image_discovery.headers)
}

// optional bytes content = 4;
bool image_discovery::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void image_discovery::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
void image_discovery::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
void image_discovery::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& image_discovery::content() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.content)
  return content_.GetNoArena();
}
void image_discovery::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.content)
}
#if LANG_CXX11
void image_discovery::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.image_discovery.content)
}
#endif
void image_discovery::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.image_discovery.content)
}
void image_discovery::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.image_discovery.content)
}
::std::string* image_discovery::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.image_discovery.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* image_discovery::release_content() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.image_discovery.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void image_discovery::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.image_discovery.content)
}

// optional uint32 width = 5;
bool image_discovery::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void image_discovery::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
void image_discovery::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
void image_discovery::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 image_discovery::width() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.width)
  return width_;
}
void image_discovery::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.width)
}

// optional uint32 height = 6;
bool image_discovery::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void image_discovery::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
void image_discovery::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
void image_discovery::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 image_discovery::height() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.height)
  return height_;
}
void image_discovery::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.height)
}

// optional int32 left = 7;
bool image_discovery::has_left() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void image_discovery::set_has_left() {
  _has_bits_[0] |= 0x00000100u;
}
void image_discovery::clear_has_left() {
  _has_bits_[0] &= ~0x00000100u;
}
void image_discovery::clear_left() {
  left_ = 0;
  clear_has_left();
}
::google::protobuf::int32 image_discovery::left() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.left)
  return left_;
}
void image_discovery::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.left)
}

// optional int32 top = 8;
bool image_discovery::has_top() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void image_discovery::set_has_top() {
  _has_bits_[0] |= 0x00000200u;
}
void image_discovery::clear_has_top() {
  _has_bits_[0] &= ~0x00000200u;
}
void image_discovery::clear_top() {
  top_ = 0;
  clear_has_top();
}
::google::protobuf::int32 image_discovery::top() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.top)
  return top_;
}
void image_discovery::set_top(::google::protobuf::int32 value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.top)
}

// optional int32 zindex = 9;
bool image_discovery::has_zindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void image_discovery::set_has_zindex() {
  _has_bits_[0] |= 0x00000400u;
}
void image_discovery::clear_has_zindex() {
  _has_bits_[0] &= ~0x00000400u;
}
void image_discovery::clear_zindex() {
  zindex_ = 0;
  clear_has_zindex();
}
::google::protobuf::int32 image_discovery::zindex() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.zindex)
  return zindex_;
}
void image_discovery::set_zindex(::google::protobuf::int32 value) {
  set_has_zindex();
  zindex_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.zindex)
}

// optional string href = 10;
bool image_discovery::has_href() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void image_discovery::set_has_href() {
  _has_bits_[0] |= 0x00000008u;
}
void image_discovery::clear_has_href() {
  _has_bits_[0] &= ~0x00000008u;
}
void image_discovery::clear_href() {
  href_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_href();
}
const ::std::string& image_discovery::href() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.href)
  return href_.GetNoArena();
}
void image_discovery::set_href(const ::std::string& value) {
  set_has_href();
  href_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.href)
}
#if LANG_CXX11
void image_discovery::set_href(::std::string&& value) {
  set_has_href();
  href_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.image_discovery.href)
}
#endif
void image_discovery::set_href(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_href();
  href_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.image_discovery.href)
}
void image_discovery::set_href(const char* value, size_t size) {
  set_has_href();
  href_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.image_discovery.href)
}
::std::string* image_discovery::mutable_href() {
  set_has_href();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.image_discovery.href)
  return href_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* image_discovery::release_href() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.image_discovery.href)
  clear_has_href();
  return href_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void image_discovery::set_allocated_href(::std::string* href) {
  if (href != NULL) {
    set_has_href();
  } else {
    clear_has_href();
  }
  href_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), href);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.image_discovery.href)
}

// optional string meta = 11;
bool image_discovery::has_meta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void image_discovery::set_has_meta() {
  _has_bits_[0] |= 0x00000010u;
}
void image_discovery::clear_has_meta() {
  _has_bits_[0] &= ~0x00000010u;
}
void image_discovery::clear_meta() {
  meta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meta();
}
const ::std::string& image_discovery::meta() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.meta)
  return meta_.GetNoArena();
}
void image_discovery::set_meta(const ::std::string& value) {
  set_has_meta();
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.meta)
}
#if LANG_CXX11
void image_discovery::set_meta(::std::string&& value) {
  set_has_meta();
  meta_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.image_discovery.meta)
}
#endif
void image_discovery::set_meta(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_meta();
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.image_discovery.meta)
}
void image_discovery::set_meta(const char* value, size_t size) {
  set_has_meta();
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.image_discovery.meta)
}
::std::string* image_discovery::mutable_meta() {
  set_has_meta();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.image_discovery.meta)
  return meta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* image_discovery::release_meta() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.image_discovery.meta)
  clear_has_meta();
  return meta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void image_discovery::set_allocated_meta(::std::string* meta) {
  if (meta != NULL) {
    set_has_meta();
  } else {
    clear_has_meta();
  }
  meta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meta);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.image_discovery.meta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int images_discovery::kUrlFieldNumber;
const int images_discovery::kDownloadTimeFieldNumber;
const int images_discovery::kImagesFieldNumber;
const int images_discovery::kHtmlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

images_discovery::images_discovery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.fetcher.images_discovery)
}
images_discovery::images_discovery(const images_discovery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      images_(from.images_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  html_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_html()) {
    html_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.html_);
  }
  download_time_ = from.download_time_;
  // @@protoc_insertion_point(copy_constructor:gogo.fetcher.images_discovery)
}

void images_discovery::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  download_time_ = GOOGLE_ULONGLONG(0);
}

images_discovery::~images_discovery() {
  // @@protoc_insertion_point(destructor:gogo.fetcher.images_discovery)
  SharedDtor();
}

void images_discovery::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void images_discovery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* images_discovery::descriptor() {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const images_discovery& images_discovery::default_instance() {
  protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

images_discovery* images_discovery::New(::google::protobuf::Arena* arena) const {
  images_discovery* n = new images_discovery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void images_discovery::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.fetcher.images_discovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!html_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*html_.UnsafeRawStringPointer())->clear();
    }
  }
  download_time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool images_discovery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.fetcher.images_discovery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.images_discovery.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 download_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_download_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &download_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.fetcher.image_discovery images = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string html = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_html()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->html().data(), static_cast<int>(this->html().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.fetcher.images_discovery.html");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.fetcher.images_discovery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.fetcher.images_discovery)
  return false;
#undef DO_
}

void images_discovery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.fetcher.images_discovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.images_discovery.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required uint64 download_time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->download_time(), output);
  }

  // repeated .gogo.fetcher.image_discovery images = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->images(static_cast<int>(i)), output);
  }

  // optional string html = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html().data(), static_cast<int>(this->html().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.images_discovery.html");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->html(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.fetcher.images_discovery)
}

::google::protobuf::uint8* images_discovery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.fetcher.images_discovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.images_discovery.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required uint64 download_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->download_time(), target);
  }

  // repeated .gogo.fetcher.image_discovery images = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->images(static_cast<int>(i)), deterministic, target);
  }

  // optional string html = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html().data(), static_cast<int>(this->html().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.fetcher.images_discovery.html");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->html(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.fetcher.images_discovery)
  return target;
}

size_t images_discovery::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.fetcher.images_discovery)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_download_time()) {
    // required uint64 download_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->download_time());
  }

  return total_size;
}
size_t images_discovery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.fetcher.images_discovery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required uint64 download_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->download_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .gogo.fetcher.image_discovery images = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->images_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->images(static_cast<int>(i)));
    }
  }

  // optional string html = 4;
  if (has_html()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->html());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void images_discovery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.fetcher.images_discovery)
  GOOGLE_DCHECK_NE(&from, this);
  const images_discovery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const images_discovery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.fetcher.images_discovery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.fetcher.images_discovery)
    MergeFrom(*source);
  }
}

void images_discovery::MergeFrom(const images_discovery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.fetcher.images_discovery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_html();
      html_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.html_);
    }
    if (cached_has_bits & 0x00000004u) {
      download_time_ = from.download_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void images_discovery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.fetcher.images_discovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void images_discovery::CopyFrom(const images_discovery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.fetcher.images_discovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool images_discovery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->images())) return false;
  return true;
}

void images_discovery::Swap(images_discovery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void images_discovery::InternalSwap(images_discovery* other) {
  using std::swap;
  images_.InternalSwap(&other->images_);
  url_.Swap(&other->url_);
  html_.Swap(&other->html_);
  swap(download_time_, other->download_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata images_discovery::GetMetadata() const {
  protobuf_fetcher_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetcher_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// images_discovery

// required string url = 1;
bool images_discovery::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void images_discovery::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void images_discovery::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void images_discovery::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& images_discovery::url() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.images_discovery.url)
  return url_.GetNoArena();
}
void images_discovery::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.images_discovery.url)
}
#if LANG_CXX11
void images_discovery::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.images_discovery.url)
}
#endif
void images_discovery::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.images_discovery.url)
}
void images_discovery::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.images_discovery.url)
}
::std::string* images_discovery::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.images_discovery.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* images_discovery::release_url() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.images_discovery.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void images_discovery::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.images_discovery.url)
}

// required uint64 download_time = 2;
bool images_discovery::has_download_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void images_discovery::set_has_download_time() {
  _has_bits_[0] |= 0x00000004u;
}
void images_discovery::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void images_discovery::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
::google::protobuf::uint64 images_discovery::download_time() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.images_discovery.download_time)
  return download_time_;
}
void images_discovery::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.images_discovery.download_time)
}

// repeated .gogo.fetcher.image_discovery images = 3;
int images_discovery::images_size() const {
  return images_.size();
}
void images_discovery::clear_images() {
  images_.Clear();
}
const ::gogo::fetcher::image_discovery& images_discovery::images(int index) const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.images_discovery.images)
  return images_.Get(index);
}
::gogo::fetcher::image_discovery* images_discovery::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.images_discovery.images)
  return images_.Mutable(index);
}
::gogo::fetcher::image_discovery* images_discovery::add_images() {
  // @@protoc_insertion_point(field_add:gogo.fetcher.images_discovery.images)
  return images_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::fetcher::image_discovery >*
images_discovery::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:gogo.fetcher.images_discovery.images)
  return &images_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::image_discovery >&
images_discovery::images() const {
  // @@protoc_insertion_point(field_list:gogo.fetcher.images_discovery.images)
  return images_;
}

// optional string html = 4;
bool images_discovery::has_html() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void images_discovery::set_has_html() {
  _has_bits_[0] |= 0x00000002u;
}
void images_discovery::clear_has_html() {
  _has_bits_[0] &= ~0x00000002u;
}
void images_discovery::clear_html() {
  html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_html();
}
const ::std::string& images_discovery::html() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.images_discovery.html)
  return html_.GetNoArena();
}
void images_discovery::set_html(const ::std::string& value) {
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.images_discovery.html)
}
#if LANG_CXX11
void images_discovery::set_html(::std::string&& value) {
  set_has_html();
  html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.images_discovery.html)
}
#endif
void images_discovery::set_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.images_discovery.html)
}
void images_discovery::set_html(const char* value, size_t size) {
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.images_discovery.html)
}
::std::string* images_discovery::mutable_html() {
  set_has_html();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.images_discovery.html)
  return html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* images_discovery::release_html() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.images_discovery.html)
  clear_has_html();
  return html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void images_discovery::set_allocated_html(::std::string* html) {
  if (html != NULL) {
    set_has_html();
  } else {
    clear_has_html();
  }
  html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.images_discovery.html)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fetcher
}  // namespace gogo

// @@protoc_insertion_point(global_scope)
