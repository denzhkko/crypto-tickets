// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fetcher_storage.proto

#ifndef PROTOBUF_fetcher_5fstorage_2eproto__INCLUDED
#define PROTOBUF_fetcher_5fstorage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "fetch_list.pb.h"
#include "document_enums.pb.h"
// @@protoc_insertion_point(includes)
namespace gogo {
namespace fetcher {
class SerializedBlock;
class SerializedBlockDefaultTypeInternal;
extern SerializedBlockDefaultTypeInternal _SerializedBlock_default_instance_;
class fetcher_document_detail;
class fetcher_document_detailDefaultTypeInternal;
extern fetcher_document_detailDefaultTypeInternal _fetcher_document_detail_default_instance_;
class fetcher_host_details;
class fetcher_host_detailsDefaultTypeInternal;
extern fetcher_host_detailsDefaultTypeInternal _fetcher_host_details_default_instance_;
class fetcher_image;
class fetcher_imageDefaultTypeInternal;
extern fetcher_imageDefaultTypeInternal _fetcher_image_default_instance_;
class image_discovery;
class image_discoveryDefaultTypeInternal;
extern image_discoveryDefaultTypeInternal _image_discovery_default_instance_;
class images_discovery;
class images_discoveryDefaultTypeInternal;
extern images_discoveryDefaultTypeInternal _images_discovery_default_instance_;
class insta_profile_extra;
class insta_profile_extraDefaultTypeInternal;
extern insta_profile_extraDefaultTypeInternal _insta_profile_extra_default_instance_;
class post_document_detail;
class post_document_detailDefaultTypeInternal;
extern post_document_detailDefaultTypeInternal _post_document_detail_default_instance_;
class url_upload_detail;
class url_upload_detailDefaultTypeInternal;
extern url_upload_detailDefaultTypeInternal _url_upload_detail_default_instance_;
class vk_snippet_data;
class vk_snippet_dataDefaultTypeInternal;
extern vk_snippet_dataDefaultTypeInternal _vk_snippet_data_default_instance_;
}  // namespace fetcher
}  // namespace gogo

namespace gogo {
namespace fetcher {

namespace protobuf_fetcher_5fstorage_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_fetcher_5fstorage_2eproto

enum fetcher_image_type_t {
  fetcher_image_type_t_picture = 1,
  fetcher_image_type_t_video = 2
};
bool fetcher_image_type_t_IsValid(int value);
const fetcher_image_type_t fetcher_image_type_t_type_t_MIN = fetcher_image_type_t_picture;
const fetcher_image_type_t fetcher_image_type_t_type_t_MAX = fetcher_image_type_t_video;
const int fetcher_image_type_t_type_t_ARRAYSIZE = fetcher_image_type_t_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* fetcher_image_type_t_descriptor();
inline const ::std::string& fetcher_image_type_t_Name(fetcher_image_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    fetcher_image_type_t_descriptor(), value);
}
inline bool fetcher_image_type_t_Parse(
    const ::std::string& name, fetcher_image_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<fetcher_image_type_t>(
    fetcher_image_type_t_descriptor(), name, value);
}
enum fetcher_document_detail_flag_t {
  fetcher_document_detail_flag_t_empty = 0,
  fetcher_document_detail_flag_t_fetched = 1,
  fetcher_document_detail_flag_t_conn_failure = 2,
  fetcher_document_detail_flag_t_fetch_err = 3,
  fetcher_document_detail_flag_t_skipped = 4,
  fetcher_document_detail_flag_t_robots_filtered = 5,
  fetcher_document_detail_flag_t_blacklisted = 6,
  fetcher_document_detail_flag_t_rkn_ban = 7
};
bool fetcher_document_detail_flag_t_IsValid(int value);
const fetcher_document_detail_flag_t fetcher_document_detail_flag_t_flag_t_MIN = fetcher_document_detail_flag_t_empty;
const fetcher_document_detail_flag_t fetcher_document_detail_flag_t_flag_t_MAX = fetcher_document_detail_flag_t_rkn_ban;
const int fetcher_document_detail_flag_t_flag_t_ARRAYSIZE = fetcher_document_detail_flag_t_flag_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* fetcher_document_detail_flag_t_descriptor();
inline const ::std::string& fetcher_document_detail_flag_t_Name(fetcher_document_detail_flag_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    fetcher_document_detail_flag_t_descriptor(), value);
}
inline bool fetcher_document_detail_flag_t_Parse(
    const ::std::string& name, fetcher_document_detail_flag_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<fetcher_document_detail_flag_t>(
    fetcher_document_detail_flag_t_descriptor(), name, value);
}
enum fetcher_document_detail_error_t {
  fetcher_document_detail_error_t_none = 0,
  fetcher_document_detail_error_t_resolve = 1,
  fetcher_document_detail_error_t_connection = 2,
  fetcher_document_detail_error_t_empty_head = 3,
  fetcher_document_detail_error_t_invalid_protocol = 4,
  fetcher_document_detail_error_t_socket_buf_size = 5,
  fetcher_document_detail_error_t_head_size = 6,
  fetcher_document_detail_error_t_body_size = 7,
  fetcher_document_detail_error_t_error_in_parsing = 8,
  fetcher_document_detail_error_t_filtered_by_robots = 9,
  fetcher_document_detail_error_t_skipped_by_blacklist = 10,
  fetcher_document_detail_error_t_connection_lost = 11
};
bool fetcher_document_detail_error_t_IsValid(int value);
const fetcher_document_detail_error_t fetcher_document_detail_error_t_error_t_MIN = fetcher_document_detail_error_t_none;
const fetcher_document_detail_error_t fetcher_document_detail_error_t_error_t_MAX = fetcher_document_detail_error_t_connection_lost;
const int fetcher_document_detail_error_t_error_t_ARRAYSIZE = fetcher_document_detail_error_t_error_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* fetcher_document_detail_error_t_descriptor();
inline const ::std::string& fetcher_document_detail_error_t_Name(fetcher_document_detail_error_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    fetcher_document_detail_error_t_descriptor(), value);
}
inline bool fetcher_document_detail_error_t_Parse(
    const ::std::string& name, fetcher_document_detail_error_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<fetcher_document_detail_error_t>(
    fetcher_document_detail_error_t_descriptor(), name, value);
}
enum fetcher_document_detail_redirect_t {
  fetcher_document_detail_redirect_t_redirect_none = 0,
  fetcher_document_detail_redirect_t_redirect_normal = 1,
  fetcher_document_detail_redirect_t_redirect_outer = 2,
  fetcher_document_detail_redirect_t_redirect_overflow = 3,
  fetcher_document_detail_redirect_t_redirect_infinite = 4,
  fetcher_document_detail_redirect_t_redirect_failure = 5,
  fetcher_document_detail_redirect_t_redirect_other = 6
};
bool fetcher_document_detail_redirect_t_IsValid(int value);
const fetcher_document_detail_redirect_t fetcher_document_detail_redirect_t_redirect_t_MIN = fetcher_document_detail_redirect_t_redirect_none;
const fetcher_document_detail_redirect_t fetcher_document_detail_redirect_t_redirect_t_MAX = fetcher_document_detail_redirect_t_redirect_other;
const int fetcher_document_detail_redirect_t_redirect_t_ARRAYSIZE = fetcher_document_detail_redirect_t_redirect_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* fetcher_document_detail_redirect_t_descriptor();
inline const ::std::string& fetcher_document_detail_redirect_t_Name(fetcher_document_detail_redirect_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    fetcher_document_detail_redirect_t_descriptor(), value);
}
inline bool fetcher_document_detail_redirect_t_Parse(
    const ::std::string& name, fetcher_document_detail_redirect_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<fetcher_document_detail_redirect_t>(
    fetcher_document_detail_redirect_t_descriptor(), name, value);
}
enum post_document_detail_type_t {
  post_document_detail_type_t_post = 1,
  post_document_detail_type_t_longread = 2,
  post_document_detail_type_t_video = 3,
  post_document_detail_type_t_topic = 4,
  post_document_detail_type_t_profile = 5,
  post_document_detail_type_t_group = 6,
  post_document_detail_type_t_organic = 7
};
bool post_document_detail_type_t_IsValid(int value);
const post_document_detail_type_t post_document_detail_type_t_type_t_MIN = post_document_detail_type_t_post;
const post_document_detail_type_t post_document_detail_type_t_type_t_MAX = post_document_detail_type_t_organic;
const int post_document_detail_type_t_type_t_ARRAYSIZE = post_document_detail_type_t_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* post_document_detail_type_t_descriptor();
inline const ::std::string& post_document_detail_type_t_Name(post_document_detail_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    post_document_detail_type_t_descriptor(), value);
}
inline bool post_document_detail_type_t_Parse(
    const ::std::string& name, post_document_detail_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<post_document_detail_type_t>(
    post_document_detail_type_t_descriptor(), name, value);
}
enum post_document_detail_source_t {
  post_document_detail_source_t_vk = 1
};
bool post_document_detail_source_t_IsValid(int value);
const post_document_detail_source_t post_document_detail_source_t_source_t_MIN = post_document_detail_source_t_vk;
const post_document_detail_source_t post_document_detail_source_t_source_t_MAX = post_document_detail_source_t_vk;
const int post_document_detail_source_t_source_t_ARRAYSIZE = post_document_detail_source_t_source_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* post_document_detail_source_t_descriptor();
inline const ::std::string& post_document_detail_source_t_Name(post_document_detail_source_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    post_document_detail_source_t_descriptor(), value);
}
inline bool post_document_detail_source_t_Parse(
    const ::std::string& name, post_document_detail_source_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<post_document_detail_source_t>(
    post_document_detail_source_t_descriptor(), name, value);
}
// ===================================================================

class SerializedBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.fetcher.SerializedBlock) */ {
 public:
  SerializedBlock();
  virtual ~SerializedBlock();

  SerializedBlock(const SerializedBlock& from);

  inline SerializedBlock& operator=(const SerializedBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SerializedBlock(SerializedBlock&& from) noexcept
    : SerializedBlock() {
    *this = ::std::move(from);
  }

  inline SerializedBlock& operator=(SerializedBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SerializedBlock& default_instance();

  static inline const SerializedBlock* internal_default_instance() {
    return reinterpret_cast<const SerializedBlock*>(
               &_SerializedBlock_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SerializedBlock* other);
  friend void swap(SerializedBlock& a, SerializedBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SerializedBlock* New() const PROTOBUF_FINAL { return New(NULL); }

  SerializedBlock* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SerializedBlock& from);
  void MergeFrom(const SerializedBlock& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SerializedBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes proto_blobs = 3;
  int proto_blobs_size() const;
  void clear_proto_blobs();
  static const int kProtoBlobsFieldNumber = 3;
  const ::std::string& proto_blobs(int index) const;
  ::std::string* mutable_proto_blobs(int index);
  void set_proto_blobs(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_proto_blobs(int index, ::std::string&& value);
  #endif
  void set_proto_blobs(int index, const char* value);
  void set_proto_blobs(int index, const void* value, size_t size);
  ::std::string* add_proto_blobs();
  void add_proto_blobs(const ::std::string& value);
  #if LANG_CXX11
  void add_proto_blobs(::std::string&& value);
  #endif
  void add_proto_blobs(const char* value);
  void add_proto_blobs(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& proto_blobs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_proto_blobs();

  // optional string proto_class_name = 2;
  bool has_proto_class_name() const;
  void clear_proto_class_name();
  static const int kProtoClassNameFieldNumber = 2;
  const ::std::string& proto_class_name() const;
  void set_proto_class_name(const ::std::string& value);
  #if LANG_CXX11
  void set_proto_class_name(::std::string&& value);
  #endif
  void set_proto_class_name(const char* value);
  void set_proto_class_name(const char* value, size_t size);
  ::std::string* mutable_proto_class_name();
  ::std::string* release_proto_class_name();
  void set_allocated_proto_class_name(::std::string* proto_class_name);

  // optional int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gogo.fetcher.SerializedBlock)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_proto_class_name();
  void clear_has_proto_class_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> proto_blobs_;
  ::google::protobuf::internal::ArenaStringPtr proto_class_name_;
  ::google::protobuf::int32 version_;
  friend struct protobuf_fetcher_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class fetcher_image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.fetcher.fetcher_image) */ {
 public:
  fetcher_image();
  virtual ~fetcher_image();

  fetcher_image(const fetcher_image& from);

  inline fetcher_image& operator=(const fetcher_image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  fetcher_image(fetcher_image&& from) noexcept
    : fetcher_image() {
    *this = ::std::move(from);
  }

  inline fetcher_image& operator=(fetcher_image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fetcher_image& default_instance();

  static inline const fetcher_image* internal_default_instance() {
    return reinterpret_cast<const fetcher_image*>(
               &_fetcher_image_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(fetcher_image* other);
  friend void swap(fetcher_image& a, fetcher_image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline fetcher_image* New() const PROTOBUF_FINAL { return New(NULL); }

  fetcher_image* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const fetcher_image& from);
  void MergeFrom(const fetcher_image& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(fetcher_image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef fetcher_image_type_t type_t;
  static const type_t picture =
    fetcher_image_type_t_picture;
  static const type_t video =
    fetcher_image_type_t_video;
  static inline bool type_t_IsValid(int value) {
    return fetcher_image_type_t_IsValid(value);
  }
  static const type_t type_t_MIN =
    fetcher_image_type_t_type_t_MIN;
  static const type_t type_t_MAX =
    fetcher_image_type_t_type_t_MAX;
  static const int type_t_ARRAYSIZE =
    fetcher_image_type_t_type_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  type_t_descriptor() {
    return fetcher_image_type_t_descriptor();
  }
  static inline const ::std::string& type_t_Name(type_t value) {
    return fetcher_image_type_t_Name(value);
  }
  static inline bool type_t_Parse(const ::std::string& name,
      type_t* value) {
    return fetcher_image_type_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required bytes content = 2;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional uint64 download_time = 3;
  bool has_download_time() const;
  void clear_download_time();
  static const int kDownloadTimeFieldNumber = 3;
  ::google::protobuf::uint64 download_time() const;
  void set_download_time(::google::protobuf::uint64 value);

  // optional uint32 width = 4;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 5;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional .ru.mail.go.webbase.blobs.ContentType format = 6;
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 6;
  ::ru::mail::go::webbase::blobs::ContentType format() const;
  void set_format(::ru::mail::go::webbase::blobs::ContentType value);

  // optional .gogo.fetcher.fetcher_image.type_t type = 7;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::gogo::fetcher::fetcher_image_type_t type() const;
  void set_type(::gogo::fetcher::fetcher_image_type_t value);

  // @@protoc_insertion_point(class_scope:gogo.fetcher.fetcher_image)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_content();
  void clear_has_content();
  void set_has_download_time();
  void clear_has_download_time();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_format();
  void clear_has_format();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 download_time_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  int format_;
  int type_;
  friend struct protobuf_fetcher_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class fetcher_document_detail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.fetcher.fetcher_document_detail) */ {
 public:
  fetcher_document_detail();
  virtual ~fetcher_document_detail();

  fetcher_document_detail(const fetcher_document_detail& from);

  inline fetcher_document_detail& operator=(const fetcher_document_detail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  fetcher_document_detail(fetcher_document_detail&& from) noexcept
    : fetcher_document_detail() {
    *this = ::std::move(from);
  }

  inline fetcher_document_detail& operator=(fetcher_document_detail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fetcher_document_detail& default_instance();

  static inline const fetcher_document_detail* internal_default_instance() {
    return reinterpret_cast<const fetcher_document_detail*>(
               &_fetcher_document_detail_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(fetcher_document_detail* other);
  friend void swap(fetcher_document_detail& a, fetcher_document_detail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline fetcher_document_detail* New() const PROTOBUF_FINAL { return New(NULL); }

  fetcher_document_detail* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const fetcher_document_detail& from);
  void MergeFrom(const fetcher_document_detail& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(fetcher_document_detail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef fetcher_document_detail_flag_t flag_t;
  static const flag_t empty =
    fetcher_document_detail_flag_t_empty;
  static const flag_t fetched =
    fetcher_document_detail_flag_t_fetched;
  static const flag_t conn_failure =
    fetcher_document_detail_flag_t_conn_failure;
  static const flag_t fetch_err =
    fetcher_document_detail_flag_t_fetch_err;
  static const flag_t skipped =
    fetcher_document_detail_flag_t_skipped;
  static const flag_t robots_filtered =
    fetcher_document_detail_flag_t_robots_filtered;
  static const flag_t blacklisted =
    fetcher_document_detail_flag_t_blacklisted;
  static const flag_t rkn_ban =
    fetcher_document_detail_flag_t_rkn_ban;
  static inline bool flag_t_IsValid(int value) {
    return fetcher_document_detail_flag_t_IsValid(value);
  }
  static const flag_t flag_t_MIN =
    fetcher_document_detail_flag_t_flag_t_MIN;
  static const flag_t flag_t_MAX =
    fetcher_document_detail_flag_t_flag_t_MAX;
  static const int flag_t_ARRAYSIZE =
    fetcher_document_detail_flag_t_flag_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  flag_t_descriptor() {
    return fetcher_document_detail_flag_t_descriptor();
  }
  static inline const ::std::string& flag_t_Name(flag_t value) {
    return fetcher_document_detail_flag_t_Name(value);
  }
  static inline bool flag_t_Parse(const ::std::string& name,
      flag_t* value) {
    return fetcher_document_detail_flag_t_Parse(name, value);
  }

  typedef fetcher_document_detail_error_t error_t;
  static const error_t none =
    fetcher_document_detail_error_t_none;
  static const error_t resolve =
    fetcher_document_detail_error_t_resolve;
  static const error_t connection =
    fetcher_document_detail_error_t_connection;
  static const error_t empty_head =
    fetcher_document_detail_error_t_empty_head;
  static const error_t invalid_protocol =
    fetcher_document_detail_error_t_invalid_protocol;
  static const error_t socket_buf_size =
    fetcher_document_detail_error_t_socket_buf_size;
  static const error_t head_size =
    fetcher_document_detail_error_t_head_size;
  static const error_t body_size =
    fetcher_document_detail_error_t_body_size;
  static const error_t error_in_parsing =
    fetcher_document_detail_error_t_error_in_parsing;
  static const error_t filtered_by_robots =
    fetcher_document_detail_error_t_filtered_by_robots;
  static const error_t skipped_by_blacklist =
    fetcher_document_detail_error_t_skipped_by_blacklist;
  static const error_t connection_lost =
    fetcher_document_detail_error_t_connection_lost;
  static inline bool error_t_IsValid(int value) {
    return fetcher_document_detail_error_t_IsValid(value);
  }
  static const error_t error_t_MIN =
    fetcher_document_detail_error_t_error_t_MIN;
  static const error_t error_t_MAX =
    fetcher_document_detail_error_t_error_t_MAX;
  static const int error_t_ARRAYSIZE =
    fetcher_document_detail_error_t_error_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  error_t_descriptor() {
    return fetcher_document_detail_error_t_descriptor();
  }
  static inline const ::std::string& error_t_Name(error_t value) {
    return fetcher_document_detail_error_t_Name(value);
  }
  static inline bool error_t_Parse(const ::std::string& name,
      error_t* value) {
    return fetcher_document_detail_error_t_Parse(name, value);
  }

  typedef fetcher_document_detail_redirect_t redirect_t;
  static const redirect_t redirect_none =
    fetcher_document_detail_redirect_t_redirect_none;
  static const redirect_t redirect_normal =
    fetcher_document_detail_redirect_t_redirect_normal;
  static const redirect_t redirect_outer =
    fetcher_document_detail_redirect_t_redirect_outer;
  static const redirect_t redirect_overflow =
    fetcher_document_detail_redirect_t_redirect_overflow;
  static const redirect_t redirect_infinite =
    fetcher_document_detail_redirect_t_redirect_infinite;
  static const redirect_t redirect_failure =
    fetcher_document_detail_redirect_t_redirect_failure;
  static const redirect_t redirect_other =
    fetcher_document_detail_redirect_t_redirect_other;
  static inline bool redirect_t_IsValid(int value) {
    return fetcher_document_detail_redirect_t_IsValid(value);
  }
  static const redirect_t redirect_t_MIN =
    fetcher_document_detail_redirect_t_redirect_t_MIN;
  static const redirect_t redirect_t_MAX =
    fetcher_document_detail_redirect_t_redirect_t_MAX;
  static const int redirect_t_ARRAYSIZE =
    fetcher_document_detail_redirect_t_redirect_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  redirect_t_descriptor() {
    return fetcher_document_detail_redirect_t_descriptor();
  }
  static inline const ::std::string& redirect_t_Name(redirect_t value) {
    return fetcher_document_detail_redirect_t_Name(value);
  }
  static inline bool redirect_t_Parse(const ::std::string& name,
      redirect_t* value) {
    return fetcher_document_detail_redirect_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string redirects = 9;
  int redirects_size() const;
  void clear_redirects();
  static const int kRedirectsFieldNumber = 9;
  const ::std::string& redirects(int index) const;
  ::std::string* mutable_redirects(int index);
  void set_redirects(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_redirects(int index, ::std::string&& value);
  #endif
  void set_redirects(int index, const char* value);
  void set_redirects(int index, const char* value, size_t size);
  ::std::string* add_redirects();
  void add_redirects(const ::std::string& value);
  #if LANG_CXX11
  void add_redirects(::std::string&& value);
  #endif
  void add_redirects(const char* value);
  void add_redirects(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& redirects() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_redirects();

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional bytes content = 3;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional bytes http_head = 5;
  bool has_http_head() const;
  void clear_http_head();
  static const int kHttpHeadFieldNumber = 5;
  const ::std::string& http_head() const;
  void set_http_head(const ::std::string& value);
  #if LANG_CXX11
  void set_http_head(::std::string&& value);
  #endif
  void set_http_head(const char* value);
  void set_http_head(const void* value, size_t size);
  ::std::string* mutable_http_head();
  ::std::string* release_http_head();
  void set_allocated_http_head(::std::string* http_head);

  // optional string ip = 7;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 7;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional .ru.mail.go.webbase.blobs.FetchUrl fetch_url_proto = 10;
  bool has_fetch_url_proto() const;
  void clear_fetch_url_proto();
  static const int kFetchUrlProtoFieldNumber = 10;
  const ::ru::mail::go::webbase::blobs::FetchUrl& fetch_url_proto() const;
  ::ru::mail::go::webbase::blobs::FetchUrl* mutable_fetch_url_proto();
  ::ru::mail::go::webbase::blobs::FetchUrl* release_fetch_url_proto();
  void set_allocated_fetch_url_proto(::ru::mail::go::webbase::blobs::FetchUrl* fetch_url_proto);

  // optional .gogo.fetcher.fetcher_image profileImage = 24;
  bool has_profileimage() const;
  void clear_profileimage();
  static const int kProfileImageFieldNumber = 24;
  const ::gogo::fetcher::fetcher_image& profileimage() const;
  ::gogo::fetcher::fetcher_image* mutable_profileimage();
  ::gogo::fetcher::fetcher_image* release_profileimage();
  void set_allocated_profileimage(::gogo::fetcher::fetcher_image* profileimage);

  // optional .gogo.fetcher.fetcher_image coverImage = 25;
  bool has_coverimage() const;
  void clear_coverimage();
  static const int kCoverImageFieldNumber = 25;
  const ::gogo::fetcher::fetcher_image& coverimage() const;
  ::gogo::fetcher::fetcher_image* mutable_coverimage();
  ::gogo::fetcher::fetcher_image* release_coverimage();
  void set_allocated_coverimage(::gogo::fetcher::fetcher_image* coverimage);

  // optional .ru.mail.go.webbase.blobs.PublicationMarkup microdata_markup = 26;
  bool has_microdata_markup() const;
  void clear_microdata_markup();
  static const int kMicrodataMarkupFieldNumber = 26;
  const ::ru::mail::go::webbase::blobs::PublicationMarkup& microdata_markup() const;
  ::ru::mail::go::webbase::blobs::PublicationMarkup* mutable_microdata_markup();
  ::ru::mail::go::webbase::blobs::PublicationMarkup* release_microdata_markup();
  void set_allocated_microdata_markup(::ru::mail::go::webbase::blobs::PublicationMarkup* microdata_markup);

  // optional .gogo.fetcher.images_discovery imagesOnPage = 27;
  bool has_imagesonpage() const;
  void clear_imagesonpage();
  static const int kImagesOnPageFieldNumber = 27;
  const ::gogo::fetcher::images_discovery& imagesonpage() const;
  ::gogo::fetcher::images_discovery* mutable_imagesonpage();
  ::gogo::fetcher::images_discovery* release_imagesonpage();
  void set_allocated_imagesonpage(::gogo::fetcher::images_discovery* imagesonpage);

  // required uint64 download_time = 2;
  bool has_download_time() const;
  void clear_download_time();
  static const int kDownloadTimeFieldNumber = 2;
  ::google::protobuf::uint64 download_time() const;
  void set_download_time(::google::protobuf::uint64 value);

  // required .gogo.fetcher.fetcher_document_detail.flag_t flag = 4;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 4;
  ::gogo::fetcher::fetcher_document_detail_flag_t flag() const;
  void set_flag(::gogo::fetcher::fetcher_document_detail_flag_t value);

  // optional .gogo.fetcher.fetcher_document_detail.error_t error = 6;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 6;
  ::gogo::fetcher::fetcher_document_detail_error_t error() const;
  void set_error(::gogo::fetcher::fetcher_document_detail_error_t value);

  // optional uint32 flags = 8;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 8;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional .ru.mail.go.webbase.blobs.ForumType forumType = 11;
  bool has_forumtype() const;
  void clear_forumtype();
  static const int kForumTypeFieldNumber = 11;
  ::ru::mail::go::webbase::blobs::ForumType forumtype() const;
  void set_forumtype(::ru::mail::go::webbase::blobs::ForumType value);

  // optional .ru.mail.go.webbase.blobs.RobotsState robotsState = 12;
  bool has_robotsstate() const;
  void clear_robotsstate();
  static const int kRobotsStateFieldNumber = 12;
  ::ru::mail::go::webbase::blobs::RobotsState robotsstate() const;
  void set_robotsstate(::ru::mail::go::webbase::blobs::RobotsState value);

  // optional .ru.mail.go.webbase.blobs.RenderType renderType = 13;
  bool has_rendertype() const;
  void clear_rendertype();
  static const int kRenderTypeFieldNumber = 13;
  ::ru::mail::go::webbase::blobs::RenderType rendertype() const;
  void set_rendertype(::ru::mail::go::webbase::blobs::RenderType value);

  // optional .ru.mail.go.webbase.blobs.Encoding forcedEncoding = 14;
  bool has_forcedencoding() const;
  void clear_forcedencoding();
  static const int kForcedEncodingFieldNumber = 14;
  ::ru::mail::go::webbase::blobs::Encoding forcedencoding() const;
  void set_forcedencoding(::ru::mail::go::webbase::blobs::Encoding value);

  // optional .ru.mail.go.webbase.blobs.SourceMark sourceMark = 20;
  bool has_sourcemark() const;
  void clear_sourcemark();
  static const int kSourceMarkFieldNumber = 20;
  ::ru::mail::go::webbase::blobs::SourceMark sourcemark() const;
  void set_sourcemark(::ru::mail::go::webbase::blobs::SourceMark value);

  // optional bool leadToProviderBlock = 18 [default = false];
  bool has_leadtoproviderblock() const;
  void clear_leadtoproviderblock();
  static const int kLeadToProviderBlockFieldNumber = 18;
  bool leadtoproviderblock() const;
  void set_leadtoproviderblock(bool value);

  // optional bool isFromRedirectChain = 19 [default = false];
  bool has_isfromredirectchain() const;
  void clear_isfromredirectchain();
  static const int kIsFromRedirectChainFieldNumber = 19;
  bool isfromredirectchain() const;
  void set_isfromredirectchain(bool value);

  // optional bool scriptRemoved = 23;
  bool has_scriptremoved() const;
  void clear_scriptremoved();
  static const int kScriptRemovedFieldNumber = 23;
  bool scriptremoved() const;
  void set_scriptremoved(bool value);

  // optional .gogo.fetcher.fetcher_document_detail.redirect_t redirect_type = 21;
  bool has_redirect_type() const;
  void clear_redirect_type();
  static const int kRedirectTypeFieldNumber = 21;
  ::gogo::fetcher::fetcher_document_detail_redirect_t redirect_type() const;
  void set_redirect_type(::gogo::fetcher::fetcher_document_detail_redirect_t value);

  // @@protoc_insertion_point(class_scope:gogo.fetcher.fetcher_document_detail)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_download_time();
  void clear_has_download_time();
  void set_has_content();
  void clear_has_content();
  void set_has_flag();
  void clear_has_flag();
  void set_has_http_head();
  void clear_has_http_head();
  void set_has_error();
  void clear_has_error();
  void set_has_ip();
  void clear_has_ip();
  void set_has_flags();
  void clear_has_flags();
  void set_has_fetch_url_proto();
  void clear_has_fetch_url_proto();
  void set_has_forumtype();
  void clear_has_forumtype();
  void set_has_robotsstate();
  void clear_has_robotsstate();
  void set_has_rendertype();
  void clear_has_rendertype();
  void set_has_forcedencoding();
  void clear_has_forcedencoding();
  void set_has_leadtoproviderblock();
  void clear_has_leadtoproviderblock();
  void set_has_isfromredirectchain();
  void clear_has_isfromredirectchain();
  void set_has_sourcemark();
  void clear_has_sourcemark();
  void set_has_redirect_type();
  void clear_has_redirect_type();
  void set_has_scriptremoved();
  void clear_has_scriptremoved();
  void set_has_profileimage();
  void clear_has_profileimage();
  void set_has_coverimage();
  void clear_has_coverimage();
  void set_has_microdata_markup();
  void clear_has_microdata_markup();
  void set_has_imagesonpage();
  void clear_has_imagesonpage();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> redirects_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr http_head_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::ru::mail::go::webbase::blobs::FetchUrl* fetch_url_proto_;
  ::gogo::fetcher::fetcher_image* profileimage_;
  ::gogo::fetcher::fetcher_image* coverimage_;
  ::ru::mail::go::webbase::blobs::PublicationMarkup* microdata_markup_;
  ::gogo::fetcher::images_discovery* imagesonpage_;
  ::google::protobuf::uint64 download_time_;
  int flag_;
  int error_;
  ::google::protobuf::uint32 flags_;
  int forumtype_;
  int robotsstate_;
  int rendertype_;
  int forcedencoding_;
  int sourcemark_;
  bool leadtoproviderblock_;
  bool isfromredirectchain_;
  bool scriptremoved_;
  int redirect_type_;
  friend struct protobuf_fetcher_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class fetcher_host_details : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.fetcher.fetcher_host_details) */ {
 public:
  fetcher_host_details();
  virtual ~fetcher_host_details();

  fetcher_host_details(const fetcher_host_details& from);

  inline fetcher_host_details& operator=(const fetcher_host_details& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  fetcher_host_details(fetcher_host_details&& from) noexcept
    : fetcher_host_details() {
    *this = ::std::move(from);
  }

  inline fetcher_host_details& operator=(fetcher_host_details&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fetcher_host_details& default_instance();

  static inline const fetcher_host_details* internal_default_instance() {
    return reinterpret_cast<const fetcher_host_details*>(
               &_fetcher_host_details_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(fetcher_host_details* other);
  friend void swap(fetcher_host_details& a, fetcher_host_details& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline fetcher_host_details* New() const PROTOBUF_FINAL { return New(NULL); }

  fetcher_host_details* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const fetcher_host_details& from);
  void MergeFrom(const fetcher_host_details& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(fetcher_host_details* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string hostname = 1;
  bool has_hostname() const;
  void clear_hostname();
  static const int kHostnameFieldNumber = 1;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // optional uint32 thread_limit = 2;
  bool has_thread_limit() const;
  void clear_thread_limit();
  static const int kThreadLimitFieldNumber = 2;
  ::google::protobuf::uint32 thread_limit() const;
  void set_thread_limit(::google::protobuf::uint32 value);

  // optional uint32 crawl_delay = 3;
  bool has_crawl_delay() const;
  void clear_crawl_delay();
  static const int kCrawlDelayFieldNumber = 3;
  ::google::protobuf::uint32 crawl_delay() const;
  void set_crawl_delay(::google::protobuf::uint32 value);

  // optional double avg_response_time = 4;
  bool has_avg_response_time() const;
  void clear_avg_response_time();
  static const int kAvgResponseTimeFieldNumber = 4;
  double avg_response_time() const;
  void set_avg_response_time(double value);

  // @@protoc_insertion_point(class_scope:gogo.fetcher.fetcher_host_details)
 private:
  void set_has_hostname();
  void clear_has_hostname();
  void set_has_thread_limit();
  void clear_has_thread_limit();
  void set_has_crawl_delay();
  void clear_has_crawl_delay();
  void set_has_avg_response_time();
  void clear_has_avg_response_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::uint32 thread_limit_;
  ::google::protobuf::uint32 crawl_delay_;
  double avg_response_time_;
  friend struct protobuf_fetcher_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class url_upload_detail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.fetcher.url_upload_detail) */ {
 public:
  url_upload_detail();
  virtual ~url_upload_detail();

  url_upload_detail(const url_upload_detail& from);

  inline url_upload_detail& operator=(const url_upload_detail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  url_upload_detail(url_upload_detail&& from) noexcept
    : url_upload_detail() {
    *this = ::std::move(from);
  }

  inline url_upload_detail& operator=(url_upload_detail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const url_upload_detail& default_instance();

  static inline const url_upload_detail* internal_default_instance() {
    return reinterpret_cast<const url_upload_detail*>(
               &_url_upload_detail_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(url_upload_detail* other);
  friend void swap(url_upload_detail& a, url_upload_detail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline url_upload_detail* New() const PROTOBUF_FINAL { return New(NULL); }

  url_upload_detail* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const url_upload_detail& from);
  void MergeFrom(const url_upload_detail& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(url_upload_detail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional bool flag_disabled = 2;
  bool has_flag_disabled() const;
  void clear_flag_disabled();
  static const int kFlagDisabledFieldNumber = 2;
  bool flag_disabled() const;
  void set_flag_disabled(bool value);

  // @@protoc_insertion_point(class_scope:gogo.fetcher.url_upload_detail)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_flag_disabled();
  void clear_has_flag_disabled();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  bool flag_disabled_;
  friend struct protobuf_fetcher_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class post_document_detail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.fetcher.post_document_detail) */ {
 public:
  post_document_detail();
  virtual ~post_document_detail();

  post_document_detail(const post_document_detail& from);

  inline post_document_detail& operator=(const post_document_detail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  post_document_detail(post_document_detail&& from) noexcept
    : post_document_detail() {
    *this = ::std::move(from);
  }

  inline post_document_detail& operator=(post_document_detail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const post_document_detail& default_instance();

  static inline const post_document_detail* internal_default_instance() {
    return reinterpret_cast<const post_document_detail*>(
               &_post_document_detail_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(post_document_detail* other);
  friend void swap(post_document_detail& a, post_document_detail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline post_document_detail* New() const PROTOBUF_FINAL { return New(NULL); }

  post_document_detail* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const post_document_detail& from);
  void MergeFrom(const post_document_detail& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(post_document_detail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef post_document_detail_type_t type_t;
  static const type_t post =
    post_document_detail_type_t_post;
  static const type_t longread =
    post_document_detail_type_t_longread;
  static const type_t video =
    post_document_detail_type_t_video;
  static const type_t topic =
    post_document_detail_type_t_topic;
  static const type_t profile =
    post_document_detail_type_t_profile;
  static const type_t group =
    post_document_detail_type_t_group;
  static const type_t organic =
    post_document_detail_type_t_organic;
  static inline bool type_t_IsValid(int value) {
    return post_document_detail_type_t_IsValid(value);
  }
  static const type_t type_t_MIN =
    post_document_detail_type_t_type_t_MIN;
  static const type_t type_t_MAX =
    post_document_detail_type_t_type_t_MAX;
  static const int type_t_ARRAYSIZE =
    post_document_detail_type_t_type_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  type_t_descriptor() {
    return post_document_detail_type_t_descriptor();
  }
  static inline const ::std::string& type_t_Name(type_t value) {
    return post_document_detail_type_t_Name(value);
  }
  static inline bool type_t_Parse(const ::std::string& name,
      type_t* value) {
    return post_document_detail_type_t_Parse(name, value);
  }

  typedef post_document_detail_source_t source_t;
  static const source_t vk =
    post_document_detail_source_t_vk;
  static inline bool source_t_IsValid(int value) {
    return post_document_detail_source_t_IsValid(value);
  }
  static const source_t source_t_MIN =
    post_document_detail_source_t_source_t_MIN;
  static const source_t source_t_MAX =
    post_document_detail_source_t_source_t_MAX;
  static const int source_t_ARRAYSIZE =
    post_document_detail_source_t_source_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  source_t_descriptor() {
    return post_document_detail_source_t_descriptor();
  }
  static inline const ::std::string& source_t_Name(source_t value) {
    return post_document_detail_source_t_Name(value);
  }
  static inline bool source_t_Parse(const ::std::string& name,
      source_t* value) {
    return post_document_detail_source_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .gogo.fetcher.fetcher_image image = 9;
  int image_size() const;
  void clear_image();
  static const int kImageFieldNumber = 9;
  const ::gogo::fetcher::fetcher_image& image(int index) const;
  ::gogo::fetcher::fetcher_image* mutable_image(int index);
  ::gogo::fetcher::fetcher_image* add_image();
  ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >*
      mutable_image();
  const ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >&
      image() const;

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // required string text_context = 3;
  bool has_text_context() const;
  void clear_text_context();
  static const int kTextContextFieldNumber = 3;
  const ::std::string& text_context() const;
  void set_text_context(const ::std::string& value);
  #if LANG_CXX11
  void set_text_context(::std::string&& value);
  #endif
  void set_text_context(const char* value);
  void set_text_context(const char* value, size_t size);
  ::std::string* mutable_text_context();
  ::std::string* release_text_context();
  void set_allocated_text_context(::std::string* text_context);

  // optional string user_name = 4;
  bool has_user_name() const;
  void clear_user_name();
  static const int kUserNameFieldNumber = 4;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // optional string user_url = 5;
  bool has_user_url() const;
  void clear_user_url();
  static const int kUserUrlFieldNumber = 5;
  const ::std::string& user_url() const;
  void set_user_url(const ::std::string& value);
  #if LANG_CXX11
  void set_user_url(::std::string&& value);
  #endif
  void set_user_url(const char* value);
  void set_user_url(const char* value, size_t size);
  ::std::string* mutable_user_url();
  ::std::string* release_user_url();
  void set_allocated_user_url(::std::string* user_url);

  // optional string public_name = 6;
  bool has_public_name() const;
  void clear_public_name();
  static const int kPublicNameFieldNumber = 6;
  const ::std::string& public_name() const;
  void set_public_name(const ::std::string& value);
  #if LANG_CXX11
  void set_public_name(::std::string&& value);
  #endif
  void set_public_name(const char* value);
  void set_public_name(const char* value, size_t size);
  ::std::string* mutable_public_name();
  ::std::string* release_public_name();
  void set_allocated_public_name(::std::string* public_name);

  // optional string public_url = 7;
  bool has_public_url() const;
  void clear_public_url();
  static const int kPublicUrlFieldNumber = 7;
  const ::std::string& public_url() const;
  void set_public_url(const ::std::string& value);
  #if LANG_CXX11
  void set_public_url(::std::string&& value);
  #endif
  void set_public_url(const char* value);
  void set_public_url(const char* value, size_t size);
  ::std::string* mutable_public_url();
  ::std::string* release_public_url();
  void set_allocated_public_url(::std::string* public_url);

  // required uint64 download_time = 8;
  bool has_download_time() const;
  void clear_download_time();
  static const int kDownloadTimeFieldNumber = 8;
  ::google::protobuf::uint64 download_time() const;
  void set_download_time(::google::protobuf::uint64 value);

  // optional uint64 post_time = 10;
  bool has_post_time() const;
  void clear_post_time();
  static const int kPostTimeFieldNumber = 10;
  ::google::protobuf::uint64 post_time() const;
  void set_post_time(::google::protobuf::uint64 value);

  // optional uint32 views = 11;
  bool has_views() const;
  void clear_views();
  static const int kViewsFieldNumber = 11;
  ::google::protobuf::uint32 views() const;
  void set_views(::google::protobuf::uint32 value);

  // optional uint32 likes = 12;
  bool has_likes() const;
  void clear_likes();
  static const int kLikesFieldNumber = 12;
  ::google::protobuf::uint32 likes() const;
  void set_likes(::google::protobuf::uint32 value);

  // optional uint32 share = 13;
  bool has_share() const;
  void clear_share();
  static const int kShareFieldNumber = 13;
  ::google::protobuf::uint32 share() const;
  void set_share(::google::protobuf::uint32 value);

  // optional uint32 spam_level = 14;
  bool has_spam_level() const;
  void clear_spam_level();
  static const int kSpamLevelFieldNumber = 14;
  ::google::protobuf::uint32 spam_level() const;
  void set_spam_level(::google::protobuf::uint32 value);

  // optional uint32 porno_level = 15;
  bool has_porno_level() const;
  void clear_porno_level();
  static const int kPornoLevelFieldNumber = 15;
  ::google::protobuf::uint32 porno_level() const;
  void set_porno_level(::google::protobuf::uint32 value);

  // optional .gogo.fetcher.post_document_detail.type_t type = 16;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 16;
  ::gogo::fetcher::post_document_detail_type_t type() const;
  void set_type(::gogo::fetcher::post_document_detail_type_t value);

  // optional .gogo.fetcher.post_document_detail.source_t source = 17;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 17;
  ::gogo::fetcher::post_document_detail_source_t source() const;
  void set_source(::gogo::fetcher::post_document_detail_source_t value);

  // @@protoc_insertion_point(class_scope:gogo.fetcher.post_document_detail)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_title();
  void clear_has_title();
  void set_has_text_context();
  void clear_has_text_context();
  void set_has_user_name();
  void clear_has_user_name();
  void set_has_user_url();
  void clear_has_user_url();
  void set_has_public_name();
  void clear_has_public_name();
  void set_has_public_url();
  void clear_has_public_url();
  void set_has_download_time();
  void clear_has_download_time();
  void set_has_post_time();
  void clear_has_post_time();
  void set_has_views();
  void clear_has_views();
  void set_has_likes();
  void clear_has_likes();
  void set_has_share();
  void clear_has_share();
  void set_has_spam_level();
  void clear_has_spam_level();
  void set_has_porno_level();
  void clear_has_porno_level();
  void set_has_type();
  void clear_has_type();
  void set_has_source();
  void clear_has_source();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image > image_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr text_context_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr user_url_;
  ::google::protobuf::internal::ArenaStringPtr public_name_;
  ::google::protobuf::internal::ArenaStringPtr public_url_;
  ::google::protobuf::uint64 download_time_;
  ::google::protobuf::uint64 post_time_;
  ::google::protobuf::uint32 views_;
  ::google::protobuf::uint32 likes_;
  ::google::protobuf::uint32 share_;
  ::google::protobuf::uint32 spam_level_;
  ::google::protobuf::uint32 porno_level_;
  int type_;
  int source_;
  friend struct protobuf_fetcher_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class insta_profile_extra : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.fetcher.insta_profile_extra) */ {
 public:
  insta_profile_extra();
  virtual ~insta_profile_extra();

  insta_profile_extra(const insta_profile_extra& from);

  inline insta_profile_extra& operator=(const insta_profile_extra& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  insta_profile_extra(insta_profile_extra&& from) noexcept
    : insta_profile_extra() {
    *this = ::std::move(from);
  }

  inline insta_profile_extra& operator=(insta_profile_extra&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const insta_profile_extra& default_instance();

  static inline const insta_profile_extra* internal_default_instance() {
    return reinterpret_cast<const insta_profile_extra*>(
               &_insta_profile_extra_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(insta_profile_extra* other);
  friend void swap(insta_profile_extra& a, insta_profile_extra& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline insta_profile_extra* New() const PROTOBUF_FINAL { return New(NULL); }

  insta_profile_extra* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const insta_profile_extra& from);
  void MergeFrom(const insta_profile_extra& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(insta_profile_extra* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gogo.fetcher.fetcher_image last = 9;
  int last_size() const;
  void clear_last();
  static const int kLastFieldNumber = 9;
  const ::gogo::fetcher::fetcher_image& last(int index) const;
  ::gogo::fetcher::fetcher_image* mutable_last(int index);
  ::gogo::fetcher::fetcher_image* add_last();
  ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >*
      mutable_last();
  const ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >&
      last() const;

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string login = 2;
  bool has_login() const;
  void clear_login();
  static const int kLoginFieldNumber = 2;
  const ::std::string& login() const;
  void set_login(const ::std::string& value);
  #if LANG_CXX11
  void set_login(::std::string&& value);
  #endif
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  ::std::string* mutable_login();
  ::std::string* release_login();
  void set_allocated_login(::std::string* login);

  // optional .gogo.fetcher.fetcher_image avatar = 8;
  bool has_avatar() const;
  void clear_avatar();
  static const int kAvatarFieldNumber = 8;
  const ::gogo::fetcher::fetcher_image& avatar() const;
  ::gogo::fetcher::fetcher_image* mutable_avatar();
  ::gogo::fetcher::fetcher_image* release_avatar();
  void set_allocated_avatar(::gogo::fetcher::fetcher_image* avatar);

  // required uint64 posts = 3;
  bool has_posts() const;
  void clear_posts();
  static const int kPostsFieldNumber = 3;
  ::google::protobuf::uint64 posts() const;
  void set_posts(::google::protobuf::uint64 value);

  // required uint64 followers = 4;
  bool has_followers() const;
  void clear_followers();
  static const int kFollowersFieldNumber = 4;
  ::google::protobuf::uint64 followers() const;
  void set_followers(::google::protobuf::uint64 value);

  // required uint64 following = 5;
  bool has_following() const;
  void clear_following();
  static const int kFollowingFieldNumber = 5;
  ::google::protobuf::uint64 following() const;
  void set_following(::google::protobuf::uint64 value);

  // required uint64 download_time = 7;
  bool has_download_time() const;
  void clear_download_time();
  static const int kDownloadTimeFieldNumber = 7;
  ::google::protobuf::uint64 download_time() const;
  void set_download_time(::google::protobuf::uint64 value);

  // required bool official = 6;
  bool has_official() const;
  void clear_official();
  static const int kOfficialFieldNumber = 6;
  bool official() const;
  void set_official(bool value);

  // @@protoc_insertion_point(class_scope:gogo.fetcher.insta_profile_extra)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_login();
  void clear_has_login();
  void set_has_posts();
  void clear_has_posts();
  void set_has_followers();
  void clear_has_followers();
  void set_has_following();
  void clear_has_following();
  void set_has_official();
  void clear_has_official();
  void set_has_download_time();
  void clear_has_download_time();
  void set_has_avatar();
  void clear_has_avatar();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image > last_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr login_;
  ::gogo::fetcher::fetcher_image* avatar_;
  ::google::protobuf::uint64 posts_;
  ::google::protobuf::uint64 followers_;
  ::google::protobuf::uint64 following_;
  ::google::protobuf::uint64 download_time_;
  bool official_;
  friend struct protobuf_fetcher_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class vk_snippet_data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.fetcher.vk_snippet_data) */ {
 public:
  vk_snippet_data();
  virtual ~vk_snippet_data();

  vk_snippet_data(const vk_snippet_data& from);

  inline vk_snippet_data& operator=(const vk_snippet_data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  vk_snippet_data(vk_snippet_data&& from) noexcept
    : vk_snippet_data() {
    *this = ::std::move(from);
  }

  inline vk_snippet_data& operator=(vk_snippet_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const vk_snippet_data& default_instance();

  static inline const vk_snippet_data* internal_default_instance() {
    return reinterpret_cast<const vk_snippet_data*>(
               &_vk_snippet_data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(vk_snippet_data* other);
  friend void swap(vk_snippet_data& a, vk_snippet_data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline vk_snippet_data* New() const PROTOBUF_FINAL { return New(NULL); }

  vk_snippet_data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const vk_snippet_data& from);
  void MergeFrom(const vk_snippet_data& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(vk_snippet_data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gogo.fetcher.fetcher_image phalanx_images = 2;
  int phalanx_images_size() const;
  void clear_phalanx_images();
  static const int kPhalanxImagesFieldNumber = 2;
  const ::gogo::fetcher::fetcher_image& phalanx_images(int index) const;
  ::gogo::fetcher::fetcher_image* mutable_phalanx_images(int index);
  ::gogo::fetcher::fetcher_image* add_phalanx_images();
  ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >*
      mutable_phalanx_images();
  const ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >&
      phalanx_images() const;

  // required string bahroma_json = 1;
  bool has_bahroma_json() const;
  void clear_bahroma_json();
  static const int kBahromaJsonFieldNumber = 1;
  const ::std::string& bahroma_json() const;
  void set_bahroma_json(const ::std::string& value);
  #if LANG_CXX11
  void set_bahroma_json(::std::string&& value);
  #endif
  void set_bahroma_json(const char* value);
  void set_bahroma_json(const char* value, size_t size);
  ::std::string* mutable_bahroma_json();
  ::std::string* release_bahroma_json();
  void set_allocated_bahroma_json(::std::string* bahroma_json);

  // @@protoc_insertion_point(class_scope:gogo.fetcher.vk_snippet_data)
 private:
  void set_has_bahroma_json();
  void clear_has_bahroma_json();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image > phalanx_images_;
  ::google::protobuf::internal::ArenaStringPtr bahroma_json_;
  friend struct protobuf_fetcher_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class image_discovery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.fetcher.image_discovery) */ {
 public:
  image_discovery();
  virtual ~image_discovery();

  image_discovery(const image_discovery& from);

  inline image_discovery& operator=(const image_discovery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  image_discovery(image_discovery&& from) noexcept
    : image_discovery() {
    *this = ::std::move(from);
  }

  inline image_discovery& operator=(image_discovery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const image_discovery& default_instance();

  static inline const image_discovery* internal_default_instance() {
    return reinterpret_cast<const image_discovery*>(
               &_image_discovery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(image_discovery* other);
  friend void swap(image_discovery& a, image_discovery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline image_discovery* New() const PROTOBUF_FINAL { return New(NULL); }

  image_discovery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const image_discovery& from);
  void MergeFrom(const image_discovery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(image_discovery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string headers = 3;
  bool has_headers() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 3;
  const ::std::string& headers() const;
  void set_headers(const ::std::string& value);
  #if LANG_CXX11
  void set_headers(::std::string&& value);
  #endif
  void set_headers(const char* value);
  void set_headers(const char* value, size_t size);
  ::std::string* mutable_headers();
  ::std::string* release_headers();
  void set_allocated_headers(::std::string* headers);

  // optional bytes content = 4;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional string href = 10;
  bool has_href() const;
  void clear_href();
  static const int kHrefFieldNumber = 10;
  const ::std::string& href() const;
  void set_href(const ::std::string& value);
  #if LANG_CXX11
  void set_href(::std::string&& value);
  #endif
  void set_href(const char* value);
  void set_href(const char* value, size_t size);
  ::std::string* mutable_href();
  ::std::string* release_href();
  void set_allocated_href(::std::string* href);

  // optional string meta = 11;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 11;
  const ::std::string& meta() const;
  void set_meta(const ::std::string& value);
  #if LANG_CXX11
  void set_meta(::std::string&& value);
  #endif
  void set_meta(const char* value);
  void set_meta(const char* value, size_t size);
  ::std::string* mutable_meta();
  ::std::string* release_meta();
  void set_allocated_meta(::std::string* meta);

  // required uint32 http_status = 2;
  bool has_http_status() const;
  void clear_http_status();
  static const int kHttpStatusFieldNumber = 2;
  ::google::protobuf::uint32 http_status() const;
  void set_http_status(::google::protobuf::uint32 value);

  // optional uint32 width = 5;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 6;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional int32 left = 7;
  bool has_left() const;
  void clear_left();
  static const int kLeftFieldNumber = 7;
  ::google::protobuf::int32 left() const;
  void set_left(::google::protobuf::int32 value);

  // optional int32 top = 8;
  bool has_top() const;
  void clear_top();
  static const int kTopFieldNumber = 8;
  ::google::protobuf::int32 top() const;
  void set_top(::google::protobuf::int32 value);

  // optional int32 zindex = 9;
  bool has_zindex() const;
  void clear_zindex();
  static const int kZindexFieldNumber = 9;
  ::google::protobuf::int32 zindex() const;
  void set_zindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gogo.fetcher.image_discovery)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_http_status();
  void clear_has_http_status();
  void set_has_headers();
  void clear_has_headers();
  void set_has_content();
  void clear_has_content();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_left();
  void clear_has_left();
  void set_has_top();
  void clear_has_top();
  void set_has_zindex();
  void clear_has_zindex();
  void set_has_href();
  void clear_has_href();
  void set_has_meta();
  void clear_has_meta();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr headers_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr href_;
  ::google::protobuf::internal::ArenaStringPtr meta_;
  ::google::protobuf::uint32 http_status_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 zindex_;
  friend struct protobuf_fetcher_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class images_discovery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.fetcher.images_discovery) */ {
 public:
  images_discovery();
  virtual ~images_discovery();

  images_discovery(const images_discovery& from);

  inline images_discovery& operator=(const images_discovery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  images_discovery(images_discovery&& from) noexcept
    : images_discovery() {
    *this = ::std::move(from);
  }

  inline images_discovery& operator=(images_discovery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const images_discovery& default_instance();

  static inline const images_discovery* internal_default_instance() {
    return reinterpret_cast<const images_discovery*>(
               &_images_discovery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(images_discovery* other);
  friend void swap(images_discovery& a, images_discovery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline images_discovery* New() const PROTOBUF_FINAL { return New(NULL); }

  images_discovery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const images_discovery& from);
  void MergeFrom(const images_discovery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(images_discovery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gogo.fetcher.image_discovery images = 3;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 3;
  const ::gogo::fetcher::image_discovery& images(int index) const;
  ::gogo::fetcher::image_discovery* mutable_images(int index);
  ::gogo::fetcher::image_discovery* add_images();
  ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::image_discovery >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::image_discovery >&
      images() const;

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string html = 4;
  bool has_html() const;
  void clear_html();
  static const int kHtmlFieldNumber = 4;
  const ::std::string& html() const;
  void set_html(const ::std::string& value);
  #if LANG_CXX11
  void set_html(::std::string&& value);
  #endif
  void set_html(const char* value);
  void set_html(const char* value, size_t size);
  ::std::string* mutable_html();
  ::std::string* release_html();
  void set_allocated_html(::std::string* html);

  // required uint64 download_time = 2;
  bool has_download_time() const;
  void clear_download_time();
  static const int kDownloadTimeFieldNumber = 2;
  ::google::protobuf::uint64 download_time() const;
  void set_download_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gogo.fetcher.images_discovery)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_download_time();
  void clear_has_download_time();
  void set_has_html();
  void clear_has_html();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::image_discovery > images_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr html_;
  ::google::protobuf::uint64 download_time_;
  friend struct protobuf_fetcher_5fstorage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SerializedBlock

// optional int32 version = 1;
inline bool SerializedBlock::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SerializedBlock::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SerializedBlock::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SerializedBlock::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 SerializedBlock::version() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.SerializedBlock.version)
  return version_;
}
inline void SerializedBlock::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.SerializedBlock.version)
}

// optional string proto_class_name = 2;
inline bool SerializedBlock::has_proto_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SerializedBlock::set_has_proto_class_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SerializedBlock::clear_has_proto_class_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SerializedBlock::clear_proto_class_name() {
  proto_class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proto_class_name();
}
inline const ::std::string& SerializedBlock::proto_class_name() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.SerializedBlock.proto_class_name)
  return proto_class_name_.GetNoArena();
}
inline void SerializedBlock::set_proto_class_name(const ::std::string& value) {
  set_has_proto_class_name();
  proto_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.SerializedBlock.proto_class_name)
}
#if LANG_CXX11
inline void SerializedBlock::set_proto_class_name(::std::string&& value) {
  set_has_proto_class_name();
  proto_class_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.SerializedBlock.proto_class_name)
}
#endif
inline void SerializedBlock::set_proto_class_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proto_class_name();
  proto_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.SerializedBlock.proto_class_name)
}
inline void SerializedBlock::set_proto_class_name(const char* value, size_t size) {
  set_has_proto_class_name();
  proto_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.SerializedBlock.proto_class_name)
}
inline ::std::string* SerializedBlock::mutable_proto_class_name() {
  set_has_proto_class_name();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.SerializedBlock.proto_class_name)
  return proto_class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerializedBlock::release_proto_class_name() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.SerializedBlock.proto_class_name)
  clear_has_proto_class_name();
  return proto_class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerializedBlock::set_allocated_proto_class_name(::std::string* proto_class_name) {
  if (proto_class_name != NULL) {
    set_has_proto_class_name();
  } else {
    clear_has_proto_class_name();
  }
  proto_class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto_class_name);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.SerializedBlock.proto_class_name)
}

// repeated bytes proto_blobs = 3;
inline int SerializedBlock::proto_blobs_size() const {
  return proto_blobs_.size();
}
inline void SerializedBlock::clear_proto_blobs() {
  proto_blobs_.Clear();
}
inline const ::std::string& SerializedBlock::proto_blobs(int index) const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.SerializedBlock.proto_blobs)
  return proto_blobs_.Get(index);
}
inline ::std::string* SerializedBlock::mutable_proto_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.SerializedBlock.proto_blobs)
  return proto_blobs_.Mutable(index);
}
inline void SerializedBlock::set_proto_blobs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.fetcher.SerializedBlock.proto_blobs)
  proto_blobs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SerializedBlock::set_proto_blobs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.fetcher.SerializedBlock.proto_blobs)
  proto_blobs_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SerializedBlock::set_proto_blobs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  proto_blobs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.SerializedBlock.proto_blobs)
}
inline void SerializedBlock::set_proto_blobs(int index, const void* value, size_t size) {
  proto_blobs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.SerializedBlock.proto_blobs)
}
inline ::std::string* SerializedBlock::add_proto_blobs() {
  // @@protoc_insertion_point(field_add_mutable:gogo.fetcher.SerializedBlock.proto_blobs)
  return proto_blobs_.Add();
}
inline void SerializedBlock::add_proto_blobs(const ::std::string& value) {
  proto_blobs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.fetcher.SerializedBlock.proto_blobs)
}
#if LANG_CXX11
inline void SerializedBlock::add_proto_blobs(::std::string&& value) {
  proto_blobs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.fetcher.SerializedBlock.proto_blobs)
}
#endif
inline void SerializedBlock::add_proto_blobs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  proto_blobs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.fetcher.SerializedBlock.proto_blobs)
}
inline void SerializedBlock::add_proto_blobs(const void* value, size_t size) {
  proto_blobs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.fetcher.SerializedBlock.proto_blobs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SerializedBlock::proto_blobs() const {
  // @@protoc_insertion_point(field_list:gogo.fetcher.SerializedBlock.proto_blobs)
  return proto_blobs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SerializedBlock::mutable_proto_blobs() {
  // @@protoc_insertion_point(field_mutable_list:gogo.fetcher.SerializedBlock.proto_blobs)
  return &proto_blobs_;
}

// -------------------------------------------------------------------

// fetcher_image

// required string url = 1;
inline bool fetcher_image::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fetcher_image::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fetcher_image::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fetcher_image::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& fetcher_image::url() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_image.url)
  return url_.GetNoArena();
}
inline void fetcher_image::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_image.url)
}
#if LANG_CXX11
inline void fetcher_image::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.fetcher_image.url)
}
#endif
inline void fetcher_image::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.fetcher_image.url)
}
inline void fetcher_image::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.fetcher_image.url)
}
inline ::std::string* fetcher_image::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_image.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fetcher_image::release_url() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_image.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fetcher_image::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_image.url)
}

// required bytes content = 2;
inline bool fetcher_image::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fetcher_image::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fetcher_image::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fetcher_image::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& fetcher_image::content() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_image.content)
  return content_.GetNoArena();
}
inline void fetcher_image::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_image.content)
}
#if LANG_CXX11
inline void fetcher_image::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.fetcher_image.content)
}
#endif
inline void fetcher_image::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.fetcher_image.content)
}
inline void fetcher_image::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.fetcher_image.content)
}
inline ::std::string* fetcher_image::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_image.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fetcher_image::release_content() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_image.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fetcher_image::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_image.content)
}

// optional uint64 download_time = 3;
inline bool fetcher_image::has_download_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fetcher_image::set_has_download_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fetcher_image::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fetcher_image::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
inline ::google::protobuf::uint64 fetcher_image::download_time() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_image.download_time)
  return download_time_;
}
inline void fetcher_image::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_image.download_time)
}

// optional uint32 width = 4;
inline bool fetcher_image::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fetcher_image::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fetcher_image::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fetcher_image::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 fetcher_image::width() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_image.width)
  return width_;
}
inline void fetcher_image::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_image.width)
}

// optional uint32 height = 5;
inline bool fetcher_image::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void fetcher_image::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void fetcher_image::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void fetcher_image::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 fetcher_image::height() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_image.height)
  return height_;
}
inline void fetcher_image::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_image.height)
}

// optional .ru.mail.go.webbase.blobs.ContentType format = 6;
inline bool fetcher_image::has_format() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void fetcher_image::set_has_format() {
  _has_bits_[0] |= 0x00000020u;
}
inline void fetcher_image::clear_has_format() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void fetcher_image::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::ru::mail::go::webbase::blobs::ContentType fetcher_image::format() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_image.format)
  return static_cast< ::ru::mail::go::webbase::blobs::ContentType >(format_);
}
inline void fetcher_image::set_format(::ru::mail::go::webbase::blobs::ContentType value) {
  assert(::ru::mail::go::webbase::blobs::ContentType_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_image.format)
}

// optional .gogo.fetcher.fetcher_image.type_t type = 7;
inline bool fetcher_image::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void fetcher_image::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void fetcher_image::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void fetcher_image::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::gogo::fetcher::fetcher_image_type_t fetcher_image::type() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_image.type)
  return static_cast< ::gogo::fetcher::fetcher_image_type_t >(type_);
}
inline void fetcher_image::set_type(::gogo::fetcher::fetcher_image_type_t value) {
  assert(::gogo::fetcher::fetcher_image_type_t_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_image.type)
}

// -------------------------------------------------------------------

// fetcher_document_detail

// required string url = 1;
inline bool fetcher_document_detail::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fetcher_document_detail::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fetcher_document_detail::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fetcher_document_detail::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& fetcher_document_detail::url() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.url)
  return url_.GetNoArena();
}
inline void fetcher_document_detail::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.url)
}
#if LANG_CXX11
inline void fetcher_document_detail::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.fetcher_document_detail.url)
}
#endif
inline void fetcher_document_detail::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.fetcher_document_detail.url)
}
inline void fetcher_document_detail::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.fetcher_document_detail.url)
}
inline ::std::string* fetcher_document_detail::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fetcher_document_detail::release_url() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fetcher_document_detail::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.url)
}

// required uint64 download_time = 2;
inline bool fetcher_document_detail::has_download_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void fetcher_document_detail::set_has_download_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void fetcher_document_detail::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void fetcher_document_detail::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
inline ::google::protobuf::uint64 fetcher_document_detail::download_time() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.download_time)
  return download_time_;
}
inline void fetcher_document_detail::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.download_time)
}

// optional bytes content = 3;
inline bool fetcher_document_detail::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fetcher_document_detail::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fetcher_document_detail::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fetcher_document_detail::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& fetcher_document_detail::content() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.content)
  return content_.GetNoArena();
}
inline void fetcher_document_detail::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.content)
}
#if LANG_CXX11
inline void fetcher_document_detail::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.fetcher_document_detail.content)
}
#endif
inline void fetcher_document_detail::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.fetcher_document_detail.content)
}
inline void fetcher_document_detail::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.fetcher_document_detail.content)
}
inline ::std::string* fetcher_document_detail::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fetcher_document_detail::release_content() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fetcher_document_detail::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.content)
}

// required .gogo.fetcher.fetcher_document_detail.flag_t flag = 4;
inline bool fetcher_document_detail::has_flag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void fetcher_document_detail::set_has_flag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void fetcher_document_detail::clear_has_flag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void fetcher_document_detail::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::gogo::fetcher::fetcher_document_detail_flag_t fetcher_document_detail::flag() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.flag)
  return static_cast< ::gogo::fetcher::fetcher_document_detail_flag_t >(flag_);
}
inline void fetcher_document_detail::set_flag(::gogo::fetcher::fetcher_document_detail_flag_t value) {
  assert(::gogo::fetcher::fetcher_document_detail_flag_t_IsValid(value));
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.flag)
}

// optional bytes http_head = 5;
inline bool fetcher_document_detail::has_http_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fetcher_document_detail::set_has_http_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fetcher_document_detail::clear_has_http_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fetcher_document_detail::clear_http_head() {
  http_head_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_http_head();
}
inline const ::std::string& fetcher_document_detail::http_head() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.http_head)
  return http_head_.GetNoArena();
}
inline void fetcher_document_detail::set_http_head(const ::std::string& value) {
  set_has_http_head();
  http_head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.http_head)
}
#if LANG_CXX11
inline void fetcher_document_detail::set_http_head(::std::string&& value) {
  set_has_http_head();
  http_head_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.fetcher_document_detail.http_head)
}
#endif
inline void fetcher_document_detail::set_http_head(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_http_head();
  http_head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.fetcher_document_detail.http_head)
}
inline void fetcher_document_detail::set_http_head(const void* value, size_t size) {
  set_has_http_head();
  http_head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.fetcher_document_detail.http_head)
}
inline ::std::string* fetcher_document_detail::mutable_http_head() {
  set_has_http_head();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.http_head)
  return http_head_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fetcher_document_detail::release_http_head() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.http_head)
  clear_has_http_head();
  return http_head_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fetcher_document_detail::set_allocated_http_head(::std::string* http_head) {
  if (http_head != NULL) {
    set_has_http_head();
  } else {
    clear_has_http_head();
  }
  http_head_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_head);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.http_head)
}

// optional .gogo.fetcher.fetcher_document_detail.error_t error = 6;
inline bool fetcher_document_detail::has_error() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void fetcher_document_detail::set_has_error() {
  _has_bits_[0] |= 0x00000800u;
}
inline void fetcher_document_detail::clear_has_error() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void fetcher_document_detail::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::gogo::fetcher::fetcher_document_detail_error_t fetcher_document_detail::error() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.error)
  return static_cast< ::gogo::fetcher::fetcher_document_detail_error_t >(error_);
}
inline void fetcher_document_detail::set_error(::gogo::fetcher::fetcher_document_detail_error_t value) {
  assert(::gogo::fetcher::fetcher_document_detail_error_t_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.error)
}

// optional string ip = 7;
inline bool fetcher_document_detail::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fetcher_document_detail::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fetcher_document_detail::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fetcher_document_detail::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& fetcher_document_detail::ip() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.ip)
  return ip_.GetNoArena();
}
inline void fetcher_document_detail::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.ip)
}
#if LANG_CXX11
inline void fetcher_document_detail::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.fetcher_document_detail.ip)
}
#endif
inline void fetcher_document_detail::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.fetcher_document_detail.ip)
}
inline void fetcher_document_detail::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.fetcher_document_detail.ip)
}
inline ::std::string* fetcher_document_detail::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fetcher_document_detail::release_ip() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fetcher_document_detail::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.ip)
}

// optional uint32 flags = 8;
inline bool fetcher_document_detail::has_flags() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void fetcher_document_detail::set_has_flags() {
  _has_bits_[0] |= 0x00001000u;
}
inline void fetcher_document_detail::clear_has_flags() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void fetcher_document_detail::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 fetcher_document_detail::flags() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.flags)
  return flags_;
}
inline void fetcher_document_detail::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.flags)
}

// repeated string redirects = 9;
inline int fetcher_document_detail::redirects_size() const {
  return redirects_.size();
}
inline void fetcher_document_detail::clear_redirects() {
  redirects_.Clear();
}
inline const ::std::string& fetcher_document_detail::redirects(int index) const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.redirects)
  return redirects_.Get(index);
}
inline ::std::string* fetcher_document_detail::mutable_redirects(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.redirects)
  return redirects_.Mutable(index);
}
inline void fetcher_document_detail::set_redirects(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.redirects)
  redirects_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void fetcher_document_detail::set_redirects(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.redirects)
  redirects_.Mutable(index)->assign(std::move(value));
}
#endif
inline void fetcher_document_detail::set_redirects(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirects_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.fetcher_document_detail.redirects)
}
inline void fetcher_document_detail::set_redirects(int index, const char* value, size_t size) {
  redirects_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.fetcher_document_detail.redirects)
}
inline ::std::string* fetcher_document_detail::add_redirects() {
  // @@protoc_insertion_point(field_add_mutable:gogo.fetcher.fetcher_document_detail.redirects)
  return redirects_.Add();
}
inline void fetcher_document_detail::add_redirects(const ::std::string& value) {
  redirects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.fetcher.fetcher_document_detail.redirects)
}
#if LANG_CXX11
inline void fetcher_document_detail::add_redirects(::std::string&& value) {
  redirects_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.fetcher.fetcher_document_detail.redirects)
}
#endif
inline void fetcher_document_detail::add_redirects(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.fetcher.fetcher_document_detail.redirects)
}
inline void fetcher_document_detail::add_redirects(const char* value, size_t size) {
  redirects_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.fetcher.fetcher_document_detail.redirects)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
fetcher_document_detail::redirects() const {
  // @@protoc_insertion_point(field_list:gogo.fetcher.fetcher_document_detail.redirects)
  return redirects_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
fetcher_document_detail::mutable_redirects() {
  // @@protoc_insertion_point(field_mutable_list:gogo.fetcher.fetcher_document_detail.redirects)
  return &redirects_;
}

// optional .ru.mail.go.webbase.blobs.FetchUrl fetch_url_proto = 10;
inline bool fetcher_document_detail::has_fetch_url_proto() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void fetcher_document_detail::set_has_fetch_url_proto() {
  _has_bits_[0] |= 0x00000010u;
}
inline void fetcher_document_detail::clear_has_fetch_url_proto() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void fetcher_document_detail::clear_fetch_url_proto() {
  if (fetch_url_proto_ != NULL) fetch_url_proto_->::ru::mail::go::webbase::blobs::FetchUrl::Clear();
  clear_has_fetch_url_proto();
}
inline const ::ru::mail::go::webbase::blobs::FetchUrl& fetcher_document_detail::fetch_url_proto() const {
  const ::ru::mail::go::webbase::blobs::FetchUrl* p = fetch_url_proto_;
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.fetch_url_proto)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::FetchUrl*>(
      &::ru::mail::go::webbase::blobs::_FetchUrl_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::FetchUrl* fetcher_document_detail::mutable_fetch_url_proto() {
  set_has_fetch_url_proto();
  if (fetch_url_proto_ == NULL) {
    fetch_url_proto_ = new ::ru::mail::go::webbase::blobs::FetchUrl;
  }
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.fetch_url_proto)
  return fetch_url_proto_;
}
inline ::ru::mail::go::webbase::blobs::FetchUrl* fetcher_document_detail::release_fetch_url_proto() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.fetch_url_proto)
  clear_has_fetch_url_proto();
  ::ru::mail::go::webbase::blobs::FetchUrl* temp = fetch_url_proto_;
  fetch_url_proto_ = NULL;
  return temp;
}
inline void fetcher_document_detail::set_allocated_fetch_url_proto(::ru::mail::go::webbase::blobs::FetchUrl* fetch_url_proto) {
  delete fetch_url_proto_;
  fetch_url_proto_ = fetch_url_proto;
  if (fetch_url_proto) {
    set_has_fetch_url_proto();
  } else {
    clear_has_fetch_url_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.fetch_url_proto)
}

// optional .ru.mail.go.webbase.blobs.ForumType forumType = 11;
inline bool fetcher_document_detail::has_forumtype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void fetcher_document_detail::set_has_forumtype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void fetcher_document_detail::clear_has_forumtype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void fetcher_document_detail::clear_forumtype() {
  forumtype_ = 0;
  clear_has_forumtype();
}
inline ::ru::mail::go::webbase::blobs::ForumType fetcher_document_detail::forumtype() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.forumType)
  return static_cast< ::ru::mail::go::webbase::blobs::ForumType >(forumtype_);
}
inline void fetcher_document_detail::set_forumtype(::ru::mail::go::webbase::blobs::ForumType value) {
  assert(::ru::mail::go::webbase::blobs::ForumType_IsValid(value));
  set_has_forumtype();
  forumtype_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.forumType)
}

// optional .ru.mail.go.webbase.blobs.RobotsState robotsState = 12;
inline bool fetcher_document_detail::has_robotsstate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void fetcher_document_detail::set_has_robotsstate() {
  _has_bits_[0] |= 0x00004000u;
}
inline void fetcher_document_detail::clear_has_robotsstate() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void fetcher_document_detail::clear_robotsstate() {
  robotsstate_ = 0;
  clear_has_robotsstate();
}
inline ::ru::mail::go::webbase::blobs::RobotsState fetcher_document_detail::robotsstate() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.robotsState)
  return static_cast< ::ru::mail::go::webbase::blobs::RobotsState >(robotsstate_);
}
inline void fetcher_document_detail::set_robotsstate(::ru::mail::go::webbase::blobs::RobotsState value) {
  assert(::ru::mail::go::webbase::blobs::RobotsState_IsValid(value));
  set_has_robotsstate();
  robotsstate_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.robotsState)
}

// optional .ru.mail.go.webbase.blobs.RenderType renderType = 13;
inline bool fetcher_document_detail::has_rendertype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void fetcher_document_detail::set_has_rendertype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void fetcher_document_detail::clear_has_rendertype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void fetcher_document_detail::clear_rendertype() {
  rendertype_ = 0;
  clear_has_rendertype();
}
inline ::ru::mail::go::webbase::blobs::RenderType fetcher_document_detail::rendertype() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.renderType)
  return static_cast< ::ru::mail::go::webbase::blobs::RenderType >(rendertype_);
}
inline void fetcher_document_detail::set_rendertype(::ru::mail::go::webbase::blobs::RenderType value) {
  assert(::ru::mail::go::webbase::blobs::RenderType_IsValid(value));
  set_has_rendertype();
  rendertype_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.renderType)
}

// optional .ru.mail.go.webbase.blobs.Encoding forcedEncoding = 14;
inline bool fetcher_document_detail::has_forcedencoding() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void fetcher_document_detail::set_has_forcedencoding() {
  _has_bits_[0] |= 0x00010000u;
}
inline void fetcher_document_detail::clear_has_forcedencoding() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void fetcher_document_detail::clear_forcedencoding() {
  forcedencoding_ = 0;
  clear_has_forcedencoding();
}
inline ::ru::mail::go::webbase::blobs::Encoding fetcher_document_detail::forcedencoding() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.forcedEncoding)
  return static_cast< ::ru::mail::go::webbase::blobs::Encoding >(forcedencoding_);
}
inline void fetcher_document_detail::set_forcedencoding(::ru::mail::go::webbase::blobs::Encoding value) {
  assert(::ru::mail::go::webbase::blobs::Encoding_IsValid(value));
  set_has_forcedencoding();
  forcedencoding_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.forcedEncoding)
}

// optional bool leadToProviderBlock = 18 [default = false];
inline bool fetcher_document_detail::has_leadtoproviderblock() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void fetcher_document_detail::set_has_leadtoproviderblock() {
  _has_bits_[0] |= 0x00040000u;
}
inline void fetcher_document_detail::clear_has_leadtoproviderblock() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void fetcher_document_detail::clear_leadtoproviderblock() {
  leadtoproviderblock_ = false;
  clear_has_leadtoproviderblock();
}
inline bool fetcher_document_detail::leadtoproviderblock() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.leadToProviderBlock)
  return leadtoproviderblock_;
}
inline void fetcher_document_detail::set_leadtoproviderblock(bool value) {
  set_has_leadtoproviderblock();
  leadtoproviderblock_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.leadToProviderBlock)
}

// optional bool isFromRedirectChain = 19 [default = false];
inline bool fetcher_document_detail::has_isfromredirectchain() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void fetcher_document_detail::set_has_isfromredirectchain() {
  _has_bits_[0] |= 0x00080000u;
}
inline void fetcher_document_detail::clear_has_isfromredirectchain() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void fetcher_document_detail::clear_isfromredirectchain() {
  isfromredirectchain_ = false;
  clear_has_isfromredirectchain();
}
inline bool fetcher_document_detail::isfromredirectchain() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.isFromRedirectChain)
  return isfromredirectchain_;
}
inline void fetcher_document_detail::set_isfromredirectchain(bool value) {
  set_has_isfromredirectchain();
  isfromredirectchain_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.isFromRedirectChain)
}

// optional .ru.mail.go.webbase.blobs.SourceMark sourceMark = 20;
inline bool fetcher_document_detail::has_sourcemark() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void fetcher_document_detail::set_has_sourcemark() {
  _has_bits_[0] |= 0x00020000u;
}
inline void fetcher_document_detail::clear_has_sourcemark() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void fetcher_document_detail::clear_sourcemark() {
  sourcemark_ = 0;
  clear_has_sourcemark();
}
inline ::ru::mail::go::webbase::blobs::SourceMark fetcher_document_detail::sourcemark() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.sourceMark)
  return static_cast< ::ru::mail::go::webbase::blobs::SourceMark >(sourcemark_);
}
inline void fetcher_document_detail::set_sourcemark(::ru::mail::go::webbase::blobs::SourceMark value) {
  assert(::ru::mail::go::webbase::blobs::SourceMark_IsValid(value));
  set_has_sourcemark();
  sourcemark_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.sourceMark)
}

// optional .gogo.fetcher.fetcher_document_detail.redirect_t redirect_type = 21;
inline bool fetcher_document_detail::has_redirect_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void fetcher_document_detail::set_has_redirect_type() {
  _has_bits_[0] |= 0x00200000u;
}
inline void fetcher_document_detail::clear_has_redirect_type() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void fetcher_document_detail::clear_redirect_type() {
  redirect_type_ = 0;
  clear_has_redirect_type();
}
inline ::gogo::fetcher::fetcher_document_detail_redirect_t fetcher_document_detail::redirect_type() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.redirect_type)
  return static_cast< ::gogo::fetcher::fetcher_document_detail_redirect_t >(redirect_type_);
}
inline void fetcher_document_detail::set_redirect_type(::gogo::fetcher::fetcher_document_detail_redirect_t value) {
  assert(::gogo::fetcher::fetcher_document_detail_redirect_t_IsValid(value));
  set_has_redirect_type();
  redirect_type_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.redirect_type)
}

// optional bool scriptRemoved = 23;
inline bool fetcher_document_detail::has_scriptremoved() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void fetcher_document_detail::set_has_scriptremoved() {
  _has_bits_[0] |= 0x00100000u;
}
inline void fetcher_document_detail::clear_has_scriptremoved() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void fetcher_document_detail::clear_scriptremoved() {
  scriptremoved_ = false;
  clear_has_scriptremoved();
}
inline bool fetcher_document_detail::scriptremoved() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.scriptRemoved)
  return scriptremoved_;
}
inline void fetcher_document_detail::set_scriptremoved(bool value) {
  set_has_scriptremoved();
  scriptremoved_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_document_detail.scriptRemoved)
}

// optional .gogo.fetcher.fetcher_image profileImage = 24;
inline bool fetcher_document_detail::has_profileimage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void fetcher_document_detail::set_has_profileimage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void fetcher_document_detail::clear_has_profileimage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void fetcher_document_detail::clear_profileimage() {
  if (profileimage_ != NULL) profileimage_->::gogo::fetcher::fetcher_image::Clear();
  clear_has_profileimage();
}
inline const ::gogo::fetcher::fetcher_image& fetcher_document_detail::profileimage() const {
  const ::gogo::fetcher::fetcher_image* p = profileimage_;
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.profileImage)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::fetcher::fetcher_image*>(
      &::gogo::fetcher::_fetcher_image_default_instance_);
}
inline ::gogo::fetcher::fetcher_image* fetcher_document_detail::mutable_profileimage() {
  set_has_profileimage();
  if (profileimage_ == NULL) {
    profileimage_ = new ::gogo::fetcher::fetcher_image;
  }
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.profileImage)
  return profileimage_;
}
inline ::gogo::fetcher::fetcher_image* fetcher_document_detail::release_profileimage() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.profileImage)
  clear_has_profileimage();
  ::gogo::fetcher::fetcher_image* temp = profileimage_;
  profileimage_ = NULL;
  return temp;
}
inline void fetcher_document_detail::set_allocated_profileimage(::gogo::fetcher::fetcher_image* profileimage) {
  delete profileimage_;
  profileimage_ = profileimage;
  if (profileimage) {
    set_has_profileimage();
  } else {
    clear_has_profileimage();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.profileImage)
}

// optional .gogo.fetcher.fetcher_image coverImage = 25;
inline bool fetcher_document_detail::has_coverimage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void fetcher_document_detail::set_has_coverimage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void fetcher_document_detail::clear_has_coverimage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void fetcher_document_detail::clear_coverimage() {
  if (coverimage_ != NULL) coverimage_->::gogo::fetcher::fetcher_image::Clear();
  clear_has_coverimage();
}
inline const ::gogo::fetcher::fetcher_image& fetcher_document_detail::coverimage() const {
  const ::gogo::fetcher::fetcher_image* p = coverimage_;
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.coverImage)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::fetcher::fetcher_image*>(
      &::gogo::fetcher::_fetcher_image_default_instance_);
}
inline ::gogo::fetcher::fetcher_image* fetcher_document_detail::mutable_coverimage() {
  set_has_coverimage();
  if (coverimage_ == NULL) {
    coverimage_ = new ::gogo::fetcher::fetcher_image;
  }
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.coverImage)
  return coverimage_;
}
inline ::gogo::fetcher::fetcher_image* fetcher_document_detail::release_coverimage() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.coverImage)
  clear_has_coverimage();
  ::gogo::fetcher::fetcher_image* temp = coverimage_;
  coverimage_ = NULL;
  return temp;
}
inline void fetcher_document_detail::set_allocated_coverimage(::gogo::fetcher::fetcher_image* coverimage) {
  delete coverimage_;
  coverimage_ = coverimage;
  if (coverimage) {
    set_has_coverimage();
  } else {
    clear_has_coverimage();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.coverImage)
}

// optional .ru.mail.go.webbase.blobs.PublicationMarkup microdata_markup = 26;
inline bool fetcher_document_detail::has_microdata_markup() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void fetcher_document_detail::set_has_microdata_markup() {
  _has_bits_[0] |= 0x00000080u;
}
inline void fetcher_document_detail::clear_has_microdata_markup() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void fetcher_document_detail::clear_microdata_markup() {
  if (microdata_markup_ != NULL) microdata_markup_->::ru::mail::go::webbase::blobs::PublicationMarkup::Clear();
  clear_has_microdata_markup();
}
inline const ::ru::mail::go::webbase::blobs::PublicationMarkup& fetcher_document_detail::microdata_markup() const {
  const ::ru::mail::go::webbase::blobs::PublicationMarkup* p = microdata_markup_;
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.microdata_markup)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::PublicationMarkup*>(
      &::ru::mail::go::webbase::blobs::_PublicationMarkup_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::PublicationMarkup* fetcher_document_detail::mutable_microdata_markup() {
  set_has_microdata_markup();
  if (microdata_markup_ == NULL) {
    microdata_markup_ = new ::ru::mail::go::webbase::blobs::PublicationMarkup;
  }
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.microdata_markup)
  return microdata_markup_;
}
inline ::ru::mail::go::webbase::blobs::PublicationMarkup* fetcher_document_detail::release_microdata_markup() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.microdata_markup)
  clear_has_microdata_markup();
  ::ru::mail::go::webbase::blobs::PublicationMarkup* temp = microdata_markup_;
  microdata_markup_ = NULL;
  return temp;
}
inline void fetcher_document_detail::set_allocated_microdata_markup(::ru::mail::go::webbase::blobs::PublicationMarkup* microdata_markup) {
  delete microdata_markup_;
  microdata_markup_ = microdata_markup;
  if (microdata_markup) {
    set_has_microdata_markup();
  } else {
    clear_has_microdata_markup();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.microdata_markup)
}

// optional .gogo.fetcher.images_discovery imagesOnPage = 27;
inline bool fetcher_document_detail::has_imagesonpage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void fetcher_document_detail::set_has_imagesonpage() {
  _has_bits_[0] |= 0x00000100u;
}
inline void fetcher_document_detail::clear_has_imagesonpage() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void fetcher_document_detail::clear_imagesonpage() {
  if (imagesonpage_ != NULL) imagesonpage_->::gogo::fetcher::images_discovery::Clear();
  clear_has_imagesonpage();
}
inline const ::gogo::fetcher::images_discovery& fetcher_document_detail::imagesonpage() const {
  const ::gogo::fetcher::images_discovery* p = imagesonpage_;
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_document_detail.imagesOnPage)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::fetcher::images_discovery*>(
      &::gogo::fetcher::_images_discovery_default_instance_);
}
inline ::gogo::fetcher::images_discovery* fetcher_document_detail::mutable_imagesonpage() {
  set_has_imagesonpage();
  if (imagesonpage_ == NULL) {
    imagesonpage_ = new ::gogo::fetcher::images_discovery;
  }
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_document_detail.imagesOnPage)
  return imagesonpage_;
}
inline ::gogo::fetcher::images_discovery* fetcher_document_detail::release_imagesonpage() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_document_detail.imagesOnPage)
  clear_has_imagesonpage();
  ::gogo::fetcher::images_discovery* temp = imagesonpage_;
  imagesonpage_ = NULL;
  return temp;
}
inline void fetcher_document_detail::set_allocated_imagesonpage(::gogo::fetcher::images_discovery* imagesonpage) {
  delete imagesonpage_;
  imagesonpage_ = imagesonpage;
  if (imagesonpage) {
    set_has_imagesonpage();
  } else {
    clear_has_imagesonpage();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_document_detail.imagesOnPage)
}

// -------------------------------------------------------------------

// fetcher_host_details

// required string hostname = 1;
inline bool fetcher_host_details::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fetcher_host_details::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fetcher_host_details::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fetcher_host_details::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
inline const ::std::string& fetcher_host_details::hostname() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_host_details.hostname)
  return hostname_.GetNoArena();
}
inline void fetcher_host_details::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_host_details.hostname)
}
#if LANG_CXX11
inline void fetcher_host_details::set_hostname(::std::string&& value) {
  set_has_hostname();
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.fetcher_host_details.hostname)
}
#endif
inline void fetcher_host_details::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.fetcher_host_details.hostname)
}
inline void fetcher_host_details::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.fetcher_host_details.hostname)
}
inline ::std::string* fetcher_host_details::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.fetcher_host_details.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fetcher_host_details::release_hostname() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.fetcher_host_details.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fetcher_host_details::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.fetcher_host_details.hostname)
}

// optional uint32 thread_limit = 2;
inline bool fetcher_host_details::has_thread_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fetcher_host_details::set_has_thread_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fetcher_host_details::clear_has_thread_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fetcher_host_details::clear_thread_limit() {
  thread_limit_ = 0u;
  clear_has_thread_limit();
}
inline ::google::protobuf::uint32 fetcher_host_details::thread_limit() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_host_details.thread_limit)
  return thread_limit_;
}
inline void fetcher_host_details::set_thread_limit(::google::protobuf::uint32 value) {
  set_has_thread_limit();
  thread_limit_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_host_details.thread_limit)
}

// optional uint32 crawl_delay = 3;
inline bool fetcher_host_details::has_crawl_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fetcher_host_details::set_has_crawl_delay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fetcher_host_details::clear_has_crawl_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fetcher_host_details::clear_crawl_delay() {
  crawl_delay_ = 0u;
  clear_has_crawl_delay();
}
inline ::google::protobuf::uint32 fetcher_host_details::crawl_delay() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_host_details.crawl_delay)
  return crawl_delay_;
}
inline void fetcher_host_details::set_crawl_delay(::google::protobuf::uint32 value) {
  set_has_crawl_delay();
  crawl_delay_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_host_details.crawl_delay)
}

// optional double avg_response_time = 4;
inline bool fetcher_host_details::has_avg_response_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fetcher_host_details::set_has_avg_response_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fetcher_host_details::clear_has_avg_response_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fetcher_host_details::clear_avg_response_time() {
  avg_response_time_ = 0;
  clear_has_avg_response_time();
}
inline double fetcher_host_details::avg_response_time() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.fetcher_host_details.avg_response_time)
  return avg_response_time_;
}
inline void fetcher_host_details::set_avg_response_time(double value) {
  set_has_avg_response_time();
  avg_response_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.fetcher_host_details.avg_response_time)
}

// -------------------------------------------------------------------

// url_upload_detail

// optional string url = 1;
inline bool url_upload_detail::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void url_upload_detail::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void url_upload_detail::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void url_upload_detail::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& url_upload_detail::url() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.url_upload_detail.url)
  return url_.GetNoArena();
}
inline void url_upload_detail::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.url_upload_detail.url)
}
#if LANG_CXX11
inline void url_upload_detail::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.url_upload_detail.url)
}
#endif
inline void url_upload_detail::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.url_upload_detail.url)
}
inline void url_upload_detail::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.url_upload_detail.url)
}
inline ::std::string* url_upload_detail::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.url_upload_detail.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* url_upload_detail::release_url() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.url_upload_detail.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void url_upload_detail::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.url_upload_detail.url)
}

// optional bool flag_disabled = 2;
inline bool url_upload_detail::has_flag_disabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void url_upload_detail::set_has_flag_disabled() {
  _has_bits_[0] |= 0x00000002u;
}
inline void url_upload_detail::clear_has_flag_disabled() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void url_upload_detail::clear_flag_disabled() {
  flag_disabled_ = false;
  clear_has_flag_disabled();
}
inline bool url_upload_detail::flag_disabled() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.url_upload_detail.flag_disabled)
  return flag_disabled_;
}
inline void url_upload_detail::set_flag_disabled(bool value) {
  set_has_flag_disabled();
  flag_disabled_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.url_upload_detail.flag_disabled)
}

// -------------------------------------------------------------------

// post_document_detail

// required string url = 1;
inline bool post_document_detail::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void post_document_detail::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void post_document_detail::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void post_document_detail::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& post_document_detail::url() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.url)
  return url_.GetNoArena();
}
inline void post_document_detail::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.url)
}
#if LANG_CXX11
inline void post_document_detail::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.post_document_detail.url)
}
#endif
inline void post_document_detail::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.post_document_detail.url)
}
inline void post_document_detail::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.post_document_detail.url)
}
inline ::std::string* post_document_detail::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.post_document_detail.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* post_document_detail::release_url() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.post_document_detail.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void post_document_detail::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.post_document_detail.url)
}

// required string title = 2;
inline bool post_document_detail::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void post_document_detail::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void post_document_detail::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void post_document_detail::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& post_document_detail::title() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.title)
  return title_.GetNoArena();
}
inline void post_document_detail::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.title)
}
#if LANG_CXX11
inline void post_document_detail::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.post_document_detail.title)
}
#endif
inline void post_document_detail::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.post_document_detail.title)
}
inline void post_document_detail::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.post_document_detail.title)
}
inline ::std::string* post_document_detail::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.post_document_detail.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* post_document_detail::release_title() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.post_document_detail.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void post_document_detail::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.post_document_detail.title)
}

// required string text_context = 3;
inline bool post_document_detail::has_text_context() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void post_document_detail::set_has_text_context() {
  _has_bits_[0] |= 0x00000004u;
}
inline void post_document_detail::clear_has_text_context() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void post_document_detail::clear_text_context() {
  text_context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_context();
}
inline const ::std::string& post_document_detail::text_context() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.text_context)
  return text_context_.GetNoArena();
}
inline void post_document_detail::set_text_context(const ::std::string& value) {
  set_has_text_context();
  text_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.text_context)
}
#if LANG_CXX11
inline void post_document_detail::set_text_context(::std::string&& value) {
  set_has_text_context();
  text_context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.post_document_detail.text_context)
}
#endif
inline void post_document_detail::set_text_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text_context();
  text_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.post_document_detail.text_context)
}
inline void post_document_detail::set_text_context(const char* value, size_t size) {
  set_has_text_context();
  text_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.post_document_detail.text_context)
}
inline ::std::string* post_document_detail::mutable_text_context() {
  set_has_text_context();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.post_document_detail.text_context)
  return text_context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* post_document_detail::release_text_context() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.post_document_detail.text_context)
  clear_has_text_context();
  return text_context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void post_document_detail::set_allocated_text_context(::std::string* text_context) {
  if (text_context != NULL) {
    set_has_text_context();
  } else {
    clear_has_text_context();
  }
  text_context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_context);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.post_document_detail.text_context)
}

// optional string user_name = 4;
inline bool post_document_detail::has_user_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void post_document_detail::set_has_user_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void post_document_detail::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void post_document_detail::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
inline const ::std::string& post_document_detail::user_name() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.user_name)
  return user_name_.GetNoArena();
}
inline void post_document_detail::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.user_name)
}
#if LANG_CXX11
inline void post_document_detail::set_user_name(::std::string&& value) {
  set_has_user_name();
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.post_document_detail.user_name)
}
#endif
inline void post_document_detail::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.post_document_detail.user_name)
}
inline void post_document_detail::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.post_document_detail.user_name)
}
inline ::std::string* post_document_detail::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.post_document_detail.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* post_document_detail::release_user_name() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.post_document_detail.user_name)
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void post_document_detail::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.post_document_detail.user_name)
}

// optional string user_url = 5;
inline bool post_document_detail::has_user_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void post_document_detail::set_has_user_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void post_document_detail::clear_has_user_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void post_document_detail::clear_user_url() {
  user_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_url();
}
inline const ::std::string& post_document_detail::user_url() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.user_url)
  return user_url_.GetNoArena();
}
inline void post_document_detail::set_user_url(const ::std::string& value) {
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.user_url)
}
#if LANG_CXX11
inline void post_document_detail::set_user_url(::std::string&& value) {
  set_has_user_url();
  user_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.post_document_detail.user_url)
}
#endif
inline void post_document_detail::set_user_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.post_document_detail.user_url)
}
inline void post_document_detail::set_user_url(const char* value, size_t size) {
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.post_document_detail.user_url)
}
inline ::std::string* post_document_detail::mutable_user_url() {
  set_has_user_url();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.post_document_detail.user_url)
  return user_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* post_document_detail::release_user_url() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.post_document_detail.user_url)
  clear_has_user_url();
  return user_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void post_document_detail::set_allocated_user_url(::std::string* user_url) {
  if (user_url != NULL) {
    set_has_user_url();
  } else {
    clear_has_user_url();
  }
  user_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_url);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.post_document_detail.user_url)
}

// optional string public_name = 6;
inline bool post_document_detail::has_public_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void post_document_detail::set_has_public_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void post_document_detail::clear_has_public_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void post_document_detail::clear_public_name() {
  public_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_name();
}
inline const ::std::string& post_document_detail::public_name() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.public_name)
  return public_name_.GetNoArena();
}
inline void post_document_detail::set_public_name(const ::std::string& value) {
  set_has_public_name();
  public_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.public_name)
}
#if LANG_CXX11
inline void post_document_detail::set_public_name(::std::string&& value) {
  set_has_public_name();
  public_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.post_document_detail.public_name)
}
#endif
inline void post_document_detail::set_public_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_name();
  public_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.post_document_detail.public_name)
}
inline void post_document_detail::set_public_name(const char* value, size_t size) {
  set_has_public_name();
  public_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.post_document_detail.public_name)
}
inline ::std::string* post_document_detail::mutable_public_name() {
  set_has_public_name();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.post_document_detail.public_name)
  return public_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* post_document_detail::release_public_name() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.post_document_detail.public_name)
  clear_has_public_name();
  return public_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void post_document_detail::set_allocated_public_name(::std::string* public_name) {
  if (public_name != NULL) {
    set_has_public_name();
  } else {
    clear_has_public_name();
  }
  public_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_name);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.post_document_detail.public_name)
}

// optional string public_url = 7;
inline bool post_document_detail::has_public_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void post_document_detail::set_has_public_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void post_document_detail::clear_has_public_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void post_document_detail::clear_public_url() {
  public_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_url();
}
inline const ::std::string& post_document_detail::public_url() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.public_url)
  return public_url_.GetNoArena();
}
inline void post_document_detail::set_public_url(const ::std::string& value) {
  set_has_public_url();
  public_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.public_url)
}
#if LANG_CXX11
inline void post_document_detail::set_public_url(::std::string&& value) {
  set_has_public_url();
  public_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.post_document_detail.public_url)
}
#endif
inline void post_document_detail::set_public_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_url();
  public_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.post_document_detail.public_url)
}
inline void post_document_detail::set_public_url(const char* value, size_t size) {
  set_has_public_url();
  public_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.post_document_detail.public_url)
}
inline ::std::string* post_document_detail::mutable_public_url() {
  set_has_public_url();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.post_document_detail.public_url)
  return public_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* post_document_detail::release_public_url() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.post_document_detail.public_url)
  clear_has_public_url();
  return public_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void post_document_detail::set_allocated_public_url(::std::string* public_url) {
  if (public_url != NULL) {
    set_has_public_url();
  } else {
    clear_has_public_url();
  }
  public_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_url);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.post_document_detail.public_url)
}

// required uint64 download_time = 8;
inline bool post_document_detail::has_download_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void post_document_detail::set_has_download_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void post_document_detail::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void post_document_detail::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
inline ::google::protobuf::uint64 post_document_detail::download_time() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.download_time)
  return download_time_;
}
inline void post_document_detail::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.download_time)
}

// repeated .gogo.fetcher.fetcher_image image = 9;
inline int post_document_detail::image_size() const {
  return image_.size();
}
inline void post_document_detail::clear_image() {
  image_.Clear();
}
inline const ::gogo::fetcher::fetcher_image& post_document_detail::image(int index) const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.image)
  return image_.Get(index);
}
inline ::gogo::fetcher::fetcher_image* post_document_detail::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.post_document_detail.image)
  return image_.Mutable(index);
}
inline ::gogo::fetcher::fetcher_image* post_document_detail::add_image() {
  // @@protoc_insertion_point(field_add:gogo.fetcher.post_document_detail.image)
  return image_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >*
post_document_detail::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:gogo.fetcher.post_document_detail.image)
  return &image_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >&
post_document_detail::image() const {
  // @@protoc_insertion_point(field_list:gogo.fetcher.post_document_detail.image)
  return image_;
}

// optional uint64 post_time = 10;
inline bool post_document_detail::has_post_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void post_document_detail::set_has_post_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void post_document_detail::clear_has_post_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void post_document_detail::clear_post_time() {
  post_time_ = GOOGLE_ULONGLONG(0);
  clear_has_post_time();
}
inline ::google::protobuf::uint64 post_document_detail::post_time() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.post_time)
  return post_time_;
}
inline void post_document_detail::set_post_time(::google::protobuf::uint64 value) {
  set_has_post_time();
  post_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.post_time)
}

// optional uint32 views = 11;
inline bool post_document_detail::has_views() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void post_document_detail::set_has_views() {
  _has_bits_[0] |= 0x00000200u;
}
inline void post_document_detail::clear_has_views() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void post_document_detail::clear_views() {
  views_ = 0u;
  clear_has_views();
}
inline ::google::protobuf::uint32 post_document_detail::views() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.views)
  return views_;
}
inline void post_document_detail::set_views(::google::protobuf::uint32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.views)
}

// optional uint32 likes = 12;
inline bool post_document_detail::has_likes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void post_document_detail::set_has_likes() {
  _has_bits_[0] |= 0x00000400u;
}
inline void post_document_detail::clear_has_likes() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void post_document_detail::clear_likes() {
  likes_ = 0u;
  clear_has_likes();
}
inline ::google::protobuf::uint32 post_document_detail::likes() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.likes)
  return likes_;
}
inline void post_document_detail::set_likes(::google::protobuf::uint32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.likes)
}

// optional uint32 share = 13;
inline bool post_document_detail::has_share() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void post_document_detail::set_has_share() {
  _has_bits_[0] |= 0x00000800u;
}
inline void post_document_detail::clear_has_share() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void post_document_detail::clear_share() {
  share_ = 0u;
  clear_has_share();
}
inline ::google::protobuf::uint32 post_document_detail::share() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.share)
  return share_;
}
inline void post_document_detail::set_share(::google::protobuf::uint32 value) {
  set_has_share();
  share_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.share)
}

// optional uint32 spam_level = 14;
inline bool post_document_detail::has_spam_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void post_document_detail::set_has_spam_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void post_document_detail::clear_has_spam_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void post_document_detail::clear_spam_level() {
  spam_level_ = 0u;
  clear_has_spam_level();
}
inline ::google::protobuf::uint32 post_document_detail::spam_level() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.spam_level)
  return spam_level_;
}
inline void post_document_detail::set_spam_level(::google::protobuf::uint32 value) {
  set_has_spam_level();
  spam_level_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.spam_level)
}

// optional uint32 porno_level = 15;
inline bool post_document_detail::has_porno_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void post_document_detail::set_has_porno_level() {
  _has_bits_[0] |= 0x00002000u;
}
inline void post_document_detail::clear_has_porno_level() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void post_document_detail::clear_porno_level() {
  porno_level_ = 0u;
  clear_has_porno_level();
}
inline ::google::protobuf::uint32 post_document_detail::porno_level() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.porno_level)
  return porno_level_;
}
inline void post_document_detail::set_porno_level(::google::protobuf::uint32 value) {
  set_has_porno_level();
  porno_level_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.porno_level)
}

// optional .gogo.fetcher.post_document_detail.type_t type = 16;
inline bool post_document_detail::has_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void post_document_detail::set_has_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void post_document_detail::clear_has_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void post_document_detail::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::gogo::fetcher::post_document_detail_type_t post_document_detail::type() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.type)
  return static_cast< ::gogo::fetcher::post_document_detail_type_t >(type_);
}
inline void post_document_detail::set_type(::gogo::fetcher::post_document_detail_type_t value) {
  assert(::gogo::fetcher::post_document_detail_type_t_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.type)
}

// optional .gogo.fetcher.post_document_detail.source_t source = 17;
inline bool post_document_detail::has_source() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void post_document_detail::set_has_source() {
  _has_bits_[0] |= 0x00008000u;
}
inline void post_document_detail::clear_has_source() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void post_document_detail::clear_source() {
  source_ = 1;
  clear_has_source();
}
inline ::gogo::fetcher::post_document_detail_source_t post_document_detail::source() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.post_document_detail.source)
  return static_cast< ::gogo::fetcher::post_document_detail_source_t >(source_);
}
inline void post_document_detail::set_source(::gogo::fetcher::post_document_detail_source_t value) {
  assert(::gogo::fetcher::post_document_detail_source_t_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.post_document_detail.source)
}

// -------------------------------------------------------------------

// insta_profile_extra

// required string name = 1;
inline bool insta_profile_extra::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void insta_profile_extra::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void insta_profile_extra::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void insta_profile_extra::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& insta_profile_extra::name() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.name)
  return name_.GetNoArena();
}
inline void insta_profile_extra::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.insta_profile_extra.name)
}
#if LANG_CXX11
inline void insta_profile_extra::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.insta_profile_extra.name)
}
#endif
inline void insta_profile_extra::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.insta_profile_extra.name)
}
inline void insta_profile_extra::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.insta_profile_extra.name)
}
inline ::std::string* insta_profile_extra::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.insta_profile_extra.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* insta_profile_extra::release_name() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.insta_profile_extra.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void insta_profile_extra::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.insta_profile_extra.name)
}

// required string login = 2;
inline bool insta_profile_extra::has_login() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void insta_profile_extra::set_has_login() {
  _has_bits_[0] |= 0x00000002u;
}
inline void insta_profile_extra::clear_has_login() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void insta_profile_extra::clear_login() {
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_login();
}
inline const ::std::string& insta_profile_extra::login() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.login)
  return login_.GetNoArena();
}
inline void insta_profile_extra::set_login(const ::std::string& value) {
  set_has_login();
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.insta_profile_extra.login)
}
#if LANG_CXX11
inline void insta_profile_extra::set_login(::std::string&& value) {
  set_has_login();
  login_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.insta_profile_extra.login)
}
#endif
inline void insta_profile_extra::set_login(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_login();
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.insta_profile_extra.login)
}
inline void insta_profile_extra::set_login(const char* value, size_t size) {
  set_has_login();
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.insta_profile_extra.login)
}
inline ::std::string* insta_profile_extra::mutable_login() {
  set_has_login();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.insta_profile_extra.login)
  return login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* insta_profile_extra::release_login() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.insta_profile_extra.login)
  clear_has_login();
  return login_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void insta_profile_extra::set_allocated_login(::std::string* login) {
  if (login != NULL) {
    set_has_login();
  } else {
    clear_has_login();
  }
  login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.insta_profile_extra.login)
}

// required uint64 posts = 3;
inline bool insta_profile_extra::has_posts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void insta_profile_extra::set_has_posts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void insta_profile_extra::clear_has_posts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void insta_profile_extra::clear_posts() {
  posts_ = GOOGLE_ULONGLONG(0);
  clear_has_posts();
}
inline ::google::protobuf::uint64 insta_profile_extra::posts() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.posts)
  return posts_;
}
inline void insta_profile_extra::set_posts(::google::protobuf::uint64 value) {
  set_has_posts();
  posts_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.insta_profile_extra.posts)
}

// required uint64 followers = 4;
inline bool insta_profile_extra::has_followers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void insta_profile_extra::set_has_followers() {
  _has_bits_[0] |= 0x00000010u;
}
inline void insta_profile_extra::clear_has_followers() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void insta_profile_extra::clear_followers() {
  followers_ = GOOGLE_ULONGLONG(0);
  clear_has_followers();
}
inline ::google::protobuf::uint64 insta_profile_extra::followers() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.followers)
  return followers_;
}
inline void insta_profile_extra::set_followers(::google::protobuf::uint64 value) {
  set_has_followers();
  followers_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.insta_profile_extra.followers)
}

// required uint64 following = 5;
inline bool insta_profile_extra::has_following() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void insta_profile_extra::set_has_following() {
  _has_bits_[0] |= 0x00000020u;
}
inline void insta_profile_extra::clear_has_following() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void insta_profile_extra::clear_following() {
  following_ = GOOGLE_ULONGLONG(0);
  clear_has_following();
}
inline ::google::protobuf::uint64 insta_profile_extra::following() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.following)
  return following_;
}
inline void insta_profile_extra::set_following(::google::protobuf::uint64 value) {
  set_has_following();
  following_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.insta_profile_extra.following)
}

// required bool official = 6;
inline bool insta_profile_extra::has_official() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void insta_profile_extra::set_has_official() {
  _has_bits_[0] |= 0x00000080u;
}
inline void insta_profile_extra::clear_has_official() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void insta_profile_extra::clear_official() {
  official_ = false;
  clear_has_official();
}
inline bool insta_profile_extra::official() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.official)
  return official_;
}
inline void insta_profile_extra::set_official(bool value) {
  set_has_official();
  official_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.insta_profile_extra.official)
}

// required uint64 download_time = 7;
inline bool insta_profile_extra::has_download_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void insta_profile_extra::set_has_download_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void insta_profile_extra::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void insta_profile_extra::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
inline ::google::protobuf::uint64 insta_profile_extra::download_time() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.download_time)
  return download_time_;
}
inline void insta_profile_extra::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.insta_profile_extra.download_time)
}

// optional .gogo.fetcher.fetcher_image avatar = 8;
inline bool insta_profile_extra::has_avatar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void insta_profile_extra::set_has_avatar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void insta_profile_extra::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void insta_profile_extra::clear_avatar() {
  if (avatar_ != NULL) avatar_->::gogo::fetcher::fetcher_image::Clear();
  clear_has_avatar();
}
inline const ::gogo::fetcher::fetcher_image& insta_profile_extra::avatar() const {
  const ::gogo::fetcher::fetcher_image* p = avatar_;
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.avatar)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::fetcher::fetcher_image*>(
      &::gogo::fetcher::_fetcher_image_default_instance_);
}
inline ::gogo::fetcher::fetcher_image* insta_profile_extra::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == NULL) {
    avatar_ = new ::gogo::fetcher::fetcher_image;
  }
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.insta_profile_extra.avatar)
  return avatar_;
}
inline ::gogo::fetcher::fetcher_image* insta_profile_extra::release_avatar() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.insta_profile_extra.avatar)
  clear_has_avatar();
  ::gogo::fetcher::fetcher_image* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
inline void insta_profile_extra::set_allocated_avatar(::gogo::fetcher::fetcher_image* avatar) {
  delete avatar_;
  avatar_ = avatar;
  if (avatar) {
    set_has_avatar();
  } else {
    clear_has_avatar();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.insta_profile_extra.avatar)
}

// repeated .gogo.fetcher.fetcher_image last = 9;
inline int insta_profile_extra::last_size() const {
  return last_.size();
}
inline void insta_profile_extra::clear_last() {
  last_.Clear();
}
inline const ::gogo::fetcher::fetcher_image& insta_profile_extra::last(int index) const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.insta_profile_extra.last)
  return last_.Get(index);
}
inline ::gogo::fetcher::fetcher_image* insta_profile_extra::mutable_last(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.insta_profile_extra.last)
  return last_.Mutable(index);
}
inline ::gogo::fetcher::fetcher_image* insta_profile_extra::add_last() {
  // @@protoc_insertion_point(field_add:gogo.fetcher.insta_profile_extra.last)
  return last_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >*
insta_profile_extra::mutable_last() {
  // @@protoc_insertion_point(field_mutable_list:gogo.fetcher.insta_profile_extra.last)
  return &last_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >&
insta_profile_extra::last() const {
  // @@protoc_insertion_point(field_list:gogo.fetcher.insta_profile_extra.last)
  return last_;
}

// -------------------------------------------------------------------

// vk_snippet_data

// required string bahroma_json = 1;
inline bool vk_snippet_data::has_bahroma_json() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vk_snippet_data::set_has_bahroma_json() {
  _has_bits_[0] |= 0x00000001u;
}
inline void vk_snippet_data::clear_has_bahroma_json() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void vk_snippet_data::clear_bahroma_json() {
  bahroma_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bahroma_json();
}
inline const ::std::string& vk_snippet_data::bahroma_json() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.vk_snippet_data.bahroma_json)
  return bahroma_json_.GetNoArena();
}
inline void vk_snippet_data::set_bahroma_json(const ::std::string& value) {
  set_has_bahroma_json();
  bahroma_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.vk_snippet_data.bahroma_json)
}
#if LANG_CXX11
inline void vk_snippet_data::set_bahroma_json(::std::string&& value) {
  set_has_bahroma_json();
  bahroma_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.vk_snippet_data.bahroma_json)
}
#endif
inline void vk_snippet_data::set_bahroma_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bahroma_json();
  bahroma_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.vk_snippet_data.bahroma_json)
}
inline void vk_snippet_data::set_bahroma_json(const char* value, size_t size) {
  set_has_bahroma_json();
  bahroma_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.vk_snippet_data.bahroma_json)
}
inline ::std::string* vk_snippet_data::mutable_bahroma_json() {
  set_has_bahroma_json();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.vk_snippet_data.bahroma_json)
  return bahroma_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* vk_snippet_data::release_bahroma_json() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.vk_snippet_data.bahroma_json)
  clear_has_bahroma_json();
  return bahroma_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void vk_snippet_data::set_allocated_bahroma_json(::std::string* bahroma_json) {
  if (bahroma_json != NULL) {
    set_has_bahroma_json();
  } else {
    clear_has_bahroma_json();
  }
  bahroma_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bahroma_json);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.vk_snippet_data.bahroma_json)
}

// repeated .gogo.fetcher.fetcher_image phalanx_images = 2;
inline int vk_snippet_data::phalanx_images_size() const {
  return phalanx_images_.size();
}
inline void vk_snippet_data::clear_phalanx_images() {
  phalanx_images_.Clear();
}
inline const ::gogo::fetcher::fetcher_image& vk_snippet_data::phalanx_images(int index) const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.vk_snippet_data.phalanx_images)
  return phalanx_images_.Get(index);
}
inline ::gogo::fetcher::fetcher_image* vk_snippet_data::mutable_phalanx_images(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.vk_snippet_data.phalanx_images)
  return phalanx_images_.Mutable(index);
}
inline ::gogo::fetcher::fetcher_image* vk_snippet_data::add_phalanx_images() {
  // @@protoc_insertion_point(field_add:gogo.fetcher.vk_snippet_data.phalanx_images)
  return phalanx_images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >*
vk_snippet_data::mutable_phalanx_images() {
  // @@protoc_insertion_point(field_mutable_list:gogo.fetcher.vk_snippet_data.phalanx_images)
  return &phalanx_images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >&
vk_snippet_data::phalanx_images() const {
  // @@protoc_insertion_point(field_list:gogo.fetcher.vk_snippet_data.phalanx_images)
  return phalanx_images_;
}

// -------------------------------------------------------------------

// image_discovery

// required string url = 1;
inline bool image_discovery::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void image_discovery::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void image_discovery::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void image_discovery::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& image_discovery::url() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.url)
  return url_.GetNoArena();
}
inline void image_discovery::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.url)
}
#if LANG_CXX11
inline void image_discovery::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.image_discovery.url)
}
#endif
inline void image_discovery::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.image_discovery.url)
}
inline void image_discovery::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.image_discovery.url)
}
inline ::std::string* image_discovery::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.image_discovery.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* image_discovery::release_url() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.image_discovery.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void image_discovery::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.image_discovery.url)
}

// required uint32 http_status = 2;
inline bool image_discovery::has_http_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void image_discovery::set_has_http_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void image_discovery::clear_has_http_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void image_discovery::clear_http_status() {
  http_status_ = 0u;
  clear_has_http_status();
}
inline ::google::protobuf::uint32 image_discovery::http_status() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.http_status)
  return http_status_;
}
inline void image_discovery::set_http_status(::google::protobuf::uint32 value) {
  set_has_http_status();
  http_status_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.http_status)
}

// optional string headers = 3;
inline bool image_discovery::has_headers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void image_discovery::set_has_headers() {
  _has_bits_[0] |= 0x00000002u;
}
inline void image_discovery::clear_has_headers() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void image_discovery::clear_headers() {
  headers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headers();
}
inline const ::std::string& image_discovery::headers() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.headers)
  return headers_.GetNoArena();
}
inline void image_discovery::set_headers(const ::std::string& value) {
  set_has_headers();
  headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.headers)
}
#if LANG_CXX11
inline void image_discovery::set_headers(::std::string&& value) {
  set_has_headers();
  headers_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.image_discovery.headers)
}
#endif
inline void image_discovery::set_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headers();
  headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.image_discovery.headers)
}
inline void image_discovery::set_headers(const char* value, size_t size) {
  set_has_headers();
  headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.image_discovery.headers)
}
inline ::std::string* image_discovery::mutable_headers() {
  set_has_headers();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.image_discovery.headers)
  return headers_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* image_discovery::release_headers() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.image_discovery.headers)
  clear_has_headers();
  return headers_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void image_discovery::set_allocated_headers(::std::string* headers) {
  if (headers != NULL) {
    set_has_headers();
  } else {
    clear_has_headers();
  }
  headers_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headers);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.image_discovery.headers)
}

// optional bytes content = 4;
inline bool image_discovery::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void image_discovery::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void image_discovery::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void image_discovery::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& image_discovery::content() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.content)
  return content_.GetNoArena();
}
inline void image_discovery::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.content)
}
#if LANG_CXX11
inline void image_discovery::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.image_discovery.content)
}
#endif
inline void image_discovery::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.image_discovery.content)
}
inline void image_discovery::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.image_discovery.content)
}
inline ::std::string* image_discovery::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.image_discovery.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* image_discovery::release_content() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.image_discovery.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void image_discovery::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.image_discovery.content)
}

// optional uint32 width = 5;
inline bool image_discovery::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void image_discovery::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void image_discovery::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void image_discovery::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 image_discovery::width() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.width)
  return width_;
}
inline void image_discovery::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.width)
}

// optional uint32 height = 6;
inline bool image_discovery::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void image_discovery::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void image_discovery::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void image_discovery::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 image_discovery::height() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.height)
  return height_;
}
inline void image_discovery::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.height)
}

// optional int32 left = 7;
inline bool image_discovery::has_left() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void image_discovery::set_has_left() {
  _has_bits_[0] |= 0x00000100u;
}
inline void image_discovery::clear_has_left() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void image_discovery::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline ::google::protobuf::int32 image_discovery::left() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.left)
  return left_;
}
inline void image_discovery::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.left)
}

// optional int32 top = 8;
inline bool image_discovery::has_top() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void image_discovery::set_has_top() {
  _has_bits_[0] |= 0x00000200u;
}
inline void image_discovery::clear_has_top() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void image_discovery::clear_top() {
  top_ = 0;
  clear_has_top();
}
inline ::google::protobuf::int32 image_discovery::top() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.top)
  return top_;
}
inline void image_discovery::set_top(::google::protobuf::int32 value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.top)
}

// optional int32 zindex = 9;
inline bool image_discovery::has_zindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void image_discovery::set_has_zindex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void image_discovery::clear_has_zindex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void image_discovery::clear_zindex() {
  zindex_ = 0;
  clear_has_zindex();
}
inline ::google::protobuf::int32 image_discovery::zindex() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.zindex)
  return zindex_;
}
inline void image_discovery::set_zindex(::google::protobuf::int32 value) {
  set_has_zindex();
  zindex_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.zindex)
}

// optional string href = 10;
inline bool image_discovery::has_href() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void image_discovery::set_has_href() {
  _has_bits_[0] |= 0x00000008u;
}
inline void image_discovery::clear_has_href() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void image_discovery::clear_href() {
  href_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_href();
}
inline const ::std::string& image_discovery::href() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.href)
  return href_.GetNoArena();
}
inline void image_discovery::set_href(const ::std::string& value) {
  set_has_href();
  href_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.href)
}
#if LANG_CXX11
inline void image_discovery::set_href(::std::string&& value) {
  set_has_href();
  href_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.image_discovery.href)
}
#endif
inline void image_discovery::set_href(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_href();
  href_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.image_discovery.href)
}
inline void image_discovery::set_href(const char* value, size_t size) {
  set_has_href();
  href_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.image_discovery.href)
}
inline ::std::string* image_discovery::mutable_href() {
  set_has_href();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.image_discovery.href)
  return href_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* image_discovery::release_href() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.image_discovery.href)
  clear_has_href();
  return href_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void image_discovery::set_allocated_href(::std::string* href) {
  if (href != NULL) {
    set_has_href();
  } else {
    clear_has_href();
  }
  href_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), href);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.image_discovery.href)
}

// optional string meta = 11;
inline bool image_discovery::has_meta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void image_discovery::set_has_meta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void image_discovery::clear_has_meta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void image_discovery::clear_meta() {
  meta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meta();
}
inline const ::std::string& image_discovery::meta() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.image_discovery.meta)
  return meta_.GetNoArena();
}
inline void image_discovery::set_meta(const ::std::string& value) {
  set_has_meta();
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.image_discovery.meta)
}
#if LANG_CXX11
inline void image_discovery::set_meta(::std::string&& value) {
  set_has_meta();
  meta_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.image_discovery.meta)
}
#endif
inline void image_discovery::set_meta(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_meta();
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.image_discovery.meta)
}
inline void image_discovery::set_meta(const char* value, size_t size) {
  set_has_meta();
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.image_discovery.meta)
}
inline ::std::string* image_discovery::mutable_meta() {
  set_has_meta();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.image_discovery.meta)
  return meta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* image_discovery::release_meta() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.image_discovery.meta)
  clear_has_meta();
  return meta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void image_discovery::set_allocated_meta(::std::string* meta) {
  if (meta != NULL) {
    set_has_meta();
  } else {
    clear_has_meta();
  }
  meta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meta);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.image_discovery.meta)
}

// -------------------------------------------------------------------

// images_discovery

// required string url = 1;
inline bool images_discovery::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void images_discovery::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void images_discovery::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void images_discovery::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& images_discovery::url() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.images_discovery.url)
  return url_.GetNoArena();
}
inline void images_discovery::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.images_discovery.url)
}
#if LANG_CXX11
inline void images_discovery::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.images_discovery.url)
}
#endif
inline void images_discovery::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.images_discovery.url)
}
inline void images_discovery::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.images_discovery.url)
}
inline ::std::string* images_discovery::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.images_discovery.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* images_discovery::release_url() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.images_discovery.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void images_discovery::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.images_discovery.url)
}

// required uint64 download_time = 2;
inline bool images_discovery::has_download_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void images_discovery::set_has_download_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void images_discovery::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void images_discovery::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
inline ::google::protobuf::uint64 images_discovery::download_time() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.images_discovery.download_time)
  return download_time_;
}
inline void images_discovery::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.fetcher.images_discovery.download_time)
}

// repeated .gogo.fetcher.image_discovery images = 3;
inline int images_discovery::images_size() const {
  return images_.size();
}
inline void images_discovery::clear_images() {
  images_.Clear();
}
inline const ::gogo::fetcher::image_discovery& images_discovery::images(int index) const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.images_discovery.images)
  return images_.Get(index);
}
inline ::gogo::fetcher::image_discovery* images_discovery::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.images_discovery.images)
  return images_.Mutable(index);
}
inline ::gogo::fetcher::image_discovery* images_discovery::add_images() {
  // @@protoc_insertion_point(field_add:gogo.fetcher.images_discovery.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::image_discovery >*
images_discovery::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:gogo.fetcher.images_discovery.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::image_discovery >&
images_discovery::images() const {
  // @@protoc_insertion_point(field_list:gogo.fetcher.images_discovery.images)
  return images_;
}

// optional string html = 4;
inline bool images_discovery::has_html() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void images_discovery::set_has_html() {
  _has_bits_[0] |= 0x00000002u;
}
inline void images_discovery::clear_has_html() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void images_discovery::clear_html() {
  html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_html();
}
inline const ::std::string& images_discovery::html() const {
  // @@protoc_insertion_point(field_get:gogo.fetcher.images_discovery.html)
  return html_.GetNoArena();
}
inline void images_discovery::set_html(const ::std::string& value) {
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.fetcher.images_discovery.html)
}
#if LANG_CXX11
inline void images_discovery::set_html(::std::string&& value) {
  set_has_html();
  html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.fetcher.images_discovery.html)
}
#endif
inline void images_discovery::set_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.fetcher.images_discovery.html)
}
inline void images_discovery::set_html(const char* value, size_t size) {
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.fetcher.images_discovery.html)
}
inline ::std::string* images_discovery::mutable_html() {
  set_has_html();
  // @@protoc_insertion_point(field_mutable:gogo.fetcher.images_discovery.html)
  return html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* images_discovery::release_html() {
  // @@protoc_insertion_point(field_release:gogo.fetcher.images_discovery.html)
  clear_has_html();
  return html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void images_discovery::set_allocated_html(::std::string* html) {
  if (html != NULL) {
    set_has_html();
  } else {
    clear_has_html();
  }
  html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html);
  // @@protoc_insertion_point(field_set_allocated:gogo.fetcher.images_discovery.html)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace fetcher
}  // namespace gogo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gogo::fetcher::fetcher_image_type_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gogo::fetcher::fetcher_image_type_t>() {
  return ::gogo::fetcher::fetcher_image_type_t_descriptor();
}
template <> struct is_proto_enum< ::gogo::fetcher::fetcher_document_detail_flag_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gogo::fetcher::fetcher_document_detail_flag_t>() {
  return ::gogo::fetcher::fetcher_document_detail_flag_t_descriptor();
}
template <> struct is_proto_enum< ::gogo::fetcher::fetcher_document_detail_error_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gogo::fetcher::fetcher_document_detail_error_t>() {
  return ::gogo::fetcher::fetcher_document_detail_error_t_descriptor();
}
template <> struct is_proto_enum< ::gogo::fetcher::fetcher_document_detail_redirect_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gogo::fetcher::fetcher_document_detail_redirect_t>() {
  return ::gogo::fetcher::fetcher_document_detail_redirect_t_descriptor();
}
template <> struct is_proto_enum< ::gogo::fetcher::post_document_detail_type_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gogo::fetcher::post_document_detail_type_t>() {
  return ::gogo::fetcher::post_document_detail_type_t_descriptor();
}
template <> struct is_proto_enum< ::gogo::fetcher::post_document_detail_source_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gogo::fetcher::post_document_detail_source_t>() {
  return ::gogo::fetcher::post_document_detail_source_t_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fetcher_5fstorage_2eproto__INCLUDED
