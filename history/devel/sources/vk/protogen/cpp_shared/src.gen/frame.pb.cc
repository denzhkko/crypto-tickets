// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "frame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace frame {
namespace proto {
class VersionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VersionInfo>
     _instance;
} _VersionInfo_default_instance_;
class HeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Header>
     _instance;
} _Header_default_instance_;

namespace protobuf_frame_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, component_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, build_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, version_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, payload_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, elapsed_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, keepalive_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, compression_codec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, version_info_),
  1,
  2,
  3,
  4,
  5,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(VersionInfo)},
  { 11, 22, sizeof(Header)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VersionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Header_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "frame.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _VersionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VersionInfo_default_instance_);_Header_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Header_default_instance_);_Header_default_instance_._instance.get_mutable()->version_info_ = const_cast< ::frame::proto::VersionInfo*>(
      ::frame::proto::VersionInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013frame.proto\022\013frame.proto\"B\n\013VersionInf"
      "o\022\021\n\tcomponent\030\001 \002(\t\022\r\n\005build\030\002 \002(\t\022\021\n\007v"
      "ersion\030\003 \001(\t:\000\"\251\001\n\006Header\022\026\n\016payload_len"
      "gth\030\001 \002(\r\022\013\n\003seq\030\002 \002(\r\022\024\n\014elapsed_time\030\003"
      " \001(\001\022\031\n\021keepalive_timeout\030\004 \001(\r\022\031\n\021compr"
      "ession_codec\030\005 \001(\005\022.\n\014version_info\030\020 \001(\013"
      "2\030.frame.proto.VersionInfo"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 266);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "frame.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_frame_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VersionInfo::kComponentFieldNumber;
const int VersionInfo::kBuildFieldNumber;
const int VersionInfo::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VersionInfo::VersionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_frame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:frame.proto.VersionInfo)
}
VersionInfo::VersionInfo(const VersionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  component_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_component()) {
    component_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.component_);
  }
  build_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_build()) {
    build_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:frame.proto.VersionInfo)
}

void VersionInfo::SharedCtor() {
  _cached_size_ = 0;
  component_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VersionInfo::~VersionInfo() {
  // @@protoc_insertion_point(destructor:frame.proto.VersionInfo)
  SharedDtor();
}

void VersionInfo::SharedDtor() {
  component_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VersionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionInfo::descriptor() {
  protobuf_frame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_frame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VersionInfo& VersionInfo::default_instance() {
  protobuf_frame_2eproto::InitDefaults();
  return *internal_default_instance();
}

VersionInfo* VersionInfo::New(::google::protobuf::Arena* arena) const {
  VersionInfo* n = new VersionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VersionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.proto.VersionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!component_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*component_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!build_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*build_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VersionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frame.proto.VersionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string component = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_component()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->component().data(), static_cast<int>(this->component().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frame.proto.VersionInfo.component");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string build = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->build().data(), static_cast<int>(this->build().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frame.proto.VersionInfo.build");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 3 [default = ""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frame.proto.VersionInfo.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frame.proto.VersionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frame.proto.VersionInfo)
  return false;
#undef DO_
}

void VersionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frame.proto.VersionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string component = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->component().data(), static_cast<int>(this->component().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frame.proto.VersionInfo.component");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->component(), output);
  }

  // required string build = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->build().data(), static_cast<int>(this->build().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frame.proto.VersionInfo.build");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->build(), output);
  }

  // optional string version = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frame.proto.VersionInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frame.proto.VersionInfo)
}

::google::protobuf::uint8* VersionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frame.proto.VersionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string component = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->component().data(), static_cast<int>(this->component().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frame.proto.VersionInfo.component");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->component(), target);
  }

  // required string build = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->build().data(), static_cast<int>(this->build().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frame.proto.VersionInfo.build");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->build(), target);
  }

  // optional string version = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frame.proto.VersionInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.proto.VersionInfo)
  return target;
}

size_t VersionInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:frame.proto.VersionInfo)
  size_t total_size = 0;

  if (has_component()) {
    // required string component = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->component());
  }

  if (has_build()) {
    // required string build = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->build());
  }

  return total_size;
}
size_t VersionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.proto.VersionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string component = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->component());

    // required string build = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->build());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string version = 3 [default = ""];
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.proto.VersionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VersionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.proto.VersionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.proto.VersionInfo)
    MergeFrom(*source);
  }
}

void VersionInfo::MergeFrom(const VersionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.proto.VersionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_component();
      component_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.component_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_build();
      build_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
  }
}

void VersionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.proto.VersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionInfo::CopyFrom(const VersionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.proto.VersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void VersionInfo::Swap(VersionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VersionInfo::InternalSwap(VersionInfo* other) {
  using std::swap;
  component_.Swap(&other->component_);
  build_.Swap(&other->build_);
  version_.Swap(&other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VersionInfo::GetMetadata() const {
  protobuf_frame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_frame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VersionInfo

// required string component = 1;
bool VersionInfo::has_component() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VersionInfo::set_has_component() {
  _has_bits_[0] |= 0x00000001u;
}
void VersionInfo::clear_has_component() {
  _has_bits_[0] &= ~0x00000001u;
}
void VersionInfo::clear_component() {
  component_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_component();
}
const ::std::string& VersionInfo::component() const {
  // @@protoc_insertion_point(field_get:frame.proto.VersionInfo.component)
  return component_.GetNoArena();
}
void VersionInfo::set_component(const ::std::string& value) {
  set_has_component();
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frame.proto.VersionInfo.component)
}
#if LANG_CXX11
void VersionInfo::set_component(::std::string&& value) {
  set_has_component();
  component_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frame.proto.VersionInfo.component)
}
#endif
void VersionInfo::set_component(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_component();
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frame.proto.VersionInfo.component)
}
void VersionInfo::set_component(const char* value, size_t size) {
  set_has_component();
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frame.proto.VersionInfo.component)
}
::std::string* VersionInfo::mutable_component() {
  set_has_component();
  // @@protoc_insertion_point(field_mutable:frame.proto.VersionInfo.component)
  return component_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VersionInfo::release_component() {
  // @@protoc_insertion_point(field_release:frame.proto.VersionInfo.component)
  clear_has_component();
  return component_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VersionInfo::set_allocated_component(::std::string* component) {
  if (component != NULL) {
    set_has_component();
  } else {
    clear_has_component();
  }
  component_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), component);
  // @@protoc_insertion_point(field_set_allocated:frame.proto.VersionInfo.component)
}

// required string build = 2;
bool VersionInfo::has_build() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VersionInfo::set_has_build() {
  _has_bits_[0] |= 0x00000002u;
}
void VersionInfo::clear_has_build() {
  _has_bits_[0] &= ~0x00000002u;
}
void VersionInfo::clear_build() {
  build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_build();
}
const ::std::string& VersionInfo::build() const {
  // @@protoc_insertion_point(field_get:frame.proto.VersionInfo.build)
  return build_.GetNoArena();
}
void VersionInfo::set_build(const ::std::string& value) {
  set_has_build();
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frame.proto.VersionInfo.build)
}
#if LANG_CXX11
void VersionInfo::set_build(::std::string&& value) {
  set_has_build();
  build_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frame.proto.VersionInfo.build)
}
#endif
void VersionInfo::set_build(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_build();
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frame.proto.VersionInfo.build)
}
void VersionInfo::set_build(const char* value, size_t size) {
  set_has_build();
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frame.proto.VersionInfo.build)
}
::std::string* VersionInfo::mutable_build() {
  set_has_build();
  // @@protoc_insertion_point(field_mutable:frame.proto.VersionInfo.build)
  return build_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VersionInfo::release_build() {
  // @@protoc_insertion_point(field_release:frame.proto.VersionInfo.build)
  clear_has_build();
  return build_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VersionInfo::set_allocated_build(::std::string* build) {
  if (build != NULL) {
    set_has_build();
  } else {
    clear_has_build();
  }
  build_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build);
  // @@protoc_insertion_point(field_set_allocated:frame.proto.VersionInfo.build)
}

// optional string version = 3 [default = ""];
bool VersionInfo::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VersionInfo::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
void VersionInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void VersionInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
const ::std::string& VersionInfo::version() const {
  // @@protoc_insertion_point(field_get:frame.proto.VersionInfo.version)
  return version_.GetNoArena();
}
void VersionInfo::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frame.proto.VersionInfo.version)
}
#if LANG_CXX11
void VersionInfo::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frame.proto.VersionInfo.version)
}
#endif
void VersionInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frame.proto.VersionInfo.version)
}
void VersionInfo::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frame.proto.VersionInfo.version)
}
::std::string* VersionInfo::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:frame.proto.VersionInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VersionInfo::release_version() {
  // @@protoc_insertion_point(field_release:frame.proto.VersionInfo.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VersionInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:frame.proto.VersionInfo.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kPayloadLengthFieldNumber;
const int Header::kSeqFieldNumber;
const int Header::kElapsedTimeFieldNumber;
const int Header::kKeepaliveTimeoutFieldNumber;
const int Header::kCompressionCodecFieldNumber;
const int Header::kVersionInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_frame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:frame.proto.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_version_info()) {
    version_info_ = new ::frame::proto::VersionInfo(*from.version_info_);
  } else {
    version_info_ = NULL;
  }
  ::memcpy(&payload_length_, &from.payload_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&compression_codec_) -
    reinterpret_cast<char*>(&payload_length_)) + sizeof(compression_codec_));
  // @@protoc_insertion_point(copy_constructor:frame.proto.Header)
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compression_codec_) -
      reinterpret_cast<char*>(&version_info_)) + sizeof(compression_codec_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:frame.proto.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  if (this != internal_default_instance()) delete version_info_;
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_frame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_frame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  protobuf_frame_2eproto::InitDefaults();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_version_info()) {
    GOOGLE_DCHECK(version_info_ != NULL);
    version_info_->::frame::proto::VersionInfo::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 62u) {
    ::memset(&payload_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compression_codec_) -
        reinterpret_cast<char*>(&payload_length_)) + sizeof(compression_codec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frame.proto.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 payload_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_payload_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double elapsed_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_elapsed_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elapsed_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 keepalive_timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_keepalive_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keepalive_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 compression_codec = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_compression_codec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compression_codec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frame.proto.VersionInfo version_info = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frame.proto.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frame.proto.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frame.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 payload_length = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->payload_length(), output);
  }

  // required uint32 seq = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seq(), output);
  }

  // optional double elapsed_time = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->elapsed_time(), output);
  }

  // optional uint32 keepalive_timeout = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->keepalive_timeout(), output);
  }

  // optional int32 compression_codec = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->compression_codec(), output);
  }

  // optional .frame.proto.VersionInfo version_info = 16;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->version_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frame.proto.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frame.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 payload_length = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->payload_length(), target);
  }

  // required uint32 seq = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seq(), target);
  }

  // optional double elapsed_time = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->elapsed_time(), target);
  }

  // optional uint32 keepalive_timeout = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->keepalive_timeout(), target);
  }

  // optional int32 compression_codec = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->compression_codec(), target);
  }

  // optional .frame.proto.VersionInfo version_info = 16;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->version_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.proto.Header)
  return target;
}

size_t Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:frame.proto.Header)
  size_t total_size = 0;

  if (has_payload_length()) {
    // required uint32 payload_length = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->payload_length());
  }

  if (has_seq()) {
    // required uint32 seq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());
  }

  return total_size;
}
size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.proto.Header)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 payload_length = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->payload_length());

    // required uint32 seq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .frame.proto.VersionInfo version_info = 16;
  if (has_version_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->version_info_);
  }

  if (_has_bits_[0 / 32] & 56u) {
    // optional double elapsed_time = 3;
    if (has_elapsed_time()) {
      total_size += 1 + 8;
    }

    // optional uint32 keepalive_timeout = 4;
    if (has_keepalive_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keepalive_timeout());
    }

    // optional int32 compression_codec = 5;
    if (has_compression_codec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compression_codec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.proto.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.proto.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.proto.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.proto.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_version_info()->::frame::proto::VersionInfo::MergeFrom(from.version_info());
    }
    if (cached_has_bits & 0x00000002u) {
      payload_length_ = from.payload_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      seq_ = from.seq_;
    }
    if (cached_has_bits & 0x00000008u) {
      elapsed_time_ = from.elapsed_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      keepalive_timeout_ = from.keepalive_timeout_;
    }
    if (cached_has_bits & 0x00000020u) {
      compression_codec_ = from.compression_codec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.proto.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.proto.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_version_info()) {
    if (!this->version_info_->IsInitialized()) return false;
  }
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  swap(version_info_, other->version_info_);
  swap(payload_length_, other->payload_length_);
  swap(seq_, other->seq_);
  swap(elapsed_time_, other->elapsed_time_);
  swap(keepalive_timeout_, other->keepalive_timeout_);
  swap(compression_codec_, other->compression_codec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_frame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_frame_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// required uint32 payload_length = 1;
bool Header::has_payload_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Header::set_has_payload_length() {
  _has_bits_[0] |= 0x00000002u;
}
void Header::clear_has_payload_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void Header::clear_payload_length() {
  payload_length_ = 0u;
  clear_has_payload_length();
}
::google::protobuf::uint32 Header::payload_length() const {
  // @@protoc_insertion_point(field_get:frame.proto.Header.payload_length)
  return payload_length_;
}
void Header::set_payload_length(::google::protobuf::uint32 value) {
  set_has_payload_length();
  payload_length_ = value;
  // @@protoc_insertion_point(field_set:frame.proto.Header.payload_length)
}

// required uint32 seq = 2;
bool Header::has_seq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Header::set_has_seq() {
  _has_bits_[0] |= 0x00000004u;
}
void Header::clear_has_seq() {
  _has_bits_[0] &= ~0x00000004u;
}
void Header::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
::google::protobuf::uint32 Header::seq() const {
  // @@protoc_insertion_point(field_get:frame.proto.Header.seq)
  return seq_;
}
void Header::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:frame.proto.Header.seq)
}

// optional double elapsed_time = 3;
bool Header::has_elapsed_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Header::set_has_elapsed_time() {
  _has_bits_[0] |= 0x00000008u;
}
void Header::clear_has_elapsed_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void Header::clear_elapsed_time() {
  elapsed_time_ = 0;
  clear_has_elapsed_time();
}
double Header::elapsed_time() const {
  // @@protoc_insertion_point(field_get:frame.proto.Header.elapsed_time)
  return elapsed_time_;
}
void Header::set_elapsed_time(double value) {
  set_has_elapsed_time();
  elapsed_time_ = value;
  // @@protoc_insertion_point(field_set:frame.proto.Header.elapsed_time)
}

// optional uint32 keepalive_timeout = 4;
bool Header::has_keepalive_timeout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Header::set_has_keepalive_timeout() {
  _has_bits_[0] |= 0x00000010u;
}
void Header::clear_has_keepalive_timeout() {
  _has_bits_[0] &= ~0x00000010u;
}
void Header::clear_keepalive_timeout() {
  keepalive_timeout_ = 0u;
  clear_has_keepalive_timeout();
}
::google::protobuf::uint32 Header::keepalive_timeout() const {
  // @@protoc_insertion_point(field_get:frame.proto.Header.keepalive_timeout)
  return keepalive_timeout_;
}
void Header::set_keepalive_timeout(::google::protobuf::uint32 value) {
  set_has_keepalive_timeout();
  keepalive_timeout_ = value;
  // @@protoc_insertion_point(field_set:frame.proto.Header.keepalive_timeout)
}

// optional int32 compression_codec = 5;
bool Header::has_compression_codec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Header::set_has_compression_codec() {
  _has_bits_[0] |= 0x00000020u;
}
void Header::clear_has_compression_codec() {
  _has_bits_[0] &= ~0x00000020u;
}
void Header::clear_compression_codec() {
  compression_codec_ = 0;
  clear_has_compression_codec();
}
::google::protobuf::int32 Header::compression_codec() const {
  // @@protoc_insertion_point(field_get:frame.proto.Header.compression_codec)
  return compression_codec_;
}
void Header::set_compression_codec(::google::protobuf::int32 value) {
  set_has_compression_codec();
  compression_codec_ = value;
  // @@protoc_insertion_point(field_set:frame.proto.Header.compression_codec)
}

// optional .frame.proto.VersionInfo version_info = 16;
bool Header::has_version_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Header::set_has_version_info() {
  _has_bits_[0] |= 0x00000001u;
}
void Header::clear_has_version_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void Header::clear_version_info() {
  if (version_info_ != NULL) version_info_->::frame::proto::VersionInfo::Clear();
  clear_has_version_info();
}
const ::frame::proto::VersionInfo& Header::version_info() const {
  const ::frame::proto::VersionInfo* p = version_info_;
  // @@protoc_insertion_point(field_get:frame.proto.Header.version_info)
  return p != NULL ? *p : *reinterpret_cast<const ::frame::proto::VersionInfo*>(
      &::frame::proto::_VersionInfo_default_instance_);
}
::frame::proto::VersionInfo* Header::mutable_version_info() {
  set_has_version_info();
  if (version_info_ == NULL) {
    version_info_ = new ::frame::proto::VersionInfo;
  }
  // @@protoc_insertion_point(field_mutable:frame.proto.Header.version_info)
  return version_info_;
}
::frame::proto::VersionInfo* Header::release_version_info() {
  // @@protoc_insertion_point(field_release:frame.proto.Header.version_info)
  clear_has_version_info();
  ::frame::proto::VersionInfo* temp = version_info_;
  version_info_ = NULL;
  return temp;
}
void Header::set_allocated_version_info(::frame::proto::VersionInfo* version_info) {
  delete version_info_;
  version_info_ = version_info;
  if (version_info) {
    set_has_version_info();
  } else {
    clear_has_version_info();
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Header.version_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace frame

// @@protoc_insertion_point(global_scope)
