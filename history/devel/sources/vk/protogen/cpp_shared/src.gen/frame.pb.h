// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame.proto

#ifndef PROTOBUF_frame_2eproto__INCLUDED
#define PROTOBUF_frame_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace frame {
namespace proto {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class VersionInfo;
class VersionInfoDefaultTypeInternal;
extern VersionInfoDefaultTypeInternal _VersionInfo_default_instance_;
}  // namespace proto
}  // namespace frame

namespace frame {
namespace proto {

namespace protobuf_frame_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_frame_2eproto

// ===================================================================

class VersionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frame.proto.VersionInfo) */ {
 public:
  VersionInfo();
  virtual ~VersionInfo();

  VersionInfo(const VersionInfo& from);

  inline VersionInfo& operator=(const VersionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VersionInfo(VersionInfo&& from) noexcept
    : VersionInfo() {
    *this = ::std::move(from);
  }

  inline VersionInfo& operator=(VersionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionInfo& default_instance();

  static inline const VersionInfo* internal_default_instance() {
    return reinterpret_cast<const VersionInfo*>(
               &_VersionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(VersionInfo* other);
  friend void swap(VersionInfo& a, VersionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VersionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  VersionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VersionInfo& from);
  void MergeFrom(const VersionInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VersionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string component = 1;
  bool has_component() const;
  void clear_component();
  static const int kComponentFieldNumber = 1;
  const ::std::string& component() const;
  void set_component(const ::std::string& value);
  #if LANG_CXX11
  void set_component(::std::string&& value);
  #endif
  void set_component(const char* value);
  void set_component(const char* value, size_t size);
  ::std::string* mutable_component();
  ::std::string* release_component();
  void set_allocated_component(::std::string* component);

  // required string build = 2;
  bool has_build() const;
  void clear_build();
  static const int kBuildFieldNumber = 2;
  const ::std::string& build() const;
  void set_build(const ::std::string& value);
  #if LANG_CXX11
  void set_build(::std::string&& value);
  #endif
  void set_build(const char* value);
  void set_build(const char* value, size_t size);
  ::std::string* mutable_build();
  ::std::string* release_build();
  void set_allocated_build(::std::string* build);

  // optional string version = 3 [default = ""];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:frame.proto.VersionInfo)
 private:
  void set_has_component();
  void clear_has_component();
  void set_has_build();
  void clear_has_build();
  void set_has_version();
  void clear_has_version();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr component_;
  ::google::protobuf::internal::ArenaStringPtr build_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  friend struct protobuf_frame_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frame.proto.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const PROTOBUF_FINAL { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .frame.proto.VersionInfo version_info = 16;
  bool has_version_info() const;
  void clear_version_info();
  static const int kVersionInfoFieldNumber = 16;
  const ::frame::proto::VersionInfo& version_info() const;
  ::frame::proto::VersionInfo* mutable_version_info();
  ::frame::proto::VersionInfo* release_version_info();
  void set_allocated_version_info(::frame::proto::VersionInfo* version_info);

  // required uint32 payload_length = 1;
  bool has_payload_length() const;
  void clear_payload_length();
  static const int kPayloadLengthFieldNumber = 1;
  ::google::protobuf::uint32 payload_length() const;
  void set_payload_length(::google::protobuf::uint32 value);

  // required uint32 seq = 2;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  ::google::protobuf::uint32 seq() const;
  void set_seq(::google::protobuf::uint32 value);

  // optional double elapsed_time = 3;
  bool has_elapsed_time() const;
  void clear_elapsed_time();
  static const int kElapsedTimeFieldNumber = 3;
  double elapsed_time() const;
  void set_elapsed_time(double value);

  // optional uint32 keepalive_timeout = 4;
  bool has_keepalive_timeout() const;
  void clear_keepalive_timeout();
  static const int kKeepaliveTimeoutFieldNumber = 4;
  ::google::protobuf::uint32 keepalive_timeout() const;
  void set_keepalive_timeout(::google::protobuf::uint32 value);

  // optional int32 compression_codec = 5;
  bool has_compression_codec() const;
  void clear_compression_codec();
  static const int kCompressionCodecFieldNumber = 5;
  ::google::protobuf::int32 compression_codec() const;
  void set_compression_codec(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:frame.proto.Header)
 private:
  void set_has_payload_length();
  void clear_has_payload_length();
  void set_has_seq();
  void clear_has_seq();
  void set_has_elapsed_time();
  void clear_has_elapsed_time();
  void set_has_keepalive_timeout();
  void clear_has_keepalive_timeout();
  void set_has_compression_codec();
  void clear_has_compression_codec();
  void set_has_version_info();
  void clear_has_version_info();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::frame::proto::VersionInfo* version_info_;
  ::google::protobuf::uint32 payload_length_;
  ::google::protobuf::uint32 seq_;
  double elapsed_time_;
  ::google::protobuf::uint32 keepalive_timeout_;
  ::google::protobuf::int32 compression_codec_;
  friend struct protobuf_frame_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VersionInfo

// required string component = 1;
inline bool VersionInfo::has_component() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VersionInfo::set_has_component() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VersionInfo::clear_has_component() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VersionInfo::clear_component() {
  component_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_component();
}
inline const ::std::string& VersionInfo::component() const {
  // @@protoc_insertion_point(field_get:frame.proto.VersionInfo.component)
  return component_.GetNoArena();
}
inline void VersionInfo::set_component(const ::std::string& value) {
  set_has_component();
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frame.proto.VersionInfo.component)
}
#if LANG_CXX11
inline void VersionInfo::set_component(::std::string&& value) {
  set_has_component();
  component_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frame.proto.VersionInfo.component)
}
#endif
inline void VersionInfo::set_component(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_component();
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frame.proto.VersionInfo.component)
}
inline void VersionInfo::set_component(const char* value, size_t size) {
  set_has_component();
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frame.proto.VersionInfo.component)
}
inline ::std::string* VersionInfo::mutable_component() {
  set_has_component();
  // @@protoc_insertion_point(field_mutable:frame.proto.VersionInfo.component)
  return component_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VersionInfo::release_component() {
  // @@protoc_insertion_point(field_release:frame.proto.VersionInfo.component)
  clear_has_component();
  return component_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VersionInfo::set_allocated_component(::std::string* component) {
  if (component != NULL) {
    set_has_component();
  } else {
    clear_has_component();
  }
  component_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), component);
  // @@protoc_insertion_point(field_set_allocated:frame.proto.VersionInfo.component)
}

// required string build = 2;
inline bool VersionInfo::has_build() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VersionInfo::set_has_build() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VersionInfo::clear_has_build() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VersionInfo::clear_build() {
  build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_build();
}
inline const ::std::string& VersionInfo::build() const {
  // @@protoc_insertion_point(field_get:frame.proto.VersionInfo.build)
  return build_.GetNoArena();
}
inline void VersionInfo::set_build(const ::std::string& value) {
  set_has_build();
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frame.proto.VersionInfo.build)
}
#if LANG_CXX11
inline void VersionInfo::set_build(::std::string&& value) {
  set_has_build();
  build_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frame.proto.VersionInfo.build)
}
#endif
inline void VersionInfo::set_build(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_build();
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frame.proto.VersionInfo.build)
}
inline void VersionInfo::set_build(const char* value, size_t size) {
  set_has_build();
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frame.proto.VersionInfo.build)
}
inline ::std::string* VersionInfo::mutable_build() {
  set_has_build();
  // @@protoc_insertion_point(field_mutable:frame.proto.VersionInfo.build)
  return build_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VersionInfo::release_build() {
  // @@protoc_insertion_point(field_release:frame.proto.VersionInfo.build)
  clear_has_build();
  return build_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VersionInfo::set_allocated_build(::std::string* build) {
  if (build != NULL) {
    set_has_build();
  } else {
    clear_has_build();
  }
  build_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build);
  // @@protoc_insertion_point(field_set_allocated:frame.proto.VersionInfo.build)
}

// optional string version = 3 [default = ""];
inline bool VersionInfo::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VersionInfo::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VersionInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VersionInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& VersionInfo::version() const {
  // @@protoc_insertion_point(field_get:frame.proto.VersionInfo.version)
  return version_.GetNoArena();
}
inline void VersionInfo::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frame.proto.VersionInfo.version)
}
#if LANG_CXX11
inline void VersionInfo::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frame.proto.VersionInfo.version)
}
#endif
inline void VersionInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frame.proto.VersionInfo.version)
}
inline void VersionInfo::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frame.proto.VersionInfo.version)
}
inline ::std::string* VersionInfo::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:frame.proto.VersionInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VersionInfo::release_version() {
  // @@protoc_insertion_point(field_release:frame.proto.VersionInfo.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VersionInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:frame.proto.VersionInfo.version)
}

// -------------------------------------------------------------------

// Header

// required uint32 payload_length = 1;
inline bool Header::has_payload_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_payload_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_payload_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_payload_length() {
  payload_length_ = 0u;
  clear_has_payload_length();
}
inline ::google::protobuf::uint32 Header::payload_length() const {
  // @@protoc_insertion_point(field_get:frame.proto.Header.payload_length)
  return payload_length_;
}
inline void Header::set_payload_length(::google::protobuf::uint32 value) {
  set_has_payload_length();
  payload_length_ = value;
  // @@protoc_insertion_point(field_set:frame.proto.Header.payload_length)
}

// required uint32 seq = 2;
inline bool Header::has_seq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_seq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_seq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 Header::seq() const {
  // @@protoc_insertion_point(field_get:frame.proto.Header.seq)
  return seq_;
}
inline void Header::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:frame.proto.Header.seq)
}

// optional double elapsed_time = 3;
inline bool Header::has_elapsed_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Header::set_has_elapsed_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Header::clear_has_elapsed_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Header::clear_elapsed_time() {
  elapsed_time_ = 0;
  clear_has_elapsed_time();
}
inline double Header::elapsed_time() const {
  // @@protoc_insertion_point(field_get:frame.proto.Header.elapsed_time)
  return elapsed_time_;
}
inline void Header::set_elapsed_time(double value) {
  set_has_elapsed_time();
  elapsed_time_ = value;
  // @@protoc_insertion_point(field_set:frame.proto.Header.elapsed_time)
}

// optional uint32 keepalive_timeout = 4;
inline bool Header::has_keepalive_timeout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Header::set_has_keepalive_timeout() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Header::clear_has_keepalive_timeout() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Header::clear_keepalive_timeout() {
  keepalive_timeout_ = 0u;
  clear_has_keepalive_timeout();
}
inline ::google::protobuf::uint32 Header::keepalive_timeout() const {
  // @@protoc_insertion_point(field_get:frame.proto.Header.keepalive_timeout)
  return keepalive_timeout_;
}
inline void Header::set_keepalive_timeout(::google::protobuf::uint32 value) {
  set_has_keepalive_timeout();
  keepalive_timeout_ = value;
  // @@protoc_insertion_point(field_set:frame.proto.Header.keepalive_timeout)
}

// optional int32 compression_codec = 5;
inline bool Header::has_compression_codec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Header::set_has_compression_codec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Header::clear_has_compression_codec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Header::clear_compression_codec() {
  compression_codec_ = 0;
  clear_has_compression_codec();
}
inline ::google::protobuf::int32 Header::compression_codec() const {
  // @@protoc_insertion_point(field_get:frame.proto.Header.compression_codec)
  return compression_codec_;
}
inline void Header::set_compression_codec(::google::protobuf::int32 value) {
  set_has_compression_codec();
  compression_codec_ = value;
  // @@protoc_insertion_point(field_set:frame.proto.Header.compression_codec)
}

// optional .frame.proto.VersionInfo version_info = 16;
inline bool Header::has_version_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_version_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_version_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_version_info() {
  if (version_info_ != NULL) version_info_->::frame::proto::VersionInfo::Clear();
  clear_has_version_info();
}
inline const ::frame::proto::VersionInfo& Header::version_info() const {
  const ::frame::proto::VersionInfo* p = version_info_;
  // @@protoc_insertion_point(field_get:frame.proto.Header.version_info)
  return p != NULL ? *p : *reinterpret_cast<const ::frame::proto::VersionInfo*>(
      &::frame::proto::_VersionInfo_default_instance_);
}
inline ::frame::proto::VersionInfo* Header::mutable_version_info() {
  set_has_version_info();
  if (version_info_ == NULL) {
    version_info_ = new ::frame::proto::VersionInfo;
  }
  // @@protoc_insertion_point(field_mutable:frame.proto.Header.version_info)
  return version_info_;
}
inline ::frame::proto::VersionInfo* Header::release_version_info() {
  // @@protoc_insertion_point(field_release:frame.proto.Header.version_info)
  clear_has_version_info();
  ::frame::proto::VersionInfo* temp = version_info_;
  version_info_ = NULL;
  return temp;
}
inline void Header::set_allocated_version_info(::frame::proto::VersionInfo* version_info) {
  delete version_info_;
  version_info_ = version_info;
  if (version_info) {
    set_has_version_info();
  } else {
    clear_has_version_info();
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Header.version_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace frame

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_frame_2eproto__INCLUDED
