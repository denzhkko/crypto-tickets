// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_bki.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "image_bki.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace bki {
class ImageIdDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageId>
     _instance;
} _ImageId_default_instance_;
class ImageStructDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageStruct>
     _instance;
} _ImageStruct_default_instance_;
class ImageRefDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageRef>
     _instance;
} _ImageRef_default_instance_;

namespace protobuf_image_5fbki_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageId, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageId, imagehash_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, fullurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, imageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, content_),
  0,
  3,
  4,
  5,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRef, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRef, socnet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRef, avatarid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRef, imageids_),
  0,
  2,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(ImageId)},
  { 7, 18, sizeof(ImageStruct)},
  { 24, 33, sizeof(ImageRef)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageStruct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageRef_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "image_bki.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::parsing::img::protobuf_image_5fdefs_2eproto::InitDefaults();
  _ImageId_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageId_default_instance_);_ImageStruct_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageStruct_default_instance_);_ImageRef_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageRef_default_instance_);_ImageStruct_default_instance_._instance.get_mutable()->imageid_ = const_cast< ::ru::mail::go::bki::ImageId*>(
      ::ru::mail::go::bki::ImageId::internal_default_instance());
  _ImageRef_default_instance_._instance.get_mutable()->avatarid_ = const_cast< ::ru::mail::go::bki::ImageId*>(
      ::ru::mail::go::bki::ImageId::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017image_bki.proto\022\016ru.mail.go.bki\032\020image"
      "_defs.proto\"\034\n\007ImageId\022\021\n\timageHash\030\001 \002("
      "\004\"\265\001\n\013ImageStruct\022\017\n\007fullUrl\030\001 \002(\t\022\r\n\005wi"
      "dth\030\002 \002(\r\022\016\n\006height\030\003 \002(\r\022;\n\006format\030\004 \002("
      "\0162+.ru.mail.go.webbase.parsing.img.Image"
      "Format\022(\n\007imageId\030\005 \002(\0132\027.ru.mail.go.bki"
      ".ImageId\022\017\n\007content\030\006 \002(\014\"\230\001\n\010ImageRef\022\016"
      "\n\006userId\030\001 \002(\t\022&\n\006socNet\030\002 \002(\0162\026.ru.mail"
      ".go.bki.SocNet\022)\n\010avatarId\030\003 \001(\0132\027.ru.ma"
      "il.go.bki.ImageId\022)\n\010imageIds\030\004 \003(\0132\027.ru"
      ".mail.go.bki.ImageId* \n\006SocNet\022\006\n\002OK\020\000\022\006"
      "\n\002VK\020\001\022\006\n\002MM\020\002B\nB\010ImageBki"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 466);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "image_bki.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::parsing::img::protobuf_image_5fdefs_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_image_5fbki_2eproto

const ::google::protobuf::EnumDescriptor* SocNet_descriptor() {
  protobuf_image_5fbki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fbki_2eproto::file_level_enum_descriptors[0];
}
bool SocNet_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageId::kImageHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageId::ImageId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fbki_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.bki.ImageId)
}
ImageId::ImageId(const ImageId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imagehash_ = from.imagehash_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.bki.ImageId)
}

void ImageId::SharedCtor() {
  _cached_size_ = 0;
  imagehash_ = GOOGLE_ULONGLONG(0);
}

ImageId::~ImageId() {
  // @@protoc_insertion_point(destructor:ru.mail.go.bki.ImageId)
  SharedDtor();
}

void ImageId::SharedDtor() {
}

void ImageId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageId::descriptor() {
  protobuf_image_5fbki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fbki_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageId& ImageId::default_instance() {
  protobuf_image_5fbki_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageId* ImageId::New(::google::protobuf::Arena* arena) const {
  ImageId* n = new ImageId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageId::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.bki.ImageId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imagehash_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.bki.ImageId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 imageHash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_imagehash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &imagehash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.bki.ImageId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.bki.ImageId)
  return false;
#undef DO_
}

void ImageId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.bki.ImageId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 imageHash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->imagehash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.bki.ImageId)
}

::google::protobuf::uint8* ImageId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.bki.ImageId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 imageHash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->imagehash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.bki.ImageId)
  return target;
}

size_t ImageId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.bki.ImageId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 imageHash = 1;
  if (has_imagehash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->imagehash());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.bki.ImageId)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.bki.ImageId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.bki.ImageId)
    MergeFrom(*source);
  }
}

void ImageId::MergeFrom(const ImageId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.bki.ImageId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imagehash()) {
    set_imagehash(from.imagehash());
  }
}

void ImageId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.bki.ImageId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageId::CopyFrom(const ImageId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.bki.ImageId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ImageId::Swap(ImageId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageId::InternalSwap(ImageId* other) {
  using std::swap;
  swap(imagehash_, other->imagehash_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageId::GetMetadata() const {
  protobuf_image_5fbki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fbki_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageId

// required uint64 imageHash = 1;
bool ImageId::has_imagehash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageId::set_has_imagehash() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageId::clear_has_imagehash() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageId::clear_imagehash() {
  imagehash_ = GOOGLE_ULONGLONG(0);
  clear_has_imagehash();
}
::google::protobuf::uint64 ImageId::imagehash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageId.imageHash)
  return imagehash_;
}
void ImageId::set_imagehash(::google::protobuf::uint64 value) {
  set_has_imagehash();
  imagehash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.bki.ImageId.imageHash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageStruct::kFullUrlFieldNumber;
const int ImageStruct::kWidthFieldNumber;
const int ImageStruct::kHeightFieldNumber;
const int ImageStruct::kFormatFieldNumber;
const int ImageStruct::kImageIdFieldNumber;
const int ImageStruct::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageStruct::ImageStruct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fbki_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.bki.ImageStruct)
}
ImageStruct::ImageStruct(const ImageStruct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fullurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fullurl()) {
    fullurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullurl_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_imageid()) {
    imageid_ = new ::ru::mail::go::bki::ImageId(*from.imageid_);
  } else {
    imageid_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&width_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.bki.ImageStruct)
}

void ImageStruct::SharedCtor() {
  _cached_size_ = 0;
  fullurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&imageid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&imageid_)) + sizeof(format_));
}

ImageStruct::~ImageStruct() {
  // @@protoc_insertion_point(destructor:ru.mail.go.bki.ImageStruct)
  SharedDtor();
}

void ImageStruct::SharedDtor() {
  fullurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete imageid_;
}

void ImageStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageStruct::descriptor() {
  protobuf_image_5fbki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fbki_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageStruct& ImageStruct::default_instance() {
  protobuf_image_5fbki_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageStruct* ImageStruct::New(::google::protobuf::Arena* arena) const {
  ImageStruct* n = new ImageStruct;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.bki.ImageStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!fullurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fullurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(imageid_ != NULL);
      imageid_->::ru::mail::go::bki::ImageId::Clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&format_) -
        reinterpret_cast<char*>(&width_)) + sizeof(format_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.bki.ImageStruct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fullUrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fullurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fullurl().data(), static_cast<int>(this->fullurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.bki.ImageStruct.fullUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.parsing.img.ImageFormat format = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::parsing::img::ImageFormat_IsValid(value)) {
            set_format(static_cast< ::ru::mail::go::webbase::parsing::img::ImageFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.bki.ImageId imageId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imageid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.bki.ImageStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.bki.ImageStruct)
  return false;
#undef DO_
}

void ImageStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.bki.ImageStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string fullUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fullurl().data(), static_cast<int>(this->fullurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.bki.ImageStruct.fullUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fullurl(), output);
  }

  // required uint32 width = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // required uint32 height = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // required .ru.mail.go.webbase.parsing.img.ImageFormat format = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->format(), output);
  }

  // required .ru.mail.go.bki.ImageId imageId = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->imageid_, output);
  }

  // required bytes content = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.bki.ImageStruct)
}

::google::protobuf::uint8* ImageStruct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.bki.ImageStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string fullUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fullurl().data(), static_cast<int>(this->fullurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.bki.ImageStruct.fullUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fullurl(), target);
  }

  // required uint32 width = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // required uint32 height = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // required .ru.mail.go.webbase.parsing.img.ImageFormat format = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->format(), target);
  }

  // required .ru.mail.go.bki.ImageId imageId = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->imageid_, deterministic, target);
  }

  // required bytes content = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.bki.ImageStruct)
  return target;
}

size_t ImageStruct::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.bki.ImageStruct)
  size_t total_size = 0;

  if (has_fullurl()) {
    // required string fullUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fullurl());
  }

  if (has_content()) {
    // required bytes content = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_imageid()) {
    // required .ru.mail.go.bki.ImageId imageId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imageid_);
  }

  if (has_width()) {
    // required uint32 width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_format()) {
    // required .ru.mail.go.webbase.parsing.img.ImageFormat format = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }

  return total_size;
}
size_t ImageStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.bki.ImageStruct)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string fullUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fullurl());

    // required bytes content = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required .ru.mail.go.bki.ImageId imageId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imageid_);

    // required uint32 width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required .ru.mail.go.webbase.parsing.img.ImageFormat format = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageStruct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.bki.ImageStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageStruct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageStruct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.bki.ImageStruct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.bki.ImageStruct)
    MergeFrom(*source);
  }
}

void ImageStruct::MergeFrom(const ImageStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.bki.ImageStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fullurl();
      fullurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_imageid()->::ru::mail::go::bki::ImageId::MergeFrom(from.imageid());
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      format_ = from.format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageStruct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.bki.ImageStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageStruct::CopyFrom(const ImageStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.bki.ImageStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageStruct::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_imageid()) {
    if (!this->imageid_->IsInitialized()) return false;
  }
  return true;
}

void ImageStruct::Swap(ImageStruct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageStruct::InternalSwap(ImageStruct* other) {
  using std::swap;
  fullurl_.Swap(&other->fullurl_);
  content_.Swap(&other->content_);
  swap(imageid_, other->imageid_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(format_, other->format_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageStruct::GetMetadata() const {
  protobuf_image_5fbki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fbki_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageStruct

// required string fullUrl = 1;
bool ImageStruct::has_fullurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageStruct::set_has_fullurl() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageStruct::clear_has_fullurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageStruct::clear_fullurl() {
  fullurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fullurl();
}
const ::std::string& ImageStruct::fullurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageStruct.fullUrl)
  return fullurl_.GetNoArena();
}
void ImageStruct::set_fullurl(const ::std::string& value) {
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.bki.ImageStruct.fullUrl)
}
#if LANG_CXX11
void ImageStruct::set_fullurl(::std::string&& value) {
  set_has_fullurl();
  fullurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.bki.ImageStruct.fullUrl)
}
#endif
void ImageStruct::set_fullurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.bki.ImageStruct.fullUrl)
}
void ImageStruct::set_fullurl(const char* value, size_t size) {
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.bki.ImageStruct.fullUrl)
}
::std::string* ImageStruct::mutable_fullurl() {
  set_has_fullurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.bki.ImageStruct.fullUrl)
  return fullurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageStruct::release_fullurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.bki.ImageStruct.fullUrl)
  clear_has_fullurl();
  return fullurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageStruct::set_allocated_fullurl(::std::string* fullurl) {
  if (fullurl != NULL) {
    set_has_fullurl();
  } else {
    clear_has_fullurl();
  }
  fullurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.bki.ImageStruct.fullUrl)
}

// required uint32 width = 2;
bool ImageStruct::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageStruct::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageStruct::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageStruct::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 ImageStruct::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageStruct.width)
  return width_;
}
void ImageStruct::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.bki.ImageStruct.width)
}

// required uint32 height = 3;
bool ImageStruct::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageStruct::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageStruct::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageStruct::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 ImageStruct::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageStruct.height)
  return height_;
}
void ImageStruct::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.bki.ImageStruct.height)
}

// required .ru.mail.go.webbase.parsing.img.ImageFormat format = 4;
bool ImageStruct::has_format() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageStruct::set_has_format() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageStruct::clear_has_format() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageStruct::clear_format() {
  format_ = 0;
  clear_has_format();
}
::ru::mail::go::webbase::parsing::img::ImageFormat ImageStruct::format() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageStruct.format)
  return static_cast< ::ru::mail::go::webbase::parsing::img::ImageFormat >(format_);
}
void ImageStruct::set_format(::ru::mail::go::webbase::parsing::img::ImageFormat value) {
  assert(::ru::mail::go::webbase::parsing::img::ImageFormat_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.bki.ImageStruct.format)
}

// required .ru.mail.go.bki.ImageId imageId = 5;
bool ImageStruct::has_imageid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageStruct::set_has_imageid() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageStruct::clear_has_imageid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageStruct::clear_imageid() {
  if (imageid_ != NULL) imageid_->::ru::mail::go::bki::ImageId::Clear();
  clear_has_imageid();
}
const ::ru::mail::go::bki::ImageId& ImageStruct::imageid() const {
  const ::ru::mail::go::bki::ImageId* p = imageid_;
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageStruct.imageId)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::bki::ImageId*>(
      &::ru::mail::go::bki::_ImageId_default_instance_);
}
::ru::mail::go::bki::ImageId* ImageStruct::mutable_imageid() {
  set_has_imageid();
  if (imageid_ == NULL) {
    imageid_ = new ::ru::mail::go::bki::ImageId;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.bki.ImageStruct.imageId)
  return imageid_;
}
::ru::mail::go::bki::ImageId* ImageStruct::release_imageid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.bki.ImageStruct.imageId)
  clear_has_imageid();
  ::ru::mail::go::bki::ImageId* temp = imageid_;
  imageid_ = NULL;
  return temp;
}
void ImageStruct::set_allocated_imageid(::ru::mail::go::bki::ImageId* imageid) {
  delete imageid_;
  imageid_ = imageid;
  if (imageid) {
    set_has_imageid();
  } else {
    clear_has_imageid();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.bki.ImageStruct.imageId)
}

// required bytes content = 6;
bool ImageStruct::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageStruct::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageStruct::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageStruct::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& ImageStruct::content() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageStruct.content)
  return content_.GetNoArena();
}
void ImageStruct::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.bki.ImageStruct.content)
}
#if LANG_CXX11
void ImageStruct::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.bki.ImageStruct.content)
}
#endif
void ImageStruct::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.bki.ImageStruct.content)
}
void ImageStruct::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.bki.ImageStruct.content)
}
::std::string* ImageStruct::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.bki.ImageStruct.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageStruct::release_content() {
  // @@protoc_insertion_point(field_release:ru.mail.go.bki.ImageStruct.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageStruct::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.bki.ImageStruct.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageRef::kUserIdFieldNumber;
const int ImageRef::kSocNetFieldNumber;
const int ImageRef::kAvatarIdFieldNumber;
const int ImageRef::kImageIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageRef::ImageRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fbki_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.bki.ImageRef)
}
ImageRef::ImageRef(const ImageRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      imageids_(from.imageids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.has_avatarid()) {
    avatarid_ = new ::ru::mail::go::bki::ImageId(*from.avatarid_);
  } else {
    avatarid_ = NULL;
  }
  socnet_ = from.socnet_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.bki.ImageRef)
}

void ImageRef::SharedCtor() {
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&avatarid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socnet_) -
      reinterpret_cast<char*>(&avatarid_)) + sizeof(socnet_));
}

ImageRef::~ImageRef() {
  // @@protoc_insertion_point(destructor:ru.mail.go.bki.ImageRef)
  SharedDtor();
}

void ImageRef::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete avatarid_;
}

void ImageRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageRef::descriptor() {
  protobuf_image_5fbki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fbki_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageRef& ImageRef::default_instance() {
  protobuf_image_5fbki_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageRef* ImageRef::New(::google::protobuf::Arena* arena) const {
  ImageRef* n = new ImageRef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageRef::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.bki.ImageRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imageids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!userid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*userid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(avatarid_ != NULL);
      avatarid_->::ru::mail::go::bki::ImageId::Clear();
    }
  }
  socnet_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.bki.ImageRef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.bki.ImageRef.userId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.bki.SocNet socNet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::bki::SocNet_IsValid(value)) {
            set_socnet(static_cast< ::ru::mail::go::bki::SocNet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.bki.ImageId avatarId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatarid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.bki.ImageId imageIds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imageids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.bki.ImageRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.bki.ImageRef)
  return false;
#undef DO_
}

void ImageRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.bki.ImageRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.bki.ImageRef.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required .ru.mail.go.bki.SocNet socNet = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->socnet(), output);
  }

  // optional .ru.mail.go.bki.ImageId avatarId = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->avatarid_, output);
  }

  // repeated .ru.mail.go.bki.ImageId imageIds = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->imageids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->imageids(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.bki.ImageRef)
}

::google::protobuf::uint8* ImageRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.bki.ImageRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.bki.ImageRef.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required .ru.mail.go.bki.SocNet socNet = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->socnet(), target);
  }

  // optional .ru.mail.go.bki.ImageId avatarId = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->avatarid_, deterministic, target);
  }

  // repeated .ru.mail.go.bki.ImageId imageIds = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->imageids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->imageids(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.bki.ImageRef)
  return target;
}

size_t ImageRef::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.bki.ImageRef)
  size_t total_size = 0;

  if (has_userid()) {
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_socnet()) {
    // required .ru.mail.go.bki.SocNet socNet = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->socnet());
  }

  return total_size;
}
size_t ImageRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.bki.ImageRef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required .ru.mail.go.bki.SocNet socNet = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->socnet());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.bki.ImageId imageIds = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->imageids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imageids(static_cast<int>(i)));
    }
  }

  // optional .ru.mail.go.bki.ImageId avatarId = 3;
  if (has_avatarid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->avatarid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.bki.ImageRef)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.bki.ImageRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.bki.ImageRef)
    MergeFrom(*source);
  }
}

void ImageRef::MergeFrom(const ImageRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.bki.ImageRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imageids_.MergeFrom(from.imageids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_avatarid()->::ru::mail::go::bki::ImageId::MergeFrom(from.avatarid());
    }
    if (cached_has_bits & 0x00000004u) {
      socnet_ = from.socnet_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.bki.ImageRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageRef::CopyFrom(const ImageRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.bki.ImageRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageRef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->imageids())) return false;
  if (has_avatarid()) {
    if (!this->avatarid_->IsInitialized()) return false;
  }
  return true;
}

void ImageRef::Swap(ImageRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageRef::InternalSwap(ImageRef* other) {
  using std::swap;
  imageids_.InternalSwap(&other->imageids_);
  userid_.Swap(&other->userid_);
  swap(avatarid_, other->avatarid_);
  swap(socnet_, other->socnet_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageRef::GetMetadata() const {
  protobuf_image_5fbki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fbki_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageRef

// required string userId = 1;
bool ImageRef::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageRef::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageRef::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageRef::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
const ::std::string& ImageRef::userid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageRef.userId)
  return userid_.GetNoArena();
}
void ImageRef::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.bki.ImageRef.userId)
}
#if LANG_CXX11
void ImageRef::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.bki.ImageRef.userId)
}
#endif
void ImageRef::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.bki.ImageRef.userId)
}
void ImageRef::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.bki.ImageRef.userId)
}
::std::string* ImageRef::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.bki.ImageRef.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageRef::release_userid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.bki.ImageRef.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageRef::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.bki.ImageRef.userId)
}

// required .ru.mail.go.bki.SocNet socNet = 2;
bool ImageRef::has_socnet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageRef::set_has_socnet() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageRef::clear_has_socnet() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageRef::clear_socnet() {
  socnet_ = 0;
  clear_has_socnet();
}
::ru::mail::go::bki::SocNet ImageRef::socnet() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageRef.socNet)
  return static_cast< ::ru::mail::go::bki::SocNet >(socnet_);
}
void ImageRef::set_socnet(::ru::mail::go::bki::SocNet value) {
  assert(::ru::mail::go::bki::SocNet_IsValid(value));
  set_has_socnet();
  socnet_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.bki.ImageRef.socNet)
}

// optional .ru.mail.go.bki.ImageId avatarId = 3;
bool ImageRef::has_avatarid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageRef::set_has_avatarid() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageRef::clear_has_avatarid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageRef::clear_avatarid() {
  if (avatarid_ != NULL) avatarid_->::ru::mail::go::bki::ImageId::Clear();
  clear_has_avatarid();
}
const ::ru::mail::go::bki::ImageId& ImageRef::avatarid() const {
  const ::ru::mail::go::bki::ImageId* p = avatarid_;
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageRef.avatarId)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::bki::ImageId*>(
      &::ru::mail::go::bki::_ImageId_default_instance_);
}
::ru::mail::go::bki::ImageId* ImageRef::mutable_avatarid() {
  set_has_avatarid();
  if (avatarid_ == NULL) {
    avatarid_ = new ::ru::mail::go::bki::ImageId;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.bki.ImageRef.avatarId)
  return avatarid_;
}
::ru::mail::go::bki::ImageId* ImageRef::release_avatarid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.bki.ImageRef.avatarId)
  clear_has_avatarid();
  ::ru::mail::go::bki::ImageId* temp = avatarid_;
  avatarid_ = NULL;
  return temp;
}
void ImageRef::set_allocated_avatarid(::ru::mail::go::bki::ImageId* avatarid) {
  delete avatarid_;
  avatarid_ = avatarid;
  if (avatarid) {
    set_has_avatarid();
  } else {
    clear_has_avatarid();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.bki.ImageRef.avatarId)
}

// repeated .ru.mail.go.bki.ImageId imageIds = 4;
int ImageRef::imageids_size() const {
  return imageids_.size();
}
void ImageRef::clear_imageids() {
  imageids_.Clear();
}
const ::ru::mail::go::bki::ImageId& ImageRef::imageids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageRef.imageIds)
  return imageids_.Get(index);
}
::ru::mail::go::bki::ImageId* ImageRef::mutable_imageids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.bki.ImageRef.imageIds)
  return imageids_.Mutable(index);
}
::ru::mail::go::bki::ImageId* ImageRef::add_imageids() {
  // @@protoc_insertion_point(field_add:ru.mail.go.bki.ImageRef.imageIds)
  return imageids_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::bki::ImageId >*
ImageRef::mutable_imageids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.bki.ImageRef.imageIds)
  return &imageids_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::bki::ImageId >&
ImageRef::imageids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.bki.ImageRef.imageIds)
  return imageids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace bki
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
