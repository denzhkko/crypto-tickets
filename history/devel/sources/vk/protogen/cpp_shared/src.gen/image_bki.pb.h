// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_bki.proto

#ifndef PROTOBUF_image_5fbki_2eproto__INCLUDED
#define PROTOBUF_image_5fbki_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "image_defs.pb.h"
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace bki {
class ImageId;
class ImageIdDefaultTypeInternal;
extern ImageIdDefaultTypeInternal _ImageId_default_instance_;
class ImageRef;
class ImageRefDefaultTypeInternal;
extern ImageRefDefaultTypeInternal _ImageRef_default_instance_;
class ImageStruct;
class ImageStructDefaultTypeInternal;
extern ImageStructDefaultTypeInternal _ImageStruct_default_instance_;
}  // namespace bki
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace bki {

namespace protobuf_image_5fbki_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_image_5fbki_2eproto

enum SocNet {
  OK = 0,
  VK = 1,
  MM = 2
};
bool SocNet_IsValid(int value);
const SocNet SocNet_MIN = OK;
const SocNet SocNet_MAX = MM;
const int SocNet_ARRAYSIZE = SocNet_MAX + 1;

const ::google::protobuf::EnumDescriptor* SocNet_descriptor();
inline const ::std::string& SocNet_Name(SocNet value) {
  return ::google::protobuf::internal::NameOfEnum(
    SocNet_descriptor(), value);
}
inline bool SocNet_Parse(
    const ::std::string& name, SocNet* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SocNet>(
    SocNet_descriptor(), name, value);
}
// ===================================================================

class ImageId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.bki.ImageId) */ {
 public:
  ImageId();
  virtual ~ImageId();

  ImageId(const ImageId& from);

  inline ImageId& operator=(const ImageId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageId(ImageId&& from) noexcept
    : ImageId() {
    *this = ::std::move(from);
  }

  inline ImageId& operator=(ImageId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageId& default_instance();

  static inline const ImageId* internal_default_instance() {
    return reinterpret_cast<const ImageId*>(
               &_ImageId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ImageId* other);
  friend void swap(ImageId& a, ImageId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageId* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageId& from);
  void MergeFrom(const ImageId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 imageHash = 1;
  bool has_imagehash() const;
  void clear_imagehash();
  static const int kImageHashFieldNumber = 1;
  ::google::protobuf::uint64 imagehash() const;
  void set_imagehash(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.bki.ImageId)
 private:
  void set_has_imagehash();
  void clear_has_imagehash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 imagehash_;
  friend struct protobuf_image_5fbki_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageStruct : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.bki.ImageStruct) */ {
 public:
  ImageStruct();
  virtual ~ImageStruct();

  ImageStruct(const ImageStruct& from);

  inline ImageStruct& operator=(const ImageStruct& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageStruct(ImageStruct&& from) noexcept
    : ImageStruct() {
    *this = ::std::move(from);
  }

  inline ImageStruct& operator=(ImageStruct&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageStruct& default_instance();

  static inline const ImageStruct* internal_default_instance() {
    return reinterpret_cast<const ImageStruct*>(
               &_ImageStruct_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ImageStruct* other);
  friend void swap(ImageStruct& a, ImageStruct& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageStruct* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageStruct* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageStruct& from);
  void MergeFrom(const ImageStruct& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageStruct* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fullUrl = 1;
  bool has_fullurl() const;
  void clear_fullurl();
  static const int kFullUrlFieldNumber = 1;
  const ::std::string& fullurl() const;
  void set_fullurl(const ::std::string& value);
  #if LANG_CXX11
  void set_fullurl(::std::string&& value);
  #endif
  void set_fullurl(const char* value);
  void set_fullurl(const char* value, size_t size);
  ::std::string* mutable_fullurl();
  ::std::string* release_fullurl();
  void set_allocated_fullurl(::std::string* fullurl);

  // required bytes content = 6;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 6;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // required .ru.mail.go.bki.ImageId imageId = 5;
  bool has_imageid() const;
  void clear_imageid();
  static const int kImageIdFieldNumber = 5;
  const ::ru::mail::go::bki::ImageId& imageid() const;
  ::ru::mail::go::bki::ImageId* mutable_imageid();
  ::ru::mail::go::bki::ImageId* release_imageid();
  void set_allocated_imageid(::ru::mail::go::bki::ImageId* imageid);

  // required uint32 width = 2;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // required .ru.mail.go.webbase.parsing.img.ImageFormat format = 4;
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 4;
  ::ru::mail::go::webbase::parsing::img::ImageFormat format() const;
  void set_format(::ru::mail::go::webbase::parsing::img::ImageFormat value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.bki.ImageStruct)
 private:
  void set_has_fullurl();
  void clear_has_fullurl();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_format();
  void clear_has_format();
  void set_has_imageid();
  void clear_has_imageid();
  void set_has_content();
  void clear_has_content();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fullurl_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::ru::mail::go::bki::ImageId* imageid_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  int format_;
  friend struct protobuf_image_5fbki_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageRef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.bki.ImageRef) */ {
 public:
  ImageRef();
  virtual ~ImageRef();

  ImageRef(const ImageRef& from);

  inline ImageRef& operator=(const ImageRef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageRef(ImageRef&& from) noexcept
    : ImageRef() {
    *this = ::std::move(from);
  }

  inline ImageRef& operator=(ImageRef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageRef& default_instance();

  static inline const ImageRef* internal_default_instance() {
    return reinterpret_cast<const ImageRef*>(
               &_ImageRef_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ImageRef* other);
  friend void swap(ImageRef& a, ImageRef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageRef* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageRef* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageRef& from);
  void MergeFrom(const ImageRef& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.bki.ImageId imageIds = 4;
  int imageids_size() const;
  void clear_imageids();
  static const int kImageIdsFieldNumber = 4;
  const ::ru::mail::go::bki::ImageId& imageids(int index) const;
  ::ru::mail::go::bki::ImageId* mutable_imageids(int index);
  ::ru::mail::go::bki::ImageId* add_imageids();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::bki::ImageId >*
      mutable_imageids();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::bki::ImageId >&
      imageids() const;

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional .ru.mail.go.bki.ImageId avatarId = 3;
  bool has_avatarid() const;
  void clear_avatarid();
  static const int kAvatarIdFieldNumber = 3;
  const ::ru::mail::go::bki::ImageId& avatarid() const;
  ::ru::mail::go::bki::ImageId* mutable_avatarid();
  ::ru::mail::go::bki::ImageId* release_avatarid();
  void set_allocated_avatarid(::ru::mail::go::bki::ImageId* avatarid);

  // required .ru.mail.go.bki.SocNet socNet = 2;
  bool has_socnet() const;
  void clear_socnet();
  static const int kSocNetFieldNumber = 2;
  ::ru::mail::go::bki::SocNet socnet() const;
  void set_socnet(::ru::mail::go::bki::SocNet value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.bki.ImageRef)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_socnet();
  void clear_has_socnet();
  void set_has_avatarid();
  void clear_has_avatarid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::bki::ImageId > imageids_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::ru::mail::go::bki::ImageId* avatarid_;
  int socnet_;
  friend struct protobuf_image_5fbki_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageId

// required uint64 imageHash = 1;
inline bool ImageId::has_imagehash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageId::set_has_imagehash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageId::clear_has_imagehash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageId::clear_imagehash() {
  imagehash_ = GOOGLE_ULONGLONG(0);
  clear_has_imagehash();
}
inline ::google::protobuf::uint64 ImageId::imagehash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageId.imageHash)
  return imagehash_;
}
inline void ImageId::set_imagehash(::google::protobuf::uint64 value) {
  set_has_imagehash();
  imagehash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.bki.ImageId.imageHash)
}

// -------------------------------------------------------------------

// ImageStruct

// required string fullUrl = 1;
inline bool ImageStruct::has_fullurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageStruct::set_has_fullurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageStruct::clear_has_fullurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageStruct::clear_fullurl() {
  fullurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fullurl();
}
inline const ::std::string& ImageStruct::fullurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageStruct.fullUrl)
  return fullurl_.GetNoArena();
}
inline void ImageStruct::set_fullurl(const ::std::string& value) {
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.bki.ImageStruct.fullUrl)
}
#if LANG_CXX11
inline void ImageStruct::set_fullurl(::std::string&& value) {
  set_has_fullurl();
  fullurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.bki.ImageStruct.fullUrl)
}
#endif
inline void ImageStruct::set_fullurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.bki.ImageStruct.fullUrl)
}
inline void ImageStruct::set_fullurl(const char* value, size_t size) {
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.bki.ImageStruct.fullUrl)
}
inline ::std::string* ImageStruct::mutable_fullurl() {
  set_has_fullurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.bki.ImageStruct.fullUrl)
  return fullurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageStruct::release_fullurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.bki.ImageStruct.fullUrl)
  clear_has_fullurl();
  return fullurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageStruct::set_allocated_fullurl(::std::string* fullurl) {
  if (fullurl != NULL) {
    set_has_fullurl();
  } else {
    clear_has_fullurl();
  }
  fullurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.bki.ImageStruct.fullUrl)
}

// required uint32 width = 2;
inline bool ImageStruct::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageStruct::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageStruct::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageStruct::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 ImageStruct::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageStruct.width)
  return width_;
}
inline void ImageStruct::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.bki.ImageStruct.width)
}

// required uint32 height = 3;
inline bool ImageStruct::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageStruct::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageStruct::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageStruct::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 ImageStruct::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageStruct.height)
  return height_;
}
inline void ImageStruct::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.bki.ImageStruct.height)
}

// required .ru.mail.go.webbase.parsing.img.ImageFormat format = 4;
inline bool ImageStruct::has_format() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageStruct::set_has_format() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageStruct::clear_has_format() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageStruct::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::ru::mail::go::webbase::parsing::img::ImageFormat ImageStruct::format() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageStruct.format)
  return static_cast< ::ru::mail::go::webbase::parsing::img::ImageFormat >(format_);
}
inline void ImageStruct::set_format(::ru::mail::go::webbase::parsing::img::ImageFormat value) {
  assert(::ru::mail::go::webbase::parsing::img::ImageFormat_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.bki.ImageStruct.format)
}

// required .ru.mail.go.bki.ImageId imageId = 5;
inline bool ImageStruct::has_imageid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageStruct::set_has_imageid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageStruct::clear_has_imageid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageStruct::clear_imageid() {
  if (imageid_ != NULL) imageid_->::ru::mail::go::bki::ImageId::Clear();
  clear_has_imageid();
}
inline const ::ru::mail::go::bki::ImageId& ImageStruct::imageid() const {
  const ::ru::mail::go::bki::ImageId* p = imageid_;
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageStruct.imageId)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::bki::ImageId*>(
      &::ru::mail::go::bki::_ImageId_default_instance_);
}
inline ::ru::mail::go::bki::ImageId* ImageStruct::mutable_imageid() {
  set_has_imageid();
  if (imageid_ == NULL) {
    imageid_ = new ::ru::mail::go::bki::ImageId;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.bki.ImageStruct.imageId)
  return imageid_;
}
inline ::ru::mail::go::bki::ImageId* ImageStruct::release_imageid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.bki.ImageStruct.imageId)
  clear_has_imageid();
  ::ru::mail::go::bki::ImageId* temp = imageid_;
  imageid_ = NULL;
  return temp;
}
inline void ImageStruct::set_allocated_imageid(::ru::mail::go::bki::ImageId* imageid) {
  delete imageid_;
  imageid_ = imageid;
  if (imageid) {
    set_has_imageid();
  } else {
    clear_has_imageid();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.bki.ImageStruct.imageId)
}

// required bytes content = 6;
inline bool ImageStruct::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageStruct::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageStruct::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageStruct::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& ImageStruct::content() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageStruct.content)
  return content_.GetNoArena();
}
inline void ImageStruct::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.bki.ImageStruct.content)
}
#if LANG_CXX11
inline void ImageStruct::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.bki.ImageStruct.content)
}
#endif
inline void ImageStruct::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.bki.ImageStruct.content)
}
inline void ImageStruct::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.bki.ImageStruct.content)
}
inline ::std::string* ImageStruct::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.bki.ImageStruct.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageStruct::release_content() {
  // @@protoc_insertion_point(field_release:ru.mail.go.bki.ImageStruct.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageStruct::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.bki.ImageStruct.content)
}

// -------------------------------------------------------------------

// ImageRef

// required string userId = 1;
inline bool ImageRef::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageRef::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageRef::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageRef::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& ImageRef::userid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageRef.userId)
  return userid_.GetNoArena();
}
inline void ImageRef::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.bki.ImageRef.userId)
}
#if LANG_CXX11
inline void ImageRef::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.bki.ImageRef.userId)
}
#endif
inline void ImageRef::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.bki.ImageRef.userId)
}
inline void ImageRef::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.bki.ImageRef.userId)
}
inline ::std::string* ImageRef::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.bki.ImageRef.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageRef::release_userid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.bki.ImageRef.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageRef::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.bki.ImageRef.userId)
}

// required .ru.mail.go.bki.SocNet socNet = 2;
inline bool ImageRef::has_socnet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageRef::set_has_socnet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageRef::clear_has_socnet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageRef::clear_socnet() {
  socnet_ = 0;
  clear_has_socnet();
}
inline ::ru::mail::go::bki::SocNet ImageRef::socnet() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageRef.socNet)
  return static_cast< ::ru::mail::go::bki::SocNet >(socnet_);
}
inline void ImageRef::set_socnet(::ru::mail::go::bki::SocNet value) {
  assert(::ru::mail::go::bki::SocNet_IsValid(value));
  set_has_socnet();
  socnet_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.bki.ImageRef.socNet)
}

// optional .ru.mail.go.bki.ImageId avatarId = 3;
inline bool ImageRef::has_avatarid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageRef::set_has_avatarid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageRef::clear_has_avatarid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageRef::clear_avatarid() {
  if (avatarid_ != NULL) avatarid_->::ru::mail::go::bki::ImageId::Clear();
  clear_has_avatarid();
}
inline const ::ru::mail::go::bki::ImageId& ImageRef::avatarid() const {
  const ::ru::mail::go::bki::ImageId* p = avatarid_;
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageRef.avatarId)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::bki::ImageId*>(
      &::ru::mail::go::bki::_ImageId_default_instance_);
}
inline ::ru::mail::go::bki::ImageId* ImageRef::mutable_avatarid() {
  set_has_avatarid();
  if (avatarid_ == NULL) {
    avatarid_ = new ::ru::mail::go::bki::ImageId;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.bki.ImageRef.avatarId)
  return avatarid_;
}
inline ::ru::mail::go::bki::ImageId* ImageRef::release_avatarid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.bki.ImageRef.avatarId)
  clear_has_avatarid();
  ::ru::mail::go::bki::ImageId* temp = avatarid_;
  avatarid_ = NULL;
  return temp;
}
inline void ImageRef::set_allocated_avatarid(::ru::mail::go::bki::ImageId* avatarid) {
  delete avatarid_;
  avatarid_ = avatarid;
  if (avatarid) {
    set_has_avatarid();
  } else {
    clear_has_avatarid();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.bki.ImageRef.avatarId)
}

// repeated .ru.mail.go.bki.ImageId imageIds = 4;
inline int ImageRef::imageids_size() const {
  return imageids_.size();
}
inline void ImageRef::clear_imageids() {
  imageids_.Clear();
}
inline const ::ru::mail::go::bki::ImageId& ImageRef::imageids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.bki.ImageRef.imageIds)
  return imageids_.Get(index);
}
inline ::ru::mail::go::bki::ImageId* ImageRef::mutable_imageids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.bki.ImageRef.imageIds)
  return imageids_.Mutable(index);
}
inline ::ru::mail::go::bki::ImageId* ImageRef::add_imageids() {
  // @@protoc_insertion_point(field_add:ru.mail.go.bki.ImageRef.imageIds)
  return imageids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::bki::ImageId >*
ImageRef::mutable_imageids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.bki.ImageRef.imageIds)
  return &imageids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::bki::ImageId >&
ImageRef::imageids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.bki.ImageRef.imageIds)
  return imageids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace bki
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::bki::SocNet> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::bki::SocNet>() {
  return ::ru::mail::go::bki::SocNet_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_image_5fbki_2eproto__INCLUDED
