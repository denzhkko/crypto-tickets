// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index_meta_part.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "index_meta_part.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gogo {
namespace index_meta_part {
class meta_itemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<meta_item>
     _instance;
} _meta_item_default_instance_;
class meta_partDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<meta_part>
     _instance;
} _meta_part_default_instance_;
class sentence_extension_infoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<sentence_extension_info>
     _instance;
} _sentence_extension_info_default_instance_;
class sentenceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<sentence>
     _instance;
} _sentence_default_instance_;
class sentence2DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<sentence2>
     _instance;
} _sentence2_default_instance_;

namespace protobuf_index_5fmeta_5fpart_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_item, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_item, content_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_part, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_part, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_part, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_part, version_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence_extension_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence_extension_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence_extension_info, terms_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence_extension_info, numbers_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence_extension_info, puncts_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence_extension_info, pipes_positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence_extension_info, right_angle_positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence_extension_info, slash_positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence_extension_info, back_slash_positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence_extension_info, left_parentheses_positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence_extension_info, right_parentheses_positiosn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence_extension_info, em_dash_positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence_extension_info, en_dash_positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence_extension_info, bullet_positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence_extension_info, url_part_positions_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence, sentence_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence, first_item_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence, last_item_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence, lexical_density_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence, readability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence, has_invectives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence, paragraph_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence, paragraph_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence, extension_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence2, sentence_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence2, first_item_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence2, last_item_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence2, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sentence2, has_invectives_),
  0,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(meta_item)},
  { 9, 16, sizeof(meta_part)},
  { 18, 36, sizeof(sentence_extension_info)},
  { 49, 64, sizeof(sentence)},
  { 74, 84, sizeof(sentence2)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_meta_item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_meta_part_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_sentence_extension_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_sentence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_sentence2_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "index_meta_part.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _meta_item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_meta_item_default_instance_);_meta_part_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_meta_part_default_instance_);_sentence_extension_info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_sentence_extension_info_default_instance_);_sentence_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_sentence_default_instance_);_sentence2_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_sentence2_default_instance_);_sentence_default_instance_._instance.get_mutable()->extension_ = const_cast< ::gogo::index_meta_part::sentence_extension_info*>(
      ::gogo::index_meta_part::sentence_extension_info::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025index_meta_part.proto\022\024gogo.index_meta"
      "_part\"\221\001\n\tmeta_item\0226\n\004type\030\001 \002(\0162(.gogo"
      ".index_meta_part.meta_item.ItemType\022\017\n\007c"
      "ontent\030\002 \002(\014\";\n\010ItemType\022\010\n\004ITEM\020\000\022\t\n\005RA"
      "NGE\020\001\022\014\n\010SENTENCE\020\002\022\014\n\010DOCUMENT\020\003\"L\n\tmet"
      "a_part\022.\n\005items\030\001 \003(\0132\037.gogo.index_meta_"
      "part.meta_item\022\017\n\007version\030\002 \001(\005\"\363\005\n\010sent"
      "ence\022\026\n\016sentence_index\030\001 \002(\r\022\030\n\020first_it"
      "em_index\030\002 \002(\r\022\027\n\017last_item_index\030\003 \002(\r\022"
      "\027\n\017lexical_density\030\004 \001(\002\022\023\n\013readability\030"
      "\005 \001(\002\022>\n\007quality\030\006 \001(\0162-.gogo.index_meta"
      "_part.sentence.InfQualityType\022\026\n\016has_inv"
      "ectives\030\007 \001(\010\022\027\n\017paragraph_index\030\010 \001(\r\022\025"
      "\n\rparagraph_tag\030\t \001(\t\022@\n\textension\030\n \001(\013"
      "2-.gogo.index_meta_part.sentence.extensi"
      "on_info\032\366\002\n\016extension_info\022\023\n\013terms_coun"
      "t\030\001 \001(\r\022\025\n\rnumbers_count\030\002 \001(\r\022\024\n\014puncts"
      "_count\030\003 \001(\r\022\027\n\017pipes_positions\030\004 \003(\r\022\035\n"
      "\025right_angle_positions\030\005 \003(\r\022\027\n\017slash_po"
      "sitions\030\006 \003(\r\022\034\n\024back_slash_positions\030\007 "
      "\003(\r\022\"\n\032left_parentheses_positions\030\010 \003(\r\022"
      "#\n\033right_parentheses_positiosn\030\t \003(\r\022\031\n\021"
      "em_dash_positions\030\n \003(\r\022\031\n\021en_dash_posit"
      "ions\030\013 \003(\r\022\030\n\020bullet_positions\030\014 \003(\r\022\032\n\022"
      "url_part_positions\030\r \003(\r\"+\n\016InfQualityTy"
      "pe\022\006\n\002OK\020\000\022\010\n\004POOR\020\001\022\007\n\003NON\020\002\"\256\001\n\tsenten"
      "ce2\022\026\n\016sentence_index\030\001 \002(\r\022\030\n\020first_ite"
      "m_index\030\002 \002(\r\022\027\n\017last_item_index\030\003 \002(\r\022>"
      "\n\007quality\030\004 \001(\0162-.gogo.index_meta_part.s"
      "entence.InfQualityType\022\026\n\016has_invectives"
      "\030\005 \001(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1206);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "index_meta_part.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_index_5fmeta_5fpart_2eproto

const ::google::protobuf::EnumDescriptor* meta_item_ItemType_descriptor() {
  protobuf_index_5fmeta_5fpart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_index_5fmeta_5fpart_2eproto::file_level_enum_descriptors[0];
}
bool meta_item_ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const meta_item_ItemType meta_item::ITEM;
const meta_item_ItemType meta_item::RANGE;
const meta_item_ItemType meta_item::SENTENCE;
const meta_item_ItemType meta_item::DOCUMENT;
const meta_item_ItemType meta_item::ItemType_MIN;
const meta_item_ItemType meta_item::ItemType_MAX;
const int meta_item::ItemType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* sentence_InfQualityType_descriptor() {
  protobuf_index_5fmeta_5fpart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_index_5fmeta_5fpart_2eproto::file_level_enum_descriptors[1];
}
bool sentence_InfQualityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const sentence_InfQualityType sentence::OK;
const sentence_InfQualityType sentence::POOR;
const sentence_InfQualityType sentence::NON;
const sentence_InfQualityType sentence::InfQualityType_MIN;
const sentence_InfQualityType sentence::InfQualityType_MAX;
const int sentence::InfQualityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int meta_item::kTypeFieldNumber;
const int meta_item::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

meta_item::meta_item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_index_5fmeta_5fpart_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.index_meta_part.meta_item)
}
meta_item::meta_item(const meta_item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gogo.index_meta_part.meta_item)
}

void meta_item::SharedCtor() {
  _cached_size_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

meta_item::~meta_item() {
  // @@protoc_insertion_point(destructor:gogo.index_meta_part.meta_item)
  SharedDtor();
}

void meta_item::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void meta_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* meta_item::descriptor() {
  protobuf_index_5fmeta_5fpart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_index_5fmeta_5fpart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const meta_item& meta_item::default_instance() {
  protobuf_index_5fmeta_5fpart_2eproto::InitDefaults();
  return *internal_default_instance();
}

meta_item* meta_item::New(::google::protobuf::Arena* arena) const {
  meta_item* n = new meta_item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void meta_item::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.index_meta_part.meta_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_content()) {
    GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*content_.UnsafeRawStringPointer())->clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool meta_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.index_meta_part.meta_item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gogo.index_meta_part.meta_item.ItemType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::index_meta_part::meta_item_ItemType_IsValid(value)) {
            set_type(static_cast< ::gogo::index_meta_part::meta_item_ItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.index_meta_part.meta_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.index_meta_part.meta_item)
  return false;
#undef DO_
}

void meta_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.index_meta_part.meta_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gogo.index_meta_part.meta_item.ItemType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bytes content = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.index_meta_part.meta_item)
}

::google::protobuf::uint8* meta_item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.index_meta_part.meta_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gogo.index_meta_part.meta_item.ItemType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bytes content = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.index_meta_part.meta_item)
  return target;
}

size_t meta_item::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.index_meta_part.meta_item)
  size_t total_size = 0;

  if (has_content()) {
    // required bytes content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_type()) {
    // required .gogo.index_meta_part.meta_item.ItemType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t meta_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.index_meta_part.meta_item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required .gogo.index_meta_part.meta_item.ItemType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void meta_item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.index_meta_part.meta_item)
  GOOGLE_DCHECK_NE(&from, this);
  const meta_item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const meta_item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.index_meta_part.meta_item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.index_meta_part.meta_item)
    MergeFrom(*source);
  }
}

void meta_item::MergeFrom(const meta_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.index_meta_part.meta_item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void meta_item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.index_meta_part.meta_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void meta_item::CopyFrom(const meta_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.index_meta_part.meta_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool meta_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void meta_item::Swap(meta_item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void meta_item::InternalSwap(meta_item* other) {
  using std::swap;
  content_.Swap(&other->content_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata meta_item::GetMetadata() const {
  protobuf_index_5fmeta_5fpart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_index_5fmeta_5fpart_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// meta_item

// required .gogo.index_meta_part.meta_item.ItemType type = 1;
bool meta_item::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void meta_item::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void meta_item::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void meta_item::clear_type() {
  type_ = 0;
  clear_has_type();
}
::gogo::index_meta_part::meta_item_ItemType meta_item::type() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.meta_item.type)
  return static_cast< ::gogo::index_meta_part::meta_item_ItemType >(type_);
}
void meta_item::set_type(::gogo::index_meta_part::meta_item_ItemType value) {
  assert(::gogo::index_meta_part::meta_item_ItemType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.meta_item.type)
}

// required bytes content = 2;
bool meta_item::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void meta_item::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
void meta_item::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
void meta_item::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& meta_item::content() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.meta_item.content)
  return content_.GetNoArena();
}
void meta_item::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.meta_item.content)
}
#if LANG_CXX11
void meta_item::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.index_meta_part.meta_item.content)
}
#endif
void meta_item::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.index_meta_part.meta_item.content)
}
void meta_item::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.index_meta_part.meta_item.content)
}
::std::string* meta_item::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:gogo.index_meta_part.meta_item.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* meta_item::release_content() {
  // @@protoc_insertion_point(field_release:gogo.index_meta_part.meta_item.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void meta_item::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:gogo.index_meta_part.meta_item.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int meta_part::kItemsFieldNumber;
const int meta_part::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

meta_part::meta_part()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_index_5fmeta_5fpart_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.index_meta_part.meta_part)
}
meta_part::meta_part(const meta_part& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:gogo.index_meta_part.meta_part)
}

void meta_part::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
}

meta_part::~meta_part() {
  // @@protoc_insertion_point(destructor:gogo.index_meta_part.meta_part)
  SharedDtor();
}

void meta_part::SharedDtor() {
}

void meta_part::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* meta_part::descriptor() {
  protobuf_index_5fmeta_5fpart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_index_5fmeta_5fpart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const meta_part& meta_part::default_instance() {
  protobuf_index_5fmeta_5fpart_2eproto::InitDefaults();
  return *internal_default_instance();
}

meta_part* meta_part::New(::google::protobuf::Arena* arena) const {
  meta_part* n = new meta_part;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void meta_part::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.index_meta_part.meta_part)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool meta_part::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.index_meta_part.meta_part)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gogo.index_meta_part.meta_item items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.index_meta_part.meta_part)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.index_meta_part.meta_part)
  return false;
#undef DO_
}

void meta_part::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.index_meta_part.meta_part)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.index_meta_part.meta_item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.index_meta_part.meta_part)
}

::google::protobuf::uint8* meta_part::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.index_meta_part.meta_part)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.index_meta_part.meta_item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.index_meta_part.meta_part)
  return target;
}

size_t meta_part::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.index_meta_part.meta_part)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .gogo.index_meta_part.meta_item items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  // optional int32 version = 2;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void meta_part::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.index_meta_part.meta_part)
  GOOGLE_DCHECK_NE(&from, this);
  const meta_part* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const meta_part>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.index_meta_part.meta_part)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.index_meta_part.meta_part)
    MergeFrom(*source);
  }
}

void meta_part::MergeFrom(const meta_part& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.index_meta_part.meta_part)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void meta_part::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.index_meta_part.meta_part)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void meta_part::CopyFrom(const meta_part& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.index_meta_part.meta_part)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool meta_part::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void meta_part::Swap(meta_part* other) {
  if (other == this) return;
  InternalSwap(other);
}
void meta_part::InternalSwap(meta_part* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata meta_part::GetMetadata() const {
  protobuf_index_5fmeta_5fpart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_index_5fmeta_5fpart_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// meta_part

// repeated .gogo.index_meta_part.meta_item items = 1;
int meta_part::items_size() const {
  return items_.size();
}
void meta_part::clear_items() {
  items_.Clear();
}
const ::gogo::index_meta_part::meta_item& meta_part::items(int index) const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.meta_part.items)
  return items_.Get(index);
}
::gogo::index_meta_part::meta_item* meta_part::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.index_meta_part.meta_part.items)
  return items_.Mutable(index);
}
::gogo::index_meta_part::meta_item* meta_part::add_items() {
  // @@protoc_insertion_point(field_add:gogo.index_meta_part.meta_part.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::index_meta_part::meta_item >*
meta_part::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:gogo.index_meta_part.meta_part.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::index_meta_part::meta_item >&
meta_part::items() const {
  // @@protoc_insertion_point(field_list:gogo.index_meta_part.meta_part.items)
  return items_;
}

// optional int32 version = 2;
bool meta_part::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void meta_part::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void meta_part::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void meta_part::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 meta_part::version() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.meta_part.version)
  return version_;
}
void meta_part::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.meta_part.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sentence_extension_info::kTermsCountFieldNumber;
const int sentence_extension_info::kNumbersCountFieldNumber;
const int sentence_extension_info::kPunctsCountFieldNumber;
const int sentence_extension_info::kPipesPositionsFieldNumber;
const int sentence_extension_info::kRightAnglePositionsFieldNumber;
const int sentence_extension_info::kSlashPositionsFieldNumber;
const int sentence_extension_info::kBackSlashPositionsFieldNumber;
const int sentence_extension_info::kLeftParenthesesPositionsFieldNumber;
const int sentence_extension_info::kRightParenthesesPositiosnFieldNumber;
const int sentence_extension_info::kEmDashPositionsFieldNumber;
const int sentence_extension_info::kEnDashPositionsFieldNumber;
const int sentence_extension_info::kBulletPositionsFieldNumber;
const int sentence_extension_info::kUrlPartPositionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sentence_extension_info::sentence_extension_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_index_5fmeta_5fpart_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.index_meta_part.sentence.extension_info)
}
sentence_extension_info::sentence_extension_info(const sentence_extension_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pipes_positions_(from.pipes_positions_),
      right_angle_positions_(from.right_angle_positions_),
      slash_positions_(from.slash_positions_),
      back_slash_positions_(from.back_slash_positions_),
      left_parentheses_positions_(from.left_parentheses_positions_),
      right_parentheses_positiosn_(from.right_parentheses_positiosn_),
      em_dash_positions_(from.em_dash_positions_),
      en_dash_positions_(from.en_dash_positions_),
      bullet_positions_(from.bullet_positions_),
      url_part_positions_(from.url_part_positions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&terms_count_, &from.terms_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&puncts_count_) -
    reinterpret_cast<char*>(&terms_count_)) + sizeof(puncts_count_));
  // @@protoc_insertion_point(copy_constructor:gogo.index_meta_part.sentence.extension_info)
}

void sentence_extension_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&terms_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&puncts_count_) -
      reinterpret_cast<char*>(&terms_count_)) + sizeof(puncts_count_));
}

sentence_extension_info::~sentence_extension_info() {
  // @@protoc_insertion_point(destructor:gogo.index_meta_part.sentence.extension_info)
  SharedDtor();
}

void sentence_extension_info::SharedDtor() {
}

void sentence_extension_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sentence_extension_info::descriptor() {
  protobuf_index_5fmeta_5fpart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_index_5fmeta_5fpart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const sentence_extension_info& sentence_extension_info::default_instance() {
  protobuf_index_5fmeta_5fpart_2eproto::InitDefaults();
  return *internal_default_instance();
}

sentence_extension_info* sentence_extension_info::New(::google::protobuf::Arena* arena) const {
  sentence_extension_info* n = new sentence_extension_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sentence_extension_info::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.index_meta_part.sentence.extension_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pipes_positions_.Clear();
  right_angle_positions_.Clear();
  slash_positions_.Clear();
  back_slash_positions_.Clear();
  left_parentheses_positions_.Clear();
  right_parentheses_positiosn_.Clear();
  em_dash_positions_.Clear();
  en_dash_positions_.Clear();
  bullet_positions_.Clear();
  url_part_positions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&terms_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&puncts_count_) -
        reinterpret_cast<char*>(&terms_count_)) + sizeof(puncts_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool sentence_extension_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.index_meta_part.sentence.extension_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 terms_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_terms_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terms_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numbers_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_numbers_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numbers_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 puncts_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_puncts_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &puncts_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 pipes_positions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_pipes_positions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pipes_positions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 right_angle_positions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_right_angle_positions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_right_angle_positions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 slash_positions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_slash_positions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_slash_positions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 back_slash_positions = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_back_slash_positions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_back_slash_positions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 left_parentheses_positions = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_left_parentheses_positions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_left_parentheses_positions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 right_parentheses_positiosn = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_right_parentheses_positiosn())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_right_parentheses_positiosn())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 em_dash_positions = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80u, input, this->mutable_em_dash_positions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_em_dash_positions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 en_dash_positions = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88u, input, this->mutable_en_dash_positions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_en_dash_positions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 bullet_positions = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96u, input, this->mutable_bullet_positions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bullet_positions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 url_part_positions = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104u, input, this->mutable_url_part_positions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_url_part_positions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.index_meta_part.sentence.extension_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.index_meta_part.sentence.extension_info)
  return false;
#undef DO_
}

void sentence_extension_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.index_meta_part.sentence.extension_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 terms_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->terms_count(), output);
  }

  // optional uint32 numbers_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->numbers_count(), output);
  }

  // optional uint32 puncts_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->puncts_count(), output);
  }

  // repeated uint32 pipes_positions = 4;
  for (int i = 0, n = this->pipes_positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->pipes_positions(i), output);
  }

  // repeated uint32 right_angle_positions = 5;
  for (int i = 0, n = this->right_angle_positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->right_angle_positions(i), output);
  }

  // repeated uint32 slash_positions = 6;
  for (int i = 0, n = this->slash_positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->slash_positions(i), output);
  }

  // repeated uint32 back_slash_positions = 7;
  for (int i = 0, n = this->back_slash_positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->back_slash_positions(i), output);
  }

  // repeated uint32 left_parentheses_positions = 8;
  for (int i = 0, n = this->left_parentheses_positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->left_parentheses_positions(i), output);
  }

  // repeated uint32 right_parentheses_positiosn = 9;
  for (int i = 0, n = this->right_parentheses_positiosn_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->right_parentheses_positiosn(i), output);
  }

  // repeated uint32 em_dash_positions = 10;
  for (int i = 0, n = this->em_dash_positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->em_dash_positions(i), output);
  }

  // repeated uint32 en_dash_positions = 11;
  for (int i = 0, n = this->en_dash_positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->en_dash_positions(i), output);
  }

  // repeated uint32 bullet_positions = 12;
  for (int i = 0, n = this->bullet_positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->bullet_positions(i), output);
  }

  // repeated uint32 url_part_positions = 13;
  for (int i = 0, n = this->url_part_positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->url_part_positions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.index_meta_part.sentence.extension_info)
}

::google::protobuf::uint8* sentence_extension_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.index_meta_part.sentence.extension_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 terms_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->terms_count(), target);
  }

  // optional uint32 numbers_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->numbers_count(), target);
  }

  // optional uint32 puncts_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->puncts_count(), target);
  }

  // repeated uint32 pipes_positions = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->pipes_positions_, target);

  // repeated uint32 right_angle_positions = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->right_angle_positions_, target);

  // repeated uint32 slash_positions = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->slash_positions_, target);

  // repeated uint32 back_slash_positions = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->back_slash_positions_, target);

  // repeated uint32 left_parentheses_positions = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->left_parentheses_positions_, target);

  // repeated uint32 right_parentheses_positiosn = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->right_parentheses_positiosn_, target);

  // repeated uint32 em_dash_positions = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(10, this->em_dash_positions_, target);

  // repeated uint32 en_dash_positions = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(11, this->en_dash_positions_, target);

  // repeated uint32 bullet_positions = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(12, this->bullet_positions_, target);

  // repeated uint32 url_part_positions = 13;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(13, this->url_part_positions_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.index_meta_part.sentence.extension_info)
  return target;
}

size_t sentence_extension_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.index_meta_part.sentence.extension_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 pipes_positions = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->pipes_positions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pipes_positions_size());
    total_size += data_size;
  }

  // repeated uint32 right_angle_positions = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->right_angle_positions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->right_angle_positions_size());
    total_size += data_size;
  }

  // repeated uint32 slash_positions = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->slash_positions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->slash_positions_size());
    total_size += data_size;
  }

  // repeated uint32 back_slash_positions = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->back_slash_positions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->back_slash_positions_size());
    total_size += data_size;
  }

  // repeated uint32 left_parentheses_positions = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->left_parentheses_positions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->left_parentheses_positions_size());
    total_size += data_size;
  }

  // repeated uint32 right_parentheses_positiosn = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->right_parentheses_positiosn_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->right_parentheses_positiosn_size());
    total_size += data_size;
  }

  // repeated uint32 em_dash_positions = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->em_dash_positions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->em_dash_positions_size());
    total_size += data_size;
  }

  // repeated uint32 en_dash_positions = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->en_dash_positions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->en_dash_positions_size());
    total_size += data_size;
  }

  // repeated uint32 bullet_positions = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->bullet_positions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bullet_positions_size());
    total_size += data_size;
  }

  // repeated uint32 url_part_positions = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->url_part_positions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->url_part_positions_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 terms_count = 1;
    if (has_terms_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terms_count());
    }

    // optional uint32 numbers_count = 2;
    if (has_numbers_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numbers_count());
    }

    // optional uint32 puncts_count = 3;
    if (has_puncts_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->puncts_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sentence_extension_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.index_meta_part.sentence.extension_info)
  GOOGLE_DCHECK_NE(&from, this);
  const sentence_extension_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sentence_extension_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.index_meta_part.sentence.extension_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.index_meta_part.sentence.extension_info)
    MergeFrom(*source);
  }
}

void sentence_extension_info::MergeFrom(const sentence_extension_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.index_meta_part.sentence.extension_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pipes_positions_.MergeFrom(from.pipes_positions_);
  right_angle_positions_.MergeFrom(from.right_angle_positions_);
  slash_positions_.MergeFrom(from.slash_positions_);
  back_slash_positions_.MergeFrom(from.back_slash_positions_);
  left_parentheses_positions_.MergeFrom(from.left_parentheses_positions_);
  right_parentheses_positiosn_.MergeFrom(from.right_parentheses_positiosn_);
  em_dash_positions_.MergeFrom(from.em_dash_positions_);
  en_dash_positions_.MergeFrom(from.en_dash_positions_);
  bullet_positions_.MergeFrom(from.bullet_positions_);
  url_part_positions_.MergeFrom(from.url_part_positions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      terms_count_ = from.terms_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      numbers_count_ = from.numbers_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      puncts_count_ = from.puncts_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void sentence_extension_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.index_meta_part.sentence.extension_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sentence_extension_info::CopyFrom(const sentence_extension_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.index_meta_part.sentence.extension_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sentence_extension_info::IsInitialized() const {
  return true;
}

void sentence_extension_info::Swap(sentence_extension_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sentence_extension_info::InternalSwap(sentence_extension_info* other) {
  using std::swap;
  pipes_positions_.InternalSwap(&other->pipes_positions_);
  right_angle_positions_.InternalSwap(&other->right_angle_positions_);
  slash_positions_.InternalSwap(&other->slash_positions_);
  back_slash_positions_.InternalSwap(&other->back_slash_positions_);
  left_parentheses_positions_.InternalSwap(&other->left_parentheses_positions_);
  right_parentheses_positiosn_.InternalSwap(&other->right_parentheses_positiosn_);
  em_dash_positions_.InternalSwap(&other->em_dash_positions_);
  en_dash_positions_.InternalSwap(&other->en_dash_positions_);
  bullet_positions_.InternalSwap(&other->bullet_positions_);
  url_part_positions_.InternalSwap(&other->url_part_positions_);
  swap(terms_count_, other->terms_count_);
  swap(numbers_count_, other->numbers_count_);
  swap(puncts_count_, other->puncts_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sentence_extension_info::GetMetadata() const {
  protobuf_index_5fmeta_5fpart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_index_5fmeta_5fpart_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sentence_extension_info

// optional uint32 terms_count = 1;
bool sentence_extension_info::has_terms_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void sentence_extension_info::set_has_terms_count() {
  _has_bits_[0] |= 0x00000001u;
}
void sentence_extension_info::clear_has_terms_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void sentence_extension_info::clear_terms_count() {
  terms_count_ = 0u;
  clear_has_terms_count();
}
::google::protobuf::uint32 sentence_extension_info::terms_count() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.extension_info.terms_count)
  return terms_count_;
}
void sentence_extension_info::set_terms_count(::google::protobuf::uint32 value) {
  set_has_terms_count();
  terms_count_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.extension_info.terms_count)
}

// optional uint32 numbers_count = 2;
bool sentence_extension_info::has_numbers_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void sentence_extension_info::set_has_numbers_count() {
  _has_bits_[0] |= 0x00000002u;
}
void sentence_extension_info::clear_has_numbers_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void sentence_extension_info::clear_numbers_count() {
  numbers_count_ = 0u;
  clear_has_numbers_count();
}
::google::protobuf::uint32 sentence_extension_info::numbers_count() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.extension_info.numbers_count)
  return numbers_count_;
}
void sentence_extension_info::set_numbers_count(::google::protobuf::uint32 value) {
  set_has_numbers_count();
  numbers_count_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.extension_info.numbers_count)
}

// optional uint32 puncts_count = 3;
bool sentence_extension_info::has_puncts_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void sentence_extension_info::set_has_puncts_count() {
  _has_bits_[0] |= 0x00000004u;
}
void sentence_extension_info::clear_has_puncts_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void sentence_extension_info::clear_puncts_count() {
  puncts_count_ = 0u;
  clear_has_puncts_count();
}
::google::protobuf::uint32 sentence_extension_info::puncts_count() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.extension_info.puncts_count)
  return puncts_count_;
}
void sentence_extension_info::set_puncts_count(::google::protobuf::uint32 value) {
  set_has_puncts_count();
  puncts_count_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.extension_info.puncts_count)
}

// repeated uint32 pipes_positions = 4;
int sentence_extension_info::pipes_positions_size() const {
  return pipes_positions_.size();
}
void sentence_extension_info::clear_pipes_positions() {
  pipes_positions_.Clear();
}
::google::protobuf::uint32 sentence_extension_info::pipes_positions(int index) const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.extension_info.pipes_positions)
  return pipes_positions_.Get(index);
}
void sentence_extension_info::set_pipes_positions(int index, ::google::protobuf::uint32 value) {
  pipes_positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.extension_info.pipes_positions)
}
void sentence_extension_info::add_pipes_positions(::google::protobuf::uint32 value) {
  pipes_positions_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.index_meta_part.sentence.extension_info.pipes_positions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sentence_extension_info::pipes_positions() const {
  // @@protoc_insertion_point(field_list:gogo.index_meta_part.sentence.extension_info.pipes_positions)
  return pipes_positions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sentence_extension_info::mutable_pipes_positions() {
  // @@protoc_insertion_point(field_mutable_list:gogo.index_meta_part.sentence.extension_info.pipes_positions)
  return &pipes_positions_;
}

// repeated uint32 right_angle_positions = 5;
int sentence_extension_info::right_angle_positions_size() const {
  return right_angle_positions_.size();
}
void sentence_extension_info::clear_right_angle_positions() {
  right_angle_positions_.Clear();
}
::google::protobuf::uint32 sentence_extension_info::right_angle_positions(int index) const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.extension_info.right_angle_positions)
  return right_angle_positions_.Get(index);
}
void sentence_extension_info::set_right_angle_positions(int index, ::google::protobuf::uint32 value) {
  right_angle_positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.extension_info.right_angle_positions)
}
void sentence_extension_info::add_right_angle_positions(::google::protobuf::uint32 value) {
  right_angle_positions_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.index_meta_part.sentence.extension_info.right_angle_positions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sentence_extension_info::right_angle_positions() const {
  // @@protoc_insertion_point(field_list:gogo.index_meta_part.sentence.extension_info.right_angle_positions)
  return right_angle_positions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sentence_extension_info::mutable_right_angle_positions() {
  // @@protoc_insertion_point(field_mutable_list:gogo.index_meta_part.sentence.extension_info.right_angle_positions)
  return &right_angle_positions_;
}

// repeated uint32 slash_positions = 6;
int sentence_extension_info::slash_positions_size() const {
  return slash_positions_.size();
}
void sentence_extension_info::clear_slash_positions() {
  slash_positions_.Clear();
}
::google::protobuf::uint32 sentence_extension_info::slash_positions(int index) const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.extension_info.slash_positions)
  return slash_positions_.Get(index);
}
void sentence_extension_info::set_slash_positions(int index, ::google::protobuf::uint32 value) {
  slash_positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.extension_info.slash_positions)
}
void sentence_extension_info::add_slash_positions(::google::protobuf::uint32 value) {
  slash_positions_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.index_meta_part.sentence.extension_info.slash_positions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sentence_extension_info::slash_positions() const {
  // @@protoc_insertion_point(field_list:gogo.index_meta_part.sentence.extension_info.slash_positions)
  return slash_positions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sentence_extension_info::mutable_slash_positions() {
  // @@protoc_insertion_point(field_mutable_list:gogo.index_meta_part.sentence.extension_info.slash_positions)
  return &slash_positions_;
}

// repeated uint32 back_slash_positions = 7;
int sentence_extension_info::back_slash_positions_size() const {
  return back_slash_positions_.size();
}
void sentence_extension_info::clear_back_slash_positions() {
  back_slash_positions_.Clear();
}
::google::protobuf::uint32 sentence_extension_info::back_slash_positions(int index) const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.extension_info.back_slash_positions)
  return back_slash_positions_.Get(index);
}
void sentence_extension_info::set_back_slash_positions(int index, ::google::protobuf::uint32 value) {
  back_slash_positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.extension_info.back_slash_positions)
}
void sentence_extension_info::add_back_slash_positions(::google::protobuf::uint32 value) {
  back_slash_positions_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.index_meta_part.sentence.extension_info.back_slash_positions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sentence_extension_info::back_slash_positions() const {
  // @@protoc_insertion_point(field_list:gogo.index_meta_part.sentence.extension_info.back_slash_positions)
  return back_slash_positions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sentence_extension_info::mutable_back_slash_positions() {
  // @@protoc_insertion_point(field_mutable_list:gogo.index_meta_part.sentence.extension_info.back_slash_positions)
  return &back_slash_positions_;
}

// repeated uint32 left_parentheses_positions = 8;
int sentence_extension_info::left_parentheses_positions_size() const {
  return left_parentheses_positions_.size();
}
void sentence_extension_info::clear_left_parentheses_positions() {
  left_parentheses_positions_.Clear();
}
::google::protobuf::uint32 sentence_extension_info::left_parentheses_positions(int index) const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.extension_info.left_parentheses_positions)
  return left_parentheses_positions_.Get(index);
}
void sentence_extension_info::set_left_parentheses_positions(int index, ::google::protobuf::uint32 value) {
  left_parentheses_positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.extension_info.left_parentheses_positions)
}
void sentence_extension_info::add_left_parentheses_positions(::google::protobuf::uint32 value) {
  left_parentheses_positions_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.index_meta_part.sentence.extension_info.left_parentheses_positions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sentence_extension_info::left_parentheses_positions() const {
  // @@protoc_insertion_point(field_list:gogo.index_meta_part.sentence.extension_info.left_parentheses_positions)
  return left_parentheses_positions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sentence_extension_info::mutable_left_parentheses_positions() {
  // @@protoc_insertion_point(field_mutable_list:gogo.index_meta_part.sentence.extension_info.left_parentheses_positions)
  return &left_parentheses_positions_;
}

// repeated uint32 right_parentheses_positiosn = 9;
int sentence_extension_info::right_parentheses_positiosn_size() const {
  return right_parentheses_positiosn_.size();
}
void sentence_extension_info::clear_right_parentheses_positiosn() {
  right_parentheses_positiosn_.Clear();
}
::google::protobuf::uint32 sentence_extension_info::right_parentheses_positiosn(int index) const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.extension_info.right_parentheses_positiosn)
  return right_parentheses_positiosn_.Get(index);
}
void sentence_extension_info::set_right_parentheses_positiosn(int index, ::google::protobuf::uint32 value) {
  right_parentheses_positiosn_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.extension_info.right_parentheses_positiosn)
}
void sentence_extension_info::add_right_parentheses_positiosn(::google::protobuf::uint32 value) {
  right_parentheses_positiosn_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.index_meta_part.sentence.extension_info.right_parentheses_positiosn)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sentence_extension_info::right_parentheses_positiosn() const {
  // @@protoc_insertion_point(field_list:gogo.index_meta_part.sentence.extension_info.right_parentheses_positiosn)
  return right_parentheses_positiosn_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sentence_extension_info::mutable_right_parentheses_positiosn() {
  // @@protoc_insertion_point(field_mutable_list:gogo.index_meta_part.sentence.extension_info.right_parentheses_positiosn)
  return &right_parentheses_positiosn_;
}

// repeated uint32 em_dash_positions = 10;
int sentence_extension_info::em_dash_positions_size() const {
  return em_dash_positions_.size();
}
void sentence_extension_info::clear_em_dash_positions() {
  em_dash_positions_.Clear();
}
::google::protobuf::uint32 sentence_extension_info::em_dash_positions(int index) const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.extension_info.em_dash_positions)
  return em_dash_positions_.Get(index);
}
void sentence_extension_info::set_em_dash_positions(int index, ::google::protobuf::uint32 value) {
  em_dash_positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.extension_info.em_dash_positions)
}
void sentence_extension_info::add_em_dash_positions(::google::protobuf::uint32 value) {
  em_dash_positions_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.index_meta_part.sentence.extension_info.em_dash_positions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sentence_extension_info::em_dash_positions() const {
  // @@protoc_insertion_point(field_list:gogo.index_meta_part.sentence.extension_info.em_dash_positions)
  return em_dash_positions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sentence_extension_info::mutable_em_dash_positions() {
  // @@protoc_insertion_point(field_mutable_list:gogo.index_meta_part.sentence.extension_info.em_dash_positions)
  return &em_dash_positions_;
}

// repeated uint32 en_dash_positions = 11;
int sentence_extension_info::en_dash_positions_size() const {
  return en_dash_positions_.size();
}
void sentence_extension_info::clear_en_dash_positions() {
  en_dash_positions_.Clear();
}
::google::protobuf::uint32 sentence_extension_info::en_dash_positions(int index) const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.extension_info.en_dash_positions)
  return en_dash_positions_.Get(index);
}
void sentence_extension_info::set_en_dash_positions(int index, ::google::protobuf::uint32 value) {
  en_dash_positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.extension_info.en_dash_positions)
}
void sentence_extension_info::add_en_dash_positions(::google::protobuf::uint32 value) {
  en_dash_positions_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.index_meta_part.sentence.extension_info.en_dash_positions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sentence_extension_info::en_dash_positions() const {
  // @@protoc_insertion_point(field_list:gogo.index_meta_part.sentence.extension_info.en_dash_positions)
  return en_dash_positions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sentence_extension_info::mutable_en_dash_positions() {
  // @@protoc_insertion_point(field_mutable_list:gogo.index_meta_part.sentence.extension_info.en_dash_positions)
  return &en_dash_positions_;
}

// repeated uint32 bullet_positions = 12;
int sentence_extension_info::bullet_positions_size() const {
  return bullet_positions_.size();
}
void sentence_extension_info::clear_bullet_positions() {
  bullet_positions_.Clear();
}
::google::protobuf::uint32 sentence_extension_info::bullet_positions(int index) const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.extension_info.bullet_positions)
  return bullet_positions_.Get(index);
}
void sentence_extension_info::set_bullet_positions(int index, ::google::protobuf::uint32 value) {
  bullet_positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.extension_info.bullet_positions)
}
void sentence_extension_info::add_bullet_positions(::google::protobuf::uint32 value) {
  bullet_positions_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.index_meta_part.sentence.extension_info.bullet_positions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sentence_extension_info::bullet_positions() const {
  // @@protoc_insertion_point(field_list:gogo.index_meta_part.sentence.extension_info.bullet_positions)
  return bullet_positions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sentence_extension_info::mutable_bullet_positions() {
  // @@protoc_insertion_point(field_mutable_list:gogo.index_meta_part.sentence.extension_info.bullet_positions)
  return &bullet_positions_;
}

// repeated uint32 url_part_positions = 13;
int sentence_extension_info::url_part_positions_size() const {
  return url_part_positions_.size();
}
void sentence_extension_info::clear_url_part_positions() {
  url_part_positions_.Clear();
}
::google::protobuf::uint32 sentence_extension_info::url_part_positions(int index) const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.extension_info.url_part_positions)
  return url_part_positions_.Get(index);
}
void sentence_extension_info::set_url_part_positions(int index, ::google::protobuf::uint32 value) {
  url_part_positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.extension_info.url_part_positions)
}
void sentence_extension_info::add_url_part_positions(::google::protobuf::uint32 value) {
  url_part_positions_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.index_meta_part.sentence.extension_info.url_part_positions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sentence_extension_info::url_part_positions() const {
  // @@protoc_insertion_point(field_list:gogo.index_meta_part.sentence.extension_info.url_part_positions)
  return url_part_positions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sentence_extension_info::mutable_url_part_positions() {
  // @@protoc_insertion_point(field_mutable_list:gogo.index_meta_part.sentence.extension_info.url_part_positions)
  return &url_part_positions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sentence::kSentenceIndexFieldNumber;
const int sentence::kFirstItemIndexFieldNumber;
const int sentence::kLastItemIndexFieldNumber;
const int sentence::kLexicalDensityFieldNumber;
const int sentence::kReadabilityFieldNumber;
const int sentence::kQualityFieldNumber;
const int sentence::kHasInvectivesFieldNumber;
const int sentence::kParagraphIndexFieldNumber;
const int sentence::kParagraphTagFieldNumber;
const int sentence::kExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sentence::sentence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_index_5fmeta_5fpart_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.index_meta_part.sentence)
}
sentence::sentence(const sentence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paragraph_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_paragraph_tag()) {
    paragraph_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paragraph_tag_);
  }
  if (from.has_extension()) {
    extension_ = new ::gogo::index_meta_part::sentence_extension_info(*from.extension_);
  } else {
    extension_ = NULL;
  }
  ::memcpy(&sentence_index_, &from.sentence_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&paragraph_index_) -
    reinterpret_cast<char*>(&sentence_index_)) + sizeof(paragraph_index_));
  // @@protoc_insertion_point(copy_constructor:gogo.index_meta_part.sentence)
}

void sentence::SharedCtor() {
  _cached_size_ = 0;
  paragraph_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&extension_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&paragraph_index_) -
      reinterpret_cast<char*>(&extension_)) + sizeof(paragraph_index_));
}

sentence::~sentence() {
  // @@protoc_insertion_point(destructor:gogo.index_meta_part.sentence)
  SharedDtor();
}

void sentence::SharedDtor() {
  paragraph_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete extension_;
}

void sentence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sentence::descriptor() {
  protobuf_index_5fmeta_5fpart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_index_5fmeta_5fpart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const sentence& sentence::default_instance() {
  protobuf_index_5fmeta_5fpart_2eproto::InitDefaults();
  return *internal_default_instance();
}

sentence* sentence::New(::google::protobuf::Arena* arena) const {
  sentence* n = new sentence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sentence::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.index_meta_part.sentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!paragraph_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*paragraph_tag_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(extension_ != NULL);
      extension_->::gogo::index_meta_part::sentence_extension_info::Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&sentence_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quality_) -
        reinterpret_cast<char*>(&sentence_index_)) + sizeof(quality_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&has_invectives_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&paragraph_index_) -
        reinterpret_cast<char*>(&has_invectives_)) + sizeof(paragraph_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool sentence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.index_meta_part.sentence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sentence_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sentence_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sentence_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 first_item_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_first_item_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_item_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 last_item_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_item_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_item_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lexical_density = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_lexical_density();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lexical_density_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float readability = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_readability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &readability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.index_meta_part.sentence.InfQualityType quality = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::index_meta_part::sentence_InfQualityType_IsValid(value)) {
            set_quality(static_cast< ::gogo::index_meta_part::sentence_InfQualityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_invectives = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_has_invectives();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_invectives_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 paragraph_index = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_paragraph_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paragraph_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string paragraph_tag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paragraph_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->paragraph_tag().data(), static_cast<int>(this->paragraph_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.index_meta_part.sentence.paragraph_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.index_meta_part.sentence.extension_info extension = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.index_meta_part.sentence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.index_meta_part.sentence)
  return false;
#undef DO_
}

void sentence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.index_meta_part.sentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 sentence_index = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sentence_index(), output);
  }

  // required uint32 first_item_index = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->first_item_index(), output);
  }

  // required uint32 last_item_index = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_item_index(), output);
  }

  // optional float lexical_density = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->lexical_density(), output);
  }

  // optional float readability = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->readability(), output);
  }

  // optional .gogo.index_meta_part.sentence.InfQualityType quality = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->quality(), output);
  }

  // optional bool has_invectives = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_invectives(), output);
  }

  // optional uint32 paragraph_index = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->paragraph_index(), output);
  }

  // optional string paragraph_tag = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paragraph_tag().data(), static_cast<int>(this->paragraph_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.index_meta_part.sentence.paragraph_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->paragraph_tag(), output);
  }

  // optional .gogo.index_meta_part.sentence.extension_info extension = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->extension_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.index_meta_part.sentence)
}

::google::protobuf::uint8* sentence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.index_meta_part.sentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 sentence_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sentence_index(), target);
  }

  // required uint32 first_item_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->first_item_index(), target);
  }

  // required uint32 last_item_index = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_item_index(), target);
  }

  // optional float lexical_density = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->lexical_density(), target);
  }

  // optional float readability = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->readability(), target);
  }

  // optional .gogo.index_meta_part.sentence.InfQualityType quality = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->quality(), target);
  }

  // optional bool has_invectives = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_invectives(), target);
  }

  // optional uint32 paragraph_index = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->paragraph_index(), target);
  }

  // optional string paragraph_tag = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paragraph_tag().data(), static_cast<int>(this->paragraph_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.index_meta_part.sentence.paragraph_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->paragraph_tag(), target);
  }

  // optional .gogo.index_meta_part.sentence.extension_info extension = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->extension_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.index_meta_part.sentence)
  return target;
}

size_t sentence::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.index_meta_part.sentence)
  size_t total_size = 0;

  if (has_sentence_index()) {
    // required uint32 sentence_index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sentence_index());
  }

  if (has_first_item_index()) {
    // required uint32 first_item_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->first_item_index());
  }

  if (has_last_item_index()) {
    // required uint32 last_item_index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_item_index());
  }

  return total_size;
}
size_t sentence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.index_meta_part.sentence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required uint32 sentence_index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sentence_index());

    // required uint32 first_item_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->first_item_index());

    // required uint32 last_item_index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_item_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string paragraph_tag = 9;
    if (has_paragraph_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paragraph_tag());
    }

    // optional .gogo.index_meta_part.sentence.extension_info extension = 10;
    if (has_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->extension_);
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional float lexical_density = 4;
    if (has_lexical_density()) {
      total_size += 1 + 4;
    }

    // optional float readability = 5;
    if (has_readability()) {
      total_size += 1 + 4;
    }

    // optional .gogo.index_meta_part.sentence.InfQualityType quality = 6;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool has_invectives = 7;
    if (has_has_invectives()) {
      total_size += 1 + 1;
    }

    // optional uint32 paragraph_index = 8;
    if (has_paragraph_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paragraph_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sentence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.index_meta_part.sentence)
  GOOGLE_DCHECK_NE(&from, this);
  const sentence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sentence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.index_meta_part.sentence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.index_meta_part.sentence)
    MergeFrom(*source);
  }
}

void sentence::MergeFrom(const sentence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.index_meta_part.sentence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_paragraph_tag();
      paragraph_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paragraph_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_extension()->::gogo::index_meta_part::sentence_extension_info::MergeFrom(from.extension());
    }
    if (cached_has_bits & 0x00000004u) {
      sentence_index_ = from.sentence_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      first_item_index_ = from.first_item_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_item_index_ = from.last_item_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      lexical_density_ = from.lexical_density_;
    }
    if (cached_has_bits & 0x00000040u) {
      readability_ = from.readability_;
    }
    if (cached_has_bits & 0x00000080u) {
      quality_ = from.quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      has_invectives_ = from.has_invectives_;
    }
    if (cached_has_bits & 0x00000200u) {
      paragraph_index_ = from.paragraph_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void sentence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.index_meta_part.sentence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sentence::CopyFrom(const sentence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.index_meta_part.sentence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sentence::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  return true;
}

void sentence::Swap(sentence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sentence::InternalSwap(sentence* other) {
  using std::swap;
  paragraph_tag_.Swap(&other->paragraph_tag_);
  swap(extension_, other->extension_);
  swap(sentence_index_, other->sentence_index_);
  swap(first_item_index_, other->first_item_index_);
  swap(last_item_index_, other->last_item_index_);
  swap(lexical_density_, other->lexical_density_);
  swap(readability_, other->readability_);
  swap(quality_, other->quality_);
  swap(has_invectives_, other->has_invectives_);
  swap(paragraph_index_, other->paragraph_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sentence::GetMetadata() const {
  protobuf_index_5fmeta_5fpart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_index_5fmeta_5fpart_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sentence

// required uint32 sentence_index = 1;
bool sentence::has_sentence_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void sentence::set_has_sentence_index() {
  _has_bits_[0] |= 0x00000004u;
}
void sentence::clear_has_sentence_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void sentence::clear_sentence_index() {
  sentence_index_ = 0u;
  clear_has_sentence_index();
}
::google::protobuf::uint32 sentence::sentence_index() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.sentence_index)
  return sentence_index_;
}
void sentence::set_sentence_index(::google::protobuf::uint32 value) {
  set_has_sentence_index();
  sentence_index_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.sentence_index)
}

// required uint32 first_item_index = 2;
bool sentence::has_first_item_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void sentence::set_has_first_item_index() {
  _has_bits_[0] |= 0x00000008u;
}
void sentence::clear_has_first_item_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void sentence::clear_first_item_index() {
  first_item_index_ = 0u;
  clear_has_first_item_index();
}
::google::protobuf::uint32 sentence::first_item_index() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.first_item_index)
  return first_item_index_;
}
void sentence::set_first_item_index(::google::protobuf::uint32 value) {
  set_has_first_item_index();
  first_item_index_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.first_item_index)
}

// required uint32 last_item_index = 3;
bool sentence::has_last_item_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void sentence::set_has_last_item_index() {
  _has_bits_[0] |= 0x00000010u;
}
void sentence::clear_has_last_item_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void sentence::clear_last_item_index() {
  last_item_index_ = 0u;
  clear_has_last_item_index();
}
::google::protobuf::uint32 sentence::last_item_index() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.last_item_index)
  return last_item_index_;
}
void sentence::set_last_item_index(::google::protobuf::uint32 value) {
  set_has_last_item_index();
  last_item_index_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.last_item_index)
}

// optional float lexical_density = 4;
bool sentence::has_lexical_density() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void sentence::set_has_lexical_density() {
  _has_bits_[0] |= 0x00000020u;
}
void sentence::clear_has_lexical_density() {
  _has_bits_[0] &= ~0x00000020u;
}
void sentence::clear_lexical_density() {
  lexical_density_ = 0;
  clear_has_lexical_density();
}
float sentence::lexical_density() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.lexical_density)
  return lexical_density_;
}
void sentence::set_lexical_density(float value) {
  set_has_lexical_density();
  lexical_density_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.lexical_density)
}

// optional float readability = 5;
bool sentence::has_readability() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void sentence::set_has_readability() {
  _has_bits_[0] |= 0x00000040u;
}
void sentence::clear_has_readability() {
  _has_bits_[0] &= ~0x00000040u;
}
void sentence::clear_readability() {
  readability_ = 0;
  clear_has_readability();
}
float sentence::readability() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.readability)
  return readability_;
}
void sentence::set_readability(float value) {
  set_has_readability();
  readability_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.readability)
}

// optional .gogo.index_meta_part.sentence.InfQualityType quality = 6;
bool sentence::has_quality() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void sentence::set_has_quality() {
  _has_bits_[0] |= 0x00000080u;
}
void sentence::clear_has_quality() {
  _has_bits_[0] &= ~0x00000080u;
}
void sentence::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
::gogo::index_meta_part::sentence_InfQualityType sentence::quality() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.quality)
  return static_cast< ::gogo::index_meta_part::sentence_InfQualityType >(quality_);
}
void sentence::set_quality(::gogo::index_meta_part::sentence_InfQualityType value) {
  assert(::gogo::index_meta_part::sentence_InfQualityType_IsValid(value));
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.quality)
}

// optional bool has_invectives = 7;
bool sentence::has_has_invectives() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void sentence::set_has_has_invectives() {
  _has_bits_[0] |= 0x00000100u;
}
void sentence::clear_has_has_invectives() {
  _has_bits_[0] &= ~0x00000100u;
}
void sentence::clear_has_invectives() {
  has_invectives_ = false;
  clear_has_has_invectives();
}
bool sentence::has_invectives() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.has_invectives)
  return has_invectives_;
}
void sentence::set_has_invectives(bool value) {
  set_has_has_invectives();
  has_invectives_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.has_invectives)
}

// optional uint32 paragraph_index = 8;
bool sentence::has_paragraph_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void sentence::set_has_paragraph_index() {
  _has_bits_[0] |= 0x00000200u;
}
void sentence::clear_has_paragraph_index() {
  _has_bits_[0] &= ~0x00000200u;
}
void sentence::clear_paragraph_index() {
  paragraph_index_ = 0u;
  clear_has_paragraph_index();
}
::google::protobuf::uint32 sentence::paragraph_index() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.paragraph_index)
  return paragraph_index_;
}
void sentence::set_paragraph_index(::google::protobuf::uint32 value) {
  set_has_paragraph_index();
  paragraph_index_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.paragraph_index)
}

// optional string paragraph_tag = 9;
bool sentence::has_paragraph_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void sentence::set_has_paragraph_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void sentence::clear_has_paragraph_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void sentence::clear_paragraph_tag() {
  paragraph_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_paragraph_tag();
}
const ::std::string& sentence::paragraph_tag() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.paragraph_tag)
  return paragraph_tag_.GetNoArena();
}
void sentence::set_paragraph_tag(const ::std::string& value) {
  set_has_paragraph_tag();
  paragraph_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence.paragraph_tag)
}
#if LANG_CXX11
void sentence::set_paragraph_tag(::std::string&& value) {
  set_has_paragraph_tag();
  paragraph_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.index_meta_part.sentence.paragraph_tag)
}
#endif
void sentence::set_paragraph_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_paragraph_tag();
  paragraph_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.index_meta_part.sentence.paragraph_tag)
}
void sentence::set_paragraph_tag(const char* value, size_t size) {
  set_has_paragraph_tag();
  paragraph_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.index_meta_part.sentence.paragraph_tag)
}
::std::string* sentence::mutable_paragraph_tag() {
  set_has_paragraph_tag();
  // @@protoc_insertion_point(field_mutable:gogo.index_meta_part.sentence.paragraph_tag)
  return paragraph_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* sentence::release_paragraph_tag() {
  // @@protoc_insertion_point(field_release:gogo.index_meta_part.sentence.paragraph_tag)
  clear_has_paragraph_tag();
  return paragraph_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sentence::set_allocated_paragraph_tag(::std::string* paragraph_tag) {
  if (paragraph_tag != NULL) {
    set_has_paragraph_tag();
  } else {
    clear_has_paragraph_tag();
  }
  paragraph_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paragraph_tag);
  // @@protoc_insertion_point(field_set_allocated:gogo.index_meta_part.sentence.paragraph_tag)
}

// optional .gogo.index_meta_part.sentence.extension_info extension = 10;
bool sentence::has_extension() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void sentence::set_has_extension() {
  _has_bits_[0] |= 0x00000002u;
}
void sentence::clear_has_extension() {
  _has_bits_[0] &= ~0x00000002u;
}
void sentence::clear_extension() {
  if (extension_ != NULL) extension_->::gogo::index_meta_part::sentence_extension_info::Clear();
  clear_has_extension();
}
const ::gogo::index_meta_part::sentence_extension_info& sentence::extension() const {
  const ::gogo::index_meta_part::sentence_extension_info* p = extension_;
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence.extension)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::index_meta_part::sentence_extension_info*>(
      &::gogo::index_meta_part::_sentence_extension_info_default_instance_);
}
::gogo::index_meta_part::sentence_extension_info* sentence::mutable_extension() {
  set_has_extension();
  if (extension_ == NULL) {
    extension_ = new ::gogo::index_meta_part::sentence_extension_info;
  }
  // @@protoc_insertion_point(field_mutable:gogo.index_meta_part.sentence.extension)
  return extension_;
}
::gogo::index_meta_part::sentence_extension_info* sentence::release_extension() {
  // @@protoc_insertion_point(field_release:gogo.index_meta_part.sentence.extension)
  clear_has_extension();
  ::gogo::index_meta_part::sentence_extension_info* temp = extension_;
  extension_ = NULL;
  return temp;
}
void sentence::set_allocated_extension(::gogo::index_meta_part::sentence_extension_info* extension) {
  delete extension_;
  extension_ = extension;
  if (extension) {
    set_has_extension();
  } else {
    clear_has_extension();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.index_meta_part.sentence.extension)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sentence2::kSentenceIndexFieldNumber;
const int sentence2::kFirstItemIndexFieldNumber;
const int sentence2::kLastItemIndexFieldNumber;
const int sentence2::kQualityFieldNumber;
const int sentence2::kHasInvectivesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sentence2::sentence2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_index_5fmeta_5fpart_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.index_meta_part.sentence2)
}
sentence2::sentence2(const sentence2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sentence_index_, &from.sentence_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_invectives_) -
    reinterpret_cast<char*>(&sentence_index_)) + sizeof(has_invectives_));
  // @@protoc_insertion_point(copy_constructor:gogo.index_meta_part.sentence2)
}

void sentence2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sentence_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_invectives_) -
      reinterpret_cast<char*>(&sentence_index_)) + sizeof(has_invectives_));
}

sentence2::~sentence2() {
  // @@protoc_insertion_point(destructor:gogo.index_meta_part.sentence2)
  SharedDtor();
}

void sentence2::SharedDtor() {
}

void sentence2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sentence2::descriptor() {
  protobuf_index_5fmeta_5fpart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_index_5fmeta_5fpart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const sentence2& sentence2::default_instance() {
  protobuf_index_5fmeta_5fpart_2eproto::InitDefaults();
  return *internal_default_instance();
}

sentence2* sentence2::New(::google::protobuf::Arena* arena) const {
  sentence2* n = new sentence2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sentence2::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.index_meta_part.sentence2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&sentence_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_invectives_) -
        reinterpret_cast<char*>(&sentence_index_)) + sizeof(has_invectives_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool sentence2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.index_meta_part.sentence2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sentence_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sentence_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sentence_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 first_item_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_first_item_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_item_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 last_item_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_item_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_item_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.index_meta_part.sentence.InfQualityType quality = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::index_meta_part::sentence_InfQualityType_IsValid(value)) {
            set_quality(static_cast< ::gogo::index_meta_part::sentence_InfQualityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_invectives = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_has_invectives();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_invectives_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.index_meta_part.sentence2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.index_meta_part.sentence2)
  return false;
#undef DO_
}

void sentence2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.index_meta_part.sentence2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 sentence_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sentence_index(), output);
  }

  // required uint32 first_item_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->first_item_index(), output);
  }

  // required uint32 last_item_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_item_index(), output);
  }

  // optional .gogo.index_meta_part.sentence.InfQualityType quality = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->quality(), output);
  }

  // optional bool has_invectives = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_invectives(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.index_meta_part.sentence2)
}

::google::protobuf::uint8* sentence2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.index_meta_part.sentence2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 sentence_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sentence_index(), target);
  }

  // required uint32 first_item_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->first_item_index(), target);
  }

  // required uint32 last_item_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_item_index(), target);
  }

  // optional .gogo.index_meta_part.sentence.InfQualityType quality = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->quality(), target);
  }

  // optional bool has_invectives = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->has_invectives(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.index_meta_part.sentence2)
  return target;
}

size_t sentence2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.index_meta_part.sentence2)
  size_t total_size = 0;

  if (has_sentence_index()) {
    // required uint32 sentence_index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sentence_index());
  }

  if (has_first_item_index()) {
    // required uint32 first_item_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->first_item_index());
  }

  if (has_last_item_index()) {
    // required uint32 last_item_index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_item_index());
  }

  return total_size;
}
size_t sentence2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.index_meta_part.sentence2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 sentence_index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sentence_index());

    // required uint32 first_item_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->first_item_index());

    // required uint32 last_item_index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_item_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional .gogo.index_meta_part.sentence.InfQualityType quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

    // optional bool has_invectives = 5;
    if (has_has_invectives()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sentence2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.index_meta_part.sentence2)
  GOOGLE_DCHECK_NE(&from, this);
  const sentence2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sentence2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.index_meta_part.sentence2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.index_meta_part.sentence2)
    MergeFrom(*source);
  }
}

void sentence2::MergeFrom(const sentence2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.index_meta_part.sentence2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      sentence_index_ = from.sentence_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      first_item_index_ = from.first_item_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_item_index_ = from.last_item_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000010u) {
      has_invectives_ = from.has_invectives_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void sentence2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.index_meta_part.sentence2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sentence2::CopyFrom(const sentence2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.index_meta_part.sentence2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sentence2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void sentence2::Swap(sentence2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sentence2::InternalSwap(sentence2* other) {
  using std::swap;
  swap(sentence_index_, other->sentence_index_);
  swap(first_item_index_, other->first_item_index_);
  swap(last_item_index_, other->last_item_index_);
  swap(quality_, other->quality_);
  swap(has_invectives_, other->has_invectives_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sentence2::GetMetadata() const {
  protobuf_index_5fmeta_5fpart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_index_5fmeta_5fpart_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sentence2

// required uint32 sentence_index = 1;
bool sentence2::has_sentence_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void sentence2::set_has_sentence_index() {
  _has_bits_[0] |= 0x00000001u;
}
void sentence2::clear_has_sentence_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void sentence2::clear_sentence_index() {
  sentence_index_ = 0u;
  clear_has_sentence_index();
}
::google::protobuf::uint32 sentence2::sentence_index() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence2.sentence_index)
  return sentence_index_;
}
void sentence2::set_sentence_index(::google::protobuf::uint32 value) {
  set_has_sentence_index();
  sentence_index_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence2.sentence_index)
}

// required uint32 first_item_index = 2;
bool sentence2::has_first_item_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void sentence2::set_has_first_item_index() {
  _has_bits_[0] |= 0x00000002u;
}
void sentence2::clear_has_first_item_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void sentence2::clear_first_item_index() {
  first_item_index_ = 0u;
  clear_has_first_item_index();
}
::google::protobuf::uint32 sentence2::first_item_index() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence2.first_item_index)
  return first_item_index_;
}
void sentence2::set_first_item_index(::google::protobuf::uint32 value) {
  set_has_first_item_index();
  first_item_index_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence2.first_item_index)
}

// required uint32 last_item_index = 3;
bool sentence2::has_last_item_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void sentence2::set_has_last_item_index() {
  _has_bits_[0] |= 0x00000004u;
}
void sentence2::clear_has_last_item_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void sentence2::clear_last_item_index() {
  last_item_index_ = 0u;
  clear_has_last_item_index();
}
::google::protobuf::uint32 sentence2::last_item_index() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence2.last_item_index)
  return last_item_index_;
}
void sentence2::set_last_item_index(::google::protobuf::uint32 value) {
  set_has_last_item_index();
  last_item_index_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence2.last_item_index)
}

// optional .gogo.index_meta_part.sentence.InfQualityType quality = 4;
bool sentence2::has_quality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void sentence2::set_has_quality() {
  _has_bits_[0] |= 0x00000008u;
}
void sentence2::clear_has_quality() {
  _has_bits_[0] &= ~0x00000008u;
}
void sentence2::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
::gogo::index_meta_part::sentence_InfQualityType sentence2::quality() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence2.quality)
  return static_cast< ::gogo::index_meta_part::sentence_InfQualityType >(quality_);
}
void sentence2::set_quality(::gogo::index_meta_part::sentence_InfQualityType value) {
  assert(::gogo::index_meta_part::sentence_InfQualityType_IsValid(value));
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence2.quality)
}

// optional bool has_invectives = 5;
bool sentence2::has_has_invectives() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void sentence2::set_has_has_invectives() {
  _has_bits_[0] |= 0x00000010u;
}
void sentence2::clear_has_has_invectives() {
  _has_bits_[0] &= ~0x00000010u;
}
void sentence2::clear_has_invectives() {
  has_invectives_ = false;
  clear_has_has_invectives();
}
bool sentence2::has_invectives() const {
  // @@protoc_insertion_point(field_get:gogo.index_meta_part.sentence2.has_invectives)
  return has_invectives_;
}
void sentence2::set_has_invectives(bool value) {
  set_has_has_invectives();
  has_invectives_ = value;
  // @@protoc_insertion_point(field_set:gogo.index_meta_part.sentence2.has_invectives)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace index_meta_part
}  // namespace gogo

// @@protoc_insertion_point(global_scope)
