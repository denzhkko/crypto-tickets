// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lingvo_dump.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lingvo_dump.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace lingvo {
namespace dump {
class DumpFieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DumpField>
     _instance;
} _DumpField_default_instance_;
class DocUrlDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocUrl>
     _instance;
} _DocUrl_default_instance_;
class DocContentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocContent>
     _instance;
} _DocContent_default_instance_;

namespace protobuf_lingvo_5fdump_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpField, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpField, val_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocUrl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocUrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocUrl, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocUrl, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocUrl, dump_fields_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocContent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocContent, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocContent, download_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocContent, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocContent, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocContent, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocContent, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocContent, dump_fields_),
  0,
  2,
  1,
  3,
  4,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(DumpField)},
  { 9, 17, sizeof(DocUrl)},
  { 20, 32, sizeof(DocContent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DumpField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocUrl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocContent_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "lingvo_dump.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::InitDefaults();
  _DumpField_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DumpField_default_instance_);_DocUrl_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocUrl_default_instance_);_DocContent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocContent_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021lingvo_dump.proto\022\036ru.mail.go.webbase."
      "lingvo.dump\032\024document_enums.proto\"%\n\tDum"
      "pField\022\013\n\003key\030\001 \002(\t\022\013\n\003val\030\002 \002(\t\"e\n\006DocU"
      "rl\022\013\n\003url\030\001 \002(\t\022\016\n\006labels\030\002 \003(\t\022>\n\013dump_"
      "fields\030\003 \003(\0132).ru.mail.go.webbase.lingvo"
      ".dump.DumpField\"\375\001\n\nDocContent\022\013\n\003url\030\001 "
      "\002(\t\022\025\n\rdownload_time\030\002 \002(\004\022\017\n\007content\030\003 "
      "\002(\014\0224\n\010encoding\030\004 \002(\0162\".ru.mail.go.webba"
      "se.blobs.Encoding\0224\n\010language\030\005 \002(\0162\".ru"
      ".mail.go.webbase.blobs.Language\022\016\n\006label"
      "s\030\006 \003(\t\022>\n\013dump_fields\030\007 \003(\0132).ru.mail.g"
      "o.webbase.lingvo.dump.DumpFieldB\022B\020Filte"
      "redHtmlDump"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 491);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lingvo_dump.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_lingvo_5fdump_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DumpField::kKeyFieldNumber;
const int DumpField::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DumpField::DumpField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lingvo_5fdump_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.lingvo.dump.DumpField)
}
DumpField::DumpField(const DumpField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val()) {
    val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.lingvo.dump.DumpField)
}

void DumpField::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DumpField::~DumpField() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.lingvo.dump.DumpField)
  SharedDtor();
}

void DumpField::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DumpField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpField::descriptor() {
  protobuf_lingvo_5fdump_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lingvo_5fdump_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DumpField& DumpField::default_instance() {
  protobuf_lingvo_5fdump_2eproto::InitDefaults();
  return *internal_default_instance();
}

DumpField* DumpField::New(::google::protobuf::Arena* arena) const {
  DumpField* n = new DumpField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DumpField::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.lingvo.dump.DumpField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!val_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*val_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DumpField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.lingvo.dump.DumpField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.lingvo.dump.DumpField.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string val = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val().data(), static_cast<int>(this->val().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.lingvo.dump.DumpField.val");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.lingvo.dump.DumpField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.lingvo.dump.DumpField)
  return false;
#undef DO_
}

void DumpField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.lingvo.dump.DumpField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.lingvo.dump.DumpField.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string val = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val().data(), static_cast<int>(this->val().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.lingvo.dump.DumpField.val");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.lingvo.dump.DumpField)
}

::google::protobuf::uint8* DumpField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.lingvo.dump.DumpField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.lingvo.dump.DumpField.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string val = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val().data(), static_cast<int>(this->val().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.lingvo.dump.DumpField.val");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.lingvo.dump.DumpField)
  return target;
}

size_t DumpField::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.lingvo.dump.DumpField)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_val()) {
    // required string val = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->val());
  }

  return total_size;
}
size_t DumpField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.lingvo.dump.DumpField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string val = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->val());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.lingvo.dump.DumpField)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DumpField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.lingvo.dump.DumpField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.lingvo.dump.DumpField)
    MergeFrom(*source);
  }
}

void DumpField::MergeFrom(const DumpField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.lingvo.dump.DumpField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_val();
      val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
    }
  }
}

void DumpField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.lingvo.dump.DumpField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpField::CopyFrom(const DumpField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.lingvo.dump.DumpField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DumpField::Swap(DumpField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DumpField::InternalSwap(DumpField* other) {
  using std::swap;
  key_.Swap(&other->key_);
  val_.Swap(&other->val_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DumpField::GetMetadata() const {
  protobuf_lingvo_5fdump_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lingvo_5fdump_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DumpField

// required string key = 1;
bool DumpField::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DumpField::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void DumpField::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void DumpField::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& DumpField::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DumpField.key)
  return key_.GetNoArena();
}
void DumpField::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DumpField.key)
}
#if LANG_CXX11
void DumpField::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.lingvo.dump.DumpField.key)
}
#endif
void DumpField::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.lingvo.dump.DumpField.key)
}
void DumpField::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.lingvo.dump.DumpField.key)
}
::std::string* DumpField::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DumpField.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpField::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.lingvo.dump.DumpField.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpField::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.lingvo.dump.DumpField.key)
}

// required string val = 2;
bool DumpField::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DumpField::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
void DumpField::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
void DumpField::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_val();
}
const ::std::string& DumpField::val() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DumpField.val)
  return val_.GetNoArena();
}
void DumpField::set_val(const ::std::string& value) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DumpField.val)
}
#if LANG_CXX11
void DumpField::set_val(::std::string&& value) {
  set_has_val();
  val_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.lingvo.dump.DumpField.val)
}
#endif
void DumpField::set_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.lingvo.dump.DumpField.val)
}
void DumpField::set_val(const char* value, size_t size) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.lingvo.dump.DumpField.val)
}
::std::string* DumpField::mutable_val() {
  set_has_val();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DumpField.val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpField::release_val() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.lingvo.dump.DumpField.val)
  clear_has_val();
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpField::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    set_has_val();
  } else {
    clear_has_val();
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.lingvo.dump.DumpField.val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocUrl::kUrlFieldNumber;
const int DocUrl::kLabelsFieldNumber;
const int DocUrl::kDumpFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocUrl::DocUrl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lingvo_5fdump_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.lingvo.dump.DocUrl)
}
DocUrl::DocUrl(const DocUrl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      labels_(from.labels_),
      dump_fields_(from.dump_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.lingvo.dump.DocUrl)
}

void DocUrl::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DocUrl::~DocUrl() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.lingvo.dump.DocUrl)
  SharedDtor();
}

void DocUrl::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DocUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocUrl::descriptor() {
  protobuf_lingvo_5fdump_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lingvo_5fdump_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocUrl& DocUrl::default_instance() {
  protobuf_lingvo_5fdump_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocUrl* DocUrl::New(::google::protobuf::Arena* arena) const {
  DocUrl* n = new DocUrl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocUrl::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.lingvo.dump.DocUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  dump_fields_.Clear();
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.lingvo.dump.DocUrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.lingvo.dump.DocUrl.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string labels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            static_cast<int>(this->labels(this->labels_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.lingvo.dump.DocUrl.labels");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.lingvo.dump.DumpField dump_fields = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dump_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.lingvo.dump.DocUrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.lingvo.dump.DocUrl)
  return false;
#undef DO_
}

void DocUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.lingvo.dump.DocUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.lingvo.dump.DocUrl.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // repeated string labels = 2;
  for (int i = 0, n = this->labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), static_cast<int>(this->labels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.lingvo.dump.DocUrl.labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->labels(i), output);
  }

  // repeated .ru.mail.go.webbase.lingvo.dump.DumpField dump_fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dump_fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dump_fields(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.lingvo.dump.DocUrl)
}

::google::protobuf::uint8* DocUrl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.lingvo.dump.DocUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.lingvo.dump.DocUrl.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // repeated string labels = 2;
  for (int i = 0, n = this->labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), static_cast<int>(this->labels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.lingvo.dump.DocUrl.labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->labels(i), target);
  }

  // repeated .ru.mail.go.webbase.lingvo.dump.DumpField dump_fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dump_fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->dump_fields(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.lingvo.dump.DocUrl)
  return target;
}

size_t DocUrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.lingvo.dump.DocUrl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  // repeated string labels = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  for (int i = 0, n = this->labels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  // repeated .ru.mail.go.webbase.lingvo.dump.DumpField dump_fields = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->dump_fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dump_fields(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocUrl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.lingvo.dump.DocUrl)
  GOOGLE_DCHECK_NE(&from, this);
  const DocUrl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocUrl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.lingvo.dump.DocUrl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.lingvo.dump.DocUrl)
    MergeFrom(*source);
  }
}

void DocUrl::MergeFrom(const DocUrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.lingvo.dump.DocUrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  dump_fields_.MergeFrom(from.dump_fields_);
  if (from.has_url()) {
    set_has_url();
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void DocUrl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.lingvo.dump.DocUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocUrl::CopyFrom(const DocUrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.lingvo.dump.DocUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocUrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dump_fields())) return false;
  return true;
}

void DocUrl::Swap(DocUrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocUrl::InternalSwap(DocUrl* other) {
  using std::swap;
  labels_.InternalSwap(&other->labels_);
  dump_fields_.InternalSwap(&other->dump_fields_);
  url_.Swap(&other->url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocUrl::GetMetadata() const {
  protobuf_lingvo_5fdump_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lingvo_5fdump_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocUrl

// required string url = 1;
bool DocUrl::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocUrl::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void DocUrl::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocUrl::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& DocUrl::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocUrl.url)
  return url_.GetNoArena();
}
void DocUrl::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocUrl.url)
}
#if LANG_CXX11
void DocUrl::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.lingvo.dump.DocUrl.url)
}
#endif
void DocUrl::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.lingvo.dump.DocUrl.url)
}
void DocUrl::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.lingvo.dump.DocUrl.url)
}
::std::string* DocUrl::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DocUrl.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocUrl::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.lingvo.dump.DocUrl.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocUrl::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.lingvo.dump.DocUrl.url)
}

// repeated string labels = 2;
int DocUrl::labels_size() const {
  return labels_.size();
}
void DocUrl::clear_labels() {
  labels_.Clear();
}
const ::std::string& DocUrl::labels(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
  return labels_.Get(index);
}
::std::string* DocUrl::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
  return labels_.Mutable(index);
}
void DocUrl::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
  labels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DocUrl::set_labels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
#endif
void DocUrl::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
}
void DocUrl::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
}
::std::string* DocUrl::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
  return labels_.Add();
}
void DocUrl::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
}
#if LANG_CXX11
void DocUrl::add_labels(::std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
}
#endif
void DocUrl::add_labels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
}
void DocUrl::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DocUrl::labels() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
  return labels_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DocUrl::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
  return &labels_;
}

// repeated .ru.mail.go.webbase.lingvo.dump.DumpField dump_fields = 3;
int DocUrl::dump_fields_size() const {
  return dump_fields_.size();
}
void DocUrl::clear_dump_fields() {
  dump_fields_.Clear();
}
const ::ru::mail::go::webbase::lingvo::dump::DumpField& DocUrl::dump_fields(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocUrl.dump_fields)
  return dump_fields_.Get(index);
}
::ru::mail::go::webbase::lingvo::dump::DumpField* DocUrl::mutable_dump_fields(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DocUrl.dump_fields)
  return dump_fields_.Mutable(index);
}
::ru::mail::go::webbase::lingvo::dump::DumpField* DocUrl::add_dump_fields() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.lingvo.dump.DocUrl.dump_fields)
  return dump_fields_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::lingvo::dump::DumpField >*
DocUrl::mutable_dump_fields() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.lingvo.dump.DocUrl.dump_fields)
  return &dump_fields_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::lingvo::dump::DumpField >&
DocUrl::dump_fields() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.lingvo.dump.DocUrl.dump_fields)
  return dump_fields_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocContent::kUrlFieldNumber;
const int DocContent::kDownloadTimeFieldNumber;
const int DocContent::kContentFieldNumber;
const int DocContent::kEncodingFieldNumber;
const int DocContent::kLanguageFieldNumber;
const int DocContent::kLabelsFieldNumber;
const int DocContent::kDumpFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocContent::DocContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lingvo_5fdump_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.lingvo.dump.DocContent)
}
DocContent::DocContent(const DocContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      labels_(from.labels_),
      dump_fields_(from.dump_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&download_time_, &from.download_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&download_time_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.lingvo.dump.DocContent)
}

void DocContent::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&download_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&language_) -
      reinterpret_cast<char*>(&download_time_)) + sizeof(language_));
}

DocContent::~DocContent() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.lingvo.dump.DocContent)
  SharedDtor();
}

void DocContent::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DocContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocContent::descriptor() {
  protobuf_lingvo_5fdump_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lingvo_5fdump_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocContent& DocContent::default_instance() {
  protobuf_lingvo_5fdump_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocContent* DocContent::New(::google::protobuf::Arena* arena) const {
  DocContent* n = new DocContent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocContent::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.lingvo.dump.DocContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  dump_fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&download_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&language_) -
        reinterpret_cast<char*>(&download_time_)) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.lingvo.dump.DocContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.lingvo.dump.DocContent.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 download_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_download_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &download_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.Encoding encoding = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Encoding_IsValid(value)) {
            set_encoding(static_cast< ::ru::mail::go::webbase::blobs::Encoding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.Language language = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Language_IsValid(value)) {
            set_language(static_cast< ::ru::mail::go::webbase::blobs::Language >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string labels = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            static_cast<int>(this->labels(this->labels_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.lingvo.dump.DocContent.labels");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.lingvo.dump.DumpField dump_fields = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dump_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.lingvo.dump.DocContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.lingvo.dump.DocContent)
  return false;
#undef DO_
}

void DocContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.lingvo.dump.DocContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.lingvo.dump.DocContent.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required uint64 download_time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->download_time(), output);
  }

  // required bytes content = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // required .ru.mail.go.webbase.blobs.Encoding encoding = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->encoding(), output);
  }

  // required .ru.mail.go.webbase.blobs.Language language = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->language(), output);
  }

  // repeated string labels = 6;
  for (int i = 0, n = this->labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), static_cast<int>(this->labels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.lingvo.dump.DocContent.labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->labels(i), output);
  }

  // repeated .ru.mail.go.webbase.lingvo.dump.DumpField dump_fields = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dump_fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->dump_fields(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.lingvo.dump.DocContent)
}

::google::protobuf::uint8* DocContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.lingvo.dump.DocContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.lingvo.dump.DocContent.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required uint64 download_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->download_time(), target);
  }

  // required bytes content = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // required .ru.mail.go.webbase.blobs.Encoding encoding = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->encoding(), target);
  }

  // required .ru.mail.go.webbase.blobs.Language language = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->language(), target);
  }

  // repeated string labels = 6;
  for (int i = 0, n = this->labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), static_cast<int>(this->labels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.lingvo.dump.DocContent.labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->labels(i), target);
  }

  // repeated .ru.mail.go.webbase.lingvo.dump.DumpField dump_fields = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dump_fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->dump_fields(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.lingvo.dump.DocContent)
  return target;
}

size_t DocContent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.lingvo.dump.DocContent)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_content()) {
    // required bytes content = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_download_time()) {
    // required uint64 download_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->download_time());
  }

  if (has_encoding()) {
    // required .ru.mail.go.webbase.blobs.Encoding encoding = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  if (has_language()) {
    // required .ru.mail.go.webbase.blobs.Language language = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
  }

  return total_size;
}
size_t DocContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.lingvo.dump.DocContent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required bytes content = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required uint64 download_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->download_time());

    // required .ru.mail.go.webbase.blobs.Encoding encoding = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());

    // required .ru.mail.go.webbase.blobs.Language language = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string labels = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  for (int i = 0, n = this->labels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  // repeated .ru.mail.go.webbase.lingvo.dump.DumpField dump_fields = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->dump_fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dump_fields(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.lingvo.dump.DocContent)
  GOOGLE_DCHECK_NE(&from, this);
  const DocContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.lingvo.dump.DocContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.lingvo.dump.DocContent)
    MergeFrom(*source);
  }
}

void DocContent::MergeFrom(const DocContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.lingvo.dump.DocContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  dump_fields_.MergeFrom(from.dump_fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      download_time_ = from.download_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      encoding_ = from.encoding_;
    }
    if (cached_has_bits & 0x00000010u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.lingvo.dump.DocContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocContent::CopyFrom(const DocContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.lingvo.dump.DocContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dump_fields())) return false;
  return true;
}

void DocContent::Swap(DocContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocContent::InternalSwap(DocContent* other) {
  using std::swap;
  labels_.InternalSwap(&other->labels_);
  dump_fields_.InternalSwap(&other->dump_fields_);
  url_.Swap(&other->url_);
  content_.Swap(&other->content_);
  swap(download_time_, other->download_time_);
  swap(encoding_, other->encoding_);
  swap(language_, other->language_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocContent::GetMetadata() const {
  protobuf_lingvo_5fdump_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lingvo_5fdump_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocContent

// required string url = 1;
bool DocContent::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocContent::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void DocContent::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocContent::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& DocContent::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocContent.url)
  return url_.GetNoArena();
}
void DocContent::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocContent.url)
}
#if LANG_CXX11
void DocContent::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.lingvo.dump.DocContent.url)
}
#endif
void DocContent::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.lingvo.dump.DocContent.url)
}
void DocContent::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.lingvo.dump.DocContent.url)
}
::std::string* DocContent::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DocContent.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocContent::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.lingvo.dump.DocContent.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocContent::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.lingvo.dump.DocContent.url)
}

// required uint64 download_time = 2;
bool DocContent::has_download_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocContent::set_has_download_time() {
  _has_bits_[0] |= 0x00000004u;
}
void DocContent::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocContent::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
::google::protobuf::uint64 DocContent::download_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocContent.download_time)
  return download_time_;
}
void DocContent::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocContent.download_time)
}

// required bytes content = 3;
bool DocContent::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocContent::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void DocContent::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocContent::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& DocContent::content() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocContent.content)
  return content_.GetNoArena();
}
void DocContent::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocContent.content)
}
#if LANG_CXX11
void DocContent::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.lingvo.dump.DocContent.content)
}
#endif
void DocContent::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.lingvo.dump.DocContent.content)
}
void DocContent::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.lingvo.dump.DocContent.content)
}
::std::string* DocContent::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DocContent.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocContent::release_content() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.lingvo.dump.DocContent.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocContent::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.lingvo.dump.DocContent.content)
}

// required .ru.mail.go.webbase.blobs.Encoding encoding = 4;
bool DocContent::has_encoding() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DocContent::set_has_encoding() {
  _has_bits_[0] |= 0x00000008u;
}
void DocContent::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000008u;
}
void DocContent::clear_encoding() {
  encoding_ = 0;
  clear_has_encoding();
}
::ru::mail::go::webbase::blobs::Encoding DocContent::encoding() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocContent.encoding)
  return static_cast< ::ru::mail::go::webbase::blobs::Encoding >(encoding_);
}
void DocContent::set_encoding(::ru::mail::go::webbase::blobs::Encoding value) {
  assert(::ru::mail::go::webbase::blobs::Encoding_IsValid(value));
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocContent.encoding)
}

// required .ru.mail.go.webbase.blobs.Language language = 5;
bool DocContent::has_language() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DocContent::set_has_language() {
  _has_bits_[0] |= 0x00000010u;
}
void DocContent::clear_has_language() {
  _has_bits_[0] &= ~0x00000010u;
}
void DocContent::clear_language() {
  language_ = 0;
  clear_has_language();
}
::ru::mail::go::webbase::blobs::Language DocContent::language() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocContent.language)
  return static_cast< ::ru::mail::go::webbase::blobs::Language >(language_);
}
void DocContent::set_language(::ru::mail::go::webbase::blobs::Language value) {
  assert(::ru::mail::go::webbase::blobs::Language_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocContent.language)
}

// repeated string labels = 6;
int DocContent::labels_size() const {
  return labels_.size();
}
void DocContent::clear_labels() {
  labels_.Clear();
}
const ::std::string& DocContent::labels(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
  return labels_.Get(index);
}
::std::string* DocContent::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
  return labels_.Mutable(index);
}
void DocContent::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
  labels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DocContent::set_labels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
#endif
void DocContent::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
}
void DocContent::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
}
::std::string* DocContent::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
  return labels_.Add();
}
void DocContent::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
}
#if LANG_CXX11
void DocContent::add_labels(::std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
}
#endif
void DocContent::add_labels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
}
void DocContent::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DocContent::labels() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
  return labels_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DocContent::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
  return &labels_;
}

// repeated .ru.mail.go.webbase.lingvo.dump.DumpField dump_fields = 7;
int DocContent::dump_fields_size() const {
  return dump_fields_.size();
}
void DocContent::clear_dump_fields() {
  dump_fields_.Clear();
}
const ::ru::mail::go::webbase::lingvo::dump::DumpField& DocContent::dump_fields(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocContent.dump_fields)
  return dump_fields_.Get(index);
}
::ru::mail::go::webbase::lingvo::dump::DumpField* DocContent::mutable_dump_fields(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DocContent.dump_fields)
  return dump_fields_.Mutable(index);
}
::ru::mail::go::webbase::lingvo::dump::DumpField* DocContent::add_dump_fields() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.lingvo.dump.DocContent.dump_fields)
  return dump_fields_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::lingvo::dump::DumpField >*
DocContent::mutable_dump_fields() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.lingvo.dump.DocContent.dump_fields)
  return &dump_fields_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::lingvo::dump::DumpField >&
DocContent::dump_fields() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.lingvo.dump.DocContent.dump_fields)
  return dump_fields_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dump
}  // namespace lingvo
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
