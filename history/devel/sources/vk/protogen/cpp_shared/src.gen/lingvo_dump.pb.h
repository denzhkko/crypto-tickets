// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lingvo_dump.proto

#ifndef PROTOBUF_lingvo_5fdump_2eproto__INCLUDED
#define PROTOBUF_lingvo_5fdump_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "document_enums.pb.h"
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace lingvo {
namespace dump {
class DocContent;
class DocContentDefaultTypeInternal;
extern DocContentDefaultTypeInternal _DocContent_default_instance_;
class DocUrl;
class DocUrlDefaultTypeInternal;
extern DocUrlDefaultTypeInternal _DocUrl_default_instance_;
class DumpField;
class DumpFieldDefaultTypeInternal;
extern DumpFieldDefaultTypeInternal _DumpField_default_instance_;
}  // namespace dump
}  // namespace lingvo
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace lingvo {
namespace dump {

namespace protobuf_lingvo_5fdump_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_lingvo_5fdump_2eproto

// ===================================================================

class DumpField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.lingvo.dump.DumpField) */ {
 public:
  DumpField();
  virtual ~DumpField();

  DumpField(const DumpField& from);

  inline DumpField& operator=(const DumpField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DumpField(DumpField&& from) noexcept
    : DumpField() {
    *this = ::std::move(from);
  }

  inline DumpField& operator=(DumpField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpField& default_instance();

  static inline const DumpField* internal_default_instance() {
    return reinterpret_cast<const DumpField*>(
               &_DumpField_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DumpField* other);
  friend void swap(DumpField& a, DumpField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DumpField* New() const PROTOBUF_FINAL { return New(NULL); }

  DumpField* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DumpField& from);
  void MergeFrom(const DumpField& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DumpField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string val = 2;
  bool has_val() const;
  void clear_val();
  static const int kValFieldNumber = 2;
  const ::std::string& val() const;
  void set_val(const ::std::string& value);
  #if LANG_CXX11
  void set_val(::std::string&& value);
  #endif
  void set_val(const char* value);
  void set_val(const char* value, size_t size);
  ::std::string* mutable_val();
  ::std::string* release_val();
  void set_allocated_val(::std::string* val);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.lingvo.dump.DumpField)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_val();
  void clear_has_val();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr val_;
  friend struct protobuf_lingvo_5fdump_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocUrl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.lingvo.dump.DocUrl) */ {
 public:
  DocUrl();
  virtual ~DocUrl();

  DocUrl(const DocUrl& from);

  inline DocUrl& operator=(const DocUrl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocUrl(DocUrl&& from) noexcept
    : DocUrl() {
    *this = ::std::move(from);
  }

  inline DocUrl& operator=(DocUrl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocUrl& default_instance();

  static inline const DocUrl* internal_default_instance() {
    return reinterpret_cast<const DocUrl*>(
               &_DocUrl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DocUrl* other);
  friend void swap(DocUrl& a, DocUrl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocUrl* New() const PROTOBUF_FINAL { return New(NULL); }

  DocUrl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocUrl& from);
  void MergeFrom(const DocUrl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocUrl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string labels = 2;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 2;
  const ::std::string& labels(int index) const;
  ::std::string* mutable_labels(int index);
  void set_labels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_labels(int index, ::std::string&& value);
  #endif
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  ::std::string* add_labels();
  void add_labels(const ::std::string& value);
  #if LANG_CXX11
  void add_labels(::std::string&& value);
  #endif
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // repeated .ru.mail.go.webbase.lingvo.dump.DumpField dump_fields = 3;
  int dump_fields_size() const;
  void clear_dump_fields();
  static const int kDumpFieldsFieldNumber = 3;
  const ::ru::mail::go::webbase::lingvo::dump::DumpField& dump_fields(int index) const;
  ::ru::mail::go::webbase::lingvo::dump::DumpField* mutable_dump_fields(int index);
  ::ru::mail::go::webbase::lingvo::dump::DumpField* add_dump_fields();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::lingvo::dump::DumpField >*
      mutable_dump_fields();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::lingvo::dump::DumpField >&
      dump_fields() const;

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.lingvo.dump.DocUrl)
 private:
  void set_has_url();
  void clear_has_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::lingvo::dump::DumpField > dump_fields_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  friend struct protobuf_lingvo_5fdump_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocContent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.lingvo.dump.DocContent) */ {
 public:
  DocContent();
  virtual ~DocContent();

  DocContent(const DocContent& from);

  inline DocContent& operator=(const DocContent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocContent(DocContent&& from) noexcept
    : DocContent() {
    *this = ::std::move(from);
  }

  inline DocContent& operator=(DocContent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocContent& default_instance();

  static inline const DocContent* internal_default_instance() {
    return reinterpret_cast<const DocContent*>(
               &_DocContent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DocContent* other);
  friend void swap(DocContent& a, DocContent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocContent* New() const PROTOBUF_FINAL { return New(NULL); }

  DocContent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocContent& from);
  void MergeFrom(const DocContent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocContent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string labels = 6;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 6;
  const ::std::string& labels(int index) const;
  ::std::string* mutable_labels(int index);
  void set_labels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_labels(int index, ::std::string&& value);
  #endif
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  ::std::string* add_labels();
  void add_labels(const ::std::string& value);
  #if LANG_CXX11
  void add_labels(::std::string&& value);
  #endif
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // repeated .ru.mail.go.webbase.lingvo.dump.DumpField dump_fields = 7;
  int dump_fields_size() const;
  void clear_dump_fields();
  static const int kDumpFieldsFieldNumber = 7;
  const ::ru::mail::go::webbase::lingvo::dump::DumpField& dump_fields(int index) const;
  ::ru::mail::go::webbase::lingvo::dump::DumpField* mutable_dump_fields(int index);
  ::ru::mail::go::webbase::lingvo::dump::DumpField* add_dump_fields();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::lingvo::dump::DumpField >*
      mutable_dump_fields();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::lingvo::dump::DumpField >&
      dump_fields() const;

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required bytes content = 3;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // required uint64 download_time = 2;
  bool has_download_time() const;
  void clear_download_time();
  static const int kDownloadTimeFieldNumber = 2;
  ::google::protobuf::uint64 download_time() const;
  void set_download_time(::google::protobuf::uint64 value);

  // required .ru.mail.go.webbase.blobs.Encoding encoding = 4;
  bool has_encoding() const;
  void clear_encoding();
  static const int kEncodingFieldNumber = 4;
  ::ru::mail::go::webbase::blobs::Encoding encoding() const;
  void set_encoding(::ru::mail::go::webbase::blobs::Encoding value);

  // required .ru.mail.go.webbase.blobs.Language language = 5;
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 5;
  ::ru::mail::go::webbase::blobs::Language language() const;
  void set_language(::ru::mail::go::webbase::blobs::Language value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.lingvo.dump.DocContent)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_download_time();
  void clear_has_download_time();
  void set_has_content();
  void clear_has_content();
  void set_has_encoding();
  void clear_has_encoding();
  void set_has_language();
  void clear_has_language();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::lingvo::dump::DumpField > dump_fields_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 download_time_;
  int encoding_;
  int language_;
  friend struct protobuf_lingvo_5fdump_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DumpField

// required string key = 1;
inline bool DumpField::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DumpField::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DumpField::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DumpField::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& DumpField::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DumpField.key)
  return key_.GetNoArena();
}
inline void DumpField::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DumpField.key)
}
#if LANG_CXX11
inline void DumpField::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.lingvo.dump.DumpField.key)
}
#endif
inline void DumpField::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.lingvo.dump.DumpField.key)
}
inline void DumpField::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.lingvo.dump.DumpField.key)
}
inline ::std::string* DumpField::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DumpField.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpField::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.lingvo.dump.DumpField.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpField::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.lingvo.dump.DumpField.key)
}

// required string val = 2;
inline bool DumpField::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DumpField::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DumpField::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DumpField::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_val();
}
inline const ::std::string& DumpField::val() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DumpField.val)
  return val_.GetNoArena();
}
inline void DumpField::set_val(const ::std::string& value) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DumpField.val)
}
#if LANG_CXX11
inline void DumpField::set_val(::std::string&& value) {
  set_has_val();
  val_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.lingvo.dump.DumpField.val)
}
#endif
inline void DumpField::set_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.lingvo.dump.DumpField.val)
}
inline void DumpField::set_val(const char* value, size_t size) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.lingvo.dump.DumpField.val)
}
inline ::std::string* DumpField::mutable_val() {
  set_has_val();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DumpField.val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpField::release_val() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.lingvo.dump.DumpField.val)
  clear_has_val();
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpField::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    set_has_val();
  } else {
    clear_has_val();
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.lingvo.dump.DumpField.val)
}

// -------------------------------------------------------------------

// DocUrl

// required string url = 1;
inline bool DocUrl::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocUrl::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocUrl::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocUrl::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& DocUrl::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocUrl.url)
  return url_.GetNoArena();
}
inline void DocUrl::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocUrl.url)
}
#if LANG_CXX11
inline void DocUrl::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.lingvo.dump.DocUrl.url)
}
#endif
inline void DocUrl::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.lingvo.dump.DocUrl.url)
}
inline void DocUrl::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.lingvo.dump.DocUrl.url)
}
inline ::std::string* DocUrl::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DocUrl.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocUrl::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.lingvo.dump.DocUrl.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocUrl::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.lingvo.dump.DocUrl.url)
}

// repeated string labels = 2;
inline int DocUrl::labels_size() const {
  return labels_.size();
}
inline void DocUrl::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& DocUrl::labels(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
  return labels_.Get(index);
}
inline ::std::string* DocUrl::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
  return labels_.Mutable(index);
}
inline void DocUrl::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
  labels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DocUrl::set_labels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DocUrl::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
}
inline void DocUrl::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
}
inline ::std::string* DocUrl::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
  return labels_.Add();
}
inline void DocUrl::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
}
#if LANG_CXX11
inline void DocUrl::add_labels(::std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
}
#endif
inline void DocUrl::add_labels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
}
inline void DocUrl::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DocUrl::labels() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DocUrl::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.lingvo.dump.DocUrl.labels)
  return &labels_;
}

// repeated .ru.mail.go.webbase.lingvo.dump.DumpField dump_fields = 3;
inline int DocUrl::dump_fields_size() const {
  return dump_fields_.size();
}
inline void DocUrl::clear_dump_fields() {
  dump_fields_.Clear();
}
inline const ::ru::mail::go::webbase::lingvo::dump::DumpField& DocUrl::dump_fields(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocUrl.dump_fields)
  return dump_fields_.Get(index);
}
inline ::ru::mail::go::webbase::lingvo::dump::DumpField* DocUrl::mutable_dump_fields(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DocUrl.dump_fields)
  return dump_fields_.Mutable(index);
}
inline ::ru::mail::go::webbase::lingvo::dump::DumpField* DocUrl::add_dump_fields() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.lingvo.dump.DocUrl.dump_fields)
  return dump_fields_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::lingvo::dump::DumpField >*
DocUrl::mutable_dump_fields() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.lingvo.dump.DocUrl.dump_fields)
  return &dump_fields_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::lingvo::dump::DumpField >&
DocUrl::dump_fields() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.lingvo.dump.DocUrl.dump_fields)
  return dump_fields_;
}

// -------------------------------------------------------------------

// DocContent

// required string url = 1;
inline bool DocContent::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocContent::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocContent::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocContent::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& DocContent::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocContent.url)
  return url_.GetNoArena();
}
inline void DocContent::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocContent.url)
}
#if LANG_CXX11
inline void DocContent::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.lingvo.dump.DocContent.url)
}
#endif
inline void DocContent::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.lingvo.dump.DocContent.url)
}
inline void DocContent::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.lingvo.dump.DocContent.url)
}
inline ::std::string* DocContent::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DocContent.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocContent::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.lingvo.dump.DocContent.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocContent::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.lingvo.dump.DocContent.url)
}

// required uint64 download_time = 2;
inline bool DocContent::has_download_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocContent::set_has_download_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocContent::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocContent::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
inline ::google::protobuf::uint64 DocContent::download_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocContent.download_time)
  return download_time_;
}
inline void DocContent::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocContent.download_time)
}

// required bytes content = 3;
inline bool DocContent::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocContent::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocContent::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocContent::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& DocContent::content() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocContent.content)
  return content_.GetNoArena();
}
inline void DocContent::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocContent.content)
}
#if LANG_CXX11
inline void DocContent::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.lingvo.dump.DocContent.content)
}
#endif
inline void DocContent::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.lingvo.dump.DocContent.content)
}
inline void DocContent::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.lingvo.dump.DocContent.content)
}
inline ::std::string* DocContent::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DocContent.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocContent::release_content() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.lingvo.dump.DocContent.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocContent::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.lingvo.dump.DocContent.content)
}

// required .ru.mail.go.webbase.blobs.Encoding encoding = 4;
inline bool DocContent::has_encoding() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocContent::set_has_encoding() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocContent::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocContent::clear_encoding() {
  encoding_ = 0;
  clear_has_encoding();
}
inline ::ru::mail::go::webbase::blobs::Encoding DocContent::encoding() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocContent.encoding)
  return static_cast< ::ru::mail::go::webbase::blobs::Encoding >(encoding_);
}
inline void DocContent::set_encoding(::ru::mail::go::webbase::blobs::Encoding value) {
  assert(::ru::mail::go::webbase::blobs::Encoding_IsValid(value));
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocContent.encoding)
}

// required .ru.mail.go.webbase.blobs.Language language = 5;
inline bool DocContent::has_language() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocContent::set_has_language() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocContent::clear_has_language() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocContent::clear_language() {
  language_ = 0;
  clear_has_language();
}
inline ::ru::mail::go::webbase::blobs::Language DocContent::language() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocContent.language)
  return static_cast< ::ru::mail::go::webbase::blobs::Language >(language_);
}
inline void DocContent::set_language(::ru::mail::go::webbase::blobs::Language value) {
  assert(::ru::mail::go::webbase::blobs::Language_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocContent.language)
}

// repeated string labels = 6;
inline int DocContent::labels_size() const {
  return labels_.size();
}
inline void DocContent::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& DocContent::labels(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
  return labels_.Get(index);
}
inline ::std::string* DocContent::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
  return labels_.Mutable(index);
}
inline void DocContent::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
  labels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DocContent::set_labels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DocContent::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
}
inline void DocContent::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
}
inline ::std::string* DocContent::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
  return labels_.Add();
}
inline void DocContent::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
}
#if LANG_CXX11
inline void DocContent::add_labels(::std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
}
#endif
inline void DocContent::add_labels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
}
inline void DocContent::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DocContent::labels() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DocContent::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.lingvo.dump.DocContent.labels)
  return &labels_;
}

// repeated .ru.mail.go.webbase.lingvo.dump.DumpField dump_fields = 7;
inline int DocContent::dump_fields_size() const {
  return dump_fields_.size();
}
inline void DocContent::clear_dump_fields() {
  dump_fields_.Clear();
}
inline const ::ru::mail::go::webbase::lingvo::dump::DumpField& DocContent::dump_fields(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.lingvo.dump.DocContent.dump_fields)
  return dump_fields_.Get(index);
}
inline ::ru::mail::go::webbase::lingvo::dump::DumpField* DocContent::mutable_dump_fields(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.lingvo.dump.DocContent.dump_fields)
  return dump_fields_.Mutable(index);
}
inline ::ru::mail::go::webbase::lingvo::dump::DumpField* DocContent::add_dump_fields() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.lingvo.dump.DocContent.dump_fields)
  return dump_fields_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::lingvo::dump::DumpField >*
DocContent::mutable_dump_fields() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.lingvo.dump.DocContent.dump_fields)
  return &dump_fields_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::lingvo::dump::DumpField >&
DocContent::dump_fields() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.lingvo.dump.DocContent.dump_fields)
  return dump_fields_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace dump
}  // namespace lingvo
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lingvo_5fdump_2eproto__INCLUDED
