// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: link.proto

#ifndef PROTOBUF_link_2eproto__INCLUDED
#define PROTOBUF_link_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace gogo {
namespace hadoop {
class Link;
class LinkDefaultTypeInternal;
extern LinkDefaultTypeInternal _Link_default_instance_;
}  // namespace hadoop
}  // namespace gogo

namespace gogo {
namespace hadoop {

namespace protobuf_link_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_link_2eproto

enum Link_LinkType {
  Link_LinkType_EXTLINK = 1,
  Link_LinkType_REDIRECT = 2,
  Link_LinkType_DELSIG = 3
};
bool Link_LinkType_IsValid(int value);
const Link_LinkType Link_LinkType_LinkType_MIN = Link_LinkType_EXTLINK;
const Link_LinkType Link_LinkType_LinkType_MAX = Link_LinkType_DELSIG;
const int Link_LinkType_LinkType_ARRAYSIZE = Link_LinkType_LinkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Link_LinkType_descriptor();
inline const ::std::string& Link_LinkType_Name(Link_LinkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Link_LinkType_descriptor(), value);
}
inline bool Link_LinkType_Parse(
    const ::std::string& name, Link_LinkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Link_LinkType>(
    Link_LinkType_descriptor(), name, value);
}
// ===================================================================

class Link : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.hadoop.Link) */ {
 public:
  Link();
  virtual ~Link();

  Link(const Link& from);

  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Link(Link&& from) noexcept
    : Link() {
    *this = ::std::move(from);
  }

  inline Link& operator=(Link&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Link& default_instance();

  static inline const Link* internal_default_instance() {
    return reinterpret_cast<const Link*>(
               &_Link_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Link* other);
  friend void swap(Link& a, Link& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Link* New() const PROTOBUF_FINAL { return New(NULL); }

  Link* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Link* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Link_LinkType LinkType;
  static const LinkType EXTLINK =
    Link_LinkType_EXTLINK;
  static const LinkType REDIRECT =
    Link_LinkType_REDIRECT;
  static const LinkType DELSIG =
    Link_LinkType_DELSIG;
  static inline bool LinkType_IsValid(int value) {
    return Link_LinkType_IsValid(value);
  }
  static const LinkType LinkType_MIN =
    Link_LinkType_LinkType_MIN;
  static const LinkType LinkType_MAX =
    Link_LinkType_LinkType_MAX;
  static const int LinkType_ARRAYSIZE =
    Link_LinkType_LinkType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LinkType_descriptor() {
    return Link_LinkType_descriptor();
  }
  static inline const ::std::string& LinkType_Name(LinkType value) {
    return Link_LinkType_Name(value);
  }
  static inline bool LinkType_Parse(const ::std::string& name,
      LinkType* value) {
    return Link_LinkType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string to = 1;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 1;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional string from = 5;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 5;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // optional string text = 6;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 6;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional fixed64 time = 7 [default = 0];
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 7;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional bool is_resolved = 8 [default = false];
  bool has_is_resolved() const;
  void clear_is_resolved();
  static const int kIsResolvedFieldNumber = 8;
  bool is_resolved() const;
  void set_is_resolved(bool value);

  // required .gogo.hadoop.Link.LinkType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::gogo::hadoop::Link_LinkType type() const;
  void set_type(::gogo::hadoop::Link_LinkType value);

  // @@protoc_insertion_point(class_scope:gogo.hadoop.Link)
 private:
  void set_has_to();
  void clear_has_to();
  void set_has_type();
  void clear_has_type();
  void set_has_from();
  void clear_has_from();
  void set_has_text();
  void clear_has_text();
  void set_has_time();
  void clear_has_time();
  void set_has_is_resolved();
  void clear_has_is_resolved();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint64 time_;
  bool is_resolved_;
  int type_;
  friend struct protobuf_link_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Link

// required string to = 1;
inline bool Link::has_to() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Link::set_has_to() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Link::clear_has_to() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Link::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to();
}
inline const ::std::string& Link::to() const {
  // @@protoc_insertion_point(field_get:gogo.hadoop.Link.to)
  return to_.GetNoArena();
}
inline void Link::set_to(const ::std::string& value) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.hadoop.Link.to)
}
#if LANG_CXX11
inline void Link::set_to(::std::string&& value) {
  set_has_to();
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.hadoop.Link.to)
}
#endif
inline void Link::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.hadoop.Link.to)
}
inline void Link::set_to(const char* value, size_t size) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.hadoop.Link.to)
}
inline ::std::string* Link::mutable_to() {
  set_has_to();
  // @@protoc_insertion_point(field_mutable:gogo.hadoop.Link.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Link::release_to() {
  // @@protoc_insertion_point(field_release:gogo.hadoop.Link.to)
  clear_has_to();
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    set_has_to();
  } else {
    clear_has_to();
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:gogo.hadoop.Link.to)
}

// required .gogo.hadoop.Link.LinkType type = 2;
inline bool Link::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Link::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Link::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Link::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::gogo::hadoop::Link_LinkType Link::type() const {
  // @@protoc_insertion_point(field_get:gogo.hadoop.Link.type)
  return static_cast< ::gogo::hadoop::Link_LinkType >(type_);
}
inline void Link::set_type(::gogo::hadoop::Link_LinkType value) {
  assert(::gogo::hadoop::Link_LinkType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gogo.hadoop.Link.type)
}

// optional string from = 5;
inline bool Link::has_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Link::set_has_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Link::clear_has_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Link::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from();
}
inline const ::std::string& Link::from() const {
  // @@protoc_insertion_point(field_get:gogo.hadoop.Link.from)
  return from_.GetNoArena();
}
inline void Link::set_from(const ::std::string& value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.hadoop.Link.from)
}
#if LANG_CXX11
inline void Link::set_from(::std::string&& value) {
  set_has_from();
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.hadoop.Link.from)
}
#endif
inline void Link::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.hadoop.Link.from)
}
inline void Link::set_from(const char* value, size_t size) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.hadoop.Link.from)
}
inline ::std::string* Link::mutable_from() {
  set_has_from();
  // @@protoc_insertion_point(field_mutable:gogo.hadoop.Link.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Link::release_from() {
  // @@protoc_insertion_point(field_release:gogo.hadoop.Link.from)
  clear_has_from();
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    set_has_from();
  } else {
    clear_has_from();
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:gogo.hadoop.Link.from)
}

// optional string text = 6;
inline bool Link::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Link::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Link::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Link::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& Link::text() const {
  // @@protoc_insertion_point(field_get:gogo.hadoop.Link.text)
  return text_.GetNoArena();
}
inline void Link::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.hadoop.Link.text)
}
#if LANG_CXX11
inline void Link::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.hadoop.Link.text)
}
#endif
inline void Link::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.hadoop.Link.text)
}
inline void Link::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.hadoop.Link.text)
}
inline ::std::string* Link::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:gogo.hadoop.Link.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Link::release_text() {
  // @@protoc_insertion_point(field_release:gogo.hadoop.Link.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:gogo.hadoop.Link.text)
}

// optional fixed64 time = 7 [default = 0];
inline bool Link::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Link::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Link::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Link::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Link::time() const {
  // @@protoc_insertion_point(field_get:gogo.hadoop.Link.time)
  return time_;
}
inline void Link::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:gogo.hadoop.Link.time)
}

// optional bool is_resolved = 8 [default = false];
inline bool Link::has_is_resolved() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Link::set_has_is_resolved() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Link::clear_has_is_resolved() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Link::clear_is_resolved() {
  is_resolved_ = false;
  clear_has_is_resolved();
}
inline bool Link::is_resolved() const {
  // @@protoc_insertion_point(field_get:gogo.hadoop.Link.is_resolved)
  return is_resolved_;
}
inline void Link::set_is_resolved(bool value) {
  set_has_is_resolved();
  is_resolved_ = value;
  // @@protoc_insertion_point(field_set:gogo.hadoop.Link.is_resolved)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace hadoop
}  // namespace gogo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gogo::hadoop::Link_LinkType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gogo::hadoop::Link_LinkType>() {
  return ::gogo::hadoop::Link_LinkType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_link_2eproto__INCLUDED
