// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: markov.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "markov.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace markov {
namespace protogen {
class MarkovDCVChainDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MarkovDCVChain>
     _instance;
} _MarkovDCVChain_default_instance_;
class MarkovDCVStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MarkovDCVState>
     _instance;
} _MarkovDCVState_default_instance_;
class MarkovDCVStateDescriptionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MarkovDCVStateDescription>
     _instance;
} _MarkovDCVStateDescription_default_instance_;
class MarkovDCVEdgeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MarkovDCVEdge>
     _instance;
} _MarkovDCVEdge_default_instance_;

namespace protobuf_markov_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVChain, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVChain, state_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVState, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVState, freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVState, edge_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVStateDescription, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVStateDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVStateDescription, docid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVStateDescription, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVStateDescription, isclicked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVStateDescription, isviewed_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVEdge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVEdge, neighbor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkovDCVEdge, prob_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(MarkovDCVChain)},
  { 7, 15, sizeof(MarkovDCVState)},
  { 18, 27, sizeof(MarkovDCVStateDescription)},
  { 31, 38, sizeof(MarkovDCVEdge)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MarkovDCVChain_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MarkovDCVState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MarkovDCVStateDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MarkovDCVEdge_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "markov.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MarkovDCVChain_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MarkovDCVChain_default_instance_);_MarkovDCVState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MarkovDCVState_default_instance_);_MarkovDCVStateDescription_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MarkovDCVStateDescription_default_instance_);_MarkovDCVEdge_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MarkovDCVEdge_default_instance_);_MarkovDCVState_default_instance_._instance.get_mutable()->description_ = const_cast< ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription*>(
      ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription::internal_default_instance());
  _MarkovDCVEdge_default_instance_._instance.get_mutable()->neighbor_ = const_cast< ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription*>(
      ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014markov.proto\022\"ru.mail.go.webbase.marko"
      "v.protogen\"S\n\016MarkovDCVChain\022A\n\005state\030\001 "
      "\003(\01322.ru.mail.go.webbase.markov.protogen"
      ".MarkovDCVState\"\266\001\n\016MarkovDCVState\022R\n\013de"
      "scription\030\001 \002(\0132=.ru.mail.go.webbase.mar"
      "kov.protogen.MarkovDCVStateDescription\022\017"
      "\n\004freq\030\002 \002(\001:\0011\022\?\n\004edge\030\003 \003(\01321.ru.mail."
      "go.webbase.markov.protogen.MarkovDCVEdge"
      "\"\\\n\031MarkovDCVStateDescription\022\r\n\005docID\030\001"
      " \001(\003\022\013\n\003url\030\002 \001(\t\022\021\n\tisClicked\030\003 \002(\010\022\020\n\010"
      "isViewed\030\004 \002(\010\"n\n\rMarkovDCVEdge\022O\n\010neigh"
      "bor\030\001 \002(\0132=.ru.mail.go.webbase.markov.pr"
      "otogen.MarkovDCVStateDescription\022\014\n\004prob"
      "\030\002 \002(\001B\rB\013MarkovBlobs"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 541);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "markov.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_markov_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkovDCVChain::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkovDCVChain::MarkovDCVChain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_markov_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
}
MarkovDCVChain::MarkovDCVChain(const MarkovDCVChain& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      state_(from.state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
}

void MarkovDCVChain::SharedCtor() {
  _cached_size_ = 0;
}

MarkovDCVChain::~MarkovDCVChain() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
  SharedDtor();
}

void MarkovDCVChain::SharedDtor() {
}

void MarkovDCVChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkovDCVChain::descriptor() {
  protobuf_markov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_markov_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarkovDCVChain& MarkovDCVChain::default_instance() {
  protobuf_markov_2eproto::InitDefaults();
  return *internal_default_instance();
}

MarkovDCVChain* MarkovDCVChain::New(::google::protobuf::Arena* arena) const {
  MarkovDCVChain* n = new MarkovDCVChain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarkovDCVChain::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarkovDCVChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.markov.protogen.MarkovDCVState state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
  return false;
#undef DO_
}

void MarkovDCVChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.markov.protogen.MarkovDCVState state = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->state_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
}

::google::protobuf::uint8* MarkovDCVChain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.markov.protogen.MarkovDCVState state = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->state_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->state(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
  return target;
}

size_t MarkovDCVChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.markov.protogen.MarkovDCVState state = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->state_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkovDCVChain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkovDCVChain* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarkovDCVChain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
    MergeFrom(*source);
  }
}

void MarkovDCVChain::MergeFrom(const MarkovDCVChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  state_.MergeFrom(from.state_);
}

void MarkovDCVChain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkovDCVChain::CopyFrom(const MarkovDCVChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkovDCVChain::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->state())) return false;
  return true;
}

void MarkovDCVChain::Swap(MarkovDCVChain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkovDCVChain::InternalSwap(MarkovDCVChain* other) {
  using std::swap;
  state_.InternalSwap(&other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarkovDCVChain::GetMetadata() const {
  protobuf_markov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_markov_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarkovDCVChain

// repeated .ru.mail.go.webbase.markov.protogen.MarkovDCVState state = 1;
int MarkovDCVChain::state_size() const {
  return state_.size();
}
void MarkovDCVChain::clear_state() {
  state_.Clear();
}
const ::ru::mail::go::webbase::markov::protogen::MarkovDCVState& MarkovDCVChain::state(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVChain.state)
  return state_.Get(index);
}
::ru::mail::go::webbase::markov::protogen::MarkovDCVState* MarkovDCVChain::mutable_state(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.markov.protogen.MarkovDCVChain.state)
  return state_.Mutable(index);
}
::ru::mail::go::webbase::markov::protogen::MarkovDCVState* MarkovDCVChain::add_state() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.markov.protogen.MarkovDCVChain.state)
  return state_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::markov::protogen::MarkovDCVState >*
MarkovDCVChain::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.markov.protogen.MarkovDCVChain.state)
  return &state_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::markov::protogen::MarkovDCVState >&
MarkovDCVChain::state() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.markov.protogen.MarkovDCVChain.state)
  return state_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkovDCVState::kDescriptionFieldNumber;
const int MarkovDCVState::kFreqFieldNumber;
const int MarkovDCVState::kEdgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkovDCVState::MarkovDCVState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_markov_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
}
MarkovDCVState::MarkovDCVState(const MarkovDCVState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      edge_(from.edge_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_description()) {
    description_ = new ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription(*from.description_);
  } else {
    description_ = NULL;
  }
  freq_ = from.freq_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
}

void MarkovDCVState::SharedCtor() {
  _cached_size_ = 0;
  description_ = NULL;
  freq_ = 1;
}

MarkovDCVState::~MarkovDCVState() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
  SharedDtor();
}

void MarkovDCVState::SharedDtor() {
  if (this != internal_default_instance()) delete description_;
}

void MarkovDCVState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkovDCVState::descriptor() {
  protobuf_markov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_markov_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarkovDCVState& MarkovDCVState::default_instance() {
  protobuf_markov_2eproto::InitDefaults();
  return *internal_default_instance();
}

MarkovDCVState* MarkovDCVState::New(::google::protobuf::Arena* arena) const {
  MarkovDCVState* n = new MarkovDCVState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarkovDCVState::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edge_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(description_ != NULL);
      description_->::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription::Clear();
    }
    freq_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarkovDCVState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double freq = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_freq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.markov.protogen.MarkovDCVEdge edge = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
  return false;
#undef DO_
}

void MarkovDCVState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->description_, output);
  }

  // required double freq = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->freq(), output);
  }

  // repeated .ru.mail.go.webbase.markov.protogen.MarkovDCVEdge edge = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edge_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->edge(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
}

::google::protobuf::uint8* MarkovDCVState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription description = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->description_, deterministic, target);
  }

  // required double freq = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->freq(), target);
  }

  // repeated .ru.mail.go.webbase.markov.protogen.MarkovDCVEdge edge = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edge_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->edge(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
  return target;
}

size_t MarkovDCVState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
  size_t total_size = 0;

  if (has_description()) {
    // required .ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription description = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->description_);
  }

  if (has_freq()) {
    // required double freq = 2 [default = 1];
    total_size += 1 + 8;
  }

  return total_size;
}
size_t MarkovDCVState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription description = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->description_);

    // required double freq = 2 [default = 1];
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.webbase.markov.protogen.MarkovDCVEdge edge = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->edge_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edge(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkovDCVState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkovDCVState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarkovDCVState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
    MergeFrom(*source);
  }
}

void MarkovDCVState::MergeFrom(const MarkovDCVState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edge_.MergeFrom(from.edge_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_description()->::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription::MergeFrom(from.description());
    }
    if (cached_has_bits & 0x00000002u) {
      freq_ = from.freq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarkovDCVState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkovDCVState::CopyFrom(const MarkovDCVState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkovDCVState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->edge())) return false;
  if (has_description()) {
    if (!this->description_->IsInitialized()) return false;
  }
  return true;
}

void MarkovDCVState::Swap(MarkovDCVState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkovDCVState::InternalSwap(MarkovDCVState* other) {
  using std::swap;
  edge_.InternalSwap(&other->edge_);
  swap(description_, other->description_);
  swap(freq_, other->freq_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarkovDCVState::GetMetadata() const {
  protobuf_markov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_markov_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarkovDCVState

// required .ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription description = 1;
bool MarkovDCVState::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarkovDCVState::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void MarkovDCVState::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarkovDCVState::clear_description() {
  if (description_ != NULL) description_->::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription::Clear();
  clear_has_description();
}
const ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription& MarkovDCVState::description() const {
  const ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* p = description_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVState.description)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription*>(
      &::ru::mail::go::webbase::markov::protogen::_MarkovDCVStateDescription_default_instance_);
}
::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* MarkovDCVState::mutable_description() {
  set_has_description();
  if (description_ == NULL) {
    description_ = new ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.markov.protogen.MarkovDCVState.description)
  return description_;
}
::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* MarkovDCVState::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.markov.protogen.MarkovDCVState.description)
  clear_has_description();
  ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* temp = description_;
  description_ = NULL;
  return temp;
}
void MarkovDCVState::set_allocated_description(::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* description) {
  delete description_;
  description_ = description;
  if (description) {
    set_has_description();
  } else {
    clear_has_description();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.markov.protogen.MarkovDCVState.description)
}

// required double freq = 2 [default = 1];
bool MarkovDCVState::has_freq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MarkovDCVState::set_has_freq() {
  _has_bits_[0] |= 0x00000002u;
}
void MarkovDCVState::clear_has_freq() {
  _has_bits_[0] &= ~0x00000002u;
}
void MarkovDCVState::clear_freq() {
  freq_ = 1;
  clear_has_freq();
}
double MarkovDCVState::freq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVState.freq)
  return freq_;
}
void MarkovDCVState::set_freq(double value) {
  set_has_freq();
  freq_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.markov.protogen.MarkovDCVState.freq)
}

// repeated .ru.mail.go.webbase.markov.protogen.MarkovDCVEdge edge = 3;
int MarkovDCVState::edge_size() const {
  return edge_.size();
}
void MarkovDCVState::clear_edge() {
  edge_.Clear();
}
const ::ru::mail::go::webbase::markov::protogen::MarkovDCVEdge& MarkovDCVState::edge(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVState.edge)
  return edge_.Get(index);
}
::ru::mail::go::webbase::markov::protogen::MarkovDCVEdge* MarkovDCVState::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.markov.protogen.MarkovDCVState.edge)
  return edge_.Mutable(index);
}
::ru::mail::go::webbase::markov::protogen::MarkovDCVEdge* MarkovDCVState::add_edge() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.markov.protogen.MarkovDCVState.edge)
  return edge_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::markov::protogen::MarkovDCVEdge >*
MarkovDCVState::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.markov.protogen.MarkovDCVState.edge)
  return &edge_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::markov::protogen::MarkovDCVEdge >&
MarkovDCVState::edge() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.markov.protogen.MarkovDCVState.edge)
  return edge_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkovDCVStateDescription::kDocIDFieldNumber;
const int MarkovDCVStateDescription::kUrlFieldNumber;
const int MarkovDCVStateDescription::kIsClickedFieldNumber;
const int MarkovDCVStateDescription::kIsViewedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkovDCVStateDescription::MarkovDCVStateDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_markov_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
}
MarkovDCVStateDescription::MarkovDCVStateDescription(const MarkovDCVStateDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&docid_, &from.docid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isviewed_) -
    reinterpret_cast<char*>(&docid_)) + sizeof(isviewed_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
}

void MarkovDCVStateDescription::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&docid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isviewed_) -
      reinterpret_cast<char*>(&docid_)) + sizeof(isviewed_));
}

MarkovDCVStateDescription::~MarkovDCVStateDescription() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
  SharedDtor();
}

void MarkovDCVStateDescription::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarkovDCVStateDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkovDCVStateDescription::descriptor() {
  protobuf_markov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_markov_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarkovDCVStateDescription& MarkovDCVStateDescription::default_instance() {
  protobuf_markov_2eproto::InitDefaults();
  return *internal_default_instance();
}

MarkovDCVStateDescription* MarkovDCVStateDescription::New(::google::protobuf::Arena* arena) const {
  MarkovDCVStateDescription* n = new MarkovDCVStateDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarkovDCVStateDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&docid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isviewed_) -
        reinterpret_cast<char*>(&docid_)) + sizeof(isviewed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarkovDCVStateDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 docID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_docid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &docid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isClicked = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_isclicked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isclicked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isViewed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_isviewed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isviewed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
  return false;
#undef DO_
}

void MarkovDCVStateDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 docID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->docid(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // required bool isClicked = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isclicked(), output);
  }

  // required bool isViewed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isviewed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
}

::google::protobuf::uint8* MarkovDCVStateDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 docID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->docid(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // required bool isClicked = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isclicked(), target);
  }

  // required bool isViewed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isviewed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
  return target;
}

size_t MarkovDCVStateDescription::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
  size_t total_size = 0;

  if (has_isclicked()) {
    // required bool isClicked = 3;
    total_size += 1 + 1;
  }

  if (has_isviewed()) {
    // required bool isViewed = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t MarkovDCVStateDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required bool isClicked = 3;
    total_size += 1 + 1;

    // required bool isViewed = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int64 docID = 1;
    if (has_docid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->docid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkovDCVStateDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkovDCVStateDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarkovDCVStateDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
    MergeFrom(*source);
  }
}

void MarkovDCVStateDescription::MergeFrom(const MarkovDCVStateDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      docid_ = from.docid_;
    }
    if (cached_has_bits & 0x00000004u) {
      isclicked_ = from.isclicked_;
    }
    if (cached_has_bits & 0x00000008u) {
      isviewed_ = from.isviewed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarkovDCVStateDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkovDCVStateDescription::CopyFrom(const MarkovDCVStateDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkovDCVStateDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  return true;
}

void MarkovDCVStateDescription::Swap(MarkovDCVStateDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkovDCVStateDescription::InternalSwap(MarkovDCVStateDescription* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(docid_, other->docid_);
  swap(isclicked_, other->isclicked_);
  swap(isviewed_, other->isviewed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarkovDCVStateDescription::GetMetadata() const {
  protobuf_markov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_markov_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarkovDCVStateDescription

// optional int64 docID = 1;
bool MarkovDCVStateDescription::has_docid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MarkovDCVStateDescription::set_has_docid() {
  _has_bits_[0] |= 0x00000002u;
}
void MarkovDCVStateDescription::clear_has_docid() {
  _has_bits_[0] &= ~0x00000002u;
}
void MarkovDCVStateDescription::clear_docid() {
  docid_ = GOOGLE_LONGLONG(0);
  clear_has_docid();
}
::google::protobuf::int64 MarkovDCVStateDescription::docid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.docID)
  return docid_;
}
void MarkovDCVStateDescription::set_docid(::google::protobuf::int64 value) {
  set_has_docid();
  docid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.docID)
}

// optional string url = 2;
bool MarkovDCVStateDescription::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarkovDCVStateDescription::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void MarkovDCVStateDescription::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarkovDCVStateDescription::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& MarkovDCVStateDescription::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url)
  return url_.GetNoArena();
}
void MarkovDCVStateDescription::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url)
}
#if LANG_CXX11
void MarkovDCVStateDescription::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url)
}
#endif
void MarkovDCVStateDescription::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url)
}
void MarkovDCVStateDescription::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url)
}
::std::string* MarkovDCVStateDescription::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkovDCVStateDescription::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkovDCVStateDescription::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url)
}

// required bool isClicked = 3;
bool MarkovDCVStateDescription::has_isclicked() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MarkovDCVStateDescription::set_has_isclicked() {
  _has_bits_[0] |= 0x00000004u;
}
void MarkovDCVStateDescription::clear_has_isclicked() {
  _has_bits_[0] &= ~0x00000004u;
}
void MarkovDCVStateDescription::clear_isclicked() {
  isclicked_ = false;
  clear_has_isclicked();
}
bool MarkovDCVStateDescription::isclicked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.isClicked)
  return isclicked_;
}
void MarkovDCVStateDescription::set_isclicked(bool value) {
  set_has_isclicked();
  isclicked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.isClicked)
}

// required bool isViewed = 4;
bool MarkovDCVStateDescription::has_isviewed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MarkovDCVStateDescription::set_has_isviewed() {
  _has_bits_[0] |= 0x00000008u;
}
void MarkovDCVStateDescription::clear_has_isviewed() {
  _has_bits_[0] &= ~0x00000008u;
}
void MarkovDCVStateDescription::clear_isviewed() {
  isviewed_ = false;
  clear_has_isviewed();
}
bool MarkovDCVStateDescription::isviewed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.isViewed)
  return isviewed_;
}
void MarkovDCVStateDescription::set_isviewed(bool value) {
  set_has_isviewed();
  isviewed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.isViewed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkovDCVEdge::kNeighborFieldNumber;
const int MarkovDCVEdge::kProbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkovDCVEdge::MarkovDCVEdge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_markov_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
}
MarkovDCVEdge::MarkovDCVEdge(const MarkovDCVEdge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_neighbor()) {
    neighbor_ = new ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription(*from.neighbor_);
  } else {
    neighbor_ = NULL;
  }
  prob_ = from.prob_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
}

void MarkovDCVEdge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&neighbor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prob_) -
      reinterpret_cast<char*>(&neighbor_)) + sizeof(prob_));
}

MarkovDCVEdge::~MarkovDCVEdge() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
  SharedDtor();
}

void MarkovDCVEdge::SharedDtor() {
  if (this != internal_default_instance()) delete neighbor_;
}

void MarkovDCVEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkovDCVEdge::descriptor() {
  protobuf_markov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_markov_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarkovDCVEdge& MarkovDCVEdge::default_instance() {
  protobuf_markov_2eproto::InitDefaults();
  return *internal_default_instance();
}

MarkovDCVEdge* MarkovDCVEdge::New(::google::protobuf::Arena* arena) const {
  MarkovDCVEdge* n = new MarkovDCVEdge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarkovDCVEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_neighbor()) {
    GOOGLE_DCHECK(neighbor_ != NULL);
    neighbor_->::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription::Clear();
  }
  prob_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarkovDCVEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription neighbor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_neighbor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double prob = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
  return false;
#undef DO_
}

void MarkovDCVEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription neighbor = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->neighbor_, output);
  }

  // required double prob = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->prob(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
}

::google::protobuf::uint8* MarkovDCVEdge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription neighbor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->neighbor_, deterministic, target);
  }

  // required double prob = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->prob(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
  return target;
}

size_t MarkovDCVEdge::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
  size_t total_size = 0;

  if (has_neighbor()) {
    // required .ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription neighbor = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->neighbor_);
  }

  if (has_prob()) {
    // required double prob = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t MarkovDCVEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription neighbor = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->neighbor_);

    // required double prob = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkovDCVEdge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkovDCVEdge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarkovDCVEdge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
    MergeFrom(*source);
  }
}

void MarkovDCVEdge::MergeFrom(const MarkovDCVEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_neighbor()->::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription::MergeFrom(from.neighbor());
    }
    if (cached_has_bits & 0x00000002u) {
      prob_ = from.prob_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarkovDCVEdge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkovDCVEdge::CopyFrom(const MarkovDCVEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkovDCVEdge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_neighbor()) {
    if (!this->neighbor_->IsInitialized()) return false;
  }
  return true;
}

void MarkovDCVEdge::Swap(MarkovDCVEdge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkovDCVEdge::InternalSwap(MarkovDCVEdge* other) {
  using std::swap;
  swap(neighbor_, other->neighbor_);
  swap(prob_, other->prob_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarkovDCVEdge::GetMetadata() const {
  protobuf_markov_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_markov_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarkovDCVEdge

// required .ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription neighbor = 1;
bool MarkovDCVEdge::has_neighbor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarkovDCVEdge::set_has_neighbor() {
  _has_bits_[0] |= 0x00000001u;
}
void MarkovDCVEdge::clear_has_neighbor() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarkovDCVEdge::clear_neighbor() {
  if (neighbor_ != NULL) neighbor_->::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription::Clear();
  clear_has_neighbor();
}
const ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription& MarkovDCVEdge::neighbor() const {
  const ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* p = neighbor_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge.neighbor)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription*>(
      &::ru::mail::go::webbase::markov::protogen::_MarkovDCVStateDescription_default_instance_);
}
::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* MarkovDCVEdge::mutable_neighbor() {
  set_has_neighbor();
  if (neighbor_ == NULL) {
    neighbor_ = new ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge.neighbor)
  return neighbor_;
}
::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* MarkovDCVEdge::release_neighbor() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge.neighbor)
  clear_has_neighbor();
  ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* temp = neighbor_;
  neighbor_ = NULL;
  return temp;
}
void MarkovDCVEdge::set_allocated_neighbor(::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* neighbor) {
  delete neighbor_;
  neighbor_ = neighbor;
  if (neighbor) {
    set_has_neighbor();
  } else {
    clear_has_neighbor();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge.neighbor)
}

// required double prob = 2;
bool MarkovDCVEdge::has_prob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MarkovDCVEdge::set_has_prob() {
  _has_bits_[0] |= 0x00000002u;
}
void MarkovDCVEdge::clear_has_prob() {
  _has_bits_[0] &= ~0x00000002u;
}
void MarkovDCVEdge::clear_prob() {
  prob_ = 0;
  clear_has_prob();
}
double MarkovDCVEdge::prob() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge.prob)
  return prob_;
}
void MarkovDCVEdge::set_prob(double value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge.prob)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protogen
}  // namespace markov
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
