// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: markov.proto

#ifndef PROTOBUF_markov_2eproto__INCLUDED
#define PROTOBUF_markov_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace markov {
namespace protogen {
class MarkovDCVChain;
class MarkovDCVChainDefaultTypeInternal;
extern MarkovDCVChainDefaultTypeInternal _MarkovDCVChain_default_instance_;
class MarkovDCVEdge;
class MarkovDCVEdgeDefaultTypeInternal;
extern MarkovDCVEdgeDefaultTypeInternal _MarkovDCVEdge_default_instance_;
class MarkovDCVState;
class MarkovDCVStateDefaultTypeInternal;
extern MarkovDCVStateDefaultTypeInternal _MarkovDCVState_default_instance_;
class MarkovDCVStateDescription;
class MarkovDCVStateDescriptionDefaultTypeInternal;
extern MarkovDCVStateDescriptionDefaultTypeInternal _MarkovDCVStateDescription_default_instance_;
}  // namespace protogen
}  // namespace markov
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace markov {
namespace protogen {

namespace protobuf_markov_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_markov_2eproto

// ===================================================================

class MarkovDCVChain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.markov.protogen.MarkovDCVChain) */ {
 public:
  MarkovDCVChain();
  virtual ~MarkovDCVChain();

  MarkovDCVChain(const MarkovDCVChain& from);

  inline MarkovDCVChain& operator=(const MarkovDCVChain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarkovDCVChain(MarkovDCVChain&& from) noexcept
    : MarkovDCVChain() {
    *this = ::std::move(from);
  }

  inline MarkovDCVChain& operator=(MarkovDCVChain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarkovDCVChain& default_instance();

  static inline const MarkovDCVChain* internal_default_instance() {
    return reinterpret_cast<const MarkovDCVChain*>(
               &_MarkovDCVChain_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MarkovDCVChain* other);
  friend void swap(MarkovDCVChain& a, MarkovDCVChain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarkovDCVChain* New() const PROTOBUF_FINAL { return New(NULL); }

  MarkovDCVChain* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MarkovDCVChain& from);
  void MergeFrom(const MarkovDCVChain& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MarkovDCVChain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.markov.protogen.MarkovDCVState state = 1;
  int state_size() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  const ::ru::mail::go::webbase::markov::protogen::MarkovDCVState& state(int index) const;
  ::ru::mail::go::webbase::markov::protogen::MarkovDCVState* mutable_state(int index);
  ::ru::mail::go::webbase::markov::protogen::MarkovDCVState* add_state();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::markov::protogen::MarkovDCVState >*
      mutable_state();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::markov::protogen::MarkovDCVState >&
      state() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.markov.protogen.MarkovDCVChain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::markov::protogen::MarkovDCVState > state_;
  friend struct protobuf_markov_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MarkovDCVState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.markov.protogen.MarkovDCVState) */ {
 public:
  MarkovDCVState();
  virtual ~MarkovDCVState();

  MarkovDCVState(const MarkovDCVState& from);

  inline MarkovDCVState& operator=(const MarkovDCVState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarkovDCVState(MarkovDCVState&& from) noexcept
    : MarkovDCVState() {
    *this = ::std::move(from);
  }

  inline MarkovDCVState& operator=(MarkovDCVState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarkovDCVState& default_instance();

  static inline const MarkovDCVState* internal_default_instance() {
    return reinterpret_cast<const MarkovDCVState*>(
               &_MarkovDCVState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MarkovDCVState* other);
  friend void swap(MarkovDCVState& a, MarkovDCVState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarkovDCVState* New() const PROTOBUF_FINAL { return New(NULL); }

  MarkovDCVState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MarkovDCVState& from);
  void MergeFrom(const MarkovDCVState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MarkovDCVState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.markov.protogen.MarkovDCVEdge edge = 3;
  int edge_size() const;
  void clear_edge();
  static const int kEdgeFieldNumber = 3;
  const ::ru::mail::go::webbase::markov::protogen::MarkovDCVEdge& edge(int index) const;
  ::ru::mail::go::webbase::markov::protogen::MarkovDCVEdge* mutable_edge(int index);
  ::ru::mail::go::webbase::markov::protogen::MarkovDCVEdge* add_edge();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::markov::protogen::MarkovDCVEdge >*
      mutable_edge();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::markov::protogen::MarkovDCVEdge >&
      edge() const;

  // required .ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription description = 1;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription& description() const;
  ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* mutable_description();
  ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* release_description();
  void set_allocated_description(::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* description);

  // required double freq = 2 [default = 1];
  bool has_freq() const;
  void clear_freq();
  static const int kFreqFieldNumber = 2;
  double freq() const;
  void set_freq(double value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.markov.protogen.MarkovDCVState)
 private:
  void set_has_description();
  void clear_has_description();
  void set_has_freq();
  void clear_has_freq();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::markov::protogen::MarkovDCVEdge > edge_;
  ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* description_;
  double freq_;
  friend struct protobuf_markov_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MarkovDCVStateDescription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription) */ {
 public:
  MarkovDCVStateDescription();
  virtual ~MarkovDCVStateDescription();

  MarkovDCVStateDescription(const MarkovDCVStateDescription& from);

  inline MarkovDCVStateDescription& operator=(const MarkovDCVStateDescription& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarkovDCVStateDescription(MarkovDCVStateDescription&& from) noexcept
    : MarkovDCVStateDescription() {
    *this = ::std::move(from);
  }

  inline MarkovDCVStateDescription& operator=(MarkovDCVStateDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarkovDCVStateDescription& default_instance();

  static inline const MarkovDCVStateDescription* internal_default_instance() {
    return reinterpret_cast<const MarkovDCVStateDescription*>(
               &_MarkovDCVStateDescription_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(MarkovDCVStateDescription* other);
  friend void swap(MarkovDCVStateDescription& a, MarkovDCVStateDescription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarkovDCVStateDescription* New() const PROTOBUF_FINAL { return New(NULL); }

  MarkovDCVStateDescription* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MarkovDCVStateDescription& from);
  void MergeFrom(const MarkovDCVStateDescription& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MarkovDCVStateDescription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional int64 docID = 1;
  bool has_docid() const;
  void clear_docid();
  static const int kDocIDFieldNumber = 1;
  ::google::protobuf::int64 docid() const;
  void set_docid(::google::protobuf::int64 value);

  // required bool isClicked = 3;
  bool has_isclicked() const;
  void clear_isclicked();
  static const int kIsClickedFieldNumber = 3;
  bool isclicked() const;
  void set_isclicked(bool value);

  // required bool isViewed = 4;
  bool has_isviewed() const;
  void clear_isviewed();
  static const int kIsViewedFieldNumber = 4;
  bool isviewed() const;
  void set_isviewed(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription)
 private:
  void set_has_docid();
  void clear_has_docid();
  void set_has_url();
  void clear_has_url();
  void set_has_isclicked();
  void clear_has_isclicked();
  void set_has_isviewed();
  void clear_has_isviewed();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int64 docid_;
  bool isclicked_;
  bool isviewed_;
  friend struct protobuf_markov_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MarkovDCVEdge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge) */ {
 public:
  MarkovDCVEdge();
  virtual ~MarkovDCVEdge();

  MarkovDCVEdge(const MarkovDCVEdge& from);

  inline MarkovDCVEdge& operator=(const MarkovDCVEdge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarkovDCVEdge(MarkovDCVEdge&& from) noexcept
    : MarkovDCVEdge() {
    *this = ::std::move(from);
  }

  inline MarkovDCVEdge& operator=(MarkovDCVEdge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarkovDCVEdge& default_instance();

  static inline const MarkovDCVEdge* internal_default_instance() {
    return reinterpret_cast<const MarkovDCVEdge*>(
               &_MarkovDCVEdge_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(MarkovDCVEdge* other);
  friend void swap(MarkovDCVEdge& a, MarkovDCVEdge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarkovDCVEdge* New() const PROTOBUF_FINAL { return New(NULL); }

  MarkovDCVEdge* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MarkovDCVEdge& from);
  void MergeFrom(const MarkovDCVEdge& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MarkovDCVEdge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription neighbor = 1;
  bool has_neighbor() const;
  void clear_neighbor();
  static const int kNeighborFieldNumber = 1;
  const ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription& neighbor() const;
  ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* mutable_neighbor();
  ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* release_neighbor();
  void set_allocated_neighbor(::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* neighbor);

  // required double prob = 2;
  bool has_prob() const;
  void clear_prob();
  static const int kProbFieldNumber = 2;
  double prob() const;
  void set_prob(double value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge)
 private:
  void set_has_neighbor();
  void clear_has_neighbor();
  void set_has_prob();
  void clear_has_prob();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* neighbor_;
  double prob_;
  friend struct protobuf_markov_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MarkovDCVChain

// repeated .ru.mail.go.webbase.markov.protogen.MarkovDCVState state = 1;
inline int MarkovDCVChain::state_size() const {
  return state_.size();
}
inline void MarkovDCVChain::clear_state() {
  state_.Clear();
}
inline const ::ru::mail::go::webbase::markov::protogen::MarkovDCVState& MarkovDCVChain::state(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVChain.state)
  return state_.Get(index);
}
inline ::ru::mail::go::webbase::markov::protogen::MarkovDCVState* MarkovDCVChain::mutable_state(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.markov.protogen.MarkovDCVChain.state)
  return state_.Mutable(index);
}
inline ::ru::mail::go::webbase::markov::protogen::MarkovDCVState* MarkovDCVChain::add_state() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.markov.protogen.MarkovDCVChain.state)
  return state_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::markov::protogen::MarkovDCVState >*
MarkovDCVChain::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.markov.protogen.MarkovDCVChain.state)
  return &state_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::markov::protogen::MarkovDCVState >&
MarkovDCVChain::state() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.markov.protogen.MarkovDCVChain.state)
  return state_;
}

// -------------------------------------------------------------------

// MarkovDCVState

// required .ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription description = 1;
inline bool MarkovDCVState::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarkovDCVState::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarkovDCVState::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarkovDCVState::clear_description() {
  if (description_ != NULL) description_->::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription::Clear();
  clear_has_description();
}
inline const ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription& MarkovDCVState::description() const {
  const ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* p = description_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVState.description)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription*>(
      &::ru::mail::go::webbase::markov::protogen::_MarkovDCVStateDescription_default_instance_);
}
inline ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* MarkovDCVState::mutable_description() {
  set_has_description();
  if (description_ == NULL) {
    description_ = new ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.markov.protogen.MarkovDCVState.description)
  return description_;
}
inline ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* MarkovDCVState::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.markov.protogen.MarkovDCVState.description)
  clear_has_description();
  ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* temp = description_;
  description_ = NULL;
  return temp;
}
inline void MarkovDCVState::set_allocated_description(::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* description) {
  delete description_;
  description_ = description;
  if (description) {
    set_has_description();
  } else {
    clear_has_description();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.markov.protogen.MarkovDCVState.description)
}

// required double freq = 2 [default = 1];
inline bool MarkovDCVState::has_freq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarkovDCVState::set_has_freq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarkovDCVState::clear_has_freq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarkovDCVState::clear_freq() {
  freq_ = 1;
  clear_has_freq();
}
inline double MarkovDCVState::freq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVState.freq)
  return freq_;
}
inline void MarkovDCVState::set_freq(double value) {
  set_has_freq();
  freq_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.markov.protogen.MarkovDCVState.freq)
}

// repeated .ru.mail.go.webbase.markov.protogen.MarkovDCVEdge edge = 3;
inline int MarkovDCVState::edge_size() const {
  return edge_.size();
}
inline void MarkovDCVState::clear_edge() {
  edge_.Clear();
}
inline const ::ru::mail::go::webbase::markov::protogen::MarkovDCVEdge& MarkovDCVState::edge(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVState.edge)
  return edge_.Get(index);
}
inline ::ru::mail::go::webbase::markov::protogen::MarkovDCVEdge* MarkovDCVState::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.markov.protogen.MarkovDCVState.edge)
  return edge_.Mutable(index);
}
inline ::ru::mail::go::webbase::markov::protogen::MarkovDCVEdge* MarkovDCVState::add_edge() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.markov.protogen.MarkovDCVState.edge)
  return edge_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::markov::protogen::MarkovDCVEdge >*
MarkovDCVState::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.markov.protogen.MarkovDCVState.edge)
  return &edge_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::markov::protogen::MarkovDCVEdge >&
MarkovDCVState::edge() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.markov.protogen.MarkovDCVState.edge)
  return edge_;
}

// -------------------------------------------------------------------

// MarkovDCVStateDescription

// optional int64 docID = 1;
inline bool MarkovDCVStateDescription::has_docid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarkovDCVStateDescription::set_has_docid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarkovDCVStateDescription::clear_has_docid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarkovDCVStateDescription::clear_docid() {
  docid_ = GOOGLE_LONGLONG(0);
  clear_has_docid();
}
inline ::google::protobuf::int64 MarkovDCVStateDescription::docid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.docID)
  return docid_;
}
inline void MarkovDCVStateDescription::set_docid(::google::protobuf::int64 value) {
  set_has_docid();
  docid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.docID)
}

// optional string url = 2;
inline bool MarkovDCVStateDescription::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarkovDCVStateDescription::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarkovDCVStateDescription::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarkovDCVStateDescription::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& MarkovDCVStateDescription::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url)
  return url_.GetNoArena();
}
inline void MarkovDCVStateDescription::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url)
}
#if LANG_CXX11
inline void MarkovDCVStateDescription::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url)
}
#endif
inline void MarkovDCVStateDescription::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url)
}
inline void MarkovDCVStateDescription::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url)
}
inline ::std::string* MarkovDCVStateDescription::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkovDCVStateDescription::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkovDCVStateDescription::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.url)
}

// required bool isClicked = 3;
inline bool MarkovDCVStateDescription::has_isclicked() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarkovDCVStateDescription::set_has_isclicked() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarkovDCVStateDescription::clear_has_isclicked() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarkovDCVStateDescription::clear_isclicked() {
  isclicked_ = false;
  clear_has_isclicked();
}
inline bool MarkovDCVStateDescription::isclicked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.isClicked)
  return isclicked_;
}
inline void MarkovDCVStateDescription::set_isclicked(bool value) {
  set_has_isclicked();
  isclicked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.isClicked)
}

// required bool isViewed = 4;
inline bool MarkovDCVStateDescription::has_isviewed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarkovDCVStateDescription::set_has_isviewed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarkovDCVStateDescription::clear_has_isviewed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarkovDCVStateDescription::clear_isviewed() {
  isviewed_ = false;
  clear_has_isviewed();
}
inline bool MarkovDCVStateDescription::isviewed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.isViewed)
  return isviewed_;
}
inline void MarkovDCVStateDescription::set_isviewed(bool value) {
  set_has_isviewed();
  isviewed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription.isViewed)
}

// -------------------------------------------------------------------

// MarkovDCVEdge

// required .ru.mail.go.webbase.markov.protogen.MarkovDCVStateDescription neighbor = 1;
inline bool MarkovDCVEdge::has_neighbor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarkovDCVEdge::set_has_neighbor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarkovDCVEdge::clear_has_neighbor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarkovDCVEdge::clear_neighbor() {
  if (neighbor_ != NULL) neighbor_->::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription::Clear();
  clear_has_neighbor();
}
inline const ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription& MarkovDCVEdge::neighbor() const {
  const ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* p = neighbor_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge.neighbor)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription*>(
      &::ru::mail::go::webbase::markov::protogen::_MarkovDCVStateDescription_default_instance_);
}
inline ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* MarkovDCVEdge::mutable_neighbor() {
  set_has_neighbor();
  if (neighbor_ == NULL) {
    neighbor_ = new ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge.neighbor)
  return neighbor_;
}
inline ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* MarkovDCVEdge::release_neighbor() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge.neighbor)
  clear_has_neighbor();
  ::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* temp = neighbor_;
  neighbor_ = NULL;
  return temp;
}
inline void MarkovDCVEdge::set_allocated_neighbor(::ru::mail::go::webbase::markov::protogen::MarkovDCVStateDescription* neighbor) {
  delete neighbor_;
  neighbor_ = neighbor;
  if (neighbor) {
    set_has_neighbor();
  } else {
    clear_has_neighbor();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge.neighbor)
}

// required double prob = 2;
inline bool MarkovDCVEdge::has_prob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarkovDCVEdge::set_has_prob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarkovDCVEdge::clear_has_prob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarkovDCVEdge::clear_prob() {
  prob_ = 0;
  clear_has_prob();
}
inline double MarkovDCVEdge::prob() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge.prob)
  return prob_;
}
inline void MarkovDCVEdge::set_prob(double value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.markov.protogen.MarkovDCVEdge.prob)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace protogen
}  // namespace markov
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_markov_2eproto__INCLUDED
