// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qinformer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "qinformer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace serp {
class QInfo_Statistic_AlDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic_Al>
     _instance;
} _QInfo_Statistic_Al_default_instance_;
class QInfo_Statistic_CrDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic_Cr>
     _instance;
} _QInfo_Statistic_Cr_default_instance_;
class QInfo_Statistic_SrDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic_Sr>
     _instance;
} _QInfo_Statistic_Sr_default_instance_;
class QInfo_Statistic_BrDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic_Br>
     _instance;
} _QInfo_Statistic_Br_default_instance_;
class QInfo_Statistic_NalDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic_Nal>
     _instance;
} _QInfo_Statistic_Nal_default_instance_;
class QInfo_Statistic_UrlInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic_UrlInfo>
     _instance;
} _QInfo_Statistic_UrlInfo_default_instance_;
class QInfo_Statistic_NvgDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic_Nvg>
     _instance;
} _QInfo_Statistic_Nvg_default_instance_;
class QInfo_Statistic_VrtInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic_VrtInfo>
     _instance;
} _QInfo_Statistic_VrtInfo_default_instance_;
class QInfo_Statistic_VrtDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic_Vrt>
     _instance;
} _QInfo_Statistic_Vrt_default_instance_;
class QInfo_Statistic_AlImgDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic_AlImg>
     _instance;
} _QInfo_Statistic_AlImg_default_instance_;
class QInfo_Statistic_CrImgDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic_CrImg>
     _instance;
} _QInfo_Statistic_CrImg_default_instance_;
class QInfo_Statistic_CrVdoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic_CrVdo>
     _instance;
} _QInfo_Statistic_CrVdo_default_instance_;
class QInfo_Statistic_ESSRexpDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic_ESSRexp>
     _instance;
} _QInfo_Statistic_ESSRexp_default_instance_;
class QInfo_Statistic_FreqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic_Freq>
     _instance;
} _QInfo_Statistic_Freq_default_instance_;
class QInfo_Statistic_CrMixinDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic_CrMixin>
     _instance;
} _QInfo_Statistic_CrMixin_default_instance_;
class QInfo_Statistic_IntentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic_Intent>
     _instance;
} _QInfo_Statistic_Intent_default_instance_;
class QInfo_StatisticDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo_Statistic>
     _instance;
} _QInfo_Statistic_default_instance_;
class QInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QInfo>
     _instance;
} _QInfo_default_instance_;

namespace protobuf_qinformer_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[18];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Al, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Al, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Al, sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Al, navig_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Cr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Cr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Cr, sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Cr, navig_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Sr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Sr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Sr, sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Sr, urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Sr, users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Sr, navig_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Br, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Br, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Br, sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Br, navig_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Br, navig_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Nal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Nal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Nal, sessions_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_UrlInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_UrlInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_UrlInfo, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_UrlInfo, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_UrlInfo, site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_UrlInfo, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_UrlInfo, crmix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_UrlInfo, crm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_UrlInfo, hash64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_UrlInfo, normalized_hash_),
  0,
  1,
  2,
  3,
  4,
  7,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Nvg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Nvg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Nvg, prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Nvg, urls_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_VrtInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_VrtInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_VrtInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_VrtInfo, rank_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Vrt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Vrt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Vrt, vrts_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_AlImg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_AlImg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_AlImg, sessions_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrImg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrImg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrImg, sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrImg, clicks_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrVdo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrVdo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrVdo, sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrVdo, clicks_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_ESSRexp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_ESSRexp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_ESSRexp, sessions_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Freq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Freq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Freq, queries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Freq, users_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrMixin, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrMixin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrMixin, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrMixin, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrMixin, attractiveness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrMixin, satisfaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrMixin, views_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrMixin, clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrMixin, satisfied_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_CrMixin, users_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Intent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Intent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Intent, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Intent, prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Intent, clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic_Intent, views_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, geo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, al_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, al_g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, al_mg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, cr_m_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, cr_mg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, cr_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, cr_g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, cr_mix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, sr_g_spk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, sr_g_liru_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, sr_g_kws_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, sr_y_spk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, sr_y_liru_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, sr_y_kws_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, br_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, br_g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, br_m_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, nal_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, nal_g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, nal_mg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, nvg_mdl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, vrt_mdl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, cr_img_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, al_img_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, al_img_g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, al_img_gmx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, essr_exp_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, essr_exp_g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, freq_m_3y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, cr_m_mixins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, int_m_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, cr_vdo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, cr_m_mob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, cr_m_mob_mixins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo_Statistic, int_m_mob_),
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  ~0u,
  ~0u,
  29,
  30,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo, query_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo, stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QInfo, is_geo_),
  0,
  ~0u,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(QInfo_Statistic_Al)},
  { 9, 16, sizeof(QInfo_Statistic_Cr)},
  { 18, 27, sizeof(QInfo_Statistic_Sr)},
  { 31, 39, sizeof(QInfo_Statistic_Br)},
  { 42, 48, sizeof(QInfo_Statistic_Nal)},
  { 49, 62, sizeof(QInfo_Statistic_UrlInfo)},
  { 70, 77, sizeof(QInfo_Statistic_Nvg)},
  { 79, 86, sizeof(QInfo_Statistic_VrtInfo)},
  { 88, 94, sizeof(QInfo_Statistic_Vrt)},
  { 95, 101, sizeof(QInfo_Statistic_AlImg)},
  { 102, 109, sizeof(QInfo_Statistic_CrImg)},
  { 111, 118, sizeof(QInfo_Statistic_CrVdo)},
  { 120, 126, sizeof(QInfo_Statistic_ESSRexp)},
  { 127, 134, sizeof(QInfo_Statistic_Freq)},
  { 136, 149, sizeof(QInfo_Statistic_CrMixin)},
  { 157, 166, sizeof(QInfo_Statistic_Intent)},
  { 170, 211, sizeof(QInfo_Statistic)},
  { 247, 255, sizeof(QInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_Al_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_Cr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_Sr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_Br_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_Nal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_UrlInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_Nvg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_VrtInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_Vrt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_AlImg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_CrImg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_CrVdo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_ESSRexp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_Freq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_CrMixin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_Intent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_Statistic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "qinformer.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _QInfo_Statistic_Al_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_Al_default_instance_);_QInfo_Statistic_Cr_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_Cr_default_instance_);_QInfo_Statistic_Sr_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_Sr_default_instance_);_QInfo_Statistic_Br_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_Br_default_instance_);_QInfo_Statistic_Nal_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_Nal_default_instance_);_QInfo_Statistic_UrlInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_UrlInfo_default_instance_);_QInfo_Statistic_Nvg_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_Nvg_default_instance_);_QInfo_Statistic_VrtInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_VrtInfo_default_instance_);_QInfo_Statistic_Vrt_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_Vrt_default_instance_);_QInfo_Statistic_AlImg_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_AlImg_default_instance_);_QInfo_Statistic_CrImg_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_CrImg_default_instance_);_QInfo_Statistic_CrVdo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_CrVdo_default_instance_);_QInfo_Statistic_ESSRexp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_ESSRexp_default_instance_);_QInfo_Statistic_Freq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_Freq_default_instance_);_QInfo_Statistic_CrMixin_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_CrMixin_default_instance_);_QInfo_Statistic_Intent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_Intent_default_instance_);_QInfo_Statistic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_Statistic_default_instance_);_QInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QInfo_default_instance_);_QInfo_Statistic_default_instance_._instance.get_mutable()->al_y_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Al*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Al::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->al_g_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Al*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Al::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->al_mg_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Al*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Al::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->cr_m_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->cr_mg_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->cr_y_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->cr_g_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->cr_mix_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->sr_g_spk_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->sr_g_liru_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->sr_g_kws_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->sr_y_spk_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->sr_y_liru_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->sr_y_kws_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->br_y_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Br*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Br::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->br_g_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Br*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Br::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->br_m_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Br*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Br::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->nal_y_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->nal_g_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->nal_mg_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->nvg_mdl_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->vrt_mdl_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->cr_img_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->al_img_y_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->al_img_g_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->al_img_gmx_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->essr_exp_y_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->essr_exp_g_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->freq_m_3y_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->cr_vdo_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo::internal_default_instance());
  _QInfo_Statistic_default_instance_._instance.get_mutable()->cr_m_mob_ = const_cast< ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017qinformer.proto\022\027ru.mail.go.webbase.se"
      "rp\"\356\031\n\005QInfo\022\022\n\nquery_text\030\001 \001(\t\0226\n\004stat"
      "\030\002 \003(\0132(.ru.mail.go.webbase.serp.QInfo.S"
      "tatistic\022\016\n\006is_geo\030\003 \001(\010\032\210\031\n\tStatistic\022\013"
      "\n\003geo\030\001 \002(\r\0229\n\004al_y\030\002 \001(\0132+.ru.mail.go.w"
      "ebbase.serp.QInfo.Statistic.Al\0229\n\004al_g\030\003"
      " \001(\0132+.ru.mail.go.webbase.serp.QInfo.Sta"
      "tistic.Al\022:\n\005al_mg\030\004 \001(\0132+.ru.mail.go.we"
      "bbase.serp.QInfo.Statistic.Al\0229\n\004cr_m\030\005 "
      "\001(\0132+.ru.mail.go.webbase.serp.QInfo.Stat"
      "istic.Cr\022:\n\005cr_mg\030\006 \001(\0132+.ru.mail.go.web"
      "base.serp.QInfo.Statistic.Cr\0229\n\004cr_y\030\007 \001"
      "(\0132+.ru.mail.go.webbase.serp.QInfo.Stati"
      "stic.Cr\0229\n\004cr_g\030\010 \001(\0132+.ru.mail.go.webba"
      "se.serp.QInfo.Statistic.Cr\022;\n\006cr_mix\030\t \001"
      "(\0132+.ru.mail.go.webbase.serp.QInfo.Stati"
      "stic.Cr\022=\n\010sr_g_spk\030\n \001(\0132+.ru.mail.go.w"
      "ebbase.serp.QInfo.Statistic.Sr\022>\n\tsr_g_l"
      "iru\030\013 \001(\0132+.ru.mail.go.webbase.serp.QInf"
      "o.Statistic.Sr\022=\n\010sr_g_kws\030\014 \001(\0132+.ru.ma"
      "il.go.webbase.serp.QInfo.Statistic.Sr\022=\n"
      "\010sr_y_spk\030\r \001(\0132+.ru.mail.go.webbase.ser"
      "p.QInfo.Statistic.Sr\022>\n\tsr_y_liru\030\016 \001(\0132"
      "+.ru.mail.go.webbase.serp.QInfo.Statisti"
      "c.Sr\022=\n\010sr_y_kws\030\017 \001(\0132+.ru.mail.go.webb"
      "ase.serp.QInfo.Statistic.Sr\0229\n\004br_y\030\020 \001("
      "\0132+.ru.mail.go.webbase.serp.QInfo.Statis"
      "tic.Br\0229\n\004br_g\030\021 \001(\0132+.ru.mail.go.webbas"
      "e.serp.QInfo.Statistic.Br\0229\n\004br_m\030\022 \001(\0132"
      "+.ru.mail.go.webbase.serp.QInfo.Statisti"
      "c.Br\022;\n\005nal_y\030\023 \001(\0132,.ru.mail.go.webbase"
      ".serp.QInfo.Statistic.Nal\022;\n\005nal_g\030\024 \001(\013"
      "2,.ru.mail.go.webbase.serp.QInfo.Statist"
      "ic.Nal\022<\n\006nal_mg\030\025 \001(\0132,.ru.mail.go.webb"
      "ase.serp.QInfo.Statistic.Nal\022=\n\007nvg_mdl\030"
      "\026 \001(\0132,.ru.mail.go.webbase.serp.QInfo.St"
      "atistic.Nvg\022=\n\007vrt_mdl\030\027 \001(\0132,.ru.mail.g"
      "o.webbase.serp.QInfo.Statistic.Vrt\022>\n\006cr"
      "_img\030\030 \001(\0132..ru.mail.go.webbase.serp.QIn"
      "fo.Statistic.CrImg\022@\n\010al_img_y\030\031 \001(\0132..r"
      "u.mail.go.webbase.serp.QInfo.Statistic.A"
      "lImg\022@\n\010al_img_g\030\032 \001(\0132..ru.mail.go.webb"
      "ase.serp.QInfo.Statistic.AlImg\022B\n\nal_img"
      "_gmx\030\033 \001(\0132..ru.mail.go.webbase.serp.QIn"
      "fo.Statistic.AlImg\022D\n\nessr_exp_y\030\034 \001(\01320"
      ".ru.mail.go.webbase.serp.QInfo.Statistic"
      ".ESSRexp\022D\n\nessr_exp_g\030\035 \001(\01320.ru.mail.g"
      "o.webbase.serp.QInfo.Statistic.ESSRexp\022@"
      "\n\tfreq_m_3y\030\036 \001(\0132-.ru.mail.go.webbase.s"
      "erp.QInfo.Statistic.Freq\022E\n\013cr_m_mixins\030"
      "\037 \003(\01320.ru.mail.go.webbase.serp.QInfo.St"
      "atistic.CrMixin\022>\n\005int_m\030  \003(\0132/.ru.mail"
      ".go.webbase.serp.QInfo.Statistic.Intent\022"
      ">\n\006cr_vdo\030! \001(\0132..ru.mail.go.webbase.ser"
      "p.QInfo.Statistic.CrVdo\022=\n\010cr_m_mob\030\" \001("
      "\0132+.ru.mail.go.webbase.serp.QInfo.Statis"
      "tic.Cr\022I\n\017cr_m_mob_mixins\030# \003(\01320.ru.mai"
      "l.go.webbase.serp.QInfo.Statistic.CrMixi"
      "n\022B\n\tint_m_mob\030$ \003(\0132/.ru.mail.go.webbas"
      "e.serp.QInfo.Statistic.Intent\032%\n\002Al\022\020\n\010s"
      "essions\030\001 \001(\r\022\r\n\005navig\030\004 \001(\010\032%\n\002Cr\022\020\n\010se"
      "ssions\030\001 \001(\r\022\r\n\005navig\030\002 \001(\010\032B\n\002Sr\022\020\n\010ses"
      "sions\030\001 \001(\r\022\014\n\004urls\030\002 \001(\r\022\r\n\005users\030\003 \001(\r"
      "\022\r\n\005navig\030\004 \001(\010\032<\n\002Br\022\020\n\010sessions\030\001 \001(\r\022"
      "\025\n\rnavig_quality\030\002 \001(\002\022\r\n\005navig\030\003 \001(\010\032\027\n"
      "\003Nal\022\020\n\010sessions\030\001 \001(\r\032\205\001\n\007UrlInfo\022\013\n\003ur"
      "l\030\001 \001(\t\022\014\n\004hash\030\002 \001(\r\022\014\n\004site\030\003 \001(\005\022\014\n\004r"
      "ank\030\004 \001(\002\022\r\n\005crMix\030\005 \001(\002\022\013\n\003crM\030\006 \001(\002\022\016\n"
      "\006hash64\030\007 \001(\004\022\027\n\017normalized_hash\030\010 \001(\004\032S"
      "\n\003Nvg\022\014\n\004prob\030\001 \001(\002\022>\n\004urls\030\002 \003(\01320.ru.m"
      "ail.go.webbase.serp.QInfo.Statistic.UrlI"
      "nfo\032%\n\007VrtInfo\022\014\n\004name\030\001 \001(\t\022\014\n\004rank\030\002 \001"
      "(\002\032E\n\003Vrt\022>\n\004vrts\030\001 \003(\01320.ru.mail.go.web"
      "base.serp.QInfo.Statistic.VrtInfo\032\031\n\005AlI"
      "mg\022\020\n\010sessions\030\001 \001(\r\032)\n\005CrImg\022\020\n\010session"
      "s\030\001 \001(\r\022\016\n\006clicks\030\002 \001(\r\032)\n\005CrVdo\022\020\n\010sess"
      "ions\030\001 \001(\r\022\016\n\006clicks\030\002 \001(\r\032\033\n\007ESSRexp\022\020\n"
      "\010sessions\030\001 \001(\r\032&\n\004Freq\022\017\n\007queries\030\001 \001(\r"
      "\022\r\n\005users\030\002 \001(\r\032\224\001\n\007CrMixin\022\014\n\004name\030\001 \002("
      "\t\022\014\n\004rank\030\002 \001(\002\022\026\n\016attractiveness\030\003 \001(\002\022"
      "\024\n\014satisfaction\030\004 \001(\002\022\r\n\005views\030\005 \001(\r\022\016\n\006"
      "clicks\030\006 \001(\r\022\021\n\tsatisfied\030\007 \001(\r\022\r\n\005users"
      "\030\010 \001(\r\032C\n\006Intent\022\014\n\004name\030\001 \002(\t\022\014\n\004prob\030\002"
      " \001(\002\022\016\n\006clicks\030\003 \001(\r\022\r\n\005views\030\004 \001(\rB\013B\tQ"
      "Informer"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3368);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qinformer.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_qinformer_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic_Al::kSessionsFieldNumber;
const int QInfo_Statistic_Al::kNavigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic_Al::QInfo_Statistic_Al()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
}
QInfo_Statistic_Al::QInfo_Statistic_Al(const QInfo_Statistic_Al& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sessions_, &from.sessions_,
    static_cast<size_t>(reinterpret_cast<char*>(&navig_) -
    reinterpret_cast<char*>(&sessions_)) + sizeof(navig_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
}

void QInfo_Statistic_Al::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sessions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&navig_) -
      reinterpret_cast<char*>(&sessions_)) + sizeof(navig_));
}

QInfo_Statistic_Al::~QInfo_Statistic_Al() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
  SharedDtor();
}

void QInfo_Statistic_Al::SharedDtor() {
}

void QInfo_Statistic_Al::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic_Al::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic_Al& QInfo_Statistic_Al::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic_Al* QInfo_Statistic_Al::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic_Al* n = new QInfo_Statistic_Al;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic_Al::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&sessions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&navig_) -
        reinterpret_cast<char*>(&sessions_)) + sizeof(navig_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic_Al::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool navig = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_navig();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
  return false;
#undef DO_
}

void QInfo_Statistic_Al::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sessions(), output);
  }

  // optional bool navig = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->navig(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
}

::google::protobuf::uint8* QInfo_Statistic_Al::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sessions(), target);
  }

  // optional bool navig = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->navig(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
  return target;
}

size_t QInfo_Statistic_Al::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 sessions = 1;
    if (has_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessions());
    }

    // optional bool navig = 4;
    if (has_navig()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic_Al::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic_Al* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic_Al>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
    MergeFrom(*source);
  }
}

void QInfo_Statistic_Al::MergeFrom(const QInfo_Statistic_Al& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sessions_ = from.sessions_;
    }
    if (cached_has_bits & 0x00000002u) {
      navig_ = from.navig_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QInfo_Statistic_Al::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic_Al::CopyFrom(const QInfo_Statistic_Al& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic_Al::IsInitialized() const {
  return true;
}

void QInfo_Statistic_Al::Swap(QInfo_Statistic_Al* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic_Al::InternalSwap(QInfo_Statistic_Al* other) {
  using std::swap;
  swap(sessions_, other->sessions_);
  swap(navig_, other->navig_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic_Al::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic_Al

// optional uint32 sessions = 1;
bool QInfo_Statistic_Al::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo_Statistic_Al::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo_Statistic_Al::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo_Statistic_Al::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
::google::protobuf::uint32 QInfo_Statistic_Al::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Al.sessions)
  return sessions_;
}
void QInfo_Statistic_Al::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Al.sessions)
}

// optional bool navig = 4;
bool QInfo_Statistic_Al::has_navig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QInfo_Statistic_Al::set_has_navig() {
  _has_bits_[0] |= 0x00000002u;
}
void QInfo_Statistic_Al::clear_has_navig() {
  _has_bits_[0] &= ~0x00000002u;
}
void QInfo_Statistic_Al::clear_navig() {
  navig_ = false;
  clear_has_navig();
}
bool QInfo_Statistic_Al::navig() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Al.navig)
  return navig_;
}
void QInfo_Statistic_Al::set_navig(bool value) {
  set_has_navig();
  navig_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Al.navig)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic_Cr::kSessionsFieldNumber;
const int QInfo_Statistic_Cr::kNavigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic_Cr::QInfo_Statistic_Cr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
}
QInfo_Statistic_Cr::QInfo_Statistic_Cr(const QInfo_Statistic_Cr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sessions_, &from.sessions_,
    static_cast<size_t>(reinterpret_cast<char*>(&navig_) -
    reinterpret_cast<char*>(&sessions_)) + sizeof(navig_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
}

void QInfo_Statistic_Cr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sessions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&navig_) -
      reinterpret_cast<char*>(&sessions_)) + sizeof(navig_));
}

QInfo_Statistic_Cr::~QInfo_Statistic_Cr() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
  SharedDtor();
}

void QInfo_Statistic_Cr::SharedDtor() {
}

void QInfo_Statistic_Cr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic_Cr::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic_Cr& QInfo_Statistic_Cr::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic_Cr* QInfo_Statistic_Cr::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic_Cr* n = new QInfo_Statistic_Cr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic_Cr::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&sessions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&navig_) -
        reinterpret_cast<char*>(&sessions_)) + sizeof(navig_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic_Cr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool navig = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_navig();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
  return false;
#undef DO_
}

void QInfo_Statistic_Cr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sessions(), output);
  }

  // optional bool navig = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->navig(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
}

::google::protobuf::uint8* QInfo_Statistic_Cr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sessions(), target);
  }

  // optional bool navig = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->navig(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
  return target;
}

size_t QInfo_Statistic_Cr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 sessions = 1;
    if (has_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessions());
    }

    // optional bool navig = 2;
    if (has_navig()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic_Cr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic_Cr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic_Cr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
    MergeFrom(*source);
  }
}

void QInfo_Statistic_Cr::MergeFrom(const QInfo_Statistic_Cr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sessions_ = from.sessions_;
    }
    if (cached_has_bits & 0x00000002u) {
      navig_ = from.navig_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QInfo_Statistic_Cr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic_Cr::CopyFrom(const QInfo_Statistic_Cr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic_Cr::IsInitialized() const {
  return true;
}

void QInfo_Statistic_Cr::Swap(QInfo_Statistic_Cr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic_Cr::InternalSwap(QInfo_Statistic_Cr* other) {
  using std::swap;
  swap(sessions_, other->sessions_);
  swap(navig_, other->navig_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic_Cr::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic_Cr

// optional uint32 sessions = 1;
bool QInfo_Statistic_Cr::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo_Statistic_Cr::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo_Statistic_Cr::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo_Statistic_Cr::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
::google::protobuf::uint32 QInfo_Statistic_Cr::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Cr.sessions)
  return sessions_;
}
void QInfo_Statistic_Cr::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Cr.sessions)
}

// optional bool navig = 2;
bool QInfo_Statistic_Cr::has_navig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QInfo_Statistic_Cr::set_has_navig() {
  _has_bits_[0] |= 0x00000002u;
}
void QInfo_Statistic_Cr::clear_has_navig() {
  _has_bits_[0] &= ~0x00000002u;
}
void QInfo_Statistic_Cr::clear_navig() {
  navig_ = false;
  clear_has_navig();
}
bool QInfo_Statistic_Cr::navig() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Cr.navig)
  return navig_;
}
void QInfo_Statistic_Cr::set_navig(bool value) {
  set_has_navig();
  navig_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Cr.navig)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic_Sr::kSessionsFieldNumber;
const int QInfo_Statistic_Sr::kUrlsFieldNumber;
const int QInfo_Statistic_Sr::kUsersFieldNumber;
const int QInfo_Statistic_Sr::kNavigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic_Sr::QInfo_Statistic_Sr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
}
QInfo_Statistic_Sr::QInfo_Statistic_Sr(const QInfo_Statistic_Sr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sessions_, &from.sessions_,
    static_cast<size_t>(reinterpret_cast<char*>(&navig_) -
    reinterpret_cast<char*>(&sessions_)) + sizeof(navig_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
}

void QInfo_Statistic_Sr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sessions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&navig_) -
      reinterpret_cast<char*>(&sessions_)) + sizeof(navig_));
}

QInfo_Statistic_Sr::~QInfo_Statistic_Sr() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
  SharedDtor();
}

void QInfo_Statistic_Sr::SharedDtor() {
}

void QInfo_Statistic_Sr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic_Sr::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic_Sr& QInfo_Statistic_Sr::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic_Sr* QInfo_Statistic_Sr::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic_Sr* n = new QInfo_Statistic_Sr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic_Sr::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&sessions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&navig_) -
        reinterpret_cast<char*>(&sessions_)) + sizeof(navig_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic_Sr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 urls = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 users = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_users();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &users_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool navig = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_navig();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
  return false;
#undef DO_
}

void QInfo_Statistic_Sr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sessions(), output);
  }

  // optional uint32 urls = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->urls(), output);
  }

  // optional uint32 users = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->users(), output);
  }

  // optional bool navig = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->navig(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
}

::google::protobuf::uint8* QInfo_Statistic_Sr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sessions(), target);
  }

  // optional uint32 urls = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->urls(), target);
  }

  // optional uint32 users = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->users(), target);
  }

  // optional bool navig = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->navig(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
  return target;
}

size_t QInfo_Statistic_Sr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 sessions = 1;
    if (has_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessions());
    }

    // optional uint32 urls = 2;
    if (has_urls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->urls());
    }

    // optional uint32 users = 3;
    if (has_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->users());
    }

    // optional bool navig = 4;
    if (has_navig()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic_Sr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic_Sr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic_Sr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
    MergeFrom(*source);
  }
}

void QInfo_Statistic_Sr::MergeFrom(const QInfo_Statistic_Sr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      sessions_ = from.sessions_;
    }
    if (cached_has_bits & 0x00000002u) {
      urls_ = from.urls_;
    }
    if (cached_has_bits & 0x00000004u) {
      users_ = from.users_;
    }
    if (cached_has_bits & 0x00000008u) {
      navig_ = from.navig_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QInfo_Statistic_Sr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic_Sr::CopyFrom(const QInfo_Statistic_Sr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic_Sr::IsInitialized() const {
  return true;
}

void QInfo_Statistic_Sr::Swap(QInfo_Statistic_Sr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic_Sr::InternalSwap(QInfo_Statistic_Sr* other) {
  using std::swap;
  swap(sessions_, other->sessions_);
  swap(urls_, other->urls_);
  swap(users_, other->users_);
  swap(navig_, other->navig_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic_Sr::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic_Sr

// optional uint32 sessions = 1;
bool QInfo_Statistic_Sr::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo_Statistic_Sr::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo_Statistic_Sr::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo_Statistic_Sr::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
::google::protobuf::uint32 QInfo_Statistic_Sr::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Sr.sessions)
  return sessions_;
}
void QInfo_Statistic_Sr::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Sr.sessions)
}

// optional uint32 urls = 2;
bool QInfo_Statistic_Sr::has_urls() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QInfo_Statistic_Sr::set_has_urls() {
  _has_bits_[0] |= 0x00000002u;
}
void QInfo_Statistic_Sr::clear_has_urls() {
  _has_bits_[0] &= ~0x00000002u;
}
void QInfo_Statistic_Sr::clear_urls() {
  urls_ = 0u;
  clear_has_urls();
}
::google::protobuf::uint32 QInfo_Statistic_Sr::urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Sr.urls)
  return urls_;
}
void QInfo_Statistic_Sr::set_urls(::google::protobuf::uint32 value) {
  set_has_urls();
  urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Sr.urls)
}

// optional uint32 users = 3;
bool QInfo_Statistic_Sr::has_users() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QInfo_Statistic_Sr::set_has_users() {
  _has_bits_[0] |= 0x00000004u;
}
void QInfo_Statistic_Sr::clear_has_users() {
  _has_bits_[0] &= ~0x00000004u;
}
void QInfo_Statistic_Sr::clear_users() {
  users_ = 0u;
  clear_has_users();
}
::google::protobuf::uint32 QInfo_Statistic_Sr::users() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Sr.users)
  return users_;
}
void QInfo_Statistic_Sr::set_users(::google::protobuf::uint32 value) {
  set_has_users();
  users_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Sr.users)
}

// optional bool navig = 4;
bool QInfo_Statistic_Sr::has_navig() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QInfo_Statistic_Sr::set_has_navig() {
  _has_bits_[0] |= 0x00000008u;
}
void QInfo_Statistic_Sr::clear_has_navig() {
  _has_bits_[0] &= ~0x00000008u;
}
void QInfo_Statistic_Sr::clear_navig() {
  navig_ = false;
  clear_has_navig();
}
bool QInfo_Statistic_Sr::navig() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Sr.navig)
  return navig_;
}
void QInfo_Statistic_Sr::set_navig(bool value) {
  set_has_navig();
  navig_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Sr.navig)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic_Br::kSessionsFieldNumber;
const int QInfo_Statistic_Br::kNavigQualityFieldNumber;
const int QInfo_Statistic_Br::kNavigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic_Br::QInfo_Statistic_Br()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
}
QInfo_Statistic_Br::QInfo_Statistic_Br(const QInfo_Statistic_Br& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sessions_, &from.sessions_,
    static_cast<size_t>(reinterpret_cast<char*>(&navig_) -
    reinterpret_cast<char*>(&sessions_)) + sizeof(navig_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
}

void QInfo_Statistic_Br::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sessions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&navig_) -
      reinterpret_cast<char*>(&sessions_)) + sizeof(navig_));
}

QInfo_Statistic_Br::~QInfo_Statistic_Br() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
  SharedDtor();
}

void QInfo_Statistic_Br::SharedDtor() {
}

void QInfo_Statistic_Br::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic_Br::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic_Br& QInfo_Statistic_Br::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic_Br* QInfo_Statistic_Br::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic_Br* n = new QInfo_Statistic_Br;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic_Br::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&sessions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&navig_) -
        reinterpret_cast<char*>(&sessions_)) + sizeof(navig_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic_Br::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float navig_quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_navig_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &navig_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool navig = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_navig();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
  return false;
#undef DO_
}

void QInfo_Statistic_Br::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sessions(), output);
  }

  // optional float navig_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->navig_quality(), output);
  }

  // optional bool navig = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->navig(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
}

::google::protobuf::uint8* QInfo_Statistic_Br::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sessions(), target);
  }

  // optional float navig_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->navig_quality(), target);
  }

  // optional bool navig = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->navig(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
  return target;
}

size_t QInfo_Statistic_Br::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 sessions = 1;
    if (has_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessions());
    }

    // optional float navig_quality = 2;
    if (has_navig_quality()) {
      total_size += 1 + 4;
    }

    // optional bool navig = 3;
    if (has_navig()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic_Br::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic_Br* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic_Br>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
    MergeFrom(*source);
  }
}

void QInfo_Statistic_Br::MergeFrom(const QInfo_Statistic_Br& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      sessions_ = from.sessions_;
    }
    if (cached_has_bits & 0x00000002u) {
      navig_quality_ = from.navig_quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      navig_ = from.navig_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QInfo_Statistic_Br::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic_Br::CopyFrom(const QInfo_Statistic_Br& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic_Br::IsInitialized() const {
  return true;
}

void QInfo_Statistic_Br::Swap(QInfo_Statistic_Br* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic_Br::InternalSwap(QInfo_Statistic_Br* other) {
  using std::swap;
  swap(sessions_, other->sessions_);
  swap(navig_quality_, other->navig_quality_);
  swap(navig_, other->navig_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic_Br::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic_Br

// optional uint32 sessions = 1;
bool QInfo_Statistic_Br::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo_Statistic_Br::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo_Statistic_Br::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo_Statistic_Br::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
::google::protobuf::uint32 QInfo_Statistic_Br::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Br.sessions)
  return sessions_;
}
void QInfo_Statistic_Br::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Br.sessions)
}

// optional float navig_quality = 2;
bool QInfo_Statistic_Br::has_navig_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QInfo_Statistic_Br::set_has_navig_quality() {
  _has_bits_[0] |= 0x00000002u;
}
void QInfo_Statistic_Br::clear_has_navig_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
void QInfo_Statistic_Br::clear_navig_quality() {
  navig_quality_ = 0;
  clear_has_navig_quality();
}
float QInfo_Statistic_Br::navig_quality() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Br.navig_quality)
  return navig_quality_;
}
void QInfo_Statistic_Br::set_navig_quality(float value) {
  set_has_navig_quality();
  navig_quality_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Br.navig_quality)
}

// optional bool navig = 3;
bool QInfo_Statistic_Br::has_navig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QInfo_Statistic_Br::set_has_navig() {
  _has_bits_[0] |= 0x00000004u;
}
void QInfo_Statistic_Br::clear_has_navig() {
  _has_bits_[0] &= ~0x00000004u;
}
void QInfo_Statistic_Br::clear_navig() {
  navig_ = false;
  clear_has_navig();
}
bool QInfo_Statistic_Br::navig() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Br.navig)
  return navig_;
}
void QInfo_Statistic_Br::set_navig(bool value) {
  set_has_navig();
  navig_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Br.navig)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic_Nal::kSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic_Nal::QInfo_Statistic_Nal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
}
QInfo_Statistic_Nal::QInfo_Statistic_Nal(const QInfo_Statistic_Nal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessions_ = from.sessions_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
}

void QInfo_Statistic_Nal::SharedCtor() {
  _cached_size_ = 0;
  sessions_ = 0u;
}

QInfo_Statistic_Nal::~QInfo_Statistic_Nal() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
  SharedDtor();
}

void QInfo_Statistic_Nal::SharedDtor() {
}

void QInfo_Statistic_Nal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic_Nal::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic_Nal& QInfo_Statistic_Nal::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic_Nal* QInfo_Statistic_Nal::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic_Nal* n = new QInfo_Statistic_Nal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic_Nal::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic_Nal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
  return false;
#undef DO_
}

void QInfo_Statistic_Nal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sessions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
}

::google::protobuf::uint8* QInfo_Statistic_Nal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sessions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
  return target;
}

size_t QInfo_Statistic_Nal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 sessions = 1;
  if (has_sessions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessions());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic_Nal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic_Nal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic_Nal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
    MergeFrom(*source);
  }
}

void QInfo_Statistic_Nal::MergeFrom(const QInfo_Statistic_Nal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sessions()) {
    set_sessions(from.sessions());
  }
}

void QInfo_Statistic_Nal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic_Nal::CopyFrom(const QInfo_Statistic_Nal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic_Nal::IsInitialized() const {
  return true;
}

void QInfo_Statistic_Nal::Swap(QInfo_Statistic_Nal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic_Nal::InternalSwap(QInfo_Statistic_Nal* other) {
  using std::swap;
  swap(sessions_, other->sessions_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic_Nal::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic_Nal

// optional uint32 sessions = 1;
bool QInfo_Statistic_Nal::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo_Statistic_Nal::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo_Statistic_Nal::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo_Statistic_Nal::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
::google::protobuf::uint32 QInfo_Statistic_Nal::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Nal.sessions)
  return sessions_;
}
void QInfo_Statistic_Nal::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Nal.sessions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic_UrlInfo::kUrlFieldNumber;
const int QInfo_Statistic_UrlInfo::kHashFieldNumber;
const int QInfo_Statistic_UrlInfo::kSiteFieldNumber;
const int QInfo_Statistic_UrlInfo::kRankFieldNumber;
const int QInfo_Statistic_UrlInfo::kCrMixFieldNumber;
const int QInfo_Statistic_UrlInfo::kCrMFieldNumber;
const int QInfo_Statistic_UrlInfo::kHash64FieldNumber;
const int QInfo_Statistic_UrlInfo::kNormalizedHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic_UrlInfo::QInfo_Statistic_UrlInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
}
QInfo_Statistic_UrlInfo::QInfo_Statistic_UrlInfo(const QInfo_Statistic_UrlInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&crm_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(crm_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
}

void QInfo_Statistic_UrlInfo::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crm_) -
      reinterpret_cast<char*>(&hash_)) + sizeof(crm_));
}

QInfo_Statistic_UrlInfo::~QInfo_Statistic_UrlInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
  SharedDtor();
}

void QInfo_Statistic_UrlInfo::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QInfo_Statistic_UrlInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic_UrlInfo::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic_UrlInfo& QInfo_Statistic_UrlInfo::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic_UrlInfo* QInfo_Statistic_UrlInfo::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic_UrlInfo* n = new QInfo_Statistic_UrlInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic_UrlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crm_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(crm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic_UrlInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 site = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rank = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float crMix = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_crmix();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crmix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float crM = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_crm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 hash64 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_hash64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hash64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 normalized_hash = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_normalized_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &normalized_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
  return false;
#undef DO_
}

void QInfo_Statistic_UrlInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional uint32 hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hash(), output);
  }

  // optional int32 site = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->site(), output);
  }

  // optional float rank = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rank(), output);
  }

  // optional float crMix = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->crmix(), output);
  }

  // optional float crM = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->crm(), output);
  }

  // optional uint64 hash64 = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->hash64(), output);
  }

  // optional uint64 normalized_hash = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->normalized_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
}

::google::protobuf::uint8* QInfo_Statistic_UrlInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional uint32 hash = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hash(), target);
  }

  // optional int32 site = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->site(), target);
  }

  // optional float rank = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rank(), target);
  }

  // optional float crMix = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->crmix(), target);
  }

  // optional float crM = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->crm(), target);
  }

  // optional uint64 hash64 = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->hash64(), target);
  }

  // optional uint64 normalized_hash = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->normalized_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
  return target;
}

size_t QInfo_Statistic_UrlInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 hash = 2;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash());
    }

    // optional int32 site = 3;
    if (has_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->site());
    }

    // optional float rank = 4;
    if (has_rank()) {
      total_size += 1 + 4;
    }

    // optional float crMix = 5;
    if (has_crmix()) {
      total_size += 1 + 4;
    }

    // optional uint64 hash64 = 7;
    if (has_hash64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hash64());
    }

    // optional uint64 normalized_hash = 8;
    if (has_normalized_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->normalized_hash());
    }

    // optional float crM = 6;
    if (has_crm()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic_UrlInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic_UrlInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic_UrlInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
    MergeFrom(*source);
  }
}

void QInfo_Statistic_UrlInfo::MergeFrom(const QInfo_Statistic_UrlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000004u) {
      site_ = from.site_;
    }
    if (cached_has_bits & 0x00000008u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000010u) {
      crmix_ = from.crmix_;
    }
    if (cached_has_bits & 0x00000020u) {
      hash64_ = from.hash64_;
    }
    if (cached_has_bits & 0x00000040u) {
      normalized_hash_ = from.normalized_hash_;
    }
    if (cached_has_bits & 0x00000080u) {
      crm_ = from.crm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QInfo_Statistic_UrlInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic_UrlInfo::CopyFrom(const QInfo_Statistic_UrlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic_UrlInfo::IsInitialized() const {
  return true;
}

void QInfo_Statistic_UrlInfo::Swap(QInfo_Statistic_UrlInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic_UrlInfo::InternalSwap(QInfo_Statistic_UrlInfo* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(hash_, other->hash_);
  swap(site_, other->site_);
  swap(rank_, other->rank_);
  swap(crmix_, other->crmix_);
  swap(hash64_, other->hash64_);
  swap(normalized_hash_, other->normalized_hash_);
  swap(crm_, other->crm_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic_UrlInfo::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic_UrlInfo

// optional string url = 1;
bool QInfo_Statistic_UrlInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo_Statistic_UrlInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo_Statistic_UrlInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo_Statistic_UrlInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& QInfo_Statistic_UrlInfo::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url)
  return url_.GetNoArena();
}
void QInfo_Statistic_UrlInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url)
}
#if LANG_CXX11
void QInfo_Statistic_UrlInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url)
}
#endif
void QInfo_Statistic_UrlInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url)
}
void QInfo_Statistic_UrlInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url)
}
::std::string* QInfo_Statistic_UrlInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QInfo_Statistic_UrlInfo::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QInfo_Statistic_UrlInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url)
}

// optional uint32 hash = 2;
bool QInfo_Statistic_UrlInfo::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QInfo_Statistic_UrlInfo::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void QInfo_Statistic_UrlInfo::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void QInfo_Statistic_UrlInfo::clear_hash() {
  hash_ = 0u;
  clear_has_hash();
}
::google::protobuf::uint32 QInfo_Statistic_UrlInfo::hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.hash)
  return hash_;
}
void QInfo_Statistic_UrlInfo::set_hash(::google::protobuf::uint32 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.hash)
}

// optional int32 site = 3;
bool QInfo_Statistic_UrlInfo::has_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QInfo_Statistic_UrlInfo::set_has_site() {
  _has_bits_[0] |= 0x00000004u;
}
void QInfo_Statistic_UrlInfo::clear_has_site() {
  _has_bits_[0] &= ~0x00000004u;
}
void QInfo_Statistic_UrlInfo::clear_site() {
  site_ = 0;
  clear_has_site();
}
::google::protobuf::int32 QInfo_Statistic_UrlInfo::site() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.site)
  return site_;
}
void QInfo_Statistic_UrlInfo::set_site(::google::protobuf::int32 value) {
  set_has_site();
  site_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.site)
}

// optional float rank = 4;
bool QInfo_Statistic_UrlInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QInfo_Statistic_UrlInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
void QInfo_Statistic_UrlInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
void QInfo_Statistic_UrlInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
float QInfo_Statistic_UrlInfo::rank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.rank)
  return rank_;
}
void QInfo_Statistic_UrlInfo::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.rank)
}

// optional float crMix = 5;
bool QInfo_Statistic_UrlInfo::has_crmix() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QInfo_Statistic_UrlInfo::set_has_crmix() {
  _has_bits_[0] |= 0x00000010u;
}
void QInfo_Statistic_UrlInfo::clear_has_crmix() {
  _has_bits_[0] &= ~0x00000010u;
}
void QInfo_Statistic_UrlInfo::clear_crmix() {
  crmix_ = 0;
  clear_has_crmix();
}
float QInfo_Statistic_UrlInfo::crmix() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.crMix)
  return crmix_;
}
void QInfo_Statistic_UrlInfo::set_crmix(float value) {
  set_has_crmix();
  crmix_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.crMix)
}

// optional float crM = 6;
bool QInfo_Statistic_UrlInfo::has_crm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void QInfo_Statistic_UrlInfo::set_has_crm() {
  _has_bits_[0] |= 0x00000080u;
}
void QInfo_Statistic_UrlInfo::clear_has_crm() {
  _has_bits_[0] &= ~0x00000080u;
}
void QInfo_Statistic_UrlInfo::clear_crm() {
  crm_ = 0;
  clear_has_crm();
}
float QInfo_Statistic_UrlInfo::crm() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.crM)
  return crm_;
}
void QInfo_Statistic_UrlInfo::set_crm(float value) {
  set_has_crm();
  crm_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.crM)
}

// optional uint64 hash64 = 7;
bool QInfo_Statistic_UrlInfo::has_hash64() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void QInfo_Statistic_UrlInfo::set_has_hash64() {
  _has_bits_[0] |= 0x00000020u;
}
void QInfo_Statistic_UrlInfo::clear_has_hash64() {
  _has_bits_[0] &= ~0x00000020u;
}
void QInfo_Statistic_UrlInfo::clear_hash64() {
  hash64_ = GOOGLE_ULONGLONG(0);
  clear_has_hash64();
}
::google::protobuf::uint64 QInfo_Statistic_UrlInfo::hash64() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.hash64)
  return hash64_;
}
void QInfo_Statistic_UrlInfo::set_hash64(::google::protobuf::uint64 value) {
  set_has_hash64();
  hash64_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.hash64)
}

// optional uint64 normalized_hash = 8;
bool QInfo_Statistic_UrlInfo::has_normalized_hash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QInfo_Statistic_UrlInfo::set_has_normalized_hash() {
  _has_bits_[0] |= 0x00000040u;
}
void QInfo_Statistic_UrlInfo::clear_has_normalized_hash() {
  _has_bits_[0] &= ~0x00000040u;
}
void QInfo_Statistic_UrlInfo::clear_normalized_hash() {
  normalized_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_normalized_hash();
}
::google::protobuf::uint64 QInfo_Statistic_UrlInfo::normalized_hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.normalized_hash)
  return normalized_hash_;
}
void QInfo_Statistic_UrlInfo::set_normalized_hash(::google::protobuf::uint64 value) {
  set_has_normalized_hash();
  normalized_hash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.normalized_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic_Nvg::kProbFieldNumber;
const int QInfo_Statistic_Nvg::kUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic_Nvg::QInfo_Statistic_Nvg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
}
QInfo_Statistic_Nvg::QInfo_Statistic_Nvg(const QInfo_Statistic_Nvg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prob_ = from.prob_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
}

void QInfo_Statistic_Nvg::SharedCtor() {
  _cached_size_ = 0;
  prob_ = 0;
}

QInfo_Statistic_Nvg::~QInfo_Statistic_Nvg() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
  SharedDtor();
}

void QInfo_Statistic_Nvg::SharedDtor() {
}

void QInfo_Statistic_Nvg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic_Nvg::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic_Nvg& QInfo_Statistic_Nvg::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic_Nvg* QInfo_Statistic_Nvg::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic_Nvg* n = new QInfo_Statistic_Nvg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic_Nvg::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  prob_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic_Nvg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float prob = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo urls = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_urls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
  return false;
#undef DO_
}

void QInfo_Statistic_Nvg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float prob = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->prob(), output);
  }

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo urls = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->urls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->urls(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
}

::google::protobuf::uint8* QInfo_Statistic_Nvg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float prob = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->prob(), target);
  }

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo urls = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->urls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->urls(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
  return target;
}

size_t QInfo_Statistic_Nvg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo urls = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->urls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->urls(static_cast<int>(i)));
    }
  }

  // optional float prob = 1;
  if (has_prob()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic_Nvg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic_Nvg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic_Nvg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
    MergeFrom(*source);
  }
}

void QInfo_Statistic_Nvg::MergeFrom(const QInfo_Statistic_Nvg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
  if (from.has_prob()) {
    set_prob(from.prob());
  }
}

void QInfo_Statistic_Nvg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic_Nvg::CopyFrom(const QInfo_Statistic_Nvg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic_Nvg::IsInitialized() const {
  return true;
}

void QInfo_Statistic_Nvg::Swap(QInfo_Statistic_Nvg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic_Nvg::InternalSwap(QInfo_Statistic_Nvg* other) {
  using std::swap;
  urls_.InternalSwap(&other->urls_);
  swap(prob_, other->prob_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic_Nvg::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic_Nvg

// optional float prob = 1;
bool QInfo_Statistic_Nvg::has_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo_Statistic_Nvg::set_has_prob() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo_Statistic_Nvg::clear_has_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo_Statistic_Nvg::clear_prob() {
  prob_ = 0;
  clear_has_prob();
}
float QInfo_Statistic_Nvg::prob() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg.prob)
  return prob_;
}
void QInfo_Statistic_Nvg::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg.prob)
}

// repeated .ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo urls = 2;
int QInfo_Statistic_Nvg::urls_size() const {
  return urls_.size();
}
void QInfo_Statistic_Nvg::clear_urls() {
  urls_.Clear();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_UrlInfo& QInfo_Statistic_Nvg::urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg.urls)
  return urls_.Get(index);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_UrlInfo* QInfo_Statistic_Nvg::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg.urls)
  return urls_.Mutable(index);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_UrlInfo* QInfo_Statistic_Nvg::add_urls() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg.urls)
  return urls_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_UrlInfo >*
QInfo_Statistic_Nvg::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg.urls)
  return &urls_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_UrlInfo >&
QInfo_Statistic_Nvg::urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg.urls)
  return urls_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic_VrtInfo::kNameFieldNumber;
const int QInfo_Statistic_VrtInfo::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic_VrtInfo::QInfo_Statistic_VrtInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
}
QInfo_Statistic_VrtInfo::QInfo_Statistic_VrtInfo(const QInfo_Statistic_VrtInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
}

void QInfo_Statistic_VrtInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rank_ = 0;
}

QInfo_Statistic_VrtInfo::~QInfo_Statistic_VrtInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
  SharedDtor();
}

void QInfo_Statistic_VrtInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QInfo_Statistic_VrtInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic_VrtInfo::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic_VrtInfo& QInfo_Statistic_VrtInfo::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic_VrtInfo* QInfo_Statistic_VrtInfo::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic_VrtInfo* n = new QInfo_Statistic_VrtInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic_VrtInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  rank_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic_VrtInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rank = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
  return false;
#undef DO_
}

void QInfo_Statistic_VrtInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float rank = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
}

::google::protobuf::uint8* QInfo_Statistic_VrtInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
  return target;
}

size_t QInfo_Statistic_VrtInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float rank = 2;
    if (has_rank()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic_VrtInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic_VrtInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic_VrtInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
    MergeFrom(*source);
  }
}

void QInfo_Statistic_VrtInfo::MergeFrom(const QInfo_Statistic_VrtInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QInfo_Statistic_VrtInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic_VrtInfo::CopyFrom(const QInfo_Statistic_VrtInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic_VrtInfo::IsInitialized() const {
  return true;
}

void QInfo_Statistic_VrtInfo::Swap(QInfo_Statistic_VrtInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic_VrtInfo::InternalSwap(QInfo_Statistic_VrtInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(rank_, other->rank_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic_VrtInfo::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic_VrtInfo

// optional string name = 1;
bool QInfo_Statistic_VrtInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo_Statistic_VrtInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo_Statistic_VrtInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo_Statistic_VrtInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& QInfo_Statistic_VrtInfo::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name)
  return name_.GetNoArena();
}
void QInfo_Statistic_VrtInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name)
}
#if LANG_CXX11
void QInfo_Statistic_VrtInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name)
}
#endif
void QInfo_Statistic_VrtInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name)
}
void QInfo_Statistic_VrtInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name)
}
::std::string* QInfo_Statistic_VrtInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QInfo_Statistic_VrtInfo::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QInfo_Statistic_VrtInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name)
}

// optional float rank = 2;
bool QInfo_Statistic_VrtInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QInfo_Statistic_VrtInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
void QInfo_Statistic_VrtInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
void QInfo_Statistic_VrtInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
float QInfo_Statistic_VrtInfo::rank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.rank)
  return rank_;
}
void QInfo_Statistic_VrtInfo::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic_Vrt::kVrtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic_Vrt::QInfo_Statistic_Vrt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
}
QInfo_Statistic_Vrt::QInfo_Statistic_Vrt(const QInfo_Statistic_Vrt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      vrts_(from.vrts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
}

void QInfo_Statistic_Vrt::SharedCtor() {
  _cached_size_ = 0;
}

QInfo_Statistic_Vrt::~QInfo_Statistic_Vrt() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
  SharedDtor();
}

void QInfo_Statistic_Vrt::SharedDtor() {
}

void QInfo_Statistic_Vrt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic_Vrt::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic_Vrt& QInfo_Statistic_Vrt::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic_Vrt* QInfo_Statistic_Vrt::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic_Vrt* n = new QInfo_Statistic_Vrt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic_Vrt::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrts_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic_Vrt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo vrts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vrts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
  return false;
#undef DO_
}

void QInfo_Statistic_Vrt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo vrts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vrts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vrts(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
}

::google::protobuf::uint8* QInfo_Statistic_Vrt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo vrts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vrts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->vrts(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
  return target;
}

size_t QInfo_Statistic_Vrt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo vrts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vrts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vrts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic_Vrt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic_Vrt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic_Vrt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
    MergeFrom(*source);
  }
}

void QInfo_Statistic_Vrt::MergeFrom(const QInfo_Statistic_Vrt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vrts_.MergeFrom(from.vrts_);
}

void QInfo_Statistic_Vrt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic_Vrt::CopyFrom(const QInfo_Statistic_Vrt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic_Vrt::IsInitialized() const {
  return true;
}

void QInfo_Statistic_Vrt::Swap(QInfo_Statistic_Vrt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic_Vrt::InternalSwap(QInfo_Statistic_Vrt* other) {
  using std::swap;
  vrts_.InternalSwap(&other->vrts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic_Vrt::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic_Vrt

// repeated .ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo vrts = 1;
int QInfo_Statistic_Vrt::vrts_size() const {
  return vrts_.size();
}
void QInfo_Statistic_Vrt::clear_vrts() {
  vrts_.Clear();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_VrtInfo& QInfo_Statistic_Vrt::vrts(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt.vrts)
  return vrts_.Get(index);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_VrtInfo* QInfo_Statistic_Vrt::mutable_vrts(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt.vrts)
  return vrts_.Mutable(index);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_VrtInfo* QInfo_Statistic_Vrt::add_vrts() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt.vrts)
  return vrts_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_VrtInfo >*
QInfo_Statistic_Vrt::mutable_vrts() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt.vrts)
  return &vrts_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_VrtInfo >&
QInfo_Statistic_Vrt::vrts() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt.vrts)
  return vrts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic_AlImg::kSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic_AlImg::QInfo_Statistic_AlImg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
}
QInfo_Statistic_AlImg::QInfo_Statistic_AlImg(const QInfo_Statistic_AlImg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessions_ = from.sessions_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
}

void QInfo_Statistic_AlImg::SharedCtor() {
  _cached_size_ = 0;
  sessions_ = 0u;
}

QInfo_Statistic_AlImg::~QInfo_Statistic_AlImg() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
  SharedDtor();
}

void QInfo_Statistic_AlImg::SharedDtor() {
}

void QInfo_Statistic_AlImg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic_AlImg::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic_AlImg& QInfo_Statistic_AlImg::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic_AlImg* QInfo_Statistic_AlImg::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic_AlImg* n = new QInfo_Statistic_AlImg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic_AlImg::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic_AlImg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
  return false;
#undef DO_
}

void QInfo_Statistic_AlImg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sessions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
}

::google::protobuf::uint8* QInfo_Statistic_AlImg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sessions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
  return target;
}

size_t QInfo_Statistic_AlImg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 sessions = 1;
  if (has_sessions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessions());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic_AlImg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic_AlImg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic_AlImg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
    MergeFrom(*source);
  }
}

void QInfo_Statistic_AlImg::MergeFrom(const QInfo_Statistic_AlImg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sessions()) {
    set_sessions(from.sessions());
  }
}

void QInfo_Statistic_AlImg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic_AlImg::CopyFrom(const QInfo_Statistic_AlImg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic_AlImg::IsInitialized() const {
  return true;
}

void QInfo_Statistic_AlImg::Swap(QInfo_Statistic_AlImg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic_AlImg::InternalSwap(QInfo_Statistic_AlImg* other) {
  using std::swap;
  swap(sessions_, other->sessions_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic_AlImg::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic_AlImg

// optional uint32 sessions = 1;
bool QInfo_Statistic_AlImg::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo_Statistic_AlImg::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo_Statistic_AlImg::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo_Statistic_AlImg::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
::google::protobuf::uint32 QInfo_Statistic_AlImg::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg.sessions)
  return sessions_;
}
void QInfo_Statistic_AlImg::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg.sessions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic_CrImg::kSessionsFieldNumber;
const int QInfo_Statistic_CrImg::kClicksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic_CrImg::QInfo_Statistic_CrImg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
}
QInfo_Statistic_CrImg::QInfo_Statistic_CrImg(const QInfo_Statistic_CrImg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sessions_, &from.sessions_,
    static_cast<size_t>(reinterpret_cast<char*>(&clicks_) -
    reinterpret_cast<char*>(&sessions_)) + sizeof(clicks_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
}

void QInfo_Statistic_CrImg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sessions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clicks_) -
      reinterpret_cast<char*>(&sessions_)) + sizeof(clicks_));
}

QInfo_Statistic_CrImg::~QInfo_Statistic_CrImg() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
  SharedDtor();
}

void QInfo_Statistic_CrImg::SharedDtor() {
}

void QInfo_Statistic_CrImg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic_CrImg::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic_CrImg& QInfo_Statistic_CrImg::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic_CrImg* QInfo_Statistic_CrImg::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic_CrImg* n = new QInfo_Statistic_CrImg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic_CrImg::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&sessions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clicks_) -
        reinterpret_cast<char*>(&sessions_)) + sizeof(clicks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic_CrImg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clicks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_clicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
  return false;
#undef DO_
}

void QInfo_Statistic_CrImg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sessions(), output);
  }

  // optional uint32 clicks = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clicks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
}

::google::protobuf::uint8* QInfo_Statistic_CrImg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sessions(), target);
  }

  // optional uint32 clicks = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clicks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
  return target;
}

size_t QInfo_Statistic_CrImg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 sessions = 1;
    if (has_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessions());
    }

    // optional uint32 clicks = 2;
    if (has_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clicks());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic_CrImg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic_CrImg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic_CrImg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
    MergeFrom(*source);
  }
}

void QInfo_Statistic_CrImg::MergeFrom(const QInfo_Statistic_CrImg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sessions_ = from.sessions_;
    }
    if (cached_has_bits & 0x00000002u) {
      clicks_ = from.clicks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QInfo_Statistic_CrImg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic_CrImg::CopyFrom(const QInfo_Statistic_CrImg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic_CrImg::IsInitialized() const {
  return true;
}

void QInfo_Statistic_CrImg::Swap(QInfo_Statistic_CrImg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic_CrImg::InternalSwap(QInfo_Statistic_CrImg* other) {
  using std::swap;
  swap(sessions_, other->sessions_);
  swap(clicks_, other->clicks_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic_CrImg::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic_CrImg

// optional uint32 sessions = 1;
bool QInfo_Statistic_CrImg::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo_Statistic_CrImg::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo_Statistic_CrImg::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo_Statistic_CrImg::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
::google::protobuf::uint32 QInfo_Statistic_CrImg::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg.sessions)
  return sessions_;
}
void QInfo_Statistic_CrImg::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg.sessions)
}

// optional uint32 clicks = 2;
bool QInfo_Statistic_CrImg::has_clicks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QInfo_Statistic_CrImg::set_has_clicks() {
  _has_bits_[0] |= 0x00000002u;
}
void QInfo_Statistic_CrImg::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000002u;
}
void QInfo_Statistic_CrImg::clear_clicks() {
  clicks_ = 0u;
  clear_has_clicks();
}
::google::protobuf::uint32 QInfo_Statistic_CrImg::clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg.clicks)
  return clicks_;
}
void QInfo_Statistic_CrImg::set_clicks(::google::protobuf::uint32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg.clicks)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic_CrVdo::kSessionsFieldNumber;
const int QInfo_Statistic_CrVdo::kClicksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic_CrVdo::QInfo_Statistic_CrVdo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
}
QInfo_Statistic_CrVdo::QInfo_Statistic_CrVdo(const QInfo_Statistic_CrVdo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sessions_, &from.sessions_,
    static_cast<size_t>(reinterpret_cast<char*>(&clicks_) -
    reinterpret_cast<char*>(&sessions_)) + sizeof(clicks_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
}

void QInfo_Statistic_CrVdo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sessions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clicks_) -
      reinterpret_cast<char*>(&sessions_)) + sizeof(clicks_));
}

QInfo_Statistic_CrVdo::~QInfo_Statistic_CrVdo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
  SharedDtor();
}

void QInfo_Statistic_CrVdo::SharedDtor() {
}

void QInfo_Statistic_CrVdo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic_CrVdo::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic_CrVdo& QInfo_Statistic_CrVdo::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic_CrVdo* QInfo_Statistic_CrVdo::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic_CrVdo* n = new QInfo_Statistic_CrVdo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic_CrVdo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&sessions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clicks_) -
        reinterpret_cast<char*>(&sessions_)) + sizeof(clicks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic_CrVdo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clicks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_clicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
  return false;
#undef DO_
}

void QInfo_Statistic_CrVdo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sessions(), output);
  }

  // optional uint32 clicks = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clicks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
}

::google::protobuf::uint8* QInfo_Statistic_CrVdo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sessions(), target);
  }

  // optional uint32 clicks = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clicks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
  return target;
}

size_t QInfo_Statistic_CrVdo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 sessions = 1;
    if (has_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessions());
    }

    // optional uint32 clicks = 2;
    if (has_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clicks());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic_CrVdo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic_CrVdo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic_CrVdo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
    MergeFrom(*source);
  }
}

void QInfo_Statistic_CrVdo::MergeFrom(const QInfo_Statistic_CrVdo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sessions_ = from.sessions_;
    }
    if (cached_has_bits & 0x00000002u) {
      clicks_ = from.clicks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QInfo_Statistic_CrVdo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic_CrVdo::CopyFrom(const QInfo_Statistic_CrVdo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic_CrVdo::IsInitialized() const {
  return true;
}

void QInfo_Statistic_CrVdo::Swap(QInfo_Statistic_CrVdo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic_CrVdo::InternalSwap(QInfo_Statistic_CrVdo* other) {
  using std::swap;
  swap(sessions_, other->sessions_);
  swap(clicks_, other->clicks_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic_CrVdo::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic_CrVdo

// optional uint32 sessions = 1;
bool QInfo_Statistic_CrVdo::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo_Statistic_CrVdo::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo_Statistic_CrVdo::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo_Statistic_CrVdo::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
::google::protobuf::uint32 QInfo_Statistic_CrVdo::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo.sessions)
  return sessions_;
}
void QInfo_Statistic_CrVdo::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo.sessions)
}

// optional uint32 clicks = 2;
bool QInfo_Statistic_CrVdo::has_clicks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QInfo_Statistic_CrVdo::set_has_clicks() {
  _has_bits_[0] |= 0x00000002u;
}
void QInfo_Statistic_CrVdo::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000002u;
}
void QInfo_Statistic_CrVdo::clear_clicks() {
  clicks_ = 0u;
  clear_has_clicks();
}
::google::protobuf::uint32 QInfo_Statistic_CrVdo::clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo.clicks)
  return clicks_;
}
void QInfo_Statistic_CrVdo::set_clicks(::google::protobuf::uint32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo.clicks)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic_ESSRexp::kSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic_ESSRexp::QInfo_Statistic_ESSRexp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
}
QInfo_Statistic_ESSRexp::QInfo_Statistic_ESSRexp(const QInfo_Statistic_ESSRexp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessions_ = from.sessions_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
}

void QInfo_Statistic_ESSRexp::SharedCtor() {
  _cached_size_ = 0;
  sessions_ = 0u;
}

QInfo_Statistic_ESSRexp::~QInfo_Statistic_ESSRexp() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
  SharedDtor();
}

void QInfo_Statistic_ESSRexp::SharedDtor() {
}

void QInfo_Statistic_ESSRexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic_ESSRexp::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic_ESSRexp& QInfo_Statistic_ESSRexp::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic_ESSRexp* QInfo_Statistic_ESSRexp::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic_ESSRexp* n = new QInfo_Statistic_ESSRexp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic_ESSRexp::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic_ESSRexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
  return false;
#undef DO_
}

void QInfo_Statistic_ESSRexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sessions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
}

::google::protobuf::uint8* QInfo_Statistic_ESSRexp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sessions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
  return target;
}

size_t QInfo_Statistic_ESSRexp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 sessions = 1;
  if (has_sessions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessions());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic_ESSRexp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic_ESSRexp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic_ESSRexp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
    MergeFrom(*source);
  }
}

void QInfo_Statistic_ESSRexp::MergeFrom(const QInfo_Statistic_ESSRexp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sessions()) {
    set_sessions(from.sessions());
  }
}

void QInfo_Statistic_ESSRexp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic_ESSRexp::CopyFrom(const QInfo_Statistic_ESSRexp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic_ESSRexp::IsInitialized() const {
  return true;
}

void QInfo_Statistic_ESSRexp::Swap(QInfo_Statistic_ESSRexp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic_ESSRexp::InternalSwap(QInfo_Statistic_ESSRexp* other) {
  using std::swap;
  swap(sessions_, other->sessions_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic_ESSRexp::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic_ESSRexp

// optional uint32 sessions = 1;
bool QInfo_Statistic_ESSRexp::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo_Statistic_ESSRexp::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo_Statistic_ESSRexp::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo_Statistic_ESSRexp::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
::google::protobuf::uint32 QInfo_Statistic_ESSRexp::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp.sessions)
  return sessions_;
}
void QInfo_Statistic_ESSRexp::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp.sessions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic_Freq::kQueriesFieldNumber;
const int QInfo_Statistic_Freq::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic_Freq::QInfo_Statistic_Freq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
}
QInfo_Statistic_Freq::QInfo_Statistic_Freq(const QInfo_Statistic_Freq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&queries_, &from.queries_,
    static_cast<size_t>(reinterpret_cast<char*>(&users_) -
    reinterpret_cast<char*>(&queries_)) + sizeof(users_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
}

void QInfo_Statistic_Freq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&queries_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&users_) -
      reinterpret_cast<char*>(&queries_)) + sizeof(users_));
}

QInfo_Statistic_Freq::~QInfo_Statistic_Freq() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
  SharedDtor();
}

void QInfo_Statistic_Freq::SharedDtor() {
}

void QInfo_Statistic_Freq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic_Freq::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic_Freq& QInfo_Statistic_Freq::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic_Freq* QInfo_Statistic_Freq::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic_Freq* n = new QInfo_Statistic_Freq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic_Freq::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&queries_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&users_) -
        reinterpret_cast<char*>(&queries_)) + sizeof(users_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic_Freq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 queries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_queries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 users = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_users();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &users_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
  return false;
#undef DO_
}

void QInfo_Statistic_Freq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 queries = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->queries(), output);
  }

  // optional uint32 users = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->users(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
}

::google::protobuf::uint8* QInfo_Statistic_Freq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 queries = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->queries(), target);
  }

  // optional uint32 users = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->users(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
  return target;
}

size_t QInfo_Statistic_Freq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 queries = 1;
    if (has_queries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queries());
    }

    // optional uint32 users = 2;
    if (has_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->users());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic_Freq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic_Freq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic_Freq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
    MergeFrom(*source);
  }
}

void QInfo_Statistic_Freq::MergeFrom(const QInfo_Statistic_Freq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      queries_ = from.queries_;
    }
    if (cached_has_bits & 0x00000002u) {
      users_ = from.users_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QInfo_Statistic_Freq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic_Freq::CopyFrom(const QInfo_Statistic_Freq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic_Freq::IsInitialized() const {
  return true;
}

void QInfo_Statistic_Freq::Swap(QInfo_Statistic_Freq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic_Freq::InternalSwap(QInfo_Statistic_Freq* other) {
  using std::swap;
  swap(queries_, other->queries_);
  swap(users_, other->users_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic_Freq::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic_Freq

// optional uint32 queries = 1;
bool QInfo_Statistic_Freq::has_queries() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo_Statistic_Freq::set_has_queries() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo_Statistic_Freq::clear_has_queries() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo_Statistic_Freq::clear_queries() {
  queries_ = 0u;
  clear_has_queries();
}
::google::protobuf::uint32 QInfo_Statistic_Freq::queries() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Freq.queries)
  return queries_;
}
void QInfo_Statistic_Freq::set_queries(::google::protobuf::uint32 value) {
  set_has_queries();
  queries_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Freq.queries)
}

// optional uint32 users = 2;
bool QInfo_Statistic_Freq::has_users() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QInfo_Statistic_Freq::set_has_users() {
  _has_bits_[0] |= 0x00000002u;
}
void QInfo_Statistic_Freq::clear_has_users() {
  _has_bits_[0] &= ~0x00000002u;
}
void QInfo_Statistic_Freq::clear_users() {
  users_ = 0u;
  clear_has_users();
}
::google::protobuf::uint32 QInfo_Statistic_Freq::users() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Freq.users)
  return users_;
}
void QInfo_Statistic_Freq::set_users(::google::protobuf::uint32 value) {
  set_has_users();
  users_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Freq.users)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic_CrMixin::kNameFieldNumber;
const int QInfo_Statistic_CrMixin::kRankFieldNumber;
const int QInfo_Statistic_CrMixin::kAttractivenessFieldNumber;
const int QInfo_Statistic_CrMixin::kSatisfactionFieldNumber;
const int QInfo_Statistic_CrMixin::kViewsFieldNumber;
const int QInfo_Statistic_CrMixin::kClicksFieldNumber;
const int QInfo_Statistic_CrMixin::kSatisfiedFieldNumber;
const int QInfo_Statistic_CrMixin::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic_CrMixin::QInfo_Statistic_CrMixin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
}
QInfo_Statistic_CrMixin::QInfo_Statistic_CrMixin(const QInfo_Statistic_CrMixin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&users_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(users_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
}

void QInfo_Statistic_CrMixin::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&users_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(users_));
}

QInfo_Statistic_CrMixin::~QInfo_Statistic_CrMixin() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
  SharedDtor();
}

void QInfo_Statistic_CrMixin::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QInfo_Statistic_CrMixin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic_CrMixin::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic_CrMixin& QInfo_Statistic_CrMixin::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic_CrMixin* QInfo_Statistic_CrMixin::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic_CrMixin* n = new QInfo_Statistic_CrMixin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic_CrMixin::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&users_) -
        reinterpret_cast<char*>(&rank_)) + sizeof(users_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic_CrMixin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rank = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float attractiveness = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_attractiveness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attractiveness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float satisfaction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_satisfaction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &satisfaction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 views = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clicks = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_clicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 satisfied = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_satisfied();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satisfied_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 users = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_users();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &users_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
  return false;
#undef DO_
}

void QInfo_Statistic_CrMixin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float rank = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rank(), output);
  }

  // optional float attractiveness = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->attractiveness(), output);
  }

  // optional float satisfaction = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->satisfaction(), output);
  }

  // optional uint32 views = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->views(), output);
  }

  // optional uint32 clicks = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->clicks(), output);
  }

  // optional uint32 satisfied = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->satisfied(), output);
  }

  // optional uint32 users = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->users(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
}

::google::protobuf::uint8* QInfo_Statistic_CrMixin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rank(), target);
  }

  // optional float attractiveness = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->attractiveness(), target);
  }

  // optional float satisfaction = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->satisfaction(), target);
  }

  // optional uint32 views = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->views(), target);
  }

  // optional uint32 clicks = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->clicks(), target);
  }

  // optional uint32 satisfied = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->satisfied(), target);
  }

  // optional uint32 users = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->users(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
  return target;
}

size_t QInfo_Statistic_CrMixin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional float rank = 2;
    if (has_rank()) {
      total_size += 1 + 4;
    }

    // optional float attractiveness = 3;
    if (has_attractiveness()) {
      total_size += 1 + 4;
    }

    // optional float satisfaction = 4;
    if (has_satisfaction()) {
      total_size += 1 + 4;
    }

    // optional uint32 views = 5;
    if (has_views()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->views());
    }

    // optional uint32 clicks = 6;
    if (has_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clicks());
    }

    // optional uint32 satisfied = 7;
    if (has_satisfied()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->satisfied());
    }

    // optional uint32 users = 8;
    if (has_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->users());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic_CrMixin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic_CrMixin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic_CrMixin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
    MergeFrom(*source);
  }
}

void QInfo_Statistic_CrMixin::MergeFrom(const QInfo_Statistic_CrMixin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      attractiveness_ = from.attractiveness_;
    }
    if (cached_has_bits & 0x00000008u) {
      satisfaction_ = from.satisfaction_;
    }
    if (cached_has_bits & 0x00000010u) {
      views_ = from.views_;
    }
    if (cached_has_bits & 0x00000020u) {
      clicks_ = from.clicks_;
    }
    if (cached_has_bits & 0x00000040u) {
      satisfied_ = from.satisfied_;
    }
    if (cached_has_bits & 0x00000080u) {
      users_ = from.users_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QInfo_Statistic_CrMixin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic_CrMixin::CopyFrom(const QInfo_Statistic_CrMixin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic_CrMixin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void QInfo_Statistic_CrMixin::Swap(QInfo_Statistic_CrMixin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic_CrMixin::InternalSwap(QInfo_Statistic_CrMixin* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(rank_, other->rank_);
  swap(attractiveness_, other->attractiveness_);
  swap(satisfaction_, other->satisfaction_);
  swap(views_, other->views_);
  swap(clicks_, other->clicks_);
  swap(satisfied_, other->satisfied_);
  swap(users_, other->users_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic_CrMixin::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic_CrMixin

// required string name = 1;
bool QInfo_Statistic_CrMixin::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo_Statistic_CrMixin::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo_Statistic_CrMixin::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo_Statistic_CrMixin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& QInfo_Statistic_CrMixin::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name)
  return name_.GetNoArena();
}
void QInfo_Statistic_CrMixin::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name)
}
#if LANG_CXX11
void QInfo_Statistic_CrMixin::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name)
}
#endif
void QInfo_Statistic_CrMixin::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name)
}
void QInfo_Statistic_CrMixin::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name)
}
::std::string* QInfo_Statistic_CrMixin::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QInfo_Statistic_CrMixin::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QInfo_Statistic_CrMixin::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name)
}

// optional float rank = 2;
bool QInfo_Statistic_CrMixin::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QInfo_Statistic_CrMixin::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
void QInfo_Statistic_CrMixin::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
void QInfo_Statistic_CrMixin::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
float QInfo_Statistic_CrMixin::rank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.rank)
  return rank_;
}
void QInfo_Statistic_CrMixin::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.rank)
}

// optional float attractiveness = 3;
bool QInfo_Statistic_CrMixin::has_attractiveness() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QInfo_Statistic_CrMixin::set_has_attractiveness() {
  _has_bits_[0] |= 0x00000004u;
}
void QInfo_Statistic_CrMixin::clear_has_attractiveness() {
  _has_bits_[0] &= ~0x00000004u;
}
void QInfo_Statistic_CrMixin::clear_attractiveness() {
  attractiveness_ = 0;
  clear_has_attractiveness();
}
float QInfo_Statistic_CrMixin::attractiveness() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.attractiveness)
  return attractiveness_;
}
void QInfo_Statistic_CrMixin::set_attractiveness(float value) {
  set_has_attractiveness();
  attractiveness_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.attractiveness)
}

// optional float satisfaction = 4;
bool QInfo_Statistic_CrMixin::has_satisfaction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QInfo_Statistic_CrMixin::set_has_satisfaction() {
  _has_bits_[0] |= 0x00000008u;
}
void QInfo_Statistic_CrMixin::clear_has_satisfaction() {
  _has_bits_[0] &= ~0x00000008u;
}
void QInfo_Statistic_CrMixin::clear_satisfaction() {
  satisfaction_ = 0;
  clear_has_satisfaction();
}
float QInfo_Statistic_CrMixin::satisfaction() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.satisfaction)
  return satisfaction_;
}
void QInfo_Statistic_CrMixin::set_satisfaction(float value) {
  set_has_satisfaction();
  satisfaction_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.satisfaction)
}

// optional uint32 views = 5;
bool QInfo_Statistic_CrMixin::has_views() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QInfo_Statistic_CrMixin::set_has_views() {
  _has_bits_[0] |= 0x00000010u;
}
void QInfo_Statistic_CrMixin::clear_has_views() {
  _has_bits_[0] &= ~0x00000010u;
}
void QInfo_Statistic_CrMixin::clear_views() {
  views_ = 0u;
  clear_has_views();
}
::google::protobuf::uint32 QInfo_Statistic_CrMixin::views() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.views)
  return views_;
}
void QInfo_Statistic_CrMixin::set_views(::google::protobuf::uint32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.views)
}

// optional uint32 clicks = 6;
bool QInfo_Statistic_CrMixin::has_clicks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void QInfo_Statistic_CrMixin::set_has_clicks() {
  _has_bits_[0] |= 0x00000020u;
}
void QInfo_Statistic_CrMixin::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000020u;
}
void QInfo_Statistic_CrMixin::clear_clicks() {
  clicks_ = 0u;
  clear_has_clicks();
}
::google::protobuf::uint32 QInfo_Statistic_CrMixin::clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.clicks)
  return clicks_;
}
void QInfo_Statistic_CrMixin::set_clicks(::google::protobuf::uint32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.clicks)
}

// optional uint32 satisfied = 7;
bool QInfo_Statistic_CrMixin::has_satisfied() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QInfo_Statistic_CrMixin::set_has_satisfied() {
  _has_bits_[0] |= 0x00000040u;
}
void QInfo_Statistic_CrMixin::clear_has_satisfied() {
  _has_bits_[0] &= ~0x00000040u;
}
void QInfo_Statistic_CrMixin::clear_satisfied() {
  satisfied_ = 0u;
  clear_has_satisfied();
}
::google::protobuf::uint32 QInfo_Statistic_CrMixin::satisfied() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.satisfied)
  return satisfied_;
}
void QInfo_Statistic_CrMixin::set_satisfied(::google::protobuf::uint32 value) {
  set_has_satisfied();
  satisfied_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.satisfied)
}

// optional uint32 users = 8;
bool QInfo_Statistic_CrMixin::has_users() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void QInfo_Statistic_CrMixin::set_has_users() {
  _has_bits_[0] |= 0x00000080u;
}
void QInfo_Statistic_CrMixin::clear_has_users() {
  _has_bits_[0] &= ~0x00000080u;
}
void QInfo_Statistic_CrMixin::clear_users() {
  users_ = 0u;
  clear_has_users();
}
::google::protobuf::uint32 QInfo_Statistic_CrMixin::users() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.users)
  return users_;
}
void QInfo_Statistic_CrMixin::set_users(::google::protobuf::uint32 value) {
  set_has_users();
  users_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.users)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic_Intent::kNameFieldNumber;
const int QInfo_Statistic_Intent::kProbFieldNumber;
const int QInfo_Statistic_Intent::kClicksFieldNumber;
const int QInfo_Statistic_Intent::kViewsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic_Intent::QInfo_Statistic_Intent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
}
QInfo_Statistic_Intent::QInfo_Statistic_Intent(const QInfo_Statistic_Intent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&prob_, &from.prob_,
    static_cast<size_t>(reinterpret_cast<char*>(&views_) -
    reinterpret_cast<char*>(&prob_)) + sizeof(views_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
}

void QInfo_Statistic_Intent::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&prob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&views_) -
      reinterpret_cast<char*>(&prob_)) + sizeof(views_));
}

QInfo_Statistic_Intent::~QInfo_Statistic_Intent() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
  SharedDtor();
}

void QInfo_Statistic_Intent::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QInfo_Statistic_Intent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic_Intent::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic_Intent& QInfo_Statistic_Intent::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic_Intent* QInfo_Statistic_Intent::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic_Intent* n = new QInfo_Statistic_Intent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic_Intent::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&prob_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&views_) -
        reinterpret_cast<char*>(&prob_)) + sizeof(views_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic_Intent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float prob = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clicks = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_clicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 views = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
  return false;
#undef DO_
}

void QInfo_Statistic_Intent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float prob = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->prob(), output);
  }

  // optional uint32 clicks = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clicks(), output);
  }

  // optional uint32 views = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->views(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
}

::google::protobuf::uint8* QInfo_Statistic_Intent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float prob = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->prob(), target);
  }

  // optional uint32 clicks = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clicks(), target);
  }

  // optional uint32 views = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->views(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
  return target;
}

size_t QInfo_Statistic_Intent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional float prob = 2;
    if (has_prob()) {
      total_size += 1 + 4;
    }

    // optional uint32 clicks = 3;
    if (has_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clicks());
    }

    // optional uint32 views = 4;
    if (has_views()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->views());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic_Intent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic_Intent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic_Intent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
    MergeFrom(*source);
  }
}

void QInfo_Statistic_Intent::MergeFrom(const QInfo_Statistic_Intent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      prob_ = from.prob_;
    }
    if (cached_has_bits & 0x00000004u) {
      clicks_ = from.clicks_;
    }
    if (cached_has_bits & 0x00000008u) {
      views_ = from.views_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QInfo_Statistic_Intent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic_Intent::CopyFrom(const QInfo_Statistic_Intent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic_Intent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void QInfo_Statistic_Intent::Swap(QInfo_Statistic_Intent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic_Intent::InternalSwap(QInfo_Statistic_Intent* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(prob_, other->prob_);
  swap(clicks_, other->clicks_);
  swap(views_, other->views_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic_Intent::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic_Intent

// required string name = 1;
bool QInfo_Statistic_Intent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo_Statistic_Intent::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo_Statistic_Intent::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo_Statistic_Intent::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& QInfo_Statistic_Intent::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name)
  return name_.GetNoArena();
}
void QInfo_Statistic_Intent::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name)
}
#if LANG_CXX11
void QInfo_Statistic_Intent::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name)
}
#endif
void QInfo_Statistic_Intent::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name)
}
void QInfo_Statistic_Intent::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name)
}
::std::string* QInfo_Statistic_Intent::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QInfo_Statistic_Intent::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QInfo_Statistic_Intent::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name)
}

// optional float prob = 2;
bool QInfo_Statistic_Intent::has_prob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QInfo_Statistic_Intent::set_has_prob() {
  _has_bits_[0] |= 0x00000002u;
}
void QInfo_Statistic_Intent::clear_has_prob() {
  _has_bits_[0] &= ~0x00000002u;
}
void QInfo_Statistic_Intent::clear_prob() {
  prob_ = 0;
  clear_has_prob();
}
float QInfo_Statistic_Intent::prob() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.prob)
  return prob_;
}
void QInfo_Statistic_Intent::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.prob)
}

// optional uint32 clicks = 3;
bool QInfo_Statistic_Intent::has_clicks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QInfo_Statistic_Intent::set_has_clicks() {
  _has_bits_[0] |= 0x00000004u;
}
void QInfo_Statistic_Intent::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000004u;
}
void QInfo_Statistic_Intent::clear_clicks() {
  clicks_ = 0u;
  clear_has_clicks();
}
::google::protobuf::uint32 QInfo_Statistic_Intent::clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.clicks)
  return clicks_;
}
void QInfo_Statistic_Intent::set_clicks(::google::protobuf::uint32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.clicks)
}

// optional uint32 views = 4;
bool QInfo_Statistic_Intent::has_views() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QInfo_Statistic_Intent::set_has_views() {
  _has_bits_[0] |= 0x00000008u;
}
void QInfo_Statistic_Intent::clear_has_views() {
  _has_bits_[0] &= ~0x00000008u;
}
void QInfo_Statistic_Intent::clear_views() {
  views_ = 0u;
  clear_has_views();
}
::google::protobuf::uint32 QInfo_Statistic_Intent::views() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.views)
  return views_;
}
void QInfo_Statistic_Intent::set_views(::google::protobuf::uint32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.views)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo_Statistic::kGeoFieldNumber;
const int QInfo_Statistic::kAlYFieldNumber;
const int QInfo_Statistic::kAlGFieldNumber;
const int QInfo_Statistic::kAlMgFieldNumber;
const int QInfo_Statistic::kCrMFieldNumber;
const int QInfo_Statistic::kCrMgFieldNumber;
const int QInfo_Statistic::kCrYFieldNumber;
const int QInfo_Statistic::kCrGFieldNumber;
const int QInfo_Statistic::kCrMixFieldNumber;
const int QInfo_Statistic::kSrGSpkFieldNumber;
const int QInfo_Statistic::kSrGLiruFieldNumber;
const int QInfo_Statistic::kSrGKwsFieldNumber;
const int QInfo_Statistic::kSrYSpkFieldNumber;
const int QInfo_Statistic::kSrYLiruFieldNumber;
const int QInfo_Statistic::kSrYKwsFieldNumber;
const int QInfo_Statistic::kBrYFieldNumber;
const int QInfo_Statistic::kBrGFieldNumber;
const int QInfo_Statistic::kBrMFieldNumber;
const int QInfo_Statistic::kNalYFieldNumber;
const int QInfo_Statistic::kNalGFieldNumber;
const int QInfo_Statistic::kNalMgFieldNumber;
const int QInfo_Statistic::kNvgMdlFieldNumber;
const int QInfo_Statistic::kVrtMdlFieldNumber;
const int QInfo_Statistic::kCrImgFieldNumber;
const int QInfo_Statistic::kAlImgYFieldNumber;
const int QInfo_Statistic::kAlImgGFieldNumber;
const int QInfo_Statistic::kAlImgGmxFieldNumber;
const int QInfo_Statistic::kEssrExpYFieldNumber;
const int QInfo_Statistic::kEssrExpGFieldNumber;
const int QInfo_Statistic::kFreqM3YFieldNumber;
const int QInfo_Statistic::kCrMMixinsFieldNumber;
const int QInfo_Statistic::kIntMFieldNumber;
const int QInfo_Statistic::kCrVdoFieldNumber;
const int QInfo_Statistic::kCrMMobFieldNumber;
const int QInfo_Statistic::kCrMMobMixinsFieldNumber;
const int QInfo_Statistic::kIntMMobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo_Statistic::QInfo_Statistic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo.Statistic)
}
QInfo_Statistic::QInfo_Statistic(const QInfo_Statistic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cr_m_mixins_(from.cr_m_mixins_),
      int_m_(from.int_m_),
      cr_m_mob_mixins_(from.cr_m_mob_mixins_),
      int_m_mob_(from.int_m_mob_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_al_y()) {
    al_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Al(*from.al_y_);
  } else {
    al_y_ = NULL;
  }
  if (from.has_al_g()) {
    al_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Al(*from.al_g_);
  } else {
    al_g_ = NULL;
  }
  if (from.has_al_mg()) {
    al_mg_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Al(*from.al_mg_);
  } else {
    al_mg_ = NULL;
  }
  if (from.has_cr_m()) {
    cr_m_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr(*from.cr_m_);
  } else {
    cr_m_ = NULL;
  }
  if (from.has_cr_mg()) {
    cr_mg_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr(*from.cr_mg_);
  } else {
    cr_mg_ = NULL;
  }
  if (from.has_cr_y()) {
    cr_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr(*from.cr_y_);
  } else {
    cr_y_ = NULL;
  }
  if (from.has_cr_g()) {
    cr_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr(*from.cr_g_);
  } else {
    cr_g_ = NULL;
  }
  if (from.has_cr_mix()) {
    cr_mix_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr(*from.cr_mix_);
  } else {
    cr_mix_ = NULL;
  }
  if (from.has_sr_g_spk()) {
    sr_g_spk_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr(*from.sr_g_spk_);
  } else {
    sr_g_spk_ = NULL;
  }
  if (from.has_sr_g_liru()) {
    sr_g_liru_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr(*from.sr_g_liru_);
  } else {
    sr_g_liru_ = NULL;
  }
  if (from.has_sr_g_kws()) {
    sr_g_kws_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr(*from.sr_g_kws_);
  } else {
    sr_g_kws_ = NULL;
  }
  if (from.has_sr_y_spk()) {
    sr_y_spk_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr(*from.sr_y_spk_);
  } else {
    sr_y_spk_ = NULL;
  }
  if (from.has_sr_y_liru()) {
    sr_y_liru_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr(*from.sr_y_liru_);
  } else {
    sr_y_liru_ = NULL;
  }
  if (from.has_sr_y_kws()) {
    sr_y_kws_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr(*from.sr_y_kws_);
  } else {
    sr_y_kws_ = NULL;
  }
  if (from.has_br_y()) {
    br_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Br(*from.br_y_);
  } else {
    br_y_ = NULL;
  }
  if (from.has_br_g()) {
    br_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Br(*from.br_g_);
  } else {
    br_g_ = NULL;
  }
  if (from.has_br_m()) {
    br_m_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Br(*from.br_m_);
  } else {
    br_m_ = NULL;
  }
  if (from.has_nal_y()) {
    nal_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal(*from.nal_y_);
  } else {
    nal_y_ = NULL;
  }
  if (from.has_nal_g()) {
    nal_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal(*from.nal_g_);
  } else {
    nal_g_ = NULL;
  }
  if (from.has_nal_mg()) {
    nal_mg_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal(*from.nal_mg_);
  } else {
    nal_mg_ = NULL;
  }
  if (from.has_nvg_mdl()) {
    nvg_mdl_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg(*from.nvg_mdl_);
  } else {
    nvg_mdl_ = NULL;
  }
  if (from.has_vrt_mdl()) {
    vrt_mdl_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt(*from.vrt_mdl_);
  } else {
    vrt_mdl_ = NULL;
  }
  if (from.has_cr_img()) {
    cr_img_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg(*from.cr_img_);
  } else {
    cr_img_ = NULL;
  }
  if (from.has_al_img_y()) {
    al_img_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg(*from.al_img_y_);
  } else {
    al_img_y_ = NULL;
  }
  if (from.has_al_img_g()) {
    al_img_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg(*from.al_img_g_);
  } else {
    al_img_g_ = NULL;
  }
  if (from.has_al_img_gmx()) {
    al_img_gmx_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg(*from.al_img_gmx_);
  } else {
    al_img_gmx_ = NULL;
  }
  if (from.has_essr_exp_y()) {
    essr_exp_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp(*from.essr_exp_y_);
  } else {
    essr_exp_y_ = NULL;
  }
  if (from.has_essr_exp_g()) {
    essr_exp_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp(*from.essr_exp_g_);
  } else {
    essr_exp_g_ = NULL;
  }
  if (from.has_freq_m_3y()) {
    freq_m_3y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq(*from.freq_m_3y_);
  } else {
    freq_m_3y_ = NULL;
  }
  if (from.has_cr_vdo()) {
    cr_vdo_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo(*from.cr_vdo_);
  } else {
    cr_vdo_ = NULL;
  }
  if (from.has_cr_m_mob()) {
    cr_m_mob_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr(*from.cr_m_mob_);
  } else {
    cr_m_mob_ = NULL;
  }
  geo_ = from.geo_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo.Statistic)
}

void QInfo_Statistic::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&al_y_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geo_) -
      reinterpret_cast<char*>(&al_y_)) + sizeof(geo_));
}

QInfo_Statistic::~QInfo_Statistic() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo.Statistic)
  SharedDtor();
}

void QInfo_Statistic::SharedDtor() {
  if (this != internal_default_instance()) delete al_y_;
  if (this != internal_default_instance()) delete al_g_;
  if (this != internal_default_instance()) delete al_mg_;
  if (this != internal_default_instance()) delete cr_m_;
  if (this != internal_default_instance()) delete cr_mg_;
  if (this != internal_default_instance()) delete cr_y_;
  if (this != internal_default_instance()) delete cr_g_;
  if (this != internal_default_instance()) delete cr_mix_;
  if (this != internal_default_instance()) delete sr_g_spk_;
  if (this != internal_default_instance()) delete sr_g_liru_;
  if (this != internal_default_instance()) delete sr_g_kws_;
  if (this != internal_default_instance()) delete sr_y_spk_;
  if (this != internal_default_instance()) delete sr_y_liru_;
  if (this != internal_default_instance()) delete sr_y_kws_;
  if (this != internal_default_instance()) delete br_y_;
  if (this != internal_default_instance()) delete br_g_;
  if (this != internal_default_instance()) delete br_m_;
  if (this != internal_default_instance()) delete nal_y_;
  if (this != internal_default_instance()) delete nal_g_;
  if (this != internal_default_instance()) delete nal_mg_;
  if (this != internal_default_instance()) delete nvg_mdl_;
  if (this != internal_default_instance()) delete vrt_mdl_;
  if (this != internal_default_instance()) delete cr_img_;
  if (this != internal_default_instance()) delete al_img_y_;
  if (this != internal_default_instance()) delete al_img_g_;
  if (this != internal_default_instance()) delete al_img_gmx_;
  if (this != internal_default_instance()) delete essr_exp_y_;
  if (this != internal_default_instance()) delete essr_exp_g_;
  if (this != internal_default_instance()) delete freq_m_3y_;
  if (this != internal_default_instance()) delete cr_vdo_;
  if (this != internal_default_instance()) delete cr_m_mob_;
}

void QInfo_Statistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo_Statistic::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo_Statistic& QInfo_Statistic::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo_Statistic* QInfo_Statistic::New(::google::protobuf::Arena* arena) const {
  QInfo_Statistic* n = new QInfo_Statistic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo_Statistic::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo.Statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cr_m_mixins_.Clear();
  int_m_.Clear();
  cr_m_mob_mixins_.Clear();
  int_m_mob_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(al_y_ != NULL);
      al_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_Al::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(al_g_ != NULL);
      al_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_Al::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(al_mg_ != NULL);
      al_mg_->::ru::mail::go::webbase::serp::QInfo_Statistic_Al::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cr_m_ != NULL);
      cr_m_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(cr_mg_ != NULL);
      cr_mg_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(cr_y_ != NULL);
      cr_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(cr_g_ != NULL);
      cr_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(cr_mix_ != NULL);
      cr_mix_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(sr_g_spk_ != NULL);
      sr_g_spk_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(sr_g_liru_ != NULL);
      sr_g_liru_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(sr_g_kws_ != NULL);
      sr_g_kws_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(sr_y_spk_ != NULL);
      sr_y_spk_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(sr_y_liru_ != NULL);
      sr_y_liru_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(sr_y_kws_ != NULL);
      sr_y_kws_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(br_y_ != NULL);
      br_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_Br::Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(br_g_ != NULL);
      br_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_Br::Clear();
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(br_m_ != NULL);
      br_m_->::ru::mail::go::webbase::serp::QInfo_Statistic_Br::Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(nal_y_ != NULL);
      nal_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_Nal::Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(nal_g_ != NULL);
      nal_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_Nal::Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(nal_mg_ != NULL);
      nal_mg_->::ru::mail::go::webbase::serp::QInfo_Statistic_Nal::Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(nvg_mdl_ != NULL);
      nvg_mdl_->::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg::Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(vrt_mdl_ != NULL);
      vrt_mdl_->::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt::Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(cr_img_ != NULL);
      cr_img_->::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg::Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(al_img_y_ != NULL);
      al_img_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg::Clear();
    }
  }
  if (cached_has_bits & 2130706432u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(al_img_g_ != NULL);
      al_img_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg::Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(al_img_gmx_ != NULL);
      al_img_gmx_->::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg::Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(essr_exp_y_ != NULL);
      essr_exp_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp::Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(essr_exp_g_ != NULL);
      essr_exp_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp::Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(freq_m_3y_ != NULL);
      freq_m_3y_->::ru::mail::go::webbase::serp::QInfo_Statistic_Freq::Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(cr_vdo_ != NULL);
      cr_vdo_->::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo::Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(cr_m_mob_ != NULL);
      cr_m_mob_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
    }
  }
  geo_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo_Statistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo.Statistic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 geo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_geo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &geo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_al_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_g = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_al_g()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_mg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_al_mg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_m = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cr_m()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_mg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cr_mg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cr_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_g = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cr_g()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_mix = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cr_mix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_spk = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sr_g_spk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_liru = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sr_g_liru()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_kws = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sr_g_kws()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_spk = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sr_y_spk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_liru = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sr_y_liru()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_kws = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sr_y_kws()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_y = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_br_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_g = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_br_g()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_m = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_br_m()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_y = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nal_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_g = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nal_g()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_mg = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nal_mg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nvg nvg_mdl = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nvg_mdl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Vrt vrt_mdl = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vrt_mdl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.CrImg cr_img = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cr_img()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_y = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_al_img_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_g = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_al_img_g()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_gmx = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_al_img_gmx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp essr_exp_y = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_essr_exp_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp essr_exp_g = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_essr_exp_g()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Freq freq_m_3y = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_freq_m_3y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin cr_m_mixins = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cr_m_mixins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.Intent int_m = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_int_m()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo cr_vdo = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cr_vdo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_m_mob = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cr_m_mob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin cr_m_mob_mixins = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cr_m_mob_mixins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.Intent int_m_mob = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_int_m_mob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo.Statistic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo.Statistic)
  return false;
#undef DO_
}

void QInfo_Statistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo.Statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo = 1;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->geo(), output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_y = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->al_y_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_g = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->al_g_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_mg = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->al_mg_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_m = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cr_m_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_mg = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->cr_mg_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_y = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->cr_y_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_g = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->cr_g_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_mix = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->cr_mix_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_spk = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->sr_g_spk_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_liru = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->sr_g_liru_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_kws = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->sr_g_kws_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_spk = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->sr_y_spk_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_liru = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->sr_y_liru_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_kws = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->sr_y_kws_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_y = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->br_y_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_g = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->br_g_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_m = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->br_m_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_y = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->nal_y_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_g = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->nal_g_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_mg = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->nal_mg_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nvg nvg_mdl = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->nvg_mdl_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Vrt vrt_mdl = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->vrt_mdl_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.CrImg cr_img = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->cr_img_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_y = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->al_img_y_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_g = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->al_img_g_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_gmx = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->al_img_gmx_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp essr_exp_y = 28;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->essr_exp_y_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp essr_exp_g = 29;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->essr_exp_g_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Freq freq_m_3y = 30;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->freq_m_3y_, output);
  }

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin cr_m_mixins = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cr_m_mixins_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->cr_m_mixins(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.Intent int_m = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->int_m_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->int_m(static_cast<int>(i)), output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo cr_vdo = 33;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *this->cr_vdo_, output);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_m_mob = 34;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->cr_m_mob_, output);
  }

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin cr_m_mob_mixins = 35;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cr_m_mob_mixins_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->cr_m_mob_mixins(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.Intent int_m_mob = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->int_m_mob_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->int_m_mob(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo.Statistic)
}

::google::protobuf::uint8* QInfo_Statistic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo.Statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo = 1;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->geo(), target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_y = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->al_y_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_g = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->al_g_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_mg = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->al_mg_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_m = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->cr_m_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_mg = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->cr_mg_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_y = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->cr_y_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_g = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->cr_g_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_mix = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->cr_mix_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_spk = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->sr_g_spk_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_liru = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->sr_g_liru_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_kws = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->sr_g_kws_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_spk = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->sr_y_spk_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_liru = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->sr_y_liru_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_kws = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->sr_y_kws_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_y = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->br_y_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_g = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->br_g_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_m = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->br_m_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_y = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->nal_y_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_g = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->nal_g_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_mg = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->nal_mg_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nvg nvg_mdl = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->nvg_mdl_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Vrt vrt_mdl = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->vrt_mdl_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.CrImg cr_img = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->cr_img_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_y = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->al_img_y_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_g = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->al_img_g_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_gmx = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->al_img_gmx_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp essr_exp_y = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->essr_exp_y_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp essr_exp_g = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->essr_exp_g_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Freq freq_m_3y = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->freq_m_3y_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin cr_m_mixins = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cr_m_mixins_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, this->cr_m_mixins(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.Intent int_m = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->int_m_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, this->int_m(static_cast<int>(i)), deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo cr_vdo = 33;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, *this->cr_vdo_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_m_mob = 34;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *this->cr_m_mob_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin cr_m_mob_mixins = 35;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cr_m_mob_mixins_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, this->cr_m_mob_mixins(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.Intent int_m_mob = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->int_m_mob_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        36, this->int_m_mob(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo.Statistic)
  return target;
}

size_t QInfo_Statistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo.Statistic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 geo = 1;
  if (has_geo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->geo());
  }
  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin cr_m_mixins = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->cr_m_mixins_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cr_m_mixins(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.Intent int_m = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->int_m_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->int_m(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin cr_m_mob_mixins = 35;
  {
    unsigned int count = static_cast<unsigned int>(this->cr_m_mob_mixins_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cr_m_mob_mixins(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.Intent int_m_mob = 36;
  {
    unsigned int count = static_cast<unsigned int>(this->int_m_mob_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->int_m_mob(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_y = 2;
    if (has_al_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->al_y_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_g = 3;
    if (has_al_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->al_g_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_mg = 4;
    if (has_al_mg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->al_mg_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_m = 5;
    if (has_cr_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cr_m_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_mg = 6;
    if (has_cr_mg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cr_mg_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_y = 7;
    if (has_cr_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cr_y_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_g = 8;
    if (has_cr_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cr_g_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_mix = 9;
    if (has_cr_mix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cr_mix_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_spk = 10;
    if (has_sr_g_spk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sr_g_spk_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_liru = 11;
    if (has_sr_g_liru()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sr_g_liru_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_kws = 12;
    if (has_sr_g_kws()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sr_g_kws_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_spk = 13;
    if (has_sr_y_spk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sr_y_spk_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_liru = 14;
    if (has_sr_y_liru()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sr_y_liru_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_kws = 15;
    if (has_sr_y_kws()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sr_y_kws_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_y = 16;
    if (has_br_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->br_y_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_g = 17;
    if (has_br_g()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->br_g_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_m = 18;
    if (has_br_m()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->br_m_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_y = 19;
    if (has_nal_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nal_y_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_g = 20;
    if (has_nal_g()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nal_g_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_mg = 21;
    if (has_nal_mg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nal_mg_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nvg nvg_mdl = 22;
    if (has_nvg_mdl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nvg_mdl_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Vrt vrt_mdl = 23;
    if (has_vrt_mdl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vrt_mdl_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.CrImg cr_img = 24;
    if (has_cr_img()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cr_img_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_y = 25;
    if (has_al_img_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->al_img_y_);
    }

  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_g = 26;
    if (has_al_img_g()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->al_img_g_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_gmx = 27;
    if (has_al_img_gmx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->al_img_gmx_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp essr_exp_y = 28;
    if (has_essr_exp_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->essr_exp_y_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp essr_exp_g = 29;
    if (has_essr_exp_g()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->essr_exp_g_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Freq freq_m_3y = 30;
    if (has_freq_m_3y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->freq_m_3y_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo cr_vdo = 33;
    if (has_cr_vdo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cr_vdo_);
    }

    // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_m_mob = 34;
    if (has_cr_m_mob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cr_m_mob_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo_Statistic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo_Statistic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo_Statistic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo.Statistic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo.Statistic)
    MergeFrom(*source);
  }
}

void QInfo_Statistic::MergeFrom(const QInfo_Statistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cr_m_mixins_.MergeFrom(from.cr_m_mixins_);
  int_m_.MergeFrom(from.int_m_);
  cr_m_mob_mixins_.MergeFrom(from.cr_m_mob_mixins_);
  int_m_mob_.MergeFrom(from.int_m_mob_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_al_y()->::ru::mail::go::webbase::serp::QInfo_Statistic_Al::MergeFrom(from.al_y());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_al_g()->::ru::mail::go::webbase::serp::QInfo_Statistic_Al::MergeFrom(from.al_g());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_al_mg()->::ru::mail::go::webbase::serp::QInfo_Statistic_Al::MergeFrom(from.al_mg());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_cr_m()->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::MergeFrom(from.cr_m());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_cr_mg()->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::MergeFrom(from.cr_mg());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_cr_y()->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::MergeFrom(from.cr_y());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_cr_g()->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::MergeFrom(from.cr_g());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_cr_mix()->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::MergeFrom(from.cr_mix());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_sr_g_spk()->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::MergeFrom(from.sr_g_spk());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_sr_g_liru()->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::MergeFrom(from.sr_g_liru());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_sr_g_kws()->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::MergeFrom(from.sr_g_kws());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_sr_y_spk()->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::MergeFrom(from.sr_y_spk());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_sr_y_liru()->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::MergeFrom(from.sr_y_liru());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_sr_y_kws()->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::MergeFrom(from.sr_y_kws());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_br_y()->::ru::mail::go::webbase::serp::QInfo_Statistic_Br::MergeFrom(from.br_y());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_br_g()->::ru::mail::go::webbase::serp::QInfo_Statistic_Br::MergeFrom(from.br_g());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_br_m()->::ru::mail::go::webbase::serp::QInfo_Statistic_Br::MergeFrom(from.br_m());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_nal_y()->::ru::mail::go::webbase::serp::QInfo_Statistic_Nal::MergeFrom(from.nal_y());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_nal_g()->::ru::mail::go::webbase::serp::QInfo_Statistic_Nal::MergeFrom(from.nal_g());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_nal_mg()->::ru::mail::go::webbase::serp::QInfo_Statistic_Nal::MergeFrom(from.nal_mg());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_nvg_mdl()->::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg::MergeFrom(from.nvg_mdl());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_vrt_mdl()->::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt::MergeFrom(from.vrt_mdl());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_cr_img()->::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg::MergeFrom(from.cr_img());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_al_img_y()->::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg::MergeFrom(from.al_img_y());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_al_img_g()->::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg::MergeFrom(from.al_img_g());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_al_img_gmx()->::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg::MergeFrom(from.al_img_gmx());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_essr_exp_y()->::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp::MergeFrom(from.essr_exp_y());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_essr_exp_g()->::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp::MergeFrom(from.essr_exp_g());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_freq_m_3y()->::ru::mail::go::webbase::serp::QInfo_Statistic_Freq::MergeFrom(from.freq_m_3y());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_cr_vdo()->::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo::MergeFrom(from.cr_vdo());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_cr_m_mob()->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::MergeFrom(from.cr_m_mob());
    }
    if (cached_has_bits & 0x80000000u) {
      geo_ = from.geo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QInfo_Statistic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo_Statistic::CopyFrom(const QInfo_Statistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo_Statistic::IsInitialized() const {
  if ((_has_bits_[0] & 0x80000000) != 0x80000000) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cr_m_mixins())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->int_m())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cr_m_mob_mixins())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->int_m_mob())) return false;
  return true;
}

void QInfo_Statistic::Swap(QInfo_Statistic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo_Statistic::InternalSwap(QInfo_Statistic* other) {
  using std::swap;
  cr_m_mixins_.InternalSwap(&other->cr_m_mixins_);
  int_m_.InternalSwap(&other->int_m_);
  cr_m_mob_mixins_.InternalSwap(&other->cr_m_mob_mixins_);
  int_m_mob_.InternalSwap(&other->int_m_mob_);
  swap(al_y_, other->al_y_);
  swap(al_g_, other->al_g_);
  swap(al_mg_, other->al_mg_);
  swap(cr_m_, other->cr_m_);
  swap(cr_mg_, other->cr_mg_);
  swap(cr_y_, other->cr_y_);
  swap(cr_g_, other->cr_g_);
  swap(cr_mix_, other->cr_mix_);
  swap(sr_g_spk_, other->sr_g_spk_);
  swap(sr_g_liru_, other->sr_g_liru_);
  swap(sr_g_kws_, other->sr_g_kws_);
  swap(sr_y_spk_, other->sr_y_spk_);
  swap(sr_y_liru_, other->sr_y_liru_);
  swap(sr_y_kws_, other->sr_y_kws_);
  swap(br_y_, other->br_y_);
  swap(br_g_, other->br_g_);
  swap(br_m_, other->br_m_);
  swap(nal_y_, other->nal_y_);
  swap(nal_g_, other->nal_g_);
  swap(nal_mg_, other->nal_mg_);
  swap(nvg_mdl_, other->nvg_mdl_);
  swap(vrt_mdl_, other->vrt_mdl_);
  swap(cr_img_, other->cr_img_);
  swap(al_img_y_, other->al_img_y_);
  swap(al_img_g_, other->al_img_g_);
  swap(al_img_gmx_, other->al_img_gmx_);
  swap(essr_exp_y_, other->essr_exp_y_);
  swap(essr_exp_g_, other->essr_exp_g_);
  swap(freq_m_3y_, other->freq_m_3y_);
  swap(cr_vdo_, other->cr_vdo_);
  swap(cr_m_mob_, other->cr_m_mob_);
  swap(geo_, other->geo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo_Statistic::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo_Statistic

// required uint32 geo = 1;
bool QInfo_Statistic::has_geo() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void QInfo_Statistic::set_has_geo() {
  _has_bits_[0] |= 0x80000000u;
}
void QInfo_Statistic::clear_has_geo() {
  _has_bits_[0] &= ~0x80000000u;
}
void QInfo_Statistic::clear_geo() {
  geo_ = 0u;
  clear_has_geo();
}
::google::protobuf::uint32 QInfo_Statistic::geo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.geo)
  return geo_;
}
void QInfo_Statistic::set_geo(::google::protobuf::uint32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.geo)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_y = 2;
bool QInfo_Statistic::has_al_y() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo_Statistic::set_has_al_y() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo_Statistic::clear_has_al_y() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo_Statistic::clear_al_y() {
  if (al_y_ != NULL) al_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_Al::Clear();
  clear_has_al_y();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al& QInfo_Statistic::al_y() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* p = al_y_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.al_y)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Al_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Al* QInfo_Statistic::mutable_al_y() {
  set_has_al_y();
  if (al_y_ == NULL) {
    al_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Al;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.al_y)
  return al_y_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Al* QInfo_Statistic::release_al_y() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.al_y)
  clear_has_al_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* temp = al_y_;
  al_y_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_al_y(::ru::mail::go::webbase::serp::QInfo_Statistic_Al* al_y) {
  delete al_y_;
  al_y_ = al_y;
  if (al_y) {
    set_has_al_y();
  } else {
    clear_has_al_y();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.al_y)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_g = 3;
bool QInfo_Statistic::has_al_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QInfo_Statistic::set_has_al_g() {
  _has_bits_[0] |= 0x00000002u;
}
void QInfo_Statistic::clear_has_al_g() {
  _has_bits_[0] &= ~0x00000002u;
}
void QInfo_Statistic::clear_al_g() {
  if (al_g_ != NULL) al_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_Al::Clear();
  clear_has_al_g();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al& QInfo_Statistic::al_g() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* p = al_g_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.al_g)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Al_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Al* QInfo_Statistic::mutable_al_g() {
  set_has_al_g();
  if (al_g_ == NULL) {
    al_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Al;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.al_g)
  return al_g_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Al* QInfo_Statistic::release_al_g() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.al_g)
  clear_has_al_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* temp = al_g_;
  al_g_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_al_g(::ru::mail::go::webbase::serp::QInfo_Statistic_Al* al_g) {
  delete al_g_;
  al_g_ = al_g;
  if (al_g) {
    set_has_al_g();
  } else {
    clear_has_al_g();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.al_g)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_mg = 4;
bool QInfo_Statistic::has_al_mg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QInfo_Statistic::set_has_al_mg() {
  _has_bits_[0] |= 0x00000004u;
}
void QInfo_Statistic::clear_has_al_mg() {
  _has_bits_[0] &= ~0x00000004u;
}
void QInfo_Statistic::clear_al_mg() {
  if (al_mg_ != NULL) al_mg_->::ru::mail::go::webbase::serp::QInfo_Statistic_Al::Clear();
  clear_has_al_mg();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al& QInfo_Statistic::al_mg() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* p = al_mg_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.al_mg)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Al_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Al* QInfo_Statistic::mutable_al_mg() {
  set_has_al_mg();
  if (al_mg_ == NULL) {
    al_mg_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Al;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.al_mg)
  return al_mg_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Al* QInfo_Statistic::release_al_mg() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.al_mg)
  clear_has_al_mg();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* temp = al_mg_;
  al_mg_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_al_mg(::ru::mail::go::webbase::serp::QInfo_Statistic_Al* al_mg) {
  delete al_mg_;
  al_mg_ = al_mg;
  if (al_mg) {
    set_has_al_mg();
  } else {
    clear_has_al_mg();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.al_mg)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_m = 5;
bool QInfo_Statistic::has_cr_m() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QInfo_Statistic::set_has_cr_m() {
  _has_bits_[0] |= 0x00000008u;
}
void QInfo_Statistic::clear_has_cr_m() {
  _has_bits_[0] &= ~0x00000008u;
}
void QInfo_Statistic::clear_cr_m() {
  if (cr_m_ != NULL) cr_m_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
  clear_has_cr_m();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& QInfo_Statistic::cr_m() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* p = cr_m_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Cr_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::mutable_cr_m() {
  set_has_cr_m();
  if (cr_m_ == NULL) {
    cr_m_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m)
  return cr_m_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::release_cr_m() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m)
  clear_has_cr_m();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* temp = cr_m_;
  cr_m_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_cr_m(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_m) {
  delete cr_m_;
  cr_m_ = cr_m;
  if (cr_m) {
    set_has_cr_m();
  } else {
    clear_has_cr_m();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_mg = 6;
bool QInfo_Statistic::has_cr_mg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QInfo_Statistic::set_has_cr_mg() {
  _has_bits_[0] |= 0x00000010u;
}
void QInfo_Statistic::clear_has_cr_mg() {
  _has_bits_[0] &= ~0x00000010u;
}
void QInfo_Statistic::clear_cr_mg() {
  if (cr_mg_ != NULL) cr_mg_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
  clear_has_cr_mg();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& QInfo_Statistic::cr_mg() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* p = cr_mg_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_mg)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Cr_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::mutable_cr_mg() {
  set_has_cr_mg();
  if (cr_mg_ == NULL) {
    cr_mg_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_mg)
  return cr_mg_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::release_cr_mg() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.cr_mg)
  clear_has_cr_mg();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* temp = cr_mg_;
  cr_mg_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_cr_mg(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_mg) {
  delete cr_mg_;
  cr_mg_ = cr_mg;
  if (cr_mg) {
    set_has_cr_mg();
  } else {
    clear_has_cr_mg();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.cr_mg)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_y = 7;
bool QInfo_Statistic::has_cr_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void QInfo_Statistic::set_has_cr_y() {
  _has_bits_[0] |= 0x00000020u;
}
void QInfo_Statistic::clear_has_cr_y() {
  _has_bits_[0] &= ~0x00000020u;
}
void QInfo_Statistic::clear_cr_y() {
  if (cr_y_ != NULL) cr_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
  clear_has_cr_y();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& QInfo_Statistic::cr_y() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* p = cr_y_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_y)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Cr_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::mutable_cr_y() {
  set_has_cr_y();
  if (cr_y_ == NULL) {
    cr_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_y)
  return cr_y_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::release_cr_y() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.cr_y)
  clear_has_cr_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* temp = cr_y_;
  cr_y_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_cr_y(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_y) {
  delete cr_y_;
  cr_y_ = cr_y;
  if (cr_y) {
    set_has_cr_y();
  } else {
    clear_has_cr_y();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.cr_y)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_g = 8;
bool QInfo_Statistic::has_cr_g() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QInfo_Statistic::set_has_cr_g() {
  _has_bits_[0] |= 0x00000040u;
}
void QInfo_Statistic::clear_has_cr_g() {
  _has_bits_[0] &= ~0x00000040u;
}
void QInfo_Statistic::clear_cr_g() {
  if (cr_g_ != NULL) cr_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
  clear_has_cr_g();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& QInfo_Statistic::cr_g() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* p = cr_g_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_g)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Cr_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::mutable_cr_g() {
  set_has_cr_g();
  if (cr_g_ == NULL) {
    cr_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_g)
  return cr_g_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::release_cr_g() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.cr_g)
  clear_has_cr_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* temp = cr_g_;
  cr_g_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_cr_g(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_g) {
  delete cr_g_;
  cr_g_ = cr_g;
  if (cr_g) {
    set_has_cr_g();
  } else {
    clear_has_cr_g();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.cr_g)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_mix = 9;
bool QInfo_Statistic::has_cr_mix() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void QInfo_Statistic::set_has_cr_mix() {
  _has_bits_[0] |= 0x00000080u;
}
void QInfo_Statistic::clear_has_cr_mix() {
  _has_bits_[0] &= ~0x00000080u;
}
void QInfo_Statistic::clear_cr_mix() {
  if (cr_mix_ != NULL) cr_mix_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
  clear_has_cr_mix();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& QInfo_Statistic::cr_mix() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* p = cr_mix_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_mix)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Cr_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::mutable_cr_mix() {
  set_has_cr_mix();
  if (cr_mix_ == NULL) {
    cr_mix_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_mix)
  return cr_mix_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::release_cr_mix() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.cr_mix)
  clear_has_cr_mix();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* temp = cr_mix_;
  cr_mix_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_cr_mix(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_mix) {
  delete cr_mix_;
  cr_mix_ = cr_mix;
  if (cr_mix) {
    set_has_cr_mix();
  } else {
    clear_has_cr_mix();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.cr_mix)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_spk = 10;
bool QInfo_Statistic::has_sr_g_spk() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void QInfo_Statistic::set_has_sr_g_spk() {
  _has_bits_[0] |= 0x00000100u;
}
void QInfo_Statistic::clear_has_sr_g_spk() {
  _has_bits_[0] &= ~0x00000100u;
}
void QInfo_Statistic::clear_sr_g_spk() {
  if (sr_g_spk_ != NULL) sr_g_spk_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
  clear_has_sr_g_spk();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& QInfo_Statistic::sr_g_spk() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* p = sr_g_spk_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_spk)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Sr_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::mutable_sr_g_spk() {
  set_has_sr_g_spk();
  if (sr_g_spk_ == NULL) {
    sr_g_spk_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_spk)
  return sr_g_spk_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::release_sr_g_spk() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_spk)
  clear_has_sr_g_spk();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* temp = sr_g_spk_;
  sr_g_spk_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_sr_g_spk(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_g_spk) {
  delete sr_g_spk_;
  sr_g_spk_ = sr_g_spk;
  if (sr_g_spk) {
    set_has_sr_g_spk();
  } else {
    clear_has_sr_g_spk();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_spk)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_liru = 11;
bool QInfo_Statistic::has_sr_g_liru() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void QInfo_Statistic::set_has_sr_g_liru() {
  _has_bits_[0] |= 0x00000200u;
}
void QInfo_Statistic::clear_has_sr_g_liru() {
  _has_bits_[0] &= ~0x00000200u;
}
void QInfo_Statistic::clear_sr_g_liru() {
  if (sr_g_liru_ != NULL) sr_g_liru_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
  clear_has_sr_g_liru();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& QInfo_Statistic::sr_g_liru() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* p = sr_g_liru_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_liru)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Sr_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::mutable_sr_g_liru() {
  set_has_sr_g_liru();
  if (sr_g_liru_ == NULL) {
    sr_g_liru_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_liru)
  return sr_g_liru_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::release_sr_g_liru() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_liru)
  clear_has_sr_g_liru();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* temp = sr_g_liru_;
  sr_g_liru_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_sr_g_liru(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_g_liru) {
  delete sr_g_liru_;
  sr_g_liru_ = sr_g_liru;
  if (sr_g_liru) {
    set_has_sr_g_liru();
  } else {
    clear_has_sr_g_liru();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_liru)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_kws = 12;
bool QInfo_Statistic::has_sr_g_kws() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void QInfo_Statistic::set_has_sr_g_kws() {
  _has_bits_[0] |= 0x00000400u;
}
void QInfo_Statistic::clear_has_sr_g_kws() {
  _has_bits_[0] &= ~0x00000400u;
}
void QInfo_Statistic::clear_sr_g_kws() {
  if (sr_g_kws_ != NULL) sr_g_kws_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
  clear_has_sr_g_kws();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& QInfo_Statistic::sr_g_kws() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* p = sr_g_kws_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_kws)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Sr_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::mutable_sr_g_kws() {
  set_has_sr_g_kws();
  if (sr_g_kws_ == NULL) {
    sr_g_kws_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_kws)
  return sr_g_kws_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::release_sr_g_kws() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_kws)
  clear_has_sr_g_kws();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* temp = sr_g_kws_;
  sr_g_kws_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_sr_g_kws(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_g_kws) {
  delete sr_g_kws_;
  sr_g_kws_ = sr_g_kws;
  if (sr_g_kws) {
    set_has_sr_g_kws();
  } else {
    clear_has_sr_g_kws();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_kws)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_spk = 13;
bool QInfo_Statistic::has_sr_y_spk() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void QInfo_Statistic::set_has_sr_y_spk() {
  _has_bits_[0] |= 0x00000800u;
}
void QInfo_Statistic::clear_has_sr_y_spk() {
  _has_bits_[0] &= ~0x00000800u;
}
void QInfo_Statistic::clear_sr_y_spk() {
  if (sr_y_spk_ != NULL) sr_y_spk_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
  clear_has_sr_y_spk();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& QInfo_Statistic::sr_y_spk() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* p = sr_y_spk_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_spk)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Sr_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::mutable_sr_y_spk() {
  set_has_sr_y_spk();
  if (sr_y_spk_ == NULL) {
    sr_y_spk_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_spk)
  return sr_y_spk_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::release_sr_y_spk() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_spk)
  clear_has_sr_y_spk();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* temp = sr_y_spk_;
  sr_y_spk_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_sr_y_spk(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_y_spk) {
  delete sr_y_spk_;
  sr_y_spk_ = sr_y_spk;
  if (sr_y_spk) {
    set_has_sr_y_spk();
  } else {
    clear_has_sr_y_spk();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_spk)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_liru = 14;
bool QInfo_Statistic::has_sr_y_liru() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void QInfo_Statistic::set_has_sr_y_liru() {
  _has_bits_[0] |= 0x00001000u;
}
void QInfo_Statistic::clear_has_sr_y_liru() {
  _has_bits_[0] &= ~0x00001000u;
}
void QInfo_Statistic::clear_sr_y_liru() {
  if (sr_y_liru_ != NULL) sr_y_liru_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
  clear_has_sr_y_liru();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& QInfo_Statistic::sr_y_liru() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* p = sr_y_liru_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_liru)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Sr_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::mutable_sr_y_liru() {
  set_has_sr_y_liru();
  if (sr_y_liru_ == NULL) {
    sr_y_liru_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_liru)
  return sr_y_liru_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::release_sr_y_liru() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_liru)
  clear_has_sr_y_liru();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* temp = sr_y_liru_;
  sr_y_liru_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_sr_y_liru(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_y_liru) {
  delete sr_y_liru_;
  sr_y_liru_ = sr_y_liru;
  if (sr_y_liru) {
    set_has_sr_y_liru();
  } else {
    clear_has_sr_y_liru();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_liru)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_kws = 15;
bool QInfo_Statistic::has_sr_y_kws() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void QInfo_Statistic::set_has_sr_y_kws() {
  _has_bits_[0] |= 0x00002000u;
}
void QInfo_Statistic::clear_has_sr_y_kws() {
  _has_bits_[0] &= ~0x00002000u;
}
void QInfo_Statistic::clear_sr_y_kws() {
  if (sr_y_kws_ != NULL) sr_y_kws_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
  clear_has_sr_y_kws();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& QInfo_Statistic::sr_y_kws() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* p = sr_y_kws_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_kws)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Sr_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::mutable_sr_y_kws() {
  set_has_sr_y_kws();
  if (sr_y_kws_ == NULL) {
    sr_y_kws_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_kws)
  return sr_y_kws_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::release_sr_y_kws() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_kws)
  clear_has_sr_y_kws();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* temp = sr_y_kws_;
  sr_y_kws_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_sr_y_kws(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_y_kws) {
  delete sr_y_kws_;
  sr_y_kws_ = sr_y_kws;
  if (sr_y_kws) {
    set_has_sr_y_kws();
  } else {
    clear_has_sr_y_kws();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_kws)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_y = 16;
bool QInfo_Statistic::has_br_y() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void QInfo_Statistic::set_has_br_y() {
  _has_bits_[0] |= 0x00004000u;
}
void QInfo_Statistic::clear_has_br_y() {
  _has_bits_[0] &= ~0x00004000u;
}
void QInfo_Statistic::clear_br_y() {
  if (br_y_ != NULL) br_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_Br::Clear();
  clear_has_br_y();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br& QInfo_Statistic::br_y() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* p = br_y_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.br_y)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Br_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Br* QInfo_Statistic::mutable_br_y() {
  set_has_br_y();
  if (br_y_ == NULL) {
    br_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Br;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.br_y)
  return br_y_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Br* QInfo_Statistic::release_br_y() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.br_y)
  clear_has_br_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* temp = br_y_;
  br_y_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_br_y(::ru::mail::go::webbase::serp::QInfo_Statistic_Br* br_y) {
  delete br_y_;
  br_y_ = br_y;
  if (br_y) {
    set_has_br_y();
  } else {
    clear_has_br_y();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.br_y)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_g = 17;
bool QInfo_Statistic::has_br_g() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void QInfo_Statistic::set_has_br_g() {
  _has_bits_[0] |= 0x00008000u;
}
void QInfo_Statistic::clear_has_br_g() {
  _has_bits_[0] &= ~0x00008000u;
}
void QInfo_Statistic::clear_br_g() {
  if (br_g_ != NULL) br_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_Br::Clear();
  clear_has_br_g();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br& QInfo_Statistic::br_g() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* p = br_g_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.br_g)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Br_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Br* QInfo_Statistic::mutable_br_g() {
  set_has_br_g();
  if (br_g_ == NULL) {
    br_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Br;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.br_g)
  return br_g_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Br* QInfo_Statistic::release_br_g() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.br_g)
  clear_has_br_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* temp = br_g_;
  br_g_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_br_g(::ru::mail::go::webbase::serp::QInfo_Statistic_Br* br_g) {
  delete br_g_;
  br_g_ = br_g;
  if (br_g) {
    set_has_br_g();
  } else {
    clear_has_br_g();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.br_g)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_m = 18;
bool QInfo_Statistic::has_br_m() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void QInfo_Statistic::set_has_br_m() {
  _has_bits_[0] |= 0x00010000u;
}
void QInfo_Statistic::clear_has_br_m() {
  _has_bits_[0] &= ~0x00010000u;
}
void QInfo_Statistic::clear_br_m() {
  if (br_m_ != NULL) br_m_->::ru::mail::go::webbase::serp::QInfo_Statistic_Br::Clear();
  clear_has_br_m();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br& QInfo_Statistic::br_m() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* p = br_m_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.br_m)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Br_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Br* QInfo_Statistic::mutable_br_m() {
  set_has_br_m();
  if (br_m_ == NULL) {
    br_m_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Br;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.br_m)
  return br_m_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Br* QInfo_Statistic::release_br_m() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.br_m)
  clear_has_br_m();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* temp = br_m_;
  br_m_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_br_m(::ru::mail::go::webbase::serp::QInfo_Statistic_Br* br_m) {
  delete br_m_;
  br_m_ = br_m;
  if (br_m) {
    set_has_br_m();
  } else {
    clear_has_br_m();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.br_m)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_y = 19;
bool QInfo_Statistic::has_nal_y() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void QInfo_Statistic::set_has_nal_y() {
  _has_bits_[0] |= 0x00020000u;
}
void QInfo_Statistic::clear_has_nal_y() {
  _has_bits_[0] &= ~0x00020000u;
}
void QInfo_Statistic::clear_nal_y() {
  if (nal_y_ != NULL) nal_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_Nal::Clear();
  clear_has_nal_y();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal& QInfo_Statistic::nal_y() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* p = nal_y_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.nal_y)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Nal_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* QInfo_Statistic::mutable_nal_y() {
  set_has_nal_y();
  if (nal_y_ == NULL) {
    nal_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.nal_y)
  return nal_y_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* QInfo_Statistic::release_nal_y() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.nal_y)
  clear_has_nal_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* temp = nal_y_;
  nal_y_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_nal_y(::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* nal_y) {
  delete nal_y_;
  nal_y_ = nal_y;
  if (nal_y) {
    set_has_nal_y();
  } else {
    clear_has_nal_y();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.nal_y)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_g = 20;
bool QInfo_Statistic::has_nal_g() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void QInfo_Statistic::set_has_nal_g() {
  _has_bits_[0] |= 0x00040000u;
}
void QInfo_Statistic::clear_has_nal_g() {
  _has_bits_[0] &= ~0x00040000u;
}
void QInfo_Statistic::clear_nal_g() {
  if (nal_g_ != NULL) nal_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_Nal::Clear();
  clear_has_nal_g();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal& QInfo_Statistic::nal_g() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* p = nal_g_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.nal_g)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Nal_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* QInfo_Statistic::mutable_nal_g() {
  set_has_nal_g();
  if (nal_g_ == NULL) {
    nal_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.nal_g)
  return nal_g_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* QInfo_Statistic::release_nal_g() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.nal_g)
  clear_has_nal_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* temp = nal_g_;
  nal_g_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_nal_g(::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* nal_g) {
  delete nal_g_;
  nal_g_ = nal_g;
  if (nal_g) {
    set_has_nal_g();
  } else {
    clear_has_nal_g();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.nal_g)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_mg = 21;
bool QInfo_Statistic::has_nal_mg() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void QInfo_Statistic::set_has_nal_mg() {
  _has_bits_[0] |= 0x00080000u;
}
void QInfo_Statistic::clear_has_nal_mg() {
  _has_bits_[0] &= ~0x00080000u;
}
void QInfo_Statistic::clear_nal_mg() {
  if (nal_mg_ != NULL) nal_mg_->::ru::mail::go::webbase::serp::QInfo_Statistic_Nal::Clear();
  clear_has_nal_mg();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal& QInfo_Statistic::nal_mg() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* p = nal_mg_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.nal_mg)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Nal_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* QInfo_Statistic::mutable_nal_mg() {
  set_has_nal_mg();
  if (nal_mg_ == NULL) {
    nal_mg_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.nal_mg)
  return nal_mg_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* QInfo_Statistic::release_nal_mg() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.nal_mg)
  clear_has_nal_mg();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* temp = nal_mg_;
  nal_mg_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_nal_mg(::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* nal_mg) {
  delete nal_mg_;
  nal_mg_ = nal_mg;
  if (nal_mg) {
    set_has_nal_mg();
  } else {
    clear_has_nal_mg();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.nal_mg)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nvg nvg_mdl = 22;
bool QInfo_Statistic::has_nvg_mdl() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void QInfo_Statistic::set_has_nvg_mdl() {
  _has_bits_[0] |= 0x00100000u;
}
void QInfo_Statistic::clear_has_nvg_mdl() {
  _has_bits_[0] &= ~0x00100000u;
}
void QInfo_Statistic::clear_nvg_mdl() {
  if (nvg_mdl_ != NULL) nvg_mdl_->::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg::Clear();
  clear_has_nvg_mdl();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg& QInfo_Statistic::nvg_mdl() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg* p = nvg_mdl_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.nvg_mdl)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Nvg_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg* QInfo_Statistic::mutable_nvg_mdl() {
  set_has_nvg_mdl();
  if (nvg_mdl_ == NULL) {
    nvg_mdl_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.nvg_mdl)
  return nvg_mdl_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg* QInfo_Statistic::release_nvg_mdl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.nvg_mdl)
  clear_has_nvg_mdl();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg* temp = nvg_mdl_;
  nvg_mdl_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_nvg_mdl(::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg* nvg_mdl) {
  delete nvg_mdl_;
  nvg_mdl_ = nvg_mdl;
  if (nvg_mdl) {
    set_has_nvg_mdl();
  } else {
    clear_has_nvg_mdl();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.nvg_mdl)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Vrt vrt_mdl = 23;
bool QInfo_Statistic::has_vrt_mdl() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void QInfo_Statistic::set_has_vrt_mdl() {
  _has_bits_[0] |= 0x00200000u;
}
void QInfo_Statistic::clear_has_vrt_mdl() {
  _has_bits_[0] &= ~0x00200000u;
}
void QInfo_Statistic::clear_vrt_mdl() {
  if (vrt_mdl_ != NULL) vrt_mdl_->::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt::Clear();
  clear_has_vrt_mdl();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt& QInfo_Statistic::vrt_mdl() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt* p = vrt_mdl_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.vrt_mdl)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Vrt_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt* QInfo_Statistic::mutable_vrt_mdl() {
  set_has_vrt_mdl();
  if (vrt_mdl_ == NULL) {
    vrt_mdl_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.vrt_mdl)
  return vrt_mdl_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt* QInfo_Statistic::release_vrt_mdl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.vrt_mdl)
  clear_has_vrt_mdl();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt* temp = vrt_mdl_;
  vrt_mdl_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_vrt_mdl(::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt* vrt_mdl) {
  delete vrt_mdl_;
  vrt_mdl_ = vrt_mdl;
  if (vrt_mdl) {
    set_has_vrt_mdl();
  } else {
    clear_has_vrt_mdl();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.vrt_mdl)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.CrImg cr_img = 24;
bool QInfo_Statistic::has_cr_img() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void QInfo_Statistic::set_has_cr_img() {
  _has_bits_[0] |= 0x00400000u;
}
void QInfo_Statistic::clear_has_cr_img() {
  _has_bits_[0] &= ~0x00400000u;
}
void QInfo_Statistic::clear_cr_img() {
  if (cr_img_ != NULL) cr_img_->::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg::Clear();
  clear_has_cr_img();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg& QInfo_Statistic::cr_img() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg* p = cr_img_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_img)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_CrImg_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg* QInfo_Statistic::mutable_cr_img() {
  set_has_cr_img();
  if (cr_img_ == NULL) {
    cr_img_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_img)
  return cr_img_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg* QInfo_Statistic::release_cr_img() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.cr_img)
  clear_has_cr_img();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg* temp = cr_img_;
  cr_img_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_cr_img(::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg* cr_img) {
  delete cr_img_;
  cr_img_ = cr_img;
  if (cr_img) {
    set_has_cr_img();
  } else {
    clear_has_cr_img();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.cr_img)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_y = 25;
bool QInfo_Statistic::has_al_img_y() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void QInfo_Statistic::set_has_al_img_y() {
  _has_bits_[0] |= 0x00800000u;
}
void QInfo_Statistic::clear_has_al_img_y() {
  _has_bits_[0] &= ~0x00800000u;
}
void QInfo_Statistic::clear_al_img_y() {
  if (al_img_y_ != NULL) al_img_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg::Clear();
  clear_has_al_img_y();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg& QInfo_Statistic::al_img_y() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* p = al_img_y_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_y)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_AlImg_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* QInfo_Statistic::mutable_al_img_y() {
  set_has_al_img_y();
  if (al_img_y_ == NULL) {
    al_img_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_y)
  return al_img_y_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* QInfo_Statistic::release_al_img_y() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_y)
  clear_has_al_img_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* temp = al_img_y_;
  al_img_y_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_al_img_y(::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* al_img_y) {
  delete al_img_y_;
  al_img_y_ = al_img_y;
  if (al_img_y) {
    set_has_al_img_y();
  } else {
    clear_has_al_img_y();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_y)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_g = 26;
bool QInfo_Statistic::has_al_img_g() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void QInfo_Statistic::set_has_al_img_g() {
  _has_bits_[0] |= 0x01000000u;
}
void QInfo_Statistic::clear_has_al_img_g() {
  _has_bits_[0] &= ~0x01000000u;
}
void QInfo_Statistic::clear_al_img_g() {
  if (al_img_g_ != NULL) al_img_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg::Clear();
  clear_has_al_img_g();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg& QInfo_Statistic::al_img_g() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* p = al_img_g_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_g)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_AlImg_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* QInfo_Statistic::mutable_al_img_g() {
  set_has_al_img_g();
  if (al_img_g_ == NULL) {
    al_img_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_g)
  return al_img_g_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* QInfo_Statistic::release_al_img_g() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_g)
  clear_has_al_img_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* temp = al_img_g_;
  al_img_g_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_al_img_g(::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* al_img_g) {
  delete al_img_g_;
  al_img_g_ = al_img_g;
  if (al_img_g) {
    set_has_al_img_g();
  } else {
    clear_has_al_img_g();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_g)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_gmx = 27;
bool QInfo_Statistic::has_al_img_gmx() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void QInfo_Statistic::set_has_al_img_gmx() {
  _has_bits_[0] |= 0x02000000u;
}
void QInfo_Statistic::clear_has_al_img_gmx() {
  _has_bits_[0] &= ~0x02000000u;
}
void QInfo_Statistic::clear_al_img_gmx() {
  if (al_img_gmx_ != NULL) al_img_gmx_->::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg::Clear();
  clear_has_al_img_gmx();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg& QInfo_Statistic::al_img_gmx() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* p = al_img_gmx_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_gmx)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_AlImg_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* QInfo_Statistic::mutable_al_img_gmx() {
  set_has_al_img_gmx();
  if (al_img_gmx_ == NULL) {
    al_img_gmx_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_gmx)
  return al_img_gmx_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* QInfo_Statistic::release_al_img_gmx() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_gmx)
  clear_has_al_img_gmx();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* temp = al_img_gmx_;
  al_img_gmx_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_al_img_gmx(::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* al_img_gmx) {
  delete al_img_gmx_;
  al_img_gmx_ = al_img_gmx;
  if (al_img_gmx) {
    set_has_al_img_gmx();
  } else {
    clear_has_al_img_gmx();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_gmx)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp essr_exp_y = 28;
bool QInfo_Statistic::has_essr_exp_y() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void QInfo_Statistic::set_has_essr_exp_y() {
  _has_bits_[0] |= 0x04000000u;
}
void QInfo_Statistic::clear_has_essr_exp_y() {
  _has_bits_[0] &= ~0x04000000u;
}
void QInfo_Statistic::clear_essr_exp_y() {
  if (essr_exp_y_ != NULL) essr_exp_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp::Clear();
  clear_has_essr_exp_y();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp& QInfo_Statistic::essr_exp_y() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* p = essr_exp_y_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.essr_exp_y)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_ESSRexp_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* QInfo_Statistic::mutable_essr_exp_y() {
  set_has_essr_exp_y();
  if (essr_exp_y_ == NULL) {
    essr_exp_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.essr_exp_y)
  return essr_exp_y_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* QInfo_Statistic::release_essr_exp_y() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.essr_exp_y)
  clear_has_essr_exp_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* temp = essr_exp_y_;
  essr_exp_y_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_essr_exp_y(::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* essr_exp_y) {
  delete essr_exp_y_;
  essr_exp_y_ = essr_exp_y;
  if (essr_exp_y) {
    set_has_essr_exp_y();
  } else {
    clear_has_essr_exp_y();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.essr_exp_y)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp essr_exp_g = 29;
bool QInfo_Statistic::has_essr_exp_g() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void QInfo_Statistic::set_has_essr_exp_g() {
  _has_bits_[0] |= 0x08000000u;
}
void QInfo_Statistic::clear_has_essr_exp_g() {
  _has_bits_[0] &= ~0x08000000u;
}
void QInfo_Statistic::clear_essr_exp_g() {
  if (essr_exp_g_ != NULL) essr_exp_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp::Clear();
  clear_has_essr_exp_g();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp& QInfo_Statistic::essr_exp_g() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* p = essr_exp_g_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.essr_exp_g)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_ESSRexp_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* QInfo_Statistic::mutable_essr_exp_g() {
  set_has_essr_exp_g();
  if (essr_exp_g_ == NULL) {
    essr_exp_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.essr_exp_g)
  return essr_exp_g_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* QInfo_Statistic::release_essr_exp_g() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.essr_exp_g)
  clear_has_essr_exp_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* temp = essr_exp_g_;
  essr_exp_g_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_essr_exp_g(::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* essr_exp_g) {
  delete essr_exp_g_;
  essr_exp_g_ = essr_exp_g;
  if (essr_exp_g) {
    set_has_essr_exp_g();
  } else {
    clear_has_essr_exp_g();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.essr_exp_g)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Freq freq_m_3y = 30;
bool QInfo_Statistic::has_freq_m_3y() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void QInfo_Statistic::set_has_freq_m_3y() {
  _has_bits_[0] |= 0x10000000u;
}
void QInfo_Statistic::clear_has_freq_m_3y() {
  _has_bits_[0] &= ~0x10000000u;
}
void QInfo_Statistic::clear_freq_m_3y() {
  if (freq_m_3y_ != NULL) freq_m_3y_->::ru::mail::go::webbase::serp::QInfo_Statistic_Freq::Clear();
  clear_has_freq_m_3y();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq& QInfo_Statistic::freq_m_3y() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq* p = freq_m_3y_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.freq_m_3y)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Freq_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Freq* QInfo_Statistic::mutable_freq_m_3y() {
  set_has_freq_m_3y();
  if (freq_m_3y_ == NULL) {
    freq_m_3y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.freq_m_3y)
  return freq_m_3y_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Freq* QInfo_Statistic::release_freq_m_3y() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.freq_m_3y)
  clear_has_freq_m_3y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq* temp = freq_m_3y_;
  freq_m_3y_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_freq_m_3y(::ru::mail::go::webbase::serp::QInfo_Statistic_Freq* freq_m_3y) {
  delete freq_m_3y_;
  freq_m_3y_ = freq_m_3y;
  if (freq_m_3y) {
    set_has_freq_m_3y();
  } else {
    clear_has_freq_m_3y();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.freq_m_3y)
}

// repeated .ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin cr_m_mixins = 31;
int QInfo_Statistic::cr_m_mixins_size() const {
  return cr_m_mixins_.size();
}
void QInfo_Statistic::clear_cr_m_mixins() {
  cr_m_mixins_.Clear();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin& QInfo_Statistic::cr_m_mixins(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mixins)
  return cr_m_mixins_.Get(index);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin* QInfo_Statistic::mutable_cr_m_mixins(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mixins)
  return cr_m_mixins_.Mutable(index);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin* QInfo_Statistic::add_cr_m_mixins() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mixins)
  return cr_m_mixins_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin >*
QInfo_Statistic::mutable_cr_m_mixins() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mixins)
  return &cr_m_mixins_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin >&
QInfo_Statistic::cr_m_mixins() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mixins)
  return cr_m_mixins_;
}

// repeated .ru.mail.go.webbase.serp.QInfo.Statistic.Intent int_m = 32;
int QInfo_Statistic::int_m_size() const {
  return int_m_.size();
}
void QInfo_Statistic::clear_int_m() {
  int_m_.Clear();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent& QInfo_Statistic::int_m(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.int_m)
  return int_m_.Get(index);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Intent* QInfo_Statistic::mutable_int_m(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.int_m)
  return int_m_.Mutable(index);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Intent* QInfo_Statistic::add_int_m() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QInfo.Statistic.int_m)
  return int_m_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent >*
QInfo_Statistic::mutable_int_m() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QInfo.Statistic.int_m)
  return &int_m_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent >&
QInfo_Statistic::int_m() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QInfo.Statistic.int_m)
  return int_m_;
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo cr_vdo = 33;
bool QInfo_Statistic::has_cr_vdo() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void QInfo_Statistic::set_has_cr_vdo() {
  _has_bits_[0] |= 0x20000000u;
}
void QInfo_Statistic::clear_has_cr_vdo() {
  _has_bits_[0] &= ~0x20000000u;
}
void QInfo_Statistic::clear_cr_vdo() {
  if (cr_vdo_ != NULL) cr_vdo_->::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo::Clear();
  clear_has_cr_vdo();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo& QInfo_Statistic::cr_vdo() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo* p = cr_vdo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_vdo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_CrVdo_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo* QInfo_Statistic::mutable_cr_vdo() {
  set_has_cr_vdo();
  if (cr_vdo_ == NULL) {
    cr_vdo_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_vdo)
  return cr_vdo_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo* QInfo_Statistic::release_cr_vdo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.cr_vdo)
  clear_has_cr_vdo();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo* temp = cr_vdo_;
  cr_vdo_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_cr_vdo(::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo* cr_vdo) {
  delete cr_vdo_;
  cr_vdo_ = cr_vdo;
  if (cr_vdo) {
    set_has_cr_vdo();
  } else {
    clear_has_cr_vdo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.cr_vdo)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_m_mob = 34;
bool QInfo_Statistic::has_cr_m_mob() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void QInfo_Statistic::set_has_cr_m_mob() {
  _has_bits_[0] |= 0x40000000u;
}
void QInfo_Statistic::clear_has_cr_m_mob() {
  _has_bits_[0] &= ~0x40000000u;
}
void QInfo_Statistic::clear_cr_m_mob() {
  if (cr_m_mob_ != NULL) cr_m_mob_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
  clear_has_cr_m_mob();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& QInfo_Statistic::cr_m_mob() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* p = cr_m_mob_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Cr_default_instance_);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::mutable_cr_m_mob() {
  set_has_cr_m_mob();
  if (cr_m_mob_ == NULL) {
    cr_m_mob_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob)
  return cr_m_mob_;
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::release_cr_m_mob() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob)
  clear_has_cr_m_mob();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* temp = cr_m_mob_;
  cr_m_mob_ = NULL;
  return temp;
}
void QInfo_Statistic::set_allocated_cr_m_mob(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_m_mob) {
  delete cr_m_mob_;
  cr_m_mob_ = cr_m_mob;
  if (cr_m_mob) {
    set_has_cr_m_mob();
  } else {
    clear_has_cr_m_mob();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob)
}

// repeated .ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin cr_m_mob_mixins = 35;
int QInfo_Statistic::cr_m_mob_mixins_size() const {
  return cr_m_mob_mixins_.size();
}
void QInfo_Statistic::clear_cr_m_mob_mixins() {
  cr_m_mob_mixins_.Clear();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin& QInfo_Statistic::cr_m_mob_mixins(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob_mixins)
  return cr_m_mob_mixins_.Get(index);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin* QInfo_Statistic::mutable_cr_m_mob_mixins(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob_mixins)
  return cr_m_mob_mixins_.Mutable(index);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin* QInfo_Statistic::add_cr_m_mob_mixins() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob_mixins)
  return cr_m_mob_mixins_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin >*
QInfo_Statistic::mutable_cr_m_mob_mixins() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob_mixins)
  return &cr_m_mob_mixins_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin >&
QInfo_Statistic::cr_m_mob_mixins() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob_mixins)
  return cr_m_mob_mixins_;
}

// repeated .ru.mail.go.webbase.serp.QInfo.Statistic.Intent int_m_mob = 36;
int QInfo_Statistic::int_m_mob_size() const {
  return int_m_mob_.size();
}
void QInfo_Statistic::clear_int_m_mob() {
  int_m_mob_.Clear();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent& QInfo_Statistic::int_m_mob(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.int_m_mob)
  return int_m_mob_.Get(index);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Intent* QInfo_Statistic::mutable_int_m_mob(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.int_m_mob)
  return int_m_mob_.Mutable(index);
}
::ru::mail::go::webbase::serp::QInfo_Statistic_Intent* QInfo_Statistic::add_int_m_mob() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QInfo.Statistic.int_m_mob)
  return int_m_mob_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent >*
QInfo_Statistic::mutable_int_m_mob() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QInfo.Statistic.int_m_mob)
  return &int_m_mob_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent >&
QInfo_Statistic::int_m_mob() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QInfo.Statistic.int_m_mob)
  return int_m_mob_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QInfo::kQueryTextFieldNumber;
const int QInfo::kStatFieldNumber;
const int QInfo::kIsGeoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QInfo::QInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qinformer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QInfo)
}
QInfo::QInfo(const QInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stat_(from.stat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_text()) {
    query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
  }
  is_geo_ = from.is_geo_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QInfo)
}

void QInfo::SharedCtor() {
  _cached_size_ = 0;
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_geo_ = false;
}

QInfo::~QInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QInfo)
  SharedDtor();
}

void QInfo::SharedDtor() {
  query_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QInfo::descriptor() {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QInfo& QInfo::default_instance() {
  protobuf_qinformer_2eproto::InitDefaults();
  return *internal_default_instance();
}

QInfo* QInfo::New(::google::protobuf::Arena* arena) const {
  QInfo* n = new QInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_.Clear();
  if (has_query_text()) {
    GOOGLE_DCHECK(!query_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*query_text_.UnsafeRawStringPointer())->clear();
  }
  is_geo_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_text().data(), static_cast<int>(this->query_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.serp.QInfo.query_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.serp.QInfo.Statistic stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_geo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_geo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_geo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QInfo)
  return false;
#undef DO_
}

void QInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.serp.QInfo.query_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query_text(), output);
  }

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic stat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stat(static_cast<int>(i)), output);
  }

  // optional bool is_geo = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_geo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QInfo)
}

::google::protobuf::uint8* QInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.serp.QInfo.query_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query_text(), target);
  }

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic stat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stat(static_cast<int>(i)), deterministic, target);
  }

  // optional bool is_geo = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_geo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QInfo)
  return target;
}

size_t QInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic stat = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stat(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string query_text = 1;
    if (has_query_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_text());
    }

    // optional bool is_geo = 3;
    if (has_is_geo()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QInfo)
    MergeFrom(*source);
  }
}

void QInfo::MergeFrom(const QInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_.MergeFrom(from.stat_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query_text();
      query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_geo_ = from.is_geo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QInfo::CopyFrom(const QInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->stat())) return false;
  return true;
}

void QInfo::Swap(QInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QInfo::InternalSwap(QInfo* other) {
  using std::swap;
  stat_.InternalSwap(&other->stat_);
  query_text_.Swap(&other->query_text_);
  swap(is_geo_, other->is_geo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QInfo::GetMetadata() const {
  protobuf_qinformer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qinformer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QInfo

// optional string query_text = 1;
bool QInfo::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QInfo::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
void QInfo::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void QInfo::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
const ::std::string& QInfo::query_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.query_text)
  return query_text_.GetNoArena();
}
void QInfo::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.query_text)
}
#if LANG_CXX11
void QInfo::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.serp.QInfo.query_text)
}
#endif
void QInfo::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.serp.QInfo.query_text)
}
void QInfo::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.serp.QInfo.query_text)
}
::std::string* QInfo::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QInfo::release_query_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QInfo::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.query_text)
}

// repeated .ru.mail.go.webbase.serp.QInfo.Statistic stat = 2;
int QInfo::stat_size() const {
  return stat_.size();
}
void QInfo::clear_stat() {
  stat_.Clear();
}
const ::ru::mail::go::webbase::serp::QInfo_Statistic& QInfo::stat(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.stat)
  return stat_.Get(index);
}
::ru::mail::go::webbase::serp::QInfo_Statistic* QInfo::mutable_stat(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.stat)
  return stat_.Mutable(index);
}
::ru::mail::go::webbase::serp::QInfo_Statistic* QInfo::add_stat() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QInfo.stat)
  return stat_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic >*
QInfo::mutable_stat() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QInfo.stat)
  return &stat_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic >&
QInfo::stat() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QInfo.stat)
  return stat_;
}

// optional bool is_geo = 3;
bool QInfo::has_is_geo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QInfo::set_has_is_geo() {
  _has_bits_[0] |= 0x00000002u;
}
void QInfo::clear_has_is_geo() {
  _has_bits_[0] &= ~0x00000002u;
}
void QInfo::clear_is_geo() {
  is_geo_ = false;
  clear_has_is_geo();
}
bool QInfo::is_geo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.is_geo)
  return is_geo_;
}
void QInfo::set_is_geo(bool value) {
  set_has_is_geo();
  is_geo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.is_geo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serp
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
