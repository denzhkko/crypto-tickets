// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qinformer.proto

#ifndef PROTOBUF_qinformer_2eproto__INCLUDED
#define PROTOBUF_qinformer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace serp {
class QInfo;
class QInfoDefaultTypeInternal;
extern QInfoDefaultTypeInternal _QInfo_default_instance_;
class QInfo_Statistic;
class QInfo_StatisticDefaultTypeInternal;
extern QInfo_StatisticDefaultTypeInternal _QInfo_Statistic_default_instance_;
class QInfo_Statistic_Al;
class QInfo_Statistic_AlDefaultTypeInternal;
extern QInfo_Statistic_AlDefaultTypeInternal _QInfo_Statistic_Al_default_instance_;
class QInfo_Statistic_AlImg;
class QInfo_Statistic_AlImgDefaultTypeInternal;
extern QInfo_Statistic_AlImgDefaultTypeInternal _QInfo_Statistic_AlImg_default_instance_;
class QInfo_Statistic_Br;
class QInfo_Statistic_BrDefaultTypeInternal;
extern QInfo_Statistic_BrDefaultTypeInternal _QInfo_Statistic_Br_default_instance_;
class QInfo_Statistic_Cr;
class QInfo_Statistic_CrDefaultTypeInternal;
extern QInfo_Statistic_CrDefaultTypeInternal _QInfo_Statistic_Cr_default_instance_;
class QInfo_Statistic_CrImg;
class QInfo_Statistic_CrImgDefaultTypeInternal;
extern QInfo_Statistic_CrImgDefaultTypeInternal _QInfo_Statistic_CrImg_default_instance_;
class QInfo_Statistic_CrMixin;
class QInfo_Statistic_CrMixinDefaultTypeInternal;
extern QInfo_Statistic_CrMixinDefaultTypeInternal _QInfo_Statistic_CrMixin_default_instance_;
class QInfo_Statistic_CrVdo;
class QInfo_Statistic_CrVdoDefaultTypeInternal;
extern QInfo_Statistic_CrVdoDefaultTypeInternal _QInfo_Statistic_CrVdo_default_instance_;
class QInfo_Statistic_ESSRexp;
class QInfo_Statistic_ESSRexpDefaultTypeInternal;
extern QInfo_Statistic_ESSRexpDefaultTypeInternal _QInfo_Statistic_ESSRexp_default_instance_;
class QInfo_Statistic_Freq;
class QInfo_Statistic_FreqDefaultTypeInternal;
extern QInfo_Statistic_FreqDefaultTypeInternal _QInfo_Statistic_Freq_default_instance_;
class QInfo_Statistic_Intent;
class QInfo_Statistic_IntentDefaultTypeInternal;
extern QInfo_Statistic_IntentDefaultTypeInternal _QInfo_Statistic_Intent_default_instance_;
class QInfo_Statistic_Nal;
class QInfo_Statistic_NalDefaultTypeInternal;
extern QInfo_Statistic_NalDefaultTypeInternal _QInfo_Statistic_Nal_default_instance_;
class QInfo_Statistic_Nvg;
class QInfo_Statistic_NvgDefaultTypeInternal;
extern QInfo_Statistic_NvgDefaultTypeInternal _QInfo_Statistic_Nvg_default_instance_;
class QInfo_Statistic_Sr;
class QInfo_Statistic_SrDefaultTypeInternal;
extern QInfo_Statistic_SrDefaultTypeInternal _QInfo_Statistic_Sr_default_instance_;
class QInfo_Statistic_UrlInfo;
class QInfo_Statistic_UrlInfoDefaultTypeInternal;
extern QInfo_Statistic_UrlInfoDefaultTypeInternal _QInfo_Statistic_UrlInfo_default_instance_;
class QInfo_Statistic_Vrt;
class QInfo_Statistic_VrtDefaultTypeInternal;
extern QInfo_Statistic_VrtDefaultTypeInternal _QInfo_Statistic_Vrt_default_instance_;
class QInfo_Statistic_VrtInfo;
class QInfo_Statistic_VrtInfoDefaultTypeInternal;
extern QInfo_Statistic_VrtInfoDefaultTypeInternal _QInfo_Statistic_VrtInfo_default_instance_;
}  // namespace serp
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace serp {

namespace protobuf_qinformer_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_qinformer_2eproto

// ===================================================================

class QInfo_Statistic_Al : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic.Al) */ {
 public:
  QInfo_Statistic_Al();
  virtual ~QInfo_Statistic_Al();

  QInfo_Statistic_Al(const QInfo_Statistic_Al& from);

  inline QInfo_Statistic_Al& operator=(const QInfo_Statistic_Al& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic_Al(QInfo_Statistic_Al&& from) noexcept
    : QInfo_Statistic_Al() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic_Al& operator=(QInfo_Statistic_Al&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic_Al& default_instance();

  static inline const QInfo_Statistic_Al* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic_Al*>(
               &_QInfo_Statistic_Al_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(QInfo_Statistic_Al* other);
  friend void swap(QInfo_Statistic_Al& a, QInfo_Statistic_Al& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic_Al* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic_Al* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic_Al& from);
  void MergeFrom(const QInfo_Statistic_Al& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic_Al* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sessions = 1;
  bool has_sessions() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  ::google::protobuf::uint32 sessions() const;
  void set_sessions(::google::protobuf::uint32 value);

  // optional bool navig = 4;
  bool has_navig() const;
  void clear_navig();
  static const int kNavigFieldNumber = 4;
  bool navig() const;
  void set_navig(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic.Al)
 private:
  void set_has_sessions();
  void clear_has_sessions();
  void set_has_navig();
  void clear_has_navig();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 sessions_;
  bool navig_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo_Statistic_Cr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic.Cr) */ {
 public:
  QInfo_Statistic_Cr();
  virtual ~QInfo_Statistic_Cr();

  QInfo_Statistic_Cr(const QInfo_Statistic_Cr& from);

  inline QInfo_Statistic_Cr& operator=(const QInfo_Statistic_Cr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic_Cr(QInfo_Statistic_Cr&& from) noexcept
    : QInfo_Statistic_Cr() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic_Cr& operator=(QInfo_Statistic_Cr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic_Cr& default_instance();

  static inline const QInfo_Statistic_Cr* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic_Cr*>(
               &_QInfo_Statistic_Cr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(QInfo_Statistic_Cr* other);
  friend void swap(QInfo_Statistic_Cr& a, QInfo_Statistic_Cr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic_Cr* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic_Cr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic_Cr& from);
  void MergeFrom(const QInfo_Statistic_Cr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic_Cr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sessions = 1;
  bool has_sessions() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  ::google::protobuf::uint32 sessions() const;
  void set_sessions(::google::protobuf::uint32 value);

  // optional bool navig = 2;
  bool has_navig() const;
  void clear_navig();
  static const int kNavigFieldNumber = 2;
  bool navig() const;
  void set_navig(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic.Cr)
 private:
  void set_has_sessions();
  void clear_has_sessions();
  void set_has_navig();
  void clear_has_navig();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 sessions_;
  bool navig_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo_Statistic_Sr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic.Sr) */ {
 public:
  QInfo_Statistic_Sr();
  virtual ~QInfo_Statistic_Sr();

  QInfo_Statistic_Sr(const QInfo_Statistic_Sr& from);

  inline QInfo_Statistic_Sr& operator=(const QInfo_Statistic_Sr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic_Sr(QInfo_Statistic_Sr&& from) noexcept
    : QInfo_Statistic_Sr() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic_Sr& operator=(QInfo_Statistic_Sr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic_Sr& default_instance();

  static inline const QInfo_Statistic_Sr* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic_Sr*>(
               &_QInfo_Statistic_Sr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(QInfo_Statistic_Sr* other);
  friend void swap(QInfo_Statistic_Sr& a, QInfo_Statistic_Sr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic_Sr* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic_Sr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic_Sr& from);
  void MergeFrom(const QInfo_Statistic_Sr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic_Sr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sessions = 1;
  bool has_sessions() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  ::google::protobuf::uint32 sessions() const;
  void set_sessions(::google::protobuf::uint32 value);

  // optional uint32 urls = 2;
  bool has_urls() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 2;
  ::google::protobuf::uint32 urls() const;
  void set_urls(::google::protobuf::uint32 value);

  // optional uint32 users = 3;
  bool has_users() const;
  void clear_users();
  static const int kUsersFieldNumber = 3;
  ::google::protobuf::uint32 users() const;
  void set_users(::google::protobuf::uint32 value);

  // optional bool navig = 4;
  bool has_navig() const;
  void clear_navig();
  static const int kNavigFieldNumber = 4;
  bool navig() const;
  void set_navig(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic.Sr)
 private:
  void set_has_sessions();
  void clear_has_sessions();
  void set_has_urls();
  void clear_has_urls();
  void set_has_users();
  void clear_has_users();
  void set_has_navig();
  void clear_has_navig();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 sessions_;
  ::google::protobuf::uint32 urls_;
  ::google::protobuf::uint32 users_;
  bool navig_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo_Statistic_Br : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic.Br) */ {
 public:
  QInfo_Statistic_Br();
  virtual ~QInfo_Statistic_Br();

  QInfo_Statistic_Br(const QInfo_Statistic_Br& from);

  inline QInfo_Statistic_Br& operator=(const QInfo_Statistic_Br& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic_Br(QInfo_Statistic_Br&& from) noexcept
    : QInfo_Statistic_Br() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic_Br& operator=(QInfo_Statistic_Br&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic_Br& default_instance();

  static inline const QInfo_Statistic_Br* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic_Br*>(
               &_QInfo_Statistic_Br_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(QInfo_Statistic_Br* other);
  friend void swap(QInfo_Statistic_Br& a, QInfo_Statistic_Br& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic_Br* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic_Br* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic_Br& from);
  void MergeFrom(const QInfo_Statistic_Br& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic_Br* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sessions = 1;
  bool has_sessions() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  ::google::protobuf::uint32 sessions() const;
  void set_sessions(::google::protobuf::uint32 value);

  // optional float navig_quality = 2;
  bool has_navig_quality() const;
  void clear_navig_quality();
  static const int kNavigQualityFieldNumber = 2;
  float navig_quality() const;
  void set_navig_quality(float value);

  // optional bool navig = 3;
  bool has_navig() const;
  void clear_navig();
  static const int kNavigFieldNumber = 3;
  bool navig() const;
  void set_navig(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic.Br)
 private:
  void set_has_sessions();
  void clear_has_sessions();
  void set_has_navig_quality();
  void clear_has_navig_quality();
  void set_has_navig();
  void clear_has_navig();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 sessions_;
  float navig_quality_;
  bool navig_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo_Statistic_Nal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic.Nal) */ {
 public:
  QInfo_Statistic_Nal();
  virtual ~QInfo_Statistic_Nal();

  QInfo_Statistic_Nal(const QInfo_Statistic_Nal& from);

  inline QInfo_Statistic_Nal& operator=(const QInfo_Statistic_Nal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic_Nal(QInfo_Statistic_Nal&& from) noexcept
    : QInfo_Statistic_Nal() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic_Nal& operator=(QInfo_Statistic_Nal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic_Nal& default_instance();

  static inline const QInfo_Statistic_Nal* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic_Nal*>(
               &_QInfo_Statistic_Nal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(QInfo_Statistic_Nal* other);
  friend void swap(QInfo_Statistic_Nal& a, QInfo_Statistic_Nal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic_Nal* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic_Nal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic_Nal& from);
  void MergeFrom(const QInfo_Statistic_Nal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic_Nal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sessions = 1;
  bool has_sessions() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  ::google::protobuf::uint32 sessions() const;
  void set_sessions(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic.Nal)
 private:
  void set_has_sessions();
  void clear_has_sessions();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 sessions_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo_Statistic_UrlInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo) */ {
 public:
  QInfo_Statistic_UrlInfo();
  virtual ~QInfo_Statistic_UrlInfo();

  QInfo_Statistic_UrlInfo(const QInfo_Statistic_UrlInfo& from);

  inline QInfo_Statistic_UrlInfo& operator=(const QInfo_Statistic_UrlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic_UrlInfo(QInfo_Statistic_UrlInfo&& from) noexcept
    : QInfo_Statistic_UrlInfo() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic_UrlInfo& operator=(QInfo_Statistic_UrlInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic_UrlInfo& default_instance();

  static inline const QInfo_Statistic_UrlInfo* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic_UrlInfo*>(
               &_QInfo_Statistic_UrlInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(QInfo_Statistic_UrlInfo* other);
  friend void swap(QInfo_Statistic_UrlInfo& a, QInfo_Statistic_UrlInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic_UrlInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic_UrlInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic_UrlInfo& from);
  void MergeFrom(const QInfo_Statistic_UrlInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic_UrlInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional uint32 hash = 2;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  ::google::protobuf::uint32 hash() const;
  void set_hash(::google::protobuf::uint32 value);

  // optional int32 site = 3;
  bool has_site() const;
  void clear_site();
  static const int kSiteFieldNumber = 3;
  ::google::protobuf::int32 site() const;
  void set_site(::google::protobuf::int32 value);

  // optional float rank = 4;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 4;
  float rank() const;
  void set_rank(float value);

  // optional float crMix = 5;
  bool has_crmix() const;
  void clear_crmix();
  static const int kCrMixFieldNumber = 5;
  float crmix() const;
  void set_crmix(float value);

  // optional uint64 hash64 = 7;
  bool has_hash64() const;
  void clear_hash64();
  static const int kHash64FieldNumber = 7;
  ::google::protobuf::uint64 hash64() const;
  void set_hash64(::google::protobuf::uint64 value);

  // optional uint64 normalized_hash = 8;
  bool has_normalized_hash() const;
  void clear_normalized_hash();
  static const int kNormalizedHashFieldNumber = 8;
  ::google::protobuf::uint64 normalized_hash() const;
  void set_normalized_hash(::google::protobuf::uint64 value);

  // optional float crM = 6;
  bool has_crm() const;
  void clear_crm();
  static const int kCrMFieldNumber = 6;
  float crm() const;
  void set_crm(float value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_hash();
  void clear_has_hash();
  void set_has_site();
  void clear_has_site();
  void set_has_rank();
  void clear_has_rank();
  void set_has_crmix();
  void clear_has_crmix();
  void set_has_crm();
  void clear_has_crm();
  void set_has_hash64();
  void clear_has_hash64();
  void set_has_normalized_hash();
  void clear_has_normalized_hash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint32 hash_;
  ::google::protobuf::int32 site_;
  float rank_;
  float crmix_;
  ::google::protobuf::uint64 hash64_;
  ::google::protobuf::uint64 normalized_hash_;
  float crm_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo_Statistic_Nvg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg) */ {
 public:
  QInfo_Statistic_Nvg();
  virtual ~QInfo_Statistic_Nvg();

  QInfo_Statistic_Nvg(const QInfo_Statistic_Nvg& from);

  inline QInfo_Statistic_Nvg& operator=(const QInfo_Statistic_Nvg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic_Nvg(QInfo_Statistic_Nvg&& from) noexcept
    : QInfo_Statistic_Nvg() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic_Nvg& operator=(QInfo_Statistic_Nvg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic_Nvg& default_instance();

  static inline const QInfo_Statistic_Nvg* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic_Nvg*>(
               &_QInfo_Statistic_Nvg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(QInfo_Statistic_Nvg* other);
  friend void swap(QInfo_Statistic_Nvg& a, QInfo_Statistic_Nvg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic_Nvg* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic_Nvg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic_Nvg& from);
  void MergeFrom(const QInfo_Statistic_Nvg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic_Nvg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo urls = 2;
  int urls_size() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 2;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_UrlInfo& urls(int index) const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_UrlInfo* mutable_urls(int index);
  ::ru::mail::go::webbase::serp::QInfo_Statistic_UrlInfo* add_urls();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_UrlInfo >*
      mutable_urls();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_UrlInfo >&
      urls() const;

  // optional float prob = 1;
  bool has_prob() const;
  void clear_prob();
  static const int kProbFieldNumber = 1;
  float prob() const;
  void set_prob(float value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg)
 private:
  void set_has_prob();
  void clear_has_prob();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_UrlInfo > urls_;
  float prob_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo_Statistic_VrtInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo) */ {
 public:
  QInfo_Statistic_VrtInfo();
  virtual ~QInfo_Statistic_VrtInfo();

  QInfo_Statistic_VrtInfo(const QInfo_Statistic_VrtInfo& from);

  inline QInfo_Statistic_VrtInfo& operator=(const QInfo_Statistic_VrtInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic_VrtInfo(QInfo_Statistic_VrtInfo&& from) noexcept
    : QInfo_Statistic_VrtInfo() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic_VrtInfo& operator=(QInfo_Statistic_VrtInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic_VrtInfo& default_instance();

  static inline const QInfo_Statistic_VrtInfo* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic_VrtInfo*>(
               &_QInfo_Statistic_VrtInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(QInfo_Statistic_VrtInfo* other);
  friend void swap(QInfo_Statistic_VrtInfo& a, QInfo_Statistic_VrtInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic_VrtInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic_VrtInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic_VrtInfo& from);
  void MergeFrom(const QInfo_Statistic_VrtInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic_VrtInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional float rank = 2;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 2;
  float rank() const;
  void set_rank(float value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_rank();
  void clear_has_rank();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float rank_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo_Statistic_Vrt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt) */ {
 public:
  QInfo_Statistic_Vrt();
  virtual ~QInfo_Statistic_Vrt();

  QInfo_Statistic_Vrt(const QInfo_Statistic_Vrt& from);

  inline QInfo_Statistic_Vrt& operator=(const QInfo_Statistic_Vrt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic_Vrt(QInfo_Statistic_Vrt&& from) noexcept
    : QInfo_Statistic_Vrt() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic_Vrt& operator=(QInfo_Statistic_Vrt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic_Vrt& default_instance();

  static inline const QInfo_Statistic_Vrt* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic_Vrt*>(
               &_QInfo_Statistic_Vrt_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(QInfo_Statistic_Vrt* other);
  friend void swap(QInfo_Statistic_Vrt& a, QInfo_Statistic_Vrt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic_Vrt* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic_Vrt* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic_Vrt& from);
  void MergeFrom(const QInfo_Statistic_Vrt& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic_Vrt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo vrts = 1;
  int vrts_size() const;
  void clear_vrts();
  static const int kVrtsFieldNumber = 1;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_VrtInfo& vrts(int index) const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_VrtInfo* mutable_vrts(int index);
  ::ru::mail::go::webbase::serp::QInfo_Statistic_VrtInfo* add_vrts();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_VrtInfo >*
      mutable_vrts();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_VrtInfo >&
      vrts() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_VrtInfo > vrts_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo_Statistic_AlImg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg) */ {
 public:
  QInfo_Statistic_AlImg();
  virtual ~QInfo_Statistic_AlImg();

  QInfo_Statistic_AlImg(const QInfo_Statistic_AlImg& from);

  inline QInfo_Statistic_AlImg& operator=(const QInfo_Statistic_AlImg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic_AlImg(QInfo_Statistic_AlImg&& from) noexcept
    : QInfo_Statistic_AlImg() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic_AlImg& operator=(QInfo_Statistic_AlImg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic_AlImg& default_instance();

  static inline const QInfo_Statistic_AlImg* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic_AlImg*>(
               &_QInfo_Statistic_AlImg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(QInfo_Statistic_AlImg* other);
  friend void swap(QInfo_Statistic_AlImg& a, QInfo_Statistic_AlImg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic_AlImg* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic_AlImg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic_AlImg& from);
  void MergeFrom(const QInfo_Statistic_AlImg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic_AlImg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sessions = 1;
  bool has_sessions() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  ::google::protobuf::uint32 sessions() const;
  void set_sessions(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg)
 private:
  void set_has_sessions();
  void clear_has_sessions();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 sessions_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo_Statistic_CrImg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg) */ {
 public:
  QInfo_Statistic_CrImg();
  virtual ~QInfo_Statistic_CrImg();

  QInfo_Statistic_CrImg(const QInfo_Statistic_CrImg& from);

  inline QInfo_Statistic_CrImg& operator=(const QInfo_Statistic_CrImg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic_CrImg(QInfo_Statistic_CrImg&& from) noexcept
    : QInfo_Statistic_CrImg() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic_CrImg& operator=(QInfo_Statistic_CrImg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic_CrImg& default_instance();

  static inline const QInfo_Statistic_CrImg* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic_CrImg*>(
               &_QInfo_Statistic_CrImg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(QInfo_Statistic_CrImg* other);
  friend void swap(QInfo_Statistic_CrImg& a, QInfo_Statistic_CrImg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic_CrImg* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic_CrImg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic_CrImg& from);
  void MergeFrom(const QInfo_Statistic_CrImg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic_CrImg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sessions = 1;
  bool has_sessions() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  ::google::protobuf::uint32 sessions() const;
  void set_sessions(::google::protobuf::uint32 value);

  // optional uint32 clicks = 2;
  bool has_clicks() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 2;
  ::google::protobuf::uint32 clicks() const;
  void set_clicks(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg)
 private:
  void set_has_sessions();
  void clear_has_sessions();
  void set_has_clicks();
  void clear_has_clicks();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 sessions_;
  ::google::protobuf::uint32 clicks_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo_Statistic_CrVdo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo) */ {
 public:
  QInfo_Statistic_CrVdo();
  virtual ~QInfo_Statistic_CrVdo();

  QInfo_Statistic_CrVdo(const QInfo_Statistic_CrVdo& from);

  inline QInfo_Statistic_CrVdo& operator=(const QInfo_Statistic_CrVdo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic_CrVdo(QInfo_Statistic_CrVdo&& from) noexcept
    : QInfo_Statistic_CrVdo() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic_CrVdo& operator=(QInfo_Statistic_CrVdo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic_CrVdo& default_instance();

  static inline const QInfo_Statistic_CrVdo* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic_CrVdo*>(
               &_QInfo_Statistic_CrVdo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(QInfo_Statistic_CrVdo* other);
  friend void swap(QInfo_Statistic_CrVdo& a, QInfo_Statistic_CrVdo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic_CrVdo* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic_CrVdo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic_CrVdo& from);
  void MergeFrom(const QInfo_Statistic_CrVdo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic_CrVdo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sessions = 1;
  bool has_sessions() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  ::google::protobuf::uint32 sessions() const;
  void set_sessions(::google::protobuf::uint32 value);

  // optional uint32 clicks = 2;
  bool has_clicks() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 2;
  ::google::protobuf::uint32 clicks() const;
  void set_clicks(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo)
 private:
  void set_has_sessions();
  void clear_has_sessions();
  void set_has_clicks();
  void clear_has_clicks();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 sessions_;
  ::google::protobuf::uint32 clicks_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo_Statistic_ESSRexp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp) */ {
 public:
  QInfo_Statistic_ESSRexp();
  virtual ~QInfo_Statistic_ESSRexp();

  QInfo_Statistic_ESSRexp(const QInfo_Statistic_ESSRexp& from);

  inline QInfo_Statistic_ESSRexp& operator=(const QInfo_Statistic_ESSRexp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic_ESSRexp(QInfo_Statistic_ESSRexp&& from) noexcept
    : QInfo_Statistic_ESSRexp() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic_ESSRexp& operator=(QInfo_Statistic_ESSRexp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic_ESSRexp& default_instance();

  static inline const QInfo_Statistic_ESSRexp* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic_ESSRexp*>(
               &_QInfo_Statistic_ESSRexp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(QInfo_Statistic_ESSRexp* other);
  friend void swap(QInfo_Statistic_ESSRexp& a, QInfo_Statistic_ESSRexp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic_ESSRexp* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic_ESSRexp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic_ESSRexp& from);
  void MergeFrom(const QInfo_Statistic_ESSRexp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic_ESSRexp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sessions = 1;
  bool has_sessions() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  ::google::protobuf::uint32 sessions() const;
  void set_sessions(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp)
 private:
  void set_has_sessions();
  void clear_has_sessions();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 sessions_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo_Statistic_Freq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic.Freq) */ {
 public:
  QInfo_Statistic_Freq();
  virtual ~QInfo_Statistic_Freq();

  QInfo_Statistic_Freq(const QInfo_Statistic_Freq& from);

  inline QInfo_Statistic_Freq& operator=(const QInfo_Statistic_Freq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic_Freq(QInfo_Statistic_Freq&& from) noexcept
    : QInfo_Statistic_Freq() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic_Freq& operator=(QInfo_Statistic_Freq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic_Freq& default_instance();

  static inline const QInfo_Statistic_Freq* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic_Freq*>(
               &_QInfo_Statistic_Freq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(QInfo_Statistic_Freq* other);
  friend void swap(QInfo_Statistic_Freq& a, QInfo_Statistic_Freq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic_Freq* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic_Freq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic_Freq& from);
  void MergeFrom(const QInfo_Statistic_Freq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic_Freq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 queries = 1;
  bool has_queries() const;
  void clear_queries();
  static const int kQueriesFieldNumber = 1;
  ::google::protobuf::uint32 queries() const;
  void set_queries(::google::protobuf::uint32 value);

  // optional uint32 users = 2;
  bool has_users() const;
  void clear_users();
  static const int kUsersFieldNumber = 2;
  ::google::protobuf::uint32 users() const;
  void set_users(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic.Freq)
 private:
  void set_has_queries();
  void clear_has_queries();
  void set_has_users();
  void clear_has_users();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 queries_;
  ::google::protobuf::uint32 users_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo_Statistic_CrMixin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin) */ {
 public:
  QInfo_Statistic_CrMixin();
  virtual ~QInfo_Statistic_CrMixin();

  QInfo_Statistic_CrMixin(const QInfo_Statistic_CrMixin& from);

  inline QInfo_Statistic_CrMixin& operator=(const QInfo_Statistic_CrMixin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic_CrMixin(QInfo_Statistic_CrMixin&& from) noexcept
    : QInfo_Statistic_CrMixin() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic_CrMixin& operator=(QInfo_Statistic_CrMixin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic_CrMixin& default_instance();

  static inline const QInfo_Statistic_CrMixin* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic_CrMixin*>(
               &_QInfo_Statistic_CrMixin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(QInfo_Statistic_CrMixin* other);
  friend void swap(QInfo_Statistic_CrMixin& a, QInfo_Statistic_CrMixin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic_CrMixin* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic_CrMixin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic_CrMixin& from);
  void MergeFrom(const QInfo_Statistic_CrMixin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic_CrMixin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional float rank = 2;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 2;
  float rank() const;
  void set_rank(float value);

  // optional float attractiveness = 3;
  bool has_attractiveness() const;
  void clear_attractiveness();
  static const int kAttractivenessFieldNumber = 3;
  float attractiveness() const;
  void set_attractiveness(float value);

  // optional float satisfaction = 4;
  bool has_satisfaction() const;
  void clear_satisfaction();
  static const int kSatisfactionFieldNumber = 4;
  float satisfaction() const;
  void set_satisfaction(float value);

  // optional uint32 views = 5;
  bool has_views() const;
  void clear_views();
  static const int kViewsFieldNumber = 5;
  ::google::protobuf::uint32 views() const;
  void set_views(::google::protobuf::uint32 value);

  // optional uint32 clicks = 6;
  bool has_clicks() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 6;
  ::google::protobuf::uint32 clicks() const;
  void set_clicks(::google::protobuf::uint32 value);

  // optional uint32 satisfied = 7;
  bool has_satisfied() const;
  void clear_satisfied();
  static const int kSatisfiedFieldNumber = 7;
  ::google::protobuf::uint32 satisfied() const;
  void set_satisfied(::google::protobuf::uint32 value);

  // optional uint32 users = 8;
  bool has_users() const;
  void clear_users();
  static const int kUsersFieldNumber = 8;
  ::google::protobuf::uint32 users() const;
  void set_users(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_rank();
  void clear_has_rank();
  void set_has_attractiveness();
  void clear_has_attractiveness();
  void set_has_satisfaction();
  void clear_has_satisfaction();
  void set_has_views();
  void clear_has_views();
  void set_has_clicks();
  void clear_has_clicks();
  void set_has_satisfied();
  void clear_has_satisfied();
  void set_has_users();
  void clear_has_users();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float rank_;
  float attractiveness_;
  float satisfaction_;
  ::google::protobuf::uint32 views_;
  ::google::protobuf::uint32 clicks_;
  ::google::protobuf::uint32 satisfied_;
  ::google::protobuf::uint32 users_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo_Statistic_Intent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic.Intent) */ {
 public:
  QInfo_Statistic_Intent();
  virtual ~QInfo_Statistic_Intent();

  QInfo_Statistic_Intent(const QInfo_Statistic_Intent& from);

  inline QInfo_Statistic_Intent& operator=(const QInfo_Statistic_Intent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic_Intent(QInfo_Statistic_Intent&& from) noexcept
    : QInfo_Statistic_Intent() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic_Intent& operator=(QInfo_Statistic_Intent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic_Intent& default_instance();

  static inline const QInfo_Statistic_Intent* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic_Intent*>(
               &_QInfo_Statistic_Intent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(QInfo_Statistic_Intent* other);
  friend void swap(QInfo_Statistic_Intent& a, QInfo_Statistic_Intent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic_Intent* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic_Intent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic_Intent& from);
  void MergeFrom(const QInfo_Statistic_Intent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic_Intent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional float prob = 2;
  bool has_prob() const;
  void clear_prob();
  static const int kProbFieldNumber = 2;
  float prob() const;
  void set_prob(float value);

  // optional uint32 clicks = 3;
  bool has_clicks() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 3;
  ::google::protobuf::uint32 clicks() const;
  void set_clicks(::google::protobuf::uint32 value);

  // optional uint32 views = 4;
  bool has_views() const;
  void clear_views();
  static const int kViewsFieldNumber = 4;
  ::google::protobuf::uint32 views() const;
  void set_views(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic.Intent)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_prob();
  void clear_has_prob();
  void set_has_clicks();
  void clear_has_clicks();
  void set_has_views();
  void clear_has_views();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float prob_;
  ::google::protobuf::uint32 clicks_;
  ::google::protobuf::uint32 views_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo_Statistic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo.Statistic) */ {
 public:
  QInfo_Statistic();
  virtual ~QInfo_Statistic();

  QInfo_Statistic(const QInfo_Statistic& from);

  inline QInfo_Statistic& operator=(const QInfo_Statistic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo_Statistic(QInfo_Statistic&& from) noexcept
    : QInfo_Statistic() {
    *this = ::std::move(from);
  }

  inline QInfo_Statistic& operator=(QInfo_Statistic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo_Statistic& default_instance();

  static inline const QInfo_Statistic* internal_default_instance() {
    return reinterpret_cast<const QInfo_Statistic*>(
               &_QInfo_Statistic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(QInfo_Statistic* other);
  friend void swap(QInfo_Statistic& a, QInfo_Statistic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo_Statistic* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo_Statistic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo_Statistic& from);
  void MergeFrom(const QInfo_Statistic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo_Statistic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef QInfo_Statistic_Al Al;
  typedef QInfo_Statistic_Cr Cr;
  typedef QInfo_Statistic_Sr Sr;
  typedef QInfo_Statistic_Br Br;
  typedef QInfo_Statistic_Nal Nal;
  typedef QInfo_Statistic_UrlInfo UrlInfo;
  typedef QInfo_Statistic_Nvg Nvg;
  typedef QInfo_Statistic_VrtInfo VrtInfo;
  typedef QInfo_Statistic_Vrt Vrt;
  typedef QInfo_Statistic_AlImg AlImg;
  typedef QInfo_Statistic_CrImg CrImg;
  typedef QInfo_Statistic_CrVdo CrVdo;
  typedef QInfo_Statistic_ESSRexp ESSRexp;
  typedef QInfo_Statistic_Freq Freq;
  typedef QInfo_Statistic_CrMixin CrMixin;
  typedef QInfo_Statistic_Intent Intent;

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin cr_m_mixins = 31;
  int cr_m_mixins_size() const;
  void clear_cr_m_mixins();
  static const int kCrMMixinsFieldNumber = 31;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin& cr_m_mixins(int index) const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin* mutable_cr_m_mixins(int index);
  ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin* add_cr_m_mixins();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin >*
      mutable_cr_m_mixins();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin >&
      cr_m_mixins() const;

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.Intent int_m = 32;
  int int_m_size() const;
  void clear_int_m();
  static const int kIntMFieldNumber = 32;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent& int_m(int index) const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent* mutable_int_m(int index);
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent* add_int_m();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent >*
      mutable_int_m();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent >&
      int_m() const;

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin cr_m_mob_mixins = 35;
  int cr_m_mob_mixins_size() const;
  void clear_cr_m_mob_mixins();
  static const int kCrMMobMixinsFieldNumber = 35;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin& cr_m_mob_mixins(int index) const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin* mutable_cr_m_mob_mixins(int index);
  ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin* add_cr_m_mob_mixins();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin >*
      mutable_cr_m_mob_mixins();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin >&
      cr_m_mob_mixins() const;

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic.Intent int_m_mob = 36;
  int int_m_mob_size() const;
  void clear_int_m_mob();
  static const int kIntMMobFieldNumber = 36;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent& int_m_mob(int index) const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent* mutable_int_m_mob(int index);
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent* add_int_m_mob();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent >*
      mutable_int_m_mob();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent >&
      int_m_mob() const;

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_y = 2;
  bool has_al_y() const;
  void clear_al_y();
  static const int kAlYFieldNumber = 2;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al& al_y() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* mutable_al_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* release_al_y();
  void set_allocated_al_y(::ru::mail::go::webbase::serp::QInfo_Statistic_Al* al_y);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_g = 3;
  bool has_al_g() const;
  void clear_al_g();
  static const int kAlGFieldNumber = 3;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al& al_g() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* mutable_al_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* release_al_g();
  void set_allocated_al_g(::ru::mail::go::webbase::serp::QInfo_Statistic_Al* al_g);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_mg = 4;
  bool has_al_mg() const;
  void clear_al_mg();
  static const int kAlMgFieldNumber = 4;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al& al_mg() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* mutable_al_mg();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* release_al_mg();
  void set_allocated_al_mg(::ru::mail::go::webbase::serp::QInfo_Statistic_Al* al_mg);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_m = 5;
  bool has_cr_m() const;
  void clear_cr_m();
  static const int kCrMFieldNumber = 5;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& cr_m() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* mutable_cr_m();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* release_cr_m();
  void set_allocated_cr_m(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_m);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_mg = 6;
  bool has_cr_mg() const;
  void clear_cr_mg();
  static const int kCrMgFieldNumber = 6;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& cr_mg() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* mutable_cr_mg();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* release_cr_mg();
  void set_allocated_cr_mg(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_mg);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_y = 7;
  bool has_cr_y() const;
  void clear_cr_y();
  static const int kCrYFieldNumber = 7;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& cr_y() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* mutable_cr_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* release_cr_y();
  void set_allocated_cr_y(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_y);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_g = 8;
  bool has_cr_g() const;
  void clear_cr_g();
  static const int kCrGFieldNumber = 8;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& cr_g() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* mutable_cr_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* release_cr_g();
  void set_allocated_cr_g(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_g);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_mix = 9;
  bool has_cr_mix() const;
  void clear_cr_mix();
  static const int kCrMixFieldNumber = 9;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& cr_mix() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* mutable_cr_mix();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* release_cr_mix();
  void set_allocated_cr_mix(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_mix);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_spk = 10;
  bool has_sr_g_spk() const;
  void clear_sr_g_spk();
  static const int kSrGSpkFieldNumber = 10;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& sr_g_spk() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* mutable_sr_g_spk();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* release_sr_g_spk();
  void set_allocated_sr_g_spk(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_g_spk);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_liru = 11;
  bool has_sr_g_liru() const;
  void clear_sr_g_liru();
  static const int kSrGLiruFieldNumber = 11;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& sr_g_liru() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* mutable_sr_g_liru();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* release_sr_g_liru();
  void set_allocated_sr_g_liru(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_g_liru);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_kws = 12;
  bool has_sr_g_kws() const;
  void clear_sr_g_kws();
  static const int kSrGKwsFieldNumber = 12;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& sr_g_kws() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* mutable_sr_g_kws();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* release_sr_g_kws();
  void set_allocated_sr_g_kws(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_g_kws);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_spk = 13;
  bool has_sr_y_spk() const;
  void clear_sr_y_spk();
  static const int kSrYSpkFieldNumber = 13;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& sr_y_spk() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* mutable_sr_y_spk();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* release_sr_y_spk();
  void set_allocated_sr_y_spk(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_y_spk);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_liru = 14;
  bool has_sr_y_liru() const;
  void clear_sr_y_liru();
  static const int kSrYLiruFieldNumber = 14;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& sr_y_liru() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* mutable_sr_y_liru();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* release_sr_y_liru();
  void set_allocated_sr_y_liru(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_y_liru);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_kws = 15;
  bool has_sr_y_kws() const;
  void clear_sr_y_kws();
  static const int kSrYKwsFieldNumber = 15;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& sr_y_kws() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* mutable_sr_y_kws();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* release_sr_y_kws();
  void set_allocated_sr_y_kws(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_y_kws);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_y = 16;
  bool has_br_y() const;
  void clear_br_y();
  static const int kBrYFieldNumber = 16;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br& br_y() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* mutable_br_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* release_br_y();
  void set_allocated_br_y(::ru::mail::go::webbase::serp::QInfo_Statistic_Br* br_y);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_g = 17;
  bool has_br_g() const;
  void clear_br_g();
  static const int kBrGFieldNumber = 17;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br& br_g() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* mutable_br_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* release_br_g();
  void set_allocated_br_g(::ru::mail::go::webbase::serp::QInfo_Statistic_Br* br_g);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_m = 18;
  bool has_br_m() const;
  void clear_br_m();
  static const int kBrMFieldNumber = 18;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br& br_m() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* mutable_br_m();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* release_br_m();
  void set_allocated_br_m(::ru::mail::go::webbase::serp::QInfo_Statistic_Br* br_m);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_y = 19;
  bool has_nal_y() const;
  void clear_nal_y();
  static const int kNalYFieldNumber = 19;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal& nal_y() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* mutable_nal_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* release_nal_y();
  void set_allocated_nal_y(::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* nal_y);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_g = 20;
  bool has_nal_g() const;
  void clear_nal_g();
  static const int kNalGFieldNumber = 20;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal& nal_g() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* mutable_nal_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* release_nal_g();
  void set_allocated_nal_g(::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* nal_g);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_mg = 21;
  bool has_nal_mg() const;
  void clear_nal_mg();
  static const int kNalMgFieldNumber = 21;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal& nal_mg() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* mutable_nal_mg();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* release_nal_mg();
  void set_allocated_nal_mg(::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* nal_mg);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nvg nvg_mdl = 22;
  bool has_nvg_mdl() const;
  void clear_nvg_mdl();
  static const int kNvgMdlFieldNumber = 22;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg& nvg_mdl() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg* mutable_nvg_mdl();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg* release_nvg_mdl();
  void set_allocated_nvg_mdl(::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg* nvg_mdl);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Vrt vrt_mdl = 23;
  bool has_vrt_mdl() const;
  void clear_vrt_mdl();
  static const int kVrtMdlFieldNumber = 23;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt& vrt_mdl() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt* mutable_vrt_mdl();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt* release_vrt_mdl();
  void set_allocated_vrt_mdl(::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt* vrt_mdl);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.CrImg cr_img = 24;
  bool has_cr_img() const;
  void clear_cr_img();
  static const int kCrImgFieldNumber = 24;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg& cr_img() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg* mutable_cr_img();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg* release_cr_img();
  void set_allocated_cr_img(::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg* cr_img);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_y = 25;
  bool has_al_img_y() const;
  void clear_al_img_y();
  static const int kAlImgYFieldNumber = 25;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg& al_img_y() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* mutable_al_img_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* release_al_img_y();
  void set_allocated_al_img_y(::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* al_img_y);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_g = 26;
  bool has_al_img_g() const;
  void clear_al_img_g();
  static const int kAlImgGFieldNumber = 26;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg& al_img_g() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* mutable_al_img_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* release_al_img_g();
  void set_allocated_al_img_g(::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* al_img_g);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_gmx = 27;
  bool has_al_img_gmx() const;
  void clear_al_img_gmx();
  static const int kAlImgGmxFieldNumber = 27;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg& al_img_gmx() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* mutable_al_img_gmx();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* release_al_img_gmx();
  void set_allocated_al_img_gmx(::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* al_img_gmx);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp essr_exp_y = 28;
  bool has_essr_exp_y() const;
  void clear_essr_exp_y();
  static const int kEssrExpYFieldNumber = 28;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp& essr_exp_y() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* mutable_essr_exp_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* release_essr_exp_y();
  void set_allocated_essr_exp_y(::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* essr_exp_y);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp essr_exp_g = 29;
  bool has_essr_exp_g() const;
  void clear_essr_exp_g();
  static const int kEssrExpGFieldNumber = 29;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp& essr_exp_g() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* mutable_essr_exp_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* release_essr_exp_g();
  void set_allocated_essr_exp_g(::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* essr_exp_g);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Freq freq_m_3y = 30;
  bool has_freq_m_3y() const;
  void clear_freq_m_3y();
  static const int kFreqM3YFieldNumber = 30;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq& freq_m_3y() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq* mutable_freq_m_3y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq* release_freq_m_3y();
  void set_allocated_freq_m_3y(::ru::mail::go::webbase::serp::QInfo_Statistic_Freq* freq_m_3y);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo cr_vdo = 33;
  bool has_cr_vdo() const;
  void clear_cr_vdo();
  static const int kCrVdoFieldNumber = 33;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo& cr_vdo() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo* mutable_cr_vdo();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo* release_cr_vdo();
  void set_allocated_cr_vdo(::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo* cr_vdo);

  // optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_m_mob = 34;
  bool has_cr_m_mob() const;
  void clear_cr_m_mob();
  static const int kCrMMobFieldNumber = 34;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& cr_m_mob() const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* mutable_cr_m_mob();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* release_cr_m_mob();
  void set_allocated_cr_m_mob(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_m_mob);

  // required uint32 geo = 1;
  bool has_geo() const;
  void clear_geo();
  static const int kGeoFieldNumber = 1;
  ::google::protobuf::uint32 geo() const;
  void set_geo(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo.Statistic)
 private:
  void set_has_geo();
  void clear_has_geo();
  void set_has_al_y();
  void clear_has_al_y();
  void set_has_al_g();
  void clear_has_al_g();
  void set_has_al_mg();
  void clear_has_al_mg();
  void set_has_cr_m();
  void clear_has_cr_m();
  void set_has_cr_mg();
  void clear_has_cr_mg();
  void set_has_cr_y();
  void clear_has_cr_y();
  void set_has_cr_g();
  void clear_has_cr_g();
  void set_has_cr_mix();
  void clear_has_cr_mix();
  void set_has_sr_g_spk();
  void clear_has_sr_g_spk();
  void set_has_sr_g_liru();
  void clear_has_sr_g_liru();
  void set_has_sr_g_kws();
  void clear_has_sr_g_kws();
  void set_has_sr_y_spk();
  void clear_has_sr_y_spk();
  void set_has_sr_y_liru();
  void clear_has_sr_y_liru();
  void set_has_sr_y_kws();
  void clear_has_sr_y_kws();
  void set_has_br_y();
  void clear_has_br_y();
  void set_has_br_g();
  void clear_has_br_g();
  void set_has_br_m();
  void clear_has_br_m();
  void set_has_nal_y();
  void clear_has_nal_y();
  void set_has_nal_g();
  void clear_has_nal_g();
  void set_has_nal_mg();
  void clear_has_nal_mg();
  void set_has_nvg_mdl();
  void clear_has_nvg_mdl();
  void set_has_vrt_mdl();
  void clear_has_vrt_mdl();
  void set_has_cr_img();
  void clear_has_cr_img();
  void set_has_al_img_y();
  void clear_has_al_img_y();
  void set_has_al_img_g();
  void clear_has_al_img_g();
  void set_has_al_img_gmx();
  void clear_has_al_img_gmx();
  void set_has_essr_exp_y();
  void clear_has_essr_exp_y();
  void set_has_essr_exp_g();
  void clear_has_essr_exp_g();
  void set_has_freq_m_3y();
  void clear_has_freq_m_3y();
  void set_has_cr_vdo();
  void clear_has_cr_vdo();
  void set_has_cr_m_mob();
  void clear_has_cr_m_mob();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin > cr_m_mixins_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent > int_m_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin > cr_m_mob_mixins_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent > int_m_mob_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* al_y_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* al_g_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* al_mg_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_m_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_mg_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_y_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_g_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_mix_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_g_spk_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_g_liru_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_g_kws_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_y_spk_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_y_liru_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_y_kws_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* br_y_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* br_g_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* br_m_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* nal_y_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* nal_g_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* nal_mg_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg* nvg_mdl_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt* vrt_mdl_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg* cr_img_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* al_img_y_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* al_img_g_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* al_img_gmx_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* essr_exp_y_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* essr_exp_g_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq* freq_m_3y_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo* cr_vdo_;
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_m_mob_;
  ::google::protobuf::uint32 geo_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QInfo) */ {
 public:
  QInfo();
  virtual ~QInfo();

  QInfo(const QInfo& from);

  inline QInfo& operator=(const QInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QInfo(QInfo&& from) noexcept
    : QInfo() {
    *this = ::std::move(from);
  }

  inline QInfo& operator=(QInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QInfo& default_instance();

  static inline const QInfo* internal_default_instance() {
    return reinterpret_cast<const QInfo*>(
               &_QInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(QInfo* other);
  friend void swap(QInfo& a, QInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  QInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QInfo& from);
  void MergeFrom(const QInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef QInfo_Statistic Statistic;

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.serp.QInfo.Statistic stat = 2;
  int stat_size() const;
  void clear_stat();
  static const int kStatFieldNumber = 2;
  const ::ru::mail::go::webbase::serp::QInfo_Statistic& stat(int index) const;
  ::ru::mail::go::webbase::serp::QInfo_Statistic* mutable_stat(int index);
  ::ru::mail::go::webbase::serp::QInfo_Statistic* add_stat();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic >*
      mutable_stat();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic >&
      stat() const;

  // optional string query_text = 1;
  bool has_query_text() const;
  void clear_query_text();
  static const int kQueryTextFieldNumber = 1;
  const ::std::string& query_text() const;
  void set_query_text(const ::std::string& value);
  #if LANG_CXX11
  void set_query_text(::std::string&& value);
  #endif
  void set_query_text(const char* value);
  void set_query_text(const char* value, size_t size);
  ::std::string* mutable_query_text();
  ::std::string* release_query_text();
  void set_allocated_query_text(::std::string* query_text);

  // optional bool is_geo = 3;
  bool has_is_geo() const;
  void clear_is_geo();
  static const int kIsGeoFieldNumber = 3;
  bool is_geo() const;
  void set_is_geo(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QInfo)
 private:
  void set_has_query_text();
  void clear_has_query_text();
  void set_has_is_geo();
  void clear_has_is_geo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic > stat_;
  ::google::protobuf::internal::ArenaStringPtr query_text_;
  bool is_geo_;
  friend struct protobuf_qinformer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QInfo_Statistic_Al

// optional uint32 sessions = 1;
inline bool QInfo_Statistic_Al::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo_Statistic_Al::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo_Statistic_Al::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo_Statistic_Al::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
inline ::google::protobuf::uint32 QInfo_Statistic_Al::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Al.sessions)
  return sessions_;
}
inline void QInfo_Statistic_Al::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Al.sessions)
}

// optional bool navig = 4;
inline bool QInfo_Statistic_Al::has_navig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QInfo_Statistic_Al::set_has_navig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QInfo_Statistic_Al::clear_has_navig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QInfo_Statistic_Al::clear_navig() {
  navig_ = false;
  clear_has_navig();
}
inline bool QInfo_Statistic_Al::navig() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Al.navig)
  return navig_;
}
inline void QInfo_Statistic_Al::set_navig(bool value) {
  set_has_navig();
  navig_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Al.navig)
}

// -------------------------------------------------------------------

// QInfo_Statistic_Cr

// optional uint32 sessions = 1;
inline bool QInfo_Statistic_Cr::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo_Statistic_Cr::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo_Statistic_Cr::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo_Statistic_Cr::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
inline ::google::protobuf::uint32 QInfo_Statistic_Cr::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Cr.sessions)
  return sessions_;
}
inline void QInfo_Statistic_Cr::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Cr.sessions)
}

// optional bool navig = 2;
inline bool QInfo_Statistic_Cr::has_navig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QInfo_Statistic_Cr::set_has_navig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QInfo_Statistic_Cr::clear_has_navig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QInfo_Statistic_Cr::clear_navig() {
  navig_ = false;
  clear_has_navig();
}
inline bool QInfo_Statistic_Cr::navig() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Cr.navig)
  return navig_;
}
inline void QInfo_Statistic_Cr::set_navig(bool value) {
  set_has_navig();
  navig_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Cr.navig)
}

// -------------------------------------------------------------------

// QInfo_Statistic_Sr

// optional uint32 sessions = 1;
inline bool QInfo_Statistic_Sr::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo_Statistic_Sr::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo_Statistic_Sr::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo_Statistic_Sr::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
inline ::google::protobuf::uint32 QInfo_Statistic_Sr::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Sr.sessions)
  return sessions_;
}
inline void QInfo_Statistic_Sr::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Sr.sessions)
}

// optional uint32 urls = 2;
inline bool QInfo_Statistic_Sr::has_urls() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QInfo_Statistic_Sr::set_has_urls() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QInfo_Statistic_Sr::clear_has_urls() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QInfo_Statistic_Sr::clear_urls() {
  urls_ = 0u;
  clear_has_urls();
}
inline ::google::protobuf::uint32 QInfo_Statistic_Sr::urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Sr.urls)
  return urls_;
}
inline void QInfo_Statistic_Sr::set_urls(::google::protobuf::uint32 value) {
  set_has_urls();
  urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Sr.urls)
}

// optional uint32 users = 3;
inline bool QInfo_Statistic_Sr::has_users() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QInfo_Statistic_Sr::set_has_users() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QInfo_Statistic_Sr::clear_has_users() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QInfo_Statistic_Sr::clear_users() {
  users_ = 0u;
  clear_has_users();
}
inline ::google::protobuf::uint32 QInfo_Statistic_Sr::users() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Sr.users)
  return users_;
}
inline void QInfo_Statistic_Sr::set_users(::google::protobuf::uint32 value) {
  set_has_users();
  users_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Sr.users)
}

// optional bool navig = 4;
inline bool QInfo_Statistic_Sr::has_navig() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QInfo_Statistic_Sr::set_has_navig() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QInfo_Statistic_Sr::clear_has_navig() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QInfo_Statistic_Sr::clear_navig() {
  navig_ = false;
  clear_has_navig();
}
inline bool QInfo_Statistic_Sr::navig() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Sr.navig)
  return navig_;
}
inline void QInfo_Statistic_Sr::set_navig(bool value) {
  set_has_navig();
  navig_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Sr.navig)
}

// -------------------------------------------------------------------

// QInfo_Statistic_Br

// optional uint32 sessions = 1;
inline bool QInfo_Statistic_Br::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo_Statistic_Br::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo_Statistic_Br::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo_Statistic_Br::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
inline ::google::protobuf::uint32 QInfo_Statistic_Br::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Br.sessions)
  return sessions_;
}
inline void QInfo_Statistic_Br::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Br.sessions)
}

// optional float navig_quality = 2;
inline bool QInfo_Statistic_Br::has_navig_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QInfo_Statistic_Br::set_has_navig_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QInfo_Statistic_Br::clear_has_navig_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QInfo_Statistic_Br::clear_navig_quality() {
  navig_quality_ = 0;
  clear_has_navig_quality();
}
inline float QInfo_Statistic_Br::navig_quality() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Br.navig_quality)
  return navig_quality_;
}
inline void QInfo_Statistic_Br::set_navig_quality(float value) {
  set_has_navig_quality();
  navig_quality_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Br.navig_quality)
}

// optional bool navig = 3;
inline bool QInfo_Statistic_Br::has_navig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QInfo_Statistic_Br::set_has_navig() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QInfo_Statistic_Br::clear_has_navig() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QInfo_Statistic_Br::clear_navig() {
  navig_ = false;
  clear_has_navig();
}
inline bool QInfo_Statistic_Br::navig() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Br.navig)
  return navig_;
}
inline void QInfo_Statistic_Br::set_navig(bool value) {
  set_has_navig();
  navig_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Br.navig)
}

// -------------------------------------------------------------------

// QInfo_Statistic_Nal

// optional uint32 sessions = 1;
inline bool QInfo_Statistic_Nal::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo_Statistic_Nal::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo_Statistic_Nal::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo_Statistic_Nal::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
inline ::google::protobuf::uint32 QInfo_Statistic_Nal::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Nal.sessions)
  return sessions_;
}
inline void QInfo_Statistic_Nal::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Nal.sessions)
}

// -------------------------------------------------------------------

// QInfo_Statistic_UrlInfo

// optional string url = 1;
inline bool QInfo_Statistic_UrlInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo_Statistic_UrlInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo_Statistic_UrlInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo_Statistic_UrlInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& QInfo_Statistic_UrlInfo::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url)
  return url_.GetNoArena();
}
inline void QInfo_Statistic_UrlInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url)
}
#if LANG_CXX11
inline void QInfo_Statistic_UrlInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url)
}
#endif
inline void QInfo_Statistic_UrlInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url)
}
inline void QInfo_Statistic_UrlInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url)
}
inline ::std::string* QInfo_Statistic_UrlInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QInfo_Statistic_UrlInfo::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QInfo_Statistic_UrlInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.url)
}

// optional uint32 hash = 2;
inline bool QInfo_Statistic_UrlInfo::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QInfo_Statistic_UrlInfo::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QInfo_Statistic_UrlInfo::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QInfo_Statistic_UrlInfo::clear_hash() {
  hash_ = 0u;
  clear_has_hash();
}
inline ::google::protobuf::uint32 QInfo_Statistic_UrlInfo::hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.hash)
  return hash_;
}
inline void QInfo_Statistic_UrlInfo::set_hash(::google::protobuf::uint32 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.hash)
}

// optional int32 site = 3;
inline bool QInfo_Statistic_UrlInfo::has_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QInfo_Statistic_UrlInfo::set_has_site() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QInfo_Statistic_UrlInfo::clear_has_site() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QInfo_Statistic_UrlInfo::clear_site() {
  site_ = 0;
  clear_has_site();
}
inline ::google::protobuf::int32 QInfo_Statistic_UrlInfo::site() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.site)
  return site_;
}
inline void QInfo_Statistic_UrlInfo::set_site(::google::protobuf::int32 value) {
  set_has_site();
  site_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.site)
}

// optional float rank = 4;
inline bool QInfo_Statistic_UrlInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QInfo_Statistic_UrlInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QInfo_Statistic_UrlInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QInfo_Statistic_UrlInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline float QInfo_Statistic_UrlInfo::rank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.rank)
  return rank_;
}
inline void QInfo_Statistic_UrlInfo::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.rank)
}

// optional float crMix = 5;
inline bool QInfo_Statistic_UrlInfo::has_crmix() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QInfo_Statistic_UrlInfo::set_has_crmix() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QInfo_Statistic_UrlInfo::clear_has_crmix() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QInfo_Statistic_UrlInfo::clear_crmix() {
  crmix_ = 0;
  clear_has_crmix();
}
inline float QInfo_Statistic_UrlInfo::crmix() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.crMix)
  return crmix_;
}
inline void QInfo_Statistic_UrlInfo::set_crmix(float value) {
  set_has_crmix();
  crmix_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.crMix)
}

// optional float crM = 6;
inline bool QInfo_Statistic_UrlInfo::has_crm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QInfo_Statistic_UrlInfo::set_has_crm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QInfo_Statistic_UrlInfo::clear_has_crm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QInfo_Statistic_UrlInfo::clear_crm() {
  crm_ = 0;
  clear_has_crm();
}
inline float QInfo_Statistic_UrlInfo::crm() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.crM)
  return crm_;
}
inline void QInfo_Statistic_UrlInfo::set_crm(float value) {
  set_has_crm();
  crm_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.crM)
}

// optional uint64 hash64 = 7;
inline bool QInfo_Statistic_UrlInfo::has_hash64() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QInfo_Statistic_UrlInfo::set_has_hash64() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QInfo_Statistic_UrlInfo::clear_has_hash64() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QInfo_Statistic_UrlInfo::clear_hash64() {
  hash64_ = GOOGLE_ULONGLONG(0);
  clear_has_hash64();
}
inline ::google::protobuf::uint64 QInfo_Statistic_UrlInfo::hash64() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.hash64)
  return hash64_;
}
inline void QInfo_Statistic_UrlInfo::set_hash64(::google::protobuf::uint64 value) {
  set_has_hash64();
  hash64_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.hash64)
}

// optional uint64 normalized_hash = 8;
inline bool QInfo_Statistic_UrlInfo::has_normalized_hash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QInfo_Statistic_UrlInfo::set_has_normalized_hash() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QInfo_Statistic_UrlInfo::clear_has_normalized_hash() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QInfo_Statistic_UrlInfo::clear_normalized_hash() {
  normalized_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_normalized_hash();
}
inline ::google::protobuf::uint64 QInfo_Statistic_UrlInfo::normalized_hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.normalized_hash)
  return normalized_hash_;
}
inline void QInfo_Statistic_UrlInfo::set_normalized_hash(::google::protobuf::uint64 value) {
  set_has_normalized_hash();
  normalized_hash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo.normalized_hash)
}

// -------------------------------------------------------------------

// QInfo_Statistic_Nvg

// optional float prob = 1;
inline bool QInfo_Statistic_Nvg::has_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo_Statistic_Nvg::set_has_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo_Statistic_Nvg::clear_has_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo_Statistic_Nvg::clear_prob() {
  prob_ = 0;
  clear_has_prob();
}
inline float QInfo_Statistic_Nvg::prob() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg.prob)
  return prob_;
}
inline void QInfo_Statistic_Nvg::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg.prob)
}

// repeated .ru.mail.go.webbase.serp.QInfo.Statistic.UrlInfo urls = 2;
inline int QInfo_Statistic_Nvg::urls_size() const {
  return urls_.size();
}
inline void QInfo_Statistic_Nvg::clear_urls() {
  urls_.Clear();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_UrlInfo& QInfo_Statistic_Nvg::urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg.urls)
  return urls_.Get(index);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_UrlInfo* QInfo_Statistic_Nvg::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg.urls)
  return urls_.Mutable(index);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_UrlInfo* QInfo_Statistic_Nvg::add_urls() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg.urls)
  return urls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_UrlInfo >*
QInfo_Statistic_Nvg::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg.urls)
  return &urls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_UrlInfo >&
QInfo_Statistic_Nvg::urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QInfo.Statistic.Nvg.urls)
  return urls_;
}

// -------------------------------------------------------------------

// QInfo_Statistic_VrtInfo

// optional string name = 1;
inline bool QInfo_Statistic_VrtInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo_Statistic_VrtInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo_Statistic_VrtInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo_Statistic_VrtInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& QInfo_Statistic_VrtInfo::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name)
  return name_.GetNoArena();
}
inline void QInfo_Statistic_VrtInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name)
}
#if LANG_CXX11
inline void QInfo_Statistic_VrtInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name)
}
#endif
inline void QInfo_Statistic_VrtInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name)
}
inline void QInfo_Statistic_VrtInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name)
}
inline ::std::string* QInfo_Statistic_VrtInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QInfo_Statistic_VrtInfo::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QInfo_Statistic_VrtInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.name)
}

// optional float rank = 2;
inline bool QInfo_Statistic_VrtInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QInfo_Statistic_VrtInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QInfo_Statistic_VrtInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QInfo_Statistic_VrtInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline float QInfo_Statistic_VrtInfo::rank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.rank)
  return rank_;
}
inline void QInfo_Statistic_VrtInfo::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo.rank)
}

// -------------------------------------------------------------------

// QInfo_Statistic_Vrt

// repeated .ru.mail.go.webbase.serp.QInfo.Statistic.VrtInfo vrts = 1;
inline int QInfo_Statistic_Vrt::vrts_size() const {
  return vrts_.size();
}
inline void QInfo_Statistic_Vrt::clear_vrts() {
  vrts_.Clear();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_VrtInfo& QInfo_Statistic_Vrt::vrts(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt.vrts)
  return vrts_.Get(index);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_VrtInfo* QInfo_Statistic_Vrt::mutable_vrts(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt.vrts)
  return vrts_.Mutable(index);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_VrtInfo* QInfo_Statistic_Vrt::add_vrts() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt.vrts)
  return vrts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_VrtInfo >*
QInfo_Statistic_Vrt::mutable_vrts() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt.vrts)
  return &vrts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_VrtInfo >&
QInfo_Statistic_Vrt::vrts() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QInfo.Statistic.Vrt.vrts)
  return vrts_;
}

// -------------------------------------------------------------------

// QInfo_Statistic_AlImg

// optional uint32 sessions = 1;
inline bool QInfo_Statistic_AlImg::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo_Statistic_AlImg::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo_Statistic_AlImg::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo_Statistic_AlImg::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
inline ::google::protobuf::uint32 QInfo_Statistic_AlImg::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg.sessions)
  return sessions_;
}
inline void QInfo_Statistic_AlImg::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.AlImg.sessions)
}

// -------------------------------------------------------------------

// QInfo_Statistic_CrImg

// optional uint32 sessions = 1;
inline bool QInfo_Statistic_CrImg::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo_Statistic_CrImg::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo_Statistic_CrImg::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo_Statistic_CrImg::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
inline ::google::protobuf::uint32 QInfo_Statistic_CrImg::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg.sessions)
  return sessions_;
}
inline void QInfo_Statistic_CrImg::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg.sessions)
}

// optional uint32 clicks = 2;
inline bool QInfo_Statistic_CrImg::has_clicks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QInfo_Statistic_CrImg::set_has_clicks() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QInfo_Statistic_CrImg::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QInfo_Statistic_CrImg::clear_clicks() {
  clicks_ = 0u;
  clear_has_clicks();
}
inline ::google::protobuf::uint32 QInfo_Statistic_CrImg::clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg.clicks)
  return clicks_;
}
inline void QInfo_Statistic_CrImg::set_clicks(::google::protobuf::uint32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrImg.clicks)
}

// -------------------------------------------------------------------

// QInfo_Statistic_CrVdo

// optional uint32 sessions = 1;
inline bool QInfo_Statistic_CrVdo::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo_Statistic_CrVdo::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo_Statistic_CrVdo::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo_Statistic_CrVdo::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
inline ::google::protobuf::uint32 QInfo_Statistic_CrVdo::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo.sessions)
  return sessions_;
}
inline void QInfo_Statistic_CrVdo::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo.sessions)
}

// optional uint32 clicks = 2;
inline bool QInfo_Statistic_CrVdo::has_clicks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QInfo_Statistic_CrVdo::set_has_clicks() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QInfo_Statistic_CrVdo::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QInfo_Statistic_CrVdo::clear_clicks() {
  clicks_ = 0u;
  clear_has_clicks();
}
inline ::google::protobuf::uint32 QInfo_Statistic_CrVdo::clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo.clicks)
  return clicks_;
}
inline void QInfo_Statistic_CrVdo::set_clicks(::google::protobuf::uint32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo.clicks)
}

// -------------------------------------------------------------------

// QInfo_Statistic_ESSRexp

// optional uint32 sessions = 1;
inline bool QInfo_Statistic_ESSRexp::has_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo_Statistic_ESSRexp::set_has_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo_Statistic_ESSRexp::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo_Statistic_ESSRexp::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
inline ::google::protobuf::uint32 QInfo_Statistic_ESSRexp::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp.sessions)
  return sessions_;
}
inline void QInfo_Statistic_ESSRexp::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp.sessions)
}

// -------------------------------------------------------------------

// QInfo_Statistic_Freq

// optional uint32 queries = 1;
inline bool QInfo_Statistic_Freq::has_queries() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo_Statistic_Freq::set_has_queries() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo_Statistic_Freq::clear_has_queries() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo_Statistic_Freq::clear_queries() {
  queries_ = 0u;
  clear_has_queries();
}
inline ::google::protobuf::uint32 QInfo_Statistic_Freq::queries() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Freq.queries)
  return queries_;
}
inline void QInfo_Statistic_Freq::set_queries(::google::protobuf::uint32 value) {
  set_has_queries();
  queries_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Freq.queries)
}

// optional uint32 users = 2;
inline bool QInfo_Statistic_Freq::has_users() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QInfo_Statistic_Freq::set_has_users() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QInfo_Statistic_Freq::clear_has_users() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QInfo_Statistic_Freq::clear_users() {
  users_ = 0u;
  clear_has_users();
}
inline ::google::protobuf::uint32 QInfo_Statistic_Freq::users() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Freq.users)
  return users_;
}
inline void QInfo_Statistic_Freq::set_users(::google::protobuf::uint32 value) {
  set_has_users();
  users_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Freq.users)
}

// -------------------------------------------------------------------

// QInfo_Statistic_CrMixin

// required string name = 1;
inline bool QInfo_Statistic_CrMixin::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo_Statistic_CrMixin::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo_Statistic_CrMixin::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo_Statistic_CrMixin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& QInfo_Statistic_CrMixin::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name)
  return name_.GetNoArena();
}
inline void QInfo_Statistic_CrMixin::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name)
}
#if LANG_CXX11
inline void QInfo_Statistic_CrMixin::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name)
}
#endif
inline void QInfo_Statistic_CrMixin::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name)
}
inline void QInfo_Statistic_CrMixin::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name)
}
inline ::std::string* QInfo_Statistic_CrMixin::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QInfo_Statistic_CrMixin::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QInfo_Statistic_CrMixin::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.name)
}

// optional float rank = 2;
inline bool QInfo_Statistic_CrMixin::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QInfo_Statistic_CrMixin::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QInfo_Statistic_CrMixin::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QInfo_Statistic_CrMixin::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline float QInfo_Statistic_CrMixin::rank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.rank)
  return rank_;
}
inline void QInfo_Statistic_CrMixin::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.rank)
}

// optional float attractiveness = 3;
inline bool QInfo_Statistic_CrMixin::has_attractiveness() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QInfo_Statistic_CrMixin::set_has_attractiveness() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QInfo_Statistic_CrMixin::clear_has_attractiveness() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QInfo_Statistic_CrMixin::clear_attractiveness() {
  attractiveness_ = 0;
  clear_has_attractiveness();
}
inline float QInfo_Statistic_CrMixin::attractiveness() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.attractiveness)
  return attractiveness_;
}
inline void QInfo_Statistic_CrMixin::set_attractiveness(float value) {
  set_has_attractiveness();
  attractiveness_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.attractiveness)
}

// optional float satisfaction = 4;
inline bool QInfo_Statistic_CrMixin::has_satisfaction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QInfo_Statistic_CrMixin::set_has_satisfaction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QInfo_Statistic_CrMixin::clear_has_satisfaction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QInfo_Statistic_CrMixin::clear_satisfaction() {
  satisfaction_ = 0;
  clear_has_satisfaction();
}
inline float QInfo_Statistic_CrMixin::satisfaction() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.satisfaction)
  return satisfaction_;
}
inline void QInfo_Statistic_CrMixin::set_satisfaction(float value) {
  set_has_satisfaction();
  satisfaction_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.satisfaction)
}

// optional uint32 views = 5;
inline bool QInfo_Statistic_CrMixin::has_views() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QInfo_Statistic_CrMixin::set_has_views() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QInfo_Statistic_CrMixin::clear_has_views() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QInfo_Statistic_CrMixin::clear_views() {
  views_ = 0u;
  clear_has_views();
}
inline ::google::protobuf::uint32 QInfo_Statistic_CrMixin::views() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.views)
  return views_;
}
inline void QInfo_Statistic_CrMixin::set_views(::google::protobuf::uint32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.views)
}

// optional uint32 clicks = 6;
inline bool QInfo_Statistic_CrMixin::has_clicks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QInfo_Statistic_CrMixin::set_has_clicks() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QInfo_Statistic_CrMixin::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QInfo_Statistic_CrMixin::clear_clicks() {
  clicks_ = 0u;
  clear_has_clicks();
}
inline ::google::protobuf::uint32 QInfo_Statistic_CrMixin::clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.clicks)
  return clicks_;
}
inline void QInfo_Statistic_CrMixin::set_clicks(::google::protobuf::uint32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.clicks)
}

// optional uint32 satisfied = 7;
inline bool QInfo_Statistic_CrMixin::has_satisfied() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QInfo_Statistic_CrMixin::set_has_satisfied() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QInfo_Statistic_CrMixin::clear_has_satisfied() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QInfo_Statistic_CrMixin::clear_satisfied() {
  satisfied_ = 0u;
  clear_has_satisfied();
}
inline ::google::protobuf::uint32 QInfo_Statistic_CrMixin::satisfied() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.satisfied)
  return satisfied_;
}
inline void QInfo_Statistic_CrMixin::set_satisfied(::google::protobuf::uint32 value) {
  set_has_satisfied();
  satisfied_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.satisfied)
}

// optional uint32 users = 8;
inline bool QInfo_Statistic_CrMixin::has_users() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QInfo_Statistic_CrMixin::set_has_users() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QInfo_Statistic_CrMixin::clear_has_users() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QInfo_Statistic_CrMixin::clear_users() {
  users_ = 0u;
  clear_has_users();
}
inline ::google::protobuf::uint32 QInfo_Statistic_CrMixin::users() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.users)
  return users_;
}
inline void QInfo_Statistic_CrMixin::set_users(::google::protobuf::uint32 value) {
  set_has_users();
  users_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin.users)
}

// -------------------------------------------------------------------

// QInfo_Statistic_Intent

// required string name = 1;
inline bool QInfo_Statistic_Intent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo_Statistic_Intent::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo_Statistic_Intent::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo_Statistic_Intent::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& QInfo_Statistic_Intent::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name)
  return name_.GetNoArena();
}
inline void QInfo_Statistic_Intent::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name)
}
#if LANG_CXX11
inline void QInfo_Statistic_Intent::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name)
}
#endif
inline void QInfo_Statistic_Intent::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name)
}
inline void QInfo_Statistic_Intent::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name)
}
inline ::std::string* QInfo_Statistic_Intent::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QInfo_Statistic_Intent::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QInfo_Statistic_Intent::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.name)
}

// optional float prob = 2;
inline bool QInfo_Statistic_Intent::has_prob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QInfo_Statistic_Intent::set_has_prob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QInfo_Statistic_Intent::clear_has_prob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QInfo_Statistic_Intent::clear_prob() {
  prob_ = 0;
  clear_has_prob();
}
inline float QInfo_Statistic_Intent::prob() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.prob)
  return prob_;
}
inline void QInfo_Statistic_Intent::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.prob)
}

// optional uint32 clicks = 3;
inline bool QInfo_Statistic_Intent::has_clicks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QInfo_Statistic_Intent::set_has_clicks() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QInfo_Statistic_Intent::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QInfo_Statistic_Intent::clear_clicks() {
  clicks_ = 0u;
  clear_has_clicks();
}
inline ::google::protobuf::uint32 QInfo_Statistic_Intent::clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.clicks)
  return clicks_;
}
inline void QInfo_Statistic_Intent::set_clicks(::google::protobuf::uint32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.clicks)
}

// optional uint32 views = 4;
inline bool QInfo_Statistic_Intent::has_views() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QInfo_Statistic_Intent::set_has_views() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QInfo_Statistic_Intent::clear_has_views() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QInfo_Statistic_Intent::clear_views() {
  views_ = 0u;
  clear_has_views();
}
inline ::google::protobuf::uint32 QInfo_Statistic_Intent::views() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.views)
  return views_;
}
inline void QInfo_Statistic_Intent::set_views(::google::protobuf::uint32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.Intent.views)
}

// -------------------------------------------------------------------

// QInfo_Statistic

// required uint32 geo = 1;
inline bool QInfo_Statistic::has_geo() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void QInfo_Statistic::set_has_geo() {
  _has_bits_[0] |= 0x80000000u;
}
inline void QInfo_Statistic::clear_has_geo() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void QInfo_Statistic::clear_geo() {
  geo_ = 0u;
  clear_has_geo();
}
inline ::google::protobuf::uint32 QInfo_Statistic::geo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.geo)
  return geo_;
}
inline void QInfo_Statistic::set_geo(::google::protobuf::uint32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.Statistic.geo)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_y = 2;
inline bool QInfo_Statistic::has_al_y() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo_Statistic::set_has_al_y() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo_Statistic::clear_has_al_y() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo_Statistic::clear_al_y() {
  if (al_y_ != NULL) al_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_Al::Clear();
  clear_has_al_y();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al& QInfo_Statistic::al_y() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* p = al_y_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.al_y)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Al_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* QInfo_Statistic::mutable_al_y() {
  set_has_al_y();
  if (al_y_ == NULL) {
    al_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Al;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.al_y)
  return al_y_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* QInfo_Statistic::release_al_y() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.al_y)
  clear_has_al_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* temp = al_y_;
  al_y_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_al_y(::ru::mail::go::webbase::serp::QInfo_Statistic_Al* al_y) {
  delete al_y_;
  al_y_ = al_y;
  if (al_y) {
    set_has_al_y();
  } else {
    clear_has_al_y();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.al_y)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_g = 3;
inline bool QInfo_Statistic::has_al_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QInfo_Statistic::set_has_al_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QInfo_Statistic::clear_has_al_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QInfo_Statistic::clear_al_g() {
  if (al_g_ != NULL) al_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_Al::Clear();
  clear_has_al_g();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al& QInfo_Statistic::al_g() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* p = al_g_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.al_g)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Al_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* QInfo_Statistic::mutable_al_g() {
  set_has_al_g();
  if (al_g_ == NULL) {
    al_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Al;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.al_g)
  return al_g_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* QInfo_Statistic::release_al_g() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.al_g)
  clear_has_al_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* temp = al_g_;
  al_g_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_al_g(::ru::mail::go::webbase::serp::QInfo_Statistic_Al* al_g) {
  delete al_g_;
  al_g_ = al_g;
  if (al_g) {
    set_has_al_g();
  } else {
    clear_has_al_g();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.al_g)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Al al_mg = 4;
inline bool QInfo_Statistic::has_al_mg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QInfo_Statistic::set_has_al_mg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QInfo_Statistic::clear_has_al_mg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QInfo_Statistic::clear_al_mg() {
  if (al_mg_ != NULL) al_mg_->::ru::mail::go::webbase::serp::QInfo_Statistic_Al::Clear();
  clear_has_al_mg();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al& QInfo_Statistic::al_mg() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* p = al_mg_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.al_mg)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Al*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Al_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* QInfo_Statistic::mutable_al_mg() {
  set_has_al_mg();
  if (al_mg_ == NULL) {
    al_mg_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Al;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.al_mg)
  return al_mg_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* QInfo_Statistic::release_al_mg() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.al_mg)
  clear_has_al_mg();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Al* temp = al_mg_;
  al_mg_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_al_mg(::ru::mail::go::webbase::serp::QInfo_Statistic_Al* al_mg) {
  delete al_mg_;
  al_mg_ = al_mg;
  if (al_mg) {
    set_has_al_mg();
  } else {
    clear_has_al_mg();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.al_mg)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_m = 5;
inline bool QInfo_Statistic::has_cr_m() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QInfo_Statistic::set_has_cr_m() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QInfo_Statistic::clear_has_cr_m() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QInfo_Statistic::clear_cr_m() {
  if (cr_m_ != NULL) cr_m_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
  clear_has_cr_m();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& QInfo_Statistic::cr_m() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* p = cr_m_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Cr_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::mutable_cr_m() {
  set_has_cr_m();
  if (cr_m_ == NULL) {
    cr_m_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m)
  return cr_m_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::release_cr_m() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m)
  clear_has_cr_m();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* temp = cr_m_;
  cr_m_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_cr_m(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_m) {
  delete cr_m_;
  cr_m_ = cr_m;
  if (cr_m) {
    set_has_cr_m();
  } else {
    clear_has_cr_m();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_mg = 6;
inline bool QInfo_Statistic::has_cr_mg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QInfo_Statistic::set_has_cr_mg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QInfo_Statistic::clear_has_cr_mg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QInfo_Statistic::clear_cr_mg() {
  if (cr_mg_ != NULL) cr_mg_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
  clear_has_cr_mg();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& QInfo_Statistic::cr_mg() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* p = cr_mg_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_mg)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Cr_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::mutable_cr_mg() {
  set_has_cr_mg();
  if (cr_mg_ == NULL) {
    cr_mg_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_mg)
  return cr_mg_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::release_cr_mg() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.cr_mg)
  clear_has_cr_mg();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* temp = cr_mg_;
  cr_mg_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_cr_mg(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_mg) {
  delete cr_mg_;
  cr_mg_ = cr_mg;
  if (cr_mg) {
    set_has_cr_mg();
  } else {
    clear_has_cr_mg();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.cr_mg)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_y = 7;
inline bool QInfo_Statistic::has_cr_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QInfo_Statistic::set_has_cr_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QInfo_Statistic::clear_has_cr_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QInfo_Statistic::clear_cr_y() {
  if (cr_y_ != NULL) cr_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
  clear_has_cr_y();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& QInfo_Statistic::cr_y() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* p = cr_y_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_y)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Cr_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::mutable_cr_y() {
  set_has_cr_y();
  if (cr_y_ == NULL) {
    cr_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_y)
  return cr_y_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::release_cr_y() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.cr_y)
  clear_has_cr_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* temp = cr_y_;
  cr_y_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_cr_y(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_y) {
  delete cr_y_;
  cr_y_ = cr_y;
  if (cr_y) {
    set_has_cr_y();
  } else {
    clear_has_cr_y();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.cr_y)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_g = 8;
inline bool QInfo_Statistic::has_cr_g() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QInfo_Statistic::set_has_cr_g() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QInfo_Statistic::clear_has_cr_g() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QInfo_Statistic::clear_cr_g() {
  if (cr_g_ != NULL) cr_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
  clear_has_cr_g();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& QInfo_Statistic::cr_g() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* p = cr_g_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_g)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Cr_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::mutable_cr_g() {
  set_has_cr_g();
  if (cr_g_ == NULL) {
    cr_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_g)
  return cr_g_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::release_cr_g() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.cr_g)
  clear_has_cr_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* temp = cr_g_;
  cr_g_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_cr_g(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_g) {
  delete cr_g_;
  cr_g_ = cr_g;
  if (cr_g) {
    set_has_cr_g();
  } else {
    clear_has_cr_g();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.cr_g)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_mix = 9;
inline bool QInfo_Statistic::has_cr_mix() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QInfo_Statistic::set_has_cr_mix() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QInfo_Statistic::clear_has_cr_mix() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QInfo_Statistic::clear_cr_mix() {
  if (cr_mix_ != NULL) cr_mix_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
  clear_has_cr_mix();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& QInfo_Statistic::cr_mix() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* p = cr_mix_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_mix)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Cr_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::mutable_cr_mix() {
  set_has_cr_mix();
  if (cr_mix_ == NULL) {
    cr_mix_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_mix)
  return cr_mix_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::release_cr_mix() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.cr_mix)
  clear_has_cr_mix();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* temp = cr_mix_;
  cr_mix_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_cr_mix(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_mix) {
  delete cr_mix_;
  cr_mix_ = cr_mix;
  if (cr_mix) {
    set_has_cr_mix();
  } else {
    clear_has_cr_mix();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.cr_mix)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_spk = 10;
inline bool QInfo_Statistic::has_sr_g_spk() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QInfo_Statistic::set_has_sr_g_spk() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QInfo_Statistic::clear_has_sr_g_spk() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QInfo_Statistic::clear_sr_g_spk() {
  if (sr_g_spk_ != NULL) sr_g_spk_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
  clear_has_sr_g_spk();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& QInfo_Statistic::sr_g_spk() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* p = sr_g_spk_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_spk)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Sr_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::mutable_sr_g_spk() {
  set_has_sr_g_spk();
  if (sr_g_spk_ == NULL) {
    sr_g_spk_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_spk)
  return sr_g_spk_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::release_sr_g_spk() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_spk)
  clear_has_sr_g_spk();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* temp = sr_g_spk_;
  sr_g_spk_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_sr_g_spk(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_g_spk) {
  delete sr_g_spk_;
  sr_g_spk_ = sr_g_spk;
  if (sr_g_spk) {
    set_has_sr_g_spk();
  } else {
    clear_has_sr_g_spk();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_spk)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_liru = 11;
inline bool QInfo_Statistic::has_sr_g_liru() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QInfo_Statistic::set_has_sr_g_liru() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QInfo_Statistic::clear_has_sr_g_liru() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QInfo_Statistic::clear_sr_g_liru() {
  if (sr_g_liru_ != NULL) sr_g_liru_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
  clear_has_sr_g_liru();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& QInfo_Statistic::sr_g_liru() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* p = sr_g_liru_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_liru)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Sr_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::mutable_sr_g_liru() {
  set_has_sr_g_liru();
  if (sr_g_liru_ == NULL) {
    sr_g_liru_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_liru)
  return sr_g_liru_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::release_sr_g_liru() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_liru)
  clear_has_sr_g_liru();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* temp = sr_g_liru_;
  sr_g_liru_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_sr_g_liru(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_g_liru) {
  delete sr_g_liru_;
  sr_g_liru_ = sr_g_liru;
  if (sr_g_liru) {
    set_has_sr_g_liru();
  } else {
    clear_has_sr_g_liru();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_liru)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_g_kws = 12;
inline bool QInfo_Statistic::has_sr_g_kws() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void QInfo_Statistic::set_has_sr_g_kws() {
  _has_bits_[0] |= 0x00000400u;
}
inline void QInfo_Statistic::clear_has_sr_g_kws() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void QInfo_Statistic::clear_sr_g_kws() {
  if (sr_g_kws_ != NULL) sr_g_kws_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
  clear_has_sr_g_kws();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& QInfo_Statistic::sr_g_kws() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* p = sr_g_kws_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_kws)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Sr_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::mutable_sr_g_kws() {
  set_has_sr_g_kws();
  if (sr_g_kws_ == NULL) {
    sr_g_kws_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_kws)
  return sr_g_kws_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::release_sr_g_kws() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_kws)
  clear_has_sr_g_kws();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* temp = sr_g_kws_;
  sr_g_kws_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_sr_g_kws(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_g_kws) {
  delete sr_g_kws_;
  sr_g_kws_ = sr_g_kws;
  if (sr_g_kws) {
    set_has_sr_g_kws();
  } else {
    clear_has_sr_g_kws();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.sr_g_kws)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_spk = 13;
inline bool QInfo_Statistic::has_sr_y_spk() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void QInfo_Statistic::set_has_sr_y_spk() {
  _has_bits_[0] |= 0x00000800u;
}
inline void QInfo_Statistic::clear_has_sr_y_spk() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void QInfo_Statistic::clear_sr_y_spk() {
  if (sr_y_spk_ != NULL) sr_y_spk_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
  clear_has_sr_y_spk();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& QInfo_Statistic::sr_y_spk() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* p = sr_y_spk_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_spk)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Sr_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::mutable_sr_y_spk() {
  set_has_sr_y_spk();
  if (sr_y_spk_ == NULL) {
    sr_y_spk_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_spk)
  return sr_y_spk_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::release_sr_y_spk() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_spk)
  clear_has_sr_y_spk();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* temp = sr_y_spk_;
  sr_y_spk_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_sr_y_spk(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_y_spk) {
  delete sr_y_spk_;
  sr_y_spk_ = sr_y_spk;
  if (sr_y_spk) {
    set_has_sr_y_spk();
  } else {
    clear_has_sr_y_spk();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_spk)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_liru = 14;
inline bool QInfo_Statistic::has_sr_y_liru() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void QInfo_Statistic::set_has_sr_y_liru() {
  _has_bits_[0] |= 0x00001000u;
}
inline void QInfo_Statistic::clear_has_sr_y_liru() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void QInfo_Statistic::clear_sr_y_liru() {
  if (sr_y_liru_ != NULL) sr_y_liru_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
  clear_has_sr_y_liru();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& QInfo_Statistic::sr_y_liru() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* p = sr_y_liru_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_liru)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Sr_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::mutable_sr_y_liru() {
  set_has_sr_y_liru();
  if (sr_y_liru_ == NULL) {
    sr_y_liru_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_liru)
  return sr_y_liru_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::release_sr_y_liru() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_liru)
  clear_has_sr_y_liru();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* temp = sr_y_liru_;
  sr_y_liru_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_sr_y_liru(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_y_liru) {
  delete sr_y_liru_;
  sr_y_liru_ = sr_y_liru;
  if (sr_y_liru) {
    set_has_sr_y_liru();
  } else {
    clear_has_sr_y_liru();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_liru)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Sr sr_y_kws = 15;
inline bool QInfo_Statistic::has_sr_y_kws() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void QInfo_Statistic::set_has_sr_y_kws() {
  _has_bits_[0] |= 0x00002000u;
}
inline void QInfo_Statistic::clear_has_sr_y_kws() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void QInfo_Statistic::clear_sr_y_kws() {
  if (sr_y_kws_ != NULL) sr_y_kws_->::ru::mail::go::webbase::serp::QInfo_Statistic_Sr::Clear();
  clear_has_sr_y_kws();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr& QInfo_Statistic::sr_y_kws() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* p = sr_y_kws_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_kws)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Sr_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::mutable_sr_y_kws() {
  set_has_sr_y_kws();
  if (sr_y_kws_ == NULL) {
    sr_y_kws_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_kws)
  return sr_y_kws_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* QInfo_Statistic::release_sr_y_kws() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_kws)
  clear_has_sr_y_kws();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* temp = sr_y_kws_;
  sr_y_kws_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_sr_y_kws(::ru::mail::go::webbase::serp::QInfo_Statistic_Sr* sr_y_kws) {
  delete sr_y_kws_;
  sr_y_kws_ = sr_y_kws;
  if (sr_y_kws) {
    set_has_sr_y_kws();
  } else {
    clear_has_sr_y_kws();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.sr_y_kws)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_y = 16;
inline bool QInfo_Statistic::has_br_y() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void QInfo_Statistic::set_has_br_y() {
  _has_bits_[0] |= 0x00004000u;
}
inline void QInfo_Statistic::clear_has_br_y() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void QInfo_Statistic::clear_br_y() {
  if (br_y_ != NULL) br_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_Br::Clear();
  clear_has_br_y();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br& QInfo_Statistic::br_y() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* p = br_y_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.br_y)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Br_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* QInfo_Statistic::mutable_br_y() {
  set_has_br_y();
  if (br_y_ == NULL) {
    br_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Br;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.br_y)
  return br_y_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* QInfo_Statistic::release_br_y() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.br_y)
  clear_has_br_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* temp = br_y_;
  br_y_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_br_y(::ru::mail::go::webbase::serp::QInfo_Statistic_Br* br_y) {
  delete br_y_;
  br_y_ = br_y;
  if (br_y) {
    set_has_br_y();
  } else {
    clear_has_br_y();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.br_y)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_g = 17;
inline bool QInfo_Statistic::has_br_g() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void QInfo_Statistic::set_has_br_g() {
  _has_bits_[0] |= 0x00008000u;
}
inline void QInfo_Statistic::clear_has_br_g() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void QInfo_Statistic::clear_br_g() {
  if (br_g_ != NULL) br_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_Br::Clear();
  clear_has_br_g();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br& QInfo_Statistic::br_g() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* p = br_g_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.br_g)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Br_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* QInfo_Statistic::mutable_br_g() {
  set_has_br_g();
  if (br_g_ == NULL) {
    br_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Br;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.br_g)
  return br_g_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* QInfo_Statistic::release_br_g() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.br_g)
  clear_has_br_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* temp = br_g_;
  br_g_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_br_g(::ru::mail::go::webbase::serp::QInfo_Statistic_Br* br_g) {
  delete br_g_;
  br_g_ = br_g;
  if (br_g) {
    set_has_br_g();
  } else {
    clear_has_br_g();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.br_g)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Br br_m = 18;
inline bool QInfo_Statistic::has_br_m() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void QInfo_Statistic::set_has_br_m() {
  _has_bits_[0] |= 0x00010000u;
}
inline void QInfo_Statistic::clear_has_br_m() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void QInfo_Statistic::clear_br_m() {
  if (br_m_ != NULL) br_m_->::ru::mail::go::webbase::serp::QInfo_Statistic_Br::Clear();
  clear_has_br_m();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br& QInfo_Statistic::br_m() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* p = br_m_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.br_m)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Br*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Br_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* QInfo_Statistic::mutable_br_m() {
  set_has_br_m();
  if (br_m_ == NULL) {
    br_m_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Br;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.br_m)
  return br_m_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* QInfo_Statistic::release_br_m() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.br_m)
  clear_has_br_m();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Br* temp = br_m_;
  br_m_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_br_m(::ru::mail::go::webbase::serp::QInfo_Statistic_Br* br_m) {
  delete br_m_;
  br_m_ = br_m;
  if (br_m) {
    set_has_br_m();
  } else {
    clear_has_br_m();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.br_m)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_y = 19;
inline bool QInfo_Statistic::has_nal_y() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void QInfo_Statistic::set_has_nal_y() {
  _has_bits_[0] |= 0x00020000u;
}
inline void QInfo_Statistic::clear_has_nal_y() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void QInfo_Statistic::clear_nal_y() {
  if (nal_y_ != NULL) nal_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_Nal::Clear();
  clear_has_nal_y();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal& QInfo_Statistic::nal_y() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* p = nal_y_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.nal_y)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Nal_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* QInfo_Statistic::mutable_nal_y() {
  set_has_nal_y();
  if (nal_y_ == NULL) {
    nal_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.nal_y)
  return nal_y_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* QInfo_Statistic::release_nal_y() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.nal_y)
  clear_has_nal_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* temp = nal_y_;
  nal_y_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_nal_y(::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* nal_y) {
  delete nal_y_;
  nal_y_ = nal_y;
  if (nal_y) {
    set_has_nal_y();
  } else {
    clear_has_nal_y();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.nal_y)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_g = 20;
inline bool QInfo_Statistic::has_nal_g() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void QInfo_Statistic::set_has_nal_g() {
  _has_bits_[0] |= 0x00040000u;
}
inline void QInfo_Statistic::clear_has_nal_g() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void QInfo_Statistic::clear_nal_g() {
  if (nal_g_ != NULL) nal_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_Nal::Clear();
  clear_has_nal_g();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal& QInfo_Statistic::nal_g() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* p = nal_g_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.nal_g)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Nal_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* QInfo_Statistic::mutable_nal_g() {
  set_has_nal_g();
  if (nal_g_ == NULL) {
    nal_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.nal_g)
  return nal_g_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* QInfo_Statistic::release_nal_g() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.nal_g)
  clear_has_nal_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* temp = nal_g_;
  nal_g_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_nal_g(::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* nal_g) {
  delete nal_g_;
  nal_g_ = nal_g;
  if (nal_g) {
    set_has_nal_g();
  } else {
    clear_has_nal_g();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.nal_g)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nal nal_mg = 21;
inline bool QInfo_Statistic::has_nal_mg() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void QInfo_Statistic::set_has_nal_mg() {
  _has_bits_[0] |= 0x00080000u;
}
inline void QInfo_Statistic::clear_has_nal_mg() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void QInfo_Statistic::clear_nal_mg() {
  if (nal_mg_ != NULL) nal_mg_->::ru::mail::go::webbase::serp::QInfo_Statistic_Nal::Clear();
  clear_has_nal_mg();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal& QInfo_Statistic::nal_mg() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* p = nal_mg_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.nal_mg)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Nal_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* QInfo_Statistic::mutable_nal_mg() {
  set_has_nal_mg();
  if (nal_mg_ == NULL) {
    nal_mg_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.nal_mg)
  return nal_mg_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* QInfo_Statistic::release_nal_mg() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.nal_mg)
  clear_has_nal_mg();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* temp = nal_mg_;
  nal_mg_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_nal_mg(::ru::mail::go::webbase::serp::QInfo_Statistic_Nal* nal_mg) {
  delete nal_mg_;
  nal_mg_ = nal_mg;
  if (nal_mg) {
    set_has_nal_mg();
  } else {
    clear_has_nal_mg();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.nal_mg)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Nvg nvg_mdl = 22;
inline bool QInfo_Statistic::has_nvg_mdl() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void QInfo_Statistic::set_has_nvg_mdl() {
  _has_bits_[0] |= 0x00100000u;
}
inline void QInfo_Statistic::clear_has_nvg_mdl() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void QInfo_Statistic::clear_nvg_mdl() {
  if (nvg_mdl_ != NULL) nvg_mdl_->::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg::Clear();
  clear_has_nvg_mdl();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg& QInfo_Statistic::nvg_mdl() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg* p = nvg_mdl_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.nvg_mdl)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Nvg_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg* QInfo_Statistic::mutable_nvg_mdl() {
  set_has_nvg_mdl();
  if (nvg_mdl_ == NULL) {
    nvg_mdl_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.nvg_mdl)
  return nvg_mdl_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg* QInfo_Statistic::release_nvg_mdl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.nvg_mdl)
  clear_has_nvg_mdl();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg* temp = nvg_mdl_;
  nvg_mdl_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_nvg_mdl(::ru::mail::go::webbase::serp::QInfo_Statistic_Nvg* nvg_mdl) {
  delete nvg_mdl_;
  nvg_mdl_ = nvg_mdl;
  if (nvg_mdl) {
    set_has_nvg_mdl();
  } else {
    clear_has_nvg_mdl();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.nvg_mdl)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Vrt vrt_mdl = 23;
inline bool QInfo_Statistic::has_vrt_mdl() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void QInfo_Statistic::set_has_vrt_mdl() {
  _has_bits_[0] |= 0x00200000u;
}
inline void QInfo_Statistic::clear_has_vrt_mdl() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void QInfo_Statistic::clear_vrt_mdl() {
  if (vrt_mdl_ != NULL) vrt_mdl_->::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt::Clear();
  clear_has_vrt_mdl();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt& QInfo_Statistic::vrt_mdl() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt* p = vrt_mdl_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.vrt_mdl)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Vrt_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt* QInfo_Statistic::mutable_vrt_mdl() {
  set_has_vrt_mdl();
  if (vrt_mdl_ == NULL) {
    vrt_mdl_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.vrt_mdl)
  return vrt_mdl_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt* QInfo_Statistic::release_vrt_mdl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.vrt_mdl)
  clear_has_vrt_mdl();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt* temp = vrt_mdl_;
  vrt_mdl_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_vrt_mdl(::ru::mail::go::webbase::serp::QInfo_Statistic_Vrt* vrt_mdl) {
  delete vrt_mdl_;
  vrt_mdl_ = vrt_mdl;
  if (vrt_mdl) {
    set_has_vrt_mdl();
  } else {
    clear_has_vrt_mdl();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.vrt_mdl)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.CrImg cr_img = 24;
inline bool QInfo_Statistic::has_cr_img() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void QInfo_Statistic::set_has_cr_img() {
  _has_bits_[0] |= 0x00400000u;
}
inline void QInfo_Statistic::clear_has_cr_img() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void QInfo_Statistic::clear_cr_img() {
  if (cr_img_ != NULL) cr_img_->::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg::Clear();
  clear_has_cr_img();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg& QInfo_Statistic::cr_img() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg* p = cr_img_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_img)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_CrImg_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg* QInfo_Statistic::mutable_cr_img() {
  set_has_cr_img();
  if (cr_img_ == NULL) {
    cr_img_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_img)
  return cr_img_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg* QInfo_Statistic::release_cr_img() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.cr_img)
  clear_has_cr_img();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg* temp = cr_img_;
  cr_img_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_cr_img(::ru::mail::go::webbase::serp::QInfo_Statistic_CrImg* cr_img) {
  delete cr_img_;
  cr_img_ = cr_img;
  if (cr_img) {
    set_has_cr_img();
  } else {
    clear_has_cr_img();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.cr_img)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_y = 25;
inline bool QInfo_Statistic::has_al_img_y() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void QInfo_Statistic::set_has_al_img_y() {
  _has_bits_[0] |= 0x00800000u;
}
inline void QInfo_Statistic::clear_has_al_img_y() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void QInfo_Statistic::clear_al_img_y() {
  if (al_img_y_ != NULL) al_img_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg::Clear();
  clear_has_al_img_y();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg& QInfo_Statistic::al_img_y() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* p = al_img_y_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_y)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_AlImg_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* QInfo_Statistic::mutable_al_img_y() {
  set_has_al_img_y();
  if (al_img_y_ == NULL) {
    al_img_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_y)
  return al_img_y_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* QInfo_Statistic::release_al_img_y() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_y)
  clear_has_al_img_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* temp = al_img_y_;
  al_img_y_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_al_img_y(::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* al_img_y) {
  delete al_img_y_;
  al_img_y_ = al_img_y;
  if (al_img_y) {
    set_has_al_img_y();
  } else {
    clear_has_al_img_y();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_y)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_g = 26;
inline bool QInfo_Statistic::has_al_img_g() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void QInfo_Statistic::set_has_al_img_g() {
  _has_bits_[0] |= 0x01000000u;
}
inline void QInfo_Statistic::clear_has_al_img_g() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void QInfo_Statistic::clear_al_img_g() {
  if (al_img_g_ != NULL) al_img_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg::Clear();
  clear_has_al_img_g();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg& QInfo_Statistic::al_img_g() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* p = al_img_g_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_g)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_AlImg_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* QInfo_Statistic::mutable_al_img_g() {
  set_has_al_img_g();
  if (al_img_g_ == NULL) {
    al_img_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_g)
  return al_img_g_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* QInfo_Statistic::release_al_img_g() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_g)
  clear_has_al_img_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* temp = al_img_g_;
  al_img_g_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_al_img_g(::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* al_img_g) {
  delete al_img_g_;
  al_img_g_ = al_img_g;
  if (al_img_g) {
    set_has_al_img_g();
  } else {
    clear_has_al_img_g();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_g)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.AlImg al_img_gmx = 27;
inline bool QInfo_Statistic::has_al_img_gmx() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void QInfo_Statistic::set_has_al_img_gmx() {
  _has_bits_[0] |= 0x02000000u;
}
inline void QInfo_Statistic::clear_has_al_img_gmx() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void QInfo_Statistic::clear_al_img_gmx() {
  if (al_img_gmx_ != NULL) al_img_gmx_->::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg::Clear();
  clear_has_al_img_gmx();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg& QInfo_Statistic::al_img_gmx() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* p = al_img_gmx_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_gmx)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_AlImg_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* QInfo_Statistic::mutable_al_img_gmx() {
  set_has_al_img_gmx();
  if (al_img_gmx_ == NULL) {
    al_img_gmx_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_gmx)
  return al_img_gmx_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* QInfo_Statistic::release_al_img_gmx() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_gmx)
  clear_has_al_img_gmx();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* temp = al_img_gmx_;
  al_img_gmx_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_al_img_gmx(::ru::mail::go::webbase::serp::QInfo_Statistic_AlImg* al_img_gmx) {
  delete al_img_gmx_;
  al_img_gmx_ = al_img_gmx;
  if (al_img_gmx) {
    set_has_al_img_gmx();
  } else {
    clear_has_al_img_gmx();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.al_img_gmx)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp essr_exp_y = 28;
inline bool QInfo_Statistic::has_essr_exp_y() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void QInfo_Statistic::set_has_essr_exp_y() {
  _has_bits_[0] |= 0x04000000u;
}
inline void QInfo_Statistic::clear_has_essr_exp_y() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void QInfo_Statistic::clear_essr_exp_y() {
  if (essr_exp_y_ != NULL) essr_exp_y_->::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp::Clear();
  clear_has_essr_exp_y();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp& QInfo_Statistic::essr_exp_y() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* p = essr_exp_y_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.essr_exp_y)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_ESSRexp_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* QInfo_Statistic::mutable_essr_exp_y() {
  set_has_essr_exp_y();
  if (essr_exp_y_ == NULL) {
    essr_exp_y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.essr_exp_y)
  return essr_exp_y_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* QInfo_Statistic::release_essr_exp_y() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.essr_exp_y)
  clear_has_essr_exp_y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* temp = essr_exp_y_;
  essr_exp_y_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_essr_exp_y(::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* essr_exp_y) {
  delete essr_exp_y_;
  essr_exp_y_ = essr_exp_y;
  if (essr_exp_y) {
    set_has_essr_exp_y();
  } else {
    clear_has_essr_exp_y();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.essr_exp_y)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.ESSRexp essr_exp_g = 29;
inline bool QInfo_Statistic::has_essr_exp_g() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void QInfo_Statistic::set_has_essr_exp_g() {
  _has_bits_[0] |= 0x08000000u;
}
inline void QInfo_Statistic::clear_has_essr_exp_g() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void QInfo_Statistic::clear_essr_exp_g() {
  if (essr_exp_g_ != NULL) essr_exp_g_->::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp::Clear();
  clear_has_essr_exp_g();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp& QInfo_Statistic::essr_exp_g() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* p = essr_exp_g_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.essr_exp_g)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_ESSRexp_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* QInfo_Statistic::mutable_essr_exp_g() {
  set_has_essr_exp_g();
  if (essr_exp_g_ == NULL) {
    essr_exp_g_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.essr_exp_g)
  return essr_exp_g_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* QInfo_Statistic::release_essr_exp_g() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.essr_exp_g)
  clear_has_essr_exp_g();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* temp = essr_exp_g_;
  essr_exp_g_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_essr_exp_g(::ru::mail::go::webbase::serp::QInfo_Statistic_ESSRexp* essr_exp_g) {
  delete essr_exp_g_;
  essr_exp_g_ = essr_exp_g;
  if (essr_exp_g) {
    set_has_essr_exp_g();
  } else {
    clear_has_essr_exp_g();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.essr_exp_g)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Freq freq_m_3y = 30;
inline bool QInfo_Statistic::has_freq_m_3y() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void QInfo_Statistic::set_has_freq_m_3y() {
  _has_bits_[0] |= 0x10000000u;
}
inline void QInfo_Statistic::clear_has_freq_m_3y() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void QInfo_Statistic::clear_freq_m_3y() {
  if (freq_m_3y_ != NULL) freq_m_3y_->::ru::mail::go::webbase::serp::QInfo_Statistic_Freq::Clear();
  clear_has_freq_m_3y();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq& QInfo_Statistic::freq_m_3y() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq* p = freq_m_3y_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.freq_m_3y)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Freq_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq* QInfo_Statistic::mutable_freq_m_3y() {
  set_has_freq_m_3y();
  if (freq_m_3y_ == NULL) {
    freq_m_3y_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.freq_m_3y)
  return freq_m_3y_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq* QInfo_Statistic::release_freq_m_3y() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.freq_m_3y)
  clear_has_freq_m_3y();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Freq* temp = freq_m_3y_;
  freq_m_3y_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_freq_m_3y(::ru::mail::go::webbase::serp::QInfo_Statistic_Freq* freq_m_3y) {
  delete freq_m_3y_;
  freq_m_3y_ = freq_m_3y;
  if (freq_m_3y) {
    set_has_freq_m_3y();
  } else {
    clear_has_freq_m_3y();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.freq_m_3y)
}

// repeated .ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin cr_m_mixins = 31;
inline int QInfo_Statistic::cr_m_mixins_size() const {
  return cr_m_mixins_.size();
}
inline void QInfo_Statistic::clear_cr_m_mixins() {
  cr_m_mixins_.Clear();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin& QInfo_Statistic::cr_m_mixins(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mixins)
  return cr_m_mixins_.Get(index);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin* QInfo_Statistic::mutable_cr_m_mixins(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mixins)
  return cr_m_mixins_.Mutable(index);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin* QInfo_Statistic::add_cr_m_mixins() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mixins)
  return cr_m_mixins_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin >*
QInfo_Statistic::mutable_cr_m_mixins() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mixins)
  return &cr_m_mixins_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin >&
QInfo_Statistic::cr_m_mixins() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mixins)
  return cr_m_mixins_;
}

// repeated .ru.mail.go.webbase.serp.QInfo.Statistic.Intent int_m = 32;
inline int QInfo_Statistic::int_m_size() const {
  return int_m_.size();
}
inline void QInfo_Statistic::clear_int_m() {
  int_m_.Clear();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent& QInfo_Statistic::int_m(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.int_m)
  return int_m_.Get(index);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent* QInfo_Statistic::mutable_int_m(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.int_m)
  return int_m_.Mutable(index);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent* QInfo_Statistic::add_int_m() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QInfo.Statistic.int_m)
  return int_m_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent >*
QInfo_Statistic::mutable_int_m() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QInfo.Statistic.int_m)
  return &int_m_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent >&
QInfo_Statistic::int_m() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QInfo.Statistic.int_m)
  return int_m_;
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.CrVdo cr_vdo = 33;
inline bool QInfo_Statistic::has_cr_vdo() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void QInfo_Statistic::set_has_cr_vdo() {
  _has_bits_[0] |= 0x20000000u;
}
inline void QInfo_Statistic::clear_has_cr_vdo() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void QInfo_Statistic::clear_cr_vdo() {
  if (cr_vdo_ != NULL) cr_vdo_->::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo::Clear();
  clear_has_cr_vdo();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo& QInfo_Statistic::cr_vdo() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo* p = cr_vdo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_vdo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_CrVdo_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo* QInfo_Statistic::mutable_cr_vdo() {
  set_has_cr_vdo();
  if (cr_vdo_ == NULL) {
    cr_vdo_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_vdo)
  return cr_vdo_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo* QInfo_Statistic::release_cr_vdo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.cr_vdo)
  clear_has_cr_vdo();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo* temp = cr_vdo_;
  cr_vdo_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_cr_vdo(::ru::mail::go::webbase::serp::QInfo_Statistic_CrVdo* cr_vdo) {
  delete cr_vdo_;
  cr_vdo_ = cr_vdo;
  if (cr_vdo) {
    set_has_cr_vdo();
  } else {
    clear_has_cr_vdo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.cr_vdo)
}

// optional .ru.mail.go.webbase.serp.QInfo.Statistic.Cr cr_m_mob = 34;
inline bool QInfo_Statistic::has_cr_m_mob() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void QInfo_Statistic::set_has_cr_m_mob() {
  _has_bits_[0] |= 0x40000000u;
}
inline void QInfo_Statistic::clear_has_cr_m_mob() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void QInfo_Statistic::clear_cr_m_mob() {
  if (cr_m_mob_ != NULL) cr_m_mob_->::ru::mail::go::webbase::serp::QInfo_Statistic_Cr::Clear();
  clear_has_cr_m_mob();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr& QInfo_Statistic::cr_m_mob() const {
  const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* p = cr_m_mob_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr*>(
      &::ru::mail::go::webbase::serp::_QInfo_Statistic_Cr_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::mutable_cr_m_mob() {
  set_has_cr_m_mob();
  if (cr_m_mob_ == NULL) {
    cr_m_mob_ = new ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob)
  return cr_m_mob_;
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* QInfo_Statistic::release_cr_m_mob() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob)
  clear_has_cr_m_mob();
  ::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* temp = cr_m_mob_;
  cr_m_mob_ = NULL;
  return temp;
}
inline void QInfo_Statistic::set_allocated_cr_m_mob(::ru::mail::go::webbase::serp::QInfo_Statistic_Cr* cr_m_mob) {
  delete cr_m_mob_;
  cr_m_mob_ = cr_m_mob;
  if (cr_m_mob) {
    set_has_cr_m_mob();
  } else {
    clear_has_cr_m_mob();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob)
}

// repeated .ru.mail.go.webbase.serp.QInfo.Statistic.CrMixin cr_m_mob_mixins = 35;
inline int QInfo_Statistic::cr_m_mob_mixins_size() const {
  return cr_m_mob_mixins_.size();
}
inline void QInfo_Statistic::clear_cr_m_mob_mixins() {
  cr_m_mob_mixins_.Clear();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin& QInfo_Statistic::cr_m_mob_mixins(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob_mixins)
  return cr_m_mob_mixins_.Get(index);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin* QInfo_Statistic::mutable_cr_m_mob_mixins(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob_mixins)
  return cr_m_mob_mixins_.Mutable(index);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin* QInfo_Statistic::add_cr_m_mob_mixins() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob_mixins)
  return cr_m_mob_mixins_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin >*
QInfo_Statistic::mutable_cr_m_mob_mixins() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob_mixins)
  return &cr_m_mob_mixins_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_CrMixin >&
QInfo_Statistic::cr_m_mob_mixins() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QInfo.Statistic.cr_m_mob_mixins)
  return cr_m_mob_mixins_;
}

// repeated .ru.mail.go.webbase.serp.QInfo.Statistic.Intent int_m_mob = 36;
inline int QInfo_Statistic::int_m_mob_size() const {
  return int_m_mob_.size();
}
inline void QInfo_Statistic::clear_int_m_mob() {
  int_m_mob_.Clear();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent& QInfo_Statistic::int_m_mob(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.Statistic.int_m_mob)
  return int_m_mob_.Get(index);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent* QInfo_Statistic::mutable_int_m_mob(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.Statistic.int_m_mob)
  return int_m_mob_.Mutable(index);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent* QInfo_Statistic::add_int_m_mob() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QInfo.Statistic.int_m_mob)
  return int_m_mob_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent >*
QInfo_Statistic::mutable_int_m_mob() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QInfo.Statistic.int_m_mob)
  return &int_m_mob_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic_Intent >&
QInfo_Statistic::int_m_mob() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QInfo.Statistic.int_m_mob)
  return int_m_mob_;
}

// -------------------------------------------------------------------

// QInfo

// optional string query_text = 1;
inline bool QInfo::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QInfo::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QInfo::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QInfo::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
inline const ::std::string& QInfo::query_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.query_text)
  return query_text_.GetNoArena();
}
inline void QInfo::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.query_text)
}
#if LANG_CXX11
inline void QInfo::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.serp.QInfo.query_text)
}
#endif
inline void QInfo::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.serp.QInfo.query_text)
}
inline void QInfo::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.serp.QInfo.query_text)
}
inline ::std::string* QInfo::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QInfo::release_query_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QInfo.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QInfo::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QInfo.query_text)
}

// repeated .ru.mail.go.webbase.serp.QInfo.Statistic stat = 2;
inline int QInfo::stat_size() const {
  return stat_.size();
}
inline void QInfo::clear_stat() {
  stat_.Clear();
}
inline const ::ru::mail::go::webbase::serp::QInfo_Statistic& QInfo::stat(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.stat)
  return stat_.Get(index);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic* QInfo::mutable_stat(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QInfo.stat)
  return stat_.Mutable(index);
}
inline ::ru::mail::go::webbase::serp::QInfo_Statistic* QInfo::add_stat() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QInfo.stat)
  return stat_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic >*
QInfo::mutable_stat() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QInfo.stat)
  return &stat_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QInfo_Statistic >&
QInfo::stat() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QInfo.stat)
  return stat_;
}

// optional bool is_geo = 3;
inline bool QInfo::has_is_geo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QInfo::set_has_is_geo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QInfo::clear_has_is_geo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QInfo::clear_is_geo() {
  is_geo_ = false;
  clear_has_is_geo();
}
inline bool QInfo::is_geo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QInfo.is_geo)
  return is_geo_;
}
inline void QInfo::set_is_geo(bool value) {
  set_has_is_geo();
  is_geo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QInfo.is_geo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace serp
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_qinformer_2eproto__INCLUDED
