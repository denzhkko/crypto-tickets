// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: readers_records.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "readers_records.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace readers {
class LogmanLogRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LogmanLogRecord>
     _instance;
} _LogmanLogRecord_default_instance_;

namespace protobuf_readers_5frecords_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogmanLogRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogmanLogRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogmanLogRecord, remote_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogmanLogRecord, unixts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogmanLogRecord, request_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogmanLogRecord, request_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogmanLogRecord, query_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogmanLogRecord, http_referrer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogmanLogRecord, user_agent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogmanLogRecord, cookies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogmanLogRecord, response_code_),
  0,
  6,
  7,
  1,
  2,
  3,
  4,
  5,
  8,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(LogmanLogRecord)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogmanLogRecord_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "readers_records.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _LogmanLogRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LogmanLogRecord_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025readers_records.proto\022\032ru.mail.go.webb"
      "ase.readers\"\365\001\n\017LogmanLogRecord\022\023\n\013remot"
      "e_addr\030\001 \002(\t\022\016\n\006unixts\030\002 \002(\007\022>\n\016request_"
      "method\030\003 \002(\0162&.ru.mail.go.webbase.reader"
      "s.HTTPMethod\022\024\n\014request_path\030\004 \002(\t\022\024\n\014qu"
      "ery_string\030\005 \001(\t\022\025\n\rhttp_referrer\030\006 \001(\t\022"
      "\022\n\nuser_agent\030\007 \001(\t\022\017\n\007cookies\030\010 \001(\t\022\025\n\r"
      "response_code\030\t \001(\r*n\n\nHTTPMethod\022\007\n\003GET"
      "\020\000\022\010\n\004POST\020\001\022\010\n\004HEAD\020\002\022\007\n\003PUT\020\003\022\n\n\006DELET"
      "E\020\004\022\t\n\005TRACE\020\005\022\013\n\007OPTIONS\020\006\022\013\n\007CONNECT\020\007"
      "\022\t\n\005PATCH\020\010B\014B\nLogRecords"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 425);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "readers_records.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_readers_5frecords_2eproto

const ::google::protobuf::EnumDescriptor* HTTPMethod_descriptor() {
  protobuf_readers_5frecords_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_readers_5frecords_2eproto::file_level_enum_descriptors[0];
}
bool HTTPMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogmanLogRecord::kRemoteAddrFieldNumber;
const int LogmanLogRecord::kUnixtsFieldNumber;
const int LogmanLogRecord::kRequestMethodFieldNumber;
const int LogmanLogRecord::kRequestPathFieldNumber;
const int LogmanLogRecord::kQueryStringFieldNumber;
const int LogmanLogRecord::kHttpReferrerFieldNumber;
const int LogmanLogRecord::kUserAgentFieldNumber;
const int LogmanLogRecord::kCookiesFieldNumber;
const int LogmanLogRecord::kResponseCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogmanLogRecord::LogmanLogRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_readers_5frecords_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.readers.LogmanLogRecord)
}
LogmanLogRecord::LogmanLogRecord(const LogmanLogRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_remote_addr()) {
    remote_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_addr_);
  }
  request_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_path()) {
    request_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_path_);
  }
  query_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_string()) {
    query_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_string_);
  }
  http_referrer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_http_referrer()) {
    http_referrer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_referrer_);
  }
  user_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_agent()) {
    user_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
  }
  cookies_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cookies()) {
    cookies_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cookies_);
  }
  ::memcpy(&unixts_, &from.unixts_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_code_) -
    reinterpret_cast<char*>(&unixts_)) + sizeof(response_code_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.readers.LogmanLogRecord)
}

void LogmanLogRecord::SharedCtor() {
  _cached_size_ = 0;
  remote_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_referrer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cookies_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&unixts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_code_) -
      reinterpret_cast<char*>(&unixts_)) + sizeof(response_code_));
}

LogmanLogRecord::~LogmanLogRecord() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.readers.LogmanLogRecord)
  SharedDtor();
}

void LogmanLogRecord::SharedDtor() {
  remote_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_referrer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cookies_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogmanLogRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogmanLogRecord::descriptor() {
  protobuf_readers_5frecords_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_readers_5frecords_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogmanLogRecord& LogmanLogRecord::default_instance() {
  protobuf_readers_5frecords_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogmanLogRecord* LogmanLogRecord::New(::google::protobuf::Arena* arena) const {
  LogmanLogRecord* n = new LogmanLogRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogmanLogRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.readers.LogmanLogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!remote_addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*remote_addr_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!request_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*request_path_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!query_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_string_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!http_referrer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*http_referrer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!user_agent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_agent_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!cookies_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cookies_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&unixts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_method_) -
        reinterpret_cast<char*>(&unixts_)) + sizeof(request_method_));
  }
  response_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogmanLogRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.readers.LogmanLogRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string remote_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remote_addr().data(), static_cast<int>(this->remote_addr().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.readers.LogmanLogRecord.remote_addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required fixed32 unixts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_unixts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &unixts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.readers.HTTPMethod request_method = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::readers::HTTPMethod_IsValid(value)) {
            set_request_method(static_cast< ::ru::mail::go::webbase::readers::HTTPMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string request_path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_path().data(), static_cast<int>(this->request_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.readers.LogmanLogRecord.request_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query_string = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_string().data(), static_cast<int>(this->query_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.readers.LogmanLogRecord.query_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string http_referrer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_referrer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_referrer().data(), static_cast<int>(this->http_referrer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.readers.LogmanLogRecord.http_referrer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_agent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_agent().data(), static_cast<int>(this->user_agent().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.readers.LogmanLogRecord.user_agent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cookies = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookies()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cookies().data(), static_cast<int>(this->cookies().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.readers.LogmanLogRecord.cookies");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 response_code = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_response_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.readers.LogmanLogRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.readers.LogmanLogRecord)
  return false;
#undef DO_
}

void LogmanLogRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.readers.LogmanLogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string remote_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remote_addr().data(), static_cast<int>(this->remote_addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.readers.LogmanLogRecord.remote_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->remote_addr(), output);
  }

  // required fixed32 unixts = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->unixts(), output);
  }

  // required .ru.mail.go.webbase.readers.HTTPMethod request_method = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->request_method(), output);
  }

  // required string request_path = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_path().data(), static_cast<int>(this->request_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.readers.LogmanLogRecord.request_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_path(), output);
  }

  // optional string query_string = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_string().data(), static_cast<int>(this->query_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.readers.LogmanLogRecord.query_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->query_string(), output);
  }

  // optional string http_referrer = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_referrer().data(), static_cast<int>(this->http_referrer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.readers.LogmanLogRecord.http_referrer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->http_referrer(), output);
  }

  // optional string user_agent = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), static_cast<int>(this->user_agent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.readers.LogmanLogRecord.user_agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->user_agent(), output);
  }

  // optional string cookies = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cookies().data(), static_cast<int>(this->cookies().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.readers.LogmanLogRecord.cookies");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->cookies(), output);
  }

  // optional uint32 response_code = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->response_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.readers.LogmanLogRecord)
}

::google::protobuf::uint8* LogmanLogRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.readers.LogmanLogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string remote_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remote_addr().data(), static_cast<int>(this->remote_addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.readers.LogmanLogRecord.remote_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->remote_addr(), target);
  }

  // required fixed32 unixts = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->unixts(), target);
  }

  // required .ru.mail.go.webbase.readers.HTTPMethod request_method = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->request_method(), target);
  }

  // required string request_path = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_path().data(), static_cast<int>(this->request_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.readers.LogmanLogRecord.request_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_path(), target);
  }

  // optional string query_string = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_string().data(), static_cast<int>(this->query_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.readers.LogmanLogRecord.query_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->query_string(), target);
  }

  // optional string http_referrer = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_referrer().data(), static_cast<int>(this->http_referrer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.readers.LogmanLogRecord.http_referrer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->http_referrer(), target);
  }

  // optional string user_agent = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), static_cast<int>(this->user_agent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.readers.LogmanLogRecord.user_agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->user_agent(), target);
  }

  // optional string cookies = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cookies().data(), static_cast<int>(this->cookies().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.readers.LogmanLogRecord.cookies");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->cookies(), target);
  }

  // optional uint32 response_code = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->response_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.readers.LogmanLogRecord)
  return target;
}

size_t LogmanLogRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.readers.LogmanLogRecord)
  size_t total_size = 0;

  if (has_remote_addr()) {
    // required string remote_addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remote_addr());
  }

  if (has_request_path()) {
    // required string request_path = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_path());
  }

  if (has_unixts()) {
    // required fixed32 unixts = 2;
    total_size += 1 + 4;
  }

  if (has_request_method()) {
    // required .ru.mail.go.webbase.readers.HTTPMethod request_method = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_method());
  }

  return total_size;
}
size_t LogmanLogRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.readers.LogmanLogRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000c3) ^ 0x000000c3) == 0) {  // All required fields are present.
    // required string remote_addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remote_addr());

    // required string request_path = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_path());

    // required fixed32 unixts = 2;
    total_size += 1 + 4;

    // required .ru.mail.go.webbase.readers.HTTPMethod request_method = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_method());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 60u) {
    // optional string query_string = 5;
    if (has_query_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_string());
    }

    // optional string http_referrer = 6;
    if (has_http_referrer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_referrer());
    }

    // optional string user_agent = 7;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

    // optional string cookies = 8;
    if (has_cookies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookies());
    }

  }
  // optional uint32 response_code = 9;
  if (has_response_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->response_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogmanLogRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.readers.LogmanLogRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const LogmanLogRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogmanLogRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.readers.LogmanLogRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.readers.LogmanLogRecord)
    MergeFrom(*source);
  }
}

void LogmanLogRecord::MergeFrom(const LogmanLogRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.readers.LogmanLogRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_remote_addr();
      remote_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_path();
      request_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_query_string();
      query_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_string_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_http_referrer();
      http_referrer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_referrer_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_user_agent();
      user_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_cookies();
      cookies_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cookies_);
    }
    if (cached_has_bits & 0x00000040u) {
      unixts_ = from.unixts_;
    }
    if (cached_has_bits & 0x00000080u) {
      request_method_ = from.request_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_response_code(from.response_code());
  }
}

void LogmanLogRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.readers.LogmanLogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogmanLogRecord::CopyFrom(const LogmanLogRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.readers.LogmanLogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogmanLogRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c3) != 0x000000c3) return false;
  return true;
}

void LogmanLogRecord::Swap(LogmanLogRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogmanLogRecord::InternalSwap(LogmanLogRecord* other) {
  using std::swap;
  remote_addr_.Swap(&other->remote_addr_);
  request_path_.Swap(&other->request_path_);
  query_string_.Swap(&other->query_string_);
  http_referrer_.Swap(&other->http_referrer_);
  user_agent_.Swap(&other->user_agent_);
  cookies_.Swap(&other->cookies_);
  swap(unixts_, other->unixts_);
  swap(request_method_, other->request_method_);
  swap(response_code_, other->response_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogmanLogRecord::GetMetadata() const {
  protobuf_readers_5frecords_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_readers_5frecords_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogmanLogRecord

// required string remote_addr = 1;
bool LogmanLogRecord::has_remote_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogmanLogRecord::set_has_remote_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void LogmanLogRecord::clear_has_remote_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogmanLogRecord::clear_remote_addr() {
  remote_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_remote_addr();
}
const ::std::string& LogmanLogRecord::remote_addr() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.readers.LogmanLogRecord.remote_addr)
  return remote_addr_.GetNoArena();
}
void LogmanLogRecord::set_remote_addr(const ::std::string& value) {
  set_has_remote_addr();
  remote_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.readers.LogmanLogRecord.remote_addr)
}
#if LANG_CXX11
void LogmanLogRecord::set_remote_addr(::std::string&& value) {
  set_has_remote_addr();
  remote_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.readers.LogmanLogRecord.remote_addr)
}
#endif
void LogmanLogRecord::set_remote_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_remote_addr();
  remote_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.readers.LogmanLogRecord.remote_addr)
}
void LogmanLogRecord::set_remote_addr(const char* value, size_t size) {
  set_has_remote_addr();
  remote_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.readers.LogmanLogRecord.remote_addr)
}
::std::string* LogmanLogRecord::mutable_remote_addr() {
  set_has_remote_addr();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.readers.LogmanLogRecord.remote_addr)
  return remote_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogmanLogRecord::release_remote_addr() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.readers.LogmanLogRecord.remote_addr)
  clear_has_remote_addr();
  return remote_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogmanLogRecord::set_allocated_remote_addr(::std::string* remote_addr) {
  if (remote_addr != NULL) {
    set_has_remote_addr();
  } else {
    clear_has_remote_addr();
  }
  remote_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_addr);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.readers.LogmanLogRecord.remote_addr)
}

// required fixed32 unixts = 2;
bool LogmanLogRecord::has_unixts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LogmanLogRecord::set_has_unixts() {
  _has_bits_[0] |= 0x00000040u;
}
void LogmanLogRecord::clear_has_unixts() {
  _has_bits_[0] &= ~0x00000040u;
}
void LogmanLogRecord::clear_unixts() {
  unixts_ = 0u;
  clear_has_unixts();
}
::google::protobuf::uint32 LogmanLogRecord::unixts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.readers.LogmanLogRecord.unixts)
  return unixts_;
}
void LogmanLogRecord::set_unixts(::google::protobuf::uint32 value) {
  set_has_unixts();
  unixts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.readers.LogmanLogRecord.unixts)
}

// required .ru.mail.go.webbase.readers.HTTPMethod request_method = 3;
bool LogmanLogRecord::has_request_method() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LogmanLogRecord::set_has_request_method() {
  _has_bits_[0] |= 0x00000080u;
}
void LogmanLogRecord::clear_has_request_method() {
  _has_bits_[0] &= ~0x00000080u;
}
void LogmanLogRecord::clear_request_method() {
  request_method_ = 0;
  clear_has_request_method();
}
::ru::mail::go::webbase::readers::HTTPMethod LogmanLogRecord::request_method() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.readers.LogmanLogRecord.request_method)
  return static_cast< ::ru::mail::go::webbase::readers::HTTPMethod >(request_method_);
}
void LogmanLogRecord::set_request_method(::ru::mail::go::webbase::readers::HTTPMethod value) {
  assert(::ru::mail::go::webbase::readers::HTTPMethod_IsValid(value));
  set_has_request_method();
  request_method_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.readers.LogmanLogRecord.request_method)
}

// required string request_path = 4;
bool LogmanLogRecord::has_request_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogmanLogRecord::set_has_request_path() {
  _has_bits_[0] |= 0x00000002u;
}
void LogmanLogRecord::clear_has_request_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogmanLogRecord::clear_request_path() {
  request_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_path();
}
const ::std::string& LogmanLogRecord::request_path() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.readers.LogmanLogRecord.request_path)
  return request_path_.GetNoArena();
}
void LogmanLogRecord::set_request_path(const ::std::string& value) {
  set_has_request_path();
  request_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.readers.LogmanLogRecord.request_path)
}
#if LANG_CXX11
void LogmanLogRecord::set_request_path(::std::string&& value) {
  set_has_request_path();
  request_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.readers.LogmanLogRecord.request_path)
}
#endif
void LogmanLogRecord::set_request_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_path();
  request_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.readers.LogmanLogRecord.request_path)
}
void LogmanLogRecord::set_request_path(const char* value, size_t size) {
  set_has_request_path();
  request_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.readers.LogmanLogRecord.request_path)
}
::std::string* LogmanLogRecord::mutable_request_path() {
  set_has_request_path();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.readers.LogmanLogRecord.request_path)
  return request_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogmanLogRecord::release_request_path() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.readers.LogmanLogRecord.request_path)
  clear_has_request_path();
  return request_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogmanLogRecord::set_allocated_request_path(::std::string* request_path) {
  if (request_path != NULL) {
    set_has_request_path();
  } else {
    clear_has_request_path();
  }
  request_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_path);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.readers.LogmanLogRecord.request_path)
}

// optional string query_string = 5;
bool LogmanLogRecord::has_query_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogmanLogRecord::set_has_query_string() {
  _has_bits_[0] |= 0x00000004u;
}
void LogmanLogRecord::clear_has_query_string() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogmanLogRecord::clear_query_string() {
  query_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_string();
}
const ::std::string& LogmanLogRecord::query_string() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.readers.LogmanLogRecord.query_string)
  return query_string_.GetNoArena();
}
void LogmanLogRecord::set_query_string(const ::std::string& value) {
  set_has_query_string();
  query_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.readers.LogmanLogRecord.query_string)
}
#if LANG_CXX11
void LogmanLogRecord::set_query_string(::std::string&& value) {
  set_has_query_string();
  query_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.readers.LogmanLogRecord.query_string)
}
#endif
void LogmanLogRecord::set_query_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_string();
  query_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.readers.LogmanLogRecord.query_string)
}
void LogmanLogRecord::set_query_string(const char* value, size_t size) {
  set_has_query_string();
  query_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.readers.LogmanLogRecord.query_string)
}
::std::string* LogmanLogRecord::mutable_query_string() {
  set_has_query_string();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.readers.LogmanLogRecord.query_string)
  return query_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogmanLogRecord::release_query_string() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.readers.LogmanLogRecord.query_string)
  clear_has_query_string();
  return query_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogmanLogRecord::set_allocated_query_string(::std::string* query_string) {
  if (query_string != NULL) {
    set_has_query_string();
  } else {
    clear_has_query_string();
  }
  query_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_string);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.readers.LogmanLogRecord.query_string)
}

// optional string http_referrer = 6;
bool LogmanLogRecord::has_http_referrer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LogmanLogRecord::set_has_http_referrer() {
  _has_bits_[0] |= 0x00000008u;
}
void LogmanLogRecord::clear_has_http_referrer() {
  _has_bits_[0] &= ~0x00000008u;
}
void LogmanLogRecord::clear_http_referrer() {
  http_referrer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_http_referrer();
}
const ::std::string& LogmanLogRecord::http_referrer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.readers.LogmanLogRecord.http_referrer)
  return http_referrer_.GetNoArena();
}
void LogmanLogRecord::set_http_referrer(const ::std::string& value) {
  set_has_http_referrer();
  http_referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.readers.LogmanLogRecord.http_referrer)
}
#if LANG_CXX11
void LogmanLogRecord::set_http_referrer(::std::string&& value) {
  set_has_http_referrer();
  http_referrer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.readers.LogmanLogRecord.http_referrer)
}
#endif
void LogmanLogRecord::set_http_referrer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_http_referrer();
  http_referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.readers.LogmanLogRecord.http_referrer)
}
void LogmanLogRecord::set_http_referrer(const char* value, size_t size) {
  set_has_http_referrer();
  http_referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.readers.LogmanLogRecord.http_referrer)
}
::std::string* LogmanLogRecord::mutable_http_referrer() {
  set_has_http_referrer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.readers.LogmanLogRecord.http_referrer)
  return http_referrer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogmanLogRecord::release_http_referrer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.readers.LogmanLogRecord.http_referrer)
  clear_has_http_referrer();
  return http_referrer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogmanLogRecord::set_allocated_http_referrer(::std::string* http_referrer) {
  if (http_referrer != NULL) {
    set_has_http_referrer();
  } else {
    clear_has_http_referrer();
  }
  http_referrer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_referrer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.readers.LogmanLogRecord.http_referrer)
}

// optional string user_agent = 7;
bool LogmanLogRecord::has_user_agent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LogmanLogRecord::set_has_user_agent() {
  _has_bits_[0] |= 0x00000010u;
}
void LogmanLogRecord::clear_has_user_agent() {
  _has_bits_[0] &= ~0x00000010u;
}
void LogmanLogRecord::clear_user_agent() {
  user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_agent();
}
const ::std::string& LogmanLogRecord::user_agent() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.readers.LogmanLogRecord.user_agent)
  return user_agent_.GetNoArena();
}
void LogmanLogRecord::set_user_agent(const ::std::string& value) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.readers.LogmanLogRecord.user_agent)
}
#if LANG_CXX11
void LogmanLogRecord::set_user_agent(::std::string&& value) {
  set_has_user_agent();
  user_agent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.readers.LogmanLogRecord.user_agent)
}
#endif
void LogmanLogRecord::set_user_agent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.readers.LogmanLogRecord.user_agent)
}
void LogmanLogRecord::set_user_agent(const char* value, size_t size) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.readers.LogmanLogRecord.user_agent)
}
::std::string* LogmanLogRecord::mutable_user_agent() {
  set_has_user_agent();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.readers.LogmanLogRecord.user_agent)
  return user_agent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogmanLogRecord::release_user_agent() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.readers.LogmanLogRecord.user_agent)
  clear_has_user_agent();
  return user_agent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogmanLogRecord::set_allocated_user_agent(::std::string* user_agent) {
  if (user_agent != NULL) {
    set_has_user_agent();
  } else {
    clear_has_user_agent();
  }
  user_agent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_agent);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.readers.LogmanLogRecord.user_agent)
}

// optional string cookies = 8;
bool LogmanLogRecord::has_cookies() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LogmanLogRecord::set_has_cookies() {
  _has_bits_[0] |= 0x00000020u;
}
void LogmanLogRecord::clear_has_cookies() {
  _has_bits_[0] &= ~0x00000020u;
}
void LogmanLogRecord::clear_cookies() {
  cookies_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cookies();
}
const ::std::string& LogmanLogRecord::cookies() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.readers.LogmanLogRecord.cookies)
  return cookies_.GetNoArena();
}
void LogmanLogRecord::set_cookies(const ::std::string& value) {
  set_has_cookies();
  cookies_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.readers.LogmanLogRecord.cookies)
}
#if LANG_CXX11
void LogmanLogRecord::set_cookies(::std::string&& value) {
  set_has_cookies();
  cookies_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.readers.LogmanLogRecord.cookies)
}
#endif
void LogmanLogRecord::set_cookies(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cookies();
  cookies_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.readers.LogmanLogRecord.cookies)
}
void LogmanLogRecord::set_cookies(const char* value, size_t size) {
  set_has_cookies();
  cookies_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.readers.LogmanLogRecord.cookies)
}
::std::string* LogmanLogRecord::mutable_cookies() {
  set_has_cookies();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.readers.LogmanLogRecord.cookies)
  return cookies_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogmanLogRecord::release_cookies() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.readers.LogmanLogRecord.cookies)
  clear_has_cookies();
  return cookies_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogmanLogRecord::set_allocated_cookies(::std::string* cookies) {
  if (cookies != NULL) {
    set_has_cookies();
  } else {
    clear_has_cookies();
  }
  cookies_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cookies);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.readers.LogmanLogRecord.cookies)
}

// optional uint32 response_code = 9;
bool LogmanLogRecord::has_response_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LogmanLogRecord::set_has_response_code() {
  _has_bits_[0] |= 0x00000100u;
}
void LogmanLogRecord::clear_has_response_code() {
  _has_bits_[0] &= ~0x00000100u;
}
void LogmanLogRecord::clear_response_code() {
  response_code_ = 0u;
  clear_has_response_code();
}
::google::protobuf::uint32 LogmanLogRecord::response_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.readers.LogmanLogRecord.response_code)
  return response_code_;
}
void LogmanLogRecord::set_response_code(::google::protobuf::uint32 value) {
  set_has_response_code();
  response_code_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.readers.LogmanLogRecord.response_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace readers
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
