// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search_result.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "search_result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gogo {
namespace sr {
class result_frameDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<result_frame>
     _instance;
} _result_frame_default_instance_;
class snippet_text_itemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<snippet_text_item>
     _instance;
} _snippet_text_item_default_instance_;
class snippet_itemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<snippet_item>
     _instance;
} _snippet_item_default_instance_;
class doc_data_exDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<doc_data_ex>
     _instance;
} _doc_data_ex_default_instance_;
class clickrank_dataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<clickrank_data>
     _instance;
} _clickrank_data_default_instance_;
class quality_dataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<quality_data>
     _instance;
} _quality_data_default_instance_;
class passage_dataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<passage_data>
     _instance;
} _passage_data_default_instance_;
class word_posistionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<word_posistions>
     _instance;
} _word_posistions_default_instance_;
class word_posting_listDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<word_posting_list>
     _instance;
} _word_posting_list_default_instance_;
class text_zone_itemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<text_zone_item>
     _instance;
} _text_zone_item_default_instance_;
class num_zone_itemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<num_zone_item>
     _instance;
} _num_zone_item_default_instance_;
class real_doc_id_dataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<real_doc_id_data>
     _instance;
} _real_doc_id_data_default_instance_;
class doc_zoneDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<doc_zone>
     _instance;
} _doc_zone_default_instance_;
class doc_dumpDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<doc_dump>
     _instance;
} _doc_dump_default_instance_;
class doc_itemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<doc_item>
     _instance;
} _doc_item_default_instance_;
class errorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<error>
     _instance;
} _error_default_instance_;
class integer_counterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<integer_counter>
     _instance;
} _integer_counter_default_instance_;
class double_counterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<double_counter>
     _instance;
} _double_counter_default_instance_;
class statisticDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<statistic>
     _instance;
} _statistic_default_instance_;
class traitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<trait>
     _instance;
} _trait_default_instance_;
class wnf_urlDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<wnf_url>
     _instance;
} _wnf_url_default_instance_;
class wnf_text_zoneDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<wnf_text_zone>
     _instance;
} _wnf_text_zone_default_instance_;
class wnf_dump_tzDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<wnf_dump_tz>
     _instance;
} _wnf_dump_tz_default_instance_;
class multicast_statDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<multicast_stat>
     _instance;
} _multicast_stat_default_instance_;
class qual_statDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<qual_stat>
     _instance;
} _qual_stat_default_instance_;
class search_resultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<search_result>
     _instance;
} _search_result_default_instance_;

namespace protobuf_search_5fresult_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[26];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(result_frame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(result_frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(result_frame, matched_docs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(result_frame, ungrouped_docs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(result_frame, site_estimate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(result_frame, docs_estimate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(result_frame, n_ranked_docs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(result_frame, first_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(result_frame, second_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(result_frame, last_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(result_frame, page_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(result_frame, n_param_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snippet_text_item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snippet_text_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snippet_text_item, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snippet_text_item, cb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snippet_text_item, ce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snippet_text_item, debug_printout_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snippet_item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snippet_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snippet_item, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snippet_item, qual_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, doclen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, textr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, titler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, linkr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, catalogr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, trustedr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, wikir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, ctgr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, clicknufr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, clicklinkr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, querylinkr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, clickunfr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, maxwfreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, lastdelta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, clusttag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, doc_trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, no_sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, clickrank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, qualitydata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, bestop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_data_ex, passages_),
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  20,
  19,
  0,
  1,
  21,
  2,
  3,
  22,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clickrank_data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clickrank_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clickrank_data, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clickrank_data, attractive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clickrank_data, satisfaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clickrank_data, sessions_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quality_data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quality_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quality_data, pair_idf_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quality_data, text_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quality_data, sq_model_rank_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(passage_data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(passage_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(passage_data, zone_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(passage_data, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(passage_data, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(passage_data, rank_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(word_posistions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(word_posistions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(word_posistions, zone_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(word_posistions, positions_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(word_posting_list, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(word_posting_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(word_posting_list, pos_in_query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(word_posting_list, w_pos_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(text_zone_item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(text_zone_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(text_zone_item, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(text_zone_item, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(text_zone_item, loop_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(text_zone_item, b_marked_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(text_zone_item, b_visualize_prev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(text_zone_item, b_visualize_equal_prev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(text_zone_item, visualize_tag_),
  0,
  1,
  2,
  4,
  5,
  6,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(num_zone_item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(num_zone_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(num_zone_item, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(num_zone_item, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(num_zone_item, b_visualize_hex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(num_zone_item, b_visualize_upper_hex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(num_zone_item, b_visualize_signed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(num_zone_item, b_visualize_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(num_zone_item, b_visualize_time_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(num_zone_item, b_age_in_year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(num_zone_item, bit_len_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_doc_id_data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_doc_id_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_doc_id_data, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_doc_id_data, db_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_doc_id_data, doc_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_zone, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_zone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_zone, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_zone, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_zone, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_zone, sentences_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_dump, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_dump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_dump, zones_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, last_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, group_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, spam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, c1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, c2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, c3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, snip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, data_ex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, snip_hl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, num_zone_values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, text_zone_values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, track_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, real_doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, c4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, site_links_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, extra_snippet_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, is_navig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, required_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, domain_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, rank_trace_feat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, is_mergable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, index_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, raw_text_ranks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, c5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, snippet_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, doc_trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, could_be_a_group_leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, full_domain_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, raw_doc_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, features_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, req_pos_mergable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, doc_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, is_vkmusic_master_copy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_item, is_vkmusic_release_copy_),
  13,
  14,
  0,
  15,
  19,
  23,
  16,
  17,
  18,
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  10,
  21,
  11,
  12,
  24,
  20,
  22,
  2,
  33,
  3,
  4,
  27,
  28,
  5,
  25,
  29,
  6,
  30,
  26,
  7,
  31,
  32,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error, error_message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(integer_counter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(integer_counter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(integer_counter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(integer_counter, counter_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(double_counter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(double_counter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(double_counter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(double_counter, counter_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistic, porno_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistic, geo_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistic, porno2_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistic, porno_prob_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistic, max_integer_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistic, integer_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistic, double_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistic, metasearch_used_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trait, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trait, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trait, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wnf_url, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wnf_url, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wnf_url, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wnf_url, category_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wnf_text_zone, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wnf_text_zone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wnf_text_zone, zone_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wnf_text_zone, value_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wnf_dump_tz, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wnf_dump_tz, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wnf_dump_tz, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wnf_dump_tz, zones_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multicast_stat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multicast_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multicast_stat, searcher_request_status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qual_stat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qual_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qual_stat, backends_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qual_stat, multicast_stat_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, query_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, words_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, docs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, fingerprint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, zone_dump_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, statistics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, sm_through_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, porno_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, use_snip_cache_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, statistic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, utf8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, microbase_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, searcher_vers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, traits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, version_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, wnf_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, wnf_tz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, domain_group_ooo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_result, qual_stat_),
  5,
  0,
  1,
  10,
  6,
  ~0u,
  ~0u,
  9,
  ~0u,
  2,
  3,
  ~0u,
  11,
  7,
  12,
  ~0u,
  4,
  ~0u,
  14,
  ~0u,
  ~0u,
  13,
  8,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(result_frame)},
  { 25, 34, sizeof(snippet_text_item)},
  { 38, 45, sizeof(snippet_item)},
  { 47, 75, sizeof(doc_data_ex)},
  { 98, 107, sizeof(clickrank_data)},
  { 111, 119, sizeof(quality_data)},
  { 122, 131, sizeof(passage_data)},
  { 135, 142, sizeof(word_posistions)},
  { 144, 151, sizeof(word_posting_list)},
  { 153, 165, sizeof(text_zone_item)},
  { 172, 186, sizeof(num_zone_item)},
  { 195, 203, sizeof(real_doc_id_data)},
  { 206, 215, sizeof(doc_zone)},
  { 219, 225, sizeof(doc_dump)},
  { 226, 269, sizeof(doc_item)},
  { 307, 314, sizeof(error)},
  { 316, 323, sizeof(integer_counter)},
  { 325, 332, sizeof(double_counter)},
  { 334, 347, sizeof(statistic)},
  { 355, 362, sizeof(trait)},
  { 364, 371, sizeof(wnf_url)},
  { 373, 380, sizeof(wnf_text_zone)},
  { 382, 389, sizeof(wnf_dump_tz)},
  { 391, 397, sizeof(multicast_stat)},
  { 398, 405, sizeof(qual_stat)},
  { 407, 435, sizeof(search_result)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_result_frame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_snippet_text_item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_snippet_item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_doc_data_ex_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_clickrank_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_quality_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_passage_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_word_posistions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_word_posting_list_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_text_zone_item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_num_zone_item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_real_doc_id_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_doc_zone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_doc_dump_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_doc_item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_error_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_integer_counter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_double_counter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_statistic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_trait_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_wnf_url_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_wnf_text_zone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_wnf_dump_tz_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_multicast_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_qual_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_search_result_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "search_result.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 26);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::snippetdata::parser::protobuf_snippetdata_2eproto::InitDefaults();
  ::backends_quality::pb::protobuf_backends_5fquality_2eproto::InitDefaults();
  _result_frame_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_result_frame_default_instance_);_snippet_text_item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_snippet_text_item_default_instance_);_snippet_item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_snippet_item_default_instance_);_doc_data_ex_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_doc_data_ex_default_instance_);_clickrank_data_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_clickrank_data_default_instance_);_quality_data_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_quality_data_default_instance_);_passage_data_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_passage_data_default_instance_);_word_posistions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_word_posistions_default_instance_);_word_posting_list_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_word_posting_list_default_instance_);_text_zone_item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_text_zone_item_default_instance_);_num_zone_item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_num_zone_item_default_instance_);_real_doc_id_data_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_real_doc_id_data_default_instance_);_doc_zone_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_doc_zone_default_instance_);_doc_dump_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_doc_dump_default_instance_);_doc_item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_doc_item_default_instance_);_error_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_error_default_instance_);_integer_counter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_integer_counter_default_instance_);_double_counter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_double_counter_default_instance_);_statistic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_statistic_default_instance_);_trait_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_trait_default_instance_);_wnf_url_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_wnf_url_default_instance_);_wnf_text_zone_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_wnf_text_zone_default_instance_);_wnf_dump_tz_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_wnf_dump_tz_default_instance_);_multicast_stat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_multicast_stat_default_instance_);_qual_stat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_qual_stat_default_instance_);_search_result_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_search_result_default_instance_);_doc_data_ex_default_instance_._instance.get_mutable()->clickrank_ = const_cast< ::gogo::sr::clickrank_data*>(
      ::gogo::sr::clickrank_data::internal_default_instance());
  _doc_data_ex_default_instance_._instance.get_mutable()->qualitydata_ = const_cast< ::gogo::sr::quality_data*>(
      ::gogo::sr::quality_data::internal_default_instance());
  _doc_data_ex_default_instance_._instance.get_mutable()->passages_ = const_cast< ::gogo::sr::passage_data*>(
      ::gogo::sr::passage_data::internal_default_instance());
  _doc_item_default_instance_._instance.get_mutable()->snip_ = const_cast< ::gogo::sr::snippet_item*>(
      ::gogo::sr::snippet_item::internal_default_instance());
  _doc_item_default_instance_._instance.get_mutable()->data_ex_ = const_cast< ::gogo::sr::doc_data_ex*>(
      ::gogo::sr::doc_data_ex::internal_default_instance());
  _doc_item_default_instance_._instance.get_mutable()->real_doc_id_ = const_cast< ::gogo::sr::real_doc_id_data*>(
      ::gogo::sr::real_doc_id_data::internal_default_instance());
  _doc_item_default_instance_._instance.get_mutable()->site_links_ = const_cast< ::ru::mail::go::snippetdata::parser::SiteLinks*>(
      ::ru::mail::go::snippetdata::parser::SiteLinks::internal_default_instance());
  _doc_item_default_instance_._instance.get_mutable()->extra_snippet_data_ = const_cast< ::ru::mail::go::snippetdata::parser::ValueComposite*>(
      ::ru::mail::go::snippetdata::parser::ValueComposite::internal_default_instance());
  _qual_stat_default_instance_._instance.get_mutable()->multicast_stat_ = const_cast< ::gogo::sr::multicast_stat*>(
      ::gogo::sr::multicast_stat::internal_default_instance());
  _search_result_default_instance_._instance.get_mutable()->err_ = const_cast< ::gogo::sr::error*>(
      ::gogo::sr::error::internal_default_instance());
  _search_result_default_instance_._instance.get_mutable()->frame_ = const_cast< ::gogo::sr::result_frame*>(
      ::gogo::sr::result_frame::internal_default_instance());
  _search_result_default_instance_._instance.get_mutable()->statistic_ = const_cast< ::gogo::sr::statistic*>(
      ::gogo::sr::statistic::internal_default_instance());
  _search_result_default_instance_._instance.get_mutable()->qual_stat_ = const_cast< ::gogo::sr::qual_stat*>(
      ::gogo::sr::qual_stat::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023search_result.proto\022\007gogo.sr\032\021snippetd"
      "ata.proto\032\026backends_quality.proto\"\345\001\n\014re"
      "sult_frame\022\024\n\014matched_docs\030\001 \002(\r\022\026\n\016ungr"
      "ouped_docs\030\002 \001(\r\022\025\n\rsite_estimate\030\003 \001(\005\022"
      "\025\n\rdocs_estimate\030\004 \001(\005\022\025\n\rn_ranked_docs\030"
      "\005 \001(\r\022\023\n\013first_index\030\006 \001(\r\022\024\n\014second_ind"
      "ex\030\007 \001(\r\022\022\n\nlast_index\030\010 \001(\r\022\022\n\npage_cou"
      "nt\030\t \001(\r\022\017\n\007n_param\030\n \001(\r\"Q\n\021snippet_tex"
      "t_item\022\014\n\004text\030\001 \002(\t\022\n\n\002cb\030\002 \001(\010\022\n\n\002ce\030\003"
      " \001(\010\022\026\n\016debug_printout\030\004 \001(\t\"F\n\014snippet_"
      "item\022(\n\004text\030\003 \003(\0132\032.gogo.sr.snippet_tex"
      "t_item\022\014\n\004qual\030\004 \001(\r\"\341\003\n\013doc_data_ex\022\r\n\005"
      "depth\030\001 \001(\021\022\016\n\006doclen\030\002 \001(\r\022\014\n\004rank\030\003 \001("
      "\001\022\r\n\005textR\030\004 \001(\001\022\016\n\006titleR\030\005 \001(\001\022\r\n\005link"
      "R\030\006 \001(\001\022\020\n\010catalogR\030\007 \001(\001\022\020\n\010trustedR\030\010 "
      "\001(\001\022\r\n\005wikiR\030\t \001(\001\022\014\n\004ctgR\030\n \001(\001\022\021\n\tclic"
      "kNufR\030\013 \001(\001\022\022\n\nclickLinkR\030\014 \001(\001\022\022\n\nquery"
      "LinkR\030\r \001(\001\022\021\n\tclickUnfR\030\016 \001(\001\022\020\n\010maxWFr"
      "eq\030\017 \001(\r\022\021\n\tlastDelta\030\020 \001(\001\022\020\n\010clustTag\030"
      "\021 \001(\t\022\021\n\tdoc_trace\030\022 \001(\t\022\r\n\005no_sn\030\023 \001(\010\022"
      "*\n\tclickRank\030\024 \001(\0132\027.gogo.sr.clickrank_d"
      "ata\022*\n\013qualityData\030\025 \001(\0132\025.gogo.sr.quali"
      "ty_data\022\016\n\006bestOp\030\026 \001(\r\022\'\n\010passages\030\027 \001("
      "\0132\025.gogo.sr.passage_data\"Z\n\016clickrank_da"
      "ta\022\014\n\004rank\030\001 \002(\001\022\022\n\nattractive\030\002 \002(\001\022\024\n\014"
      "satisfaction\030\003 \002(\001\022\020\n\010sessions\030\004 \002(\r\"R\n\014"
      "quality_data\022\025\n\rpair_idf_rank\030\001 \002(\002\022\024\n\tt"
      "ext_rank\030\002 \001(\002:\0010\022\025\n\rsq_model_rank\030\003 \001(\002"
      "\"\\\n\014passage_data\022\023\n\007zone_id\030\001 \003(\rB\002\020\001\022\021\n"
      "\005start\030\002 \003(\rB\002\020\001\022\022\n\006length\030\003 \003(\rB\002\020\001\022\020\n\004"
      "rank\030\004 \003(\rB\002\020\001\"9\n\017word_posistions\022\017\n\007zon"
      "e_id\030\001 \002(\r\022\025\n\tpositions\030\002 \003(\rB\002\020\001\"R\n\021wor"
      "d_posting_list\022\024\n\014pos_in_query\030\001 \002(\r\022\'\n\005"
      "w_pos\030\002 \003(\0132\030.gogo.sr.word_posistions\"\247\001"
      "\n\016text_zone_item\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030"
      "\002 \002(\t\022\020\n\010loop_tag\030\003 \001(\t\022\025\n\rb_marked_flag"
      "\030\004 \001(\010\022\030\n\020b_visualize_prev\030\005 \001(\010\022\036\n\026b_vi"
      "sualize_equal_prev\030\006 \001(\010\022\025\n\rvisualize_ta"
      "g\030\007 \001(\t\"\341\001\n\rnum_zone_item\022\014\n\004name\030\001 \002(\t\022"
      "\r\n\005value\030\002 \002(\004\022\027\n\017b_visualize_hex\030\003 \001(\010\022"
      "\035\n\025b_visualize_upper_hex\030\004 \001(\010\022\032\n\022b_visu"
      "alize_signed\030\005 \001(\010\022\030\n\020b_visualize_bits\030\006"
      " \001(\010\022\035\n\025b_visualize_time_diff\030\007 \001(\010\022\025\n\rb"
      "_age_in_year\030\010 \001(\010\022\017\n\007bit_len\030\t \001(\r\"G\n\020r"
      "eal_doc_id_data\022\r\n\005db_id\030\001 \002(\r\022\024\n\014db_tim"
      "estamp\030\002 \002(\r\022\016\n\006doc_id\030\003 \002(\r\"G\n\010doc_zone"
      "\022\014\n\004name\030\001 \001(\t\022\014\n\004mode\030\002 \001(\t\022\014\n\004text\030\003 \001"
      "(\t\022\021\n\tsentences\030\004 \003(\t\",\n\010doc_dump\022 \n\005zon"
      "es\030\001 \003(\0132\021.gogo.sr.doc_zone\"\300\010\n\010doc_item"
      "\022\016\n\006doc_id\030\001 \002(\r\022\013\n\003num\030\002 \002(\r\022\021\n\tlast_da"
      "te\030\003 \001(\t\022\016\n\006weight\030\004 \001(\001\022\022\n\ngroup_size\030\005"
      " \001(\r\022\014\n\004spam\030\006 \001(\010\022\n\n\002c1\030\007 \001(\003\022\n\n\002c2\030\010 \001"
      "(\003\022\n\n\002c3\030\t \001(\003\022#\n\004snip\030\n \001(\0132\025.gogo.sr.s"
      "nippet_item\022%\n\007data_ex\030\013 \001(\0132\024.gogo.sr.d"
      "oc_data_ex\022+\n\007snip_hl\030\014 \003(\0132\032.gogo.sr.wo"
      "rd_posting_list\022/\n\017num_zone_values\030\r \003(\013"
      "2\026.gogo.sr.num_zone_item\0221\n\020text_zone_va"
      "lues\030\016 \003(\0132\027.gogo.sr.text_zone_item\022\022\n\nt"
      "rack_list\030\017 \003(\t\022\014\n\004body\030\020 \001(\t\022.\n\013real_do"
      "c_id\030\021 \001(\0132\031.gogo.sr.real_doc_id_data\022\n\n"
      "\002c4\030\022 \001(\004\022<\n\nsite_links\030\023 \001(\0132(.ru.mail."
      "go.snippetdata.parser.SiteLinks\022I\n\022extra"
      "_snippet_data\030\024 \001(\0132-.ru.mail.go.snippet"
      "data.parser.ValueComposite\022\020\n\010is_navig\030\025"
      " \001(\010\022\031\n\021required_position\030\026 \001(\r\0226\n\014domai"
      "n_group\030\027 \001(\0162\032.gogo.sr.domain_group_typ"
      "e:\004NONE\022\027\n\017rank_trace_feat\030\030 \001(\t\022\031\n\013is_m"
      "ergable\030\031 \001(\010:\004true\022\025\n\rindex_version\030\032 \001"
      "(\t\022\026\n\016raw_text_ranks\030\033 \001(\t\022\n\n\002c5\030\034 \001(\004\022\027"
      "\n\017snippet_version\030\035 \001(\r\022\021\n\tdoc_trace\030\036 \001"
      "(\t\022\037\n\027could_be_a_group_leader\030\037 \001(\010\022\030\n\020f"
      "ull_domain_hash\030  \001(\007\022\027\n\017raw_doc_content"
      "\030! \001(\014\022\025\n\rfeatures_hash\030\" \001(\017\022\037\n\020req_pos"
      "_mergable\030# \001(\010:\005false\022\017\n\007doc_url\030$ \001(\t\022"
      "%\n\026is_vkmusic_master_copy\030% \001(\010:\005false\022&"
      "\n\027is_vkmusic_release_copy\030& \001(\010:\005false\"2"
      "\n\005error\022\022\n\nerror_code\030\001 \002(\021\022\025\n\rerror_mes"
      "sage\030\002 \001(\t\"0\n\017integer_counter\022\014\n\004name\030\001 "
      "\002(\t\022\017\n\007counter\030\002 \002(\003\"/\n\016double_counter\022\014"
      "\n\004name\030\001 \002(\t\022\017\n\007counter\030\002 \002(\001\"\246\002\n\tstatis"
      "tic\022\027\n\013porno_stats\030\001 \003(\rB\002\020\001\022\024\n\010geo_list"
      "\030\002 \003(\rB\002\020\001\022\030\n\014porno2_stats\030\003 \003(\rB\002\020\001\022\034\n\020"
      "porno_prob_stats\030\004 \003(\rB\002\020\001\0225\n\023max_intege"
      "r_counter\030d \003(\0132\030.gogo.sr.integer_counte"
      "r\0221\n\017integer_counter\030e \003(\0132\030.gogo.sr.int"
      "eger_counter\022/\n\016double_counter\030f \003(\0132\027.g"
      "ogo.sr.double_counter\022\027\n\017metasearch_used"
      "\030g \001(\010\"!\n\005trait\022\n\n\002id\030\001 \002(\005\022\014\n\004data\030\002 \002("
      "\014\"(\n\007wnf_url\022\013\n\003url\030\001 \002(\t\022\020\n\010category\030\002 "
      "\002(\t\"/\n\rwnf_text_zone\022\017\n\007zone_id\030\001 \002(\r\022\r\n"
      "\005value\030\002 \002(\t\"A\n\013wnf_dump_tz\022\013\n\003url\030\001 \002(\t"
      "\022%\n\005zones\030\002 \003(\0132\026.gogo.sr.wnf_text_zone\""
      "1\n\016multicast_stat\022\037\n\027searcher_request_st"
      "atus\030\001 \001(\003\"|\n\tqual_stat\022>\n\020backends_qual"
      "ity\030\001 \003(\0132$.backends_quality.pb.Backends"
      "Quality\022/\n\016multicast_stat\030\002 \001(\0132\027.gogo.s"
      "r.multicast_stat\"\331\004\n\rsearch_result\022\033\n\003er"
      "r\030\001 \002(\0132\016.gogo.sr.error\022\r\n\005query\030\002 \001(\t\022\024"
      "\n\014query_string\030\003 \001(\t\022\014\n\004time\030\004 \001(\002\022$\n\005fr"
      "ame\030\005 \001(\0132\025.gogo.sr.result_frame\022\r\n\005word"
      "s\030\006 \003(\t\022\037\n\004docs\030\007 \003(\0132\021.gogo.sr.doc_item"
      "\022\023\n\013fingerprint\030\010 \001(\004\022\021\n\tzone_dump\030\t \003(\004"
      "\022\022\n\nstatistics\030\n \001(\t\022\022\n\nsm_through\030\013 \001(\t"
      "\022\027\n\013porno_stats\030\014 \003(\rB\002\020\001\022\026\n\016use_snip_ca"
      "che\030\r \001(\010\022%\n\tstatistic\030\016 \001(\0132\022.gogo.sr.s"
      "tatistic\022\014\n\004utf8\030\017 \001(\010\022\024\n\014microbase_id\030\020"
      " \003(\t\022\025\n\rsearcher_vers\030\021 \001(\t\022\036\n\006traits\030\022 "
      "\003(\0132\016.gogo.sr.trait\022\024\n\014version_hash\030\023 \001("
      "\007\022\"\n\010wnf_urls\030\024 \003(\0132\020.gogo.sr.wnf_url\022$\n"
      "\006wnf_tz\030\025 \003(\0132\024.gogo.sr.wnf_dump_tz\022\030\n\020d"
      "omain_group_ooo\030\026 \001(\010\022%\n\tqual_stat\030\030 \001(\013"
      "2\022.gogo.sr.qual_stat*\?\n\021domain_group_typ"
      "e\022\010\n\004NONE\020\000\022\021\n\rBY_SITE_NAVIG\020\001\022\r\n\tBY_LEA"
      "DER\020\002B\022B\020SearchResultDefs"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4545);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "search_result.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::snippetdata::parser::protobuf_snippetdata_2eproto::AddDescriptors();
  ::backends_quality::pb::protobuf_backends_5fquality_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_search_5fresult_2eproto

const ::google::protobuf::EnumDescriptor* domain_group_type_descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_enum_descriptors[0];
}
bool domain_group_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int result_frame::kMatchedDocsFieldNumber;
const int result_frame::kUngroupedDocsFieldNumber;
const int result_frame::kSiteEstimateFieldNumber;
const int result_frame::kDocsEstimateFieldNumber;
const int result_frame::kNRankedDocsFieldNumber;
const int result_frame::kFirstIndexFieldNumber;
const int result_frame::kSecondIndexFieldNumber;
const int result_frame::kLastIndexFieldNumber;
const int result_frame::kPageCountFieldNumber;
const int result_frame::kNParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

result_frame::result_frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.result_frame)
}
result_frame::result_frame(const result_frame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&matched_docs_, &from.matched_docs_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_param_) -
    reinterpret_cast<char*>(&matched_docs_)) + sizeof(n_param_));
  // @@protoc_insertion_point(copy_constructor:gogo.sr.result_frame)
}

void result_frame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&matched_docs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_param_) -
      reinterpret_cast<char*>(&matched_docs_)) + sizeof(n_param_));
}

result_frame::~result_frame() {
  // @@protoc_insertion_point(destructor:gogo.sr.result_frame)
  SharedDtor();
}

void result_frame::SharedDtor() {
}

void result_frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* result_frame::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const result_frame& result_frame::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

result_frame* result_frame::New(::google::protobuf::Arena* arena) const {
  result_frame* n = new result_frame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void result_frame::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.result_frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&matched_docs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_index_) -
        reinterpret_cast<char*>(&matched_docs_)) + sizeof(last_index_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&page_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&n_param_) -
        reinterpret_cast<char*>(&page_count_)) + sizeof(n_param_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool result_frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.result_frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matched_docs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_matched_docs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matched_docs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ungrouped_docs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ungrouped_docs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ungrouped_docs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 site_estimate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_site_estimate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &site_estimate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 docs_estimate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_docs_estimate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &docs_estimate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 n_ranked_docs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_n_ranked_docs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_ranked_docs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_first_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 second_index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_second_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &second_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_index = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_last_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 page_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_page_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 n_param = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_n_param();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.result_frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.result_frame)
  return false;
#undef DO_
}

void result_frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.result_frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 matched_docs = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matched_docs(), output);
  }

  // optional uint32 ungrouped_docs = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ungrouped_docs(), output);
  }

  // optional int32 site_estimate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->site_estimate(), output);
  }

  // optional int32 docs_estimate = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->docs_estimate(), output);
  }

  // optional uint32 n_ranked_docs = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->n_ranked_docs(), output);
  }

  // optional uint32 first_index = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->first_index(), output);
  }

  // optional uint32 second_index = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->second_index(), output);
  }

  // optional uint32 last_index = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_index(), output);
  }

  // optional uint32 page_count = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->page_count(), output);
  }

  // optional uint32 n_param = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->n_param(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.result_frame)
}

::google::protobuf::uint8* result_frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.result_frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 matched_docs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matched_docs(), target);
  }

  // optional uint32 ungrouped_docs = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ungrouped_docs(), target);
  }

  // optional int32 site_estimate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->site_estimate(), target);
  }

  // optional int32 docs_estimate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->docs_estimate(), target);
  }

  // optional uint32 n_ranked_docs = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->n_ranked_docs(), target);
  }

  // optional uint32 first_index = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->first_index(), target);
  }

  // optional uint32 second_index = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->second_index(), target);
  }

  // optional uint32 last_index = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_index(), target);
  }

  // optional uint32 page_count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->page_count(), target);
  }

  // optional uint32 n_param = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->n_param(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.result_frame)
  return target;
}

size_t result_frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.result_frame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 matched_docs = 1;
  if (has_matched_docs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matched_docs());
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional uint32 ungrouped_docs = 2;
    if (has_ungrouped_docs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ungrouped_docs());
    }

    // optional int32 site_estimate = 3;
    if (has_site_estimate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->site_estimate());
    }

    // optional int32 docs_estimate = 4;
    if (has_docs_estimate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->docs_estimate());
    }

    // optional uint32 n_ranked_docs = 5;
    if (has_n_ranked_docs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_ranked_docs());
    }

    // optional uint32 first_index = 6;
    if (has_first_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_index());
    }

    // optional uint32 second_index = 7;
    if (has_second_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->second_index());
    }

    // optional uint32 last_index = 8;
    if (has_last_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_index());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 page_count = 9;
    if (has_page_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_count());
    }

    // optional uint32 n_param = 10;
    if (has_n_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_param());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void result_frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.result_frame)
  GOOGLE_DCHECK_NE(&from, this);
  const result_frame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const result_frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.result_frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.result_frame)
    MergeFrom(*source);
  }
}

void result_frame::MergeFrom(const result_frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.result_frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      matched_docs_ = from.matched_docs_;
    }
    if (cached_has_bits & 0x00000002u) {
      ungrouped_docs_ = from.ungrouped_docs_;
    }
    if (cached_has_bits & 0x00000004u) {
      site_estimate_ = from.site_estimate_;
    }
    if (cached_has_bits & 0x00000008u) {
      docs_estimate_ = from.docs_estimate_;
    }
    if (cached_has_bits & 0x00000010u) {
      n_ranked_docs_ = from.n_ranked_docs_;
    }
    if (cached_has_bits & 0x00000020u) {
      first_index_ = from.first_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      second_index_ = from.second_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_index_ = from.last_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      page_count_ = from.page_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      n_param_ = from.n_param_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void result_frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.result_frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void result_frame::CopyFrom(const result_frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.result_frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool result_frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void result_frame::Swap(result_frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void result_frame::InternalSwap(result_frame* other) {
  using std::swap;
  swap(matched_docs_, other->matched_docs_);
  swap(ungrouped_docs_, other->ungrouped_docs_);
  swap(site_estimate_, other->site_estimate_);
  swap(docs_estimate_, other->docs_estimate_);
  swap(n_ranked_docs_, other->n_ranked_docs_);
  swap(first_index_, other->first_index_);
  swap(second_index_, other->second_index_);
  swap(last_index_, other->last_index_);
  swap(page_count_, other->page_count_);
  swap(n_param_, other->n_param_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata result_frame::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// result_frame

// required uint32 matched_docs = 1;
bool result_frame::has_matched_docs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void result_frame::set_has_matched_docs() {
  _has_bits_[0] |= 0x00000001u;
}
void result_frame::clear_has_matched_docs() {
  _has_bits_[0] &= ~0x00000001u;
}
void result_frame::clear_matched_docs() {
  matched_docs_ = 0u;
  clear_has_matched_docs();
}
::google::protobuf::uint32 result_frame::matched_docs() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.matched_docs)
  return matched_docs_;
}
void result_frame::set_matched_docs(::google::protobuf::uint32 value) {
  set_has_matched_docs();
  matched_docs_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.matched_docs)
}

// optional uint32 ungrouped_docs = 2;
bool result_frame::has_ungrouped_docs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void result_frame::set_has_ungrouped_docs() {
  _has_bits_[0] |= 0x00000002u;
}
void result_frame::clear_has_ungrouped_docs() {
  _has_bits_[0] &= ~0x00000002u;
}
void result_frame::clear_ungrouped_docs() {
  ungrouped_docs_ = 0u;
  clear_has_ungrouped_docs();
}
::google::protobuf::uint32 result_frame::ungrouped_docs() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.ungrouped_docs)
  return ungrouped_docs_;
}
void result_frame::set_ungrouped_docs(::google::protobuf::uint32 value) {
  set_has_ungrouped_docs();
  ungrouped_docs_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.ungrouped_docs)
}

// optional int32 site_estimate = 3;
bool result_frame::has_site_estimate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void result_frame::set_has_site_estimate() {
  _has_bits_[0] |= 0x00000004u;
}
void result_frame::clear_has_site_estimate() {
  _has_bits_[0] &= ~0x00000004u;
}
void result_frame::clear_site_estimate() {
  site_estimate_ = 0;
  clear_has_site_estimate();
}
::google::protobuf::int32 result_frame::site_estimate() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.site_estimate)
  return site_estimate_;
}
void result_frame::set_site_estimate(::google::protobuf::int32 value) {
  set_has_site_estimate();
  site_estimate_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.site_estimate)
}

// optional int32 docs_estimate = 4;
bool result_frame::has_docs_estimate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void result_frame::set_has_docs_estimate() {
  _has_bits_[0] |= 0x00000008u;
}
void result_frame::clear_has_docs_estimate() {
  _has_bits_[0] &= ~0x00000008u;
}
void result_frame::clear_docs_estimate() {
  docs_estimate_ = 0;
  clear_has_docs_estimate();
}
::google::protobuf::int32 result_frame::docs_estimate() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.docs_estimate)
  return docs_estimate_;
}
void result_frame::set_docs_estimate(::google::protobuf::int32 value) {
  set_has_docs_estimate();
  docs_estimate_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.docs_estimate)
}

// optional uint32 n_ranked_docs = 5;
bool result_frame::has_n_ranked_docs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void result_frame::set_has_n_ranked_docs() {
  _has_bits_[0] |= 0x00000010u;
}
void result_frame::clear_has_n_ranked_docs() {
  _has_bits_[0] &= ~0x00000010u;
}
void result_frame::clear_n_ranked_docs() {
  n_ranked_docs_ = 0u;
  clear_has_n_ranked_docs();
}
::google::protobuf::uint32 result_frame::n_ranked_docs() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.n_ranked_docs)
  return n_ranked_docs_;
}
void result_frame::set_n_ranked_docs(::google::protobuf::uint32 value) {
  set_has_n_ranked_docs();
  n_ranked_docs_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.n_ranked_docs)
}

// optional uint32 first_index = 6;
bool result_frame::has_first_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void result_frame::set_has_first_index() {
  _has_bits_[0] |= 0x00000020u;
}
void result_frame::clear_has_first_index() {
  _has_bits_[0] &= ~0x00000020u;
}
void result_frame::clear_first_index() {
  first_index_ = 0u;
  clear_has_first_index();
}
::google::protobuf::uint32 result_frame::first_index() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.first_index)
  return first_index_;
}
void result_frame::set_first_index(::google::protobuf::uint32 value) {
  set_has_first_index();
  first_index_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.first_index)
}

// optional uint32 second_index = 7;
bool result_frame::has_second_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void result_frame::set_has_second_index() {
  _has_bits_[0] |= 0x00000040u;
}
void result_frame::clear_has_second_index() {
  _has_bits_[0] &= ~0x00000040u;
}
void result_frame::clear_second_index() {
  second_index_ = 0u;
  clear_has_second_index();
}
::google::protobuf::uint32 result_frame::second_index() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.second_index)
  return second_index_;
}
void result_frame::set_second_index(::google::protobuf::uint32 value) {
  set_has_second_index();
  second_index_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.second_index)
}

// optional uint32 last_index = 8;
bool result_frame::has_last_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void result_frame::set_has_last_index() {
  _has_bits_[0] |= 0x00000080u;
}
void result_frame::clear_has_last_index() {
  _has_bits_[0] &= ~0x00000080u;
}
void result_frame::clear_last_index() {
  last_index_ = 0u;
  clear_has_last_index();
}
::google::protobuf::uint32 result_frame::last_index() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.last_index)
  return last_index_;
}
void result_frame::set_last_index(::google::protobuf::uint32 value) {
  set_has_last_index();
  last_index_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.last_index)
}

// optional uint32 page_count = 9;
bool result_frame::has_page_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void result_frame::set_has_page_count() {
  _has_bits_[0] |= 0x00000100u;
}
void result_frame::clear_has_page_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void result_frame::clear_page_count() {
  page_count_ = 0u;
  clear_has_page_count();
}
::google::protobuf::uint32 result_frame::page_count() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.page_count)
  return page_count_;
}
void result_frame::set_page_count(::google::protobuf::uint32 value) {
  set_has_page_count();
  page_count_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.page_count)
}

// optional uint32 n_param = 10;
bool result_frame::has_n_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void result_frame::set_has_n_param() {
  _has_bits_[0] |= 0x00000200u;
}
void result_frame::clear_has_n_param() {
  _has_bits_[0] &= ~0x00000200u;
}
void result_frame::clear_n_param() {
  n_param_ = 0u;
  clear_has_n_param();
}
::google::protobuf::uint32 result_frame::n_param() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.n_param)
  return n_param_;
}
void result_frame::set_n_param(::google::protobuf::uint32 value) {
  set_has_n_param();
  n_param_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.n_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int snippet_text_item::kTextFieldNumber;
const int snippet_text_item::kCbFieldNumber;
const int snippet_text_item::kCeFieldNumber;
const int snippet_text_item::kDebugPrintoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

snippet_text_item::snippet_text_item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.snippet_text_item)
}
snippet_text_item::snippet_text_item(const snippet_text_item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  debug_printout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_debug_printout()) {
    debug_printout_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_printout_);
  }
  ::memcpy(&cb_, &from.cb_,
    static_cast<size_t>(reinterpret_cast<char*>(&ce_) -
    reinterpret_cast<char*>(&cb_)) + sizeof(ce_));
  // @@protoc_insertion_point(copy_constructor:gogo.sr.snippet_text_item)
}

void snippet_text_item::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_printout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ce_) -
      reinterpret_cast<char*>(&cb_)) + sizeof(ce_));
}

snippet_text_item::~snippet_text_item() {
  // @@protoc_insertion_point(destructor:gogo.sr.snippet_text_item)
  SharedDtor();
}

void snippet_text_item::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_printout_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void snippet_text_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* snippet_text_item::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const snippet_text_item& snippet_text_item::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

snippet_text_item* snippet_text_item::New(::google::protobuf::Arena* arena) const {
  snippet_text_item* n = new snippet_text_item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void snippet_text_item::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.snippet_text_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!debug_printout_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*debug_printout_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&cb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ce_) -
        reinterpret_cast<char*>(&cb_)) + sizeof(ce_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool snippet_text_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.snippet_text_item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.snippet_text_item.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cb = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ce = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ce();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string debug_printout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_printout()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug_printout().data(), static_cast<int>(this->debug_printout().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.snippet_text_item.debug_printout");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.snippet_text_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.snippet_text_item)
  return false;
#undef DO_
}

void snippet_text_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.snippet_text_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.snippet_text_item.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional bool cb = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cb(), output);
  }

  // optional bool ce = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ce(), output);
  }

  // optional string debug_printout = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_printout().data(), static_cast<int>(this->debug_printout().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.snippet_text_item.debug_printout");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->debug_printout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.snippet_text_item)
}

::google::protobuf::uint8* snippet_text_item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.snippet_text_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.snippet_text_item.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional bool cb = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cb(), target);
  }

  // optional bool ce = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ce(), target);
  }

  // optional string debug_printout = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_printout().data(), static_cast<int>(this->debug_printout().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.snippet_text_item.debug_printout");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->debug_printout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.snippet_text_item)
  return target;
}

size_t snippet_text_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.snippet_text_item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional string debug_printout = 4;
    if (has_debug_printout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_printout());
    }

    // optional bool cb = 2;
    if (has_cb()) {
      total_size += 1 + 1;
    }

    // optional bool ce = 3;
    if (has_ce()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void snippet_text_item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.snippet_text_item)
  GOOGLE_DCHECK_NE(&from, this);
  const snippet_text_item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const snippet_text_item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.snippet_text_item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.snippet_text_item)
    MergeFrom(*source);
  }
}

void snippet_text_item::MergeFrom(const snippet_text_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.snippet_text_item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_debug_printout();
      debug_printout_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_printout_);
    }
    if (cached_has_bits & 0x00000004u) {
      cb_ = from.cb_;
    }
    if (cached_has_bits & 0x00000008u) {
      ce_ = from.ce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void snippet_text_item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.snippet_text_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void snippet_text_item::CopyFrom(const snippet_text_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.snippet_text_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool snippet_text_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void snippet_text_item::Swap(snippet_text_item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void snippet_text_item::InternalSwap(snippet_text_item* other) {
  using std::swap;
  text_.Swap(&other->text_);
  debug_printout_.Swap(&other->debug_printout_);
  swap(cb_, other->cb_);
  swap(ce_, other->ce_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata snippet_text_item::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// snippet_text_item

// required string text = 1;
bool snippet_text_item::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void snippet_text_item::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void snippet_text_item::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void snippet_text_item::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& snippet_text_item::text() const {
  // @@protoc_insertion_point(field_get:gogo.sr.snippet_text_item.text)
  return text_.GetNoArena();
}
void snippet_text_item::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.snippet_text_item.text)
}
#if LANG_CXX11
void snippet_text_item::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.snippet_text_item.text)
}
#endif
void snippet_text_item::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.snippet_text_item.text)
}
void snippet_text_item::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.snippet_text_item.text)
}
::std::string* snippet_text_item::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:gogo.sr.snippet_text_item.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* snippet_text_item::release_text() {
  // @@protoc_insertion_point(field_release:gogo.sr.snippet_text_item.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void snippet_text_item::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.snippet_text_item.text)
}

// optional bool cb = 2;
bool snippet_text_item::has_cb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void snippet_text_item::set_has_cb() {
  _has_bits_[0] |= 0x00000004u;
}
void snippet_text_item::clear_has_cb() {
  _has_bits_[0] &= ~0x00000004u;
}
void snippet_text_item::clear_cb() {
  cb_ = false;
  clear_has_cb();
}
bool snippet_text_item::cb() const {
  // @@protoc_insertion_point(field_get:gogo.sr.snippet_text_item.cb)
  return cb_;
}
void snippet_text_item::set_cb(bool value) {
  set_has_cb();
  cb_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.snippet_text_item.cb)
}

// optional bool ce = 3;
bool snippet_text_item::has_ce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void snippet_text_item::set_has_ce() {
  _has_bits_[0] |= 0x00000008u;
}
void snippet_text_item::clear_has_ce() {
  _has_bits_[0] &= ~0x00000008u;
}
void snippet_text_item::clear_ce() {
  ce_ = false;
  clear_has_ce();
}
bool snippet_text_item::ce() const {
  // @@protoc_insertion_point(field_get:gogo.sr.snippet_text_item.ce)
  return ce_;
}
void snippet_text_item::set_ce(bool value) {
  set_has_ce();
  ce_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.snippet_text_item.ce)
}

// optional string debug_printout = 4;
bool snippet_text_item::has_debug_printout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void snippet_text_item::set_has_debug_printout() {
  _has_bits_[0] |= 0x00000002u;
}
void snippet_text_item::clear_has_debug_printout() {
  _has_bits_[0] &= ~0x00000002u;
}
void snippet_text_item::clear_debug_printout() {
  debug_printout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_debug_printout();
}
const ::std::string& snippet_text_item::debug_printout() const {
  // @@protoc_insertion_point(field_get:gogo.sr.snippet_text_item.debug_printout)
  return debug_printout_.GetNoArena();
}
void snippet_text_item::set_debug_printout(const ::std::string& value) {
  set_has_debug_printout();
  debug_printout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.snippet_text_item.debug_printout)
}
#if LANG_CXX11
void snippet_text_item::set_debug_printout(::std::string&& value) {
  set_has_debug_printout();
  debug_printout_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.snippet_text_item.debug_printout)
}
#endif
void snippet_text_item::set_debug_printout(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_debug_printout();
  debug_printout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.snippet_text_item.debug_printout)
}
void snippet_text_item::set_debug_printout(const char* value, size_t size) {
  set_has_debug_printout();
  debug_printout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.snippet_text_item.debug_printout)
}
::std::string* snippet_text_item::mutable_debug_printout() {
  set_has_debug_printout();
  // @@protoc_insertion_point(field_mutable:gogo.sr.snippet_text_item.debug_printout)
  return debug_printout_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* snippet_text_item::release_debug_printout() {
  // @@protoc_insertion_point(field_release:gogo.sr.snippet_text_item.debug_printout)
  clear_has_debug_printout();
  return debug_printout_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void snippet_text_item::set_allocated_debug_printout(::std::string* debug_printout) {
  if (debug_printout != NULL) {
    set_has_debug_printout();
  } else {
    clear_has_debug_printout();
  }
  debug_printout_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug_printout);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.snippet_text_item.debug_printout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int snippet_item::kTextFieldNumber;
const int snippet_item::kQualFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

snippet_item::snippet_item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.snippet_item)
}
snippet_item::snippet_item(const snippet_item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      text_(from.text_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qual_ = from.qual_;
  // @@protoc_insertion_point(copy_constructor:gogo.sr.snippet_item)
}

void snippet_item::SharedCtor() {
  _cached_size_ = 0;
  qual_ = 0u;
}

snippet_item::~snippet_item() {
  // @@protoc_insertion_point(destructor:gogo.sr.snippet_item)
  SharedDtor();
}

void snippet_item::SharedDtor() {
}

void snippet_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* snippet_item::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const snippet_item& snippet_item::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

snippet_item* snippet_item::New(::google::protobuf::Arena* arena) const {
  snippet_item* n = new snippet_item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void snippet_item::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.snippet_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.Clear();
  qual_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool snippet_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.snippet_item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gogo.sr.snippet_text_item text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 qual = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_qual();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qual_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.snippet_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.snippet_item)
  return false;
#undef DO_
}

void snippet_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.snippet_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.sr.snippet_text_item text = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->text_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->text(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 qual = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->qual(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.snippet_item)
}

::google::protobuf::uint8* snippet_item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.snippet_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.sr.snippet_text_item text = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->text_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->text(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 qual = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->qual(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.snippet_item)
  return target;
}

size_t snippet_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.snippet_item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .gogo.sr.snippet_text_item text = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->text_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text(static_cast<int>(i)));
    }
  }

  // optional uint32 qual = 4;
  if (has_qual()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qual());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void snippet_item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.snippet_item)
  GOOGLE_DCHECK_NE(&from, this);
  const snippet_item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const snippet_item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.snippet_item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.snippet_item)
    MergeFrom(*source);
  }
}

void snippet_item::MergeFrom(const snippet_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.snippet_item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  text_.MergeFrom(from.text_);
  if (from.has_qual()) {
    set_qual(from.qual());
  }
}

void snippet_item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.snippet_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void snippet_item::CopyFrom(const snippet_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.snippet_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool snippet_item::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->text())) return false;
  return true;
}

void snippet_item::Swap(snippet_item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void snippet_item::InternalSwap(snippet_item* other) {
  using std::swap;
  text_.InternalSwap(&other->text_);
  swap(qual_, other->qual_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata snippet_item::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// snippet_item

// repeated .gogo.sr.snippet_text_item text = 3;
int snippet_item::text_size() const {
  return text_.size();
}
void snippet_item::clear_text() {
  text_.Clear();
}
const ::gogo::sr::snippet_text_item& snippet_item::text(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.snippet_item.text)
  return text_.Get(index);
}
::gogo::sr::snippet_text_item* snippet_item::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.snippet_item.text)
  return text_.Mutable(index);
}
::gogo::sr::snippet_text_item* snippet_item::add_text() {
  // @@protoc_insertion_point(field_add:gogo.sr.snippet_item.text)
  return text_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::sr::snippet_text_item >*
snippet_item::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.snippet_item.text)
  return &text_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::sr::snippet_text_item >&
snippet_item::text() const {
  // @@protoc_insertion_point(field_list:gogo.sr.snippet_item.text)
  return text_;
}

// optional uint32 qual = 4;
bool snippet_item::has_qual() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void snippet_item::set_has_qual() {
  _has_bits_[0] |= 0x00000001u;
}
void snippet_item::clear_has_qual() {
  _has_bits_[0] &= ~0x00000001u;
}
void snippet_item::clear_qual() {
  qual_ = 0u;
  clear_has_qual();
}
::google::protobuf::uint32 snippet_item::qual() const {
  // @@protoc_insertion_point(field_get:gogo.sr.snippet_item.qual)
  return qual_;
}
void snippet_item::set_qual(::google::protobuf::uint32 value) {
  set_has_qual();
  qual_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.snippet_item.qual)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int doc_data_ex::kDepthFieldNumber;
const int doc_data_ex::kDoclenFieldNumber;
const int doc_data_ex::kRankFieldNumber;
const int doc_data_ex::kTextRFieldNumber;
const int doc_data_ex::kTitleRFieldNumber;
const int doc_data_ex::kLinkRFieldNumber;
const int doc_data_ex::kCatalogRFieldNumber;
const int doc_data_ex::kTrustedRFieldNumber;
const int doc_data_ex::kWikiRFieldNumber;
const int doc_data_ex::kCtgRFieldNumber;
const int doc_data_ex::kClickNufRFieldNumber;
const int doc_data_ex::kClickLinkRFieldNumber;
const int doc_data_ex::kQueryLinkRFieldNumber;
const int doc_data_ex::kClickUnfRFieldNumber;
const int doc_data_ex::kMaxWFreqFieldNumber;
const int doc_data_ex::kLastDeltaFieldNumber;
const int doc_data_ex::kClustTagFieldNumber;
const int doc_data_ex::kDocTraceFieldNumber;
const int doc_data_ex::kNoSnFieldNumber;
const int doc_data_ex::kClickRankFieldNumber;
const int doc_data_ex::kQualityDataFieldNumber;
const int doc_data_ex::kBestOpFieldNumber;
const int doc_data_ex::kPassagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

doc_data_ex::doc_data_ex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.doc_data_ex)
}
doc_data_ex::doc_data_ex(const doc_data_ex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clusttag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clusttag()) {
    clusttag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clusttag_);
  }
  doc_trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_doc_trace()) {
    doc_trace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_trace_);
  }
  if (from.has_clickrank()) {
    clickrank_ = new ::gogo::sr::clickrank_data(*from.clickrank_);
  } else {
    clickrank_ = NULL;
  }
  if (from.has_qualitydata()) {
    qualitydata_ = new ::gogo::sr::quality_data(*from.qualitydata_);
  } else {
    qualitydata_ = NULL;
  }
  if (from.has_passages()) {
    passages_ = new ::gogo::sr::passage_data(*from.passages_);
  } else {
    passages_ = NULL;
  }
  ::memcpy(&depth_, &from.depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&bestop_) -
    reinterpret_cast<char*>(&depth_)) + sizeof(bestop_));
  // @@protoc_insertion_point(copy_constructor:gogo.sr.doc_data_ex)
}

void doc_data_ex::SharedCtor() {
  _cached_size_ = 0;
  clusttag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clickrank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bestop_) -
      reinterpret_cast<char*>(&clickrank_)) + sizeof(bestop_));
}

doc_data_ex::~doc_data_ex() {
  // @@protoc_insertion_point(destructor:gogo.sr.doc_data_ex)
  SharedDtor();
}

void doc_data_ex::SharedDtor() {
  clusttag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_trace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clickrank_;
  if (this != internal_default_instance()) delete qualitydata_;
  if (this != internal_default_instance()) delete passages_;
}

void doc_data_ex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* doc_data_ex::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const doc_data_ex& doc_data_ex::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

doc_data_ex* doc_data_ex::New(::google::protobuf::Arena* arena) const {
  doc_data_ex* n = new doc_data_ex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void doc_data_ex::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.doc_data_ex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!clusttag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clusttag_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!doc_trace_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*doc_trace_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(clickrank_ != NULL);
      clickrank_->::gogo::sr::clickrank_data::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(qualitydata_ != NULL);
      qualitydata_->::gogo::sr::quality_data::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(passages_ != NULL);
      passages_->::gogo::sr::passage_data::Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_) -
        reinterpret_cast<char*>(&depth_)) + sizeof(rank_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&textr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clicknufr_) -
        reinterpret_cast<char*>(&textr_)) + sizeof(clicknufr_));
  }
  if (cached_has_bits & 8323072u) {
    ::memset(&clicklinkr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bestop_) -
        reinterpret_cast<char*>(&clicklinkr_)) + sizeof(bestop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool doc_data_ex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.doc_data_ex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 depth = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 doclen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_doclen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &doclen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rank = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double textR = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_textr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &textr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double titleR = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_titler();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &titler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double linkR = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_linkr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linkr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double catalogR = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_catalogr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &catalogr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double trustedR = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_trustedr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trustedr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wikiR = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_wikir();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wikir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ctgR = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_ctgr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ctgr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double clickNufR = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_clicknufr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clicknufr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double clickLinkR = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_clicklinkr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clicklinkr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double queryLinkR = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_querylinkr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &querylinkr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double clickUnfR = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_clickunfr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clickunfr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 maxWFreq = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_maxwfreq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxwfreq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lastDelta = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_lastdelta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastdelta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string clustTag = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clusttag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clusttag().data(), static_cast<int>(this->clusttag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.doc_data_ex.clustTag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string doc_trace = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_trace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->doc_trace().data(), static_cast<int>(this->doc_trace().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.doc_data_ex.doc_trace");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool no_sn = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_no_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.sr.clickrank_data clickRank = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clickrank()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.sr.quality_data qualityData = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qualitydata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bestOp = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_bestop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bestop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.sr.passage_data passages = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_passages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.doc_data_ex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.doc_data_ex)
  return false;
#undef DO_
}

void doc_data_ex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.doc_data_ex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 depth = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->depth(), output);
  }

  // optional uint32 doclen = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->doclen(), output);
  }

  // optional double rank = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rank(), output);
  }

  // optional double textR = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->textr(), output);
  }

  // optional double titleR = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->titler(), output);
  }

  // optional double linkR = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->linkr(), output);
  }

  // optional double catalogR = 7;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->catalogr(), output);
  }

  // optional double trustedR = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->trustedr(), output);
  }

  // optional double wikiR = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->wikir(), output);
  }

  // optional double ctgR = 10;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->ctgr(), output);
  }

  // optional double clickNufR = 11;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->clicknufr(), output);
  }

  // optional double clickLinkR = 12;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->clicklinkr(), output);
  }

  // optional double queryLinkR = 13;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->querylinkr(), output);
  }

  // optional double clickUnfR = 14;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->clickunfr(), output);
  }

  // optional uint32 maxWFreq = 15;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->maxwfreq(), output);
  }

  // optional double lastDelta = 16;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->lastdelta(), output);
  }

  // optional string clustTag = 17;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clusttag().data(), static_cast<int>(this->clusttag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_data_ex.clustTag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->clusttag(), output);
  }

  // optional string doc_trace = 18;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->doc_trace().data(), static_cast<int>(this->doc_trace().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_data_ex.doc_trace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->doc_trace(), output);
  }

  // optional bool no_sn = 19;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->no_sn(), output);
  }

  // optional .gogo.sr.clickrank_data clickRank = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->clickrank_, output);
  }

  // optional .gogo.sr.quality_data qualityData = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->qualitydata_, output);
  }

  // optional uint32 bestOp = 22;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->bestop(), output);
  }

  // optional .gogo.sr.passage_data passages = 23;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->passages_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.doc_data_ex)
}

::google::protobuf::uint8* doc_data_ex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.doc_data_ex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 depth = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->depth(), target);
  }

  // optional uint32 doclen = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->doclen(), target);
  }

  // optional double rank = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rank(), target);
  }

  // optional double textR = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->textr(), target);
  }

  // optional double titleR = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->titler(), target);
  }

  // optional double linkR = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->linkr(), target);
  }

  // optional double catalogR = 7;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->catalogr(), target);
  }

  // optional double trustedR = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->trustedr(), target);
  }

  // optional double wikiR = 9;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->wikir(), target);
  }

  // optional double ctgR = 10;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->ctgr(), target);
  }

  // optional double clickNufR = 11;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->clicknufr(), target);
  }

  // optional double clickLinkR = 12;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->clicklinkr(), target);
  }

  // optional double queryLinkR = 13;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->querylinkr(), target);
  }

  // optional double clickUnfR = 14;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->clickunfr(), target);
  }

  // optional uint32 maxWFreq = 15;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->maxwfreq(), target);
  }

  // optional double lastDelta = 16;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->lastdelta(), target);
  }

  // optional string clustTag = 17;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clusttag().data(), static_cast<int>(this->clusttag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_data_ex.clustTag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->clusttag(), target);
  }

  // optional string doc_trace = 18;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->doc_trace().data(), static_cast<int>(this->doc_trace().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_data_ex.doc_trace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->doc_trace(), target);
  }

  // optional bool no_sn = 19;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->no_sn(), target);
  }

  // optional .gogo.sr.clickrank_data clickRank = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->clickrank_, deterministic, target);
  }

  // optional .gogo.sr.quality_data qualityData = 21;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->qualitydata_, deterministic, target);
  }

  // optional uint32 bestOp = 22;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->bestop(), target);
  }

  // optional .gogo.sr.passage_data passages = 23;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->passages_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.doc_data_ex)
  return target;
}

size_t doc_data_ex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.doc_data_ex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string clustTag = 17;
    if (has_clusttag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clusttag());
    }

    // optional string doc_trace = 18;
    if (has_doc_trace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doc_trace());
    }

    // optional .gogo.sr.clickrank_data clickRank = 20;
    if (has_clickrank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clickrank_);
    }

    // optional .gogo.sr.quality_data qualityData = 21;
    if (has_qualitydata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->qualitydata_);
    }

    // optional .gogo.sr.passage_data passages = 23;
    if (has_passages()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->passages_);
    }

    // optional sint32 depth = 1;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->depth());
    }

    // optional uint32 doclen = 2;
    if (has_doclen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->doclen());
    }

    // optional double rank = 3;
    if (has_rank()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double textR = 4;
    if (has_textr()) {
      total_size += 1 + 8;
    }

    // optional double titleR = 5;
    if (has_titler()) {
      total_size += 1 + 8;
    }

    // optional double linkR = 6;
    if (has_linkr()) {
      total_size += 1 + 8;
    }

    // optional double catalogR = 7;
    if (has_catalogr()) {
      total_size += 1 + 8;
    }

    // optional double trustedR = 8;
    if (has_trustedr()) {
      total_size += 1 + 8;
    }

    // optional double wikiR = 9;
    if (has_wikir()) {
      total_size += 1 + 8;
    }

    // optional double ctgR = 10;
    if (has_ctgr()) {
      total_size += 1 + 8;
    }

    // optional double clickNufR = 11;
    if (has_clicknufr()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional double clickLinkR = 12;
    if (has_clicklinkr()) {
      total_size += 1 + 8;
    }

    // optional double queryLinkR = 13;
    if (has_querylinkr()) {
      total_size += 1 + 8;
    }

    // optional double clickUnfR = 14;
    if (has_clickunfr()) {
      total_size += 1 + 8;
    }

    // optional double lastDelta = 16;
    if (has_lastdelta()) {
      total_size += 2 + 8;
    }

    // optional uint32 maxWFreq = 15;
    if (has_maxwfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxwfreq());
    }

    // optional bool no_sn = 19;
    if (has_no_sn()) {
      total_size += 2 + 1;
    }

    // optional uint32 bestOp = 22;
    if (has_bestop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bestop());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void doc_data_ex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.doc_data_ex)
  GOOGLE_DCHECK_NE(&from, this);
  const doc_data_ex* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const doc_data_ex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.doc_data_ex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.doc_data_ex)
    MergeFrom(*source);
  }
}

void doc_data_ex::MergeFrom(const doc_data_ex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.doc_data_ex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clusttag();
      clusttag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clusttag_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_doc_trace();
      doc_trace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_trace_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_clickrank()->::gogo::sr::clickrank_data::MergeFrom(from.clickrank());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_qualitydata()->::gogo::sr::quality_data::MergeFrom(from.qualitydata());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_passages()->::gogo::sr::passage_data::MergeFrom(from.passages());
    }
    if (cached_has_bits & 0x00000020u) {
      depth_ = from.depth_;
    }
    if (cached_has_bits & 0x00000040u) {
      doclen_ = from.doclen_;
    }
    if (cached_has_bits & 0x00000080u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      textr_ = from.textr_;
    }
    if (cached_has_bits & 0x00000200u) {
      titler_ = from.titler_;
    }
    if (cached_has_bits & 0x00000400u) {
      linkr_ = from.linkr_;
    }
    if (cached_has_bits & 0x00000800u) {
      catalogr_ = from.catalogr_;
    }
    if (cached_has_bits & 0x00001000u) {
      trustedr_ = from.trustedr_;
    }
    if (cached_has_bits & 0x00002000u) {
      wikir_ = from.wikir_;
    }
    if (cached_has_bits & 0x00004000u) {
      ctgr_ = from.ctgr_;
    }
    if (cached_has_bits & 0x00008000u) {
      clicknufr_ = from.clicknufr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      clicklinkr_ = from.clicklinkr_;
    }
    if (cached_has_bits & 0x00020000u) {
      querylinkr_ = from.querylinkr_;
    }
    if (cached_has_bits & 0x00040000u) {
      clickunfr_ = from.clickunfr_;
    }
    if (cached_has_bits & 0x00080000u) {
      lastdelta_ = from.lastdelta_;
    }
    if (cached_has_bits & 0x00100000u) {
      maxwfreq_ = from.maxwfreq_;
    }
    if (cached_has_bits & 0x00200000u) {
      no_sn_ = from.no_sn_;
    }
    if (cached_has_bits & 0x00400000u) {
      bestop_ = from.bestop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void doc_data_ex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.doc_data_ex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void doc_data_ex::CopyFrom(const doc_data_ex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.doc_data_ex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool doc_data_ex::IsInitialized() const {
  if (has_clickrank()) {
    if (!this->clickrank_->IsInitialized()) return false;
  }
  if (has_qualitydata()) {
    if (!this->qualitydata_->IsInitialized()) return false;
  }
  return true;
}

void doc_data_ex::Swap(doc_data_ex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void doc_data_ex::InternalSwap(doc_data_ex* other) {
  using std::swap;
  clusttag_.Swap(&other->clusttag_);
  doc_trace_.Swap(&other->doc_trace_);
  swap(clickrank_, other->clickrank_);
  swap(qualitydata_, other->qualitydata_);
  swap(passages_, other->passages_);
  swap(depth_, other->depth_);
  swap(doclen_, other->doclen_);
  swap(rank_, other->rank_);
  swap(textr_, other->textr_);
  swap(titler_, other->titler_);
  swap(linkr_, other->linkr_);
  swap(catalogr_, other->catalogr_);
  swap(trustedr_, other->trustedr_);
  swap(wikir_, other->wikir_);
  swap(ctgr_, other->ctgr_);
  swap(clicknufr_, other->clicknufr_);
  swap(clicklinkr_, other->clicklinkr_);
  swap(querylinkr_, other->querylinkr_);
  swap(clickunfr_, other->clickunfr_);
  swap(lastdelta_, other->lastdelta_);
  swap(maxwfreq_, other->maxwfreq_);
  swap(no_sn_, other->no_sn_);
  swap(bestop_, other->bestop_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata doc_data_ex::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// doc_data_ex

// optional sint32 depth = 1;
bool doc_data_ex::has_depth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void doc_data_ex::set_has_depth() {
  _has_bits_[0] |= 0x00000020u;
}
void doc_data_ex::clear_has_depth() {
  _has_bits_[0] &= ~0x00000020u;
}
void doc_data_ex::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
::google::protobuf::int32 doc_data_ex::depth() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.depth)
  return depth_;
}
void doc_data_ex::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.depth)
}

// optional uint32 doclen = 2;
bool doc_data_ex::has_doclen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void doc_data_ex::set_has_doclen() {
  _has_bits_[0] |= 0x00000040u;
}
void doc_data_ex::clear_has_doclen() {
  _has_bits_[0] &= ~0x00000040u;
}
void doc_data_ex::clear_doclen() {
  doclen_ = 0u;
  clear_has_doclen();
}
::google::protobuf::uint32 doc_data_ex::doclen() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.doclen)
  return doclen_;
}
void doc_data_ex::set_doclen(::google::protobuf::uint32 value) {
  set_has_doclen();
  doclen_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.doclen)
}

// optional double rank = 3;
bool doc_data_ex::has_rank() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void doc_data_ex::set_has_rank() {
  _has_bits_[0] |= 0x00000080u;
}
void doc_data_ex::clear_has_rank() {
  _has_bits_[0] &= ~0x00000080u;
}
void doc_data_ex::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
double doc_data_ex::rank() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.rank)
  return rank_;
}
void doc_data_ex::set_rank(double value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.rank)
}

// optional double textR = 4;
bool doc_data_ex::has_textr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void doc_data_ex::set_has_textr() {
  _has_bits_[0] |= 0x00000100u;
}
void doc_data_ex::clear_has_textr() {
  _has_bits_[0] &= ~0x00000100u;
}
void doc_data_ex::clear_textr() {
  textr_ = 0;
  clear_has_textr();
}
double doc_data_ex::textr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.textR)
  return textr_;
}
void doc_data_ex::set_textr(double value) {
  set_has_textr();
  textr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.textR)
}

// optional double titleR = 5;
bool doc_data_ex::has_titler() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void doc_data_ex::set_has_titler() {
  _has_bits_[0] |= 0x00000200u;
}
void doc_data_ex::clear_has_titler() {
  _has_bits_[0] &= ~0x00000200u;
}
void doc_data_ex::clear_titler() {
  titler_ = 0;
  clear_has_titler();
}
double doc_data_ex::titler() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.titleR)
  return titler_;
}
void doc_data_ex::set_titler(double value) {
  set_has_titler();
  titler_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.titleR)
}

// optional double linkR = 6;
bool doc_data_ex::has_linkr() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void doc_data_ex::set_has_linkr() {
  _has_bits_[0] |= 0x00000400u;
}
void doc_data_ex::clear_has_linkr() {
  _has_bits_[0] &= ~0x00000400u;
}
void doc_data_ex::clear_linkr() {
  linkr_ = 0;
  clear_has_linkr();
}
double doc_data_ex::linkr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.linkR)
  return linkr_;
}
void doc_data_ex::set_linkr(double value) {
  set_has_linkr();
  linkr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.linkR)
}

// optional double catalogR = 7;
bool doc_data_ex::has_catalogr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void doc_data_ex::set_has_catalogr() {
  _has_bits_[0] |= 0x00000800u;
}
void doc_data_ex::clear_has_catalogr() {
  _has_bits_[0] &= ~0x00000800u;
}
void doc_data_ex::clear_catalogr() {
  catalogr_ = 0;
  clear_has_catalogr();
}
double doc_data_ex::catalogr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.catalogR)
  return catalogr_;
}
void doc_data_ex::set_catalogr(double value) {
  set_has_catalogr();
  catalogr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.catalogR)
}

// optional double trustedR = 8;
bool doc_data_ex::has_trustedr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void doc_data_ex::set_has_trustedr() {
  _has_bits_[0] |= 0x00001000u;
}
void doc_data_ex::clear_has_trustedr() {
  _has_bits_[0] &= ~0x00001000u;
}
void doc_data_ex::clear_trustedr() {
  trustedr_ = 0;
  clear_has_trustedr();
}
double doc_data_ex::trustedr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.trustedR)
  return trustedr_;
}
void doc_data_ex::set_trustedr(double value) {
  set_has_trustedr();
  trustedr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.trustedR)
}

// optional double wikiR = 9;
bool doc_data_ex::has_wikir() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void doc_data_ex::set_has_wikir() {
  _has_bits_[0] |= 0x00002000u;
}
void doc_data_ex::clear_has_wikir() {
  _has_bits_[0] &= ~0x00002000u;
}
void doc_data_ex::clear_wikir() {
  wikir_ = 0;
  clear_has_wikir();
}
double doc_data_ex::wikir() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.wikiR)
  return wikir_;
}
void doc_data_ex::set_wikir(double value) {
  set_has_wikir();
  wikir_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.wikiR)
}

// optional double ctgR = 10;
bool doc_data_ex::has_ctgr() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void doc_data_ex::set_has_ctgr() {
  _has_bits_[0] |= 0x00004000u;
}
void doc_data_ex::clear_has_ctgr() {
  _has_bits_[0] &= ~0x00004000u;
}
void doc_data_ex::clear_ctgr() {
  ctgr_ = 0;
  clear_has_ctgr();
}
double doc_data_ex::ctgr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.ctgR)
  return ctgr_;
}
void doc_data_ex::set_ctgr(double value) {
  set_has_ctgr();
  ctgr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.ctgR)
}

// optional double clickNufR = 11;
bool doc_data_ex::has_clicknufr() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void doc_data_ex::set_has_clicknufr() {
  _has_bits_[0] |= 0x00008000u;
}
void doc_data_ex::clear_has_clicknufr() {
  _has_bits_[0] &= ~0x00008000u;
}
void doc_data_ex::clear_clicknufr() {
  clicknufr_ = 0;
  clear_has_clicknufr();
}
double doc_data_ex::clicknufr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.clickNufR)
  return clicknufr_;
}
void doc_data_ex::set_clicknufr(double value) {
  set_has_clicknufr();
  clicknufr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.clickNufR)
}

// optional double clickLinkR = 12;
bool doc_data_ex::has_clicklinkr() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void doc_data_ex::set_has_clicklinkr() {
  _has_bits_[0] |= 0x00010000u;
}
void doc_data_ex::clear_has_clicklinkr() {
  _has_bits_[0] &= ~0x00010000u;
}
void doc_data_ex::clear_clicklinkr() {
  clicklinkr_ = 0;
  clear_has_clicklinkr();
}
double doc_data_ex::clicklinkr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.clickLinkR)
  return clicklinkr_;
}
void doc_data_ex::set_clicklinkr(double value) {
  set_has_clicklinkr();
  clicklinkr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.clickLinkR)
}

// optional double queryLinkR = 13;
bool doc_data_ex::has_querylinkr() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void doc_data_ex::set_has_querylinkr() {
  _has_bits_[0] |= 0x00020000u;
}
void doc_data_ex::clear_has_querylinkr() {
  _has_bits_[0] &= ~0x00020000u;
}
void doc_data_ex::clear_querylinkr() {
  querylinkr_ = 0;
  clear_has_querylinkr();
}
double doc_data_ex::querylinkr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.queryLinkR)
  return querylinkr_;
}
void doc_data_ex::set_querylinkr(double value) {
  set_has_querylinkr();
  querylinkr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.queryLinkR)
}

// optional double clickUnfR = 14;
bool doc_data_ex::has_clickunfr() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void doc_data_ex::set_has_clickunfr() {
  _has_bits_[0] |= 0x00040000u;
}
void doc_data_ex::clear_has_clickunfr() {
  _has_bits_[0] &= ~0x00040000u;
}
void doc_data_ex::clear_clickunfr() {
  clickunfr_ = 0;
  clear_has_clickunfr();
}
double doc_data_ex::clickunfr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.clickUnfR)
  return clickunfr_;
}
void doc_data_ex::set_clickunfr(double value) {
  set_has_clickunfr();
  clickunfr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.clickUnfR)
}

// optional uint32 maxWFreq = 15;
bool doc_data_ex::has_maxwfreq() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void doc_data_ex::set_has_maxwfreq() {
  _has_bits_[0] |= 0x00100000u;
}
void doc_data_ex::clear_has_maxwfreq() {
  _has_bits_[0] &= ~0x00100000u;
}
void doc_data_ex::clear_maxwfreq() {
  maxwfreq_ = 0u;
  clear_has_maxwfreq();
}
::google::protobuf::uint32 doc_data_ex::maxwfreq() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.maxWFreq)
  return maxwfreq_;
}
void doc_data_ex::set_maxwfreq(::google::protobuf::uint32 value) {
  set_has_maxwfreq();
  maxwfreq_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.maxWFreq)
}

// optional double lastDelta = 16;
bool doc_data_ex::has_lastdelta() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void doc_data_ex::set_has_lastdelta() {
  _has_bits_[0] |= 0x00080000u;
}
void doc_data_ex::clear_has_lastdelta() {
  _has_bits_[0] &= ~0x00080000u;
}
void doc_data_ex::clear_lastdelta() {
  lastdelta_ = 0;
  clear_has_lastdelta();
}
double doc_data_ex::lastdelta() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.lastDelta)
  return lastdelta_;
}
void doc_data_ex::set_lastdelta(double value) {
  set_has_lastdelta();
  lastdelta_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.lastDelta)
}

// optional string clustTag = 17;
bool doc_data_ex::has_clusttag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void doc_data_ex::set_has_clusttag() {
  _has_bits_[0] |= 0x00000001u;
}
void doc_data_ex::clear_has_clusttag() {
  _has_bits_[0] &= ~0x00000001u;
}
void doc_data_ex::clear_clusttag() {
  clusttag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clusttag();
}
const ::std::string& doc_data_ex::clusttag() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.clustTag)
  return clusttag_.GetNoArena();
}
void doc_data_ex::set_clusttag(const ::std::string& value) {
  set_has_clusttag();
  clusttag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.clustTag)
}
#if LANG_CXX11
void doc_data_ex::set_clusttag(::std::string&& value) {
  set_has_clusttag();
  clusttag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_data_ex.clustTag)
}
#endif
void doc_data_ex::set_clusttag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clusttag();
  clusttag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_data_ex.clustTag)
}
void doc_data_ex::set_clusttag(const char* value, size_t size) {
  set_has_clusttag();
  clusttag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_data_ex.clustTag)
}
::std::string* doc_data_ex::mutable_clusttag() {
  set_has_clusttag();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_data_ex.clustTag)
  return clusttag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* doc_data_ex::release_clusttag() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_data_ex.clustTag)
  clear_has_clusttag();
  return clusttag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void doc_data_ex::set_allocated_clusttag(::std::string* clusttag) {
  if (clusttag != NULL) {
    set_has_clusttag();
  } else {
    clear_has_clusttag();
  }
  clusttag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clusttag);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_data_ex.clustTag)
}

// optional string doc_trace = 18;
bool doc_data_ex::has_doc_trace() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void doc_data_ex::set_has_doc_trace() {
  _has_bits_[0] |= 0x00000002u;
}
void doc_data_ex::clear_has_doc_trace() {
  _has_bits_[0] &= ~0x00000002u;
}
void doc_data_ex::clear_doc_trace() {
  doc_trace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc_trace();
}
const ::std::string& doc_data_ex::doc_trace() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.doc_trace)
  return doc_trace_.GetNoArena();
}
void doc_data_ex::set_doc_trace(const ::std::string& value) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.doc_trace)
}
#if LANG_CXX11
void doc_data_ex::set_doc_trace(::std::string&& value) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_data_ex.doc_trace)
}
#endif
void doc_data_ex::set_doc_trace(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_data_ex.doc_trace)
}
void doc_data_ex::set_doc_trace(const char* value, size_t size) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_data_ex.doc_trace)
}
::std::string* doc_data_ex::mutable_doc_trace() {
  set_has_doc_trace();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_data_ex.doc_trace)
  return doc_trace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* doc_data_ex::release_doc_trace() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_data_ex.doc_trace)
  clear_has_doc_trace();
  return doc_trace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void doc_data_ex::set_allocated_doc_trace(::std::string* doc_trace) {
  if (doc_trace != NULL) {
    set_has_doc_trace();
  } else {
    clear_has_doc_trace();
  }
  doc_trace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_trace);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_data_ex.doc_trace)
}

// optional bool no_sn = 19;
bool doc_data_ex::has_no_sn() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void doc_data_ex::set_has_no_sn() {
  _has_bits_[0] |= 0x00200000u;
}
void doc_data_ex::clear_has_no_sn() {
  _has_bits_[0] &= ~0x00200000u;
}
void doc_data_ex::clear_no_sn() {
  no_sn_ = false;
  clear_has_no_sn();
}
bool doc_data_ex::no_sn() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.no_sn)
  return no_sn_;
}
void doc_data_ex::set_no_sn(bool value) {
  set_has_no_sn();
  no_sn_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.no_sn)
}

// optional .gogo.sr.clickrank_data clickRank = 20;
bool doc_data_ex::has_clickrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void doc_data_ex::set_has_clickrank() {
  _has_bits_[0] |= 0x00000004u;
}
void doc_data_ex::clear_has_clickrank() {
  _has_bits_[0] &= ~0x00000004u;
}
void doc_data_ex::clear_clickrank() {
  if (clickrank_ != NULL) clickrank_->::gogo::sr::clickrank_data::Clear();
  clear_has_clickrank();
}
const ::gogo::sr::clickrank_data& doc_data_ex::clickrank() const {
  const ::gogo::sr::clickrank_data* p = clickrank_;
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.clickRank)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::clickrank_data*>(
      &::gogo::sr::_clickrank_data_default_instance_);
}
::gogo::sr::clickrank_data* doc_data_ex::mutable_clickrank() {
  set_has_clickrank();
  if (clickrank_ == NULL) {
    clickrank_ = new ::gogo::sr::clickrank_data;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_data_ex.clickRank)
  return clickrank_;
}
::gogo::sr::clickrank_data* doc_data_ex::release_clickrank() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_data_ex.clickRank)
  clear_has_clickrank();
  ::gogo::sr::clickrank_data* temp = clickrank_;
  clickrank_ = NULL;
  return temp;
}
void doc_data_ex::set_allocated_clickrank(::gogo::sr::clickrank_data* clickrank) {
  delete clickrank_;
  clickrank_ = clickrank;
  if (clickrank) {
    set_has_clickrank();
  } else {
    clear_has_clickrank();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_data_ex.clickRank)
}

// optional .gogo.sr.quality_data qualityData = 21;
bool doc_data_ex::has_qualitydata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void doc_data_ex::set_has_qualitydata() {
  _has_bits_[0] |= 0x00000008u;
}
void doc_data_ex::clear_has_qualitydata() {
  _has_bits_[0] &= ~0x00000008u;
}
void doc_data_ex::clear_qualitydata() {
  if (qualitydata_ != NULL) qualitydata_->::gogo::sr::quality_data::Clear();
  clear_has_qualitydata();
}
const ::gogo::sr::quality_data& doc_data_ex::qualitydata() const {
  const ::gogo::sr::quality_data* p = qualitydata_;
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.qualityData)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::quality_data*>(
      &::gogo::sr::_quality_data_default_instance_);
}
::gogo::sr::quality_data* doc_data_ex::mutable_qualitydata() {
  set_has_qualitydata();
  if (qualitydata_ == NULL) {
    qualitydata_ = new ::gogo::sr::quality_data;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_data_ex.qualityData)
  return qualitydata_;
}
::gogo::sr::quality_data* doc_data_ex::release_qualitydata() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_data_ex.qualityData)
  clear_has_qualitydata();
  ::gogo::sr::quality_data* temp = qualitydata_;
  qualitydata_ = NULL;
  return temp;
}
void doc_data_ex::set_allocated_qualitydata(::gogo::sr::quality_data* qualitydata) {
  delete qualitydata_;
  qualitydata_ = qualitydata;
  if (qualitydata) {
    set_has_qualitydata();
  } else {
    clear_has_qualitydata();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_data_ex.qualityData)
}

// optional uint32 bestOp = 22;
bool doc_data_ex::has_bestop() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void doc_data_ex::set_has_bestop() {
  _has_bits_[0] |= 0x00400000u;
}
void doc_data_ex::clear_has_bestop() {
  _has_bits_[0] &= ~0x00400000u;
}
void doc_data_ex::clear_bestop() {
  bestop_ = 0u;
  clear_has_bestop();
}
::google::protobuf::uint32 doc_data_ex::bestop() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.bestOp)
  return bestop_;
}
void doc_data_ex::set_bestop(::google::protobuf::uint32 value) {
  set_has_bestop();
  bestop_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.bestOp)
}

// optional .gogo.sr.passage_data passages = 23;
bool doc_data_ex::has_passages() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void doc_data_ex::set_has_passages() {
  _has_bits_[0] |= 0x00000010u;
}
void doc_data_ex::clear_has_passages() {
  _has_bits_[0] &= ~0x00000010u;
}
void doc_data_ex::clear_passages() {
  if (passages_ != NULL) passages_->::gogo::sr::passage_data::Clear();
  clear_has_passages();
}
const ::gogo::sr::passage_data& doc_data_ex::passages() const {
  const ::gogo::sr::passage_data* p = passages_;
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.passages)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::passage_data*>(
      &::gogo::sr::_passage_data_default_instance_);
}
::gogo::sr::passage_data* doc_data_ex::mutable_passages() {
  set_has_passages();
  if (passages_ == NULL) {
    passages_ = new ::gogo::sr::passage_data;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_data_ex.passages)
  return passages_;
}
::gogo::sr::passage_data* doc_data_ex::release_passages() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_data_ex.passages)
  clear_has_passages();
  ::gogo::sr::passage_data* temp = passages_;
  passages_ = NULL;
  return temp;
}
void doc_data_ex::set_allocated_passages(::gogo::sr::passage_data* passages) {
  delete passages_;
  passages_ = passages;
  if (passages) {
    set_has_passages();
  } else {
    clear_has_passages();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_data_ex.passages)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int clickrank_data::kRankFieldNumber;
const int clickrank_data::kAttractiveFieldNumber;
const int clickrank_data::kSatisfactionFieldNumber;
const int clickrank_data::kSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

clickrank_data::clickrank_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.clickrank_data)
}
clickrank_data::clickrank_data(const clickrank_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&sessions_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(sessions_));
  // @@protoc_insertion_point(copy_constructor:gogo.sr.clickrank_data)
}

void clickrank_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessions_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(sessions_));
}

clickrank_data::~clickrank_data() {
  // @@protoc_insertion_point(destructor:gogo.sr.clickrank_data)
  SharedDtor();
}

void clickrank_data::SharedDtor() {
}

void clickrank_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* clickrank_data::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const clickrank_data& clickrank_data::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

clickrank_data* clickrank_data::New(::google::protobuf::Arena* arena) const {
  clickrank_data* n = new clickrank_data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void clickrank_data::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.clickrank_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sessions_) -
        reinterpret_cast<char*>(&rank_)) + sizeof(sessions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool clickrank_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.clickrank_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double rank = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double attractive = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_attractive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attractive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double satisfaction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_satisfaction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &satisfaction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 sessions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.clickrank_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.clickrank_data)
  return false;
#undef DO_
}

void clickrank_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.clickrank_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double rank = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->rank(), output);
  }

  // required double attractive = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->attractive(), output);
  }

  // required double satisfaction = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->satisfaction(), output);
  }

  // required uint32 sessions = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sessions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.clickrank_data)
}

::google::protobuf::uint8* clickrank_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.clickrank_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double rank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->rank(), target);
  }

  // required double attractive = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->attractive(), target);
  }

  // required double satisfaction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->satisfaction(), target);
  }

  // required uint32 sessions = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sessions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.clickrank_data)
  return target;
}

size_t clickrank_data::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.sr.clickrank_data)
  size_t total_size = 0;

  if (has_rank()) {
    // required double rank = 1;
    total_size += 1 + 8;
  }

  if (has_attractive()) {
    // required double attractive = 2;
    total_size += 1 + 8;
  }

  if (has_satisfaction()) {
    // required double satisfaction = 3;
    total_size += 1 + 8;
  }

  if (has_sessions()) {
    // required uint32 sessions = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessions());
  }

  return total_size;
}
size_t clickrank_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.clickrank_data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double rank = 1;
    total_size += 1 + 8;

    // required double attractive = 2;
    total_size += 1 + 8;

    // required double satisfaction = 3;
    total_size += 1 + 8;

    // required uint32 sessions = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessions());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void clickrank_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.clickrank_data)
  GOOGLE_DCHECK_NE(&from, this);
  const clickrank_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const clickrank_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.clickrank_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.clickrank_data)
    MergeFrom(*source);
  }
}

void clickrank_data::MergeFrom(const clickrank_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.clickrank_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000002u) {
      attractive_ = from.attractive_;
    }
    if (cached_has_bits & 0x00000004u) {
      satisfaction_ = from.satisfaction_;
    }
    if (cached_has_bits & 0x00000008u) {
      sessions_ = from.sessions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void clickrank_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.clickrank_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void clickrank_data::CopyFrom(const clickrank_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.clickrank_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool clickrank_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void clickrank_data::Swap(clickrank_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void clickrank_data::InternalSwap(clickrank_data* other) {
  using std::swap;
  swap(rank_, other->rank_);
  swap(attractive_, other->attractive_);
  swap(satisfaction_, other->satisfaction_);
  swap(sessions_, other->sessions_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata clickrank_data::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// clickrank_data

// required double rank = 1;
bool clickrank_data::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void clickrank_data::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
void clickrank_data::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
void clickrank_data::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
double clickrank_data::rank() const {
  // @@protoc_insertion_point(field_get:gogo.sr.clickrank_data.rank)
  return rank_;
}
void clickrank_data::set_rank(double value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.clickrank_data.rank)
}

// required double attractive = 2;
bool clickrank_data::has_attractive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void clickrank_data::set_has_attractive() {
  _has_bits_[0] |= 0x00000002u;
}
void clickrank_data::clear_has_attractive() {
  _has_bits_[0] &= ~0x00000002u;
}
void clickrank_data::clear_attractive() {
  attractive_ = 0;
  clear_has_attractive();
}
double clickrank_data::attractive() const {
  // @@protoc_insertion_point(field_get:gogo.sr.clickrank_data.attractive)
  return attractive_;
}
void clickrank_data::set_attractive(double value) {
  set_has_attractive();
  attractive_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.clickrank_data.attractive)
}

// required double satisfaction = 3;
bool clickrank_data::has_satisfaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void clickrank_data::set_has_satisfaction() {
  _has_bits_[0] |= 0x00000004u;
}
void clickrank_data::clear_has_satisfaction() {
  _has_bits_[0] &= ~0x00000004u;
}
void clickrank_data::clear_satisfaction() {
  satisfaction_ = 0;
  clear_has_satisfaction();
}
double clickrank_data::satisfaction() const {
  // @@protoc_insertion_point(field_get:gogo.sr.clickrank_data.satisfaction)
  return satisfaction_;
}
void clickrank_data::set_satisfaction(double value) {
  set_has_satisfaction();
  satisfaction_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.clickrank_data.satisfaction)
}

// required uint32 sessions = 4;
bool clickrank_data::has_sessions() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void clickrank_data::set_has_sessions() {
  _has_bits_[0] |= 0x00000008u;
}
void clickrank_data::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000008u;
}
void clickrank_data::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
::google::protobuf::uint32 clickrank_data::sessions() const {
  // @@protoc_insertion_point(field_get:gogo.sr.clickrank_data.sessions)
  return sessions_;
}
void clickrank_data::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.clickrank_data.sessions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int quality_data::kPairIdfRankFieldNumber;
const int quality_data::kTextRankFieldNumber;
const int quality_data::kSqModelRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

quality_data::quality_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.quality_data)
}
quality_data::quality_data(const quality_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pair_idf_rank_, &from.pair_idf_rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&sq_model_rank_) -
    reinterpret_cast<char*>(&pair_idf_rank_)) + sizeof(sq_model_rank_));
  // @@protoc_insertion_point(copy_constructor:gogo.sr.quality_data)
}

void quality_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pair_idf_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sq_model_rank_) -
      reinterpret_cast<char*>(&pair_idf_rank_)) + sizeof(sq_model_rank_));
}

quality_data::~quality_data() {
  // @@protoc_insertion_point(destructor:gogo.sr.quality_data)
  SharedDtor();
}

void quality_data::SharedDtor() {
}

void quality_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* quality_data::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const quality_data& quality_data::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

quality_data* quality_data::New(::google::protobuf::Arena* arena) const {
  quality_data* n = new quality_data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void quality_data::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.quality_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&pair_idf_rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sq_model_rank_) -
        reinterpret_cast<char*>(&pair_idf_rank_)) + sizeof(sq_model_rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool quality_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.quality_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float pair_idf_rank = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_pair_idf_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pair_idf_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float text_rank = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_text_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &text_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sq_model_rank = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_sq_model_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sq_model_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.quality_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.quality_data)
  return false;
#undef DO_
}

void quality_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.quality_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float pair_idf_rank = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pair_idf_rank(), output);
  }

  // optional float text_rank = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->text_rank(), output);
  }

  // optional float sq_model_rank = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sq_model_rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.quality_data)
}

::google::protobuf::uint8* quality_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.quality_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float pair_idf_rank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pair_idf_rank(), target);
  }

  // optional float text_rank = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->text_rank(), target);
  }

  // optional float sq_model_rank = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sq_model_rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.quality_data)
  return target;
}

size_t quality_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.quality_data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float pair_idf_rank = 1;
  if (has_pair_idf_rank()) {
    total_size += 1 + 4;
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional float text_rank = 2 [default = 0];
    if (has_text_rank()) {
      total_size += 1 + 4;
    }

    // optional float sq_model_rank = 3;
    if (has_sq_model_rank()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void quality_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.quality_data)
  GOOGLE_DCHECK_NE(&from, this);
  const quality_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const quality_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.quality_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.quality_data)
    MergeFrom(*source);
  }
}

void quality_data::MergeFrom(const quality_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.quality_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      pair_idf_rank_ = from.pair_idf_rank_;
    }
    if (cached_has_bits & 0x00000002u) {
      text_rank_ = from.text_rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      sq_model_rank_ = from.sq_model_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void quality_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.quality_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void quality_data::CopyFrom(const quality_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.quality_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool quality_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void quality_data::Swap(quality_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void quality_data::InternalSwap(quality_data* other) {
  using std::swap;
  swap(pair_idf_rank_, other->pair_idf_rank_);
  swap(text_rank_, other->text_rank_);
  swap(sq_model_rank_, other->sq_model_rank_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata quality_data::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// quality_data

// required float pair_idf_rank = 1;
bool quality_data::has_pair_idf_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void quality_data::set_has_pair_idf_rank() {
  _has_bits_[0] |= 0x00000001u;
}
void quality_data::clear_has_pair_idf_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
void quality_data::clear_pair_idf_rank() {
  pair_idf_rank_ = 0;
  clear_has_pair_idf_rank();
}
float quality_data::pair_idf_rank() const {
  // @@protoc_insertion_point(field_get:gogo.sr.quality_data.pair_idf_rank)
  return pair_idf_rank_;
}
void quality_data::set_pair_idf_rank(float value) {
  set_has_pair_idf_rank();
  pair_idf_rank_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.quality_data.pair_idf_rank)
}

// optional float text_rank = 2 [default = 0];
bool quality_data::has_text_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void quality_data::set_has_text_rank() {
  _has_bits_[0] |= 0x00000002u;
}
void quality_data::clear_has_text_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
void quality_data::clear_text_rank() {
  text_rank_ = 0;
  clear_has_text_rank();
}
float quality_data::text_rank() const {
  // @@protoc_insertion_point(field_get:gogo.sr.quality_data.text_rank)
  return text_rank_;
}
void quality_data::set_text_rank(float value) {
  set_has_text_rank();
  text_rank_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.quality_data.text_rank)
}

// optional float sq_model_rank = 3;
bool quality_data::has_sq_model_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void quality_data::set_has_sq_model_rank() {
  _has_bits_[0] |= 0x00000004u;
}
void quality_data::clear_has_sq_model_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
void quality_data::clear_sq_model_rank() {
  sq_model_rank_ = 0;
  clear_has_sq_model_rank();
}
float quality_data::sq_model_rank() const {
  // @@protoc_insertion_point(field_get:gogo.sr.quality_data.sq_model_rank)
  return sq_model_rank_;
}
void quality_data::set_sq_model_rank(float value) {
  set_has_sq_model_rank();
  sq_model_rank_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.quality_data.sq_model_rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int passage_data::kZoneIdFieldNumber;
const int passage_data::kStartFieldNumber;
const int passage_data::kLengthFieldNumber;
const int passage_data::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

passage_data::passage_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.passage_data)
}
passage_data::passage_data(const passage_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      zone_id_(from.zone_id_),
      start_(from.start_),
      length_(from.length_),
      rank_(from.rank_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gogo.sr.passage_data)
}

void passage_data::SharedCtor() {
  _cached_size_ = 0;
}

passage_data::~passage_data() {
  // @@protoc_insertion_point(destructor:gogo.sr.passage_data)
  SharedDtor();
}

void passage_data::SharedDtor() {
}

void passage_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* passage_data::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const passage_data& passage_data::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

passage_data* passage_data::New(::google::protobuf::Arena* arena) const {
  passage_data* n = new passage_data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void passage_data::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.passage_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zone_id_.Clear();
  start_.Clear();
  length_.Clear();
  rank_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool passage_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.passage_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 zone_id = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_zone_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_zone_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 start = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_start())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_start())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 length = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_length())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_length())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 rank = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rank())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_rank())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.passage_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.passage_data)
  return false;
#undef DO_
}

void passage_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.passage_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 zone_id = 1 [packed = true];
  if (this->zone_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _zone_id_cached_byte_size_));
  }
  for (int i = 0, n = this->zone_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->zone_id(i), output);
  }

  // repeated uint32 start = 2 [packed = true];
  if (this->start_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _start_cached_byte_size_));
  }
  for (int i = 0, n = this->start_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->start(i), output);
  }

  // repeated uint32 length = 3 [packed = true];
  if (this->length_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _length_cached_byte_size_));
  }
  for (int i = 0, n = this->length_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->length(i), output);
  }

  // repeated uint32 rank = 4 [packed = true];
  if (this->rank_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _rank_cached_byte_size_));
  }
  for (int i = 0, n = this->rank_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->rank(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.passage_data)
}

::google::protobuf::uint8* passage_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.passage_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 zone_id = 1 [packed = true];
  if (this->zone_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _zone_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->zone_id_, target);
  }

  // repeated uint32 start = 2 [packed = true];
  if (this->start_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _start_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->start_, target);
  }

  // repeated uint32 length = 3 [packed = true];
  if (this->length_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _length_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->length_, target);
  }

  // repeated uint32 rank = 4 [packed = true];
  if (this->rank_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _rank_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->rank_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.passage_data)
  return target;
}

size_t passage_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.passage_data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 zone_id = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->zone_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _zone_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 start = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->start_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _start_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 length = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->length_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _length_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 rank = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->rank_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rank_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void passage_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.passage_data)
  GOOGLE_DCHECK_NE(&from, this);
  const passage_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const passage_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.passage_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.passage_data)
    MergeFrom(*source);
  }
}

void passage_data::MergeFrom(const passage_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.passage_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  zone_id_.MergeFrom(from.zone_id_);
  start_.MergeFrom(from.start_);
  length_.MergeFrom(from.length_);
  rank_.MergeFrom(from.rank_);
}

void passage_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.passage_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void passage_data::CopyFrom(const passage_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.passage_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool passage_data::IsInitialized() const {
  return true;
}

void passage_data::Swap(passage_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void passage_data::InternalSwap(passage_data* other) {
  using std::swap;
  zone_id_.InternalSwap(&other->zone_id_);
  start_.InternalSwap(&other->start_);
  length_.InternalSwap(&other->length_);
  rank_.InternalSwap(&other->rank_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata passage_data::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// passage_data

// repeated uint32 zone_id = 1 [packed = true];
int passage_data::zone_id_size() const {
  return zone_id_.size();
}
void passage_data::clear_zone_id() {
  zone_id_.Clear();
}
::google::protobuf::uint32 passage_data::zone_id(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.passage_data.zone_id)
  return zone_id_.Get(index);
}
void passage_data::set_zone_id(int index, ::google::protobuf::uint32 value) {
  zone_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.passage_data.zone_id)
}
void passage_data::add_zone_id(::google::protobuf::uint32 value) {
  zone_id_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.passage_data.zone_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
passage_data::zone_id() const {
  // @@protoc_insertion_point(field_list:gogo.sr.passage_data.zone_id)
  return zone_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
passage_data::mutable_zone_id() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.passage_data.zone_id)
  return &zone_id_;
}

// repeated uint32 start = 2 [packed = true];
int passage_data::start_size() const {
  return start_.size();
}
void passage_data::clear_start() {
  start_.Clear();
}
::google::protobuf::uint32 passage_data::start(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.passage_data.start)
  return start_.Get(index);
}
void passage_data::set_start(int index, ::google::protobuf::uint32 value) {
  start_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.passage_data.start)
}
void passage_data::add_start(::google::protobuf::uint32 value) {
  start_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.passage_data.start)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
passage_data::start() const {
  // @@protoc_insertion_point(field_list:gogo.sr.passage_data.start)
  return start_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
passage_data::mutable_start() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.passage_data.start)
  return &start_;
}

// repeated uint32 length = 3 [packed = true];
int passage_data::length_size() const {
  return length_.size();
}
void passage_data::clear_length() {
  length_.Clear();
}
::google::protobuf::uint32 passage_data::length(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.passage_data.length)
  return length_.Get(index);
}
void passage_data::set_length(int index, ::google::protobuf::uint32 value) {
  length_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.passage_data.length)
}
void passage_data::add_length(::google::protobuf::uint32 value) {
  length_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.passage_data.length)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
passage_data::length() const {
  // @@protoc_insertion_point(field_list:gogo.sr.passage_data.length)
  return length_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
passage_data::mutable_length() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.passage_data.length)
  return &length_;
}

// repeated uint32 rank = 4 [packed = true];
int passage_data::rank_size() const {
  return rank_.size();
}
void passage_data::clear_rank() {
  rank_.Clear();
}
::google::protobuf::uint32 passage_data::rank(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.passage_data.rank)
  return rank_.Get(index);
}
void passage_data::set_rank(int index, ::google::protobuf::uint32 value) {
  rank_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.passage_data.rank)
}
void passage_data::add_rank(::google::protobuf::uint32 value) {
  rank_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.passage_data.rank)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
passage_data::rank() const {
  // @@protoc_insertion_point(field_list:gogo.sr.passage_data.rank)
  return rank_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
passage_data::mutable_rank() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.passage_data.rank)
  return &rank_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int word_posistions::kZoneIdFieldNumber;
const int word_posistions::kPositionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

word_posistions::word_posistions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.word_posistions)
}
word_posistions::word_posistions(const word_posistions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  zone_id_ = from.zone_id_;
  // @@protoc_insertion_point(copy_constructor:gogo.sr.word_posistions)
}

void word_posistions::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
}

word_posistions::~word_posistions() {
  // @@protoc_insertion_point(destructor:gogo.sr.word_posistions)
  SharedDtor();
}

void word_posistions::SharedDtor() {
}

void word_posistions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* word_posistions::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const word_posistions& word_posistions::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

word_posistions* word_posistions::New(::google::protobuf::Arena* arena) const {
  word_posistions* n = new word_posistions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void word_posistions::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.word_posistions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  zone_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool word_posistions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.word_posistions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_zone_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 positions = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_positions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_positions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.word_posistions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.word_posistions)
  return false;
#undef DO_
}

void word_posistions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.word_posistions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 zone_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }

  // repeated uint32 positions = 2 [packed = true];
  if (this->positions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _positions_cached_byte_size_));
  }
  for (int i = 0, n = this->positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->positions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.word_posistions)
}

::google::protobuf::uint8* word_posistions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.word_posistions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 zone_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }

  // repeated uint32 positions = 2 [packed = true];
  if (this->positions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _positions_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->positions_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.word_posistions)
  return target;
}

size_t word_posistions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.word_posistions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zone_id());
  }
  // repeated uint32 positions = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->positions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _positions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void word_posistions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.word_posistions)
  GOOGLE_DCHECK_NE(&from, this);
  const word_posistions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const word_posistions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.word_posistions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.word_posistions)
    MergeFrom(*source);
  }
}

void word_posistions::MergeFrom(const word_posistions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.word_posistions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
  if (from.has_zone_id()) {
    set_zone_id(from.zone_id());
  }
}

void word_posistions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.word_posistions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void word_posistions::CopyFrom(const word_posistions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.word_posistions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool word_posistions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void word_posistions::Swap(word_posistions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void word_posistions::InternalSwap(word_posistions* other) {
  using std::swap;
  positions_.InternalSwap(&other->positions_);
  swap(zone_id_, other->zone_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata word_posistions::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// word_posistions

// required uint32 zone_id = 1;
bool word_posistions::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void word_posistions::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
void word_posistions::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void word_posistions::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
::google::protobuf::uint32 word_posistions::zone_id() const {
  // @@protoc_insertion_point(field_get:gogo.sr.word_posistions.zone_id)
  return zone_id_;
}
void word_posistions::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.word_posistions.zone_id)
}

// repeated uint32 positions = 2 [packed = true];
int word_posistions::positions_size() const {
  return positions_.size();
}
void word_posistions::clear_positions() {
  positions_.Clear();
}
::google::protobuf::uint32 word_posistions::positions(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.word_posistions.positions)
  return positions_.Get(index);
}
void word_posistions::set_positions(int index, ::google::protobuf::uint32 value) {
  positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.word_posistions.positions)
}
void word_posistions::add_positions(::google::protobuf::uint32 value) {
  positions_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.word_posistions.positions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
word_posistions::positions() const {
  // @@protoc_insertion_point(field_list:gogo.sr.word_posistions.positions)
  return positions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
word_posistions::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.word_posistions.positions)
  return &positions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int word_posting_list::kPosInQueryFieldNumber;
const int word_posting_list::kWPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

word_posting_list::word_posting_list()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.word_posting_list)
}
word_posting_list::word_posting_list(const word_posting_list& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      w_pos_(from.w_pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pos_in_query_ = from.pos_in_query_;
  // @@protoc_insertion_point(copy_constructor:gogo.sr.word_posting_list)
}

void word_posting_list::SharedCtor() {
  _cached_size_ = 0;
  pos_in_query_ = 0u;
}

word_posting_list::~word_posting_list() {
  // @@protoc_insertion_point(destructor:gogo.sr.word_posting_list)
  SharedDtor();
}

void word_posting_list::SharedDtor() {
}

void word_posting_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* word_posting_list::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const word_posting_list& word_posting_list::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

word_posting_list* word_posting_list::New(::google::protobuf::Arena* arena) const {
  word_posting_list* n = new word_posting_list;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void word_posting_list::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.word_posting_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  w_pos_.Clear();
  pos_in_query_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool word_posting_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.word_posting_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos_in_query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pos_in_query();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_in_query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.sr.word_posistions w_pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_w_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.word_posting_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.word_posting_list)
  return false;
#undef DO_
}

void word_posting_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.word_posting_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 pos_in_query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos_in_query(), output);
  }

  // repeated .gogo.sr.word_posistions w_pos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->w_pos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->w_pos(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.word_posting_list)
}

::google::protobuf::uint8* word_posting_list::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.word_posting_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 pos_in_query = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos_in_query(), target);
  }

  // repeated .gogo.sr.word_posistions w_pos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->w_pos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->w_pos(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.word_posting_list)
  return target;
}

size_t word_posting_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.word_posting_list)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 pos_in_query = 1;
  if (has_pos_in_query()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos_in_query());
  }
  // repeated .gogo.sr.word_posistions w_pos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->w_pos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->w_pos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void word_posting_list::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.word_posting_list)
  GOOGLE_DCHECK_NE(&from, this);
  const word_posting_list* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const word_posting_list>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.word_posting_list)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.word_posting_list)
    MergeFrom(*source);
  }
}

void word_posting_list::MergeFrom(const word_posting_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.word_posting_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  w_pos_.MergeFrom(from.w_pos_);
  if (from.has_pos_in_query()) {
    set_pos_in_query(from.pos_in_query());
  }
}

void word_posting_list::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.word_posting_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void word_posting_list::CopyFrom(const word_posting_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.word_posting_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool word_posting_list::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->w_pos())) return false;
  return true;
}

void word_posting_list::Swap(word_posting_list* other) {
  if (other == this) return;
  InternalSwap(other);
}
void word_posting_list::InternalSwap(word_posting_list* other) {
  using std::swap;
  w_pos_.InternalSwap(&other->w_pos_);
  swap(pos_in_query_, other->pos_in_query_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata word_posting_list::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// word_posting_list

// required uint32 pos_in_query = 1;
bool word_posting_list::has_pos_in_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void word_posting_list::set_has_pos_in_query() {
  _has_bits_[0] |= 0x00000001u;
}
void word_posting_list::clear_has_pos_in_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void word_posting_list::clear_pos_in_query() {
  pos_in_query_ = 0u;
  clear_has_pos_in_query();
}
::google::protobuf::uint32 word_posting_list::pos_in_query() const {
  // @@protoc_insertion_point(field_get:gogo.sr.word_posting_list.pos_in_query)
  return pos_in_query_;
}
void word_posting_list::set_pos_in_query(::google::protobuf::uint32 value) {
  set_has_pos_in_query();
  pos_in_query_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.word_posting_list.pos_in_query)
}

// repeated .gogo.sr.word_posistions w_pos = 2;
int word_posting_list::w_pos_size() const {
  return w_pos_.size();
}
void word_posting_list::clear_w_pos() {
  w_pos_.Clear();
}
const ::gogo::sr::word_posistions& word_posting_list::w_pos(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.word_posting_list.w_pos)
  return w_pos_.Get(index);
}
::gogo::sr::word_posistions* word_posting_list::mutable_w_pos(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.word_posting_list.w_pos)
  return w_pos_.Mutable(index);
}
::gogo::sr::word_posistions* word_posting_list::add_w_pos() {
  // @@protoc_insertion_point(field_add:gogo.sr.word_posting_list.w_pos)
  return w_pos_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::sr::word_posistions >*
word_posting_list::mutable_w_pos() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.word_posting_list.w_pos)
  return &w_pos_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::sr::word_posistions >&
word_posting_list::w_pos() const {
  // @@protoc_insertion_point(field_list:gogo.sr.word_posting_list.w_pos)
  return w_pos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int text_zone_item::kNameFieldNumber;
const int text_zone_item::kValueFieldNumber;
const int text_zone_item::kLoopTagFieldNumber;
const int text_zone_item::kBMarkedFlagFieldNumber;
const int text_zone_item::kBVisualizePrevFieldNumber;
const int text_zone_item::kBVisualizeEqualPrevFieldNumber;
const int text_zone_item::kVisualizeTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

text_zone_item::text_zone_item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.text_zone_item)
}
text_zone_item::text_zone_item(const text_zone_item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  loop_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_loop_tag()) {
    loop_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loop_tag_);
  }
  visualize_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_visualize_tag()) {
    visualize_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.visualize_tag_);
  }
  ::memcpy(&b_marked_flag_, &from.b_marked_flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_visualize_equal_prev_) -
    reinterpret_cast<char*>(&b_marked_flag_)) + sizeof(b_visualize_equal_prev_));
  // @@protoc_insertion_point(copy_constructor:gogo.sr.text_zone_item)
}

void text_zone_item::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loop_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visualize_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&b_marked_flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_visualize_equal_prev_) -
      reinterpret_cast<char*>(&b_marked_flag_)) + sizeof(b_visualize_equal_prev_));
}

text_zone_item::~text_zone_item() {
  // @@protoc_insertion_point(destructor:gogo.sr.text_zone_item)
  SharedDtor();
}

void text_zone_item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loop_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visualize_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void text_zone_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* text_zone_item::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const text_zone_item& text_zone_item::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

text_zone_item* text_zone_item::New(::google::protobuf::Arena* arena) const {
  text_zone_item* n = new text_zone_item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void text_zone_item::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.text_zone_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!loop_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*loop_tag_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!visualize_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*visualize_tag_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&b_marked_flag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_visualize_equal_prev_) -
        reinterpret_cast<char*>(&b_marked_flag_)) + sizeof(b_visualize_equal_prev_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool text_zone_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.text_zone_item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.text_zone_item.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.text_zone_item.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string loop_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loop_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loop_tag().data(), static_cast<int>(this->loop_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.text_zone_item.loop_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool b_marked_flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_b_marked_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_marked_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool b_visualize_prev = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_b_visualize_prev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_visualize_prev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool b_visualize_equal_prev = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_b_visualize_equal_prev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_visualize_equal_prev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string visualize_tag = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_visualize_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->visualize_tag().data(), static_cast<int>(this->visualize_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.text_zone_item.visualize_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.text_zone_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.text_zone_item)
  return false;
#undef DO_
}

void text_zone_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.text_zone_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.text_zone_item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.text_zone_item.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional string loop_tag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loop_tag().data(), static_cast<int>(this->loop_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.text_zone_item.loop_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->loop_tag(), output);
  }

  // optional bool b_marked_flag = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->b_marked_flag(), output);
  }

  // optional bool b_visualize_prev = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->b_visualize_prev(), output);
  }

  // optional bool b_visualize_equal_prev = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->b_visualize_equal_prev(), output);
  }

  // optional string visualize_tag = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->visualize_tag().data(), static_cast<int>(this->visualize_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.text_zone_item.visualize_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->visualize_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.text_zone_item)
}

::google::protobuf::uint8* text_zone_item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.text_zone_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.text_zone_item.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.text_zone_item.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional string loop_tag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loop_tag().data(), static_cast<int>(this->loop_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.text_zone_item.loop_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->loop_tag(), target);
  }

  // optional bool b_marked_flag = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->b_marked_flag(), target);
  }

  // optional bool b_visualize_prev = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->b_visualize_prev(), target);
  }

  // optional bool b_visualize_equal_prev = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->b_visualize_equal_prev(), target);
  }

  // optional string visualize_tag = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->visualize_tag().data(), static_cast<int>(this->visualize_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.text_zone_item.visualize_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->visualize_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.text_zone_item)
  return target;
}

size_t text_zone_item::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.sr.text_zone_item)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
size_t text_zone_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.text_zone_item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 124u) {
    // optional string loop_tag = 3;
    if (has_loop_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loop_tag());
    }

    // optional string visualize_tag = 7;
    if (has_visualize_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->visualize_tag());
    }

    // optional bool b_marked_flag = 4;
    if (has_b_marked_flag()) {
      total_size += 1 + 1;
    }

    // optional bool b_visualize_prev = 5;
    if (has_b_visualize_prev()) {
      total_size += 1 + 1;
    }

    // optional bool b_visualize_equal_prev = 6;
    if (has_b_visualize_equal_prev()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void text_zone_item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.text_zone_item)
  GOOGLE_DCHECK_NE(&from, this);
  const text_zone_item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const text_zone_item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.text_zone_item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.text_zone_item)
    MergeFrom(*source);
  }
}

void text_zone_item::MergeFrom(const text_zone_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.text_zone_item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_loop_tag();
      loop_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loop_tag_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_visualize_tag();
      visualize_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.visualize_tag_);
    }
    if (cached_has_bits & 0x00000010u) {
      b_marked_flag_ = from.b_marked_flag_;
    }
    if (cached_has_bits & 0x00000020u) {
      b_visualize_prev_ = from.b_visualize_prev_;
    }
    if (cached_has_bits & 0x00000040u) {
      b_visualize_equal_prev_ = from.b_visualize_equal_prev_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void text_zone_item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.text_zone_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void text_zone_item::CopyFrom(const text_zone_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.text_zone_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool text_zone_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void text_zone_item::Swap(text_zone_item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void text_zone_item::InternalSwap(text_zone_item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  loop_tag_.Swap(&other->loop_tag_);
  visualize_tag_.Swap(&other->visualize_tag_);
  swap(b_marked_flag_, other->b_marked_flag_);
  swap(b_visualize_prev_, other->b_visualize_prev_);
  swap(b_visualize_equal_prev_, other->b_visualize_equal_prev_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata text_zone_item::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// text_zone_item

// required string name = 1;
bool text_zone_item::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void text_zone_item::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void text_zone_item::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void text_zone_item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& text_zone_item::name() const {
  // @@protoc_insertion_point(field_get:gogo.sr.text_zone_item.name)
  return name_.GetNoArena();
}
void text_zone_item::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.text_zone_item.name)
}
#if LANG_CXX11
void text_zone_item::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.text_zone_item.name)
}
#endif
void text_zone_item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.text_zone_item.name)
}
void text_zone_item::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.text_zone_item.name)
}
::std::string* text_zone_item::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.sr.text_zone_item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* text_zone_item::release_name() {
  // @@protoc_insertion_point(field_release:gogo.sr.text_zone_item.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void text_zone_item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.text_zone_item.name)
}

// required string value = 2;
bool text_zone_item::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void text_zone_item::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void text_zone_item::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void text_zone_item::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& text_zone_item::value() const {
  // @@protoc_insertion_point(field_get:gogo.sr.text_zone_item.value)
  return value_.GetNoArena();
}
void text_zone_item::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.text_zone_item.value)
}
#if LANG_CXX11
void text_zone_item::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.text_zone_item.value)
}
#endif
void text_zone_item::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.text_zone_item.value)
}
void text_zone_item::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.text_zone_item.value)
}
::std::string* text_zone_item::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:gogo.sr.text_zone_item.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* text_zone_item::release_value() {
  // @@protoc_insertion_point(field_release:gogo.sr.text_zone_item.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void text_zone_item::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.text_zone_item.value)
}

// optional string loop_tag = 3;
bool text_zone_item::has_loop_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void text_zone_item::set_has_loop_tag() {
  _has_bits_[0] |= 0x00000004u;
}
void text_zone_item::clear_has_loop_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
void text_zone_item::clear_loop_tag() {
  loop_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_loop_tag();
}
const ::std::string& text_zone_item::loop_tag() const {
  // @@protoc_insertion_point(field_get:gogo.sr.text_zone_item.loop_tag)
  return loop_tag_.GetNoArena();
}
void text_zone_item::set_loop_tag(const ::std::string& value) {
  set_has_loop_tag();
  loop_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.text_zone_item.loop_tag)
}
#if LANG_CXX11
void text_zone_item::set_loop_tag(::std::string&& value) {
  set_has_loop_tag();
  loop_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.text_zone_item.loop_tag)
}
#endif
void text_zone_item::set_loop_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_loop_tag();
  loop_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.text_zone_item.loop_tag)
}
void text_zone_item::set_loop_tag(const char* value, size_t size) {
  set_has_loop_tag();
  loop_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.text_zone_item.loop_tag)
}
::std::string* text_zone_item::mutable_loop_tag() {
  set_has_loop_tag();
  // @@protoc_insertion_point(field_mutable:gogo.sr.text_zone_item.loop_tag)
  return loop_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* text_zone_item::release_loop_tag() {
  // @@protoc_insertion_point(field_release:gogo.sr.text_zone_item.loop_tag)
  clear_has_loop_tag();
  return loop_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void text_zone_item::set_allocated_loop_tag(::std::string* loop_tag) {
  if (loop_tag != NULL) {
    set_has_loop_tag();
  } else {
    clear_has_loop_tag();
  }
  loop_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loop_tag);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.text_zone_item.loop_tag)
}

// optional bool b_marked_flag = 4;
bool text_zone_item::has_b_marked_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void text_zone_item::set_has_b_marked_flag() {
  _has_bits_[0] |= 0x00000010u;
}
void text_zone_item::clear_has_b_marked_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
void text_zone_item::clear_b_marked_flag() {
  b_marked_flag_ = false;
  clear_has_b_marked_flag();
}
bool text_zone_item::b_marked_flag() const {
  // @@protoc_insertion_point(field_get:gogo.sr.text_zone_item.b_marked_flag)
  return b_marked_flag_;
}
void text_zone_item::set_b_marked_flag(bool value) {
  set_has_b_marked_flag();
  b_marked_flag_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.text_zone_item.b_marked_flag)
}

// optional bool b_visualize_prev = 5;
bool text_zone_item::has_b_visualize_prev() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void text_zone_item::set_has_b_visualize_prev() {
  _has_bits_[0] |= 0x00000020u;
}
void text_zone_item::clear_has_b_visualize_prev() {
  _has_bits_[0] &= ~0x00000020u;
}
void text_zone_item::clear_b_visualize_prev() {
  b_visualize_prev_ = false;
  clear_has_b_visualize_prev();
}
bool text_zone_item::b_visualize_prev() const {
  // @@protoc_insertion_point(field_get:gogo.sr.text_zone_item.b_visualize_prev)
  return b_visualize_prev_;
}
void text_zone_item::set_b_visualize_prev(bool value) {
  set_has_b_visualize_prev();
  b_visualize_prev_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.text_zone_item.b_visualize_prev)
}

// optional bool b_visualize_equal_prev = 6;
bool text_zone_item::has_b_visualize_equal_prev() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void text_zone_item::set_has_b_visualize_equal_prev() {
  _has_bits_[0] |= 0x00000040u;
}
void text_zone_item::clear_has_b_visualize_equal_prev() {
  _has_bits_[0] &= ~0x00000040u;
}
void text_zone_item::clear_b_visualize_equal_prev() {
  b_visualize_equal_prev_ = false;
  clear_has_b_visualize_equal_prev();
}
bool text_zone_item::b_visualize_equal_prev() const {
  // @@protoc_insertion_point(field_get:gogo.sr.text_zone_item.b_visualize_equal_prev)
  return b_visualize_equal_prev_;
}
void text_zone_item::set_b_visualize_equal_prev(bool value) {
  set_has_b_visualize_equal_prev();
  b_visualize_equal_prev_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.text_zone_item.b_visualize_equal_prev)
}

// optional string visualize_tag = 7;
bool text_zone_item::has_visualize_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void text_zone_item::set_has_visualize_tag() {
  _has_bits_[0] |= 0x00000008u;
}
void text_zone_item::clear_has_visualize_tag() {
  _has_bits_[0] &= ~0x00000008u;
}
void text_zone_item::clear_visualize_tag() {
  visualize_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_visualize_tag();
}
const ::std::string& text_zone_item::visualize_tag() const {
  // @@protoc_insertion_point(field_get:gogo.sr.text_zone_item.visualize_tag)
  return visualize_tag_.GetNoArena();
}
void text_zone_item::set_visualize_tag(const ::std::string& value) {
  set_has_visualize_tag();
  visualize_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.text_zone_item.visualize_tag)
}
#if LANG_CXX11
void text_zone_item::set_visualize_tag(::std::string&& value) {
  set_has_visualize_tag();
  visualize_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.text_zone_item.visualize_tag)
}
#endif
void text_zone_item::set_visualize_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_visualize_tag();
  visualize_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.text_zone_item.visualize_tag)
}
void text_zone_item::set_visualize_tag(const char* value, size_t size) {
  set_has_visualize_tag();
  visualize_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.text_zone_item.visualize_tag)
}
::std::string* text_zone_item::mutable_visualize_tag() {
  set_has_visualize_tag();
  // @@protoc_insertion_point(field_mutable:gogo.sr.text_zone_item.visualize_tag)
  return visualize_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* text_zone_item::release_visualize_tag() {
  // @@protoc_insertion_point(field_release:gogo.sr.text_zone_item.visualize_tag)
  clear_has_visualize_tag();
  return visualize_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void text_zone_item::set_allocated_visualize_tag(::std::string* visualize_tag) {
  if (visualize_tag != NULL) {
    set_has_visualize_tag();
  } else {
    clear_has_visualize_tag();
  }
  visualize_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), visualize_tag);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.text_zone_item.visualize_tag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int num_zone_item::kNameFieldNumber;
const int num_zone_item::kValueFieldNumber;
const int num_zone_item::kBVisualizeHexFieldNumber;
const int num_zone_item::kBVisualizeUpperHexFieldNumber;
const int num_zone_item::kBVisualizeSignedFieldNumber;
const int num_zone_item::kBVisualizeBitsFieldNumber;
const int num_zone_item::kBVisualizeTimeDiffFieldNumber;
const int num_zone_item::kBAgeInYearFieldNumber;
const int num_zone_item::kBitLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

num_zone_item::num_zone_item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.num_zone_item)
}
num_zone_item::num_zone_item(const num_zone_item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&bit_len_) -
    reinterpret_cast<char*>(&value_)) + sizeof(bit_len_));
  // @@protoc_insertion_point(copy_constructor:gogo.sr.num_zone_item)
}

void num_zone_item::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bit_len_) -
      reinterpret_cast<char*>(&value_)) + sizeof(bit_len_));
}

num_zone_item::~num_zone_item() {
  // @@protoc_insertion_point(destructor:gogo.sr.num_zone_item)
  SharedDtor();
}

void num_zone_item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void num_zone_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* num_zone_item::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const num_zone_item& num_zone_item::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

num_zone_item* num_zone_item::New(::google::protobuf::Arena* arena) const {
  num_zone_item* n = new num_zone_item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void num_zone_item::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.num_zone_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_age_in_year_) -
        reinterpret_cast<char*>(&value_)) + sizeof(b_age_in_year_));
  }
  bit_len_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool num_zone_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.num_zone_item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.num_zone_item.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool b_visualize_hex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_b_visualize_hex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_visualize_hex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool b_visualize_upper_hex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_b_visualize_upper_hex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_visualize_upper_hex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool b_visualize_signed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_b_visualize_signed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_visualize_signed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool b_visualize_bits = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_b_visualize_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_visualize_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool b_visualize_time_diff = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_b_visualize_time_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_visualize_time_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool b_age_in_year = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_b_age_in_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_age_in_year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bit_len = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_bit_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bit_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.num_zone_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.num_zone_item)
  return false;
#undef DO_
}

void num_zone_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.num_zone_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.num_zone_item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  // optional bool b_visualize_hex = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->b_visualize_hex(), output);
  }

  // optional bool b_visualize_upper_hex = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->b_visualize_upper_hex(), output);
  }

  // optional bool b_visualize_signed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->b_visualize_signed(), output);
  }

  // optional bool b_visualize_bits = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->b_visualize_bits(), output);
  }

  // optional bool b_visualize_time_diff = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->b_visualize_time_diff(), output);
  }

  // optional bool b_age_in_year = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->b_age_in_year(), output);
  }

  // optional uint32 bit_len = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->bit_len(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.num_zone_item)
}

::google::protobuf::uint8* num_zone_item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.num_zone_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.num_zone_item.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  // optional bool b_visualize_hex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->b_visualize_hex(), target);
  }

  // optional bool b_visualize_upper_hex = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->b_visualize_upper_hex(), target);
  }

  // optional bool b_visualize_signed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->b_visualize_signed(), target);
  }

  // optional bool b_visualize_bits = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->b_visualize_bits(), target);
  }

  // optional bool b_visualize_time_diff = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->b_visualize_time_diff(), target);
  }

  // optional bool b_age_in_year = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->b_age_in_year(), target);
  }

  // optional uint32 bit_len = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->bit_len(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.num_zone_item)
  return target;
}

size_t num_zone_item::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.sr.num_zone_item)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_value()) {
    // required uint64 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value());
  }

  return total_size;
}
size_t num_zone_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.num_zone_item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint64 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 252u) {
    // optional bool b_visualize_hex = 3;
    if (has_b_visualize_hex()) {
      total_size += 1 + 1;
    }

    // optional bool b_visualize_upper_hex = 4;
    if (has_b_visualize_upper_hex()) {
      total_size += 1 + 1;
    }

    // optional bool b_visualize_signed = 5;
    if (has_b_visualize_signed()) {
      total_size += 1 + 1;
    }

    // optional bool b_visualize_bits = 6;
    if (has_b_visualize_bits()) {
      total_size += 1 + 1;
    }

    // optional bool b_visualize_time_diff = 7;
    if (has_b_visualize_time_diff()) {
      total_size += 1 + 1;
    }

    // optional bool b_age_in_year = 8;
    if (has_b_age_in_year()) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 bit_len = 9;
  if (has_bit_len()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bit_len());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void num_zone_item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.num_zone_item)
  GOOGLE_DCHECK_NE(&from, this);
  const num_zone_item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const num_zone_item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.num_zone_item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.num_zone_item)
    MergeFrom(*source);
  }
}

void num_zone_item::MergeFrom(const num_zone_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.num_zone_item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_visualize_hex_ = from.b_visualize_hex_;
    }
    if (cached_has_bits & 0x00000008u) {
      b_visualize_upper_hex_ = from.b_visualize_upper_hex_;
    }
    if (cached_has_bits & 0x00000010u) {
      b_visualize_signed_ = from.b_visualize_signed_;
    }
    if (cached_has_bits & 0x00000020u) {
      b_visualize_bits_ = from.b_visualize_bits_;
    }
    if (cached_has_bits & 0x00000040u) {
      b_visualize_time_diff_ = from.b_visualize_time_diff_;
    }
    if (cached_has_bits & 0x00000080u) {
      b_age_in_year_ = from.b_age_in_year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_bit_len(from.bit_len());
  }
}

void num_zone_item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.num_zone_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void num_zone_item::CopyFrom(const num_zone_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.num_zone_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool num_zone_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void num_zone_item::Swap(num_zone_item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void num_zone_item::InternalSwap(num_zone_item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(value_, other->value_);
  swap(b_visualize_hex_, other->b_visualize_hex_);
  swap(b_visualize_upper_hex_, other->b_visualize_upper_hex_);
  swap(b_visualize_signed_, other->b_visualize_signed_);
  swap(b_visualize_bits_, other->b_visualize_bits_);
  swap(b_visualize_time_diff_, other->b_visualize_time_diff_);
  swap(b_age_in_year_, other->b_age_in_year_);
  swap(bit_len_, other->bit_len_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata num_zone_item::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// num_zone_item

// required string name = 1;
bool num_zone_item::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void num_zone_item::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void num_zone_item::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void num_zone_item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& num_zone_item::name() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.name)
  return name_.GetNoArena();
}
void num_zone_item::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.name)
}
#if LANG_CXX11
void num_zone_item::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.num_zone_item.name)
}
#endif
void num_zone_item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.num_zone_item.name)
}
void num_zone_item::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.num_zone_item.name)
}
::std::string* num_zone_item::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.sr.num_zone_item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* num_zone_item::release_name() {
  // @@protoc_insertion_point(field_release:gogo.sr.num_zone_item.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void num_zone_item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.num_zone_item.name)
}

// required uint64 value = 2;
bool num_zone_item::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void num_zone_item::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void num_zone_item::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void num_zone_item::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
::google::protobuf::uint64 num_zone_item::value() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.value)
  return value_;
}
void num_zone_item::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.value)
}

// optional bool b_visualize_hex = 3;
bool num_zone_item::has_b_visualize_hex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void num_zone_item::set_has_b_visualize_hex() {
  _has_bits_[0] |= 0x00000004u;
}
void num_zone_item::clear_has_b_visualize_hex() {
  _has_bits_[0] &= ~0x00000004u;
}
void num_zone_item::clear_b_visualize_hex() {
  b_visualize_hex_ = false;
  clear_has_b_visualize_hex();
}
bool num_zone_item::b_visualize_hex() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.b_visualize_hex)
  return b_visualize_hex_;
}
void num_zone_item::set_b_visualize_hex(bool value) {
  set_has_b_visualize_hex();
  b_visualize_hex_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.b_visualize_hex)
}

// optional bool b_visualize_upper_hex = 4;
bool num_zone_item::has_b_visualize_upper_hex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void num_zone_item::set_has_b_visualize_upper_hex() {
  _has_bits_[0] |= 0x00000008u;
}
void num_zone_item::clear_has_b_visualize_upper_hex() {
  _has_bits_[0] &= ~0x00000008u;
}
void num_zone_item::clear_b_visualize_upper_hex() {
  b_visualize_upper_hex_ = false;
  clear_has_b_visualize_upper_hex();
}
bool num_zone_item::b_visualize_upper_hex() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.b_visualize_upper_hex)
  return b_visualize_upper_hex_;
}
void num_zone_item::set_b_visualize_upper_hex(bool value) {
  set_has_b_visualize_upper_hex();
  b_visualize_upper_hex_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.b_visualize_upper_hex)
}

// optional bool b_visualize_signed = 5;
bool num_zone_item::has_b_visualize_signed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void num_zone_item::set_has_b_visualize_signed() {
  _has_bits_[0] |= 0x00000010u;
}
void num_zone_item::clear_has_b_visualize_signed() {
  _has_bits_[0] &= ~0x00000010u;
}
void num_zone_item::clear_b_visualize_signed() {
  b_visualize_signed_ = false;
  clear_has_b_visualize_signed();
}
bool num_zone_item::b_visualize_signed() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.b_visualize_signed)
  return b_visualize_signed_;
}
void num_zone_item::set_b_visualize_signed(bool value) {
  set_has_b_visualize_signed();
  b_visualize_signed_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.b_visualize_signed)
}

// optional bool b_visualize_bits = 6;
bool num_zone_item::has_b_visualize_bits() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void num_zone_item::set_has_b_visualize_bits() {
  _has_bits_[0] |= 0x00000020u;
}
void num_zone_item::clear_has_b_visualize_bits() {
  _has_bits_[0] &= ~0x00000020u;
}
void num_zone_item::clear_b_visualize_bits() {
  b_visualize_bits_ = false;
  clear_has_b_visualize_bits();
}
bool num_zone_item::b_visualize_bits() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.b_visualize_bits)
  return b_visualize_bits_;
}
void num_zone_item::set_b_visualize_bits(bool value) {
  set_has_b_visualize_bits();
  b_visualize_bits_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.b_visualize_bits)
}

// optional bool b_visualize_time_diff = 7;
bool num_zone_item::has_b_visualize_time_diff() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void num_zone_item::set_has_b_visualize_time_diff() {
  _has_bits_[0] |= 0x00000040u;
}
void num_zone_item::clear_has_b_visualize_time_diff() {
  _has_bits_[0] &= ~0x00000040u;
}
void num_zone_item::clear_b_visualize_time_diff() {
  b_visualize_time_diff_ = false;
  clear_has_b_visualize_time_diff();
}
bool num_zone_item::b_visualize_time_diff() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.b_visualize_time_diff)
  return b_visualize_time_diff_;
}
void num_zone_item::set_b_visualize_time_diff(bool value) {
  set_has_b_visualize_time_diff();
  b_visualize_time_diff_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.b_visualize_time_diff)
}

// optional bool b_age_in_year = 8;
bool num_zone_item::has_b_age_in_year() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void num_zone_item::set_has_b_age_in_year() {
  _has_bits_[0] |= 0x00000080u;
}
void num_zone_item::clear_has_b_age_in_year() {
  _has_bits_[0] &= ~0x00000080u;
}
void num_zone_item::clear_b_age_in_year() {
  b_age_in_year_ = false;
  clear_has_b_age_in_year();
}
bool num_zone_item::b_age_in_year() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.b_age_in_year)
  return b_age_in_year_;
}
void num_zone_item::set_b_age_in_year(bool value) {
  set_has_b_age_in_year();
  b_age_in_year_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.b_age_in_year)
}

// optional uint32 bit_len = 9;
bool num_zone_item::has_bit_len() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void num_zone_item::set_has_bit_len() {
  _has_bits_[0] |= 0x00000100u;
}
void num_zone_item::clear_has_bit_len() {
  _has_bits_[0] &= ~0x00000100u;
}
void num_zone_item::clear_bit_len() {
  bit_len_ = 0u;
  clear_has_bit_len();
}
::google::protobuf::uint32 num_zone_item::bit_len() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.bit_len)
  return bit_len_;
}
void num_zone_item::set_bit_len(::google::protobuf::uint32 value) {
  set_has_bit_len();
  bit_len_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.bit_len)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int real_doc_id_data::kDbIdFieldNumber;
const int real_doc_id_data::kDbTimestampFieldNumber;
const int real_doc_id_data::kDocIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

real_doc_id_data::real_doc_id_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.real_doc_id_data)
}
real_doc_id_data::real_doc_id_data(const real_doc_id_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&db_id_, &from.db_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&doc_id_) -
    reinterpret_cast<char*>(&db_id_)) + sizeof(doc_id_));
  // @@protoc_insertion_point(copy_constructor:gogo.sr.real_doc_id_data)
}

void real_doc_id_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&db_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&doc_id_) -
      reinterpret_cast<char*>(&db_id_)) + sizeof(doc_id_));
}

real_doc_id_data::~real_doc_id_data() {
  // @@protoc_insertion_point(destructor:gogo.sr.real_doc_id_data)
  SharedDtor();
}

void real_doc_id_data::SharedDtor() {
}

void real_doc_id_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* real_doc_id_data::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const real_doc_id_data& real_doc_id_data::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

real_doc_id_data* real_doc_id_data::New(::google::protobuf::Arena* arena) const {
  real_doc_id_data* n = new real_doc_id_data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void real_doc_id_data::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.real_doc_id_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&db_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&doc_id_) -
        reinterpret_cast<char*>(&db_id_)) + sizeof(doc_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool real_doc_id_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.real_doc_id_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 db_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_db_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 db_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_db_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 doc_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.real_doc_id_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.real_doc_id_data)
  return false;
#undef DO_
}

void real_doc_id_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.real_doc_id_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 db_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_id(), output);
  }

  // required uint32 db_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->db_timestamp(), output);
  }

  // required uint32 doc_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->doc_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.real_doc_id_data)
}

::google::protobuf::uint8* real_doc_id_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.real_doc_id_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 db_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_id(), target);
  }

  // required uint32 db_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->db_timestamp(), target);
  }

  // required uint32 doc_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->doc_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.real_doc_id_data)
  return target;
}

size_t real_doc_id_data::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.sr.real_doc_id_data)
  size_t total_size = 0;

  if (has_db_id()) {
    // required uint32 db_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->db_id());
  }

  if (has_db_timestamp()) {
    // required uint32 db_timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->db_timestamp());
  }

  if (has_doc_id()) {
    // required uint32 doc_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->doc_id());
  }

  return total_size;
}
size_t real_doc_id_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.real_doc_id_data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 db_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->db_id());

    // required uint32 db_timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->db_timestamp());

    // required uint32 doc_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->doc_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void real_doc_id_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.real_doc_id_data)
  GOOGLE_DCHECK_NE(&from, this);
  const real_doc_id_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const real_doc_id_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.real_doc_id_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.real_doc_id_data)
    MergeFrom(*source);
  }
}

void real_doc_id_data::MergeFrom(const real_doc_id_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.real_doc_id_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      db_id_ = from.db_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      db_timestamp_ = from.db_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      doc_id_ = from.doc_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void real_doc_id_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.real_doc_id_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void real_doc_id_data::CopyFrom(const real_doc_id_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.real_doc_id_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool real_doc_id_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void real_doc_id_data::Swap(real_doc_id_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void real_doc_id_data::InternalSwap(real_doc_id_data* other) {
  using std::swap;
  swap(db_id_, other->db_id_);
  swap(db_timestamp_, other->db_timestamp_);
  swap(doc_id_, other->doc_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata real_doc_id_data::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// real_doc_id_data

// required uint32 db_id = 1;
bool real_doc_id_data::has_db_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void real_doc_id_data::set_has_db_id() {
  _has_bits_[0] |= 0x00000001u;
}
void real_doc_id_data::clear_has_db_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void real_doc_id_data::clear_db_id() {
  db_id_ = 0u;
  clear_has_db_id();
}
::google::protobuf::uint32 real_doc_id_data::db_id() const {
  // @@protoc_insertion_point(field_get:gogo.sr.real_doc_id_data.db_id)
  return db_id_;
}
void real_doc_id_data::set_db_id(::google::protobuf::uint32 value) {
  set_has_db_id();
  db_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.real_doc_id_data.db_id)
}

// required uint32 db_timestamp = 2;
bool real_doc_id_data::has_db_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void real_doc_id_data::set_has_db_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void real_doc_id_data::clear_has_db_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void real_doc_id_data::clear_db_timestamp() {
  db_timestamp_ = 0u;
  clear_has_db_timestamp();
}
::google::protobuf::uint32 real_doc_id_data::db_timestamp() const {
  // @@protoc_insertion_point(field_get:gogo.sr.real_doc_id_data.db_timestamp)
  return db_timestamp_;
}
void real_doc_id_data::set_db_timestamp(::google::protobuf::uint32 value) {
  set_has_db_timestamp();
  db_timestamp_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.real_doc_id_data.db_timestamp)
}

// required uint32 doc_id = 3;
bool real_doc_id_data::has_doc_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void real_doc_id_data::set_has_doc_id() {
  _has_bits_[0] |= 0x00000004u;
}
void real_doc_id_data::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void real_doc_id_data::clear_doc_id() {
  doc_id_ = 0u;
  clear_has_doc_id();
}
::google::protobuf::uint32 real_doc_id_data::doc_id() const {
  // @@protoc_insertion_point(field_get:gogo.sr.real_doc_id_data.doc_id)
  return doc_id_;
}
void real_doc_id_data::set_doc_id(::google::protobuf::uint32 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.real_doc_id_data.doc_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int doc_zone::kNameFieldNumber;
const int doc_zone::kModeFieldNumber;
const int doc_zone::kTextFieldNumber;
const int doc_zone::kSentencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

doc_zone::doc_zone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.doc_zone)
}
doc_zone::doc_zone(const doc_zone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sentences_(from.sentences_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mode()) {
    mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:gogo.sr.doc_zone)
}

void doc_zone::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

doc_zone::~doc_zone() {
  // @@protoc_insertion_point(destructor:gogo.sr.doc_zone)
  SharedDtor();
}

void doc_zone::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void doc_zone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* doc_zone::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const doc_zone& doc_zone::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

doc_zone* doc_zone::New(::google::protobuf::Arena* arena) const {
  doc_zone* n = new doc_zone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void doc_zone::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.doc_zone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sentences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!mode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mode_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool doc_zone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.doc_zone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.doc_zone.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mode().data(), static_cast<int>(this->mode().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.doc_zone.mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.doc_zone.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string sentences = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sentences()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sentences(this->sentences_size() - 1).data(),
            static_cast<int>(this->sentences(this->sentences_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.doc_zone.sentences");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.doc_zone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.doc_zone)
  return false;
#undef DO_
}

void doc_zone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.doc_zone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_zone.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string mode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mode().data(), static_cast<int>(this->mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_zone.mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mode(), output);
  }

  // optional string text = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_zone.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // repeated string sentences = 4;
  for (int i = 0, n = this->sentences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sentences(i).data(), static_cast<int>(this->sentences(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_zone.sentences");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sentences(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.doc_zone)
}

::google::protobuf::uint8* doc_zone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.doc_zone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_zone.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string mode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mode().data(), static_cast<int>(this->mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_zone.mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mode(), target);
  }

  // optional string text = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_zone.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // repeated string sentences = 4;
  for (int i = 0, n = this->sentences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sentences(i).data(), static_cast<int>(this->sentences(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_zone.sentences");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->sentences(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.doc_zone)
  return target;
}

size_t doc_zone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.doc_zone)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string sentences = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sentences_size());
  for (int i = 0, n = this->sentences_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sentences(i));
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mode());
    }

    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void doc_zone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.doc_zone)
  GOOGLE_DCHECK_NE(&from, this);
  const doc_zone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const doc_zone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.doc_zone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.doc_zone)
    MergeFrom(*source);
  }
}

void doc_zone::MergeFrom(const doc_zone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.doc_zone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sentences_.MergeFrom(from.sentences_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mode();
      mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
  }
}

void doc_zone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.doc_zone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void doc_zone::CopyFrom(const doc_zone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.doc_zone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool doc_zone::IsInitialized() const {
  return true;
}

void doc_zone::Swap(doc_zone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void doc_zone::InternalSwap(doc_zone* other) {
  using std::swap;
  sentences_.InternalSwap(&other->sentences_);
  name_.Swap(&other->name_);
  mode_.Swap(&other->mode_);
  text_.Swap(&other->text_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata doc_zone::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// doc_zone

// optional string name = 1;
bool doc_zone::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void doc_zone::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void doc_zone::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void doc_zone::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& doc_zone::name() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_zone.name)
  return name_.GetNoArena();
}
void doc_zone::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_zone.name)
}
#if LANG_CXX11
void doc_zone::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_zone.name)
}
#endif
void doc_zone::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_zone.name)
}
void doc_zone::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_zone.name)
}
::std::string* doc_zone::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_zone.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* doc_zone::release_name() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_zone.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void doc_zone::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_zone.name)
}

// optional string mode = 2;
bool doc_zone::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void doc_zone::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void doc_zone::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void doc_zone::clear_mode() {
  mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mode();
}
const ::std::string& doc_zone::mode() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_zone.mode)
  return mode_.GetNoArena();
}
void doc_zone::set_mode(const ::std::string& value) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_zone.mode)
}
#if LANG_CXX11
void doc_zone::set_mode(::std::string&& value) {
  set_has_mode();
  mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_zone.mode)
}
#endif
void doc_zone::set_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_zone.mode)
}
void doc_zone::set_mode(const char* value, size_t size) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_zone.mode)
}
::std::string* doc_zone::mutable_mode() {
  set_has_mode();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_zone.mode)
  return mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* doc_zone::release_mode() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_zone.mode)
  clear_has_mode();
  return mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void doc_zone::set_allocated_mode(::std::string* mode) {
  if (mode != NULL) {
    set_has_mode();
  } else {
    clear_has_mode();
  }
  mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mode);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_zone.mode)
}

// optional string text = 3;
bool doc_zone::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void doc_zone::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
void doc_zone::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
void doc_zone::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& doc_zone::text() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_zone.text)
  return text_.GetNoArena();
}
void doc_zone::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_zone.text)
}
#if LANG_CXX11
void doc_zone::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_zone.text)
}
#endif
void doc_zone::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_zone.text)
}
void doc_zone::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_zone.text)
}
::std::string* doc_zone::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_zone.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* doc_zone::release_text() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_zone.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void doc_zone::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_zone.text)
}

// repeated string sentences = 4;
int doc_zone::sentences_size() const {
  return sentences_.size();
}
void doc_zone::clear_sentences() {
  sentences_.Clear();
}
const ::std::string& doc_zone::sentences(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_zone.sentences)
  return sentences_.Get(index);
}
::std::string* doc_zone::mutable_sentences(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_zone.sentences)
  return sentences_.Mutable(index);
}
void doc_zone::set_sentences(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.sr.doc_zone.sentences)
  sentences_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void doc_zone::set_sentences(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.sr.doc_zone.sentences)
  sentences_.Mutable(index)->assign(std::move(value));
}
#endif
void doc_zone::set_sentences(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sentences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_zone.sentences)
}
void doc_zone::set_sentences(int index, const char* value, size_t size) {
  sentences_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_zone.sentences)
}
::std::string* doc_zone::add_sentences() {
  // @@protoc_insertion_point(field_add_mutable:gogo.sr.doc_zone.sentences)
  return sentences_.Add();
}
void doc_zone::add_sentences(const ::std::string& value) {
  sentences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.sr.doc_zone.sentences)
}
#if LANG_CXX11
void doc_zone::add_sentences(::std::string&& value) {
  sentences_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.sr.doc_zone.sentences)
}
#endif
void doc_zone::add_sentences(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sentences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.sr.doc_zone.sentences)
}
void doc_zone::add_sentences(const char* value, size_t size) {
  sentences_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.sr.doc_zone.sentences)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
doc_zone::sentences() const {
  // @@protoc_insertion_point(field_list:gogo.sr.doc_zone.sentences)
  return sentences_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
doc_zone::mutable_sentences() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.doc_zone.sentences)
  return &sentences_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int doc_dump::kZonesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

doc_dump::doc_dump()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.doc_dump)
}
doc_dump::doc_dump(const doc_dump& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      zones_(from.zones_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gogo.sr.doc_dump)
}

void doc_dump::SharedCtor() {
  _cached_size_ = 0;
}

doc_dump::~doc_dump() {
  // @@protoc_insertion_point(destructor:gogo.sr.doc_dump)
  SharedDtor();
}

void doc_dump::SharedDtor() {
}

void doc_dump::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* doc_dump::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const doc_dump& doc_dump::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

doc_dump* doc_dump::New(::google::protobuf::Arena* arena) const {
  doc_dump* n = new doc_dump;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void doc_dump::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.doc_dump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zones_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool doc_dump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.doc_dump)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gogo.sr.doc_zone zones = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zones()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.doc_dump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.doc_dump)
  return false;
#undef DO_
}

void doc_dump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.doc_dump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.sr.doc_zone zones = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->zones_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->zones(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.doc_dump)
}

::google::protobuf::uint8* doc_dump::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.doc_dump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.sr.doc_zone zones = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->zones_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->zones(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.doc_dump)
  return target;
}

size_t doc_dump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.doc_dump)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .gogo.sr.doc_zone zones = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->zones_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zones(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void doc_dump::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.doc_dump)
  GOOGLE_DCHECK_NE(&from, this);
  const doc_dump* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const doc_dump>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.doc_dump)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.doc_dump)
    MergeFrom(*source);
  }
}

void doc_dump::MergeFrom(const doc_dump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.doc_dump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  zones_.MergeFrom(from.zones_);
}

void doc_dump::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.doc_dump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void doc_dump::CopyFrom(const doc_dump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.doc_dump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool doc_dump::IsInitialized() const {
  return true;
}

void doc_dump::Swap(doc_dump* other) {
  if (other == this) return;
  InternalSwap(other);
}
void doc_dump::InternalSwap(doc_dump* other) {
  using std::swap;
  zones_.InternalSwap(&other->zones_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata doc_dump::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// doc_dump

// repeated .gogo.sr.doc_zone zones = 1;
int doc_dump::zones_size() const {
  return zones_.size();
}
void doc_dump::clear_zones() {
  zones_.Clear();
}
const ::gogo::sr::doc_zone& doc_dump::zones(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_dump.zones)
  return zones_.Get(index);
}
::gogo::sr::doc_zone* doc_dump::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_dump.zones)
  return zones_.Mutable(index);
}
::gogo::sr::doc_zone* doc_dump::add_zones() {
  // @@protoc_insertion_point(field_add:gogo.sr.doc_dump.zones)
  return zones_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::sr::doc_zone >*
doc_dump::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.doc_dump.zones)
  return &zones_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::sr::doc_zone >&
doc_dump::zones() const {
  // @@protoc_insertion_point(field_list:gogo.sr.doc_dump.zones)
  return zones_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int doc_item::kDocIdFieldNumber;
const int doc_item::kNumFieldNumber;
const int doc_item::kLastDateFieldNumber;
const int doc_item::kWeightFieldNumber;
const int doc_item::kGroupSizeFieldNumber;
const int doc_item::kSpamFieldNumber;
const int doc_item::kC1FieldNumber;
const int doc_item::kC2FieldNumber;
const int doc_item::kC3FieldNumber;
const int doc_item::kSnipFieldNumber;
const int doc_item::kDataExFieldNumber;
const int doc_item::kSnipHlFieldNumber;
const int doc_item::kNumZoneValuesFieldNumber;
const int doc_item::kTextZoneValuesFieldNumber;
const int doc_item::kTrackListFieldNumber;
const int doc_item::kBodyFieldNumber;
const int doc_item::kRealDocIdFieldNumber;
const int doc_item::kC4FieldNumber;
const int doc_item::kSiteLinksFieldNumber;
const int doc_item::kExtraSnippetDataFieldNumber;
const int doc_item::kIsNavigFieldNumber;
const int doc_item::kRequiredPositionFieldNumber;
const int doc_item::kDomainGroupFieldNumber;
const int doc_item::kRankTraceFeatFieldNumber;
const int doc_item::kIsMergableFieldNumber;
const int doc_item::kIndexVersionFieldNumber;
const int doc_item::kRawTextRanksFieldNumber;
const int doc_item::kC5FieldNumber;
const int doc_item::kSnippetVersionFieldNumber;
const int doc_item::kDocTraceFieldNumber;
const int doc_item::kCouldBeAGroupLeaderFieldNumber;
const int doc_item::kFullDomainHashFieldNumber;
const int doc_item::kRawDocContentFieldNumber;
const int doc_item::kFeaturesHashFieldNumber;
const int doc_item::kReqPosMergableFieldNumber;
const int doc_item::kDocUrlFieldNumber;
const int doc_item::kIsVkmusicMasterCopyFieldNumber;
const int doc_item::kIsVkmusicReleaseCopyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

doc_item::doc_item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.doc_item)
}
doc_item::doc_item(const doc_item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      snip_hl_(from.snip_hl_),
      num_zone_values_(from.num_zone_values_),
      text_zone_values_(from.text_zone_values_),
      track_list_(from.track_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_date()) {
    last_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_date_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  rank_trace_feat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rank_trace_feat()) {
    rank_trace_feat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rank_trace_feat_);
  }
  index_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_index_version()) {
    index_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.index_version_);
  }
  raw_text_ranks_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_text_ranks()) {
    raw_text_ranks_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_text_ranks_);
  }
  doc_trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_doc_trace()) {
    doc_trace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_trace_);
  }
  raw_doc_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_doc_content()) {
    raw_doc_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_doc_content_);
  }
  doc_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_doc_url()) {
    doc_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_url_);
  }
  if (from.has_snip()) {
    snip_ = new ::gogo::sr::snippet_item(*from.snip_);
  } else {
    snip_ = NULL;
  }
  if (from.has_data_ex()) {
    data_ex_ = new ::gogo::sr::doc_data_ex(*from.data_ex_);
  } else {
    data_ex_ = NULL;
  }
  if (from.has_real_doc_id()) {
    real_doc_id_ = new ::gogo::sr::real_doc_id_data(*from.real_doc_id_);
  } else {
    real_doc_id_ = NULL;
  }
  if (from.has_site_links()) {
    site_links_ = new ::ru::mail::go::snippetdata::parser::SiteLinks(*from.site_links_);
  } else {
    site_links_ = NULL;
  }
  if (from.has_extra_snippet_data()) {
    extra_snippet_data_ = new ::ru::mail::go::snippetdata::parser::ValueComposite(*from.extra_snippet_data_);
  } else {
    extra_snippet_data_ = NULL;
  }
  ::memcpy(&doc_id_, &from.doc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_mergable_) -
    reinterpret_cast<char*>(&doc_id_)) + sizeof(is_mergable_));
  // @@protoc_insertion_point(copy_constructor:gogo.sr.doc_item)
}

void doc_item::SharedCtor() {
  last_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rank_trace_feat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_text_ranks_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_doc_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&snip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_vkmusic_release_copy_) -
      reinterpret_cast<char*>(&snip_)) + sizeof(is_vkmusic_release_copy_));
  is_mergable_ = true;
  _cached_size_ = 0;
}

doc_item::~doc_item() {
  // @@protoc_insertion_point(destructor:gogo.sr.doc_item)
  SharedDtor();
}

void doc_item::SharedDtor() {
  last_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rank_trace_feat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_text_ranks_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_trace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_doc_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete snip_;
  if (this != internal_default_instance()) delete data_ex_;
  if (this != internal_default_instance()) delete real_doc_id_;
  if (this != internal_default_instance()) delete site_links_;
  if (this != internal_default_instance()) delete extra_snippet_data_;
}

void doc_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* doc_item::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const doc_item& doc_item::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

doc_item* doc_item::New(::google::protobuf::Arena* arena) const {
  doc_item* n = new doc_item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void doc_item::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.doc_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snip_hl_.Clear();
  num_zone_values_.Clear();
  text_zone_values_.Clear();
  track_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!last_date_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*last_date_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*body_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!rank_trace_feat_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rank_trace_feat_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!index_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*index_version_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!raw_text_ranks_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*raw_text_ranks_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!doc_trace_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*doc_trace_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!raw_doc_content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*raw_doc_content_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!doc_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*doc_url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(snip_ != NULL);
      snip_->::gogo::sr::snippet_item::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(data_ex_ != NULL);
      data_ex_->::gogo::sr::doc_data_ex::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(real_doc_id_ != NULL);
      real_doc_id_->::gogo::sr::real_doc_id_data::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(site_links_ != NULL);
      site_links_->::ru::mail::go::snippetdata::parser::SiteLinks::Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(extra_snippet_data_ != NULL);
      extra_snippet_data_->::ru::mail::go::snippetdata::parser::ValueComposite::Clear();
    }
  }
  if (cached_has_bits & 57344u) {
    ::memset(&doc_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_) -
        reinterpret_cast<char*>(&doc_id_)) + sizeof(weight_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&c1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spam_) -
        reinterpret_cast<char*>(&c1_)) + sizeof(spam_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&is_navig_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_vkmusic_master_copy_) -
        reinterpret_cast<char*>(&is_navig_)) + sizeof(is_vkmusic_master_copy_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 3u) {
    is_vkmusic_release_copy_ = false;
    is_mergable_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool doc_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.doc_item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 doc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_date().data(), static_cast<int>(this->last_date().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.doc_item.last_date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_group_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool spam = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_spam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 c1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_c1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 c2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_c2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 c3 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_c3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.sr.snippet_item snip = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.sr.doc_data_ex data_ex = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_ex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.sr.word_posting_list snip_hl = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_snip_hl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.sr.num_zone_item num_zone_values = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_num_zone_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.sr.text_zone_item text_zone_values = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_text_zone_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string track_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_track_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track_list(this->track_list_size() - 1).data(),
            static_cast<int>(this->track_list(this->track_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.doc_item.track_list");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string body = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body().data(), static_cast<int>(this->body().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.doc_item.body");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.sr.real_doc_id_data real_doc_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_real_doc_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 c4 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_c4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &c4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.snippetdata.parser.SiteLinks site_links = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_site_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.snippetdata.parser.ValueComposite extra_snippet_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra_snippet_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_navig = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_is_navig();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_navig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 required_position = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_required_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &required_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.sr.domain_group_type domain_group = 23 [default = NONE];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::sr::domain_group_type_IsValid(value)) {
            set_domain_group(static_cast< ::gogo::sr::domain_group_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rank_trace_feat = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rank_trace_feat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rank_trace_feat().data(), static_cast<int>(this->rank_trace_feat().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.doc_item.rank_trace_feat");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_mergable = 25 [default = true];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_is_mergable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_mergable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string index_version = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index_version().data(), static_cast<int>(this->index_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.doc_item.index_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string raw_text_ranks = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_text_ranks()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->raw_text_ranks().data(), static_cast<int>(this->raw_text_ranks().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.doc_item.raw_text_ranks");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 c5 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_c5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &c5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 snippet_version = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_snippet_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snippet_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string doc_trace = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_trace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->doc_trace().data(), static_cast<int>(this->doc_trace().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.doc_item.doc_trace");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool could_be_a_group_leader = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_could_be_a_group_leader();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &could_be_a_group_leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 full_domain_hash = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 261 & 0xFF */)) {
          set_has_full_domain_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &full_domain_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes raw_doc_content = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_doc_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed32 features_hash = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 277 & 0xFF */)) {
          set_has_features_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &features_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool req_pos_mergable = 35 [default = false];
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_req_pos_mergable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &req_pos_mergable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string doc_url = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->doc_url().data(), static_cast<int>(this->doc_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.doc_item.doc_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_vkmusic_master_copy = 37 [default = false];
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_is_vkmusic_master_copy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vkmusic_master_copy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_vkmusic_release_copy = 38 [default = false];
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          set_has_is_vkmusic_release_copy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vkmusic_release_copy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.doc_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.doc_item)
  return false;
#undef DO_
}

void doc_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.doc_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 doc_id = 1;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->doc_id(), output);
  }

  // required uint32 num = 2;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional string last_date = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_date().data(), static_cast<int>(this->last_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_item.last_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->last_date(), output);
  }

  // optional double weight = 4;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->weight(), output);
  }

  // optional uint32 group_size = 5;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group_size(), output);
  }

  // optional bool spam = 6;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->spam(), output);
  }

  // optional int64 c1 = 7;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->c1(), output);
  }

  // optional int64 c2 = 8;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->c2(), output);
  }

  // optional int64 c3 = 9;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->c3(), output);
  }

  // optional .gogo.sr.snippet_item snip = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->snip_, output);
  }

  // optional .gogo.sr.doc_data_ex data_ex = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->data_ex_, output);
  }

  // repeated .gogo.sr.word_posting_list snip_hl = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snip_hl_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->snip_hl(static_cast<int>(i)), output);
  }

  // repeated .gogo.sr.num_zone_item num_zone_values = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->num_zone_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->num_zone_values(static_cast<int>(i)), output);
  }

  // repeated .gogo.sr.text_zone_item text_zone_values = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->text_zone_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->text_zone_values(static_cast<int>(i)), output);
  }

  // repeated string track_list = 15;
  for (int i = 0, n = this->track_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_list(i).data(), static_cast<int>(this->track_list(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_item.track_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->track_list(i), output);
  }

  // optional string body = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_item.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->body(), output);
  }

  // optional .gogo.sr.real_doc_id_data real_doc_id = 17;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->real_doc_id_, output);
  }

  // optional uint64 c4 = 18;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->c4(), output);
  }

  // optional .ru.mail.go.snippetdata.parser.SiteLinks site_links = 19;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->site_links_, output);
  }

  // optional .ru.mail.go.snippetdata.parser.ValueComposite extra_snippet_data = 20;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->extra_snippet_data_, output);
  }

  // optional bool is_navig = 21;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->is_navig(), output);
  }

  // optional uint32 required_position = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->required_position(), output);
  }

  // optional .gogo.sr.domain_group_type domain_group = 23 [default = NONE];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->domain_group(), output);
  }

  // optional string rank_trace_feat = 24;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rank_trace_feat().data(), static_cast<int>(this->rank_trace_feat().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_item.rank_trace_feat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->rank_trace_feat(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_mergable = 25 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->is_mergable(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string index_version = 26;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index_version().data(), static_cast<int>(this->index_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_item.index_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->index_version(), output);
  }

  // optional string raw_text_ranks = 27;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->raw_text_ranks().data(), static_cast<int>(this->raw_text_ranks().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_item.raw_text_ranks");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->raw_text_ranks(), output);
  }

  // optional uint64 c5 = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->c5(), output);
  }

  // optional uint32 snippet_version = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->snippet_version(), output);
  }

  // optional string doc_trace = 30;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->doc_trace().data(), static_cast<int>(this->doc_trace().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_item.doc_trace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->doc_trace(), output);
  }

  // optional bool could_be_a_group_leader = 31;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->could_be_a_group_leader(), output);
  }

  // optional fixed32 full_domain_hash = 32;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(32, this->full_domain_hash(), output);
  }

  // optional bytes raw_doc_content = 33;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      33, this->raw_doc_content(), output);
  }

  // optional sfixed32 features_hash = 34;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(34, this->features_hash(), output);
  }

  // optional bool req_pos_mergable = 35 [default = false];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->req_pos_mergable(), output);
  }

  // optional string doc_url = 36;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->doc_url().data(), static_cast<int>(this->doc_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_item.doc_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->doc_url(), output);
  }

  // optional bool is_vkmusic_master_copy = 37 [default = false];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->is_vkmusic_master_copy(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_vkmusic_release_copy = 38 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->is_vkmusic_release_copy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.doc_item)
}

::google::protobuf::uint8* doc_item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.doc_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 doc_id = 1;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->doc_id(), target);
  }

  // required uint32 num = 2;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional string last_date = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_date().data(), static_cast<int>(this->last_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_item.last_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->last_date(), target);
  }

  // optional double weight = 4;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->weight(), target);
  }

  // optional uint32 group_size = 5;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->group_size(), target);
  }

  // optional bool spam = 6;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->spam(), target);
  }

  // optional int64 c1 = 7;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->c1(), target);
  }

  // optional int64 c2 = 8;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->c2(), target);
  }

  // optional int64 c3 = 9;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->c3(), target);
  }

  // optional .gogo.sr.snippet_item snip = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->snip_, deterministic, target);
  }

  // optional .gogo.sr.doc_data_ex data_ex = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->data_ex_, deterministic, target);
  }

  // repeated .gogo.sr.word_posting_list snip_hl = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snip_hl_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->snip_hl(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gogo.sr.num_zone_item num_zone_values = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->num_zone_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->num_zone_values(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gogo.sr.text_zone_item text_zone_values = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->text_zone_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->text_zone_values(static_cast<int>(i)), deterministic, target);
  }

  // repeated string track_list = 15;
  for (int i = 0, n = this->track_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_list(i).data(), static_cast<int>(this->track_list(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_item.track_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->track_list(i), target);
  }

  // optional string body = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_item.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->body(), target);
  }

  // optional .gogo.sr.real_doc_id_data real_doc_id = 17;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->real_doc_id_, deterministic, target);
  }

  // optional uint64 c4 = 18;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->c4(), target);
  }

  // optional .ru.mail.go.snippetdata.parser.SiteLinks site_links = 19;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->site_links_, deterministic, target);
  }

  // optional .ru.mail.go.snippetdata.parser.ValueComposite extra_snippet_data = 20;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->extra_snippet_data_, deterministic, target);
  }

  // optional bool is_navig = 21;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->is_navig(), target);
  }

  // optional uint32 required_position = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->required_position(), target);
  }

  // optional .gogo.sr.domain_group_type domain_group = 23 [default = NONE];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->domain_group(), target);
  }

  // optional string rank_trace_feat = 24;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rank_trace_feat().data(), static_cast<int>(this->rank_trace_feat().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_item.rank_trace_feat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->rank_trace_feat(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_mergable = 25 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->is_mergable(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string index_version = 26;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index_version().data(), static_cast<int>(this->index_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_item.index_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->index_version(), target);
  }

  // optional string raw_text_ranks = 27;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->raw_text_ranks().data(), static_cast<int>(this->raw_text_ranks().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_item.raw_text_ranks");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->raw_text_ranks(), target);
  }

  // optional uint64 c5 = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->c5(), target);
  }

  // optional uint32 snippet_version = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->snippet_version(), target);
  }

  // optional string doc_trace = 30;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->doc_trace().data(), static_cast<int>(this->doc_trace().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_item.doc_trace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->doc_trace(), target);
  }

  // optional bool could_be_a_group_leader = 31;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->could_be_a_group_leader(), target);
  }

  // optional fixed32 full_domain_hash = 32;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(32, this->full_domain_hash(), target);
  }

  // optional bytes raw_doc_content = 33;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        33, this->raw_doc_content(), target);
  }

  // optional sfixed32 features_hash = 34;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(34, this->features_hash(), target);
  }

  // optional bool req_pos_mergable = 35 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->req_pos_mergable(), target);
  }

  // optional string doc_url = 36;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->doc_url().data(), static_cast<int>(this->doc_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.doc_item.doc_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->doc_url(), target);
  }

  // optional bool is_vkmusic_master_copy = 37 [default = false];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->is_vkmusic_master_copy(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_vkmusic_release_copy = 38 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->is_vkmusic_release_copy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.doc_item)
  return target;
}

size_t doc_item::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.sr.doc_item)
  size_t total_size = 0;

  if (has_doc_id()) {
    // required uint32 doc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->doc_id());
  }

  if (has_num()) {
    // required uint32 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  return total_size;
}
size_t doc_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.doc_item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00006000) ^ 0x00006000) == 0) {  // All required fields are present.
    // required uint32 doc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->doc_id());

    // required uint32 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .gogo.sr.word_posting_list snip_hl = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->snip_hl_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snip_hl(static_cast<int>(i)));
    }
  }

  // repeated .gogo.sr.num_zone_item num_zone_values = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->num_zone_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->num_zone_values(static_cast<int>(i)));
    }
  }

  // repeated .gogo.sr.text_zone_item text_zone_values = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->text_zone_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text_zone_values(static_cast<int>(i)));
    }
  }

  // repeated string track_list = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->track_list_size());
  for (int i = 0, n = this->track_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->track_list(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string last_date = 3;
    if (has_last_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_date());
    }

    // optional string body = 16;
    if (has_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

    // optional string rank_trace_feat = 24;
    if (has_rank_trace_feat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rank_trace_feat());
    }

    // optional string index_version = 26;
    if (has_index_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->index_version());
    }

    // optional string raw_text_ranks = 27;
    if (has_raw_text_ranks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_text_ranks());
    }

    // optional string doc_trace = 30;
    if (has_doc_trace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doc_trace());
    }

    // optional bytes raw_doc_content = 33;
    if (has_raw_doc_content()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_doc_content());
    }

    // optional string doc_url = 36;
    if (has_doc_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doc_url());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional .gogo.sr.snippet_item snip = 10;
    if (has_snip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->snip_);
    }

    // optional .gogo.sr.doc_data_ex data_ex = 11;
    if (has_data_ex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_ex_);
    }

    // optional .gogo.sr.real_doc_id_data real_doc_id = 17;
    if (has_real_doc_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->real_doc_id_);
    }

    // optional .ru.mail.go.snippetdata.parser.SiteLinks site_links = 19;
    if (has_site_links()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->site_links_);
    }

    // optional .ru.mail.go.snippetdata.parser.ValueComposite extra_snippet_data = 20;
    if (has_extra_snippet_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->extra_snippet_data_);
    }

  }
  // optional double weight = 4;
  if (has_weight()) {
    total_size += 1 + 8;
  }

  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int64 c1 = 7;
    if (has_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->c1());
    }

    // optional int64 c2 = 8;
    if (has_c2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->c2());
    }

    // optional int64 c3 = 9;
    if (has_c3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->c3());
    }

    // optional uint32 group_size = 5;
    if (has_group_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_size());
    }

    // optional uint32 required_position = 22;
    if (has_required_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->required_position());
    }

    // optional uint64 c4 = 18;
    if (has_c4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->c4());
    }

    // optional .gogo.sr.domain_group_type domain_group = 23 [default = NONE];
    if (has_domain_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->domain_group());
    }

    // optional bool spam = 6;
    if (has_spam()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional bool is_navig = 21;
    if (has_is_navig()) {
      total_size += 2 + 1;
    }

    // optional bool could_be_a_group_leader = 31;
    if (has_could_be_a_group_leader()) {
      total_size += 2 + 1;
    }

    // optional bool req_pos_mergable = 35 [default = false];
    if (has_req_pos_mergable()) {
      total_size += 2 + 1;
    }

    // optional uint64 c5 = 28;
    if (has_c5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->c5());
    }

    // optional uint32 snippet_version = 29;
    if (has_snippet_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snippet_version());
    }

    // optional fixed32 full_domain_hash = 32;
    if (has_full_domain_hash()) {
      total_size += 2 + 4;
    }

    // optional sfixed32 features_hash = 34;
    if (has_features_hash()) {
      total_size += 2 + 4;
    }

    // optional bool is_vkmusic_master_copy = 37 [default = false];
    if (has_is_vkmusic_master_copy()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & 3u) {
    // optional bool is_vkmusic_release_copy = 38 [default = false];
    if (has_is_vkmusic_release_copy()) {
      total_size += 2 + 1;
    }

    // optional bool is_mergable = 25 [default = true];
    if (has_is_mergable()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void doc_item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.doc_item)
  GOOGLE_DCHECK_NE(&from, this);
  const doc_item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const doc_item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.doc_item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.doc_item)
    MergeFrom(*source);
  }
}

void doc_item::MergeFrom(const doc_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.doc_item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  snip_hl_.MergeFrom(from.snip_hl_);
  num_zone_values_.MergeFrom(from.num_zone_values_);
  text_zone_values_.MergeFrom(from.text_zone_values_);
  track_list_.MergeFrom(from.track_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_last_date();
      last_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_date_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_rank_trace_feat();
      rank_trace_feat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rank_trace_feat_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_index_version();
      index_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.index_version_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_raw_text_ranks();
      raw_text_ranks_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_text_ranks_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_doc_trace();
      doc_trace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_trace_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_raw_doc_content();
      raw_doc_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_doc_content_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_doc_url();
      doc_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_url_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_snip()->::gogo::sr::snippet_item::MergeFrom(from.snip());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_data_ex()->::gogo::sr::doc_data_ex::MergeFrom(from.data_ex());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_real_doc_id()->::gogo::sr::real_doc_id_data::MergeFrom(from.real_doc_id());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_site_links()->::ru::mail::go::snippetdata::parser::SiteLinks::MergeFrom(from.site_links());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_extra_snippet_data()->::ru::mail::go::snippetdata::parser::ValueComposite::MergeFrom(from.extra_snippet_data());
    }
    if (cached_has_bits & 0x00002000u) {
      doc_id_ = from.doc_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00008000u) {
      weight_ = from.weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      c1_ = from.c1_;
    }
    if (cached_has_bits & 0x00020000u) {
      c2_ = from.c2_;
    }
    if (cached_has_bits & 0x00040000u) {
      c3_ = from.c3_;
    }
    if (cached_has_bits & 0x00080000u) {
      group_size_ = from.group_size_;
    }
    if (cached_has_bits & 0x00100000u) {
      required_position_ = from.required_position_;
    }
    if (cached_has_bits & 0x00200000u) {
      c4_ = from.c4_;
    }
    if (cached_has_bits & 0x00400000u) {
      domain_group_ = from.domain_group_;
    }
    if (cached_has_bits & 0x00800000u) {
      spam_ = from.spam_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      is_navig_ = from.is_navig_;
    }
    if (cached_has_bits & 0x02000000u) {
      could_be_a_group_leader_ = from.could_be_a_group_leader_;
    }
    if (cached_has_bits & 0x04000000u) {
      req_pos_mergable_ = from.req_pos_mergable_;
    }
    if (cached_has_bits & 0x08000000u) {
      c5_ = from.c5_;
    }
    if (cached_has_bits & 0x10000000u) {
      snippet_version_ = from.snippet_version_;
    }
    if (cached_has_bits & 0x20000000u) {
      full_domain_hash_ = from.full_domain_hash_;
    }
    if (cached_has_bits & 0x40000000u) {
      features_hash_ = from.features_hash_;
    }
    if (cached_has_bits & 0x80000000u) {
      is_vkmusic_master_copy_ = from.is_vkmusic_master_copy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      is_vkmusic_release_copy_ = from.is_vkmusic_release_copy_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_mergable_ = from.is_mergable_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void doc_item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.doc_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void doc_item::CopyFrom(const doc_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.doc_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool doc_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00006000) != 0x00006000) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->snip_hl())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->num_zone_values())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->text_zone_values())) return false;
  if (has_snip()) {
    if (!this->snip_->IsInitialized()) return false;
  }
  if (has_data_ex()) {
    if (!this->data_ex_->IsInitialized()) return false;
  }
  if (has_real_doc_id()) {
    if (!this->real_doc_id_->IsInitialized()) return false;
  }
  if (has_site_links()) {
    if (!this->site_links_->IsInitialized()) return false;
  }
  if (has_extra_snippet_data()) {
    if (!this->extra_snippet_data_->IsInitialized()) return false;
  }
  return true;
}

void doc_item::Swap(doc_item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void doc_item::InternalSwap(doc_item* other) {
  using std::swap;
  snip_hl_.InternalSwap(&other->snip_hl_);
  num_zone_values_.InternalSwap(&other->num_zone_values_);
  text_zone_values_.InternalSwap(&other->text_zone_values_);
  track_list_.InternalSwap(&other->track_list_);
  last_date_.Swap(&other->last_date_);
  body_.Swap(&other->body_);
  rank_trace_feat_.Swap(&other->rank_trace_feat_);
  index_version_.Swap(&other->index_version_);
  raw_text_ranks_.Swap(&other->raw_text_ranks_);
  doc_trace_.Swap(&other->doc_trace_);
  raw_doc_content_.Swap(&other->raw_doc_content_);
  doc_url_.Swap(&other->doc_url_);
  swap(snip_, other->snip_);
  swap(data_ex_, other->data_ex_);
  swap(real_doc_id_, other->real_doc_id_);
  swap(site_links_, other->site_links_);
  swap(extra_snippet_data_, other->extra_snippet_data_);
  swap(doc_id_, other->doc_id_);
  swap(num_, other->num_);
  swap(weight_, other->weight_);
  swap(c1_, other->c1_);
  swap(c2_, other->c2_);
  swap(c3_, other->c3_);
  swap(group_size_, other->group_size_);
  swap(required_position_, other->required_position_);
  swap(c4_, other->c4_);
  swap(domain_group_, other->domain_group_);
  swap(spam_, other->spam_);
  swap(is_navig_, other->is_navig_);
  swap(could_be_a_group_leader_, other->could_be_a_group_leader_);
  swap(req_pos_mergable_, other->req_pos_mergable_);
  swap(c5_, other->c5_);
  swap(snippet_version_, other->snippet_version_);
  swap(full_domain_hash_, other->full_domain_hash_);
  swap(features_hash_, other->features_hash_);
  swap(is_vkmusic_master_copy_, other->is_vkmusic_master_copy_);
  swap(is_vkmusic_release_copy_, other->is_vkmusic_release_copy_);
  swap(is_mergable_, other->is_mergable_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata doc_item::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// doc_item

// required uint32 doc_id = 1;
bool doc_item::has_doc_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void doc_item::set_has_doc_id() {
  _has_bits_[0] |= 0x00002000u;
}
void doc_item::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void doc_item::clear_doc_id() {
  doc_id_ = 0u;
  clear_has_doc_id();
}
::google::protobuf::uint32 doc_item::doc_id() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.doc_id)
  return doc_id_;
}
void doc_item::set_doc_id(::google::protobuf::uint32 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.doc_id)
}

// required uint32 num = 2;
bool doc_item::has_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void doc_item::set_has_num() {
  _has_bits_[0] |= 0x00004000u;
}
void doc_item::clear_has_num() {
  _has_bits_[0] &= ~0x00004000u;
}
void doc_item::clear_num() {
  num_ = 0u;
  clear_has_num();
}
::google::protobuf::uint32 doc_item::num() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.num)
  return num_;
}
void doc_item::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.num)
}

// optional string last_date = 3;
bool doc_item::has_last_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void doc_item::set_has_last_date() {
  _has_bits_[0] |= 0x00000001u;
}
void doc_item::clear_has_last_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void doc_item::clear_last_date() {
  last_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_date();
}
const ::std::string& doc_item::last_date() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.last_date)
  return last_date_.GetNoArena();
}
void doc_item::set_last_date(const ::std::string& value) {
  set_has_last_date();
  last_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.last_date)
}
#if LANG_CXX11
void doc_item::set_last_date(::std::string&& value) {
  set_has_last_date();
  last_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_item.last_date)
}
#endif
void doc_item::set_last_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_date();
  last_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.last_date)
}
void doc_item::set_last_date(const char* value, size_t size) {
  set_has_last_date();
  last_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.last_date)
}
::std::string* doc_item::mutable_last_date() {
  set_has_last_date();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.last_date)
  return last_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* doc_item::release_last_date() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.last_date)
  clear_has_last_date();
  return last_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void doc_item::set_allocated_last_date(::std::string* last_date) {
  if (last_date != NULL) {
    set_has_last_date();
  } else {
    clear_has_last_date();
  }
  last_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_date);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.last_date)
}

// optional double weight = 4;
bool doc_item::has_weight() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void doc_item::set_has_weight() {
  _has_bits_[0] |= 0x00008000u;
}
void doc_item::clear_has_weight() {
  _has_bits_[0] &= ~0x00008000u;
}
void doc_item::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
double doc_item::weight() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.weight)
  return weight_;
}
void doc_item::set_weight(double value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.weight)
}

// optional uint32 group_size = 5;
bool doc_item::has_group_size() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void doc_item::set_has_group_size() {
  _has_bits_[0] |= 0x00080000u;
}
void doc_item::clear_has_group_size() {
  _has_bits_[0] &= ~0x00080000u;
}
void doc_item::clear_group_size() {
  group_size_ = 0u;
  clear_has_group_size();
}
::google::protobuf::uint32 doc_item::group_size() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.group_size)
  return group_size_;
}
void doc_item::set_group_size(::google::protobuf::uint32 value) {
  set_has_group_size();
  group_size_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.group_size)
}

// optional bool spam = 6;
bool doc_item::has_spam() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void doc_item::set_has_spam() {
  _has_bits_[0] |= 0x00800000u;
}
void doc_item::clear_has_spam() {
  _has_bits_[0] &= ~0x00800000u;
}
void doc_item::clear_spam() {
  spam_ = false;
  clear_has_spam();
}
bool doc_item::spam() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.spam)
  return spam_;
}
void doc_item::set_spam(bool value) {
  set_has_spam();
  spam_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.spam)
}

// optional int64 c1 = 7;
bool doc_item::has_c1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void doc_item::set_has_c1() {
  _has_bits_[0] |= 0x00010000u;
}
void doc_item::clear_has_c1() {
  _has_bits_[0] &= ~0x00010000u;
}
void doc_item::clear_c1() {
  c1_ = GOOGLE_LONGLONG(0);
  clear_has_c1();
}
::google::protobuf::int64 doc_item::c1() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.c1)
  return c1_;
}
void doc_item::set_c1(::google::protobuf::int64 value) {
  set_has_c1();
  c1_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.c1)
}

// optional int64 c2 = 8;
bool doc_item::has_c2() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void doc_item::set_has_c2() {
  _has_bits_[0] |= 0x00020000u;
}
void doc_item::clear_has_c2() {
  _has_bits_[0] &= ~0x00020000u;
}
void doc_item::clear_c2() {
  c2_ = GOOGLE_LONGLONG(0);
  clear_has_c2();
}
::google::protobuf::int64 doc_item::c2() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.c2)
  return c2_;
}
void doc_item::set_c2(::google::protobuf::int64 value) {
  set_has_c2();
  c2_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.c2)
}

// optional int64 c3 = 9;
bool doc_item::has_c3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void doc_item::set_has_c3() {
  _has_bits_[0] |= 0x00040000u;
}
void doc_item::clear_has_c3() {
  _has_bits_[0] &= ~0x00040000u;
}
void doc_item::clear_c3() {
  c3_ = GOOGLE_LONGLONG(0);
  clear_has_c3();
}
::google::protobuf::int64 doc_item::c3() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.c3)
  return c3_;
}
void doc_item::set_c3(::google::protobuf::int64 value) {
  set_has_c3();
  c3_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.c3)
}

// optional .gogo.sr.snippet_item snip = 10;
bool doc_item::has_snip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void doc_item::set_has_snip() {
  _has_bits_[0] |= 0x00000100u;
}
void doc_item::clear_has_snip() {
  _has_bits_[0] &= ~0x00000100u;
}
void doc_item::clear_snip() {
  if (snip_ != NULL) snip_->::gogo::sr::snippet_item::Clear();
  clear_has_snip();
}
const ::gogo::sr::snippet_item& doc_item::snip() const {
  const ::gogo::sr::snippet_item* p = snip_;
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.snip)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::snippet_item*>(
      &::gogo::sr::_snippet_item_default_instance_);
}
::gogo::sr::snippet_item* doc_item::mutable_snip() {
  set_has_snip();
  if (snip_ == NULL) {
    snip_ = new ::gogo::sr::snippet_item;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.snip)
  return snip_;
}
::gogo::sr::snippet_item* doc_item::release_snip() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.snip)
  clear_has_snip();
  ::gogo::sr::snippet_item* temp = snip_;
  snip_ = NULL;
  return temp;
}
void doc_item::set_allocated_snip(::gogo::sr::snippet_item* snip) {
  delete snip_;
  snip_ = snip;
  if (snip) {
    set_has_snip();
  } else {
    clear_has_snip();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.snip)
}

// optional .gogo.sr.doc_data_ex data_ex = 11;
bool doc_item::has_data_ex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void doc_item::set_has_data_ex() {
  _has_bits_[0] |= 0x00000200u;
}
void doc_item::clear_has_data_ex() {
  _has_bits_[0] &= ~0x00000200u;
}
void doc_item::clear_data_ex() {
  if (data_ex_ != NULL) data_ex_->::gogo::sr::doc_data_ex::Clear();
  clear_has_data_ex();
}
const ::gogo::sr::doc_data_ex& doc_item::data_ex() const {
  const ::gogo::sr::doc_data_ex* p = data_ex_;
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.data_ex)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::doc_data_ex*>(
      &::gogo::sr::_doc_data_ex_default_instance_);
}
::gogo::sr::doc_data_ex* doc_item::mutable_data_ex() {
  set_has_data_ex();
  if (data_ex_ == NULL) {
    data_ex_ = new ::gogo::sr::doc_data_ex;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.data_ex)
  return data_ex_;
}
::gogo::sr::doc_data_ex* doc_item::release_data_ex() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.data_ex)
  clear_has_data_ex();
  ::gogo::sr::doc_data_ex* temp = data_ex_;
  data_ex_ = NULL;
  return temp;
}
void doc_item::set_allocated_data_ex(::gogo::sr::doc_data_ex* data_ex) {
  delete data_ex_;
  data_ex_ = data_ex;
  if (data_ex) {
    set_has_data_ex();
  } else {
    clear_has_data_ex();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.data_ex)
}

// repeated .gogo.sr.word_posting_list snip_hl = 12;
int doc_item::snip_hl_size() const {
  return snip_hl_.size();
}
void doc_item::clear_snip_hl() {
  snip_hl_.Clear();
}
const ::gogo::sr::word_posting_list& doc_item::snip_hl(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.snip_hl)
  return snip_hl_.Get(index);
}
::gogo::sr::word_posting_list* doc_item::mutable_snip_hl(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.snip_hl)
  return snip_hl_.Mutable(index);
}
::gogo::sr::word_posting_list* doc_item::add_snip_hl() {
  // @@protoc_insertion_point(field_add:gogo.sr.doc_item.snip_hl)
  return snip_hl_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::sr::word_posting_list >*
doc_item::mutable_snip_hl() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.doc_item.snip_hl)
  return &snip_hl_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::sr::word_posting_list >&
doc_item::snip_hl() const {
  // @@protoc_insertion_point(field_list:gogo.sr.doc_item.snip_hl)
  return snip_hl_;
}

// repeated .gogo.sr.num_zone_item num_zone_values = 13;
int doc_item::num_zone_values_size() const {
  return num_zone_values_.size();
}
void doc_item::clear_num_zone_values() {
  num_zone_values_.Clear();
}
const ::gogo::sr::num_zone_item& doc_item::num_zone_values(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.num_zone_values)
  return num_zone_values_.Get(index);
}
::gogo::sr::num_zone_item* doc_item::mutable_num_zone_values(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.num_zone_values)
  return num_zone_values_.Mutable(index);
}
::gogo::sr::num_zone_item* doc_item::add_num_zone_values() {
  // @@protoc_insertion_point(field_add:gogo.sr.doc_item.num_zone_values)
  return num_zone_values_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::sr::num_zone_item >*
doc_item::mutable_num_zone_values() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.doc_item.num_zone_values)
  return &num_zone_values_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::sr::num_zone_item >&
doc_item::num_zone_values() const {
  // @@protoc_insertion_point(field_list:gogo.sr.doc_item.num_zone_values)
  return num_zone_values_;
}

// repeated .gogo.sr.text_zone_item text_zone_values = 14;
int doc_item::text_zone_values_size() const {
  return text_zone_values_.size();
}
void doc_item::clear_text_zone_values() {
  text_zone_values_.Clear();
}
const ::gogo::sr::text_zone_item& doc_item::text_zone_values(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.text_zone_values)
  return text_zone_values_.Get(index);
}
::gogo::sr::text_zone_item* doc_item::mutable_text_zone_values(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.text_zone_values)
  return text_zone_values_.Mutable(index);
}
::gogo::sr::text_zone_item* doc_item::add_text_zone_values() {
  // @@protoc_insertion_point(field_add:gogo.sr.doc_item.text_zone_values)
  return text_zone_values_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::sr::text_zone_item >*
doc_item::mutable_text_zone_values() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.doc_item.text_zone_values)
  return &text_zone_values_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::sr::text_zone_item >&
doc_item::text_zone_values() const {
  // @@protoc_insertion_point(field_list:gogo.sr.doc_item.text_zone_values)
  return text_zone_values_;
}

// repeated string track_list = 15;
int doc_item::track_list_size() const {
  return track_list_.size();
}
void doc_item::clear_track_list() {
  track_list_.Clear();
}
const ::std::string& doc_item::track_list(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.track_list)
  return track_list_.Get(index);
}
::std::string* doc_item::mutable_track_list(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.track_list)
  return track_list_.Mutable(index);
}
void doc_item::set_track_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.track_list)
  track_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void doc_item::set_track_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.track_list)
  track_list_.Mutable(index)->assign(std::move(value));
}
#endif
void doc_item::set_track_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  track_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.track_list)
}
void doc_item::set_track_list(int index, const char* value, size_t size) {
  track_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.track_list)
}
::std::string* doc_item::add_track_list() {
  // @@protoc_insertion_point(field_add_mutable:gogo.sr.doc_item.track_list)
  return track_list_.Add();
}
void doc_item::add_track_list(const ::std::string& value) {
  track_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.sr.doc_item.track_list)
}
#if LANG_CXX11
void doc_item::add_track_list(::std::string&& value) {
  track_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.sr.doc_item.track_list)
}
#endif
void doc_item::add_track_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  track_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.sr.doc_item.track_list)
}
void doc_item::add_track_list(const char* value, size_t size) {
  track_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.sr.doc_item.track_list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
doc_item::track_list() const {
  // @@protoc_insertion_point(field_list:gogo.sr.doc_item.track_list)
  return track_list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
doc_item::mutable_track_list() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.doc_item.track_list)
  return &track_list_;
}

// optional string body = 16;
bool doc_item::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void doc_item::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
void doc_item::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
void doc_item::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
const ::std::string& doc_item::body() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.body)
  return body_.GetNoArena();
}
void doc_item::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.body)
}
#if LANG_CXX11
void doc_item::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_item.body)
}
#endif
void doc_item::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.body)
}
void doc_item::set_body(const char* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.body)
}
::std::string* doc_item::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* doc_item::release_body() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void doc_item::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.body)
}

// optional .gogo.sr.real_doc_id_data real_doc_id = 17;
bool doc_item::has_real_doc_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void doc_item::set_has_real_doc_id() {
  _has_bits_[0] |= 0x00000400u;
}
void doc_item::clear_has_real_doc_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void doc_item::clear_real_doc_id() {
  if (real_doc_id_ != NULL) real_doc_id_->::gogo::sr::real_doc_id_data::Clear();
  clear_has_real_doc_id();
}
const ::gogo::sr::real_doc_id_data& doc_item::real_doc_id() const {
  const ::gogo::sr::real_doc_id_data* p = real_doc_id_;
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.real_doc_id)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::real_doc_id_data*>(
      &::gogo::sr::_real_doc_id_data_default_instance_);
}
::gogo::sr::real_doc_id_data* doc_item::mutable_real_doc_id() {
  set_has_real_doc_id();
  if (real_doc_id_ == NULL) {
    real_doc_id_ = new ::gogo::sr::real_doc_id_data;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.real_doc_id)
  return real_doc_id_;
}
::gogo::sr::real_doc_id_data* doc_item::release_real_doc_id() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.real_doc_id)
  clear_has_real_doc_id();
  ::gogo::sr::real_doc_id_data* temp = real_doc_id_;
  real_doc_id_ = NULL;
  return temp;
}
void doc_item::set_allocated_real_doc_id(::gogo::sr::real_doc_id_data* real_doc_id) {
  delete real_doc_id_;
  real_doc_id_ = real_doc_id;
  if (real_doc_id) {
    set_has_real_doc_id();
  } else {
    clear_has_real_doc_id();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.real_doc_id)
}

// optional uint64 c4 = 18;
bool doc_item::has_c4() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void doc_item::set_has_c4() {
  _has_bits_[0] |= 0x00200000u;
}
void doc_item::clear_has_c4() {
  _has_bits_[0] &= ~0x00200000u;
}
void doc_item::clear_c4() {
  c4_ = GOOGLE_ULONGLONG(0);
  clear_has_c4();
}
::google::protobuf::uint64 doc_item::c4() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.c4)
  return c4_;
}
void doc_item::set_c4(::google::protobuf::uint64 value) {
  set_has_c4();
  c4_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.c4)
}

// optional .ru.mail.go.snippetdata.parser.SiteLinks site_links = 19;
bool doc_item::has_site_links() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void doc_item::set_has_site_links() {
  _has_bits_[0] |= 0x00000800u;
}
void doc_item::clear_has_site_links() {
  _has_bits_[0] &= ~0x00000800u;
}
void doc_item::clear_site_links() {
  if (site_links_ != NULL) site_links_->::ru::mail::go::snippetdata::parser::SiteLinks::Clear();
  clear_has_site_links();
}
const ::ru::mail::go::snippetdata::parser::SiteLinks& doc_item::site_links() const {
  const ::ru::mail::go::snippetdata::parser::SiteLinks* p = site_links_;
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.site_links)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::snippetdata::parser::SiteLinks*>(
      &::ru::mail::go::snippetdata::parser::_SiteLinks_default_instance_);
}
::ru::mail::go::snippetdata::parser::SiteLinks* doc_item::mutable_site_links() {
  set_has_site_links();
  if (site_links_ == NULL) {
    site_links_ = new ::ru::mail::go::snippetdata::parser::SiteLinks;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.site_links)
  return site_links_;
}
::ru::mail::go::snippetdata::parser::SiteLinks* doc_item::release_site_links() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.site_links)
  clear_has_site_links();
  ::ru::mail::go::snippetdata::parser::SiteLinks* temp = site_links_;
  site_links_ = NULL;
  return temp;
}
void doc_item::set_allocated_site_links(::ru::mail::go::snippetdata::parser::SiteLinks* site_links) {
  delete site_links_;
  site_links_ = site_links;
  if (site_links) {
    set_has_site_links();
  } else {
    clear_has_site_links();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.site_links)
}

// optional .ru.mail.go.snippetdata.parser.ValueComposite extra_snippet_data = 20;
bool doc_item::has_extra_snippet_data() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void doc_item::set_has_extra_snippet_data() {
  _has_bits_[0] |= 0x00001000u;
}
void doc_item::clear_has_extra_snippet_data() {
  _has_bits_[0] &= ~0x00001000u;
}
void doc_item::clear_extra_snippet_data() {
  if (extra_snippet_data_ != NULL) extra_snippet_data_->::ru::mail::go::snippetdata::parser::ValueComposite::Clear();
  clear_has_extra_snippet_data();
}
const ::ru::mail::go::snippetdata::parser::ValueComposite& doc_item::extra_snippet_data() const {
  const ::ru::mail::go::snippetdata::parser::ValueComposite* p = extra_snippet_data_;
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.extra_snippet_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::snippetdata::parser::ValueComposite*>(
      &::ru::mail::go::snippetdata::parser::_ValueComposite_default_instance_);
}
::ru::mail::go::snippetdata::parser::ValueComposite* doc_item::mutable_extra_snippet_data() {
  set_has_extra_snippet_data();
  if (extra_snippet_data_ == NULL) {
    extra_snippet_data_ = new ::ru::mail::go::snippetdata::parser::ValueComposite;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.extra_snippet_data)
  return extra_snippet_data_;
}
::ru::mail::go::snippetdata::parser::ValueComposite* doc_item::release_extra_snippet_data() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.extra_snippet_data)
  clear_has_extra_snippet_data();
  ::ru::mail::go::snippetdata::parser::ValueComposite* temp = extra_snippet_data_;
  extra_snippet_data_ = NULL;
  return temp;
}
void doc_item::set_allocated_extra_snippet_data(::ru::mail::go::snippetdata::parser::ValueComposite* extra_snippet_data) {
  delete extra_snippet_data_;
  extra_snippet_data_ = extra_snippet_data;
  if (extra_snippet_data) {
    set_has_extra_snippet_data();
  } else {
    clear_has_extra_snippet_data();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.extra_snippet_data)
}

// optional bool is_navig = 21;
bool doc_item::has_is_navig() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void doc_item::set_has_is_navig() {
  _has_bits_[0] |= 0x01000000u;
}
void doc_item::clear_has_is_navig() {
  _has_bits_[0] &= ~0x01000000u;
}
void doc_item::clear_is_navig() {
  is_navig_ = false;
  clear_has_is_navig();
}
bool doc_item::is_navig() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.is_navig)
  return is_navig_;
}
void doc_item::set_is_navig(bool value) {
  set_has_is_navig();
  is_navig_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.is_navig)
}

// optional uint32 required_position = 22;
bool doc_item::has_required_position() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void doc_item::set_has_required_position() {
  _has_bits_[0] |= 0x00100000u;
}
void doc_item::clear_has_required_position() {
  _has_bits_[0] &= ~0x00100000u;
}
void doc_item::clear_required_position() {
  required_position_ = 0u;
  clear_has_required_position();
}
::google::protobuf::uint32 doc_item::required_position() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.required_position)
  return required_position_;
}
void doc_item::set_required_position(::google::protobuf::uint32 value) {
  set_has_required_position();
  required_position_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.required_position)
}

// optional .gogo.sr.domain_group_type domain_group = 23 [default = NONE];
bool doc_item::has_domain_group() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void doc_item::set_has_domain_group() {
  _has_bits_[0] |= 0x00400000u;
}
void doc_item::clear_has_domain_group() {
  _has_bits_[0] &= ~0x00400000u;
}
void doc_item::clear_domain_group() {
  domain_group_ = 0;
  clear_has_domain_group();
}
::gogo::sr::domain_group_type doc_item::domain_group() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.domain_group)
  return static_cast< ::gogo::sr::domain_group_type >(domain_group_);
}
void doc_item::set_domain_group(::gogo::sr::domain_group_type value) {
  assert(::gogo::sr::domain_group_type_IsValid(value));
  set_has_domain_group();
  domain_group_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.domain_group)
}

// optional string rank_trace_feat = 24;
bool doc_item::has_rank_trace_feat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void doc_item::set_has_rank_trace_feat() {
  _has_bits_[0] |= 0x00000004u;
}
void doc_item::clear_has_rank_trace_feat() {
  _has_bits_[0] &= ~0x00000004u;
}
void doc_item::clear_rank_trace_feat() {
  rank_trace_feat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rank_trace_feat();
}
const ::std::string& doc_item::rank_trace_feat() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.rank_trace_feat)
  return rank_trace_feat_.GetNoArena();
}
void doc_item::set_rank_trace_feat(const ::std::string& value) {
  set_has_rank_trace_feat();
  rank_trace_feat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.rank_trace_feat)
}
#if LANG_CXX11
void doc_item::set_rank_trace_feat(::std::string&& value) {
  set_has_rank_trace_feat();
  rank_trace_feat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_item.rank_trace_feat)
}
#endif
void doc_item::set_rank_trace_feat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rank_trace_feat();
  rank_trace_feat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.rank_trace_feat)
}
void doc_item::set_rank_trace_feat(const char* value, size_t size) {
  set_has_rank_trace_feat();
  rank_trace_feat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.rank_trace_feat)
}
::std::string* doc_item::mutable_rank_trace_feat() {
  set_has_rank_trace_feat();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.rank_trace_feat)
  return rank_trace_feat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* doc_item::release_rank_trace_feat() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.rank_trace_feat)
  clear_has_rank_trace_feat();
  return rank_trace_feat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void doc_item::set_allocated_rank_trace_feat(::std::string* rank_trace_feat) {
  if (rank_trace_feat != NULL) {
    set_has_rank_trace_feat();
  } else {
    clear_has_rank_trace_feat();
  }
  rank_trace_feat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rank_trace_feat);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.rank_trace_feat)
}

// optional bool is_mergable = 25 [default = true];
bool doc_item::has_is_mergable() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void doc_item::set_has_is_mergable() {
  _has_bits_[1] |= 0x00000002u;
}
void doc_item::clear_has_is_mergable() {
  _has_bits_[1] &= ~0x00000002u;
}
void doc_item::clear_is_mergable() {
  is_mergable_ = true;
  clear_has_is_mergable();
}
bool doc_item::is_mergable() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.is_mergable)
  return is_mergable_;
}
void doc_item::set_is_mergable(bool value) {
  set_has_is_mergable();
  is_mergable_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.is_mergable)
}

// optional string index_version = 26;
bool doc_item::has_index_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void doc_item::set_has_index_version() {
  _has_bits_[0] |= 0x00000008u;
}
void doc_item::clear_has_index_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void doc_item::clear_index_version() {
  index_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_index_version();
}
const ::std::string& doc_item::index_version() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.index_version)
  return index_version_.GetNoArena();
}
void doc_item::set_index_version(const ::std::string& value) {
  set_has_index_version();
  index_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.index_version)
}
#if LANG_CXX11
void doc_item::set_index_version(::std::string&& value) {
  set_has_index_version();
  index_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_item.index_version)
}
#endif
void doc_item::set_index_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_index_version();
  index_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.index_version)
}
void doc_item::set_index_version(const char* value, size_t size) {
  set_has_index_version();
  index_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.index_version)
}
::std::string* doc_item::mutable_index_version() {
  set_has_index_version();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.index_version)
  return index_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* doc_item::release_index_version() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.index_version)
  clear_has_index_version();
  return index_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void doc_item::set_allocated_index_version(::std::string* index_version) {
  if (index_version != NULL) {
    set_has_index_version();
  } else {
    clear_has_index_version();
  }
  index_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_version);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.index_version)
}

// optional string raw_text_ranks = 27;
bool doc_item::has_raw_text_ranks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void doc_item::set_has_raw_text_ranks() {
  _has_bits_[0] |= 0x00000010u;
}
void doc_item::clear_has_raw_text_ranks() {
  _has_bits_[0] &= ~0x00000010u;
}
void doc_item::clear_raw_text_ranks() {
  raw_text_ranks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_text_ranks();
}
const ::std::string& doc_item::raw_text_ranks() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.raw_text_ranks)
  return raw_text_ranks_.GetNoArena();
}
void doc_item::set_raw_text_ranks(const ::std::string& value) {
  set_has_raw_text_ranks();
  raw_text_ranks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.raw_text_ranks)
}
#if LANG_CXX11
void doc_item::set_raw_text_ranks(::std::string&& value) {
  set_has_raw_text_ranks();
  raw_text_ranks_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_item.raw_text_ranks)
}
#endif
void doc_item::set_raw_text_ranks(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_text_ranks();
  raw_text_ranks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.raw_text_ranks)
}
void doc_item::set_raw_text_ranks(const char* value, size_t size) {
  set_has_raw_text_ranks();
  raw_text_ranks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.raw_text_ranks)
}
::std::string* doc_item::mutable_raw_text_ranks() {
  set_has_raw_text_ranks();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.raw_text_ranks)
  return raw_text_ranks_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* doc_item::release_raw_text_ranks() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.raw_text_ranks)
  clear_has_raw_text_ranks();
  return raw_text_ranks_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void doc_item::set_allocated_raw_text_ranks(::std::string* raw_text_ranks) {
  if (raw_text_ranks != NULL) {
    set_has_raw_text_ranks();
  } else {
    clear_has_raw_text_ranks();
  }
  raw_text_ranks_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_text_ranks);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.raw_text_ranks)
}

// optional uint64 c5 = 28;
bool doc_item::has_c5() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void doc_item::set_has_c5() {
  _has_bits_[0] |= 0x08000000u;
}
void doc_item::clear_has_c5() {
  _has_bits_[0] &= ~0x08000000u;
}
void doc_item::clear_c5() {
  c5_ = GOOGLE_ULONGLONG(0);
  clear_has_c5();
}
::google::protobuf::uint64 doc_item::c5() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.c5)
  return c5_;
}
void doc_item::set_c5(::google::protobuf::uint64 value) {
  set_has_c5();
  c5_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.c5)
}

// optional uint32 snippet_version = 29;
bool doc_item::has_snippet_version() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void doc_item::set_has_snippet_version() {
  _has_bits_[0] |= 0x10000000u;
}
void doc_item::clear_has_snippet_version() {
  _has_bits_[0] &= ~0x10000000u;
}
void doc_item::clear_snippet_version() {
  snippet_version_ = 0u;
  clear_has_snippet_version();
}
::google::protobuf::uint32 doc_item::snippet_version() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.snippet_version)
  return snippet_version_;
}
void doc_item::set_snippet_version(::google::protobuf::uint32 value) {
  set_has_snippet_version();
  snippet_version_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.snippet_version)
}

// optional string doc_trace = 30;
bool doc_item::has_doc_trace() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void doc_item::set_has_doc_trace() {
  _has_bits_[0] |= 0x00000020u;
}
void doc_item::clear_has_doc_trace() {
  _has_bits_[0] &= ~0x00000020u;
}
void doc_item::clear_doc_trace() {
  doc_trace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc_trace();
}
const ::std::string& doc_item::doc_trace() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.doc_trace)
  return doc_trace_.GetNoArena();
}
void doc_item::set_doc_trace(const ::std::string& value) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.doc_trace)
}
#if LANG_CXX11
void doc_item::set_doc_trace(::std::string&& value) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_item.doc_trace)
}
#endif
void doc_item::set_doc_trace(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.doc_trace)
}
void doc_item::set_doc_trace(const char* value, size_t size) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.doc_trace)
}
::std::string* doc_item::mutable_doc_trace() {
  set_has_doc_trace();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.doc_trace)
  return doc_trace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* doc_item::release_doc_trace() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.doc_trace)
  clear_has_doc_trace();
  return doc_trace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void doc_item::set_allocated_doc_trace(::std::string* doc_trace) {
  if (doc_trace != NULL) {
    set_has_doc_trace();
  } else {
    clear_has_doc_trace();
  }
  doc_trace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_trace);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.doc_trace)
}

// optional bool could_be_a_group_leader = 31;
bool doc_item::has_could_be_a_group_leader() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void doc_item::set_has_could_be_a_group_leader() {
  _has_bits_[0] |= 0x02000000u;
}
void doc_item::clear_has_could_be_a_group_leader() {
  _has_bits_[0] &= ~0x02000000u;
}
void doc_item::clear_could_be_a_group_leader() {
  could_be_a_group_leader_ = false;
  clear_has_could_be_a_group_leader();
}
bool doc_item::could_be_a_group_leader() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.could_be_a_group_leader)
  return could_be_a_group_leader_;
}
void doc_item::set_could_be_a_group_leader(bool value) {
  set_has_could_be_a_group_leader();
  could_be_a_group_leader_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.could_be_a_group_leader)
}

// optional fixed32 full_domain_hash = 32;
bool doc_item::has_full_domain_hash() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void doc_item::set_has_full_domain_hash() {
  _has_bits_[0] |= 0x20000000u;
}
void doc_item::clear_has_full_domain_hash() {
  _has_bits_[0] &= ~0x20000000u;
}
void doc_item::clear_full_domain_hash() {
  full_domain_hash_ = 0u;
  clear_has_full_domain_hash();
}
::google::protobuf::uint32 doc_item::full_domain_hash() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.full_domain_hash)
  return full_domain_hash_;
}
void doc_item::set_full_domain_hash(::google::protobuf::uint32 value) {
  set_has_full_domain_hash();
  full_domain_hash_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.full_domain_hash)
}

// optional bytes raw_doc_content = 33;
bool doc_item::has_raw_doc_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void doc_item::set_has_raw_doc_content() {
  _has_bits_[0] |= 0x00000040u;
}
void doc_item::clear_has_raw_doc_content() {
  _has_bits_[0] &= ~0x00000040u;
}
void doc_item::clear_raw_doc_content() {
  raw_doc_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_doc_content();
}
const ::std::string& doc_item::raw_doc_content() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.raw_doc_content)
  return raw_doc_content_.GetNoArena();
}
void doc_item::set_raw_doc_content(const ::std::string& value) {
  set_has_raw_doc_content();
  raw_doc_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.raw_doc_content)
}
#if LANG_CXX11
void doc_item::set_raw_doc_content(::std::string&& value) {
  set_has_raw_doc_content();
  raw_doc_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_item.raw_doc_content)
}
#endif
void doc_item::set_raw_doc_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_doc_content();
  raw_doc_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.raw_doc_content)
}
void doc_item::set_raw_doc_content(const void* value, size_t size) {
  set_has_raw_doc_content();
  raw_doc_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.raw_doc_content)
}
::std::string* doc_item::mutable_raw_doc_content() {
  set_has_raw_doc_content();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.raw_doc_content)
  return raw_doc_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* doc_item::release_raw_doc_content() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.raw_doc_content)
  clear_has_raw_doc_content();
  return raw_doc_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void doc_item::set_allocated_raw_doc_content(::std::string* raw_doc_content) {
  if (raw_doc_content != NULL) {
    set_has_raw_doc_content();
  } else {
    clear_has_raw_doc_content();
  }
  raw_doc_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_doc_content);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.raw_doc_content)
}

// optional sfixed32 features_hash = 34;
bool doc_item::has_features_hash() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void doc_item::set_has_features_hash() {
  _has_bits_[0] |= 0x40000000u;
}
void doc_item::clear_has_features_hash() {
  _has_bits_[0] &= ~0x40000000u;
}
void doc_item::clear_features_hash() {
  features_hash_ = 0;
  clear_has_features_hash();
}
::google::protobuf::int32 doc_item::features_hash() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.features_hash)
  return features_hash_;
}
void doc_item::set_features_hash(::google::protobuf::int32 value) {
  set_has_features_hash();
  features_hash_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.features_hash)
}

// optional bool req_pos_mergable = 35 [default = false];
bool doc_item::has_req_pos_mergable() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void doc_item::set_has_req_pos_mergable() {
  _has_bits_[0] |= 0x04000000u;
}
void doc_item::clear_has_req_pos_mergable() {
  _has_bits_[0] &= ~0x04000000u;
}
void doc_item::clear_req_pos_mergable() {
  req_pos_mergable_ = false;
  clear_has_req_pos_mergable();
}
bool doc_item::req_pos_mergable() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.req_pos_mergable)
  return req_pos_mergable_;
}
void doc_item::set_req_pos_mergable(bool value) {
  set_has_req_pos_mergable();
  req_pos_mergable_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.req_pos_mergable)
}

// optional string doc_url = 36;
bool doc_item::has_doc_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void doc_item::set_has_doc_url() {
  _has_bits_[0] |= 0x00000080u;
}
void doc_item::clear_has_doc_url() {
  _has_bits_[0] &= ~0x00000080u;
}
void doc_item::clear_doc_url() {
  doc_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc_url();
}
const ::std::string& doc_item::doc_url() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.doc_url)
  return doc_url_.GetNoArena();
}
void doc_item::set_doc_url(const ::std::string& value) {
  set_has_doc_url();
  doc_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.doc_url)
}
#if LANG_CXX11
void doc_item::set_doc_url(::std::string&& value) {
  set_has_doc_url();
  doc_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_item.doc_url)
}
#endif
void doc_item::set_doc_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_doc_url();
  doc_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.doc_url)
}
void doc_item::set_doc_url(const char* value, size_t size) {
  set_has_doc_url();
  doc_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.doc_url)
}
::std::string* doc_item::mutable_doc_url() {
  set_has_doc_url();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.doc_url)
  return doc_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* doc_item::release_doc_url() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.doc_url)
  clear_has_doc_url();
  return doc_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void doc_item::set_allocated_doc_url(::std::string* doc_url) {
  if (doc_url != NULL) {
    set_has_doc_url();
  } else {
    clear_has_doc_url();
  }
  doc_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_url);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.doc_url)
}

// optional bool is_vkmusic_master_copy = 37 [default = false];
bool doc_item::has_is_vkmusic_master_copy() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void doc_item::set_has_is_vkmusic_master_copy() {
  _has_bits_[0] |= 0x80000000u;
}
void doc_item::clear_has_is_vkmusic_master_copy() {
  _has_bits_[0] &= ~0x80000000u;
}
void doc_item::clear_is_vkmusic_master_copy() {
  is_vkmusic_master_copy_ = false;
  clear_has_is_vkmusic_master_copy();
}
bool doc_item::is_vkmusic_master_copy() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.is_vkmusic_master_copy)
  return is_vkmusic_master_copy_;
}
void doc_item::set_is_vkmusic_master_copy(bool value) {
  set_has_is_vkmusic_master_copy();
  is_vkmusic_master_copy_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.is_vkmusic_master_copy)
}

// optional bool is_vkmusic_release_copy = 38 [default = false];
bool doc_item::has_is_vkmusic_release_copy() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void doc_item::set_has_is_vkmusic_release_copy() {
  _has_bits_[1] |= 0x00000001u;
}
void doc_item::clear_has_is_vkmusic_release_copy() {
  _has_bits_[1] &= ~0x00000001u;
}
void doc_item::clear_is_vkmusic_release_copy() {
  is_vkmusic_release_copy_ = false;
  clear_has_is_vkmusic_release_copy();
}
bool doc_item::is_vkmusic_release_copy() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.is_vkmusic_release_copy)
  return is_vkmusic_release_copy_;
}
void doc_item::set_is_vkmusic_release_copy(bool value) {
  set_has_is_vkmusic_release_copy();
  is_vkmusic_release_copy_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.is_vkmusic_release_copy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int error::kErrorCodeFieldNumber;
const int error::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

error::error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.error)
}
error::error(const error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:gogo.sr.error)
}

void error::SharedCtor() {
  _cached_size_ = 0;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
}

error::~error() {
  // @@protoc_insertion_point(destructor:gogo.sr.error)
  SharedDtor();
}

void error::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* error::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const error& error::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

error* error::New(::google::protobuf::Arena* arena) const {
  error* n = new error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void error::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_error_message()) {
    GOOGLE_DCHECK(!error_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*error_message_.UnsafeRawStringPointer())->clear();
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.error.error_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.error)
  return false;
#undef DO_
}

void error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 error_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->error_code(), output);
  }

  // optional string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.error.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.error)
}

::google::protobuf::uint8* error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 error_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->error_code(), target);
  }

  // optional string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.error.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.error)
  return target;
}

size_t error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.error)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required sint32 error_code = 1;
  if (has_error_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->error_code());
  }
  // optional string error_message = 2;
  if (has_error_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.error)
  GOOGLE_DCHECK_NE(&from, this);
  const error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.error)
    MergeFrom(*source);
  }
}

void error::MergeFrom(const error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void error::CopyFrom(const error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void error::Swap(error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void error::InternalSwap(error* other) {
  using std::swap;
  error_message_.Swap(&other->error_message_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata error::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// error

// required sint32 error_code = 1;
bool error::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void error::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void error::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void error::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::google::protobuf::int32 error::error_code() const {
  // @@protoc_insertion_point(field_get:gogo.sr.error.error_code)
  return error_code_;
}
void error::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.error.error_code)
}

// optional string error_message = 2;
bool error::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void error::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
void error::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void error::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
const ::std::string& error::error_message() const {
  // @@protoc_insertion_point(field_get:gogo.sr.error.error_message)
  return error_message_.GetNoArena();
}
void error::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.error.error_message)
}
#if LANG_CXX11
void error::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.error.error_message)
}
#endif
void error::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.error.error_message)
}
void error::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.error.error_message)
}
::std::string* error::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:gogo.sr.error.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* error::release_error_message() {
  // @@protoc_insertion_point(field_release:gogo.sr.error.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void error::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.error.error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int integer_counter::kNameFieldNumber;
const int integer_counter::kCounterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

integer_counter::integer_counter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.integer_counter)
}
integer_counter::integer_counter(const integer_counter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  counter_ = from.counter_;
  // @@protoc_insertion_point(copy_constructor:gogo.sr.integer_counter)
}

void integer_counter::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  counter_ = GOOGLE_LONGLONG(0);
}

integer_counter::~integer_counter() {
  // @@protoc_insertion_point(destructor:gogo.sr.integer_counter)
  SharedDtor();
}

void integer_counter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void integer_counter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* integer_counter::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const integer_counter& integer_counter::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

integer_counter* integer_counter::New(::google::protobuf::Arena* arena) const {
  integer_counter* n = new integer_counter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void integer_counter::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.integer_counter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  counter_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool integer_counter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.integer_counter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.integer_counter.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 counter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.integer_counter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.integer_counter)
  return false;
#undef DO_
}

void integer_counter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.integer_counter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.integer_counter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int64 counter = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->counter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.integer_counter)
}

::google::protobuf::uint8* integer_counter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.integer_counter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.integer_counter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int64 counter = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->counter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.integer_counter)
  return target;
}

size_t integer_counter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.sr.integer_counter)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_counter()) {
    // required int64 counter = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->counter());
  }

  return total_size;
}
size_t integer_counter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.integer_counter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int64 counter = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->counter());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void integer_counter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.integer_counter)
  GOOGLE_DCHECK_NE(&from, this);
  const integer_counter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const integer_counter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.integer_counter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.integer_counter)
    MergeFrom(*source);
  }
}

void integer_counter::MergeFrom(const integer_counter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.integer_counter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      counter_ = from.counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void integer_counter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.integer_counter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void integer_counter::CopyFrom(const integer_counter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.integer_counter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool integer_counter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void integer_counter::Swap(integer_counter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void integer_counter::InternalSwap(integer_counter* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(counter_, other->counter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata integer_counter::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// integer_counter

// required string name = 1;
bool integer_counter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void integer_counter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void integer_counter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void integer_counter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& integer_counter::name() const {
  // @@protoc_insertion_point(field_get:gogo.sr.integer_counter.name)
  return name_.GetNoArena();
}
void integer_counter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.integer_counter.name)
}
#if LANG_CXX11
void integer_counter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.integer_counter.name)
}
#endif
void integer_counter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.integer_counter.name)
}
void integer_counter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.integer_counter.name)
}
::std::string* integer_counter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.sr.integer_counter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* integer_counter::release_name() {
  // @@protoc_insertion_point(field_release:gogo.sr.integer_counter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void integer_counter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.integer_counter.name)
}

// required int64 counter = 2;
bool integer_counter::has_counter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void integer_counter::set_has_counter() {
  _has_bits_[0] |= 0x00000002u;
}
void integer_counter::clear_has_counter() {
  _has_bits_[0] &= ~0x00000002u;
}
void integer_counter::clear_counter() {
  counter_ = GOOGLE_LONGLONG(0);
  clear_has_counter();
}
::google::protobuf::int64 integer_counter::counter() const {
  // @@protoc_insertion_point(field_get:gogo.sr.integer_counter.counter)
  return counter_;
}
void integer_counter::set_counter(::google::protobuf::int64 value) {
  set_has_counter();
  counter_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.integer_counter.counter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int double_counter::kNameFieldNumber;
const int double_counter::kCounterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

double_counter::double_counter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.double_counter)
}
double_counter::double_counter(const double_counter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  counter_ = from.counter_;
  // @@protoc_insertion_point(copy_constructor:gogo.sr.double_counter)
}

void double_counter::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  counter_ = 0;
}

double_counter::~double_counter() {
  // @@protoc_insertion_point(destructor:gogo.sr.double_counter)
  SharedDtor();
}

void double_counter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void double_counter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* double_counter::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const double_counter& double_counter::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

double_counter* double_counter::New(::google::protobuf::Arena* arena) const {
  double_counter* n = new double_counter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void double_counter::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.double_counter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  counter_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool double_counter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.double_counter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.double_counter.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double counter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.double_counter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.double_counter)
  return false;
#undef DO_
}

void double_counter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.double_counter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.double_counter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required double counter = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->counter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.double_counter)
}

::google::protobuf::uint8* double_counter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.double_counter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.double_counter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required double counter = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->counter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.double_counter)
  return target;
}

size_t double_counter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.sr.double_counter)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_counter()) {
    // required double counter = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t double_counter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.double_counter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required double counter = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void double_counter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.double_counter)
  GOOGLE_DCHECK_NE(&from, this);
  const double_counter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const double_counter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.double_counter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.double_counter)
    MergeFrom(*source);
  }
}

void double_counter::MergeFrom(const double_counter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.double_counter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      counter_ = from.counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void double_counter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.double_counter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void double_counter::CopyFrom(const double_counter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.double_counter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool double_counter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void double_counter::Swap(double_counter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void double_counter::InternalSwap(double_counter* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(counter_, other->counter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata double_counter::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// double_counter

// required string name = 1;
bool double_counter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void double_counter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void double_counter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void double_counter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& double_counter::name() const {
  // @@protoc_insertion_point(field_get:gogo.sr.double_counter.name)
  return name_.GetNoArena();
}
void double_counter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.double_counter.name)
}
#if LANG_CXX11
void double_counter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.double_counter.name)
}
#endif
void double_counter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.double_counter.name)
}
void double_counter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.double_counter.name)
}
::std::string* double_counter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.sr.double_counter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* double_counter::release_name() {
  // @@protoc_insertion_point(field_release:gogo.sr.double_counter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void double_counter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.double_counter.name)
}

// required double counter = 2;
bool double_counter::has_counter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void double_counter::set_has_counter() {
  _has_bits_[0] |= 0x00000002u;
}
void double_counter::clear_has_counter() {
  _has_bits_[0] &= ~0x00000002u;
}
void double_counter::clear_counter() {
  counter_ = 0;
  clear_has_counter();
}
double double_counter::counter() const {
  // @@protoc_insertion_point(field_get:gogo.sr.double_counter.counter)
  return counter_;
}
void double_counter::set_counter(double value) {
  set_has_counter();
  counter_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.double_counter.counter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int statistic::kPornoStatsFieldNumber;
const int statistic::kGeoListFieldNumber;
const int statistic::kPorno2StatsFieldNumber;
const int statistic::kPornoProbStatsFieldNumber;
const int statistic::kMaxIntegerCounterFieldNumber;
const int statistic::kIntegerCounterFieldNumber;
const int statistic::kDoubleCounterFieldNumber;
const int statistic::kMetasearchUsedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

statistic::statistic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.statistic)
}
statistic::statistic(const statistic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      porno_stats_(from.porno_stats_),
      geo_list_(from.geo_list_),
      porno2_stats_(from.porno2_stats_),
      porno_prob_stats_(from.porno_prob_stats_),
      max_integer_counter_(from.max_integer_counter_),
      integer_counter_(from.integer_counter_),
      double_counter_(from.double_counter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metasearch_used_ = from.metasearch_used_;
  // @@protoc_insertion_point(copy_constructor:gogo.sr.statistic)
}

void statistic::SharedCtor() {
  _cached_size_ = 0;
  metasearch_used_ = false;
}

statistic::~statistic() {
  // @@protoc_insertion_point(destructor:gogo.sr.statistic)
  SharedDtor();
}

void statistic::SharedDtor() {
}

void statistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statistic::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const statistic& statistic::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

statistic* statistic::New(::google::protobuf::Arena* arena) const {
  statistic* n = new statistic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void statistic::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  porno_stats_.Clear();
  geo_list_.Clear();
  porno2_stats_.Clear();
  porno_prob_stats_.Clear();
  max_integer_counter_.Clear();
  integer_counter_.Clear();
  double_counter_.Clear();
  metasearch_used_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool statistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.statistic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 porno_stats = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_porno_stats())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_porno_stats())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 geo_list = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_geo_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_geo_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 porno2_stats = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_porno2_stats())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_porno2_stats())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 porno_prob_stats = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_porno_prob_stats())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_porno_prob_stats())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.sr.integer_counter max_integer_counter = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_max_integer_counter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.sr.integer_counter integer_counter = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_integer_counter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.sr.double_counter double_counter = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_double_counter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool metasearch_used = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 824 & 0xFF */)) {
          set_has_metasearch_used();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &metasearch_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.statistic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.statistic)
  return false;
#undef DO_
}

void statistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 porno_stats = 1 [packed = true];
  if (this->porno_stats_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _porno_stats_cached_byte_size_));
  }
  for (int i = 0, n = this->porno_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->porno_stats(i), output);
  }

  // repeated uint32 geo_list = 2 [packed = true];
  if (this->geo_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _geo_list_cached_byte_size_));
  }
  for (int i = 0, n = this->geo_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->geo_list(i), output);
  }

  // repeated uint32 porno2_stats = 3 [packed = true];
  if (this->porno2_stats_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _porno2_stats_cached_byte_size_));
  }
  for (int i = 0, n = this->porno2_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->porno2_stats(i), output);
  }

  // repeated uint32 porno_prob_stats = 4 [packed = true];
  if (this->porno_prob_stats_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _porno_prob_stats_cached_byte_size_));
  }
  for (int i = 0, n = this->porno_prob_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->porno_prob_stats(i), output);
  }

  // repeated .gogo.sr.integer_counter max_integer_counter = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->max_integer_counter_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->max_integer_counter(static_cast<int>(i)), output);
  }

  // repeated .gogo.sr.integer_counter integer_counter = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->integer_counter_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->integer_counter(static_cast<int>(i)), output);
  }

  // repeated .gogo.sr.double_counter double_counter = 102;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->double_counter_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->double_counter(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool metasearch_used = 103;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(103, this->metasearch_used(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.statistic)
}

::google::protobuf::uint8* statistic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 porno_stats = 1 [packed = true];
  if (this->porno_stats_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _porno_stats_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->porno_stats_, target);
  }

  // repeated uint32 geo_list = 2 [packed = true];
  if (this->geo_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _geo_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->geo_list_, target);
  }

  // repeated uint32 porno2_stats = 3 [packed = true];
  if (this->porno2_stats_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _porno2_stats_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->porno2_stats_, target);
  }

  // repeated uint32 porno_prob_stats = 4 [packed = true];
  if (this->porno_prob_stats_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _porno_prob_stats_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->porno_prob_stats_, target);
  }

  // repeated .gogo.sr.integer_counter max_integer_counter = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->max_integer_counter_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, this->max_integer_counter(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gogo.sr.integer_counter integer_counter = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->integer_counter_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, this->integer_counter(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gogo.sr.double_counter double_counter = 102;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->double_counter_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        102, this->double_counter(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool metasearch_used = 103;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(103, this->metasearch_used(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.statistic)
  return target;
}

size_t statistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.statistic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 porno_stats = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->porno_stats_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _porno_stats_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 geo_list = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->geo_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _geo_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 porno2_stats = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->porno2_stats_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _porno2_stats_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 porno_prob_stats = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->porno_prob_stats_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _porno_prob_stats_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .gogo.sr.integer_counter max_integer_counter = 100;
  {
    unsigned int count = static_cast<unsigned int>(this->max_integer_counter_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_integer_counter(static_cast<int>(i)));
    }
  }

  // repeated .gogo.sr.integer_counter integer_counter = 101;
  {
    unsigned int count = static_cast<unsigned int>(this->integer_counter_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->integer_counter(static_cast<int>(i)));
    }
  }

  // repeated .gogo.sr.double_counter double_counter = 102;
  {
    unsigned int count = static_cast<unsigned int>(this->double_counter_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->double_counter(static_cast<int>(i)));
    }
  }

  // optional bool metasearch_used = 103;
  if (has_metasearch_used()) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statistic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.statistic)
  GOOGLE_DCHECK_NE(&from, this);
  const statistic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const statistic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.statistic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.statistic)
    MergeFrom(*source);
  }
}

void statistic::MergeFrom(const statistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.statistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  porno_stats_.MergeFrom(from.porno_stats_);
  geo_list_.MergeFrom(from.geo_list_);
  porno2_stats_.MergeFrom(from.porno2_stats_);
  porno_prob_stats_.MergeFrom(from.porno_prob_stats_);
  max_integer_counter_.MergeFrom(from.max_integer_counter_);
  integer_counter_.MergeFrom(from.integer_counter_);
  double_counter_.MergeFrom(from.double_counter_);
  if (from.has_metasearch_used()) {
    set_metasearch_used(from.metasearch_used());
  }
}

void statistic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statistic::CopyFrom(const statistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool statistic::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->max_integer_counter())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->integer_counter())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->double_counter())) return false;
  return true;
}

void statistic::Swap(statistic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void statistic::InternalSwap(statistic* other) {
  using std::swap;
  porno_stats_.InternalSwap(&other->porno_stats_);
  geo_list_.InternalSwap(&other->geo_list_);
  porno2_stats_.InternalSwap(&other->porno2_stats_);
  porno_prob_stats_.InternalSwap(&other->porno_prob_stats_);
  max_integer_counter_.InternalSwap(&other->max_integer_counter_);
  integer_counter_.InternalSwap(&other->integer_counter_);
  double_counter_.InternalSwap(&other->double_counter_);
  swap(metasearch_used_, other->metasearch_used_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata statistic::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// statistic

// repeated uint32 porno_stats = 1 [packed = true];
int statistic::porno_stats_size() const {
  return porno_stats_.size();
}
void statistic::clear_porno_stats() {
  porno_stats_.Clear();
}
::google::protobuf::uint32 statistic::porno_stats(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.statistic.porno_stats)
  return porno_stats_.Get(index);
}
void statistic::set_porno_stats(int index, ::google::protobuf::uint32 value) {
  porno_stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.statistic.porno_stats)
}
void statistic::add_porno_stats(::google::protobuf::uint32 value) {
  porno_stats_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.statistic.porno_stats)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
statistic::porno_stats() const {
  // @@protoc_insertion_point(field_list:gogo.sr.statistic.porno_stats)
  return porno_stats_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
statistic::mutable_porno_stats() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.statistic.porno_stats)
  return &porno_stats_;
}

// repeated uint32 geo_list = 2 [packed = true];
int statistic::geo_list_size() const {
  return geo_list_.size();
}
void statistic::clear_geo_list() {
  geo_list_.Clear();
}
::google::protobuf::uint32 statistic::geo_list(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.statistic.geo_list)
  return geo_list_.Get(index);
}
void statistic::set_geo_list(int index, ::google::protobuf::uint32 value) {
  geo_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.statistic.geo_list)
}
void statistic::add_geo_list(::google::protobuf::uint32 value) {
  geo_list_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.statistic.geo_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
statistic::geo_list() const {
  // @@protoc_insertion_point(field_list:gogo.sr.statistic.geo_list)
  return geo_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
statistic::mutable_geo_list() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.statistic.geo_list)
  return &geo_list_;
}

// repeated uint32 porno2_stats = 3 [packed = true];
int statistic::porno2_stats_size() const {
  return porno2_stats_.size();
}
void statistic::clear_porno2_stats() {
  porno2_stats_.Clear();
}
::google::protobuf::uint32 statistic::porno2_stats(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.statistic.porno2_stats)
  return porno2_stats_.Get(index);
}
void statistic::set_porno2_stats(int index, ::google::protobuf::uint32 value) {
  porno2_stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.statistic.porno2_stats)
}
void statistic::add_porno2_stats(::google::protobuf::uint32 value) {
  porno2_stats_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.statistic.porno2_stats)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
statistic::porno2_stats() const {
  // @@protoc_insertion_point(field_list:gogo.sr.statistic.porno2_stats)
  return porno2_stats_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
statistic::mutable_porno2_stats() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.statistic.porno2_stats)
  return &porno2_stats_;
}

// repeated uint32 porno_prob_stats = 4 [packed = true];
int statistic::porno_prob_stats_size() const {
  return porno_prob_stats_.size();
}
void statistic::clear_porno_prob_stats() {
  porno_prob_stats_.Clear();
}
::google::protobuf::uint32 statistic::porno_prob_stats(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.statistic.porno_prob_stats)
  return porno_prob_stats_.Get(index);
}
void statistic::set_porno_prob_stats(int index, ::google::protobuf::uint32 value) {
  porno_prob_stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.statistic.porno_prob_stats)
}
void statistic::add_porno_prob_stats(::google::protobuf::uint32 value) {
  porno_prob_stats_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.statistic.porno_prob_stats)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
statistic::porno_prob_stats() const {
  // @@protoc_insertion_point(field_list:gogo.sr.statistic.porno_prob_stats)
  return porno_prob_stats_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
statistic::mutable_porno_prob_stats() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.statistic.porno_prob_stats)
  return &porno_prob_stats_;
}

// repeated .gogo.sr.integer_counter max_integer_counter = 100;
int statistic::max_integer_counter_size() const {
  return max_integer_counter_.size();
}
void statistic::clear_max_integer_counter() {
  max_integer_counter_.Clear();
}
const ::gogo::sr::integer_counter& statistic::max_integer_counter(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.statistic.max_integer_counter)
  return max_integer_counter_.Get(index);
}
::gogo::sr::integer_counter* statistic::mutable_max_integer_counter(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.statistic.max_integer_counter)
  return max_integer_counter_.Mutable(index);
}
::gogo::sr::integer_counter* statistic::add_max_integer_counter() {
  // @@protoc_insertion_point(field_add:gogo.sr.statistic.max_integer_counter)
  return max_integer_counter_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::sr::integer_counter >*
statistic::mutable_max_integer_counter() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.statistic.max_integer_counter)
  return &max_integer_counter_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::sr::integer_counter >&
statistic::max_integer_counter() const {
  // @@protoc_insertion_point(field_list:gogo.sr.statistic.max_integer_counter)
  return max_integer_counter_;
}

// repeated .gogo.sr.integer_counter integer_counter = 101;
int statistic::integer_counter_size() const {
  return integer_counter_.size();
}
void statistic::clear_integer_counter() {
  integer_counter_.Clear();
}
const ::gogo::sr::integer_counter& statistic::integer_counter(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.statistic.integer_counter)
  return integer_counter_.Get(index);
}
::gogo::sr::integer_counter* statistic::mutable_integer_counter(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.statistic.integer_counter)
  return integer_counter_.Mutable(index);
}
::gogo::sr::integer_counter* statistic::add_integer_counter() {
  // @@protoc_insertion_point(field_add:gogo.sr.statistic.integer_counter)
  return integer_counter_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::sr::integer_counter >*
statistic::mutable_integer_counter() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.statistic.integer_counter)
  return &integer_counter_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::sr::integer_counter >&
statistic::integer_counter() const {
  // @@protoc_insertion_point(field_list:gogo.sr.statistic.integer_counter)
  return integer_counter_;
}

// repeated .gogo.sr.double_counter double_counter = 102;
int statistic::double_counter_size() const {
  return double_counter_.size();
}
void statistic::clear_double_counter() {
  double_counter_.Clear();
}
const ::gogo::sr::double_counter& statistic::double_counter(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.statistic.double_counter)
  return double_counter_.Get(index);
}
::gogo::sr::double_counter* statistic::mutable_double_counter(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.statistic.double_counter)
  return double_counter_.Mutable(index);
}
::gogo::sr::double_counter* statistic::add_double_counter() {
  // @@protoc_insertion_point(field_add:gogo.sr.statistic.double_counter)
  return double_counter_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::sr::double_counter >*
statistic::mutable_double_counter() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.statistic.double_counter)
  return &double_counter_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::sr::double_counter >&
statistic::double_counter() const {
  // @@protoc_insertion_point(field_list:gogo.sr.statistic.double_counter)
  return double_counter_;
}

// optional bool metasearch_used = 103;
bool statistic::has_metasearch_used() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void statistic::set_has_metasearch_used() {
  _has_bits_[0] |= 0x00000001u;
}
void statistic::clear_has_metasearch_used() {
  _has_bits_[0] &= ~0x00000001u;
}
void statistic::clear_metasearch_used() {
  metasearch_used_ = false;
  clear_has_metasearch_used();
}
bool statistic::metasearch_used() const {
  // @@protoc_insertion_point(field_get:gogo.sr.statistic.metasearch_used)
  return metasearch_used_;
}
void statistic::set_metasearch_used(bool value) {
  set_has_metasearch_used();
  metasearch_used_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.statistic.metasearch_used)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int trait::kIdFieldNumber;
const int trait::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

trait::trait()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.trait)
}
trait::trait(const trait& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:gogo.sr.trait)
}

void trait::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

trait::~trait() {
  // @@protoc_insertion_point(destructor:gogo.sr.trait)
  SharedDtor();
}

void trait::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void trait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trait::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const trait& trait::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

trait* trait::New(::google::protobuf::Arena* arena) const {
  trait* n = new trait;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void trait::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool trait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.trait)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.trait)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.trait)
  return false;
#undef DO_
}

void trait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.trait)
}

::google::protobuf::uint8* trait::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.trait)
  return target;
}

size_t trait::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.sr.trait)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t trait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.trait)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trait::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.trait)
  GOOGLE_DCHECK_NE(&from, this);
  const trait* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const trait>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.trait)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.trait)
    MergeFrom(*source);
  }
}

void trait::MergeFrom(const trait& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.trait)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void trait::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trait::CopyFrom(const trait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trait::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void trait::Swap(trait* other) {
  if (other == this) return;
  InternalSwap(other);
}
void trait::InternalSwap(trait* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata trait::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// trait

// required int32 id = 1;
bool trait::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void trait::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void trait::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void trait::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 trait::id() const {
  // @@protoc_insertion_point(field_get:gogo.sr.trait.id)
  return id_;
}
void trait::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.trait.id)
}

// required bytes data = 2;
bool trait::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void trait::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void trait::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void trait::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& trait::data() const {
  // @@protoc_insertion_point(field_get:gogo.sr.trait.data)
  return data_.GetNoArena();
}
void trait::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.trait.data)
}
#if LANG_CXX11
void trait::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.trait.data)
}
#endif
void trait::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.trait.data)
}
void trait::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.trait.data)
}
::std::string* trait::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:gogo.sr.trait.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trait::release_data() {
  // @@protoc_insertion_point(field_release:gogo.sr.trait.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trait::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.trait.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int wnf_url::kUrlFieldNumber;
const int wnf_url::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

wnf_url::wnf_url()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.wnf_url)
}
wnf_url::wnf_url(const wnf_url& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_category()) {
    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  // @@protoc_insertion_point(copy_constructor:gogo.sr.wnf_url)
}

void wnf_url::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

wnf_url::~wnf_url() {
  // @@protoc_insertion_point(destructor:gogo.sr.wnf_url)
  SharedDtor();
}

void wnf_url::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void wnf_url::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wnf_url::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const wnf_url& wnf_url::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

wnf_url* wnf_url::New(::google::protobuf::Arena* arena) const {
  wnf_url* n = new wnf_url;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void wnf_url::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.wnf_url)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!category_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*category_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool wnf_url::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.wnf_url)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.wnf_url.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string category = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category().data(), static_cast<int>(this->category().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.wnf_url.category");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.wnf_url)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.wnf_url)
  return false;
#undef DO_
}

void wnf_url::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.wnf_url)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.wnf_url.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required string category = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.wnf_url.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->category(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.wnf_url)
}

::google::protobuf::uint8* wnf_url::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.wnf_url)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.wnf_url.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required string category = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.wnf_url.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->category(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.wnf_url)
  return target;
}

size_t wnf_url::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.sr.wnf_url)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_category()) {
    // required string category = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->category());
  }

  return total_size;
}
size_t wnf_url::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.wnf_url)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required string category = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->category());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wnf_url::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.wnf_url)
  GOOGLE_DCHECK_NE(&from, this);
  const wnf_url* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const wnf_url>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.wnf_url)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.wnf_url)
    MergeFrom(*source);
  }
}

void wnf_url::MergeFrom(const wnf_url& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.wnf_url)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_category();
      category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
    }
  }
}

void wnf_url::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.wnf_url)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wnf_url::CopyFrom(const wnf_url& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.wnf_url)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wnf_url::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void wnf_url::Swap(wnf_url* other) {
  if (other == this) return;
  InternalSwap(other);
}
void wnf_url::InternalSwap(wnf_url* other) {
  using std::swap;
  url_.Swap(&other->url_);
  category_.Swap(&other->category_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata wnf_url::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// wnf_url

// required string url = 1;
bool wnf_url::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void wnf_url::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void wnf_url::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void wnf_url::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& wnf_url::url() const {
  // @@protoc_insertion_point(field_get:gogo.sr.wnf_url.url)
  return url_.GetNoArena();
}
void wnf_url::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.wnf_url.url)
}
#if LANG_CXX11
void wnf_url::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.wnf_url.url)
}
#endif
void wnf_url::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.wnf_url.url)
}
void wnf_url::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.wnf_url.url)
}
::std::string* wnf_url::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.sr.wnf_url.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* wnf_url::release_url() {
  // @@protoc_insertion_point(field_release:gogo.sr.wnf_url.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void wnf_url::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.wnf_url.url)
}

// required string category = 2;
bool wnf_url::has_category() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void wnf_url::set_has_category() {
  _has_bits_[0] |= 0x00000002u;
}
void wnf_url::clear_has_category() {
  _has_bits_[0] &= ~0x00000002u;
}
void wnf_url::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
const ::std::string& wnf_url::category() const {
  // @@protoc_insertion_point(field_get:gogo.sr.wnf_url.category)
  return category_.GetNoArena();
}
void wnf_url::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.wnf_url.category)
}
#if LANG_CXX11
void wnf_url::set_category(::std::string&& value) {
  set_has_category();
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.wnf_url.category)
}
#endif
void wnf_url::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.wnf_url.category)
}
void wnf_url::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.wnf_url.category)
}
::std::string* wnf_url::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:gogo.sr.wnf_url.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* wnf_url::release_category() {
  // @@protoc_insertion_point(field_release:gogo.sr.wnf_url.category)
  clear_has_category();
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void wnf_url::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.wnf_url.category)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int wnf_text_zone::kZoneIdFieldNumber;
const int wnf_text_zone::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

wnf_text_zone::wnf_text_zone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.wnf_text_zone)
}
wnf_text_zone::wnf_text_zone(const wnf_text_zone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  zone_id_ = from.zone_id_;
  // @@protoc_insertion_point(copy_constructor:gogo.sr.wnf_text_zone)
}

void wnf_text_zone::SharedCtor() {
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_id_ = 0u;
}

wnf_text_zone::~wnf_text_zone() {
  // @@protoc_insertion_point(destructor:gogo.sr.wnf_text_zone)
  SharedDtor();
}

void wnf_text_zone::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void wnf_text_zone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wnf_text_zone::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const wnf_text_zone& wnf_text_zone::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

wnf_text_zone* wnf_text_zone::New(::google::protobuf::Arena* arena) const {
  wnf_text_zone* n = new wnf_text_zone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void wnf_text_zone::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.wnf_text_zone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_value()) {
    GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*value_.UnsafeRawStringPointer())->clear();
  }
  zone_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool wnf_text_zone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.wnf_text_zone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_zone_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.wnf_text_zone.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.wnf_text_zone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.wnf_text_zone)
  return false;
#undef DO_
}

void wnf_text_zone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.wnf_text_zone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 zone_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.wnf_text_zone.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.wnf_text_zone)
}

::google::protobuf::uint8* wnf_text_zone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.wnf_text_zone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 zone_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.wnf_text_zone.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.wnf_text_zone)
  return target;
}

size_t wnf_text_zone::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.sr.wnf_text_zone)
  size_t total_size = 0;

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  if (has_zone_id()) {
    // required uint32 zone_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zone_id());
  }

  return total_size;
}
size_t wnf_text_zone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.wnf_text_zone)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

    // required uint32 zone_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zone_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wnf_text_zone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.wnf_text_zone)
  GOOGLE_DCHECK_NE(&from, this);
  const wnf_text_zone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const wnf_text_zone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.wnf_text_zone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.wnf_text_zone)
    MergeFrom(*source);
  }
}

void wnf_text_zone::MergeFrom(const wnf_text_zone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.wnf_text_zone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      zone_id_ = from.zone_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void wnf_text_zone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.wnf_text_zone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wnf_text_zone::CopyFrom(const wnf_text_zone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.wnf_text_zone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wnf_text_zone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void wnf_text_zone::Swap(wnf_text_zone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void wnf_text_zone::InternalSwap(wnf_text_zone* other) {
  using std::swap;
  value_.Swap(&other->value_);
  swap(zone_id_, other->zone_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata wnf_text_zone::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// wnf_text_zone

// required uint32 zone_id = 1;
bool wnf_text_zone::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void wnf_text_zone::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
void wnf_text_zone::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void wnf_text_zone::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
::google::protobuf::uint32 wnf_text_zone::zone_id() const {
  // @@protoc_insertion_point(field_get:gogo.sr.wnf_text_zone.zone_id)
  return zone_id_;
}
void wnf_text_zone::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.wnf_text_zone.zone_id)
}

// required string value = 2;
bool wnf_text_zone::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void wnf_text_zone::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void wnf_text_zone::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void wnf_text_zone::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& wnf_text_zone::value() const {
  // @@protoc_insertion_point(field_get:gogo.sr.wnf_text_zone.value)
  return value_.GetNoArena();
}
void wnf_text_zone::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.wnf_text_zone.value)
}
#if LANG_CXX11
void wnf_text_zone::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.wnf_text_zone.value)
}
#endif
void wnf_text_zone::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.wnf_text_zone.value)
}
void wnf_text_zone::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.wnf_text_zone.value)
}
::std::string* wnf_text_zone::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:gogo.sr.wnf_text_zone.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* wnf_text_zone::release_value() {
  // @@protoc_insertion_point(field_release:gogo.sr.wnf_text_zone.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void wnf_text_zone::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.wnf_text_zone.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int wnf_dump_tz::kUrlFieldNumber;
const int wnf_dump_tz::kZonesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

wnf_dump_tz::wnf_dump_tz()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.wnf_dump_tz)
}
wnf_dump_tz::wnf_dump_tz(const wnf_dump_tz& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      zones_(from.zones_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:gogo.sr.wnf_dump_tz)
}

void wnf_dump_tz::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

wnf_dump_tz::~wnf_dump_tz() {
  // @@protoc_insertion_point(destructor:gogo.sr.wnf_dump_tz)
  SharedDtor();
}

void wnf_dump_tz::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void wnf_dump_tz::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wnf_dump_tz::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const wnf_dump_tz& wnf_dump_tz::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

wnf_dump_tz* wnf_dump_tz::New(::google::protobuf::Arena* arena) const {
  wnf_dump_tz* n = new wnf_dump_tz;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void wnf_dump_tz::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.wnf_dump_tz)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zones_.Clear();
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool wnf_dump_tz::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.wnf_dump_tz)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.wnf_dump_tz.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.sr.wnf_text_zone zones = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zones()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.wnf_dump_tz)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.wnf_dump_tz)
  return false;
#undef DO_
}

void wnf_dump_tz::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.wnf_dump_tz)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.wnf_dump_tz.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // repeated .gogo.sr.wnf_text_zone zones = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->zones_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->zones(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.wnf_dump_tz)
}

::google::protobuf::uint8* wnf_dump_tz::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.wnf_dump_tz)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.wnf_dump_tz.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // repeated .gogo.sr.wnf_text_zone zones = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->zones_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->zones(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.wnf_dump_tz)
  return target;
}

size_t wnf_dump_tz::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.wnf_dump_tz)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  // repeated .gogo.sr.wnf_text_zone zones = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->zones_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zones(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wnf_dump_tz::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.wnf_dump_tz)
  GOOGLE_DCHECK_NE(&from, this);
  const wnf_dump_tz* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const wnf_dump_tz>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.wnf_dump_tz)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.wnf_dump_tz)
    MergeFrom(*source);
  }
}

void wnf_dump_tz::MergeFrom(const wnf_dump_tz& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.wnf_dump_tz)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  zones_.MergeFrom(from.zones_);
  if (from.has_url()) {
    set_has_url();
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void wnf_dump_tz::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.wnf_dump_tz)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wnf_dump_tz::CopyFrom(const wnf_dump_tz& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.wnf_dump_tz)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wnf_dump_tz::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->zones())) return false;
  return true;
}

void wnf_dump_tz::Swap(wnf_dump_tz* other) {
  if (other == this) return;
  InternalSwap(other);
}
void wnf_dump_tz::InternalSwap(wnf_dump_tz* other) {
  using std::swap;
  zones_.InternalSwap(&other->zones_);
  url_.Swap(&other->url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata wnf_dump_tz::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// wnf_dump_tz

// required string url = 1;
bool wnf_dump_tz::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void wnf_dump_tz::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void wnf_dump_tz::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void wnf_dump_tz::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& wnf_dump_tz::url() const {
  // @@protoc_insertion_point(field_get:gogo.sr.wnf_dump_tz.url)
  return url_.GetNoArena();
}
void wnf_dump_tz::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.wnf_dump_tz.url)
}
#if LANG_CXX11
void wnf_dump_tz::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.wnf_dump_tz.url)
}
#endif
void wnf_dump_tz::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.wnf_dump_tz.url)
}
void wnf_dump_tz::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.wnf_dump_tz.url)
}
::std::string* wnf_dump_tz::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.sr.wnf_dump_tz.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* wnf_dump_tz::release_url() {
  // @@protoc_insertion_point(field_release:gogo.sr.wnf_dump_tz.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void wnf_dump_tz::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.wnf_dump_tz.url)
}

// repeated .gogo.sr.wnf_text_zone zones = 2;
int wnf_dump_tz::zones_size() const {
  return zones_.size();
}
void wnf_dump_tz::clear_zones() {
  zones_.Clear();
}
const ::gogo::sr::wnf_text_zone& wnf_dump_tz::zones(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.wnf_dump_tz.zones)
  return zones_.Get(index);
}
::gogo::sr::wnf_text_zone* wnf_dump_tz::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.wnf_dump_tz.zones)
  return zones_.Mutable(index);
}
::gogo::sr::wnf_text_zone* wnf_dump_tz::add_zones() {
  // @@protoc_insertion_point(field_add:gogo.sr.wnf_dump_tz.zones)
  return zones_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_text_zone >*
wnf_dump_tz::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.wnf_dump_tz.zones)
  return &zones_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_text_zone >&
wnf_dump_tz::zones() const {
  // @@protoc_insertion_point(field_list:gogo.sr.wnf_dump_tz.zones)
  return zones_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int multicast_stat::kSearcherRequestStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

multicast_stat::multicast_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.multicast_stat)
}
multicast_stat::multicast_stat(const multicast_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  searcher_request_status_ = from.searcher_request_status_;
  // @@protoc_insertion_point(copy_constructor:gogo.sr.multicast_stat)
}

void multicast_stat::SharedCtor() {
  _cached_size_ = 0;
  searcher_request_status_ = GOOGLE_LONGLONG(0);
}

multicast_stat::~multicast_stat() {
  // @@protoc_insertion_point(destructor:gogo.sr.multicast_stat)
  SharedDtor();
}

void multicast_stat::SharedDtor() {
}

void multicast_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* multicast_stat::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const multicast_stat& multicast_stat::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

multicast_stat* multicast_stat::New(::google::protobuf::Arena* arena) const {
  multicast_stat* n = new multicast_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void multicast_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.multicast_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searcher_request_status_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool multicast_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.multicast_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 searcher_request_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_searcher_request_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &searcher_request_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.multicast_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.multicast_stat)
  return false;
#undef DO_
}

void multicast_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.multicast_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 searcher_request_status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->searcher_request_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.multicast_stat)
}

::google::protobuf::uint8* multicast_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.multicast_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 searcher_request_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->searcher_request_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.multicast_stat)
  return target;
}

size_t multicast_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.multicast_stat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int64 searcher_request_status = 1;
  if (has_searcher_request_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->searcher_request_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void multicast_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.multicast_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const multicast_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const multicast_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.multicast_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.multicast_stat)
    MergeFrom(*source);
  }
}

void multicast_stat::MergeFrom(const multicast_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.multicast_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_searcher_request_status()) {
    set_searcher_request_status(from.searcher_request_status());
  }
}

void multicast_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.multicast_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void multicast_stat::CopyFrom(const multicast_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.multicast_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool multicast_stat::IsInitialized() const {
  return true;
}

void multicast_stat::Swap(multicast_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void multicast_stat::InternalSwap(multicast_stat* other) {
  using std::swap;
  swap(searcher_request_status_, other->searcher_request_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata multicast_stat::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// multicast_stat

// optional int64 searcher_request_status = 1;
bool multicast_stat::has_searcher_request_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void multicast_stat::set_has_searcher_request_status() {
  _has_bits_[0] |= 0x00000001u;
}
void multicast_stat::clear_has_searcher_request_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void multicast_stat::clear_searcher_request_status() {
  searcher_request_status_ = GOOGLE_LONGLONG(0);
  clear_has_searcher_request_status();
}
::google::protobuf::int64 multicast_stat::searcher_request_status() const {
  // @@protoc_insertion_point(field_get:gogo.sr.multicast_stat.searcher_request_status)
  return searcher_request_status_;
}
void multicast_stat::set_searcher_request_status(::google::protobuf::int64 value) {
  set_has_searcher_request_status();
  searcher_request_status_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.multicast_stat.searcher_request_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int qual_stat::kBackendsQualityFieldNumber;
const int qual_stat::kMulticastStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

qual_stat::qual_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.qual_stat)
}
qual_stat::qual_stat(const qual_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      backends_quality_(from.backends_quality_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_multicast_stat()) {
    multicast_stat_ = new ::gogo::sr::multicast_stat(*from.multicast_stat_);
  } else {
    multicast_stat_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gogo.sr.qual_stat)
}

void qual_stat::SharedCtor() {
  _cached_size_ = 0;
  multicast_stat_ = NULL;
}

qual_stat::~qual_stat() {
  // @@protoc_insertion_point(destructor:gogo.sr.qual_stat)
  SharedDtor();
}

void qual_stat::SharedDtor() {
  if (this != internal_default_instance()) delete multicast_stat_;
}

void qual_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qual_stat::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const qual_stat& qual_stat::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

qual_stat* qual_stat::New(::google::protobuf::Arena* arena) const {
  qual_stat* n = new qual_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void qual_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.qual_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  backends_quality_.Clear();
  if (has_multicast_stat()) {
    GOOGLE_DCHECK(multicast_stat_ != NULL);
    multicast_stat_->::gogo::sr::multicast_stat::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool qual_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.qual_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .backends_quality.pb.BackendsQuality backends_quality = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backends_quality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.sr.multicast_stat multicast_stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multicast_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.qual_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.qual_stat)
  return false;
#undef DO_
}

void qual_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.qual_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .backends_quality.pb.BackendsQuality backends_quality = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->backends_quality_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->backends_quality(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .gogo.sr.multicast_stat multicast_stat = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->multicast_stat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.qual_stat)
}

::google::protobuf::uint8* qual_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.qual_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .backends_quality.pb.BackendsQuality backends_quality = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->backends_quality_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->backends_quality(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .gogo.sr.multicast_stat multicast_stat = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->multicast_stat_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.qual_stat)
  return target;
}

size_t qual_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.qual_stat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .backends_quality.pb.BackendsQuality backends_quality = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->backends_quality_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backends_quality(static_cast<int>(i)));
    }
  }

  // optional .gogo.sr.multicast_stat multicast_stat = 2;
  if (has_multicast_stat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->multicast_stat_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qual_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.qual_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const qual_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const qual_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.qual_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.qual_stat)
    MergeFrom(*source);
  }
}

void qual_stat::MergeFrom(const qual_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.qual_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  backends_quality_.MergeFrom(from.backends_quality_);
  if (from.has_multicast_stat()) {
    mutable_multicast_stat()->::gogo::sr::multicast_stat::MergeFrom(from.multicast_stat());
  }
}

void qual_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.qual_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qual_stat::CopyFrom(const qual_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.qual_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qual_stat::IsInitialized() const {
  return true;
}

void qual_stat::Swap(qual_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void qual_stat::InternalSwap(qual_stat* other) {
  using std::swap;
  backends_quality_.InternalSwap(&other->backends_quality_);
  swap(multicast_stat_, other->multicast_stat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata qual_stat::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// qual_stat

// repeated .backends_quality.pb.BackendsQuality backends_quality = 1;
int qual_stat::backends_quality_size() const {
  return backends_quality_.size();
}
void qual_stat::clear_backends_quality() {
  backends_quality_.Clear();
}
const ::backends_quality::pb::BackendsQuality& qual_stat::backends_quality(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.qual_stat.backends_quality)
  return backends_quality_.Get(index);
}
::backends_quality::pb::BackendsQuality* qual_stat::mutable_backends_quality(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.qual_stat.backends_quality)
  return backends_quality_.Mutable(index);
}
::backends_quality::pb::BackendsQuality* qual_stat::add_backends_quality() {
  // @@protoc_insertion_point(field_add:gogo.sr.qual_stat.backends_quality)
  return backends_quality_.Add();
}
::google::protobuf::RepeatedPtrField< ::backends_quality::pb::BackendsQuality >*
qual_stat::mutable_backends_quality() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.qual_stat.backends_quality)
  return &backends_quality_;
}
const ::google::protobuf::RepeatedPtrField< ::backends_quality::pb::BackendsQuality >&
qual_stat::backends_quality() const {
  // @@protoc_insertion_point(field_list:gogo.sr.qual_stat.backends_quality)
  return backends_quality_;
}

// optional .gogo.sr.multicast_stat multicast_stat = 2;
bool qual_stat::has_multicast_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void qual_stat::set_has_multicast_stat() {
  _has_bits_[0] |= 0x00000001u;
}
void qual_stat::clear_has_multicast_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
void qual_stat::clear_multicast_stat() {
  if (multicast_stat_ != NULL) multicast_stat_->::gogo::sr::multicast_stat::Clear();
  clear_has_multicast_stat();
}
const ::gogo::sr::multicast_stat& qual_stat::multicast_stat() const {
  const ::gogo::sr::multicast_stat* p = multicast_stat_;
  // @@protoc_insertion_point(field_get:gogo.sr.qual_stat.multicast_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::multicast_stat*>(
      &::gogo::sr::_multicast_stat_default_instance_);
}
::gogo::sr::multicast_stat* qual_stat::mutable_multicast_stat() {
  set_has_multicast_stat();
  if (multicast_stat_ == NULL) {
    multicast_stat_ = new ::gogo::sr::multicast_stat;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.qual_stat.multicast_stat)
  return multicast_stat_;
}
::gogo::sr::multicast_stat* qual_stat::release_multicast_stat() {
  // @@protoc_insertion_point(field_release:gogo.sr.qual_stat.multicast_stat)
  clear_has_multicast_stat();
  ::gogo::sr::multicast_stat* temp = multicast_stat_;
  multicast_stat_ = NULL;
  return temp;
}
void qual_stat::set_allocated_multicast_stat(::gogo::sr::multicast_stat* multicast_stat) {
  delete multicast_stat_;
  multicast_stat_ = multicast_stat;
  if (multicast_stat) {
    set_has_multicast_stat();
  } else {
    clear_has_multicast_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.qual_stat.multicast_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int search_result::kErrFieldNumber;
const int search_result::kQueryFieldNumber;
const int search_result::kQueryStringFieldNumber;
const int search_result::kTimeFieldNumber;
const int search_result::kFrameFieldNumber;
const int search_result::kWordsFieldNumber;
const int search_result::kDocsFieldNumber;
const int search_result::kFingerprintFieldNumber;
const int search_result::kZoneDumpFieldNumber;
const int search_result::kStatisticsFieldNumber;
const int search_result::kSmThroughFieldNumber;
const int search_result::kPornoStatsFieldNumber;
const int search_result::kUseSnipCacheFieldNumber;
const int search_result::kStatisticFieldNumber;
const int search_result::kUtf8FieldNumber;
const int search_result::kMicrobaseIdFieldNumber;
const int search_result::kSearcherVersFieldNumber;
const int search_result::kTraitsFieldNumber;
const int search_result::kVersionHashFieldNumber;
const int search_result::kWnfUrlsFieldNumber;
const int search_result::kWnfTzFieldNumber;
const int search_result::kDomainGroupOooFieldNumber;
const int search_result::kQualStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

search_result::search_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_search_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.sr.search_result)
}
search_result::search_result(const search_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      words_(from.words_),
      docs_(from.docs_),
      zone_dump_(from.zone_dump_),
      porno_stats_(from.porno_stats_),
      microbase_id_(from.microbase_id_),
      traits_(from.traits_),
      wnf_urls_(from.wnf_urls_),
      wnf_tz_(from.wnf_tz_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  query_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_string()) {
    query_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_string_);
  }
  statistics_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_statistics()) {
    statistics_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statistics_);
  }
  sm_through_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sm_through()) {
    sm_through_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sm_through_);
  }
  searcher_vers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_searcher_vers()) {
    searcher_vers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searcher_vers_);
  }
  if (from.has_err()) {
    err_ = new ::gogo::sr::error(*from.err_);
  } else {
    err_ = NULL;
  }
  if (from.has_frame()) {
    frame_ = new ::gogo::sr::result_frame(*from.frame_);
  } else {
    frame_ = NULL;
  }
  if (from.has_statistic()) {
    statistic_ = new ::gogo::sr::statistic(*from.statistic_);
  } else {
    statistic_ = NULL;
  }
  if (from.has_qual_stat()) {
    qual_stat_ = new ::gogo::sr::qual_stat(*from.qual_stat_);
  } else {
    qual_stat_ = NULL;
  }
  ::memcpy(&fingerprint_, &from.fingerprint_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_hash_) -
    reinterpret_cast<char*>(&fingerprint_)) + sizeof(version_hash_));
  // @@protoc_insertion_point(copy_constructor:gogo.sr.search_result)
}

void search_result::SharedCtor() {
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statistics_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sm_through_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searcher_vers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&err_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_hash_) -
      reinterpret_cast<char*>(&err_)) + sizeof(version_hash_));
}

search_result::~search_result() {
  // @@protoc_insertion_point(destructor:gogo.sr.search_result)
  SharedDtor();
}

void search_result::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statistics_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sm_through_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searcher_vers_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete err_;
  if (this != internal_default_instance()) delete frame_;
  if (this != internal_default_instance()) delete statistic_;
  if (this != internal_default_instance()) delete qual_stat_;
}

void search_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* search_result::descriptor() {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const search_result& search_result::default_instance() {
  protobuf_search_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

search_result* search_result::New(::google::protobuf::Arena* arena) const {
  search_result* n = new search_result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void search_result::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.sr.search_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  docs_.Clear();
  zone_dump_.Clear();
  porno_stats_.Clear();
  microbase_id_.Clear();
  traits_.Clear();
  wnf_urls_.Clear();
  wnf_tz_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!query_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_string_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!statistics_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*statistics_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!sm_through_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sm_through_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!searcher_vers_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*searcher_vers_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(err_ != NULL);
      err_->::gogo::sr::error::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(frame_ != NULL);
      frame_->::gogo::sr::result_frame::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(statistic_ != NULL);
      statistic_->::gogo::sr::statistic::Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(qual_stat_ != NULL);
    qual_stat_->::gogo::sr::qual_stat::Clear();
  }
  if (cached_has_bits & 32256u) {
    ::memset(&fingerprint_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_hash_) -
        reinterpret_cast<char*>(&fingerprint_)) + sizeof(version_hash_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool search_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.sr.search_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gogo.sr.error err = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.search_result.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query_string = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_string().data(), static_cast<int>(this->query_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.search_result.query_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.sr.result_frame frame = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string words = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_words()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->words(this->words_size() - 1).data(),
            static_cast<int>(this->words(this->words_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.search_result.words");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.sr.doc_item docs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_docs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 fingerprint = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fingerprint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fingerprint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 zone_dump = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 72u, input, this->mutable_zone_dump())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_zone_dump())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string statistics = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statistics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->statistics().data(), static_cast<int>(this->statistics().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.search_result.statistics");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sm_through = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sm_through()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sm_through().data(), static_cast<int>(this->sm_through().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.search_result.sm_through");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 porno_stats = 12 [packed = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_porno_stats())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98u, input, this->mutable_porno_stats())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_snip_cache = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_use_snip_cache();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_snip_cache_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.sr.statistic statistic = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statistic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool utf8 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_utf8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &utf8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string microbase_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_microbase_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->microbase_id(this->microbase_id_size() - 1).data(),
            static_cast<int>(this->microbase_id(this->microbase_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.search_result.microbase_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string searcher_vers = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searcher_vers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searcher_vers().data(), static_cast<int>(this->searcher_vers().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.sr.search_result.searcher_vers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.sr.trait traits = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 version_hash = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_version_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &version_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.sr.wnf_url wnf_urls = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wnf_urls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.sr.wnf_dump_tz wnf_tz = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wnf_tz()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool domain_group_ooo = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_domain_group_ooo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &domain_group_ooo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.sr.qual_stat qual_stat = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qual_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.sr.search_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.sr.search_result)
  return false;
#undef DO_
}

void search_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.sr.search_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gogo.sr.error err = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->err_, output);
  }

  // optional string query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.search_result.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  // optional string query_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_string().data(), static_cast<int>(this->query_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.search_result.query_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->query_string(), output);
  }

  // optional float time = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->time(), output);
  }

  // optional .gogo.sr.result_frame frame = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->frame_, output);
  }

  // repeated string words = 6;
  for (int i = 0, n = this->words_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->words(i).data(), static_cast<int>(this->words(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.search_result.words");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->words(i), output);
  }

  // repeated .gogo.sr.doc_item docs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->docs(static_cast<int>(i)), output);
  }

  // optional uint64 fingerprint = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fingerprint(), output);
  }

  // repeated uint64 zone_dump = 9;
  for (int i = 0, n = this->zone_dump_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      9, this->zone_dump(i), output);
  }

  // optional string statistics = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statistics().data(), static_cast<int>(this->statistics().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.search_result.statistics");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->statistics(), output);
  }

  // optional string sm_through = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sm_through().data(), static_cast<int>(this->sm_through().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.search_result.sm_through");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sm_through(), output);
  }

  // repeated uint32 porno_stats = 12 [packed = true];
  if (this->porno_stats_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _porno_stats_cached_byte_size_));
  }
  for (int i = 0, n = this->porno_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->porno_stats(i), output);
  }

  // optional bool use_snip_cache = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->use_snip_cache(), output);
  }

  // optional .gogo.sr.statistic statistic = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->statistic_, output);
  }

  // optional bool utf8 = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->utf8(), output);
  }

  // repeated string microbase_id = 16;
  for (int i = 0, n = this->microbase_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->microbase_id(i).data(), static_cast<int>(this->microbase_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.search_result.microbase_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->microbase_id(i), output);
  }

  // optional string searcher_vers = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searcher_vers().data(), static_cast<int>(this->searcher_vers().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.search_result.searcher_vers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->searcher_vers(), output);
  }

  // repeated .gogo.sr.trait traits = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->traits(static_cast<int>(i)), output);
  }

  // optional fixed32 version_hash = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(19, this->version_hash(), output);
  }

  // repeated .gogo.sr.wnf_url wnf_urls = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wnf_urls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->wnf_urls(static_cast<int>(i)), output);
  }

  // repeated .gogo.sr.wnf_dump_tz wnf_tz = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wnf_tz_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->wnf_tz(static_cast<int>(i)), output);
  }

  // optional bool domain_group_ooo = 22;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->domain_group_ooo(), output);
  }

  // optional .gogo.sr.qual_stat qual_stat = 24;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->qual_stat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.sr.search_result)
}

::google::protobuf::uint8* search_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.sr.search_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gogo.sr.error err = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->err_, deterministic, target);
  }

  // optional string query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.search_result.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  // optional string query_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_string().data(), static_cast<int>(this->query_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.search_result.query_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->query_string(), target);
  }

  // optional float time = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->time(), target);
  }

  // optional .gogo.sr.result_frame frame = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->frame_, deterministic, target);
  }

  // repeated string words = 6;
  for (int i = 0, n = this->words_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->words(i).data(), static_cast<int>(this->words(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.search_result.words");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->words(i), target);
  }

  // repeated .gogo.sr.doc_item docs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->docs(static_cast<int>(i)), deterministic, target);
  }

  // optional uint64 fingerprint = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fingerprint(), target);
  }

  // repeated uint64 zone_dump = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(9, this->zone_dump_, target);

  // optional string statistics = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statistics().data(), static_cast<int>(this->statistics().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.search_result.statistics");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->statistics(), target);
  }

  // optional string sm_through = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sm_through().data(), static_cast<int>(this->sm_through().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.search_result.sm_through");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sm_through(), target);
  }

  // repeated uint32 porno_stats = 12 [packed = true];
  if (this->porno_stats_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _porno_stats_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->porno_stats_, target);
  }

  // optional bool use_snip_cache = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->use_snip_cache(), target);
  }

  // optional .gogo.sr.statistic statistic = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->statistic_, deterministic, target);
  }

  // optional bool utf8 = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->utf8(), target);
  }

  // repeated string microbase_id = 16;
  for (int i = 0, n = this->microbase_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->microbase_id(i).data(), static_cast<int>(this->microbase_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.search_result.microbase_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->microbase_id(i), target);
  }

  // optional string searcher_vers = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searcher_vers().data(), static_cast<int>(this->searcher_vers().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.sr.search_result.searcher_vers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->searcher_vers(), target);
  }

  // repeated .gogo.sr.trait traits = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->traits(static_cast<int>(i)), deterministic, target);
  }

  // optional fixed32 version_hash = 19;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(19, this->version_hash(), target);
  }

  // repeated .gogo.sr.wnf_url wnf_urls = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wnf_urls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->wnf_urls(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gogo.sr.wnf_dump_tz wnf_tz = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wnf_tz_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, this->wnf_tz(static_cast<int>(i)), deterministic, target);
  }

  // optional bool domain_group_ooo = 22;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->domain_group_ooo(), target);
  }

  // optional .gogo.sr.qual_stat qual_stat = 24;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->qual_stat_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.sr.search_result)
  return target;
}

size_t search_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.sr.search_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .gogo.sr.error err = 1;
  if (has_err()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->err_);
  }
  // repeated string words = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->words_size());
  for (int i = 0, n = this->words_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->words(i));
  }

  // repeated .gogo.sr.doc_item docs = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->docs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->docs(static_cast<int>(i)));
    }
  }

  // repeated uint64 zone_dump = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->zone_dump_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->zone_dump_size());
    total_size += data_size;
  }

  // repeated uint32 porno_stats = 12 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->porno_stats_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _porno_stats_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string microbase_id = 16;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->microbase_id_size());
  for (int i = 0, n = this->microbase_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->microbase_id(i));
  }

  // repeated .gogo.sr.trait traits = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->traits_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traits(static_cast<int>(i)));
    }
  }

  // repeated .gogo.sr.wnf_url wnf_urls = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->wnf_urls_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wnf_urls(static_cast<int>(i)));
    }
  }

  // repeated .gogo.sr.wnf_dump_tz wnf_tz = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->wnf_tz_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wnf_tz(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional string query_string = 3;
    if (has_query_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_string());
    }

    // optional string statistics = 10;
    if (has_statistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statistics());
    }

    // optional string sm_through = 11;
    if (has_sm_through()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sm_through());
    }

    // optional string searcher_vers = 17;
    if (has_searcher_vers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->searcher_vers());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional .gogo.sr.result_frame frame = 5;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->frame_);
    }

    // optional .gogo.sr.statistic statistic = 14;
    if (has_statistic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->statistic_);
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional .gogo.sr.qual_stat qual_stat = 24;
    if (has_qual_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->qual_stat_);
    }

    // optional uint64 fingerprint = 8;
    if (has_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fingerprint());
    }

    // optional float time = 4;
    if (has_time()) {
      total_size += 1 + 4;
    }

    // optional bool use_snip_cache = 13;
    if (has_use_snip_cache()) {
      total_size += 1 + 1;
    }

    // optional bool utf8 = 15;
    if (has_utf8()) {
      total_size += 1 + 1;
    }

    // optional bool domain_group_ooo = 22;
    if (has_domain_group_ooo()) {
      total_size += 2 + 1;
    }

    // optional fixed32 version_hash = 19;
    if (has_version_hash()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void search_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.sr.search_result)
  GOOGLE_DCHECK_NE(&from, this);
  const search_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const search_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.sr.search_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.sr.search_result)
    MergeFrom(*source);
  }
}

void search_result::MergeFrom(const search_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.sr.search_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
  docs_.MergeFrom(from.docs_);
  zone_dump_.MergeFrom(from.zone_dump_);
  porno_stats_.MergeFrom(from.porno_stats_);
  microbase_id_.MergeFrom(from.microbase_id_);
  traits_.MergeFrom(from.traits_);
  wnf_urls_.MergeFrom(from.wnf_urls_);
  wnf_tz_.MergeFrom(from.wnf_tz_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_query_string();
      query_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_string_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_statistics();
      statistics_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statistics_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_sm_through();
      sm_through_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sm_through_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_searcher_vers();
      searcher_vers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searcher_vers_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_err()->::gogo::sr::error::MergeFrom(from.err());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_frame()->::gogo::sr::result_frame::MergeFrom(from.frame());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_statistic()->::gogo::sr::statistic::MergeFrom(from.statistic());
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_qual_stat()->::gogo::sr::qual_stat::MergeFrom(from.qual_stat());
    }
    if (cached_has_bits & 0x00000200u) {
      fingerprint_ = from.fingerprint_;
    }
    if (cached_has_bits & 0x00000400u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000800u) {
      use_snip_cache_ = from.use_snip_cache_;
    }
    if (cached_has_bits & 0x00001000u) {
      utf8_ = from.utf8_;
    }
    if (cached_has_bits & 0x00002000u) {
      domain_group_ooo_ = from.domain_group_ooo_;
    }
    if (cached_has_bits & 0x00004000u) {
      version_hash_ = from.version_hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void search_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.sr.search_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void search_result::CopyFrom(const search_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.sr.search_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool search_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->docs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->traits())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->wnf_urls())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->wnf_tz())) return false;
  if (has_err()) {
    if (!this->err_->IsInitialized()) return false;
  }
  if (has_frame()) {
    if (!this->frame_->IsInitialized()) return false;
  }
  if (has_statistic()) {
    if (!this->statistic_->IsInitialized()) return false;
  }
  return true;
}

void search_result::Swap(search_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void search_result::InternalSwap(search_result* other) {
  using std::swap;
  words_.InternalSwap(&other->words_);
  docs_.InternalSwap(&other->docs_);
  zone_dump_.InternalSwap(&other->zone_dump_);
  porno_stats_.InternalSwap(&other->porno_stats_);
  microbase_id_.InternalSwap(&other->microbase_id_);
  traits_.InternalSwap(&other->traits_);
  wnf_urls_.InternalSwap(&other->wnf_urls_);
  wnf_tz_.InternalSwap(&other->wnf_tz_);
  query_.Swap(&other->query_);
  query_string_.Swap(&other->query_string_);
  statistics_.Swap(&other->statistics_);
  sm_through_.Swap(&other->sm_through_);
  searcher_vers_.Swap(&other->searcher_vers_);
  swap(err_, other->err_);
  swap(frame_, other->frame_);
  swap(statistic_, other->statistic_);
  swap(qual_stat_, other->qual_stat_);
  swap(fingerprint_, other->fingerprint_);
  swap(time_, other->time_);
  swap(use_snip_cache_, other->use_snip_cache_);
  swap(utf8_, other->utf8_);
  swap(domain_group_ooo_, other->domain_group_ooo_);
  swap(version_hash_, other->version_hash_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata search_result::GetMetadata() const {
  protobuf_search_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_search_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// search_result

// required .gogo.sr.error err = 1;
bool search_result::has_err() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void search_result::set_has_err() {
  _has_bits_[0] |= 0x00000020u;
}
void search_result::clear_has_err() {
  _has_bits_[0] &= ~0x00000020u;
}
void search_result::clear_err() {
  if (err_ != NULL) err_->::gogo::sr::error::Clear();
  clear_has_err();
}
const ::gogo::sr::error& search_result::err() const {
  const ::gogo::sr::error* p = err_;
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.err)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::error*>(
      &::gogo::sr::_error_default_instance_);
}
::gogo::sr::error* search_result::mutable_err() {
  set_has_err();
  if (err_ == NULL) {
    err_ = new ::gogo::sr::error;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.err)
  return err_;
}
::gogo::sr::error* search_result::release_err() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.err)
  clear_has_err();
  ::gogo::sr::error* temp = err_;
  err_ = NULL;
  return temp;
}
void search_result::set_allocated_err(::gogo::sr::error* err) {
  delete err_;
  err_ = err;
  if (err) {
    set_has_err();
  } else {
    clear_has_err();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.err)
}

// optional string query = 2;
bool search_result::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void search_result::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void search_result::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void search_result::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& search_result::query() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.query)
  return query_.GetNoArena();
}
void search_result::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.query)
}
#if LANG_CXX11
void search_result::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.search_result.query)
}
#endif
void search_result::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.search_result.query)
}
void search_result::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.search_result.query)
}
::std::string* search_result::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* search_result::release_query() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void search_result::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.query)
}

// optional string query_string = 3;
bool search_result::has_query_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void search_result::set_has_query_string() {
  _has_bits_[0] |= 0x00000002u;
}
void search_result::clear_has_query_string() {
  _has_bits_[0] &= ~0x00000002u;
}
void search_result::clear_query_string() {
  query_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_string();
}
const ::std::string& search_result::query_string() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.query_string)
  return query_string_.GetNoArena();
}
void search_result::set_query_string(const ::std::string& value) {
  set_has_query_string();
  query_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.query_string)
}
#if LANG_CXX11
void search_result::set_query_string(::std::string&& value) {
  set_has_query_string();
  query_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.search_result.query_string)
}
#endif
void search_result::set_query_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_string();
  query_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.search_result.query_string)
}
void search_result::set_query_string(const char* value, size_t size) {
  set_has_query_string();
  query_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.search_result.query_string)
}
::std::string* search_result::mutable_query_string() {
  set_has_query_string();
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.query_string)
  return query_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* search_result::release_query_string() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.query_string)
  clear_has_query_string();
  return query_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void search_result::set_allocated_query_string(::std::string* query_string) {
  if (query_string != NULL) {
    set_has_query_string();
  } else {
    clear_has_query_string();
  }
  query_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_string);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.query_string)
}

// optional float time = 4;
bool search_result::has_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void search_result::set_has_time() {
  _has_bits_[0] |= 0x00000400u;
}
void search_result::clear_has_time() {
  _has_bits_[0] &= ~0x00000400u;
}
void search_result::clear_time() {
  time_ = 0;
  clear_has_time();
}
float search_result::time() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.time)
  return time_;
}
void search_result::set_time(float value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.time)
}

// optional .gogo.sr.result_frame frame = 5;
bool search_result::has_frame() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void search_result::set_has_frame() {
  _has_bits_[0] |= 0x00000040u;
}
void search_result::clear_has_frame() {
  _has_bits_[0] &= ~0x00000040u;
}
void search_result::clear_frame() {
  if (frame_ != NULL) frame_->::gogo::sr::result_frame::Clear();
  clear_has_frame();
}
const ::gogo::sr::result_frame& search_result::frame() const {
  const ::gogo::sr::result_frame* p = frame_;
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.frame)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::result_frame*>(
      &::gogo::sr::_result_frame_default_instance_);
}
::gogo::sr::result_frame* search_result::mutable_frame() {
  set_has_frame();
  if (frame_ == NULL) {
    frame_ = new ::gogo::sr::result_frame;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.frame)
  return frame_;
}
::gogo::sr::result_frame* search_result::release_frame() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.frame)
  clear_has_frame();
  ::gogo::sr::result_frame* temp = frame_;
  frame_ = NULL;
  return temp;
}
void search_result::set_allocated_frame(::gogo::sr::result_frame* frame) {
  delete frame_;
  frame_ = frame;
  if (frame) {
    set_has_frame();
  } else {
    clear_has_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.frame)
}

// repeated string words = 6;
int search_result::words_size() const {
  return words_.size();
}
void search_result::clear_words() {
  words_.Clear();
}
const ::std::string& search_result::words(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.words)
  return words_.Get(index);
}
::std::string* search_result::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.words)
  return words_.Mutable(index);
}
void search_result::set_words(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.words)
  words_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void search_result::set_words(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.words)
  words_.Mutable(index)->assign(std::move(value));
}
#endif
void search_result::set_words(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  words_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.sr.search_result.words)
}
void search_result::set_words(int index, const char* value, size_t size) {
  words_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.search_result.words)
}
::std::string* search_result::add_words() {
  // @@protoc_insertion_point(field_add_mutable:gogo.sr.search_result.words)
  return words_.Add();
}
void search_result::add_words(const ::std::string& value) {
  words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.words)
}
#if LANG_CXX11
void search_result::add_words(::std::string&& value) {
  words_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.words)
}
#endif
void search_result::add_words(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.sr.search_result.words)
}
void search_result::add_words(const char* value, size_t size) {
  words_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.sr.search_result.words)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
search_result::words() const {
  // @@protoc_insertion_point(field_list:gogo.sr.search_result.words)
  return words_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
search_result::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.search_result.words)
  return &words_;
}

// repeated .gogo.sr.doc_item docs = 7;
int search_result::docs_size() const {
  return docs_.size();
}
void search_result::clear_docs() {
  docs_.Clear();
}
const ::gogo::sr::doc_item& search_result::docs(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.docs)
  return docs_.Get(index);
}
::gogo::sr::doc_item* search_result::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.docs)
  return docs_.Mutable(index);
}
::gogo::sr::doc_item* search_result::add_docs() {
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.docs)
  return docs_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::sr::doc_item >*
search_result::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.search_result.docs)
  return &docs_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::sr::doc_item >&
search_result::docs() const {
  // @@protoc_insertion_point(field_list:gogo.sr.search_result.docs)
  return docs_;
}

// optional uint64 fingerprint = 8;
bool search_result::has_fingerprint() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void search_result::set_has_fingerprint() {
  _has_bits_[0] |= 0x00000200u;
}
void search_result::clear_has_fingerprint() {
  _has_bits_[0] &= ~0x00000200u;
}
void search_result::clear_fingerprint() {
  fingerprint_ = GOOGLE_ULONGLONG(0);
  clear_has_fingerprint();
}
::google::protobuf::uint64 search_result::fingerprint() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.fingerprint)
  return fingerprint_;
}
void search_result::set_fingerprint(::google::protobuf::uint64 value) {
  set_has_fingerprint();
  fingerprint_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.fingerprint)
}

// repeated uint64 zone_dump = 9;
int search_result::zone_dump_size() const {
  return zone_dump_.size();
}
void search_result::clear_zone_dump() {
  zone_dump_.Clear();
}
::google::protobuf::uint64 search_result::zone_dump(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.zone_dump)
  return zone_dump_.Get(index);
}
void search_result::set_zone_dump(int index, ::google::protobuf::uint64 value) {
  zone_dump_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.zone_dump)
}
void search_result::add_zone_dump(::google::protobuf::uint64 value) {
  zone_dump_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.zone_dump)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
search_result::zone_dump() const {
  // @@protoc_insertion_point(field_list:gogo.sr.search_result.zone_dump)
  return zone_dump_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
search_result::mutable_zone_dump() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.search_result.zone_dump)
  return &zone_dump_;
}

// optional string statistics = 10;
bool search_result::has_statistics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void search_result::set_has_statistics() {
  _has_bits_[0] |= 0x00000004u;
}
void search_result::clear_has_statistics() {
  _has_bits_[0] &= ~0x00000004u;
}
void search_result::clear_statistics() {
  statistics_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_statistics();
}
const ::std::string& search_result::statistics() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.statistics)
  return statistics_.GetNoArena();
}
void search_result::set_statistics(const ::std::string& value) {
  set_has_statistics();
  statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.statistics)
}
#if LANG_CXX11
void search_result::set_statistics(::std::string&& value) {
  set_has_statistics();
  statistics_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.search_result.statistics)
}
#endif
void search_result::set_statistics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_statistics();
  statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.search_result.statistics)
}
void search_result::set_statistics(const char* value, size_t size) {
  set_has_statistics();
  statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.search_result.statistics)
}
::std::string* search_result::mutable_statistics() {
  set_has_statistics();
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.statistics)
  return statistics_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* search_result::release_statistics() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.statistics)
  clear_has_statistics();
  return statistics_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void search_result::set_allocated_statistics(::std::string* statistics) {
  if (statistics != NULL) {
    set_has_statistics();
  } else {
    clear_has_statistics();
  }
  statistics_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statistics);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.statistics)
}

// optional string sm_through = 11;
bool search_result::has_sm_through() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void search_result::set_has_sm_through() {
  _has_bits_[0] |= 0x00000008u;
}
void search_result::clear_has_sm_through() {
  _has_bits_[0] &= ~0x00000008u;
}
void search_result::clear_sm_through() {
  sm_through_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sm_through();
}
const ::std::string& search_result::sm_through() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.sm_through)
  return sm_through_.GetNoArena();
}
void search_result::set_sm_through(const ::std::string& value) {
  set_has_sm_through();
  sm_through_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.sm_through)
}
#if LANG_CXX11
void search_result::set_sm_through(::std::string&& value) {
  set_has_sm_through();
  sm_through_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.search_result.sm_through)
}
#endif
void search_result::set_sm_through(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sm_through();
  sm_through_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.search_result.sm_through)
}
void search_result::set_sm_through(const char* value, size_t size) {
  set_has_sm_through();
  sm_through_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.search_result.sm_through)
}
::std::string* search_result::mutable_sm_through() {
  set_has_sm_through();
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.sm_through)
  return sm_through_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* search_result::release_sm_through() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.sm_through)
  clear_has_sm_through();
  return sm_through_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void search_result::set_allocated_sm_through(::std::string* sm_through) {
  if (sm_through != NULL) {
    set_has_sm_through();
  } else {
    clear_has_sm_through();
  }
  sm_through_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sm_through);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.sm_through)
}

// repeated uint32 porno_stats = 12 [packed = true];
int search_result::porno_stats_size() const {
  return porno_stats_.size();
}
void search_result::clear_porno_stats() {
  porno_stats_.Clear();
}
::google::protobuf::uint32 search_result::porno_stats(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.porno_stats)
  return porno_stats_.Get(index);
}
void search_result::set_porno_stats(int index, ::google::protobuf::uint32 value) {
  porno_stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.porno_stats)
}
void search_result::add_porno_stats(::google::protobuf::uint32 value) {
  porno_stats_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.porno_stats)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
search_result::porno_stats() const {
  // @@protoc_insertion_point(field_list:gogo.sr.search_result.porno_stats)
  return porno_stats_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
search_result::mutable_porno_stats() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.search_result.porno_stats)
  return &porno_stats_;
}

// optional bool use_snip_cache = 13;
bool search_result::has_use_snip_cache() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void search_result::set_has_use_snip_cache() {
  _has_bits_[0] |= 0x00000800u;
}
void search_result::clear_has_use_snip_cache() {
  _has_bits_[0] &= ~0x00000800u;
}
void search_result::clear_use_snip_cache() {
  use_snip_cache_ = false;
  clear_has_use_snip_cache();
}
bool search_result::use_snip_cache() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.use_snip_cache)
  return use_snip_cache_;
}
void search_result::set_use_snip_cache(bool value) {
  set_has_use_snip_cache();
  use_snip_cache_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.use_snip_cache)
}

// optional .gogo.sr.statistic statistic = 14;
bool search_result::has_statistic() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void search_result::set_has_statistic() {
  _has_bits_[0] |= 0x00000080u;
}
void search_result::clear_has_statistic() {
  _has_bits_[0] &= ~0x00000080u;
}
void search_result::clear_statistic() {
  if (statistic_ != NULL) statistic_->::gogo::sr::statistic::Clear();
  clear_has_statistic();
}
const ::gogo::sr::statistic& search_result::statistic() const {
  const ::gogo::sr::statistic* p = statistic_;
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.statistic)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::statistic*>(
      &::gogo::sr::_statistic_default_instance_);
}
::gogo::sr::statistic* search_result::mutable_statistic() {
  set_has_statistic();
  if (statistic_ == NULL) {
    statistic_ = new ::gogo::sr::statistic;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.statistic)
  return statistic_;
}
::gogo::sr::statistic* search_result::release_statistic() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.statistic)
  clear_has_statistic();
  ::gogo::sr::statistic* temp = statistic_;
  statistic_ = NULL;
  return temp;
}
void search_result::set_allocated_statistic(::gogo::sr::statistic* statistic) {
  delete statistic_;
  statistic_ = statistic;
  if (statistic) {
    set_has_statistic();
  } else {
    clear_has_statistic();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.statistic)
}

// optional bool utf8 = 15;
bool search_result::has_utf8() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void search_result::set_has_utf8() {
  _has_bits_[0] |= 0x00001000u;
}
void search_result::clear_has_utf8() {
  _has_bits_[0] &= ~0x00001000u;
}
void search_result::clear_utf8() {
  utf8_ = false;
  clear_has_utf8();
}
bool search_result::utf8() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.utf8)
  return utf8_;
}
void search_result::set_utf8(bool value) {
  set_has_utf8();
  utf8_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.utf8)
}

// repeated string microbase_id = 16;
int search_result::microbase_id_size() const {
  return microbase_id_.size();
}
void search_result::clear_microbase_id() {
  microbase_id_.Clear();
}
const ::std::string& search_result::microbase_id(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.microbase_id)
  return microbase_id_.Get(index);
}
::std::string* search_result::mutable_microbase_id(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.microbase_id)
  return microbase_id_.Mutable(index);
}
void search_result::set_microbase_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.microbase_id)
  microbase_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void search_result::set_microbase_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.microbase_id)
  microbase_id_.Mutable(index)->assign(std::move(value));
}
#endif
void search_result::set_microbase_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  microbase_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.sr.search_result.microbase_id)
}
void search_result::set_microbase_id(int index, const char* value, size_t size) {
  microbase_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.search_result.microbase_id)
}
::std::string* search_result::add_microbase_id() {
  // @@protoc_insertion_point(field_add_mutable:gogo.sr.search_result.microbase_id)
  return microbase_id_.Add();
}
void search_result::add_microbase_id(const ::std::string& value) {
  microbase_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.microbase_id)
}
#if LANG_CXX11
void search_result::add_microbase_id(::std::string&& value) {
  microbase_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.microbase_id)
}
#endif
void search_result::add_microbase_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  microbase_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.sr.search_result.microbase_id)
}
void search_result::add_microbase_id(const char* value, size_t size) {
  microbase_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.sr.search_result.microbase_id)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
search_result::microbase_id() const {
  // @@protoc_insertion_point(field_list:gogo.sr.search_result.microbase_id)
  return microbase_id_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
search_result::mutable_microbase_id() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.search_result.microbase_id)
  return &microbase_id_;
}

// optional string searcher_vers = 17;
bool search_result::has_searcher_vers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void search_result::set_has_searcher_vers() {
  _has_bits_[0] |= 0x00000010u;
}
void search_result::clear_has_searcher_vers() {
  _has_bits_[0] &= ~0x00000010u;
}
void search_result::clear_searcher_vers() {
  searcher_vers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_searcher_vers();
}
const ::std::string& search_result::searcher_vers() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.searcher_vers)
  return searcher_vers_.GetNoArena();
}
void search_result::set_searcher_vers(const ::std::string& value) {
  set_has_searcher_vers();
  searcher_vers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.searcher_vers)
}
#if LANG_CXX11
void search_result::set_searcher_vers(::std::string&& value) {
  set_has_searcher_vers();
  searcher_vers_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.search_result.searcher_vers)
}
#endif
void search_result::set_searcher_vers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_searcher_vers();
  searcher_vers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.search_result.searcher_vers)
}
void search_result::set_searcher_vers(const char* value, size_t size) {
  set_has_searcher_vers();
  searcher_vers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.search_result.searcher_vers)
}
::std::string* search_result::mutable_searcher_vers() {
  set_has_searcher_vers();
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.searcher_vers)
  return searcher_vers_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* search_result::release_searcher_vers() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.searcher_vers)
  clear_has_searcher_vers();
  return searcher_vers_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void search_result::set_allocated_searcher_vers(::std::string* searcher_vers) {
  if (searcher_vers != NULL) {
    set_has_searcher_vers();
  } else {
    clear_has_searcher_vers();
  }
  searcher_vers_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), searcher_vers);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.searcher_vers)
}

// repeated .gogo.sr.trait traits = 18;
int search_result::traits_size() const {
  return traits_.size();
}
void search_result::clear_traits() {
  traits_.Clear();
}
const ::gogo::sr::trait& search_result::traits(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.traits)
  return traits_.Get(index);
}
::gogo::sr::trait* search_result::mutable_traits(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.traits)
  return traits_.Mutable(index);
}
::gogo::sr::trait* search_result::add_traits() {
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.traits)
  return traits_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::sr::trait >*
search_result::mutable_traits() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.search_result.traits)
  return &traits_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::sr::trait >&
search_result::traits() const {
  // @@protoc_insertion_point(field_list:gogo.sr.search_result.traits)
  return traits_;
}

// optional fixed32 version_hash = 19;
bool search_result::has_version_hash() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void search_result::set_has_version_hash() {
  _has_bits_[0] |= 0x00004000u;
}
void search_result::clear_has_version_hash() {
  _has_bits_[0] &= ~0x00004000u;
}
void search_result::clear_version_hash() {
  version_hash_ = 0u;
  clear_has_version_hash();
}
::google::protobuf::uint32 search_result::version_hash() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.version_hash)
  return version_hash_;
}
void search_result::set_version_hash(::google::protobuf::uint32 value) {
  set_has_version_hash();
  version_hash_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.version_hash)
}

// repeated .gogo.sr.wnf_url wnf_urls = 20;
int search_result::wnf_urls_size() const {
  return wnf_urls_.size();
}
void search_result::clear_wnf_urls() {
  wnf_urls_.Clear();
}
const ::gogo::sr::wnf_url& search_result::wnf_urls(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.wnf_urls)
  return wnf_urls_.Get(index);
}
::gogo::sr::wnf_url* search_result::mutable_wnf_urls(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.wnf_urls)
  return wnf_urls_.Mutable(index);
}
::gogo::sr::wnf_url* search_result::add_wnf_urls() {
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.wnf_urls)
  return wnf_urls_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_url >*
search_result::mutable_wnf_urls() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.search_result.wnf_urls)
  return &wnf_urls_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_url >&
search_result::wnf_urls() const {
  // @@protoc_insertion_point(field_list:gogo.sr.search_result.wnf_urls)
  return wnf_urls_;
}

// repeated .gogo.sr.wnf_dump_tz wnf_tz = 21;
int search_result::wnf_tz_size() const {
  return wnf_tz_.size();
}
void search_result::clear_wnf_tz() {
  wnf_tz_.Clear();
}
const ::gogo::sr::wnf_dump_tz& search_result::wnf_tz(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.wnf_tz)
  return wnf_tz_.Get(index);
}
::gogo::sr::wnf_dump_tz* search_result::mutable_wnf_tz(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.wnf_tz)
  return wnf_tz_.Mutable(index);
}
::gogo::sr::wnf_dump_tz* search_result::add_wnf_tz() {
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.wnf_tz)
  return wnf_tz_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_dump_tz >*
search_result::mutable_wnf_tz() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.search_result.wnf_tz)
  return &wnf_tz_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_dump_tz >&
search_result::wnf_tz() const {
  // @@protoc_insertion_point(field_list:gogo.sr.search_result.wnf_tz)
  return wnf_tz_;
}

// optional bool domain_group_ooo = 22;
bool search_result::has_domain_group_ooo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void search_result::set_has_domain_group_ooo() {
  _has_bits_[0] |= 0x00002000u;
}
void search_result::clear_has_domain_group_ooo() {
  _has_bits_[0] &= ~0x00002000u;
}
void search_result::clear_domain_group_ooo() {
  domain_group_ooo_ = false;
  clear_has_domain_group_ooo();
}
bool search_result::domain_group_ooo() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.domain_group_ooo)
  return domain_group_ooo_;
}
void search_result::set_domain_group_ooo(bool value) {
  set_has_domain_group_ooo();
  domain_group_ooo_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.domain_group_ooo)
}

// optional .gogo.sr.qual_stat qual_stat = 24;
bool search_result::has_qual_stat() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void search_result::set_has_qual_stat() {
  _has_bits_[0] |= 0x00000100u;
}
void search_result::clear_has_qual_stat() {
  _has_bits_[0] &= ~0x00000100u;
}
void search_result::clear_qual_stat() {
  if (qual_stat_ != NULL) qual_stat_->::gogo::sr::qual_stat::Clear();
  clear_has_qual_stat();
}
const ::gogo::sr::qual_stat& search_result::qual_stat() const {
  const ::gogo::sr::qual_stat* p = qual_stat_;
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.qual_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::qual_stat*>(
      &::gogo::sr::_qual_stat_default_instance_);
}
::gogo::sr::qual_stat* search_result::mutable_qual_stat() {
  set_has_qual_stat();
  if (qual_stat_ == NULL) {
    qual_stat_ = new ::gogo::sr::qual_stat;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.qual_stat)
  return qual_stat_;
}
::gogo::sr::qual_stat* search_result::release_qual_stat() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.qual_stat)
  clear_has_qual_stat();
  ::gogo::sr::qual_stat* temp = qual_stat_;
  qual_stat_ = NULL;
  return temp;
}
void search_result::set_allocated_qual_stat(::gogo::sr::qual_stat* qual_stat) {
  delete qual_stat_;
  qual_stat_ = qual_stat;
  if (qual_stat) {
    set_has_qual_stat();
  } else {
    clear_has_qual_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.qual_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sr
}  // namespace gogo

// @@protoc_insertion_point(global_scope)
