// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sekitei.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sekitei.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace sekitei {
class SekiteiDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Sekitei>
     _instance;
} _Sekitei_default_instance_;
class Sekitei_mDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Sekitei_m>
     _instance;
} _Sekitei_m_default_instance_;
class Sekitei_rDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Sekitei_r>
     _instance;
} _Sekitei_r_default_instance_;
class Sekitei_lDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Sekitei_l>
     _instance;
} _Sekitei_l_default_instance_;
class Sekitei_sDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Sekitei_s>
     _instance;
} _Sekitei_s_default_instance_;
class Sekitei_iDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Sekitei_i>
     _instance;
} _Sekitei_i_default_instance_;
class SegmentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Segment>
     _instance;
} _Segment_default_instance_;
class Segment_mDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Segment_m>
     _instance;
} _Segment_m_default_instance_;
class Segment_r_ImageDiscoverySegmentInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Segment_r_ImageDiscoverySegmentInfo>
     _instance;
} _Segment_r_ImageDiscoverySegmentInfo_default_instance_;
class Segment_rDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Segment_r>
     _instance;
} _Segment_r_default_instance_;
class Segment_lDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Segment_l>
     _instance;
} _Segment_l_default_instance_;
class Segment_s_ImageDiscoverySegmentStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Segment_s_ImageDiscoverySegmentStat>
     _instance;
} _Segment_s_ImageDiscoverySegmentStat_default_instance_;
class Segment_sDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Segment_s>
     _instance;
} _Segment_s_default_instance_;
class Segment_iDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Segment_i>
     _instance;
} _Segment_i_default_instance_;
class SelectedFeatureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SelectedFeature>
     _instance;
} _SelectedFeature_default_instance_;
class StatusInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StatusInfo>
     _instance;
} _StatusInfo_default_instance_;
class FilterStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FilterStats>
     _instance;
} _FilterStats_default_instance_;

namespace protobuf_sekitei_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei, total_url_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei, segments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei, features_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_m, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_m, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_m, total_url_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_m, segments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_m, used_urls_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_r, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_r, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_r, segments_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_l, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_l, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_l, segments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_l, features_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_s, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_s, segments_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_i, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_i, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_i, segments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sekitei_i, totalmarkerscount_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, segment_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, part_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, specialsegment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, wp_),
  1,
  2,
  0,
  ~0u,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_m, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_m, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_m, segment_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_m, part_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_m, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_m, wp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_m, statuses_),
  1,
  2,
  0,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r_ImageDiscoverySegmentInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r_ImageDiscoverySegmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r_ImageDiscoverySegmentInfo, usualimagescount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r_ImageDiscoverySegmentInfo, markerimagescount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r_ImageDiscoverySegmentInfo, quota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r_ImageDiscoverySegmentInfo, trashquota_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, segment_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, qlinks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, qlinks_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, discovery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, discovery_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, specialsegment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, custra_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, custrahave_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, languagearray_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, spamurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, pornurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, crawledurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, failureurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, deadurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, deadurlsmints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_r, imagediscoverysegmentinfo_),
  4,
  3,
  5,
  6,
  7,
  0,
  8,
  17,
  9,
  10,
  1,
  11,
  12,
  13,
  14,
  15,
  16,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_l, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_l, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_l, segment_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_l, samples_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s_ImageDiscoverySegmentStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s_ImageDiscoverySegmentStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s_ImageDiscoverySegmentStat, totalquota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s_ImageDiscoverySegmentStat, markerquota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s_ImageDiscoverySegmentStat, usualquota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s_ImageDiscoverySegmentStat, quotaused_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s_ImageDiscoverySegmentStat, needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s_ImageDiscoverySegmentStat, skipped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s_ImageDiscoverySegmentStat, trashquota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s_ImageDiscoverySegmentStat, trashquotaused_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, segment_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, max_quota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, fair_quota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, real_quota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, urls_rejected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, urls_skipped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, trash_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, current_batched_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, backup_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, deleted_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, imagediscoverystat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, extra_stones_bonus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, extra_stones_bonus_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, splitted_scheduling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, super_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, qlinks_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, uruq_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, liru_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, top_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, vk_away_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, vk_shares_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_s, weak_qlinks_urls_),
  8,
  2,
  3,
  4,
  5,
  6,
  7,
  10,
  11,
  12,
  13,
  1,
  0,
  9,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_i, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_i, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_i, segment_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment_i, markerscountratio_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedFeature, idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedFeature, quote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedFeature, key_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, num_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterStats, passed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterStats, robots_disabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterStats, blacklist_disabled_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(Sekitei)},
  { 11, 19, sizeof(Sekitei_m)},
  { 22, 28, sizeof(Sekitei_r)},
  { 29, 36, sizeof(Sekitei_l)},
  { 38, 44, sizeof(Sekitei_s)},
  { 45, 52, sizeof(Sekitei_i)},
  { 54, 65, sizeof(Segment)},
  { 71, 81, sizeof(Segment_m)},
  { 86, 95, sizeof(Segment_r_ImageDiscoverySegmentInfo)},
  { 99, 122, sizeof(Segment_r)},
  { 140, 147, sizeof(Segment_l)},
  { 149, 162, sizeof(Segment_s_ImageDiscoverySegmentStat)},
  { 170, 199, sizeof(Segment_s)},
  { 223, 230, sizeof(Segment_i)},
  { 232, 240, sizeof(SelectedFeature)},
  { 243, 250, sizeof(StatusInfo)},
  { 252, 260, sizeof(FilterStats)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sekitei_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sekitei_m_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sekitei_r_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sekitei_l_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sekitei_s_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sekitei_i_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Segment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Segment_m_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Segment_r_ImageDiscoverySegmentInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Segment_r_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Segment_l_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Segment_s_ImageDiscoverySegmentStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Segment_s_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Segment_i_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectedFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StatusInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FilterStats_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sekitei.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_doc_5fparser_2eproto::InitDefaults();
  _Sekitei_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Sekitei_default_instance_);_Sekitei_m_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Sekitei_m_default_instance_);_Sekitei_r_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Sekitei_r_default_instance_);_Sekitei_l_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Sekitei_l_default_instance_);_Sekitei_s_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Sekitei_s_default_instance_);_Sekitei_i_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Sekitei_i_default_instance_);_Segment_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Segment_default_instance_);_Segment_m_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Segment_m_default_instance_);_Segment_r_ImageDiscoverySegmentInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Segment_r_ImageDiscoverySegmentInfo_default_instance_);_Segment_r_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Segment_r_default_instance_);_Segment_l_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Segment_l_default_instance_);_Segment_s_ImageDiscoverySegmentStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Segment_s_ImageDiscoverySegmentStat_default_instance_);_Segment_s_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Segment_s_default_instance_);_Segment_i_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Segment_i_default_instance_);_SelectedFeature_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SelectedFeature_default_instance_);_StatusInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StatusInfo_default_instance_);_FilterStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FilterStats_default_instance_);_Segment_r_default_instance_._instance.get_mutable()->stats_ = const_cast< ::ru::mail::go::webbase::sekitei::FilterStats*>(
      ::ru::mail::go::webbase::sekitei::FilterStats::internal_default_instance());
  _Segment_r_default_instance_._instance.get_mutable()->languagearray_ = const_cast< ::ru::mail::go::webbase::blobs::SiteLanguageArray*>(
      ::ru::mail::go::webbase::blobs::SiteLanguageArray::internal_default_instance());
  _Segment_r_default_instance_._instance.get_mutable()->imagediscoverysegmentinfo_ = const_cast< ::ru::mail::go::webbase::sekitei::Segment_r_ImageDiscoverySegmentInfo*>(
      ::ru::mail::go::webbase::sekitei::Segment_r_ImageDiscoverySegmentInfo::internal_default_instance());
  _Segment_s_default_instance_._instance.get_mutable()->imagediscoverystat_ = const_cast< ::ru::mail::go::webbase::sekitei::Segment_s_ImageDiscoverySegmentStat*>(
      ::ru::mail::go::webbase::sekitei::Segment_s_ImageDiscoverySegmentStat::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rsekitei.proto\022\032ru.mail.go.webbase.seki"
      "tei\032\020doc_parser.proto\"\226\001\n\007Sekitei\022\025\n\rtot"
      "al_url_num\030\001 \002(\003\0225\n\010segments\030\002 \003(\0132#.ru."
      "mail.go.webbase.sekitei.Segment\022=\n\010featu"
      "res\030\003 \003(\0132+.ru.mail.go.webbase.sekitei.S"
      "electedFeature\"n\n\tSekitei_m\022\025\n\rtotal_url"
      "_num\030\001 \002(\003\0227\n\010segments\030\002 \003(\0132%.ru.mail.g"
      "o.webbase.sekitei.Segment_m\022\021\n\tused_urls"
      "\030\003 \002(\003\"D\n\tSekitei_r\0227\n\010segments\030\001 \003(\0132%."
      "ru.mail.go.webbase.sekitei.Segment_r\"\203\001\n"
      "\tSekitei_l\0227\n\010segments\030\001 \003(\0132%.ru.mail.g"
      "o.webbase.sekitei.Segment_l\022=\n\010features\030"
      "\002 \003(\0132+.ru.mail.go.webbase.sekitei.Selec"
      "tedFeature\"D\n\tSekitei_s\0227\n\010segments\030\001 \003("
      "\0132%.ru.mail.go.webbase.sekitei.Segment_s"
      "\"_\n\tSekitei_i\0227\n\010segments\030\001 \003(\0132%.ru.mai"
      "l.go.webbase.sekitei.Segment_i\022\031\n\021totalM"
      "arkersCount\030\002 \001(\005\"\200\001\n\007Segment\022\023\n\013segment"
      "_num\030\001 \002(\005\022\014\n\004part\030\002 \002(\005\022\023\n\013description\030"
      "\003 \002(\t\022\017\n\007samples\030\004 \003(\t\022\035\n\016specialSegment"
      "\030\005 \001(\010:\005false\022\r\n\002wp\030\006 \001(\001:\0010\"\214\001\n\tSegment"
      "_m\022\023\n\013segment_num\030\001 \002(\005\022\014\n\004part\030\002 \002(\005\022\023\n"
      "\013description\030\003 \002(\t\022\r\n\002wp\030\004 \001(\001:\0010\0228\n\010sta"
      "tuses\030\005 \003(\0132&.ru.mail.go.webbase.sekitei"
      ".StatusInfo\"\363\006\n\tSegment_r\022\023\n\013segment_num"
      "\030\001 \002(\005\022\021\n\006qlinks\030\002 \001(\001:\0010\022\027\n\014qlinks_coun"
      "t\030\003 \001(\005:\0010\022\024\n\tdiscovery\030\004 \001(\001:\0010\022\032\n\017disc"
      "overy_count\030\005 \001(\005:\0010\0226\n\005stats\030\006 \001(\0132\'.ru"
      ".mail.go.webbase.sekitei.FilterStats\022\035\n\016"
      "specialSegment\030\007 \001(\010:\005false\022L\n\010language\030"
      "\010 \001(\0162,.ru.mail.go.webbase.sekitei.Segme"
      "nt_r.d_lang:\014lang_unknown\022\027\n\014custra_coun"
      "t\030\t \001(\003:\0010\022\033\n\020custrahave_count\030\n \001(\003:\0010\022"
      "B\n\rlanguageArray\030\013 \001(\0132+.ru.mail.go.webb"
      "ase.blobs.SiteLanguageArray\022\020\n\010spamUrls\030"
      "\014 \001(\003\022\020\n\010pornUrls\030\r \001(\003\022\023\n\013crawledUrls\030\016"
      " \001(\003\022\023\n\013failureUrls\030\017 \001(\003\022\020\n\010deadUrls\030\020 "
      "\001(\003\022\025\n\rdeadUrlsMinTs\030\021 \001(\003\022b\n\031imageDisco"
      "verySegmentInfo\030\022 \001(\0132\?.ru.mail.go.webba"
      "se.sekitei.Segment_r.ImageDiscoverySegme"
      "ntInfo\032\177\n\031ImageDiscoverySegmentInfo\022\033\n\020u"
      "sualImagesCount\030\001 \001(\005:\0010\022\034\n\021markerImages"
      "Count\030\002 \001(\005:\0010\022\020\n\005quota\030\003 \001(\005:\0010\022\025\n\ntras"
      "hQuota\030\004 \001(\005:\0010\"x\n\006d_lang\022\016\n\nlang_empty\020"
      "\000\022\020\n\014lang_unknown\020\001\022\013\n\007lang_ru\020\002\022\013\n\007lang"
      "_uk\020\003\022\013\n\007lang_kz\020\004\022\013\n\007lang_bg\020\005\022\013\n\007lang_"
      "be\020\006\022\013\n\007lang_en\020\007\"1\n\tSegment_l\022\023\n\013segmen"
      "t_num\030\001 \002(\005\022\017\n\007samples\030\002 \003(\t\"\324\006\n\tSegment"
      "_s\022\023\n\013segment_num\030\001 \002(\005\022\024\n\tmax_quota\030\002 \001"
      "(\003:\0010\022\025\n\nfair_quota\030\003 \001(\003:\0010\022\025\n\nreal_quo"
      "ta\030\004 \001(\003:\0010\022\017\n\004urls\030\005 \001(\003:\0010\022\030\n\rurls_rej"
      "ected\030\006 \001(\003:\0010\022\027\n\014urls_skipped\030\007 \001(\003:\0010\022"
      "\025\n\ntrash_urls\030\010 \001(\003:\0010\022\032\n\017current_batche"
      "d\030\t \001(\003:\0010\022\026\n\013backup_urls\030\n \001(\003:\0010\022\027\n\014de"
      "leted_urls\030\013 \001(\003:\0010\022[\n\022imageDiscoverySta"
      "t\030\014 \001(\0132\?.ru.mail.go.webbase.sekitei.Seg"
      "ment_s.ImageDiscoverySegmentStat\022\023\n\013desc"
      "ription\030\r \001(\t\022\032\n\022extra_stones_bonus\030\016 \001("
      "\005\022\037\n\027extra_stones_bonus_used\030\017 \001(\005\022\033\n\023sp"
      "litted_scheduling\030\020 \001(\010\022\022\n\nsuper_urls\030\022 "
      "\001(\003\022\023\n\013qlinks_urls\030\023 \001(\003\022\021\n\turuq_urls\030\024 "
      "\001(\003\022\021\n\tliru_urls\030\025 \001(\003\022\020\n\010top_urls\030\026 \001(\003"
      "\022\024\n\014vk_away_urls\030\027 \001(\003\022\026\n\016vk_shares_urls"
      "\030\030 \001(\003\022\030\n\020weak_qlinks_urls\030\031 \001(\003\032\320\001\n\031Ima"
      "geDiscoverySegmentStat\022\025\n\ntotalQuota\030\001 \001"
      "(\005:\0010\022\026\n\013markerQuota\030\002 \001(\005:\0010\022\025\n\nusualQu"
      "ota\030\003 \001(\005:\0010\022\024\n\tquotaUsed\030\004 \001(\005:\0010\022\021\n\006ne"
      "eded\030\005 \001(\005:\0010\022\022\n\007skipped\030\006 \001(\005:\0010\022\025\n\ntra"
      "shQuota\030\007 \001(\005:\0010\022\031\n\016trashQuotaUsed\030\010 \001(\005"
      ":\0010\";\n\tSegment_i\022\023\n\013segment_num\030\001 \002(\005\022\031\n"
      "\021markersCountRatio\030\002 \001(\001\":\n\017SelectedFeat"
      "ure\022\013\n\003idx\030\001 \002(\005\022\r\n\005quote\030\002 \002(\005\022\013\n\003key\030\003"
      " \002(\t\"\362\001\n\nStatusInfo\022@\n\005state\030\001 \002(\01621.ru."
      "mail.go.webbase.sekitei.StatusInfo.state"
      "Types\022\013\n\003num\030\002 \002(\005\"\224\001\n\nstateTypes\022\n\n\006ST_"
      "NEW\020\000\022\016\n\nST_FETCHED\020\001\022\016\n\nST_FAILURE\020\002\022\016\n"
      "\nST_REMOVED\020\003\022\017\n\013ST_REDIRECT\020\004\022\017\n\013ST_DIS"
      "ABLED\020\005\022\021\n\rST_OVER3WEEKS\020\006\022\n\n\006QLINKS\020\007\022\t"
      "\n\005RANKS\020\010\"R\n\013FilterStats\022\016\n\006passed\030\001 \001(\005"
      "\022\027\n\017robots_disabled\030\002 \001(\005\022\032\n\022blacklist_d"
      "isabled\030\003 \001(\005B\016B\014SekiteiBlobs"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3229);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sekitei.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::blobs::protobuf_doc_5fparser_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sekitei_2eproto

const ::google::protobuf::EnumDescriptor* Segment_r_d_lang_descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_enum_descriptors[0];
}
bool Segment_r_d_lang_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Segment_r_d_lang Segment_r::lang_empty;
const Segment_r_d_lang Segment_r::lang_unknown;
const Segment_r_d_lang Segment_r::lang_ru;
const Segment_r_d_lang Segment_r::lang_uk;
const Segment_r_d_lang Segment_r::lang_kz;
const Segment_r_d_lang Segment_r::lang_bg;
const Segment_r_d_lang Segment_r::lang_be;
const Segment_r_d_lang Segment_r::lang_en;
const Segment_r_d_lang Segment_r::d_lang_MIN;
const Segment_r_d_lang Segment_r::d_lang_MAX;
const int Segment_r::d_lang_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StatusInfo_stateTypes_descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_enum_descriptors[1];
}
bool StatusInfo_stateTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StatusInfo_stateTypes StatusInfo::ST_NEW;
const StatusInfo_stateTypes StatusInfo::ST_FETCHED;
const StatusInfo_stateTypes StatusInfo::ST_FAILURE;
const StatusInfo_stateTypes StatusInfo::ST_REMOVED;
const StatusInfo_stateTypes StatusInfo::ST_REDIRECT;
const StatusInfo_stateTypes StatusInfo::ST_DISABLED;
const StatusInfo_stateTypes StatusInfo::ST_OVER3WEEKS;
const StatusInfo_stateTypes StatusInfo::QLINKS;
const StatusInfo_stateTypes StatusInfo::RANKS;
const StatusInfo_stateTypes StatusInfo::stateTypes_MIN;
const StatusInfo_stateTypes StatusInfo::stateTypes_MAX;
const int StatusInfo::stateTypes_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sekitei::kTotalUrlNumFieldNumber;
const int Sekitei::kSegmentsFieldNumber;
const int Sekitei::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sekitei::Sekitei()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.Sekitei)
}
Sekitei::Sekitei(const Sekitei& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      segments_(from.segments_),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_url_num_ = from.total_url_num_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.Sekitei)
}

void Sekitei::SharedCtor() {
  _cached_size_ = 0;
  total_url_num_ = GOOGLE_LONGLONG(0);
}

Sekitei::~Sekitei() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.Sekitei)
  SharedDtor();
}

void Sekitei::SharedDtor() {
}

void Sekitei::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sekitei::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sekitei& Sekitei::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sekitei* Sekitei::New(::google::protobuf::Arena* arena) const {
  Sekitei* n = new Sekitei;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sekitei::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.Sekitei)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  features_.Clear();
  total_url_num_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sekitei::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.Sekitei)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 total_url_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_total_url_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_url_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.sekitei.Segment segments = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.sekitei.SelectedFeature features = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.Sekitei)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.Sekitei)
  return false;
#undef DO_
}

void Sekitei::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.Sekitei)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 total_url_num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->total_url_num(), output);
  }

  // repeated .ru.mail.go.webbase.sekitei.Segment segments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->segments(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.webbase.sekitei.SelectedFeature features = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->features(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.Sekitei)
}

::google::protobuf::uint8* Sekitei::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.Sekitei)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 total_url_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->total_url_num(), target);
  }

  // repeated .ru.mail.go.webbase.sekitei.Segment segments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->segments(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.webbase.sekitei.SelectedFeature features = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->features(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.Sekitei)
  return target;
}

size_t Sekitei::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.Sekitei)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 total_url_num = 1;
  if (has_total_url_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_url_num());
  }
  // repeated .ru.mail.go.webbase.sekitei.Segment segments = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->segments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segments(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.sekitei.SelectedFeature features = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->features(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sekitei::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.Sekitei)
  GOOGLE_DCHECK_NE(&from, this);
  const Sekitei* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sekitei>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.Sekitei)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.Sekitei)
    MergeFrom(*source);
  }
}

void Sekitei::MergeFrom(const Sekitei& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.Sekitei)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
  features_.MergeFrom(from.features_);
  if (from.has_total_url_num()) {
    set_total_url_num(from.total_url_num());
  }
}

void Sekitei::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.Sekitei)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sekitei::CopyFrom(const Sekitei& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.Sekitei)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sekitei::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->segments())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->features())) return false;
  return true;
}

void Sekitei::Swap(Sekitei* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sekitei::InternalSwap(Sekitei* other) {
  using std::swap;
  segments_.InternalSwap(&other->segments_);
  features_.InternalSwap(&other->features_);
  swap(total_url_num_, other->total_url_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sekitei::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sekitei

// required int64 total_url_num = 1;
bool Sekitei::has_total_url_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Sekitei::set_has_total_url_num() {
  _has_bits_[0] |= 0x00000001u;
}
void Sekitei::clear_has_total_url_num() {
  _has_bits_[0] &= ~0x00000001u;
}
void Sekitei::clear_total_url_num() {
  total_url_num_ = GOOGLE_LONGLONG(0);
  clear_has_total_url_num();
}
::google::protobuf::int64 Sekitei::total_url_num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Sekitei.total_url_num)
  return total_url_num_;
}
void Sekitei::set_total_url_num(::google::protobuf::int64 value) {
  set_has_total_url_num();
  total_url_num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Sekitei.total_url_num)
}

// repeated .ru.mail.go.webbase.sekitei.Segment segments = 2;
int Sekitei::segments_size() const {
  return segments_.size();
}
void Sekitei::clear_segments() {
  segments_.Clear();
}
const ::ru::mail::go::webbase::sekitei::Segment& Sekitei::segments(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Sekitei.segments)
  return segments_.Get(index);
}
::ru::mail::go::webbase::sekitei::Segment* Sekitei::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Sekitei.segments)
  return segments_.Mutable(index);
}
::ru::mail::go::webbase::sekitei::Segment* Sekitei::add_segments() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.sekitei.Sekitei.segments)
  return segments_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::Segment >*
Sekitei::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.sekitei.Sekitei.segments)
  return &segments_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::Segment >&
Sekitei::segments() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.sekitei.Sekitei.segments)
  return segments_;
}

// repeated .ru.mail.go.webbase.sekitei.SelectedFeature features = 3;
int Sekitei::features_size() const {
  return features_.size();
}
void Sekitei::clear_features() {
  features_.Clear();
}
const ::ru::mail::go::webbase::sekitei::SelectedFeature& Sekitei::features(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Sekitei.features)
  return features_.Get(index);
}
::ru::mail::go::webbase::sekitei::SelectedFeature* Sekitei::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Sekitei.features)
  return features_.Mutable(index);
}
::ru::mail::go::webbase::sekitei::SelectedFeature* Sekitei::add_features() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.sekitei.Sekitei.features)
  return features_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::SelectedFeature >*
Sekitei::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.sekitei.Sekitei.features)
  return &features_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::SelectedFeature >&
Sekitei::features() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.sekitei.Sekitei.features)
  return features_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sekitei_m::kTotalUrlNumFieldNumber;
const int Sekitei_m::kSegmentsFieldNumber;
const int Sekitei_m::kUsedUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sekitei_m::Sekitei_m()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.Sekitei_m)
}
Sekitei_m::Sekitei_m(const Sekitei_m& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_url_num_, &from.total_url_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&used_urls_) -
    reinterpret_cast<char*>(&total_url_num_)) + sizeof(used_urls_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.Sekitei_m)
}

void Sekitei_m::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&total_url_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&used_urls_) -
      reinterpret_cast<char*>(&total_url_num_)) + sizeof(used_urls_));
}

Sekitei_m::~Sekitei_m() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.Sekitei_m)
  SharedDtor();
}

void Sekitei_m::SharedDtor() {
}

void Sekitei_m::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sekitei_m::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sekitei_m& Sekitei_m::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sekitei_m* Sekitei_m::New(::google::protobuf::Arena* arena) const {
  Sekitei_m* n = new Sekitei_m;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sekitei_m::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.Sekitei_m)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&total_url_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&used_urls_) -
        reinterpret_cast<char*>(&total_url_num_)) + sizeof(used_urls_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sekitei_m::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.Sekitei_m)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 total_url_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_total_url_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_url_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.sekitei.Segment_m segments = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 used_urls = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_used_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &used_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.Sekitei_m)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.Sekitei_m)
  return false;
#undef DO_
}

void Sekitei_m::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.Sekitei_m)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 total_url_num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->total_url_num(), output);
  }

  // repeated .ru.mail.go.webbase.sekitei.Segment_m segments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->segments(static_cast<int>(i)), output);
  }

  // required int64 used_urls = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->used_urls(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.Sekitei_m)
}

::google::protobuf::uint8* Sekitei_m::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.Sekitei_m)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 total_url_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->total_url_num(), target);
  }

  // repeated .ru.mail.go.webbase.sekitei.Segment_m segments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->segments(static_cast<int>(i)), deterministic, target);
  }

  // required int64 used_urls = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->used_urls(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.Sekitei_m)
  return target;
}

size_t Sekitei_m::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.sekitei.Sekitei_m)
  size_t total_size = 0;

  if (has_total_url_num()) {
    // required int64 total_url_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_url_num());
  }

  if (has_used_urls()) {
    // required int64 used_urls = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->used_urls());
  }

  return total_size;
}
size_t Sekitei_m::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.Sekitei_m)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 total_url_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_url_num());

    // required int64 used_urls = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->used_urls());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.webbase.sekitei.Segment_m segments = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->segments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segments(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sekitei_m::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.Sekitei_m)
  GOOGLE_DCHECK_NE(&from, this);
  const Sekitei_m* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sekitei_m>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.Sekitei_m)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.Sekitei_m)
    MergeFrom(*source);
  }
}

void Sekitei_m::MergeFrom(const Sekitei_m& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.Sekitei_m)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      total_url_num_ = from.total_url_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      used_urls_ = from.used_urls_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sekitei_m::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.Sekitei_m)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sekitei_m::CopyFrom(const Sekitei_m& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.Sekitei_m)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sekitei_m::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->segments())) return false;
  return true;
}

void Sekitei_m::Swap(Sekitei_m* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sekitei_m::InternalSwap(Sekitei_m* other) {
  using std::swap;
  segments_.InternalSwap(&other->segments_);
  swap(total_url_num_, other->total_url_num_);
  swap(used_urls_, other->used_urls_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sekitei_m::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sekitei_m

// required int64 total_url_num = 1;
bool Sekitei_m::has_total_url_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Sekitei_m::set_has_total_url_num() {
  _has_bits_[0] |= 0x00000001u;
}
void Sekitei_m::clear_has_total_url_num() {
  _has_bits_[0] &= ~0x00000001u;
}
void Sekitei_m::clear_total_url_num() {
  total_url_num_ = GOOGLE_LONGLONG(0);
  clear_has_total_url_num();
}
::google::protobuf::int64 Sekitei_m::total_url_num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Sekitei_m.total_url_num)
  return total_url_num_;
}
void Sekitei_m::set_total_url_num(::google::protobuf::int64 value) {
  set_has_total_url_num();
  total_url_num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Sekitei_m.total_url_num)
}

// repeated .ru.mail.go.webbase.sekitei.Segment_m segments = 2;
int Sekitei_m::segments_size() const {
  return segments_.size();
}
void Sekitei_m::clear_segments() {
  segments_.Clear();
}
const ::ru::mail::go::webbase::sekitei::Segment_m& Sekitei_m::segments(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Sekitei_m.segments)
  return segments_.Get(index);
}
::ru::mail::go::webbase::sekitei::Segment_m* Sekitei_m::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Sekitei_m.segments)
  return segments_.Mutable(index);
}
::ru::mail::go::webbase::sekitei::Segment_m* Sekitei_m::add_segments() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.sekitei.Sekitei_m.segments)
  return segments_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::Segment_m >*
Sekitei_m::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.sekitei.Sekitei_m.segments)
  return &segments_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::Segment_m >&
Sekitei_m::segments() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.sekitei.Sekitei_m.segments)
  return segments_;
}

// required int64 used_urls = 3;
bool Sekitei_m::has_used_urls() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Sekitei_m::set_has_used_urls() {
  _has_bits_[0] |= 0x00000002u;
}
void Sekitei_m::clear_has_used_urls() {
  _has_bits_[0] &= ~0x00000002u;
}
void Sekitei_m::clear_used_urls() {
  used_urls_ = GOOGLE_LONGLONG(0);
  clear_has_used_urls();
}
::google::protobuf::int64 Sekitei_m::used_urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Sekitei_m.used_urls)
  return used_urls_;
}
void Sekitei_m::set_used_urls(::google::protobuf::int64 value) {
  set_has_used_urls();
  used_urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Sekitei_m.used_urls)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sekitei_r::kSegmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sekitei_r::Sekitei_r()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.Sekitei_r)
}
Sekitei_r::Sekitei_r(const Sekitei_r& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.Sekitei_r)
}

void Sekitei_r::SharedCtor() {
  _cached_size_ = 0;
}

Sekitei_r::~Sekitei_r() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.Sekitei_r)
  SharedDtor();
}

void Sekitei_r::SharedDtor() {
}

void Sekitei_r::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sekitei_r::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sekitei_r& Sekitei_r::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sekitei_r* Sekitei_r::New(::google::protobuf::Arena* arena) const {
  Sekitei_r* n = new Sekitei_r;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sekitei_r::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.Sekitei_r)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sekitei_r::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.Sekitei_r)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.sekitei.Segment_r segments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.Sekitei_r)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.Sekitei_r)
  return false;
#undef DO_
}

void Sekitei_r::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.Sekitei_r)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.sekitei.Segment_r segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segments(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.Sekitei_r)
}

::google::protobuf::uint8* Sekitei_r::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.Sekitei_r)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.sekitei.Segment_r segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->segments(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.Sekitei_r)
  return target;
}

size_t Sekitei_r::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.Sekitei_r)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.sekitei.Segment_r segments = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->segments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segments(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sekitei_r::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.Sekitei_r)
  GOOGLE_DCHECK_NE(&from, this);
  const Sekitei_r* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sekitei_r>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.Sekitei_r)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.Sekitei_r)
    MergeFrom(*source);
  }
}

void Sekitei_r::MergeFrom(const Sekitei_r& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.Sekitei_r)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
}

void Sekitei_r::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.Sekitei_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sekitei_r::CopyFrom(const Sekitei_r& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.Sekitei_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sekitei_r::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->segments())) return false;
  return true;
}

void Sekitei_r::Swap(Sekitei_r* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sekitei_r::InternalSwap(Sekitei_r* other) {
  using std::swap;
  segments_.InternalSwap(&other->segments_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sekitei_r::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sekitei_r

// repeated .ru.mail.go.webbase.sekitei.Segment_r segments = 1;
int Sekitei_r::segments_size() const {
  return segments_.size();
}
void Sekitei_r::clear_segments() {
  segments_.Clear();
}
const ::ru::mail::go::webbase::sekitei::Segment_r& Sekitei_r::segments(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Sekitei_r.segments)
  return segments_.Get(index);
}
::ru::mail::go::webbase::sekitei::Segment_r* Sekitei_r::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Sekitei_r.segments)
  return segments_.Mutable(index);
}
::ru::mail::go::webbase::sekitei::Segment_r* Sekitei_r::add_segments() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.sekitei.Sekitei_r.segments)
  return segments_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::Segment_r >*
Sekitei_r::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.sekitei.Sekitei_r.segments)
  return &segments_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::Segment_r >&
Sekitei_r::segments() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.sekitei.Sekitei_r.segments)
  return segments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sekitei_l::kSegmentsFieldNumber;
const int Sekitei_l::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sekitei_l::Sekitei_l()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.Sekitei_l)
}
Sekitei_l::Sekitei_l(const Sekitei_l& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      segments_(from.segments_),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.Sekitei_l)
}

void Sekitei_l::SharedCtor() {
  _cached_size_ = 0;
}

Sekitei_l::~Sekitei_l() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.Sekitei_l)
  SharedDtor();
}

void Sekitei_l::SharedDtor() {
}

void Sekitei_l::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sekitei_l::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sekitei_l& Sekitei_l::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sekitei_l* Sekitei_l::New(::google::protobuf::Arena* arena) const {
  Sekitei_l* n = new Sekitei_l;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sekitei_l::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.Sekitei_l)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  features_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sekitei_l::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.Sekitei_l)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.sekitei.Segment_l segments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.sekitei.SelectedFeature features = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.Sekitei_l)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.Sekitei_l)
  return false;
#undef DO_
}

void Sekitei_l::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.Sekitei_l)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.sekitei.Segment_l segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segments(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.webbase.sekitei.SelectedFeature features = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->features(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.Sekitei_l)
}

::google::protobuf::uint8* Sekitei_l::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.Sekitei_l)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.sekitei.Segment_l segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->segments(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.webbase.sekitei.SelectedFeature features = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->features(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.Sekitei_l)
  return target;
}

size_t Sekitei_l::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.Sekitei_l)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.sekitei.Segment_l segments = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->segments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segments(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.sekitei.SelectedFeature features = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->features(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sekitei_l::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.Sekitei_l)
  GOOGLE_DCHECK_NE(&from, this);
  const Sekitei_l* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sekitei_l>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.Sekitei_l)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.Sekitei_l)
    MergeFrom(*source);
  }
}

void Sekitei_l::MergeFrom(const Sekitei_l& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.Sekitei_l)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
  features_.MergeFrom(from.features_);
}

void Sekitei_l::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.Sekitei_l)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sekitei_l::CopyFrom(const Sekitei_l& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.Sekitei_l)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sekitei_l::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->segments())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->features())) return false;
  return true;
}

void Sekitei_l::Swap(Sekitei_l* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sekitei_l::InternalSwap(Sekitei_l* other) {
  using std::swap;
  segments_.InternalSwap(&other->segments_);
  features_.InternalSwap(&other->features_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sekitei_l::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sekitei_l

// repeated .ru.mail.go.webbase.sekitei.Segment_l segments = 1;
int Sekitei_l::segments_size() const {
  return segments_.size();
}
void Sekitei_l::clear_segments() {
  segments_.Clear();
}
const ::ru::mail::go::webbase::sekitei::Segment_l& Sekitei_l::segments(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Sekitei_l.segments)
  return segments_.Get(index);
}
::ru::mail::go::webbase::sekitei::Segment_l* Sekitei_l::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Sekitei_l.segments)
  return segments_.Mutable(index);
}
::ru::mail::go::webbase::sekitei::Segment_l* Sekitei_l::add_segments() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.sekitei.Sekitei_l.segments)
  return segments_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::Segment_l >*
Sekitei_l::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.sekitei.Sekitei_l.segments)
  return &segments_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::Segment_l >&
Sekitei_l::segments() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.sekitei.Sekitei_l.segments)
  return segments_;
}

// repeated .ru.mail.go.webbase.sekitei.SelectedFeature features = 2;
int Sekitei_l::features_size() const {
  return features_.size();
}
void Sekitei_l::clear_features() {
  features_.Clear();
}
const ::ru::mail::go::webbase::sekitei::SelectedFeature& Sekitei_l::features(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Sekitei_l.features)
  return features_.Get(index);
}
::ru::mail::go::webbase::sekitei::SelectedFeature* Sekitei_l::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Sekitei_l.features)
  return features_.Mutable(index);
}
::ru::mail::go::webbase::sekitei::SelectedFeature* Sekitei_l::add_features() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.sekitei.Sekitei_l.features)
  return features_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::SelectedFeature >*
Sekitei_l::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.sekitei.Sekitei_l.features)
  return &features_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::SelectedFeature >&
Sekitei_l::features() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.sekitei.Sekitei_l.features)
  return features_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sekitei_s::kSegmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sekitei_s::Sekitei_s()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.Sekitei_s)
}
Sekitei_s::Sekitei_s(const Sekitei_s& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.Sekitei_s)
}

void Sekitei_s::SharedCtor() {
  _cached_size_ = 0;
}

Sekitei_s::~Sekitei_s() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.Sekitei_s)
  SharedDtor();
}

void Sekitei_s::SharedDtor() {
}

void Sekitei_s::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sekitei_s::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sekitei_s& Sekitei_s::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sekitei_s* Sekitei_s::New(::google::protobuf::Arena* arena) const {
  Sekitei_s* n = new Sekitei_s;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sekitei_s::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.Sekitei_s)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sekitei_s::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.Sekitei_s)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.sekitei.Segment_s segments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.Sekitei_s)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.Sekitei_s)
  return false;
#undef DO_
}

void Sekitei_s::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.Sekitei_s)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.sekitei.Segment_s segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segments(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.Sekitei_s)
}

::google::protobuf::uint8* Sekitei_s::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.Sekitei_s)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.sekitei.Segment_s segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->segments(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.Sekitei_s)
  return target;
}

size_t Sekitei_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.Sekitei_s)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.sekitei.Segment_s segments = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->segments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segments(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sekitei_s::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.Sekitei_s)
  GOOGLE_DCHECK_NE(&from, this);
  const Sekitei_s* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sekitei_s>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.Sekitei_s)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.Sekitei_s)
    MergeFrom(*source);
  }
}

void Sekitei_s::MergeFrom(const Sekitei_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.Sekitei_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
}

void Sekitei_s::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.Sekitei_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sekitei_s::CopyFrom(const Sekitei_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.Sekitei_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sekitei_s::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->segments())) return false;
  return true;
}

void Sekitei_s::Swap(Sekitei_s* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sekitei_s::InternalSwap(Sekitei_s* other) {
  using std::swap;
  segments_.InternalSwap(&other->segments_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sekitei_s::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sekitei_s

// repeated .ru.mail.go.webbase.sekitei.Segment_s segments = 1;
int Sekitei_s::segments_size() const {
  return segments_.size();
}
void Sekitei_s::clear_segments() {
  segments_.Clear();
}
const ::ru::mail::go::webbase::sekitei::Segment_s& Sekitei_s::segments(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Sekitei_s.segments)
  return segments_.Get(index);
}
::ru::mail::go::webbase::sekitei::Segment_s* Sekitei_s::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Sekitei_s.segments)
  return segments_.Mutable(index);
}
::ru::mail::go::webbase::sekitei::Segment_s* Sekitei_s::add_segments() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.sekitei.Sekitei_s.segments)
  return segments_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::Segment_s >*
Sekitei_s::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.sekitei.Sekitei_s.segments)
  return &segments_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::Segment_s >&
Sekitei_s::segments() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.sekitei.Sekitei_s.segments)
  return segments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sekitei_i::kSegmentsFieldNumber;
const int Sekitei_i::kTotalMarkersCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sekitei_i::Sekitei_i()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.Sekitei_i)
}
Sekitei_i::Sekitei_i(const Sekitei_i& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  totalmarkerscount_ = from.totalmarkerscount_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.Sekitei_i)
}

void Sekitei_i::SharedCtor() {
  _cached_size_ = 0;
  totalmarkerscount_ = 0;
}

Sekitei_i::~Sekitei_i() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.Sekitei_i)
  SharedDtor();
}

void Sekitei_i::SharedDtor() {
}

void Sekitei_i::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sekitei_i::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sekitei_i& Sekitei_i::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sekitei_i* Sekitei_i::New(::google::protobuf::Arena* arena) const {
  Sekitei_i* n = new Sekitei_i;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sekitei_i::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.Sekitei_i)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  totalmarkerscount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sekitei_i::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.Sekitei_i)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.sekitei.Segment_i segments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 totalMarkersCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_totalmarkerscount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalmarkerscount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.Sekitei_i)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.Sekitei_i)
  return false;
#undef DO_
}

void Sekitei_i::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.Sekitei_i)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.sekitei.Segment_i segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segments(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 totalMarkersCount = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalmarkerscount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.Sekitei_i)
}

::google::protobuf::uint8* Sekitei_i::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.Sekitei_i)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.sekitei.Segment_i segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->segments(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 totalMarkersCount = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalmarkerscount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.Sekitei_i)
  return target;
}

size_t Sekitei_i::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.Sekitei_i)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.sekitei.Segment_i segments = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->segments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segments(static_cast<int>(i)));
    }
  }

  // optional int32 totalMarkersCount = 2;
  if (has_totalmarkerscount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalmarkerscount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sekitei_i::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.Sekitei_i)
  GOOGLE_DCHECK_NE(&from, this);
  const Sekitei_i* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sekitei_i>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.Sekitei_i)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.Sekitei_i)
    MergeFrom(*source);
  }
}

void Sekitei_i::MergeFrom(const Sekitei_i& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.Sekitei_i)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
  if (from.has_totalmarkerscount()) {
    set_totalmarkerscount(from.totalmarkerscount());
  }
}

void Sekitei_i::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.Sekitei_i)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sekitei_i::CopyFrom(const Sekitei_i& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.Sekitei_i)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sekitei_i::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->segments())) return false;
  return true;
}

void Sekitei_i::Swap(Sekitei_i* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sekitei_i::InternalSwap(Sekitei_i* other) {
  using std::swap;
  segments_.InternalSwap(&other->segments_);
  swap(totalmarkerscount_, other->totalmarkerscount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sekitei_i::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sekitei_i

// repeated .ru.mail.go.webbase.sekitei.Segment_i segments = 1;
int Sekitei_i::segments_size() const {
  return segments_.size();
}
void Sekitei_i::clear_segments() {
  segments_.Clear();
}
const ::ru::mail::go::webbase::sekitei::Segment_i& Sekitei_i::segments(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Sekitei_i.segments)
  return segments_.Get(index);
}
::ru::mail::go::webbase::sekitei::Segment_i* Sekitei_i::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Sekitei_i.segments)
  return segments_.Mutable(index);
}
::ru::mail::go::webbase::sekitei::Segment_i* Sekitei_i::add_segments() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.sekitei.Sekitei_i.segments)
  return segments_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::Segment_i >*
Sekitei_i::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.sekitei.Sekitei_i.segments)
  return &segments_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::Segment_i >&
Sekitei_i::segments() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.sekitei.Sekitei_i.segments)
  return segments_;
}

// optional int32 totalMarkersCount = 2;
bool Sekitei_i::has_totalmarkerscount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Sekitei_i::set_has_totalmarkerscount() {
  _has_bits_[0] |= 0x00000001u;
}
void Sekitei_i::clear_has_totalmarkerscount() {
  _has_bits_[0] &= ~0x00000001u;
}
void Sekitei_i::clear_totalmarkerscount() {
  totalmarkerscount_ = 0;
  clear_has_totalmarkerscount();
}
::google::protobuf::int32 Sekitei_i::totalmarkerscount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Sekitei_i.totalMarkersCount)
  return totalmarkerscount_;
}
void Sekitei_i::set_totalmarkerscount(::google::protobuf::int32 value) {
  set_has_totalmarkerscount();
  totalmarkerscount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Sekitei_i.totalMarkersCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Segment::kSegmentNumFieldNumber;
const int Segment::kPartFieldNumber;
const int Segment::kDescriptionFieldNumber;
const int Segment::kSamplesFieldNumber;
const int Segment::kSpecialSegmentFieldNumber;
const int Segment::kWpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Segment::Segment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.Segment)
}
Segment::Segment(const Segment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      samples_(from.samples_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&segment_num_, &from.segment_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&specialsegment_) -
    reinterpret_cast<char*>(&segment_num_)) + sizeof(specialsegment_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.Segment)
}

void Segment::SharedCtor() {
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&segment_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&specialsegment_) -
      reinterpret_cast<char*>(&segment_num_)) + sizeof(specialsegment_));
}

Segment::~Segment() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.Segment)
  SharedDtor();
}

void Segment::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Segment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Segment::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Segment& Segment::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

Segment* Segment::New(::google::protobuf::Arena* arena) const {
  Segment* n = new Segment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samples_.Clear();
  if (has_description()) {
    GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*description_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&segment_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&specialsegment_) -
        reinterpret_cast<char*>(&segment_num_)) + sizeof(specialsegment_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Segment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.Segment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 segment_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_segment_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &segment_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 part = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_part();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.sekitei.Segment.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string samples = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_samples()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->samples(this->samples_size() - 1).data(),
            static_cast<int>(this->samples(this->samples_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.sekitei.Segment.samples");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool specialSegment = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_specialsegment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &specialsegment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wp = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_wp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.Segment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.Segment)
  return false;
#undef DO_
}

void Segment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 segment_num = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->segment_num(), output);
  }

  // required int32 part = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->part(), output);
  }

  // required string description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.sekitei.Segment.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // repeated string samples = 4;
  for (int i = 0, n = this->samples_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->samples(i).data(), static_cast<int>(this->samples(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.sekitei.Segment.samples");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->samples(i), output);
  }

  // optional bool specialSegment = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->specialsegment(), output);
  }

  // optional double wp = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->wp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.Segment)
}

::google::protobuf::uint8* Segment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 segment_num = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->segment_num(), target);
  }

  // required int32 part = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->part(), target);
  }

  // required string description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.sekitei.Segment.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // repeated string samples = 4;
  for (int i = 0, n = this->samples_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->samples(i).data(), static_cast<int>(this->samples(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.sekitei.Segment.samples");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->samples(i), target);
  }

  // optional bool specialSegment = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->specialsegment(), target);
  }

  // optional double wp = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->wp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.Segment)
  return target;
}

size_t Segment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.sekitei.Segment)
  size_t total_size = 0;

  if (has_description()) {
    // required string description = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  if (has_segment_num()) {
    // required int32 segment_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->segment_num());
  }

  if (has_part()) {
    // required int32 part = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->part());
  }

  return total_size;
}
size_t Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.Segment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string description = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());

    // required int32 segment_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->segment_num());

    // required int32 part = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->part());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string samples = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->samples_size());
  for (int i = 0, n = this->samples_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->samples(i));
  }

  if (_has_bits_[0 / 32] & 24u) {
    // optional double wp = 6 [default = 0];
    if (has_wp()) {
      total_size += 1 + 8;
    }

    // optional bool specialSegment = 5 [default = false];
    if (has_specialsegment()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Segment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Segment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.Segment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.Segment)
    MergeFrom(*source);
  }
}

void Segment::MergeFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  samples_.MergeFrom(from.samples_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      segment_num_ = from.segment_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      part_ = from.part_;
    }
    if (cached_has_bits & 0x00000008u) {
      wp_ = from.wp_;
    }
    if (cached_has_bits & 0x00000010u) {
      specialsegment_ = from.specialsegment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Segment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment::CopyFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Segment::Swap(Segment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Segment::InternalSwap(Segment* other) {
  using std::swap;
  samples_.InternalSwap(&other->samples_);
  description_.Swap(&other->description_);
  swap(segment_num_, other->segment_num_);
  swap(part_, other->part_);
  swap(wp_, other->wp_);
  swap(specialsegment_, other->specialsegment_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Segment::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Segment

// required int32 segment_num = 1;
bool Segment::has_segment_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Segment::set_has_segment_num() {
  _has_bits_[0] |= 0x00000002u;
}
void Segment::clear_has_segment_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void Segment::clear_segment_num() {
  segment_num_ = 0;
  clear_has_segment_num();
}
::google::protobuf::int32 Segment::segment_num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment.segment_num)
  return segment_num_;
}
void Segment::set_segment_num(::google::protobuf::int32 value) {
  set_has_segment_num();
  segment_num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment.segment_num)
}

// required int32 part = 2;
bool Segment::has_part() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Segment::set_has_part() {
  _has_bits_[0] |= 0x00000004u;
}
void Segment::clear_has_part() {
  _has_bits_[0] &= ~0x00000004u;
}
void Segment::clear_part() {
  part_ = 0;
  clear_has_part();
}
::google::protobuf::int32 Segment::part() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment.part)
  return part_;
}
void Segment::set_part(::google::protobuf::int32 value) {
  set_has_part();
  part_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment.part)
}

// required string description = 3;
bool Segment::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Segment::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void Segment::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void Segment::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& Segment::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment.description)
  return description_.GetNoArena();
}
void Segment::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment.description)
}
#if LANG_CXX11
void Segment::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.sekitei.Segment.description)
}
#endif
void Segment::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.sekitei.Segment.description)
}
void Segment::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.sekitei.Segment.description)
}
::std::string* Segment::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Segment.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Segment::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.sekitei.Segment.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Segment::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.sekitei.Segment.description)
}

// repeated string samples = 4;
int Segment::samples_size() const {
  return samples_.size();
}
void Segment::clear_samples() {
  samples_.Clear();
}
const ::std::string& Segment::samples(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment.samples)
  return samples_.Get(index);
}
::std::string* Segment::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Segment.samples)
  return samples_.Mutable(index);
}
void Segment::set_samples(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment.samples)
  samples_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Segment::set_samples(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment.samples)
  samples_.Mutable(index)->assign(std::move(value));
}
#endif
void Segment::set_samples(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  samples_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.sekitei.Segment.samples)
}
void Segment::set_samples(int index, const char* value, size_t size) {
  samples_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.sekitei.Segment.samples)
}
::std::string* Segment::add_samples() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.sekitei.Segment.samples)
  return samples_.Add();
}
void Segment::add_samples(const ::std::string& value) {
  samples_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.sekitei.Segment.samples)
}
#if LANG_CXX11
void Segment::add_samples(::std::string&& value) {
  samples_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.sekitei.Segment.samples)
}
#endif
void Segment::add_samples(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  samples_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.sekitei.Segment.samples)
}
void Segment::add_samples(const char* value, size_t size) {
  samples_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.sekitei.Segment.samples)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Segment::samples() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.sekitei.Segment.samples)
  return samples_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Segment::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.sekitei.Segment.samples)
  return &samples_;
}

// optional bool specialSegment = 5 [default = false];
bool Segment::has_specialsegment() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Segment::set_has_specialsegment() {
  _has_bits_[0] |= 0x00000010u;
}
void Segment::clear_has_specialsegment() {
  _has_bits_[0] &= ~0x00000010u;
}
void Segment::clear_specialsegment() {
  specialsegment_ = false;
  clear_has_specialsegment();
}
bool Segment::specialsegment() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment.specialSegment)
  return specialsegment_;
}
void Segment::set_specialsegment(bool value) {
  set_has_specialsegment();
  specialsegment_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment.specialSegment)
}

// optional double wp = 6 [default = 0];
bool Segment::has_wp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Segment::set_has_wp() {
  _has_bits_[0] |= 0x00000008u;
}
void Segment::clear_has_wp() {
  _has_bits_[0] &= ~0x00000008u;
}
void Segment::clear_wp() {
  wp_ = 0;
  clear_has_wp();
}
double Segment::wp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment.wp)
  return wp_;
}
void Segment::set_wp(double value) {
  set_has_wp();
  wp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment.wp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Segment_m::kSegmentNumFieldNumber;
const int Segment_m::kPartFieldNumber;
const int Segment_m::kDescriptionFieldNumber;
const int Segment_m::kWpFieldNumber;
const int Segment_m::kStatusesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Segment_m::Segment_m()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.Segment_m)
}
Segment_m::Segment_m(const Segment_m& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      statuses_(from.statuses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&segment_num_, &from.segment_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&wp_) -
    reinterpret_cast<char*>(&segment_num_)) + sizeof(wp_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.Segment_m)
}

void Segment_m::SharedCtor() {
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&segment_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wp_) -
      reinterpret_cast<char*>(&segment_num_)) + sizeof(wp_));
}

Segment_m::~Segment_m() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.Segment_m)
  SharedDtor();
}

void Segment_m::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Segment_m::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Segment_m::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Segment_m& Segment_m::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

Segment_m* Segment_m::New(::google::protobuf::Arena* arena) const {
  Segment_m* n = new Segment_m;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Segment_m::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.Segment_m)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statuses_.Clear();
  if (has_description()) {
    GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*description_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&segment_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wp_) -
        reinterpret_cast<char*>(&segment_num_)) + sizeof(wp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Segment_m::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.Segment_m)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 segment_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_segment_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &segment_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 part = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_part();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.sekitei.Segment_m.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wp = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_wp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.sekitei.StatusInfo statuses = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statuses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.Segment_m)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.Segment_m)
  return false;
#undef DO_
}

void Segment_m::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.Segment_m)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 segment_num = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->segment_num(), output);
  }

  // required int32 part = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->part(), output);
  }

  // required string description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.sekitei.Segment_m.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional double wp = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->wp(), output);
  }

  // repeated .ru.mail.go.webbase.sekitei.StatusInfo statuses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->statuses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->statuses(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.Segment_m)
}

::google::protobuf::uint8* Segment_m::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.Segment_m)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 segment_num = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->segment_num(), target);
  }

  // required int32 part = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->part(), target);
  }

  // required string description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.sekitei.Segment_m.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional double wp = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->wp(), target);
  }

  // repeated .ru.mail.go.webbase.sekitei.StatusInfo statuses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->statuses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->statuses(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.Segment_m)
  return target;
}

size_t Segment_m::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.sekitei.Segment_m)
  size_t total_size = 0;

  if (has_description()) {
    // required string description = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  if (has_segment_num()) {
    // required int32 segment_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->segment_num());
  }

  if (has_part()) {
    // required int32 part = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->part());
  }

  return total_size;
}
size_t Segment_m::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.Segment_m)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string description = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());

    // required int32 segment_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->segment_num());

    // required int32 part = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->part());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.webbase.sekitei.StatusInfo statuses = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->statuses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statuses(static_cast<int>(i)));
    }
  }

  // optional double wp = 4 [default = 0];
  if (has_wp()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Segment_m::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.Segment_m)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment_m* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Segment_m>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.Segment_m)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.Segment_m)
    MergeFrom(*source);
  }
}

void Segment_m::MergeFrom(const Segment_m& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.Segment_m)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statuses_.MergeFrom(from.statuses_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      segment_num_ = from.segment_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      part_ = from.part_;
    }
    if (cached_has_bits & 0x00000008u) {
      wp_ = from.wp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Segment_m::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.Segment_m)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment_m::CopyFrom(const Segment_m& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.Segment_m)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment_m::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->statuses())) return false;
  return true;
}

void Segment_m::Swap(Segment_m* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Segment_m::InternalSwap(Segment_m* other) {
  using std::swap;
  statuses_.InternalSwap(&other->statuses_);
  description_.Swap(&other->description_);
  swap(segment_num_, other->segment_num_);
  swap(part_, other->part_);
  swap(wp_, other->wp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Segment_m::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Segment_m

// required int32 segment_num = 1;
bool Segment_m::has_segment_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Segment_m::set_has_segment_num() {
  _has_bits_[0] |= 0x00000002u;
}
void Segment_m::clear_has_segment_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void Segment_m::clear_segment_num() {
  segment_num_ = 0;
  clear_has_segment_num();
}
::google::protobuf::int32 Segment_m::segment_num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_m.segment_num)
  return segment_num_;
}
void Segment_m::set_segment_num(::google::protobuf::int32 value) {
  set_has_segment_num();
  segment_num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_m.segment_num)
}

// required int32 part = 2;
bool Segment_m::has_part() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Segment_m::set_has_part() {
  _has_bits_[0] |= 0x00000004u;
}
void Segment_m::clear_has_part() {
  _has_bits_[0] &= ~0x00000004u;
}
void Segment_m::clear_part() {
  part_ = 0;
  clear_has_part();
}
::google::protobuf::int32 Segment_m::part() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_m.part)
  return part_;
}
void Segment_m::set_part(::google::protobuf::int32 value) {
  set_has_part();
  part_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_m.part)
}

// required string description = 3;
bool Segment_m::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Segment_m::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void Segment_m::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void Segment_m::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& Segment_m::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_m.description)
  return description_.GetNoArena();
}
void Segment_m::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_m.description)
}
#if LANG_CXX11
void Segment_m::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.sekitei.Segment_m.description)
}
#endif
void Segment_m::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.sekitei.Segment_m.description)
}
void Segment_m::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.sekitei.Segment_m.description)
}
::std::string* Segment_m::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Segment_m.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Segment_m::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.sekitei.Segment_m.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Segment_m::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.sekitei.Segment_m.description)
}

// optional double wp = 4 [default = 0];
bool Segment_m::has_wp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Segment_m::set_has_wp() {
  _has_bits_[0] |= 0x00000008u;
}
void Segment_m::clear_has_wp() {
  _has_bits_[0] &= ~0x00000008u;
}
void Segment_m::clear_wp() {
  wp_ = 0;
  clear_has_wp();
}
double Segment_m::wp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_m.wp)
  return wp_;
}
void Segment_m::set_wp(double value) {
  set_has_wp();
  wp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_m.wp)
}

// repeated .ru.mail.go.webbase.sekitei.StatusInfo statuses = 5;
int Segment_m::statuses_size() const {
  return statuses_.size();
}
void Segment_m::clear_statuses() {
  statuses_.Clear();
}
const ::ru::mail::go::webbase::sekitei::StatusInfo& Segment_m::statuses(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_m.statuses)
  return statuses_.Get(index);
}
::ru::mail::go::webbase::sekitei::StatusInfo* Segment_m::mutable_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Segment_m.statuses)
  return statuses_.Mutable(index);
}
::ru::mail::go::webbase::sekitei::StatusInfo* Segment_m::add_statuses() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.sekitei.Segment_m.statuses)
  return statuses_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::StatusInfo >*
Segment_m::mutable_statuses() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.sekitei.Segment_m.statuses)
  return &statuses_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::sekitei::StatusInfo >&
Segment_m::statuses() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.sekitei.Segment_m.statuses)
  return statuses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Segment_r_ImageDiscoverySegmentInfo::kUsualImagesCountFieldNumber;
const int Segment_r_ImageDiscoverySegmentInfo::kMarkerImagesCountFieldNumber;
const int Segment_r_ImageDiscoverySegmentInfo::kQuotaFieldNumber;
const int Segment_r_ImageDiscoverySegmentInfo::kTrashQuotaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Segment_r_ImageDiscoverySegmentInfo::Segment_r_ImageDiscoverySegmentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
}
Segment_r_ImageDiscoverySegmentInfo::Segment_r_ImageDiscoverySegmentInfo(const Segment_r_ImageDiscoverySegmentInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&usualimagescount_, &from.usualimagescount_,
    static_cast<size_t>(reinterpret_cast<char*>(&trashquota_) -
    reinterpret_cast<char*>(&usualimagescount_)) + sizeof(trashquota_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
}

void Segment_r_ImageDiscoverySegmentInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&usualimagescount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trashquota_) -
      reinterpret_cast<char*>(&usualimagescount_)) + sizeof(trashquota_));
}

Segment_r_ImageDiscoverySegmentInfo::~Segment_r_ImageDiscoverySegmentInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
  SharedDtor();
}

void Segment_r_ImageDiscoverySegmentInfo::SharedDtor() {
}

void Segment_r_ImageDiscoverySegmentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Segment_r_ImageDiscoverySegmentInfo::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Segment_r_ImageDiscoverySegmentInfo& Segment_r_ImageDiscoverySegmentInfo::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

Segment_r_ImageDiscoverySegmentInfo* Segment_r_ImageDiscoverySegmentInfo::New(::google::protobuf::Arena* arena) const {
  Segment_r_ImageDiscoverySegmentInfo* n = new Segment_r_ImageDiscoverySegmentInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Segment_r_ImageDiscoverySegmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&usualimagescount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trashquota_) -
        reinterpret_cast<char*>(&usualimagescount_)) + sizeof(trashquota_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Segment_r_ImageDiscoverySegmentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usualImagesCount = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_usualimagescount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usualimagescount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 markerImagesCount = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_markerimagescount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &markerimagescount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quota = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_quota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 trashQuota = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_trashquota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trashquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
  return false;
#undef DO_
}

void Segment_r_ImageDiscoverySegmentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 usualImagesCount = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usualimagescount(), output);
  }

  // optional int32 markerImagesCount = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->markerimagescount(), output);
  }

  // optional int32 quota = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quota(), output);
  }

  // optional int32 trashQuota = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->trashquota(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
}

::google::protobuf::uint8* Segment_r_ImageDiscoverySegmentInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 usualImagesCount = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usualimagescount(), target);
  }

  // optional int32 markerImagesCount = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->markerimagescount(), target);
  }

  // optional int32 quota = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quota(), target);
  }

  // optional int32 trashQuota = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->trashquota(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
  return target;
}

size_t Segment_r_ImageDiscoverySegmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 usualImagesCount = 1 [default = 0];
    if (has_usualimagescount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usualimagescount());
    }

    // optional int32 markerImagesCount = 2 [default = 0];
    if (has_markerimagescount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->markerimagescount());
    }

    // optional int32 quota = 3 [default = 0];
    if (has_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quota());
    }

    // optional int32 trashQuota = 4 [default = 0];
    if (has_trashquota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trashquota());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Segment_r_ImageDiscoverySegmentInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment_r_ImageDiscoverySegmentInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Segment_r_ImageDiscoverySegmentInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
    MergeFrom(*source);
  }
}

void Segment_r_ImageDiscoverySegmentInfo::MergeFrom(const Segment_r_ImageDiscoverySegmentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      usualimagescount_ = from.usualimagescount_;
    }
    if (cached_has_bits & 0x00000002u) {
      markerimagescount_ = from.markerimagescount_;
    }
    if (cached_has_bits & 0x00000004u) {
      quota_ = from.quota_;
    }
    if (cached_has_bits & 0x00000008u) {
      trashquota_ = from.trashquota_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Segment_r_ImageDiscoverySegmentInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment_r_ImageDiscoverySegmentInfo::CopyFrom(const Segment_r_ImageDiscoverySegmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment_r_ImageDiscoverySegmentInfo::IsInitialized() const {
  return true;
}

void Segment_r_ImageDiscoverySegmentInfo::Swap(Segment_r_ImageDiscoverySegmentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Segment_r_ImageDiscoverySegmentInfo::InternalSwap(Segment_r_ImageDiscoverySegmentInfo* other) {
  using std::swap;
  swap(usualimagescount_, other->usualimagescount_);
  swap(markerimagescount_, other->markerimagescount_);
  swap(quota_, other->quota_);
  swap(trashquota_, other->trashquota_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Segment_r_ImageDiscoverySegmentInfo::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Segment_r_ImageDiscoverySegmentInfo

// optional int32 usualImagesCount = 1 [default = 0];
bool Segment_r_ImageDiscoverySegmentInfo::has_usualimagescount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Segment_r_ImageDiscoverySegmentInfo::set_has_usualimagescount() {
  _has_bits_[0] |= 0x00000001u;
}
void Segment_r_ImageDiscoverySegmentInfo::clear_has_usualimagescount() {
  _has_bits_[0] &= ~0x00000001u;
}
void Segment_r_ImageDiscoverySegmentInfo::clear_usualimagescount() {
  usualimagescount_ = 0;
  clear_has_usualimagescount();
}
::google::protobuf::int32 Segment_r_ImageDiscoverySegmentInfo::usualimagescount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo.usualImagesCount)
  return usualimagescount_;
}
void Segment_r_ImageDiscoverySegmentInfo::set_usualimagescount(::google::protobuf::int32 value) {
  set_has_usualimagescount();
  usualimagescount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo.usualImagesCount)
}

// optional int32 markerImagesCount = 2 [default = 0];
bool Segment_r_ImageDiscoverySegmentInfo::has_markerimagescount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Segment_r_ImageDiscoverySegmentInfo::set_has_markerimagescount() {
  _has_bits_[0] |= 0x00000002u;
}
void Segment_r_ImageDiscoverySegmentInfo::clear_has_markerimagescount() {
  _has_bits_[0] &= ~0x00000002u;
}
void Segment_r_ImageDiscoverySegmentInfo::clear_markerimagescount() {
  markerimagescount_ = 0;
  clear_has_markerimagescount();
}
::google::protobuf::int32 Segment_r_ImageDiscoverySegmentInfo::markerimagescount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo.markerImagesCount)
  return markerimagescount_;
}
void Segment_r_ImageDiscoverySegmentInfo::set_markerimagescount(::google::protobuf::int32 value) {
  set_has_markerimagescount();
  markerimagescount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo.markerImagesCount)
}

// optional int32 quota = 3 [default = 0];
bool Segment_r_ImageDiscoverySegmentInfo::has_quota() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Segment_r_ImageDiscoverySegmentInfo::set_has_quota() {
  _has_bits_[0] |= 0x00000004u;
}
void Segment_r_ImageDiscoverySegmentInfo::clear_has_quota() {
  _has_bits_[0] &= ~0x00000004u;
}
void Segment_r_ImageDiscoverySegmentInfo::clear_quota() {
  quota_ = 0;
  clear_has_quota();
}
::google::protobuf::int32 Segment_r_ImageDiscoverySegmentInfo::quota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo.quota)
  return quota_;
}
void Segment_r_ImageDiscoverySegmentInfo::set_quota(::google::protobuf::int32 value) {
  set_has_quota();
  quota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo.quota)
}

// optional int32 trashQuota = 4 [default = 0];
bool Segment_r_ImageDiscoverySegmentInfo::has_trashquota() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Segment_r_ImageDiscoverySegmentInfo::set_has_trashquota() {
  _has_bits_[0] |= 0x00000008u;
}
void Segment_r_ImageDiscoverySegmentInfo::clear_has_trashquota() {
  _has_bits_[0] &= ~0x00000008u;
}
void Segment_r_ImageDiscoverySegmentInfo::clear_trashquota() {
  trashquota_ = 0;
  clear_has_trashquota();
}
::google::protobuf::int32 Segment_r_ImageDiscoverySegmentInfo::trashquota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo.trashQuota)
  return trashquota_;
}
void Segment_r_ImageDiscoverySegmentInfo::set_trashquota(::google::protobuf::int32 value) {
  set_has_trashquota();
  trashquota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo.trashQuota)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Segment_r::kSegmentNumFieldNumber;
const int Segment_r::kQlinksFieldNumber;
const int Segment_r::kQlinksCountFieldNumber;
const int Segment_r::kDiscoveryFieldNumber;
const int Segment_r::kDiscoveryCountFieldNumber;
const int Segment_r::kStatsFieldNumber;
const int Segment_r::kSpecialSegmentFieldNumber;
const int Segment_r::kLanguageFieldNumber;
const int Segment_r::kCustraCountFieldNumber;
const int Segment_r::kCustrahaveCountFieldNumber;
const int Segment_r::kLanguageArrayFieldNumber;
const int Segment_r::kSpamUrlsFieldNumber;
const int Segment_r::kPornUrlsFieldNumber;
const int Segment_r::kCrawledUrlsFieldNumber;
const int Segment_r::kFailureUrlsFieldNumber;
const int Segment_r::kDeadUrlsFieldNumber;
const int Segment_r::kDeadUrlsMinTsFieldNumber;
const int Segment_r::kImageDiscoverySegmentInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Segment_r::Segment_r()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.Segment_r)
}
Segment_r::Segment_r(const Segment_r& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats()) {
    stats_ = new ::ru::mail::go::webbase::sekitei::FilterStats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  if (from.has_languagearray()) {
    languagearray_ = new ::ru::mail::go::webbase::blobs::SiteLanguageArray(*from.languagearray_);
  } else {
    languagearray_ = NULL;
  }
  if (from.has_imagediscoverysegmentinfo()) {
    imagediscoverysegmentinfo_ = new ::ru::mail::go::webbase::sekitei::Segment_r_ImageDiscoverySegmentInfo(*from.imagediscoverysegmentinfo_);
  } else {
    imagediscoverysegmentinfo_ = NULL;
  }
  ::memcpy(&qlinks_, &from.qlinks_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&qlinks_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.Segment_r)
}

void Segment_r::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deadurlsmints_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(deadurlsmints_));
  language_ = 1;
}

Segment_r::~Segment_r() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.Segment_r)
  SharedDtor();
}

void Segment_r::SharedDtor() {
  if (this != internal_default_instance()) delete stats_;
  if (this != internal_default_instance()) delete languagearray_;
  if (this != internal_default_instance()) delete imagediscoverysegmentinfo_;
}

void Segment_r::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Segment_r::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Segment_r& Segment_r::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

Segment_r* Segment_r::New(::google::protobuf::Arena* arena) const {
  Segment_r* n = new Segment_r;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Segment_r::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.Segment_r)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stats_ != NULL);
      stats_->::ru::mail::go::webbase::sekitei::FilterStats::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(languagearray_ != NULL);
      languagearray_->::ru::mail::go::webbase::blobs::SiteLanguageArray::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(imagediscoverysegmentinfo_ != NULL);
      imagediscoverysegmentinfo_->::ru::mail::go::webbase::sekitei::Segment_r_ImageDiscoverySegmentInfo::Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&qlinks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&discovery_count_) -
        reinterpret_cast<char*>(&qlinks_)) + sizeof(discovery_count_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&specialsegment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deadurls_) -
        reinterpret_cast<char*>(&specialsegment_)) + sizeof(deadurls_));
  }
  if (cached_has_bits & 196608u) {
    deadurlsmints_ = GOOGLE_LONGLONG(0);
    language_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Segment_r::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.Segment_r)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 segment_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_segment_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &segment_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double qlinks = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_qlinks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qlinks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 qlinks_count = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_qlinks_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qlinks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double discovery = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_discovery();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &discovery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 discovery_count = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_discovery_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discovery_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.sekitei.FilterStats stats = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool specialSegment = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_specialsegment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &specialsegment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.sekitei.Segment_r.d_lang language = 8 [default = lang_unknown];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::sekitei::Segment_r_d_lang_IsValid(value)) {
            set_language(static_cast< ::ru::mail::go::webbase::sekitei::Segment_r_d_lang >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 custra_count = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_custra_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &custra_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 custrahave_count = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_custrahave_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &custrahave_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiteLanguageArray languageArray = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_languagearray()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 spamUrls = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_spamurls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &spamurls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 pornUrls = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_pornurls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pornurls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 crawledUrls = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_crawledurls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crawledurls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 failureUrls = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_failureurls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &failureurls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 deadUrls = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_deadurls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deadurls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 deadUrlsMinTs = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_deadurlsmints();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deadurlsmints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo imageDiscoverySegmentInfo = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagediscoverysegmentinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.Segment_r)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.Segment_r)
  return false;
#undef DO_
}

void Segment_r::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.Segment_r)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 segment_num = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->segment_num(), output);
  }

  // optional double qlinks = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->qlinks(), output);
  }

  // optional int32 qlinks_count = 3 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->qlinks_count(), output);
  }

  // optional double discovery = 4 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->discovery(), output);
  }

  // optional int32 discovery_count = 5 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->discovery_count(), output);
  }

  // optional .ru.mail.go.webbase.sekitei.FilterStats stats = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->stats_, output);
  }

  // optional bool specialSegment = 7 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->specialsegment(), output);
  }

  // optional .ru.mail.go.webbase.sekitei.Segment_r.d_lang language = 8 [default = lang_unknown];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->language(), output);
  }

  // optional int64 custra_count = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->custra_count(), output);
  }

  // optional int64 custrahave_count = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->custrahave_count(), output);
  }

  // optional .ru.mail.go.webbase.blobs.SiteLanguageArray languageArray = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->languagearray_, output);
  }

  // optional int64 spamUrls = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->spamurls(), output);
  }

  // optional int64 pornUrls = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->pornurls(), output);
  }

  // optional int64 crawledUrls = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->crawledurls(), output);
  }

  // optional int64 failureUrls = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->failureurls(), output);
  }

  // optional int64 deadUrls = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->deadurls(), output);
  }

  // optional int64 deadUrlsMinTs = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->deadurlsmints(), output);
  }

  // optional .ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo imageDiscoverySegmentInfo = 18;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->imagediscoverysegmentinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.Segment_r)
}

::google::protobuf::uint8* Segment_r::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.Segment_r)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 segment_num = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->segment_num(), target);
  }

  // optional double qlinks = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->qlinks(), target);
  }

  // optional int32 qlinks_count = 3 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->qlinks_count(), target);
  }

  // optional double discovery = 4 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->discovery(), target);
  }

  // optional int32 discovery_count = 5 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->discovery_count(), target);
  }

  // optional .ru.mail.go.webbase.sekitei.FilterStats stats = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->stats_, deterministic, target);
  }

  // optional bool specialSegment = 7 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->specialsegment(), target);
  }

  // optional .ru.mail.go.webbase.sekitei.Segment_r.d_lang language = 8 [default = lang_unknown];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->language(), target);
  }

  // optional int64 custra_count = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->custra_count(), target);
  }

  // optional int64 custrahave_count = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->custrahave_count(), target);
  }

  // optional .ru.mail.go.webbase.blobs.SiteLanguageArray languageArray = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->languagearray_, deterministic, target);
  }

  // optional int64 spamUrls = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->spamurls(), target);
  }

  // optional int64 pornUrls = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->pornurls(), target);
  }

  // optional int64 crawledUrls = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->crawledurls(), target);
  }

  // optional int64 failureUrls = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->failureurls(), target);
  }

  // optional int64 deadUrls = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->deadurls(), target);
  }

  // optional int64 deadUrlsMinTs = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->deadurlsmints(), target);
  }

  // optional .ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo imageDiscoverySegmentInfo = 18;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->imagediscoverysegmentinfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.Segment_r)
  return target;
}

size_t Segment_r::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.Segment_r)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 segment_num = 1;
  if (has_segment_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->segment_num());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .ru.mail.go.webbase.sekitei.FilterStats stats = 6;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stats_);
    }

    // optional .ru.mail.go.webbase.blobs.SiteLanguageArray languageArray = 11;
    if (has_languagearray()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->languagearray_);
    }

    // optional .ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo imageDiscoverySegmentInfo = 18;
    if (has_imagediscoverysegmentinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imagediscoverysegmentinfo_);
    }

    // optional double qlinks = 2 [default = 0];
    if (has_qlinks()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional int32 qlinks_count = 3 [default = 0];
    if (has_qlinks_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qlinks_count());
    }

    // optional double discovery = 4 [default = 0];
    if (has_discovery()) {
      total_size += 1 + 8;
    }

    // optional int32 discovery_count = 5 [default = 0];
    if (has_discovery_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discovery_count());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool specialSegment = 7 [default = false];
    if (has_specialsegment()) {
      total_size += 1 + 1;
    }

    // optional int64 custra_count = 9 [default = 0];
    if (has_custra_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->custra_count());
    }

    // optional int64 custrahave_count = 10 [default = 0];
    if (has_custrahave_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->custrahave_count());
    }

    // optional int64 spamUrls = 12;
    if (has_spamurls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->spamurls());
    }

    // optional int64 pornUrls = 13;
    if (has_pornurls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pornurls());
    }

    // optional int64 crawledUrls = 14;
    if (has_crawledurls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crawledurls());
    }

    // optional int64 failureUrls = 15;
    if (has_failureurls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->failureurls());
    }

    // optional int64 deadUrls = 16;
    if (has_deadurls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deadurls());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional int64 deadUrlsMinTs = 17;
    if (has_deadurlsmints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deadurlsmints());
    }

    // optional .ru.mail.go.webbase.sekitei.Segment_r.d_lang language = 8 [default = lang_unknown];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Segment_r::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.Segment_r)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment_r* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Segment_r>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.Segment_r)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.Segment_r)
    MergeFrom(*source);
  }
}

void Segment_r::MergeFrom(const Segment_r& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.Segment_r)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stats()->::ru::mail::go::webbase::sekitei::FilterStats::MergeFrom(from.stats());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_languagearray()->::ru::mail::go::webbase::blobs::SiteLanguageArray::MergeFrom(from.languagearray());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_imagediscoverysegmentinfo()->::ru::mail::go::webbase::sekitei::Segment_r_ImageDiscoverySegmentInfo::MergeFrom(from.imagediscoverysegmentinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      qlinks_ = from.qlinks_;
    }
    if (cached_has_bits & 0x00000010u) {
      segment_num_ = from.segment_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      qlinks_count_ = from.qlinks_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      discovery_ = from.discovery_;
    }
    if (cached_has_bits & 0x00000080u) {
      discovery_count_ = from.discovery_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      specialsegment_ = from.specialsegment_;
    }
    if (cached_has_bits & 0x00000200u) {
      custra_count_ = from.custra_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      custrahave_count_ = from.custrahave_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      spamurls_ = from.spamurls_;
    }
    if (cached_has_bits & 0x00001000u) {
      pornurls_ = from.pornurls_;
    }
    if (cached_has_bits & 0x00002000u) {
      crawledurls_ = from.crawledurls_;
    }
    if (cached_has_bits & 0x00004000u) {
      failureurls_ = from.failureurls_;
    }
    if (cached_has_bits & 0x00008000u) {
      deadurls_ = from.deadurls_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      deadurlsmints_ = from.deadurlsmints_;
    }
    if (cached_has_bits & 0x00020000u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Segment_r::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.Segment_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment_r::CopyFrom(const Segment_r& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.Segment_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment_r::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (has_languagearray()) {
    if (!this->languagearray_->IsInitialized()) return false;
  }
  return true;
}

void Segment_r::Swap(Segment_r* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Segment_r::InternalSwap(Segment_r* other) {
  using std::swap;
  swap(stats_, other->stats_);
  swap(languagearray_, other->languagearray_);
  swap(imagediscoverysegmentinfo_, other->imagediscoverysegmentinfo_);
  swap(qlinks_, other->qlinks_);
  swap(segment_num_, other->segment_num_);
  swap(qlinks_count_, other->qlinks_count_);
  swap(discovery_, other->discovery_);
  swap(discovery_count_, other->discovery_count_);
  swap(specialsegment_, other->specialsegment_);
  swap(custra_count_, other->custra_count_);
  swap(custrahave_count_, other->custrahave_count_);
  swap(spamurls_, other->spamurls_);
  swap(pornurls_, other->pornurls_);
  swap(crawledurls_, other->crawledurls_);
  swap(failureurls_, other->failureurls_);
  swap(deadurls_, other->deadurls_);
  swap(deadurlsmints_, other->deadurlsmints_);
  swap(language_, other->language_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Segment_r::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Segment_r

// required int32 segment_num = 1;
bool Segment_r::has_segment_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Segment_r::set_has_segment_num() {
  _has_bits_[0] |= 0x00000010u;
}
void Segment_r::clear_has_segment_num() {
  _has_bits_[0] &= ~0x00000010u;
}
void Segment_r::clear_segment_num() {
  segment_num_ = 0;
  clear_has_segment_num();
}
::google::protobuf::int32 Segment_r::segment_num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.segment_num)
  return segment_num_;
}
void Segment_r::set_segment_num(::google::protobuf::int32 value) {
  set_has_segment_num();
  segment_num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.segment_num)
}

// optional double qlinks = 2 [default = 0];
bool Segment_r::has_qlinks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Segment_r::set_has_qlinks() {
  _has_bits_[0] |= 0x00000008u;
}
void Segment_r::clear_has_qlinks() {
  _has_bits_[0] &= ~0x00000008u;
}
void Segment_r::clear_qlinks() {
  qlinks_ = 0;
  clear_has_qlinks();
}
double Segment_r::qlinks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.qlinks)
  return qlinks_;
}
void Segment_r::set_qlinks(double value) {
  set_has_qlinks();
  qlinks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.qlinks)
}

// optional int32 qlinks_count = 3 [default = 0];
bool Segment_r::has_qlinks_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Segment_r::set_has_qlinks_count() {
  _has_bits_[0] |= 0x00000020u;
}
void Segment_r::clear_has_qlinks_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void Segment_r::clear_qlinks_count() {
  qlinks_count_ = 0;
  clear_has_qlinks_count();
}
::google::protobuf::int32 Segment_r::qlinks_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.qlinks_count)
  return qlinks_count_;
}
void Segment_r::set_qlinks_count(::google::protobuf::int32 value) {
  set_has_qlinks_count();
  qlinks_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.qlinks_count)
}

// optional double discovery = 4 [default = 0];
bool Segment_r::has_discovery() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Segment_r::set_has_discovery() {
  _has_bits_[0] |= 0x00000040u;
}
void Segment_r::clear_has_discovery() {
  _has_bits_[0] &= ~0x00000040u;
}
void Segment_r::clear_discovery() {
  discovery_ = 0;
  clear_has_discovery();
}
double Segment_r::discovery() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.discovery)
  return discovery_;
}
void Segment_r::set_discovery(double value) {
  set_has_discovery();
  discovery_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.discovery)
}

// optional int32 discovery_count = 5 [default = 0];
bool Segment_r::has_discovery_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Segment_r::set_has_discovery_count() {
  _has_bits_[0] |= 0x00000080u;
}
void Segment_r::clear_has_discovery_count() {
  _has_bits_[0] &= ~0x00000080u;
}
void Segment_r::clear_discovery_count() {
  discovery_count_ = 0;
  clear_has_discovery_count();
}
::google::protobuf::int32 Segment_r::discovery_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.discovery_count)
  return discovery_count_;
}
void Segment_r::set_discovery_count(::google::protobuf::int32 value) {
  set_has_discovery_count();
  discovery_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.discovery_count)
}

// optional .ru.mail.go.webbase.sekitei.FilterStats stats = 6;
bool Segment_r::has_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Segment_r::set_has_stats() {
  _has_bits_[0] |= 0x00000001u;
}
void Segment_r::clear_has_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
void Segment_r::clear_stats() {
  if (stats_ != NULL) stats_->::ru::mail::go::webbase::sekitei::FilterStats::Clear();
  clear_has_stats();
}
const ::ru::mail::go::webbase::sekitei::FilterStats& Segment_r::stats() const {
  const ::ru::mail::go::webbase::sekitei::FilterStats* p = stats_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::sekitei::FilterStats*>(
      &::ru::mail::go::webbase::sekitei::_FilterStats_default_instance_);
}
::ru::mail::go::webbase::sekitei::FilterStats* Segment_r::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) {
    stats_ = new ::ru::mail::go::webbase::sekitei::FilterStats;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Segment_r.stats)
  return stats_;
}
::ru::mail::go::webbase::sekitei::FilterStats* Segment_r::release_stats() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.sekitei.Segment_r.stats)
  clear_has_stats();
  ::ru::mail::go::webbase::sekitei::FilterStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void Segment_r::set_allocated_stats(::ru::mail::go::webbase::sekitei::FilterStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.sekitei.Segment_r.stats)
}

// optional bool specialSegment = 7 [default = false];
bool Segment_r::has_specialsegment() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Segment_r::set_has_specialsegment() {
  _has_bits_[0] |= 0x00000100u;
}
void Segment_r::clear_has_specialsegment() {
  _has_bits_[0] &= ~0x00000100u;
}
void Segment_r::clear_specialsegment() {
  specialsegment_ = false;
  clear_has_specialsegment();
}
bool Segment_r::specialsegment() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.specialSegment)
  return specialsegment_;
}
void Segment_r::set_specialsegment(bool value) {
  set_has_specialsegment();
  specialsegment_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.specialSegment)
}

// optional .ru.mail.go.webbase.sekitei.Segment_r.d_lang language = 8 [default = lang_unknown];
bool Segment_r::has_language() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Segment_r::set_has_language() {
  _has_bits_[0] |= 0x00020000u;
}
void Segment_r::clear_has_language() {
  _has_bits_[0] &= ~0x00020000u;
}
void Segment_r::clear_language() {
  language_ = 1;
  clear_has_language();
}
::ru::mail::go::webbase::sekitei::Segment_r_d_lang Segment_r::language() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.language)
  return static_cast< ::ru::mail::go::webbase::sekitei::Segment_r_d_lang >(language_);
}
void Segment_r::set_language(::ru::mail::go::webbase::sekitei::Segment_r_d_lang value) {
  assert(::ru::mail::go::webbase::sekitei::Segment_r_d_lang_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.language)
}

// optional int64 custra_count = 9 [default = 0];
bool Segment_r::has_custra_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Segment_r::set_has_custra_count() {
  _has_bits_[0] |= 0x00000200u;
}
void Segment_r::clear_has_custra_count() {
  _has_bits_[0] &= ~0x00000200u;
}
void Segment_r::clear_custra_count() {
  custra_count_ = GOOGLE_LONGLONG(0);
  clear_has_custra_count();
}
::google::protobuf::int64 Segment_r::custra_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.custra_count)
  return custra_count_;
}
void Segment_r::set_custra_count(::google::protobuf::int64 value) {
  set_has_custra_count();
  custra_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.custra_count)
}

// optional int64 custrahave_count = 10 [default = 0];
bool Segment_r::has_custrahave_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Segment_r::set_has_custrahave_count() {
  _has_bits_[0] |= 0x00000400u;
}
void Segment_r::clear_has_custrahave_count() {
  _has_bits_[0] &= ~0x00000400u;
}
void Segment_r::clear_custrahave_count() {
  custrahave_count_ = GOOGLE_LONGLONG(0);
  clear_has_custrahave_count();
}
::google::protobuf::int64 Segment_r::custrahave_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.custrahave_count)
  return custrahave_count_;
}
void Segment_r::set_custrahave_count(::google::protobuf::int64 value) {
  set_has_custrahave_count();
  custrahave_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.custrahave_count)
}

// optional .ru.mail.go.webbase.blobs.SiteLanguageArray languageArray = 11;
bool Segment_r::has_languagearray() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Segment_r::set_has_languagearray() {
  _has_bits_[0] |= 0x00000002u;
}
void Segment_r::clear_has_languagearray() {
  _has_bits_[0] &= ~0x00000002u;
}
void Segment_r::clear_languagearray() {
  if (languagearray_ != NULL) languagearray_->::ru::mail::go::webbase::blobs::SiteLanguageArray::Clear();
  clear_has_languagearray();
}
const ::ru::mail::go::webbase::blobs::SiteLanguageArray& Segment_r::languagearray() const {
  const ::ru::mail::go::webbase::blobs::SiteLanguageArray* p = languagearray_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.languageArray)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiteLanguageArray*>(
      &::ru::mail::go::webbase::blobs::_SiteLanguageArray_default_instance_);
}
::ru::mail::go::webbase::blobs::SiteLanguageArray* Segment_r::mutable_languagearray() {
  set_has_languagearray();
  if (languagearray_ == NULL) {
    languagearray_ = new ::ru::mail::go::webbase::blobs::SiteLanguageArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Segment_r.languageArray)
  return languagearray_;
}
::ru::mail::go::webbase::blobs::SiteLanguageArray* Segment_r::release_languagearray() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.sekitei.Segment_r.languageArray)
  clear_has_languagearray();
  ::ru::mail::go::webbase::blobs::SiteLanguageArray* temp = languagearray_;
  languagearray_ = NULL;
  return temp;
}
void Segment_r::set_allocated_languagearray(::ru::mail::go::webbase::blobs::SiteLanguageArray* languagearray) {
  delete languagearray_;
  languagearray_ = languagearray;
  if (languagearray) {
    set_has_languagearray();
  } else {
    clear_has_languagearray();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.sekitei.Segment_r.languageArray)
}

// optional int64 spamUrls = 12;
bool Segment_r::has_spamurls() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Segment_r::set_has_spamurls() {
  _has_bits_[0] |= 0x00000800u;
}
void Segment_r::clear_has_spamurls() {
  _has_bits_[0] &= ~0x00000800u;
}
void Segment_r::clear_spamurls() {
  spamurls_ = GOOGLE_LONGLONG(0);
  clear_has_spamurls();
}
::google::protobuf::int64 Segment_r::spamurls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.spamUrls)
  return spamurls_;
}
void Segment_r::set_spamurls(::google::protobuf::int64 value) {
  set_has_spamurls();
  spamurls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.spamUrls)
}

// optional int64 pornUrls = 13;
bool Segment_r::has_pornurls() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Segment_r::set_has_pornurls() {
  _has_bits_[0] |= 0x00001000u;
}
void Segment_r::clear_has_pornurls() {
  _has_bits_[0] &= ~0x00001000u;
}
void Segment_r::clear_pornurls() {
  pornurls_ = GOOGLE_LONGLONG(0);
  clear_has_pornurls();
}
::google::protobuf::int64 Segment_r::pornurls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.pornUrls)
  return pornurls_;
}
void Segment_r::set_pornurls(::google::protobuf::int64 value) {
  set_has_pornurls();
  pornurls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.pornUrls)
}

// optional int64 crawledUrls = 14;
bool Segment_r::has_crawledurls() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Segment_r::set_has_crawledurls() {
  _has_bits_[0] |= 0x00002000u;
}
void Segment_r::clear_has_crawledurls() {
  _has_bits_[0] &= ~0x00002000u;
}
void Segment_r::clear_crawledurls() {
  crawledurls_ = GOOGLE_LONGLONG(0);
  clear_has_crawledurls();
}
::google::protobuf::int64 Segment_r::crawledurls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.crawledUrls)
  return crawledurls_;
}
void Segment_r::set_crawledurls(::google::protobuf::int64 value) {
  set_has_crawledurls();
  crawledurls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.crawledUrls)
}

// optional int64 failureUrls = 15;
bool Segment_r::has_failureurls() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Segment_r::set_has_failureurls() {
  _has_bits_[0] |= 0x00004000u;
}
void Segment_r::clear_has_failureurls() {
  _has_bits_[0] &= ~0x00004000u;
}
void Segment_r::clear_failureurls() {
  failureurls_ = GOOGLE_LONGLONG(0);
  clear_has_failureurls();
}
::google::protobuf::int64 Segment_r::failureurls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.failureUrls)
  return failureurls_;
}
void Segment_r::set_failureurls(::google::protobuf::int64 value) {
  set_has_failureurls();
  failureurls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.failureUrls)
}

// optional int64 deadUrls = 16;
bool Segment_r::has_deadurls() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Segment_r::set_has_deadurls() {
  _has_bits_[0] |= 0x00008000u;
}
void Segment_r::clear_has_deadurls() {
  _has_bits_[0] &= ~0x00008000u;
}
void Segment_r::clear_deadurls() {
  deadurls_ = GOOGLE_LONGLONG(0);
  clear_has_deadurls();
}
::google::protobuf::int64 Segment_r::deadurls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.deadUrls)
  return deadurls_;
}
void Segment_r::set_deadurls(::google::protobuf::int64 value) {
  set_has_deadurls();
  deadurls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.deadUrls)
}

// optional int64 deadUrlsMinTs = 17;
bool Segment_r::has_deadurlsmints() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Segment_r::set_has_deadurlsmints() {
  _has_bits_[0] |= 0x00010000u;
}
void Segment_r::clear_has_deadurlsmints() {
  _has_bits_[0] &= ~0x00010000u;
}
void Segment_r::clear_deadurlsmints() {
  deadurlsmints_ = GOOGLE_LONGLONG(0);
  clear_has_deadurlsmints();
}
::google::protobuf::int64 Segment_r::deadurlsmints() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.deadUrlsMinTs)
  return deadurlsmints_;
}
void Segment_r::set_deadurlsmints(::google::protobuf::int64 value) {
  set_has_deadurlsmints();
  deadurlsmints_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_r.deadUrlsMinTs)
}

// optional .ru.mail.go.webbase.sekitei.Segment_r.ImageDiscoverySegmentInfo imageDiscoverySegmentInfo = 18;
bool Segment_r::has_imagediscoverysegmentinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Segment_r::set_has_imagediscoverysegmentinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void Segment_r::clear_has_imagediscoverysegmentinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void Segment_r::clear_imagediscoverysegmentinfo() {
  if (imagediscoverysegmentinfo_ != NULL) imagediscoverysegmentinfo_->::ru::mail::go::webbase::sekitei::Segment_r_ImageDiscoverySegmentInfo::Clear();
  clear_has_imagediscoverysegmentinfo();
}
const ::ru::mail::go::webbase::sekitei::Segment_r_ImageDiscoverySegmentInfo& Segment_r::imagediscoverysegmentinfo() const {
  const ::ru::mail::go::webbase::sekitei::Segment_r_ImageDiscoverySegmentInfo* p = imagediscoverysegmentinfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_r.imageDiscoverySegmentInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::sekitei::Segment_r_ImageDiscoverySegmentInfo*>(
      &::ru::mail::go::webbase::sekitei::_Segment_r_ImageDiscoverySegmentInfo_default_instance_);
}
::ru::mail::go::webbase::sekitei::Segment_r_ImageDiscoverySegmentInfo* Segment_r::mutable_imagediscoverysegmentinfo() {
  set_has_imagediscoverysegmentinfo();
  if (imagediscoverysegmentinfo_ == NULL) {
    imagediscoverysegmentinfo_ = new ::ru::mail::go::webbase::sekitei::Segment_r_ImageDiscoverySegmentInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Segment_r.imageDiscoverySegmentInfo)
  return imagediscoverysegmentinfo_;
}
::ru::mail::go::webbase::sekitei::Segment_r_ImageDiscoverySegmentInfo* Segment_r::release_imagediscoverysegmentinfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.sekitei.Segment_r.imageDiscoverySegmentInfo)
  clear_has_imagediscoverysegmentinfo();
  ::ru::mail::go::webbase::sekitei::Segment_r_ImageDiscoverySegmentInfo* temp = imagediscoverysegmentinfo_;
  imagediscoverysegmentinfo_ = NULL;
  return temp;
}
void Segment_r::set_allocated_imagediscoverysegmentinfo(::ru::mail::go::webbase::sekitei::Segment_r_ImageDiscoverySegmentInfo* imagediscoverysegmentinfo) {
  delete imagediscoverysegmentinfo_;
  imagediscoverysegmentinfo_ = imagediscoverysegmentinfo;
  if (imagediscoverysegmentinfo) {
    set_has_imagediscoverysegmentinfo();
  } else {
    clear_has_imagediscoverysegmentinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.sekitei.Segment_r.imageDiscoverySegmentInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Segment_l::kSegmentNumFieldNumber;
const int Segment_l::kSamplesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Segment_l::Segment_l()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.Segment_l)
}
Segment_l::Segment_l(const Segment_l& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      samples_(from.samples_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  segment_num_ = from.segment_num_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.Segment_l)
}

void Segment_l::SharedCtor() {
  _cached_size_ = 0;
  segment_num_ = 0;
}

Segment_l::~Segment_l() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.Segment_l)
  SharedDtor();
}

void Segment_l::SharedDtor() {
}

void Segment_l::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Segment_l::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Segment_l& Segment_l::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

Segment_l* Segment_l::New(::google::protobuf::Arena* arena) const {
  Segment_l* n = new Segment_l;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Segment_l::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.Segment_l)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samples_.Clear();
  segment_num_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Segment_l::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.Segment_l)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 segment_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_segment_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &segment_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string samples = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_samples()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->samples(this->samples_size() - 1).data(),
            static_cast<int>(this->samples(this->samples_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.sekitei.Segment_l.samples");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.Segment_l)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.Segment_l)
  return false;
#undef DO_
}

void Segment_l::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.Segment_l)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 segment_num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->segment_num(), output);
  }

  // repeated string samples = 2;
  for (int i = 0, n = this->samples_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->samples(i).data(), static_cast<int>(this->samples(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.sekitei.Segment_l.samples");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->samples(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.Segment_l)
}

::google::protobuf::uint8* Segment_l::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.Segment_l)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 segment_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->segment_num(), target);
  }

  // repeated string samples = 2;
  for (int i = 0, n = this->samples_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->samples(i).data(), static_cast<int>(this->samples(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.sekitei.Segment_l.samples");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->samples(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.Segment_l)
  return target;
}

size_t Segment_l::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.Segment_l)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 segment_num = 1;
  if (has_segment_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->segment_num());
  }
  // repeated string samples = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->samples_size());
  for (int i = 0, n = this->samples_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->samples(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Segment_l::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.Segment_l)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment_l* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Segment_l>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.Segment_l)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.Segment_l)
    MergeFrom(*source);
  }
}

void Segment_l::MergeFrom(const Segment_l& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.Segment_l)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  samples_.MergeFrom(from.samples_);
  if (from.has_segment_num()) {
    set_segment_num(from.segment_num());
  }
}

void Segment_l::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.Segment_l)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment_l::CopyFrom(const Segment_l& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.Segment_l)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment_l::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Segment_l::Swap(Segment_l* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Segment_l::InternalSwap(Segment_l* other) {
  using std::swap;
  samples_.InternalSwap(&other->samples_);
  swap(segment_num_, other->segment_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Segment_l::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Segment_l

// required int32 segment_num = 1;
bool Segment_l::has_segment_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Segment_l::set_has_segment_num() {
  _has_bits_[0] |= 0x00000001u;
}
void Segment_l::clear_has_segment_num() {
  _has_bits_[0] &= ~0x00000001u;
}
void Segment_l::clear_segment_num() {
  segment_num_ = 0;
  clear_has_segment_num();
}
::google::protobuf::int32 Segment_l::segment_num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_l.segment_num)
  return segment_num_;
}
void Segment_l::set_segment_num(::google::protobuf::int32 value) {
  set_has_segment_num();
  segment_num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_l.segment_num)
}

// repeated string samples = 2;
int Segment_l::samples_size() const {
  return samples_.size();
}
void Segment_l::clear_samples() {
  samples_.Clear();
}
const ::std::string& Segment_l::samples(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_l.samples)
  return samples_.Get(index);
}
::std::string* Segment_l::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Segment_l.samples)
  return samples_.Mutable(index);
}
void Segment_l::set_samples(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_l.samples)
  samples_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Segment_l::set_samples(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_l.samples)
  samples_.Mutable(index)->assign(std::move(value));
}
#endif
void Segment_l::set_samples(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  samples_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.sekitei.Segment_l.samples)
}
void Segment_l::set_samples(int index, const char* value, size_t size) {
  samples_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.sekitei.Segment_l.samples)
}
::std::string* Segment_l::add_samples() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.sekitei.Segment_l.samples)
  return samples_.Add();
}
void Segment_l::add_samples(const ::std::string& value) {
  samples_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.sekitei.Segment_l.samples)
}
#if LANG_CXX11
void Segment_l::add_samples(::std::string&& value) {
  samples_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.sekitei.Segment_l.samples)
}
#endif
void Segment_l::add_samples(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  samples_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.sekitei.Segment_l.samples)
}
void Segment_l::add_samples(const char* value, size_t size) {
  samples_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.sekitei.Segment_l.samples)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Segment_l::samples() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.sekitei.Segment_l.samples)
  return samples_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Segment_l::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.sekitei.Segment_l.samples)
  return &samples_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Segment_s_ImageDiscoverySegmentStat::kTotalQuotaFieldNumber;
const int Segment_s_ImageDiscoverySegmentStat::kMarkerQuotaFieldNumber;
const int Segment_s_ImageDiscoverySegmentStat::kUsualQuotaFieldNumber;
const int Segment_s_ImageDiscoverySegmentStat::kQuotaUsedFieldNumber;
const int Segment_s_ImageDiscoverySegmentStat::kNeededFieldNumber;
const int Segment_s_ImageDiscoverySegmentStat::kSkippedFieldNumber;
const int Segment_s_ImageDiscoverySegmentStat::kTrashQuotaFieldNumber;
const int Segment_s_ImageDiscoverySegmentStat::kTrashQuotaUsedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Segment_s_ImageDiscoverySegmentStat::Segment_s_ImageDiscoverySegmentStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
}
Segment_s_ImageDiscoverySegmentStat::Segment_s_ImageDiscoverySegmentStat(const Segment_s_ImageDiscoverySegmentStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&totalquota_, &from.totalquota_,
    static_cast<size_t>(reinterpret_cast<char*>(&trashquotaused_) -
    reinterpret_cast<char*>(&totalquota_)) + sizeof(trashquotaused_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
}

void Segment_s_ImageDiscoverySegmentStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&totalquota_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trashquotaused_) -
      reinterpret_cast<char*>(&totalquota_)) + sizeof(trashquotaused_));
}

Segment_s_ImageDiscoverySegmentStat::~Segment_s_ImageDiscoverySegmentStat() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
  SharedDtor();
}

void Segment_s_ImageDiscoverySegmentStat::SharedDtor() {
}

void Segment_s_ImageDiscoverySegmentStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Segment_s_ImageDiscoverySegmentStat::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Segment_s_ImageDiscoverySegmentStat& Segment_s_ImageDiscoverySegmentStat::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

Segment_s_ImageDiscoverySegmentStat* Segment_s_ImageDiscoverySegmentStat::New(::google::protobuf::Arena* arena) const {
  Segment_s_ImageDiscoverySegmentStat* n = new Segment_s_ImageDiscoverySegmentStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Segment_s_ImageDiscoverySegmentStat::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&totalquota_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trashquotaused_) -
        reinterpret_cast<char*>(&totalquota_)) + sizeof(trashquotaused_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Segment_s_ImageDiscoverySegmentStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 totalQuota = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_totalquota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 markerQuota = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_markerquota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &markerquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 usualQuota = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_usualquota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usualquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quotaUsed = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_quotaused();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quotaused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 needed = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_needed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 skipped = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_skipped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skipped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 trashQuota = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_trashquota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trashquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 trashQuotaUsed = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_trashquotaused();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trashquotaused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
  return false;
#undef DO_
}

void Segment_s_ImageDiscoverySegmentStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 totalQuota = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalquota(), output);
  }

  // optional int32 markerQuota = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->markerquota(), output);
  }

  // optional int32 usualQuota = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usualquota(), output);
  }

  // optional int32 quotaUsed = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quotaused(), output);
  }

  // optional int32 needed = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->needed(), output);
  }

  // optional int32 skipped = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skipped(), output);
  }

  // optional int32 trashQuota = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->trashquota(), output);
  }

  // optional int32 trashQuotaUsed = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->trashquotaused(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
}

::google::protobuf::uint8* Segment_s_ImageDiscoverySegmentStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 totalQuota = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalquota(), target);
  }

  // optional int32 markerQuota = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->markerquota(), target);
  }

  // optional int32 usualQuota = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usualquota(), target);
  }

  // optional int32 quotaUsed = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quotaused(), target);
  }

  // optional int32 needed = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->needed(), target);
  }

  // optional int32 skipped = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skipped(), target);
  }

  // optional int32 trashQuota = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->trashquota(), target);
  }

  // optional int32 trashQuotaUsed = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->trashquotaused(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
  return target;
}

size_t Segment_s_ImageDiscoverySegmentStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 totalQuota = 1 [default = 0];
    if (has_totalquota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalquota());
    }

    // optional int32 markerQuota = 2 [default = 0];
    if (has_markerquota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->markerquota());
    }

    // optional int32 usualQuota = 3 [default = 0];
    if (has_usualquota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usualquota());
    }

    // optional int32 quotaUsed = 4 [default = 0];
    if (has_quotaused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quotaused());
    }

    // optional int32 needed = 5 [default = 0];
    if (has_needed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needed());
    }

    // optional int32 skipped = 6 [default = 0];
    if (has_skipped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skipped());
    }

    // optional int32 trashQuota = 7 [default = 0];
    if (has_trashquota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trashquota());
    }

    // optional int32 trashQuotaUsed = 8 [default = 0];
    if (has_trashquotaused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trashquotaused());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Segment_s_ImageDiscoverySegmentStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment_s_ImageDiscoverySegmentStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Segment_s_ImageDiscoverySegmentStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
    MergeFrom(*source);
  }
}

void Segment_s_ImageDiscoverySegmentStat::MergeFrom(const Segment_s_ImageDiscoverySegmentStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      totalquota_ = from.totalquota_;
    }
    if (cached_has_bits & 0x00000002u) {
      markerquota_ = from.markerquota_;
    }
    if (cached_has_bits & 0x00000004u) {
      usualquota_ = from.usualquota_;
    }
    if (cached_has_bits & 0x00000008u) {
      quotaused_ = from.quotaused_;
    }
    if (cached_has_bits & 0x00000010u) {
      needed_ = from.needed_;
    }
    if (cached_has_bits & 0x00000020u) {
      skipped_ = from.skipped_;
    }
    if (cached_has_bits & 0x00000040u) {
      trashquota_ = from.trashquota_;
    }
    if (cached_has_bits & 0x00000080u) {
      trashquotaused_ = from.trashquotaused_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Segment_s_ImageDiscoverySegmentStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment_s_ImageDiscoverySegmentStat::CopyFrom(const Segment_s_ImageDiscoverySegmentStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment_s_ImageDiscoverySegmentStat::IsInitialized() const {
  return true;
}

void Segment_s_ImageDiscoverySegmentStat::Swap(Segment_s_ImageDiscoverySegmentStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Segment_s_ImageDiscoverySegmentStat::InternalSwap(Segment_s_ImageDiscoverySegmentStat* other) {
  using std::swap;
  swap(totalquota_, other->totalquota_);
  swap(markerquota_, other->markerquota_);
  swap(usualquota_, other->usualquota_);
  swap(quotaused_, other->quotaused_);
  swap(needed_, other->needed_);
  swap(skipped_, other->skipped_);
  swap(trashquota_, other->trashquota_);
  swap(trashquotaused_, other->trashquotaused_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Segment_s_ImageDiscoverySegmentStat::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Segment_s_ImageDiscoverySegmentStat

// optional int32 totalQuota = 1 [default = 0];
bool Segment_s_ImageDiscoverySegmentStat::has_totalquota() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Segment_s_ImageDiscoverySegmentStat::set_has_totalquota() {
  _has_bits_[0] |= 0x00000001u;
}
void Segment_s_ImageDiscoverySegmentStat::clear_has_totalquota() {
  _has_bits_[0] &= ~0x00000001u;
}
void Segment_s_ImageDiscoverySegmentStat::clear_totalquota() {
  totalquota_ = 0;
  clear_has_totalquota();
}
::google::protobuf::int32 Segment_s_ImageDiscoverySegmentStat::totalquota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat.totalQuota)
  return totalquota_;
}
void Segment_s_ImageDiscoverySegmentStat::set_totalquota(::google::protobuf::int32 value) {
  set_has_totalquota();
  totalquota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat.totalQuota)
}

// optional int32 markerQuota = 2 [default = 0];
bool Segment_s_ImageDiscoverySegmentStat::has_markerquota() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Segment_s_ImageDiscoverySegmentStat::set_has_markerquota() {
  _has_bits_[0] |= 0x00000002u;
}
void Segment_s_ImageDiscoverySegmentStat::clear_has_markerquota() {
  _has_bits_[0] &= ~0x00000002u;
}
void Segment_s_ImageDiscoverySegmentStat::clear_markerquota() {
  markerquota_ = 0;
  clear_has_markerquota();
}
::google::protobuf::int32 Segment_s_ImageDiscoverySegmentStat::markerquota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat.markerQuota)
  return markerquota_;
}
void Segment_s_ImageDiscoverySegmentStat::set_markerquota(::google::protobuf::int32 value) {
  set_has_markerquota();
  markerquota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat.markerQuota)
}

// optional int32 usualQuota = 3 [default = 0];
bool Segment_s_ImageDiscoverySegmentStat::has_usualquota() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Segment_s_ImageDiscoverySegmentStat::set_has_usualquota() {
  _has_bits_[0] |= 0x00000004u;
}
void Segment_s_ImageDiscoverySegmentStat::clear_has_usualquota() {
  _has_bits_[0] &= ~0x00000004u;
}
void Segment_s_ImageDiscoverySegmentStat::clear_usualquota() {
  usualquota_ = 0;
  clear_has_usualquota();
}
::google::protobuf::int32 Segment_s_ImageDiscoverySegmentStat::usualquota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat.usualQuota)
  return usualquota_;
}
void Segment_s_ImageDiscoverySegmentStat::set_usualquota(::google::protobuf::int32 value) {
  set_has_usualquota();
  usualquota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat.usualQuota)
}

// optional int32 quotaUsed = 4 [default = 0];
bool Segment_s_ImageDiscoverySegmentStat::has_quotaused() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Segment_s_ImageDiscoverySegmentStat::set_has_quotaused() {
  _has_bits_[0] |= 0x00000008u;
}
void Segment_s_ImageDiscoverySegmentStat::clear_has_quotaused() {
  _has_bits_[0] &= ~0x00000008u;
}
void Segment_s_ImageDiscoverySegmentStat::clear_quotaused() {
  quotaused_ = 0;
  clear_has_quotaused();
}
::google::protobuf::int32 Segment_s_ImageDiscoverySegmentStat::quotaused() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat.quotaUsed)
  return quotaused_;
}
void Segment_s_ImageDiscoverySegmentStat::set_quotaused(::google::protobuf::int32 value) {
  set_has_quotaused();
  quotaused_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat.quotaUsed)
}

// optional int32 needed = 5 [default = 0];
bool Segment_s_ImageDiscoverySegmentStat::has_needed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Segment_s_ImageDiscoverySegmentStat::set_has_needed() {
  _has_bits_[0] |= 0x00000010u;
}
void Segment_s_ImageDiscoverySegmentStat::clear_has_needed() {
  _has_bits_[0] &= ~0x00000010u;
}
void Segment_s_ImageDiscoverySegmentStat::clear_needed() {
  needed_ = 0;
  clear_has_needed();
}
::google::protobuf::int32 Segment_s_ImageDiscoverySegmentStat::needed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat.needed)
  return needed_;
}
void Segment_s_ImageDiscoverySegmentStat::set_needed(::google::protobuf::int32 value) {
  set_has_needed();
  needed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat.needed)
}

// optional int32 skipped = 6 [default = 0];
bool Segment_s_ImageDiscoverySegmentStat::has_skipped() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Segment_s_ImageDiscoverySegmentStat::set_has_skipped() {
  _has_bits_[0] |= 0x00000020u;
}
void Segment_s_ImageDiscoverySegmentStat::clear_has_skipped() {
  _has_bits_[0] &= ~0x00000020u;
}
void Segment_s_ImageDiscoverySegmentStat::clear_skipped() {
  skipped_ = 0;
  clear_has_skipped();
}
::google::protobuf::int32 Segment_s_ImageDiscoverySegmentStat::skipped() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat.skipped)
  return skipped_;
}
void Segment_s_ImageDiscoverySegmentStat::set_skipped(::google::protobuf::int32 value) {
  set_has_skipped();
  skipped_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat.skipped)
}

// optional int32 trashQuota = 7 [default = 0];
bool Segment_s_ImageDiscoverySegmentStat::has_trashquota() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Segment_s_ImageDiscoverySegmentStat::set_has_trashquota() {
  _has_bits_[0] |= 0x00000040u;
}
void Segment_s_ImageDiscoverySegmentStat::clear_has_trashquota() {
  _has_bits_[0] &= ~0x00000040u;
}
void Segment_s_ImageDiscoverySegmentStat::clear_trashquota() {
  trashquota_ = 0;
  clear_has_trashquota();
}
::google::protobuf::int32 Segment_s_ImageDiscoverySegmentStat::trashquota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat.trashQuota)
  return trashquota_;
}
void Segment_s_ImageDiscoverySegmentStat::set_trashquota(::google::protobuf::int32 value) {
  set_has_trashquota();
  trashquota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat.trashQuota)
}

// optional int32 trashQuotaUsed = 8 [default = 0];
bool Segment_s_ImageDiscoverySegmentStat::has_trashquotaused() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Segment_s_ImageDiscoverySegmentStat::set_has_trashquotaused() {
  _has_bits_[0] |= 0x00000080u;
}
void Segment_s_ImageDiscoverySegmentStat::clear_has_trashquotaused() {
  _has_bits_[0] &= ~0x00000080u;
}
void Segment_s_ImageDiscoverySegmentStat::clear_trashquotaused() {
  trashquotaused_ = 0;
  clear_has_trashquotaused();
}
::google::protobuf::int32 Segment_s_ImageDiscoverySegmentStat::trashquotaused() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat.trashQuotaUsed)
  return trashquotaused_;
}
void Segment_s_ImageDiscoverySegmentStat::set_trashquotaused(::google::protobuf::int32 value) {
  set_has_trashquotaused();
  trashquotaused_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat.trashQuotaUsed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Segment_s::kSegmentNumFieldNumber;
const int Segment_s::kMaxQuotaFieldNumber;
const int Segment_s::kFairQuotaFieldNumber;
const int Segment_s::kRealQuotaFieldNumber;
const int Segment_s::kUrlsFieldNumber;
const int Segment_s::kUrlsRejectedFieldNumber;
const int Segment_s::kUrlsSkippedFieldNumber;
const int Segment_s::kTrashUrlsFieldNumber;
const int Segment_s::kCurrentBatchedFieldNumber;
const int Segment_s::kBackupUrlsFieldNumber;
const int Segment_s::kDeletedUrlsFieldNumber;
const int Segment_s::kImageDiscoveryStatFieldNumber;
const int Segment_s::kDescriptionFieldNumber;
const int Segment_s::kExtraStonesBonusFieldNumber;
const int Segment_s::kExtraStonesBonusUsedFieldNumber;
const int Segment_s::kSplittedSchedulingFieldNumber;
const int Segment_s::kSuperUrlsFieldNumber;
const int Segment_s::kQlinksUrlsFieldNumber;
const int Segment_s::kUruqUrlsFieldNumber;
const int Segment_s::kLiruUrlsFieldNumber;
const int Segment_s::kTopUrlsFieldNumber;
const int Segment_s::kVkAwayUrlsFieldNumber;
const int Segment_s::kVkSharesUrlsFieldNumber;
const int Segment_s::kWeakQlinksUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Segment_s::Segment_s()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.Segment_s)
}
Segment_s::Segment_s(const Segment_s& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_imagediscoverystat()) {
    imagediscoverystat_ = new ::ru::mail::go::webbase::sekitei::Segment_s_ImageDiscoverySegmentStat(*from.imagediscoverystat_);
  } else {
    imagediscoverystat_ = NULL;
  }
  ::memcpy(&max_quota_, &from.max_quota_,
    static_cast<size_t>(reinterpret_cast<char*>(&weak_qlinks_urls_) -
    reinterpret_cast<char*>(&max_quota_)) + sizeof(weak_qlinks_urls_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.Segment_s)
}

void Segment_s::SharedCtor() {
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&imagediscoverystat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weak_qlinks_urls_) -
      reinterpret_cast<char*>(&imagediscoverystat_)) + sizeof(weak_qlinks_urls_));
}

Segment_s::~Segment_s() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.Segment_s)
  SharedDtor();
}

void Segment_s::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete imagediscoverystat_;
}

void Segment_s::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Segment_s::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Segment_s& Segment_s::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

Segment_s* Segment_s::New(::google::protobuf::Arena* arena) const {
  Segment_s* n = new Segment_s;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Segment_s::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.Segment_s)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(imagediscoverystat_ != NULL);
      imagediscoverystat_->::ru::mail::go::webbase::sekitei::Segment_s_ImageDiscoverySegmentStat::Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&max_quota_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&urls_skipped_) -
        reinterpret_cast<char*>(&max_quota_)) + sizeof(urls_skipped_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&segment_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&splitted_scheduling_) -
        reinterpret_cast<char*>(&segment_num_)) + sizeof(splitted_scheduling_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&super_urls_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weak_qlinks_urls_) -
        reinterpret_cast<char*>(&super_urls_)) + sizeof(weak_qlinks_urls_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Segment_s::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.Segment_s)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 segment_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_segment_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &segment_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_quota = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max_quota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 fair_quota = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_fair_quota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fair_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 real_quota = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_real_quota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &real_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 urls = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 urls_rejected = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_urls_rejected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &urls_rejected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 urls_skipped = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_urls_skipped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &urls_skipped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 trash_urls = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_trash_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trash_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 current_batched = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_current_batched();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_batched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 backup_urls = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_backup_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &backup_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 deleted_urls = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_deleted_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deleted_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat imageDiscoveryStat = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagediscoverystat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.sekitei.Segment_s.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 extra_stones_bonus = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_extra_stones_bonus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_stones_bonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 extra_stones_bonus_used = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_extra_stones_bonus_used();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_stones_bonus_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool splitted_scheduling = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_splitted_scheduling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &splitted_scheduling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 super_urls = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_super_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &super_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 qlinks_urls = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_qlinks_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &qlinks_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 uruq_urls = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_uruq_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uruq_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 liru_urls = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_liru_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &liru_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 top_urls = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_top_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &top_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 vk_away_urls = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_vk_away_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vk_away_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 vk_shares_urls = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_vk_shares_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vk_shares_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 weak_qlinks_urls = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_weak_qlinks_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &weak_qlinks_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.Segment_s)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.Segment_s)
  return false;
#undef DO_
}

void Segment_s::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.Segment_s)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 segment_num = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->segment_num(), output);
  }

  // optional int64 max_quota = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_quota(), output);
  }

  // optional int64 fair_quota = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->fair_quota(), output);
  }

  // optional int64 real_quota = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->real_quota(), output);
  }

  // optional int64 urls = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->urls(), output);
  }

  // optional int64 urls_rejected = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->urls_rejected(), output);
  }

  // optional int64 urls_skipped = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->urls_skipped(), output);
  }

  // optional int64 trash_urls = 8 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->trash_urls(), output);
  }

  // optional int64 current_batched = 9 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->current_batched(), output);
  }

  // optional int64 backup_urls = 10 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->backup_urls(), output);
  }

  // optional int64 deleted_urls = 11 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->deleted_urls(), output);
  }

  // optional .ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat imageDiscoveryStat = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->imagediscoverystat_, output);
  }

  // optional string description = 13;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.sekitei.Segment_s.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->description(), output);
  }

  // optional int32 extra_stones_bonus = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->extra_stones_bonus(), output);
  }

  // optional int32 extra_stones_bonus_used = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->extra_stones_bonus_used(), output);
  }

  // optional bool splitted_scheduling = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->splitted_scheduling(), output);
  }

  // optional int64 super_urls = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->super_urls(), output);
  }

  // optional int64 qlinks_urls = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->qlinks_urls(), output);
  }

  // optional int64 uruq_urls = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->uruq_urls(), output);
  }

  // optional int64 liru_urls = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->liru_urls(), output);
  }

  // optional int64 top_urls = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->top_urls(), output);
  }

  // optional int64 vk_away_urls = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->vk_away_urls(), output);
  }

  // optional int64 vk_shares_urls = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->vk_shares_urls(), output);
  }

  // optional int64 weak_qlinks_urls = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->weak_qlinks_urls(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.Segment_s)
}

::google::protobuf::uint8* Segment_s::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.Segment_s)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 segment_num = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->segment_num(), target);
  }

  // optional int64 max_quota = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max_quota(), target);
  }

  // optional int64 fair_quota = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->fair_quota(), target);
  }

  // optional int64 real_quota = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->real_quota(), target);
  }

  // optional int64 urls = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->urls(), target);
  }

  // optional int64 urls_rejected = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->urls_rejected(), target);
  }

  // optional int64 urls_skipped = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->urls_skipped(), target);
  }

  // optional int64 trash_urls = 8 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->trash_urls(), target);
  }

  // optional int64 current_batched = 9 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->current_batched(), target);
  }

  // optional int64 backup_urls = 10 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->backup_urls(), target);
  }

  // optional int64 deleted_urls = 11 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->deleted_urls(), target);
  }

  // optional .ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat imageDiscoveryStat = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->imagediscoverystat_, deterministic, target);
  }

  // optional string description = 13;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.sekitei.Segment_s.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->description(), target);
  }

  // optional int32 extra_stones_bonus = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->extra_stones_bonus(), target);
  }

  // optional int32 extra_stones_bonus_used = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->extra_stones_bonus_used(), target);
  }

  // optional bool splitted_scheduling = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->splitted_scheduling(), target);
  }

  // optional int64 super_urls = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->super_urls(), target);
  }

  // optional int64 qlinks_urls = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->qlinks_urls(), target);
  }

  // optional int64 uruq_urls = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->uruq_urls(), target);
  }

  // optional int64 liru_urls = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->liru_urls(), target);
  }

  // optional int64 top_urls = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->top_urls(), target);
  }

  // optional int64 vk_away_urls = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->vk_away_urls(), target);
  }

  // optional int64 vk_shares_urls = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->vk_shares_urls(), target);
  }

  // optional int64 weak_qlinks_urls = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->weak_qlinks_urls(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.Segment_s)
  return target;
}

size_t Segment_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.Segment_s)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 segment_num = 1;
  if (has_segment_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->segment_num());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string description = 13;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat imageDiscoveryStat = 12;
    if (has_imagediscoverystat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imagediscoverystat_);
    }

    // optional int64 max_quota = 2 [default = 0];
    if (has_max_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_quota());
    }

    // optional int64 fair_quota = 3 [default = 0];
    if (has_fair_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fair_quota());
    }

    // optional int64 real_quota = 4 [default = 0];
    if (has_real_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->real_quota());
    }

    // optional int64 urls = 5 [default = 0];
    if (has_urls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->urls());
    }

    // optional int64 urls_rejected = 6 [default = 0];
    if (has_urls_rejected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->urls_rejected());
    }

    // optional int64 urls_skipped = 7 [default = 0];
    if (has_urls_skipped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->urls_skipped());
    }

  }
  if (_has_bits_[8 / 32] & 65024u) {
    // optional int32 extra_stones_bonus = 14;
    if (has_extra_stones_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extra_stones_bonus());
    }

    // optional int64 trash_urls = 8 [default = 0];
    if (has_trash_urls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->trash_urls());
    }

    // optional int64 current_batched = 9 [default = 0];
    if (has_current_batched()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->current_batched());
    }

    // optional int64 backup_urls = 10 [default = 0];
    if (has_backup_urls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->backup_urls());
    }

    // optional int64 deleted_urls = 11 [default = 0];
    if (has_deleted_urls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deleted_urls());
    }

    // optional int32 extra_stones_bonus_used = 15;
    if (has_extra_stones_bonus_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extra_stones_bonus_used());
    }

    // optional bool splitted_scheduling = 16;
    if (has_splitted_scheduling()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int64 super_urls = 18;
    if (has_super_urls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->super_urls());
    }

    // optional int64 qlinks_urls = 19;
    if (has_qlinks_urls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->qlinks_urls());
    }

    // optional int64 uruq_urls = 20;
    if (has_uruq_urls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uruq_urls());
    }

    // optional int64 liru_urls = 21;
    if (has_liru_urls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->liru_urls());
    }

    // optional int64 top_urls = 22;
    if (has_top_urls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->top_urls());
    }

    // optional int64 vk_away_urls = 23;
    if (has_vk_away_urls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vk_away_urls());
    }

    // optional int64 vk_shares_urls = 24;
    if (has_vk_shares_urls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vk_shares_urls());
    }

    // optional int64 weak_qlinks_urls = 25;
    if (has_weak_qlinks_urls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->weak_qlinks_urls());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Segment_s::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.Segment_s)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment_s* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Segment_s>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.Segment_s)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.Segment_s)
    MergeFrom(*source);
  }
}

void Segment_s::MergeFrom(const Segment_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.Segment_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_imagediscoverystat()->::ru::mail::go::webbase::sekitei::Segment_s_ImageDiscoverySegmentStat::MergeFrom(from.imagediscoverystat());
    }
    if (cached_has_bits & 0x00000004u) {
      max_quota_ = from.max_quota_;
    }
    if (cached_has_bits & 0x00000008u) {
      fair_quota_ = from.fair_quota_;
    }
    if (cached_has_bits & 0x00000010u) {
      real_quota_ = from.real_quota_;
    }
    if (cached_has_bits & 0x00000020u) {
      urls_ = from.urls_;
    }
    if (cached_has_bits & 0x00000040u) {
      urls_rejected_ = from.urls_rejected_;
    }
    if (cached_has_bits & 0x00000080u) {
      urls_skipped_ = from.urls_skipped_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      segment_num_ = from.segment_num_;
    }
    if (cached_has_bits & 0x00000200u) {
      extra_stones_bonus_ = from.extra_stones_bonus_;
    }
    if (cached_has_bits & 0x00000400u) {
      trash_urls_ = from.trash_urls_;
    }
    if (cached_has_bits & 0x00000800u) {
      current_batched_ = from.current_batched_;
    }
    if (cached_has_bits & 0x00001000u) {
      backup_urls_ = from.backup_urls_;
    }
    if (cached_has_bits & 0x00002000u) {
      deleted_urls_ = from.deleted_urls_;
    }
    if (cached_has_bits & 0x00004000u) {
      extra_stones_bonus_used_ = from.extra_stones_bonus_used_;
    }
    if (cached_has_bits & 0x00008000u) {
      splitted_scheduling_ = from.splitted_scheduling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      super_urls_ = from.super_urls_;
    }
    if (cached_has_bits & 0x00020000u) {
      qlinks_urls_ = from.qlinks_urls_;
    }
    if (cached_has_bits & 0x00040000u) {
      uruq_urls_ = from.uruq_urls_;
    }
    if (cached_has_bits & 0x00080000u) {
      liru_urls_ = from.liru_urls_;
    }
    if (cached_has_bits & 0x00100000u) {
      top_urls_ = from.top_urls_;
    }
    if (cached_has_bits & 0x00200000u) {
      vk_away_urls_ = from.vk_away_urls_;
    }
    if (cached_has_bits & 0x00400000u) {
      vk_shares_urls_ = from.vk_shares_urls_;
    }
    if (cached_has_bits & 0x00800000u) {
      weak_qlinks_urls_ = from.weak_qlinks_urls_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Segment_s::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.Segment_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment_s::CopyFrom(const Segment_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.Segment_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment_s::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  return true;
}

void Segment_s::Swap(Segment_s* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Segment_s::InternalSwap(Segment_s* other) {
  using std::swap;
  description_.Swap(&other->description_);
  swap(imagediscoverystat_, other->imagediscoverystat_);
  swap(max_quota_, other->max_quota_);
  swap(fair_quota_, other->fair_quota_);
  swap(real_quota_, other->real_quota_);
  swap(urls_, other->urls_);
  swap(urls_rejected_, other->urls_rejected_);
  swap(urls_skipped_, other->urls_skipped_);
  swap(segment_num_, other->segment_num_);
  swap(extra_stones_bonus_, other->extra_stones_bonus_);
  swap(trash_urls_, other->trash_urls_);
  swap(current_batched_, other->current_batched_);
  swap(backup_urls_, other->backup_urls_);
  swap(deleted_urls_, other->deleted_urls_);
  swap(extra_stones_bonus_used_, other->extra_stones_bonus_used_);
  swap(splitted_scheduling_, other->splitted_scheduling_);
  swap(super_urls_, other->super_urls_);
  swap(qlinks_urls_, other->qlinks_urls_);
  swap(uruq_urls_, other->uruq_urls_);
  swap(liru_urls_, other->liru_urls_);
  swap(top_urls_, other->top_urls_);
  swap(vk_away_urls_, other->vk_away_urls_);
  swap(vk_shares_urls_, other->vk_shares_urls_);
  swap(weak_qlinks_urls_, other->weak_qlinks_urls_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Segment_s::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Segment_s

// required int32 segment_num = 1;
bool Segment_s::has_segment_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Segment_s::set_has_segment_num() {
  _has_bits_[0] |= 0x00000100u;
}
void Segment_s::clear_has_segment_num() {
  _has_bits_[0] &= ~0x00000100u;
}
void Segment_s::clear_segment_num() {
  segment_num_ = 0;
  clear_has_segment_num();
}
::google::protobuf::int32 Segment_s::segment_num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.segment_num)
  return segment_num_;
}
void Segment_s::set_segment_num(::google::protobuf::int32 value) {
  set_has_segment_num();
  segment_num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.segment_num)
}

// optional int64 max_quota = 2 [default = 0];
bool Segment_s::has_max_quota() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Segment_s::set_has_max_quota() {
  _has_bits_[0] |= 0x00000004u;
}
void Segment_s::clear_has_max_quota() {
  _has_bits_[0] &= ~0x00000004u;
}
void Segment_s::clear_max_quota() {
  max_quota_ = GOOGLE_LONGLONG(0);
  clear_has_max_quota();
}
::google::protobuf::int64 Segment_s::max_quota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.max_quota)
  return max_quota_;
}
void Segment_s::set_max_quota(::google::protobuf::int64 value) {
  set_has_max_quota();
  max_quota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.max_quota)
}

// optional int64 fair_quota = 3 [default = 0];
bool Segment_s::has_fair_quota() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Segment_s::set_has_fair_quota() {
  _has_bits_[0] |= 0x00000008u;
}
void Segment_s::clear_has_fair_quota() {
  _has_bits_[0] &= ~0x00000008u;
}
void Segment_s::clear_fair_quota() {
  fair_quota_ = GOOGLE_LONGLONG(0);
  clear_has_fair_quota();
}
::google::protobuf::int64 Segment_s::fair_quota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.fair_quota)
  return fair_quota_;
}
void Segment_s::set_fair_quota(::google::protobuf::int64 value) {
  set_has_fair_quota();
  fair_quota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.fair_quota)
}

// optional int64 real_quota = 4 [default = 0];
bool Segment_s::has_real_quota() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Segment_s::set_has_real_quota() {
  _has_bits_[0] |= 0x00000010u;
}
void Segment_s::clear_has_real_quota() {
  _has_bits_[0] &= ~0x00000010u;
}
void Segment_s::clear_real_quota() {
  real_quota_ = GOOGLE_LONGLONG(0);
  clear_has_real_quota();
}
::google::protobuf::int64 Segment_s::real_quota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.real_quota)
  return real_quota_;
}
void Segment_s::set_real_quota(::google::protobuf::int64 value) {
  set_has_real_quota();
  real_quota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.real_quota)
}

// optional int64 urls = 5 [default = 0];
bool Segment_s::has_urls() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Segment_s::set_has_urls() {
  _has_bits_[0] |= 0x00000020u;
}
void Segment_s::clear_has_urls() {
  _has_bits_[0] &= ~0x00000020u;
}
void Segment_s::clear_urls() {
  urls_ = GOOGLE_LONGLONG(0);
  clear_has_urls();
}
::google::protobuf::int64 Segment_s::urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.urls)
  return urls_;
}
void Segment_s::set_urls(::google::protobuf::int64 value) {
  set_has_urls();
  urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.urls)
}

// optional int64 urls_rejected = 6 [default = 0];
bool Segment_s::has_urls_rejected() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Segment_s::set_has_urls_rejected() {
  _has_bits_[0] |= 0x00000040u;
}
void Segment_s::clear_has_urls_rejected() {
  _has_bits_[0] &= ~0x00000040u;
}
void Segment_s::clear_urls_rejected() {
  urls_rejected_ = GOOGLE_LONGLONG(0);
  clear_has_urls_rejected();
}
::google::protobuf::int64 Segment_s::urls_rejected() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.urls_rejected)
  return urls_rejected_;
}
void Segment_s::set_urls_rejected(::google::protobuf::int64 value) {
  set_has_urls_rejected();
  urls_rejected_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.urls_rejected)
}

// optional int64 urls_skipped = 7 [default = 0];
bool Segment_s::has_urls_skipped() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Segment_s::set_has_urls_skipped() {
  _has_bits_[0] |= 0x00000080u;
}
void Segment_s::clear_has_urls_skipped() {
  _has_bits_[0] &= ~0x00000080u;
}
void Segment_s::clear_urls_skipped() {
  urls_skipped_ = GOOGLE_LONGLONG(0);
  clear_has_urls_skipped();
}
::google::protobuf::int64 Segment_s::urls_skipped() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.urls_skipped)
  return urls_skipped_;
}
void Segment_s::set_urls_skipped(::google::protobuf::int64 value) {
  set_has_urls_skipped();
  urls_skipped_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.urls_skipped)
}

// optional int64 trash_urls = 8 [default = 0];
bool Segment_s::has_trash_urls() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Segment_s::set_has_trash_urls() {
  _has_bits_[0] |= 0x00000400u;
}
void Segment_s::clear_has_trash_urls() {
  _has_bits_[0] &= ~0x00000400u;
}
void Segment_s::clear_trash_urls() {
  trash_urls_ = GOOGLE_LONGLONG(0);
  clear_has_trash_urls();
}
::google::protobuf::int64 Segment_s::trash_urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.trash_urls)
  return trash_urls_;
}
void Segment_s::set_trash_urls(::google::protobuf::int64 value) {
  set_has_trash_urls();
  trash_urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.trash_urls)
}

// optional int64 current_batched = 9 [default = 0];
bool Segment_s::has_current_batched() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Segment_s::set_has_current_batched() {
  _has_bits_[0] |= 0x00000800u;
}
void Segment_s::clear_has_current_batched() {
  _has_bits_[0] &= ~0x00000800u;
}
void Segment_s::clear_current_batched() {
  current_batched_ = GOOGLE_LONGLONG(0);
  clear_has_current_batched();
}
::google::protobuf::int64 Segment_s::current_batched() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.current_batched)
  return current_batched_;
}
void Segment_s::set_current_batched(::google::protobuf::int64 value) {
  set_has_current_batched();
  current_batched_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.current_batched)
}

// optional int64 backup_urls = 10 [default = 0];
bool Segment_s::has_backup_urls() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Segment_s::set_has_backup_urls() {
  _has_bits_[0] |= 0x00001000u;
}
void Segment_s::clear_has_backup_urls() {
  _has_bits_[0] &= ~0x00001000u;
}
void Segment_s::clear_backup_urls() {
  backup_urls_ = GOOGLE_LONGLONG(0);
  clear_has_backup_urls();
}
::google::protobuf::int64 Segment_s::backup_urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.backup_urls)
  return backup_urls_;
}
void Segment_s::set_backup_urls(::google::protobuf::int64 value) {
  set_has_backup_urls();
  backup_urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.backup_urls)
}

// optional int64 deleted_urls = 11 [default = 0];
bool Segment_s::has_deleted_urls() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Segment_s::set_has_deleted_urls() {
  _has_bits_[0] |= 0x00002000u;
}
void Segment_s::clear_has_deleted_urls() {
  _has_bits_[0] &= ~0x00002000u;
}
void Segment_s::clear_deleted_urls() {
  deleted_urls_ = GOOGLE_LONGLONG(0);
  clear_has_deleted_urls();
}
::google::protobuf::int64 Segment_s::deleted_urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.deleted_urls)
  return deleted_urls_;
}
void Segment_s::set_deleted_urls(::google::protobuf::int64 value) {
  set_has_deleted_urls();
  deleted_urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.deleted_urls)
}

// optional .ru.mail.go.webbase.sekitei.Segment_s.ImageDiscoverySegmentStat imageDiscoveryStat = 12;
bool Segment_s::has_imagediscoverystat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Segment_s::set_has_imagediscoverystat() {
  _has_bits_[0] |= 0x00000002u;
}
void Segment_s::clear_has_imagediscoverystat() {
  _has_bits_[0] &= ~0x00000002u;
}
void Segment_s::clear_imagediscoverystat() {
  if (imagediscoverystat_ != NULL) imagediscoverystat_->::ru::mail::go::webbase::sekitei::Segment_s_ImageDiscoverySegmentStat::Clear();
  clear_has_imagediscoverystat();
}
const ::ru::mail::go::webbase::sekitei::Segment_s_ImageDiscoverySegmentStat& Segment_s::imagediscoverystat() const {
  const ::ru::mail::go::webbase::sekitei::Segment_s_ImageDiscoverySegmentStat* p = imagediscoverystat_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.imageDiscoveryStat)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::sekitei::Segment_s_ImageDiscoverySegmentStat*>(
      &::ru::mail::go::webbase::sekitei::_Segment_s_ImageDiscoverySegmentStat_default_instance_);
}
::ru::mail::go::webbase::sekitei::Segment_s_ImageDiscoverySegmentStat* Segment_s::mutable_imagediscoverystat() {
  set_has_imagediscoverystat();
  if (imagediscoverystat_ == NULL) {
    imagediscoverystat_ = new ::ru::mail::go::webbase::sekitei::Segment_s_ImageDiscoverySegmentStat;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Segment_s.imageDiscoveryStat)
  return imagediscoverystat_;
}
::ru::mail::go::webbase::sekitei::Segment_s_ImageDiscoverySegmentStat* Segment_s::release_imagediscoverystat() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.sekitei.Segment_s.imageDiscoveryStat)
  clear_has_imagediscoverystat();
  ::ru::mail::go::webbase::sekitei::Segment_s_ImageDiscoverySegmentStat* temp = imagediscoverystat_;
  imagediscoverystat_ = NULL;
  return temp;
}
void Segment_s::set_allocated_imagediscoverystat(::ru::mail::go::webbase::sekitei::Segment_s_ImageDiscoverySegmentStat* imagediscoverystat) {
  delete imagediscoverystat_;
  imagediscoverystat_ = imagediscoverystat;
  if (imagediscoverystat) {
    set_has_imagediscoverystat();
  } else {
    clear_has_imagediscoverystat();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.sekitei.Segment_s.imageDiscoveryStat)
}

// optional string description = 13;
bool Segment_s::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Segment_s::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void Segment_s::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void Segment_s::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& Segment_s::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.description)
  return description_.GetNoArena();
}
void Segment_s::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.description)
}
#if LANG_CXX11
void Segment_s::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.sekitei.Segment_s.description)
}
#endif
void Segment_s::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.sekitei.Segment_s.description)
}
void Segment_s::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.sekitei.Segment_s.description)
}
::std::string* Segment_s::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.Segment_s.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Segment_s::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.sekitei.Segment_s.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Segment_s::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.sekitei.Segment_s.description)
}

// optional int32 extra_stones_bonus = 14;
bool Segment_s::has_extra_stones_bonus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Segment_s::set_has_extra_stones_bonus() {
  _has_bits_[0] |= 0x00000200u;
}
void Segment_s::clear_has_extra_stones_bonus() {
  _has_bits_[0] &= ~0x00000200u;
}
void Segment_s::clear_extra_stones_bonus() {
  extra_stones_bonus_ = 0;
  clear_has_extra_stones_bonus();
}
::google::protobuf::int32 Segment_s::extra_stones_bonus() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.extra_stones_bonus)
  return extra_stones_bonus_;
}
void Segment_s::set_extra_stones_bonus(::google::protobuf::int32 value) {
  set_has_extra_stones_bonus();
  extra_stones_bonus_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.extra_stones_bonus)
}

// optional int32 extra_stones_bonus_used = 15;
bool Segment_s::has_extra_stones_bonus_used() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Segment_s::set_has_extra_stones_bonus_used() {
  _has_bits_[0] |= 0x00004000u;
}
void Segment_s::clear_has_extra_stones_bonus_used() {
  _has_bits_[0] &= ~0x00004000u;
}
void Segment_s::clear_extra_stones_bonus_used() {
  extra_stones_bonus_used_ = 0;
  clear_has_extra_stones_bonus_used();
}
::google::protobuf::int32 Segment_s::extra_stones_bonus_used() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.extra_stones_bonus_used)
  return extra_stones_bonus_used_;
}
void Segment_s::set_extra_stones_bonus_used(::google::protobuf::int32 value) {
  set_has_extra_stones_bonus_used();
  extra_stones_bonus_used_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.extra_stones_bonus_used)
}

// optional bool splitted_scheduling = 16;
bool Segment_s::has_splitted_scheduling() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Segment_s::set_has_splitted_scheduling() {
  _has_bits_[0] |= 0x00008000u;
}
void Segment_s::clear_has_splitted_scheduling() {
  _has_bits_[0] &= ~0x00008000u;
}
void Segment_s::clear_splitted_scheduling() {
  splitted_scheduling_ = false;
  clear_has_splitted_scheduling();
}
bool Segment_s::splitted_scheduling() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.splitted_scheduling)
  return splitted_scheduling_;
}
void Segment_s::set_splitted_scheduling(bool value) {
  set_has_splitted_scheduling();
  splitted_scheduling_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.splitted_scheduling)
}

// optional int64 super_urls = 18;
bool Segment_s::has_super_urls() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Segment_s::set_has_super_urls() {
  _has_bits_[0] |= 0x00010000u;
}
void Segment_s::clear_has_super_urls() {
  _has_bits_[0] &= ~0x00010000u;
}
void Segment_s::clear_super_urls() {
  super_urls_ = GOOGLE_LONGLONG(0);
  clear_has_super_urls();
}
::google::protobuf::int64 Segment_s::super_urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.super_urls)
  return super_urls_;
}
void Segment_s::set_super_urls(::google::protobuf::int64 value) {
  set_has_super_urls();
  super_urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.super_urls)
}

// optional int64 qlinks_urls = 19;
bool Segment_s::has_qlinks_urls() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Segment_s::set_has_qlinks_urls() {
  _has_bits_[0] |= 0x00020000u;
}
void Segment_s::clear_has_qlinks_urls() {
  _has_bits_[0] &= ~0x00020000u;
}
void Segment_s::clear_qlinks_urls() {
  qlinks_urls_ = GOOGLE_LONGLONG(0);
  clear_has_qlinks_urls();
}
::google::protobuf::int64 Segment_s::qlinks_urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.qlinks_urls)
  return qlinks_urls_;
}
void Segment_s::set_qlinks_urls(::google::protobuf::int64 value) {
  set_has_qlinks_urls();
  qlinks_urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.qlinks_urls)
}

// optional int64 uruq_urls = 20;
bool Segment_s::has_uruq_urls() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Segment_s::set_has_uruq_urls() {
  _has_bits_[0] |= 0x00040000u;
}
void Segment_s::clear_has_uruq_urls() {
  _has_bits_[0] &= ~0x00040000u;
}
void Segment_s::clear_uruq_urls() {
  uruq_urls_ = GOOGLE_LONGLONG(0);
  clear_has_uruq_urls();
}
::google::protobuf::int64 Segment_s::uruq_urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.uruq_urls)
  return uruq_urls_;
}
void Segment_s::set_uruq_urls(::google::protobuf::int64 value) {
  set_has_uruq_urls();
  uruq_urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.uruq_urls)
}

// optional int64 liru_urls = 21;
bool Segment_s::has_liru_urls() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Segment_s::set_has_liru_urls() {
  _has_bits_[0] |= 0x00080000u;
}
void Segment_s::clear_has_liru_urls() {
  _has_bits_[0] &= ~0x00080000u;
}
void Segment_s::clear_liru_urls() {
  liru_urls_ = GOOGLE_LONGLONG(0);
  clear_has_liru_urls();
}
::google::protobuf::int64 Segment_s::liru_urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.liru_urls)
  return liru_urls_;
}
void Segment_s::set_liru_urls(::google::protobuf::int64 value) {
  set_has_liru_urls();
  liru_urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.liru_urls)
}

// optional int64 top_urls = 22;
bool Segment_s::has_top_urls() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Segment_s::set_has_top_urls() {
  _has_bits_[0] |= 0x00100000u;
}
void Segment_s::clear_has_top_urls() {
  _has_bits_[0] &= ~0x00100000u;
}
void Segment_s::clear_top_urls() {
  top_urls_ = GOOGLE_LONGLONG(0);
  clear_has_top_urls();
}
::google::protobuf::int64 Segment_s::top_urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.top_urls)
  return top_urls_;
}
void Segment_s::set_top_urls(::google::protobuf::int64 value) {
  set_has_top_urls();
  top_urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.top_urls)
}

// optional int64 vk_away_urls = 23;
bool Segment_s::has_vk_away_urls() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Segment_s::set_has_vk_away_urls() {
  _has_bits_[0] |= 0x00200000u;
}
void Segment_s::clear_has_vk_away_urls() {
  _has_bits_[0] &= ~0x00200000u;
}
void Segment_s::clear_vk_away_urls() {
  vk_away_urls_ = GOOGLE_LONGLONG(0);
  clear_has_vk_away_urls();
}
::google::protobuf::int64 Segment_s::vk_away_urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.vk_away_urls)
  return vk_away_urls_;
}
void Segment_s::set_vk_away_urls(::google::protobuf::int64 value) {
  set_has_vk_away_urls();
  vk_away_urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.vk_away_urls)
}

// optional int64 vk_shares_urls = 24;
bool Segment_s::has_vk_shares_urls() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Segment_s::set_has_vk_shares_urls() {
  _has_bits_[0] |= 0x00400000u;
}
void Segment_s::clear_has_vk_shares_urls() {
  _has_bits_[0] &= ~0x00400000u;
}
void Segment_s::clear_vk_shares_urls() {
  vk_shares_urls_ = GOOGLE_LONGLONG(0);
  clear_has_vk_shares_urls();
}
::google::protobuf::int64 Segment_s::vk_shares_urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.vk_shares_urls)
  return vk_shares_urls_;
}
void Segment_s::set_vk_shares_urls(::google::protobuf::int64 value) {
  set_has_vk_shares_urls();
  vk_shares_urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.vk_shares_urls)
}

// optional int64 weak_qlinks_urls = 25;
bool Segment_s::has_weak_qlinks_urls() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Segment_s::set_has_weak_qlinks_urls() {
  _has_bits_[0] |= 0x00800000u;
}
void Segment_s::clear_has_weak_qlinks_urls() {
  _has_bits_[0] &= ~0x00800000u;
}
void Segment_s::clear_weak_qlinks_urls() {
  weak_qlinks_urls_ = GOOGLE_LONGLONG(0);
  clear_has_weak_qlinks_urls();
}
::google::protobuf::int64 Segment_s::weak_qlinks_urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_s.weak_qlinks_urls)
  return weak_qlinks_urls_;
}
void Segment_s::set_weak_qlinks_urls(::google::protobuf::int64 value) {
  set_has_weak_qlinks_urls();
  weak_qlinks_urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_s.weak_qlinks_urls)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Segment_i::kSegmentNumFieldNumber;
const int Segment_i::kMarkersCountRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Segment_i::Segment_i()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.Segment_i)
}
Segment_i::Segment_i(const Segment_i& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&markerscountratio_, &from.markerscountratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&segment_num_) -
    reinterpret_cast<char*>(&markerscountratio_)) + sizeof(segment_num_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.Segment_i)
}

void Segment_i::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&markerscountratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segment_num_) -
      reinterpret_cast<char*>(&markerscountratio_)) + sizeof(segment_num_));
}

Segment_i::~Segment_i() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.Segment_i)
  SharedDtor();
}

void Segment_i::SharedDtor() {
}

void Segment_i::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Segment_i::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Segment_i& Segment_i::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

Segment_i* Segment_i::New(::google::protobuf::Arena* arena) const {
  Segment_i* n = new Segment_i;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Segment_i::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.Segment_i)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&markerscountratio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&segment_num_) -
        reinterpret_cast<char*>(&markerscountratio_)) + sizeof(segment_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Segment_i::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.Segment_i)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 segment_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_segment_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &segment_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double markersCountRatio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_markerscountratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &markerscountratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.Segment_i)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.Segment_i)
  return false;
#undef DO_
}

void Segment_i::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.Segment_i)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 segment_num = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->segment_num(), output);
  }

  // optional double markersCountRatio = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->markerscountratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.Segment_i)
}

::google::protobuf::uint8* Segment_i::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.Segment_i)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 segment_num = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->segment_num(), target);
  }

  // optional double markersCountRatio = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->markerscountratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.Segment_i)
  return target;
}

size_t Segment_i::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.Segment_i)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 segment_num = 1;
  if (has_segment_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->segment_num());
  }
  // optional double markersCountRatio = 2;
  if (has_markerscountratio()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Segment_i::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.Segment_i)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment_i* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Segment_i>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.Segment_i)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.Segment_i)
    MergeFrom(*source);
  }
}

void Segment_i::MergeFrom(const Segment_i& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.Segment_i)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      markerscountratio_ = from.markerscountratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      segment_num_ = from.segment_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Segment_i::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.Segment_i)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment_i::CopyFrom(const Segment_i& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.Segment_i)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment_i::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Segment_i::Swap(Segment_i* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Segment_i::InternalSwap(Segment_i* other) {
  using std::swap;
  swap(markerscountratio_, other->markerscountratio_);
  swap(segment_num_, other->segment_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Segment_i::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Segment_i

// required int32 segment_num = 1;
bool Segment_i::has_segment_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Segment_i::set_has_segment_num() {
  _has_bits_[0] |= 0x00000002u;
}
void Segment_i::clear_has_segment_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void Segment_i::clear_segment_num() {
  segment_num_ = 0;
  clear_has_segment_num();
}
::google::protobuf::int32 Segment_i::segment_num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_i.segment_num)
  return segment_num_;
}
void Segment_i::set_segment_num(::google::protobuf::int32 value) {
  set_has_segment_num();
  segment_num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_i.segment_num)
}

// optional double markersCountRatio = 2;
bool Segment_i::has_markerscountratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Segment_i::set_has_markerscountratio() {
  _has_bits_[0] |= 0x00000001u;
}
void Segment_i::clear_has_markerscountratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void Segment_i::clear_markerscountratio() {
  markerscountratio_ = 0;
  clear_has_markerscountratio();
}
double Segment_i::markerscountratio() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.Segment_i.markersCountRatio)
  return markerscountratio_;
}
void Segment_i::set_markerscountratio(double value) {
  set_has_markerscountratio();
  markerscountratio_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.Segment_i.markersCountRatio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectedFeature::kIdxFieldNumber;
const int SelectedFeature::kQuoteFieldNumber;
const int SelectedFeature::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectedFeature::SelectedFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.SelectedFeature)
}
SelectedFeature::SelectedFeature(const SelectedFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&quote_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(quote_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.SelectedFeature)
}

void SelectedFeature::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quote_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(quote_));
}

SelectedFeature::~SelectedFeature() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.SelectedFeature)
  SharedDtor();
}

void SelectedFeature::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SelectedFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectedFeature::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SelectedFeature& SelectedFeature::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectedFeature* SelectedFeature::New(::google::protobuf::Arena* arena) const {
  SelectedFeature* n = new SelectedFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectedFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.SelectedFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_key()) {
    GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*key_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quote_) -
        reinterpret_cast<char*>(&idx_)) + sizeof(quote_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SelectedFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.SelectedFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 idx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 quote = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_quote();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.sekitei.SelectedFeature.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.SelectedFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.SelectedFeature)
  return false;
#undef DO_
}

void SelectedFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.SelectedFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 idx = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // required int32 quote = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quote(), output);
  }

  // required string key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.sekitei.SelectedFeature.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.SelectedFeature)
}

::google::protobuf::uint8* SelectedFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.SelectedFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 idx = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // required int32 quote = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quote(), target);
  }

  // required string key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.sekitei.SelectedFeature.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.SelectedFeature)
  return target;
}

size_t SelectedFeature::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.sekitei.SelectedFeature)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_idx()) {
    // required int32 idx = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->idx());
  }

  if (has_quote()) {
    // required int32 quote = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quote());
  }

  return total_size;
}
size_t SelectedFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.SelectedFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required int32 idx = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->idx());

    // required int32 quote = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quote());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectedFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.SelectedFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectedFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectedFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.SelectedFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.SelectedFeature)
    MergeFrom(*source);
  }
}

void SelectedFeature::MergeFrom(const SelectedFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.SelectedFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      idx_ = from.idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      quote_ = from.quote_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SelectedFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.SelectedFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectedFeature::CopyFrom(const SelectedFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.SelectedFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectedFeature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SelectedFeature::Swap(SelectedFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectedFeature::InternalSwap(SelectedFeature* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(idx_, other->idx_);
  swap(quote_, other->quote_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectedFeature::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectedFeature

// required int32 idx = 1;
bool SelectedFeature::has_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SelectedFeature::set_has_idx() {
  _has_bits_[0] |= 0x00000002u;
}
void SelectedFeature::clear_has_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
void SelectedFeature::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
::google::protobuf::int32 SelectedFeature::idx() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.SelectedFeature.idx)
  return idx_;
}
void SelectedFeature::set_idx(::google::protobuf::int32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.SelectedFeature.idx)
}

// required int32 quote = 2;
bool SelectedFeature::has_quote() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SelectedFeature::set_has_quote() {
  _has_bits_[0] |= 0x00000004u;
}
void SelectedFeature::clear_has_quote() {
  _has_bits_[0] &= ~0x00000004u;
}
void SelectedFeature::clear_quote() {
  quote_ = 0;
  clear_has_quote();
}
::google::protobuf::int32 SelectedFeature::quote() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.SelectedFeature.quote)
  return quote_;
}
void SelectedFeature::set_quote(::google::protobuf::int32 value) {
  set_has_quote();
  quote_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.SelectedFeature.quote)
}

// required string key = 3;
bool SelectedFeature::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SelectedFeature::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void SelectedFeature::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void SelectedFeature::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& SelectedFeature::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.SelectedFeature.key)
  return key_.GetNoArena();
}
void SelectedFeature::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.SelectedFeature.key)
}
#if LANG_CXX11
void SelectedFeature::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.sekitei.SelectedFeature.key)
}
#endif
void SelectedFeature::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.sekitei.SelectedFeature.key)
}
void SelectedFeature::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.sekitei.SelectedFeature.key)
}
::std::string* SelectedFeature::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.sekitei.SelectedFeature.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SelectedFeature::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.sekitei.SelectedFeature.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SelectedFeature::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.sekitei.SelectedFeature.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusInfo::kStateFieldNumber;
const int StatusInfo::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusInfo::StatusInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.StatusInfo)
}
StatusInfo::StatusInfo(const StatusInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&state_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.StatusInfo)
}

void StatusInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&state_)) + sizeof(num_));
}

StatusInfo::~StatusInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.StatusInfo)
  SharedDtor();
}

void StatusInfo::SharedDtor() {
}

void StatusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusInfo::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatusInfo& StatusInfo::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

StatusInfo* StatusInfo::New(::google::protobuf::Arena* arena) const {
  StatusInfo* n = new StatusInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.StatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_) -
        reinterpret_cast<char*>(&state_)) + sizeof(num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.StatusInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.sekitei.StatusInfo.stateTypes state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::sekitei::StatusInfo_stateTypes_IsValid(value)) {
            set_state(static_cast< ::ru::mail::go::webbase::sekitei::StatusInfo_stateTypes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.StatusInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.StatusInfo)
  return false;
#undef DO_
}

void StatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.StatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.sekitei.StatusInfo.stateTypes state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // required int32 num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.StatusInfo)
}

::google::protobuf::uint8* StatusInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.StatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.sekitei.StatusInfo.stateTypes state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // required int32 num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.StatusInfo)
  return target;
}

size_t StatusInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.sekitei.StatusInfo)
  size_t total_size = 0;

  if (has_state()) {
    // required .ru.mail.go.webbase.sekitei.StatusInfo.stateTypes state = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_num()) {
    // required int32 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }

  return total_size;
}
size_t StatusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.StatusInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ru.mail.go.webbase.sekitei.StatusInfo.stateTypes state = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required int32 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.StatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.StatusInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.StatusInfo)
    MergeFrom(*source);
  }
}

void StatusInfo::MergeFrom(const StatusInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.StatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.StatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusInfo::CopyFrom(const StatusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.StatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void StatusInfo::Swap(StatusInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusInfo::InternalSwap(StatusInfo* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(num_, other->num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusInfo::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusInfo

// required .ru.mail.go.webbase.sekitei.StatusInfo.stateTypes state = 1;
bool StatusInfo::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StatusInfo::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void StatusInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void StatusInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
::ru::mail::go::webbase::sekitei::StatusInfo_stateTypes StatusInfo::state() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.StatusInfo.state)
  return static_cast< ::ru::mail::go::webbase::sekitei::StatusInfo_stateTypes >(state_);
}
void StatusInfo::set_state(::ru::mail::go::webbase::sekitei::StatusInfo_stateTypes value) {
  assert(::ru::mail::go::webbase::sekitei::StatusInfo_stateTypes_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.StatusInfo.state)
}

// required int32 num = 2;
bool StatusInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StatusInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
void StatusInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void StatusInfo::clear_num() {
  num_ = 0;
  clear_has_num();
}
::google::protobuf::int32 StatusInfo::num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.StatusInfo.num)
  return num_;
}
void StatusInfo::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.StatusInfo.num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterStats::kPassedFieldNumber;
const int FilterStats::kRobotsDisabledFieldNumber;
const int FilterStats::kBlacklistDisabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterStats::FilterStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sekitei_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.sekitei.FilterStats)
}
FilterStats::FilterStats(const FilterStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&passed_, &from.passed_,
    static_cast<size_t>(reinterpret_cast<char*>(&blacklist_disabled_) -
    reinterpret_cast<char*>(&passed_)) + sizeof(blacklist_disabled_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.sekitei.FilterStats)
}

void FilterStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&passed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blacklist_disabled_) -
      reinterpret_cast<char*>(&passed_)) + sizeof(blacklist_disabled_));
}

FilterStats::~FilterStats() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.sekitei.FilterStats)
  SharedDtor();
}

void FilterStats::SharedDtor() {
}

void FilterStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterStats::descriptor() {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FilterStats& FilterStats::default_instance() {
  protobuf_sekitei_2eproto::InitDefaults();
  return *internal_default_instance();
}

FilterStats* FilterStats::New(::google::protobuf::Arena* arena) const {
  FilterStats* n = new FilterStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilterStats::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.sekitei.FilterStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&passed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&blacklist_disabled_) -
        reinterpret_cast<char*>(&passed_)) + sizeof(blacklist_disabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FilterStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.sekitei.FilterStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 passed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_passed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 robots_disabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_robots_disabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robots_disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 blacklist_disabled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_blacklist_disabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blacklist_disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.sekitei.FilterStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.sekitei.FilterStats)
  return false;
#undef DO_
}

void FilterStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.sekitei.FilterStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 passed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->passed(), output);
  }

  // optional int32 robots_disabled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->robots_disabled(), output);
  }

  // optional int32 blacklist_disabled = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blacklist_disabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.sekitei.FilterStats)
}

::google::protobuf::uint8* FilterStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.sekitei.FilterStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 passed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->passed(), target);
  }

  // optional int32 robots_disabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->robots_disabled(), target);
  }

  // optional int32 blacklist_disabled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->blacklist_disabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.sekitei.FilterStats)
  return target;
}

size_t FilterStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.sekitei.FilterStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 passed = 1;
    if (has_passed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passed());
    }

    // optional int32 robots_disabled = 2;
    if (has_robots_disabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robots_disabled());
    }

    // optional int32 blacklist_disabled = 3;
    if (has_blacklist_disabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blacklist_disabled());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.sekitei.FilterStats)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FilterStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.sekitei.FilterStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.sekitei.FilterStats)
    MergeFrom(*source);
  }
}

void FilterStats::MergeFrom(const FilterStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.sekitei.FilterStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      passed_ = from.passed_;
    }
    if (cached_has_bits & 0x00000002u) {
      robots_disabled_ = from.robots_disabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      blacklist_disabled_ = from.blacklist_disabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FilterStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.sekitei.FilterStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterStats::CopyFrom(const FilterStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.sekitei.FilterStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterStats::IsInitialized() const {
  return true;
}

void FilterStats::Swap(FilterStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterStats::InternalSwap(FilterStats* other) {
  using std::swap;
  swap(passed_, other->passed_);
  swap(robots_disabled_, other->robots_disabled_);
  swap(blacklist_disabled_, other->blacklist_disabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FilterStats::GetMetadata() const {
  protobuf_sekitei_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sekitei_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilterStats

// optional int32 passed = 1;
bool FilterStats::has_passed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FilterStats::set_has_passed() {
  _has_bits_[0] |= 0x00000001u;
}
void FilterStats::clear_has_passed() {
  _has_bits_[0] &= ~0x00000001u;
}
void FilterStats::clear_passed() {
  passed_ = 0;
  clear_has_passed();
}
::google::protobuf::int32 FilterStats::passed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.FilterStats.passed)
  return passed_;
}
void FilterStats::set_passed(::google::protobuf::int32 value) {
  set_has_passed();
  passed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.FilterStats.passed)
}

// optional int32 robots_disabled = 2;
bool FilterStats::has_robots_disabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FilterStats::set_has_robots_disabled() {
  _has_bits_[0] |= 0x00000002u;
}
void FilterStats::clear_has_robots_disabled() {
  _has_bits_[0] &= ~0x00000002u;
}
void FilterStats::clear_robots_disabled() {
  robots_disabled_ = 0;
  clear_has_robots_disabled();
}
::google::protobuf::int32 FilterStats::robots_disabled() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.FilterStats.robots_disabled)
  return robots_disabled_;
}
void FilterStats::set_robots_disabled(::google::protobuf::int32 value) {
  set_has_robots_disabled();
  robots_disabled_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.FilterStats.robots_disabled)
}

// optional int32 blacklist_disabled = 3;
bool FilterStats::has_blacklist_disabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FilterStats::set_has_blacklist_disabled() {
  _has_bits_[0] |= 0x00000004u;
}
void FilterStats::clear_has_blacklist_disabled() {
  _has_bits_[0] &= ~0x00000004u;
}
void FilterStats::clear_blacklist_disabled() {
  blacklist_disabled_ = 0;
  clear_has_blacklist_disabled();
}
::google::protobuf::int32 FilterStats::blacklist_disabled() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.sekitei.FilterStats.blacklist_disabled)
  return blacklist_disabled_;
}
void FilterStats::set_blacklist_disabled(::google::protobuf::int32 value) {
  set_has_blacklist_disabled();
  blacklist_disabled_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.sekitei.FilterStats.blacklist_disabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sekitei
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
