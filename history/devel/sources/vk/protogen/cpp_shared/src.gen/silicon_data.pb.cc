// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: silicon_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "silicon_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class SiliconSourceIdDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconSourceId>
     _instance;
} _SiliconSourceId_default_instance_;
class SiliconFetchUrlDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconFetchUrl>
     _instance;
} _SiliconFetchUrl_default_instance_;
class SiliconFetchedDocDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconFetchedDoc>
     _instance;
} _SiliconFetchedDoc_default_instance_;
class SiliconDocParserInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconDocParserInfo>
     _instance;
} _SiliconDocParserInfo_default_instance_;
class PulseVideosDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PulseVideos>
     _instance;
} _PulseVideos_default_instance_;
class PulseVideoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PulseVideo>
     _instance;
} _PulseVideo_default_instance_;
class SiliconeAuthorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconeAuthor>
     _instance;
} _SiliconeAuthor_default_instance_;
class SiliconeCategoryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconeCategory>
     _instance;
} _SiliconeCategory_default_instance_;
class SiliconeDocStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconeDocState>
     _instance;
} _SiliconeDocState_default_instance_;
class SiliconeParsedBodyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconeParsedBody>
     _instance;
} _SiliconeParsedBody_default_instance_;
class SiliconeBodyPartDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconeBodyPart>
     _instance;
} _SiliconeBodyPart_default_instance_;
class GalleryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Gallery>
     _instance;
} _Gallery_default_instance_;
class GalleryImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryImage>
     _instance;
} _GalleryImage_default_instance_;
class PostImagesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PostImages>
     _instance;
} _PostImages_default_instance_;
class SiliconImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconImage>
     _instance;
} _SiliconImage_default_instance_;
class SiliconeImagePostIDDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconeImagePostID>
     _instance;
} _SiliconeImagePostID_default_instance_;
class SiliconeImageGalleryRefDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconeImageGalleryRef>
     _instance;
} _SiliconeImageGalleryRef_default_instance_;
class SiliconDocTaggerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconDocTaggerInfo>
     _instance;
} _SiliconDocTaggerInfo_default_instance_;
class SiliconDocTaggerHashInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconDocTaggerHashInfo>
     _instance;
} _SiliconDocTaggerHashInfo_default_instance_;
class ScrollToClickInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScrollToClickInfo>
     _instance;
} _ScrollToClickInfo_default_instance_;
class UserPixelsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserPixels>
     _instance;
} _UserPixels_default_instance_;
class CustomAdminFieldsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CustomAdminFields>
     _instance;
} _CustomAdminFields_default_instance_;
class SourceParsingErrorListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceParsingErrorList>
     _instance;
} _SourceParsingErrorList_default_instance_;
class PostParsingErrorListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PostParsingErrorList>
     _instance;
} _PostParsingErrorList_default_instance_;
class ImageProcessErrorListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageProcessErrorList>
     _instance;
} _ImageProcessErrorList_default_instance_;
class SiliconeYoutubeVideoDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconeYoutubeVideoData>
     _instance;
} _SiliconeYoutubeVideoData_default_instance_;
class SiliconeVideoYoutubeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconeVideoYoutube>
     _instance;
} _SiliconeVideoYoutube_default_instance_;
class SiliconeVideoVimeoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconeVideoVimeo>
     _instance;
} _SiliconeVideoVimeo_default_instance_;
class SiliconeVideoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconeVideo>
     _instance;
} _SiliconeVideo_default_instance_;
class SiliconeVideoDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconeVideoData>
     _instance;
} _SiliconeVideoData_default_instance_;
class PostsBySourcesCmdDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PostsBySourcesCmd>
     _instance;
} _PostsBySourcesCmd_default_instance_;
class PostAndSourceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PostAndSource>
     _instance;
} _PostAndSource_default_instance_;
class PostsBySiteCmdDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PostsBySiteCmd>
     _instance;
} _PostsBySiteCmd_default_instance_;
class TimeIntervalDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TimeInterval>
     _instance;
} _TimeInterval_default_instance_;
class PostSiteSourcesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PostSiteSources>
     _instance;
} _PostSiteSources_default_instance_;
class MarkerDigestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MarkerDigest>
     _instance;
} _MarkerDigest_default_instance_;
class MarkerMultiDigestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MarkerMultiDigest>
     _instance;
} _MarkerMultiDigest_default_instance_;
class CustomFieldMarkerDigestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CustomFieldMarkerDigest>
     _instance;
} _CustomFieldMarkerDigest_default_instance_;
class CustomFieldMarkerDigestsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CustomFieldMarkerDigests>
     _instance;
} _CustomFieldMarkerDigests_default_instance_;
class LayerMarkerDigestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LayerMarkerDigest>
     _instance;
} _LayerMarkerDigest_default_instance_;
class SiliconDocParserInfoDigestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconDocParserInfoDigest>
     _instance;
} _SiliconDocParserInfoDigest_default_instance_;
class KeyValuePairDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KeyValuePair>
     _instance;
} _KeyValuePair_default_instance_;
class ProvidersParamsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProvidersParams>
     _instance;
} _ProvidersParams_default_instance_;
class CustomFieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CustomField>
     _instance;
} _CustomField_default_instance_;
class CustomFieldsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CustomFields>
     _instance;
} _CustomFields_default_instance_;
class SiliconeNewsTagsDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconeNewsTagsData>
     _instance;
} _SiliconeNewsTagsData_default_instance_;
class SiliconeNewsTagDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconeNewsTagData>
     _instance;
} _SiliconeNewsTagData_default_instance_;
class SiliconeNewsStoriesDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconeNewsStoriesData>
     _instance;
} _SiliconeNewsStoriesData_default_instance_;
class SiliconeNewsStoryDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiliconeNewsStoryData>
     _instance;
} _SiliconeNewsStoryData_default_instance_;
class RisksFieldsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RisksFields>
     _instance;
} _RisksFields_default_instance_;

namespace protobuf_silicon_5fdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[50];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[13];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconSourceId, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconSourceId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconSourceId, provider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconSourceId, id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchUrl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchUrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchUrl, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchUrl, sourcetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchUrl, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchUrl, postswithimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchUrl, sourceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchUrl, publicurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchUrl, taggerinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchUrl, sourcenames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchUrl, siteid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchUrl, categoryids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchUrl, marker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchUrl, firstmeetsec_),
  4,
  5,
  8,
  ~0u,
  1,
  0,
  2,
  ~0u,
  6,
  ~0u,
  3,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, murl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, sourcemode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, parserinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, taggerinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, fetchtimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, sourceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, discoveryversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, isremoved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, publicationdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, canonicalizedurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, sourcenames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, siteid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, categoryids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, urlhash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, regionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, firstmeetsec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, providersparams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, newstags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, newsstories_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, vkpost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, scrolltoclickinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, userpixels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, isdocstateupdated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, jsonblocks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, customadminfields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, external_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, isadmincustomdocupdated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, hascontents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, risksfields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconFetchedDoc, original_url_),
  0,
  1,
  20,
  7,
  8,
  18,
  9,
  19,
  26,
  22,
  2,
  ~0u,
  23,
  ~0u,
  24,
  21,
  25,
  10,
  11,
  12,
  3,
  13,
  14,
  15,
  27,
  4,
  ~0u,
  16,
  5,
  28,
  29,
  17,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, video_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, descriptionrss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, parsedbody_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, author_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, videodata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, layerbodyhtml_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, customfields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, layer_words_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, layer_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, layer_footer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, amp_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, galleries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, is_valid_fulltext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, videos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, slug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, media_rating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, ttl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, categories_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, layer_symbol_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, pharma_product_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, has_relap_test_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfo, doc_region_ids_),
  0,
  1,
  2,
  13,
  3,
  4,
  14,
  15,
  16,
  17,
  5,
  18,
  20,
  6,
  7,
  8,
  ~0u,
  9,
  21,
  19,
  10,
  11,
  23,
  ~0u,
  24,
  12,
  22,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulseVideos, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulseVideos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulseVideos, mainvideo_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulseVideo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulseVideo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulseVideo, video_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulseVideo, duration_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeAuthor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeAuthor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeAuthor, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeAuthor, url_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeCategory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeCategory, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeCategory, sub_category_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeDocState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeDocState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeDocState, disabled_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeParsedBody, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeParsedBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeParsedBody, bodypart_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeBodyPart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeBodyPart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeBodyPart, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeBodyPart, texthtml_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeBodyPart, containscode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeBodyPart, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeBodyPart, imagehref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeBodyPart, imagetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeBodyPart, objectid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeBodyPart, list_),
  4,
  0,
  5,
  3,
  1,
  6,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gallery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gallery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gallery, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gallery, images_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryImage, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryImage, placeholderurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryImage, description_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostImages, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostImages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostImages, mainimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostImages, images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostImages, okimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostImages, layerimages_),
  0,
  ~0u,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, originalurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, previewurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, simhash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, imagecontent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, postid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, microbase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, caption_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, fetchfailed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, originalformat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, okimageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, srchkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, supplied_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, img_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconImage, savefailed_),
  0,
  1,
  7,
  8,
  9,
  6,
  ~0u,
  2,
  3,
  12,
  11,
  10,
  4,
  13,
  5,
  ~0u,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeImagePostID, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeImagePostID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeImagePostID, posturl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeImagePostID, ordinal_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeImageGalleryRef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeImageGalleryRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeImageGalleryRef, posturl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeImageGalleryRef, galleryname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeImageGalleryRef, ordinal_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocTaggerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocTaggerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocTaggerInfo, tag_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocTaggerHashInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocTaggerHashInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocTaggerHashInfo, taghashes_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScrollToClickInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScrollToClickInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScrollToClickInfo, target_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScrollToClickInfo, target_url_title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScrollToClickInfo, target_url_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScrollToClickInfo, img_aerospike_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScrollToClickInfo, mobile_img_aerospike_url_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPixels, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPixels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPixels, readup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPixels, redirect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPixels, show_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPixels, click_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomAdminFields, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomAdminFields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomAdminFields, custom_title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomAdminFields, custom_main_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomAdminFields, vendor_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomAdminFields, is_for_realme_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceParsingErrorList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceParsingErrorList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceParsingErrorList, errors_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostParsingErrorList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostParsingErrorList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostParsingErrorList, errors_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessErrorList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessErrorList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessErrorList, errors_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeYoutubeVideoData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeYoutubeVideoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeYoutubeVideoData, videoid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeYoutubeVideoData, playerurl_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeVideoYoutube, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeVideoYoutube, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeVideoYoutube, playerurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeVideoYoutube, videoid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeVideoVimeo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeVideoVimeo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeVideoVimeo, playerurl_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeVideo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeVideo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeVideo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeVideo, videoyoutube_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeVideo, videovimeo_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeVideoData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeVideoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeVideoData, youtubedata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeVideoData, videos_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostsBySourcesCmd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostsBySourcesCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostsBySourcesCmd, sourceids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostsBySourcesCmd, replytopics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostsBySourcesCmd, fetchtimeintervals_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostAndSource, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostAndSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostAndSource, posturl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostAndSource, sourceid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostsBySiteCmd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostsBySiteCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostsBySiteCmd, siteids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostsBySiteCmd, replytopics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostsBySiteCmd, fetchtimeintervals_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInterval, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInterval, starttsms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInterval, stoptsms_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSiteSources, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSiteSources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSiteSources, posturl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSiteSources, siteid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSiteSources, sourceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSiteSources, firstmeetsec_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerDigest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerDigest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerDigest, markerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerDigest, valuehash_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerMultiDigest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerMultiDigest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerMultiDigest, markerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerMultiDigest, valuehashes_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFieldMarkerDigest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFieldMarkerDigest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFieldMarkerDigest, fieldname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFieldMarkerDigest, fieldvalue_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFieldMarkerDigests, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFieldMarkerDigests, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFieldMarkerDigests, items_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerMarkerDigest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerMarkerDigest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerMarkerDigest, markerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerMarkerDigest, valuehashes_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfoDigest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfoDigest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfoDigest, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfoDigest, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfoDigest, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfoDigest, mainimageurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfoDigest, imagegalleryurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfoDigest, videourls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfoDigest, customfields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconDocParserInfoDigest, layer_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProvidersParams, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProvidersParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProvidersParams, keyvaluepairs_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomField, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomField, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFields, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomFields, items_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeNewsTagsData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeNewsTagsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeNewsTagsData, tags_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeNewsTagData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeNewsTagData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeNewsTagData, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeNewsTagData, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeNewsStoriesData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeNewsStoriesData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeNewsStoriesData, stories_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeNewsStoryData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeNewsStoryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeNewsStoryData, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiliconeNewsStoryData, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisksFields, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisksFields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisksFields, eroscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisksFields, pornoscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisksFields, safecontent_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(SiliconSourceId)},
  { 9, 26, sizeof(SiliconFetchUrl)},
  { 38, 76, sizeof(SiliconFetchedDoc)},
  { 109, 142, sizeof(SiliconDocParserInfo)},
  { 170, 176, sizeof(PulseVideos)},
  { 177, 184, sizeof(PulseVideo)},
  { 186, 193, sizeof(SiliconeAuthor)},
  { 195, 202, sizeof(SiliconeCategory)},
  { 204, 210, sizeof(SiliconeDocState)},
  { 211, 217, sizeof(SiliconeParsedBody)},
  { 218, 231, sizeof(SiliconeBodyPart)},
  { 239, 246, sizeof(Gallery)},
  { 248, 256, sizeof(GalleryImage)},
  { 259, 268, sizeof(PostImages)},
  { 272, 294, sizeof(SiliconImage)},
  { 311, 318, sizeof(SiliconeImagePostID)},
  { 320, 328, sizeof(SiliconeImageGalleryRef)},
  { 331, 337, sizeof(SiliconDocTaggerInfo)},
  { 338, 344, sizeof(SiliconDocTaggerHashInfo)},
  { 345, 355, sizeof(ScrollToClickInfo)},
  { 360, 369, sizeof(UserPixels)},
  { 373, 382, sizeof(CustomAdminFields)},
  { 386, 392, sizeof(SourceParsingErrorList)},
  { 393, 399, sizeof(PostParsingErrorList)},
  { 400, 406, sizeof(ImageProcessErrorList)},
  { 407, 414, sizeof(SiliconeYoutubeVideoData)},
  { 416, 423, sizeof(SiliconeVideoYoutube)},
  { 425, 431, sizeof(SiliconeVideoVimeo)},
  { 432, 440, sizeof(SiliconeVideo)},
  { 443, 450, sizeof(SiliconeVideoData)},
  { 452, 460, sizeof(PostsBySourcesCmd)},
  { 463, 470, sizeof(PostAndSource)},
  { 472, 480, sizeof(PostsBySiteCmd)},
  { 483, 490, sizeof(TimeInterval)},
  { 492, 501, sizeof(PostSiteSources)},
  { 505, 512, sizeof(MarkerDigest)},
  { 514, 521, sizeof(MarkerMultiDigest)},
  { 523, 530, sizeof(CustomFieldMarkerDigest)},
  { 532, 538, sizeof(CustomFieldMarkerDigests)},
  { 539, 546, sizeof(LayerMarkerDigest)},
  { 548, 561, sizeof(SiliconDocParserInfoDigest)},
  { 569, 576, sizeof(KeyValuePair)},
  { 578, 584, sizeof(ProvidersParams)},
  { 585, 592, sizeof(CustomField)},
  { 594, 600, sizeof(CustomFields)},
  { 601, 607, sizeof(SiliconeNewsTagsData)},
  { 608, 615, sizeof(SiliconeNewsTagData)},
  { 617, 623, sizeof(SiliconeNewsStoriesData)},
  { 624, 631, sizeof(SiliconeNewsStoryData)},
  { 633, 641, sizeof(RisksFields)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconSourceId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconFetchUrl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconFetchedDoc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconDocParserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PulseVideos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PulseVideo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconeAuthor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconeCategory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconeDocState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconeParsedBody_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconeBodyPart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gallery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PostImages_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconeImagePostID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconeImageGalleryRef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconDocTaggerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconDocTaggerHashInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScrollToClickInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserPixels_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomAdminFields_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceParsingErrorList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PostParsingErrorList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageProcessErrorList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconeYoutubeVideoData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconeVideoYoutube_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconeVideoVimeo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconeVideo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconeVideoData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PostsBySourcesCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PostAndSource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PostsBySiteCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TimeInterval_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PostSiteSources_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MarkerDigest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MarkerMultiDigest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomFieldMarkerDigest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomFieldMarkerDigests_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LayerMarkerDigest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconDocParserInfoDigest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeyValuePair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProvidersParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomFields_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconeNewsTagsData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconeNewsTagData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconeNewsStoriesData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiliconeNewsStoryData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RisksFields_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "silicon_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 50);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::parsing::img::protobuf_image_5fdefs_2eproto::InitDefaults();
  _SiliconSourceId_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconSourceId_default_instance_);_SiliconFetchUrl_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconFetchUrl_default_instance_);_SiliconFetchedDoc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconFetchedDoc_default_instance_);_SiliconDocParserInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconDocParserInfo_default_instance_);_PulseVideos_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PulseVideos_default_instance_);_PulseVideo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PulseVideo_default_instance_);_SiliconeAuthor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconeAuthor_default_instance_);_SiliconeCategory_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconeCategory_default_instance_);_SiliconeDocState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconeDocState_default_instance_);_SiliconeParsedBody_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconeParsedBody_default_instance_);_SiliconeBodyPart_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconeBodyPart_default_instance_);_Gallery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Gallery_default_instance_);_GalleryImage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryImage_default_instance_);_PostImages_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PostImages_default_instance_);_SiliconImage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconImage_default_instance_);_SiliconeImagePostID_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconeImagePostID_default_instance_);_SiliconeImageGalleryRef_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconeImageGalleryRef_default_instance_);_SiliconDocTaggerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconDocTaggerInfo_default_instance_);_SiliconDocTaggerHashInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconDocTaggerHashInfo_default_instance_);_ScrollToClickInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScrollToClickInfo_default_instance_);_UserPixels_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserPixels_default_instance_);_CustomAdminFields_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CustomAdminFields_default_instance_);_SourceParsingErrorList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceParsingErrorList_default_instance_);_PostParsingErrorList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PostParsingErrorList_default_instance_);_ImageProcessErrorList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageProcessErrorList_default_instance_);_SiliconeYoutubeVideoData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconeYoutubeVideoData_default_instance_);_SiliconeVideoYoutube_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconeVideoYoutube_default_instance_);_SiliconeVideoVimeo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconeVideoVimeo_default_instance_);_SiliconeVideo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconeVideo_default_instance_);_SiliconeVideoData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconeVideoData_default_instance_);_PostsBySourcesCmd_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PostsBySourcesCmd_default_instance_);_PostAndSource_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PostAndSource_default_instance_);_PostsBySiteCmd_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PostsBySiteCmd_default_instance_);_TimeInterval_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TimeInterval_default_instance_);_PostSiteSources_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PostSiteSources_default_instance_);_MarkerDigest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MarkerDigest_default_instance_);_MarkerMultiDigest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MarkerMultiDigest_default_instance_);_CustomFieldMarkerDigest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CustomFieldMarkerDigest_default_instance_);_CustomFieldMarkerDigests_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CustomFieldMarkerDigests_default_instance_);_LayerMarkerDigest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LayerMarkerDigest_default_instance_);_SiliconDocParserInfoDigest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconDocParserInfoDigest_default_instance_);_KeyValuePair_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KeyValuePair_default_instance_);_ProvidersParams_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProvidersParams_default_instance_);_CustomField_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CustomField_default_instance_);_CustomFields_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CustomFields_default_instance_);_SiliconeNewsTagsData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconeNewsTagsData_default_instance_);_SiliconeNewsTagData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconeNewsTagData_default_instance_);_SiliconeNewsStoriesData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconeNewsStoriesData_default_instance_);_SiliconeNewsStoryData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiliconeNewsStoryData_default_instance_);_RisksFields_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RisksFields_default_instance_);::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::ru::mail::go::webbase::blobs::SiliconFetchedDoc::internal_default_instance(),
    1000, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::ru::mail::go::webbase::blobs::SiliconFetchedDoc::internal_default_instance(),
    1001, 12, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::ru::mail::go::webbase::blobs::SiliconFetchedDoc::internal_default_instance(),
    1002, 3, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::ru::mail::go::webbase::blobs::SiliconFetchedDoc::internal_default_instance(),
    1003, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::ru::mail::go::webbase::blobs::SiliconFetchedDoc::internal_default_instance(),
    1004, 3, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::ru::mail::go::webbase::blobs::SiliconFetchedDoc::internal_default_instance(),
    1005, 3, false, false);
  _SiliconFetchUrl_default_instance_._instance.get_mutable()->sourceid_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconSourceId*>(
      ::ru::mail::go::webbase::blobs::SiliconSourceId::internal_default_instance());
  _SiliconFetchUrl_default_instance_._instance.get_mutable()->taggerinfo_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo*>(
      ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo::internal_default_instance());
  _SiliconFetchUrl_default_instance_._instance.get_mutable()->marker_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest*>(
      ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest::internal_default_instance());
  _SiliconFetchedDoc_default_instance_._instance.get_mutable()->parserinfo_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconDocParserInfo*>(
      ::ru::mail::go::webbase::blobs::SiliconDocParserInfo::internal_default_instance());
  _SiliconFetchedDoc_default_instance_._instance.get_mutable()->taggerinfo_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo*>(
      ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo::internal_default_instance());
  _SiliconFetchedDoc_default_instance_._instance.get_mutable()->sourceid_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconSourceId*>(
      ::ru::mail::go::webbase::blobs::SiliconSourceId::internal_default_instance());
  _SiliconFetchedDoc_default_instance_._instance.get_mutable()->providersparams_ = const_cast< ::ru::mail::go::webbase::blobs::ProvidersParams*>(
      ::ru::mail::go::webbase::blobs::ProvidersParams::internal_default_instance());
  _SiliconFetchedDoc_default_instance_._instance.get_mutable()->newstags_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData*>(
      ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData::internal_default_instance());
  _SiliconFetchedDoc_default_instance_._instance.get_mutable()->newsstories_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData*>(
      ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData::internal_default_instance());
  _SiliconFetchedDoc_default_instance_._instance.get_mutable()->scrolltoclickinfo_ = const_cast< ::ru::mail::go::webbase::blobs::ScrollToClickInfo*>(
      ::ru::mail::go::webbase::blobs::ScrollToClickInfo::internal_default_instance());
  _SiliconFetchedDoc_default_instance_._instance.get_mutable()->userpixels_ = const_cast< ::ru::mail::go::webbase::blobs::UserPixels*>(
      ::ru::mail::go::webbase::blobs::UserPixels::internal_default_instance());
  _SiliconFetchedDoc_default_instance_._instance.get_mutable()->state_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconeDocState*>(
      ::ru::mail::go::webbase::blobs::SiliconeDocState::internal_default_instance());
  _SiliconFetchedDoc_default_instance_._instance.get_mutable()->customadminfields_ = const_cast< ::ru::mail::go::webbase::blobs::CustomAdminFields*>(
      ::ru::mail::go::webbase::blobs::CustomAdminFields::internal_default_instance());
  _SiliconFetchedDoc_default_instance_._instance.get_mutable()->risksfields_ = const_cast< ::ru::mail::go::webbase::blobs::RisksFields*>(
      ::ru::mail::go::webbase::blobs::RisksFields::internal_default_instance());
  _SiliconDocParserInfo_default_instance_._instance.get_mutable()->images_ = const_cast< ::ru::mail::go::webbase::blobs::PostImages*>(
      ::ru::mail::go::webbase::blobs::PostImages::internal_default_instance());
  _SiliconDocParserInfo_default_instance_._instance.get_mutable()->parsedbody_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconeParsedBody*>(
      ::ru::mail::go::webbase::blobs::SiliconeParsedBody::internal_default_instance());
  _SiliconDocParserInfo_default_instance_._instance.get_mutable()->author_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconeAuthor*>(
      ::ru::mail::go::webbase::blobs::SiliconeAuthor::internal_default_instance());
  _SiliconDocParserInfo_default_instance_._instance.get_mutable()->category_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconeCategory*>(
      ::ru::mail::go::webbase::blobs::SiliconeCategory::internal_default_instance());
  _SiliconDocParserInfo_default_instance_._instance.get_mutable()->videodata_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconeVideoData*>(
      ::ru::mail::go::webbase::blobs::SiliconeVideoData::internal_default_instance());
  _SiliconDocParserInfo_default_instance_._instance.get_mutable()->customfields_ = const_cast< ::ru::mail::go::webbase::blobs::CustomFields*>(
      ::ru::mail::go::webbase::blobs::CustomFields::internal_default_instance());
  _SiliconDocParserInfo_default_instance_._instance.get_mutable()->videos_ = const_cast< ::ru::mail::go::webbase::blobs::PulseVideos*>(
      ::ru::mail::go::webbase::blobs::PulseVideos::internal_default_instance());
  _PulseVideos_default_instance_._instance.get_mutable()->mainvideo_ = const_cast< ::ru::mail::go::webbase::blobs::PulseVideo*>(
      ::ru::mail::go::webbase::blobs::PulseVideo::internal_default_instance());
  _SiliconeBodyPart_default_instance_._instance.get_mutable()->image_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconImage*>(
      ::ru::mail::go::webbase::blobs::SiliconImage::internal_default_instance());
  _GalleryImage_default_instance_._instance.get_mutable()->image_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconImage*>(
      ::ru::mail::go::webbase::blobs::SiliconImage::internal_default_instance());
  _PostImages_default_instance_._instance.get_mutable()->mainimage_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconImage*>(
      ::ru::mail::go::webbase::blobs::SiliconImage::internal_default_instance());
  _PostImages_default_instance_._instance.get_mutable()->okimage_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconImage*>(
      ::ru::mail::go::webbase::blobs::SiliconImage::internal_default_instance());
  _SiliconImage_default_instance_._instance.get_mutable()->imagecontent_ = const_cast< ::ru::mail::go::webbase::parsing::img::Thumb*>(
      ::ru::mail::go::webbase::parsing::img::Thumb::internal_default_instance());
  _CustomAdminFields_default_instance_._instance.get_mutable()->custom_main_image_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconImage*>(
      ::ru::mail::go::webbase::blobs::SiliconImage::internal_default_instance());
  _CustomAdminFields_default_instance_._instance.get_mutable()->vendor_image_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconImage*>(
      ::ru::mail::go::webbase::blobs::SiliconImage::internal_default_instance());
  _SiliconeVideo_default_instance_._instance.get_mutable()->videoyoutube_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube*>(
      ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube::internal_default_instance());
  _SiliconeVideo_default_instance_._instance.get_mutable()->videovimeo_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo*>(
      ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo::internal_default_instance());
  _SiliconeVideoData_default_instance_._instance.get_mutable()->youtubedata_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData*>(
      ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData::internal_default_instance());
  _PostAndSource_default_instance_._instance.get_mutable()->sourceid_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconSourceId*>(
      ::ru::mail::go::webbase::blobs::SiliconSourceId::internal_default_instance());
  _CustomFieldMarkerDigest_default_instance_._instance.get_mutable()->fieldvalue_ = const_cast< ::ru::mail::go::webbase::blobs::MarkerDigest*>(
      ::ru::mail::go::webbase::blobs::MarkerDigest::internal_default_instance());
  _SiliconDocParserInfoDigest_default_instance_._instance.get_mutable()->customfields_ = const_cast< ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests*>(
      ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022silicon_data.proto\022\030ru.mail.go.webbase"
      ".blobs\032\020image_defs.proto\"`\n\017SiliconSourc"
      "eId\022A\n\010provider\030\001 \002(\0162/.ru.mail.go.webba"
      "se.blobs.SiliconSourceProvider\022\n\n\002id\030\002 \002"
      "(\t\"\245\005\n\017SiliconFetchUrl\022<\n\004type\030\001 \002(\0162..r"
      "u.mail.go.webbase.blobs.SiliconFetchUrl."
      "Type\022H\n\nsourceType\030\002 \002(\01624.ru.mail.go.we"
      "bbase.blobs.SiliconFetchUrl.SourceType\0229"
      "\n\004mode\030\003 \002(\0162+.ru.mail.go.webbase.blobs."
      "SiliconSourceMode\022\026\n\016postsWithImage\030\004 \003("
      "\t\022;\n\010sourceId\030\005 \002(\0132).ru.mail.go.webbase"
      ".blobs.SiliconSourceId\022\021\n\tpublicUrl\030\006 \001("
      "\t\022B\n\ntaggerInfo\030\007 \001(\0132..ru.mail.go.webba"
      "se.blobs.SiliconDocTaggerInfo\022\023\n\013sourceN"
      "ames\030\010 \003(\t\022\016\n\006siteId\030\t \001(\003\022\023\n\013categoryId"
      "s\030\n \003(\003\022D\n\006marker\030\013 \001(\01324.ru.mail.go.web"
      "base.blobs.SiliconDocParserInfoDigest\022\024\n"
      "\014firstMeetSec\030\014 \001(\003\"3\n\004Type\022\n\n\006SOURCE\020\000\022"
      "\010\n\004POST\020\001\022\t\n\005IMAGE\020\002\022\n\n\006MARKER\020\003\"\'\n\nSour"
      "ceType\022\007\n\003URL\020\000\022\007\n\003RSS\020\001\022\007\n\003API\020\002\"/\n\rMob"
      "ileVersion\022\n\n\006PREFIX\020\000\022\010\n\004AUTO\020\001\022\010\n\004NONE"
      "\020\002\"\370\014\n\021SiliconFetchedDoc\022\013\n\003url\030\001 \002(\t\022\014\n"
      "\004murl\030\002 \001(\t\022\?\n\nsourceMode\030\003 \002(\0162+.ru.mai"
      "l.go.webbase.blobs.SiliconSourceMode\022B\n\n"
      "parserInfo\030\004 \002(\0132..ru.mail.go.webbase.bl"
      "obs.SiliconDocParserInfo\022B\n\ntaggerInfo\030\005"
      " \002(\0132..ru.mail.go.webbase.blobs.SiliconD"
      "ocTaggerInfo\022\026\n\016fetchTimestamp\030\006 \001(\003\022;\n\010"
      "sourceId\030\007 \001(\0132).ru.mail.go.webbase.blob"
      "s.SiliconSourceId\022\030\n\020discoveryVersion\030\010 "
      "\001(\003\022\021\n\tisRemoved\030\t \001(\010\022\027\n\017publicationDat"
      "e\030\n \001(\003\022\030\n\020canonicalizedUrl\030\013 \001(\t\022\023\n\013sou"
      "rceNames\030\014 \003(\t\022\016\n\006siteId\030\r \001(\003\022\023\n\013catego"
      "ryIds\030\016 \003(\003\022\017\n\007urlHash\030\017 \001(\003\022\020\n\010regionId"
      "\030\020 \001(\r\022\024\n\014firstMeetSec\030\021 \001(\003\022B\n\017provider"
      "sParams\030\022 \001(\0132).ru.mail.go.webbase.blobs"
      ".ProvidersParams\022@\n\010newsTags\030\023 \001(\0132..ru."
      "mail.go.webbase.blobs.SiliconeNewsTagsDa"
      "ta\022F\n\013newsStories\030\024 \001(\01321.ru.mail.go.web"
      "base.blobs.SiliconeNewsStoriesData\022\016\n\006vk"
      "Post\030\026 \001(\014\022F\n\021scrollToClickInfo\030\027 \001(\0132+."
      "ru.mail.go.webbase.blobs.ScrollToClickIn"
      "fo\0228\n\nuserPixels\030\030 \001(\0132$.ru.mail.go.webb"
      "ase.blobs.UserPixels\0229\n\005state\030\031 \001(\0132*.ru"
      ".mail.go.webbase.blobs.SiliconeDocState\022"
      "\031\n\021isDocStateUpdated\030\032 \001(\010\022\022\n\njsonBlocks"
      "\030\033 \001(\t\022\014\n\004tags\030\034 \003(\t\022F\n\021customAdminField"
      "s\030\035 \001(\0132+.ru.mail.go.webbase.blobs.Custo"
      "mAdminFields\022\024\n\014external_url\030\036 \001(\t\022\037\n\027is"
      "AdminCustomDocUpdated\030\037 \001(\010\022\023\n\013hasConten"
      "ts\030  \001(\010\022:\n\013risksFields\030! \001(\0132%.ru.mail."
      "go.webbase.blobs.RisksFields\022\024\n\014original"
      "_url\030\" \001(\t*\t\010\350\007\020\200\200\200\200\0022E\n\013indexistoId\022+.r"
      "u.mail.go.webbase.blobs.SiliconFetchedDo"
      "c\030\350\007 \001(\tB\002\030\0012A\n\013page_source\022+.ru.mail.go"
      ".webbase.blobs.SiliconFetchedDoc\030\351\007 \001(\0142"
      "@\n\nparsedDate\022+.ru.mail.go.webbase.blobs"
      ".SiliconFetchedDoc\030\352\007 \001(\0032>\n\010routeKey\022+."
      "ru.mail.go.webbase.blobs.SiliconFetchedD"
      "oc\030\353\007 \001(\t2C\n\rcosmoSourceId\022+.ru.mail.go."
      "webbase.blobs.SiliconFetchedDoc\030\354\007 \003(\0032="
      "\n\007topicId\022+.ru.mail.go.webbase.blobs.Sil"
      "iconFetchedDoc\030\355\007 \001(\003\"\213\007\n\024SiliconDocPars"
      "erInfo\022\r\n\005title\030\001 \001(\t\022\023\n\013description\030\002 \001"
      "(\t\022\014\n\004body\030\003 \001(\t\0224\n\006images\030\004 \002(\0132$.ru.ma"
      "il.go.webbase.blobs.PostImages\022\r\n\005video\030"
      "\005 \001(\t\022\026\n\016descriptionRss\030\006 \001(\t\022@\n\nparsedB"
      "ody\030\007 \001(\0132,.ru.mail.go.webbase.blobs.Sil"
      "iconeParsedBody\0228\n\006author\030\010 \001(\0132(.ru.mai"
      "l.go.webbase.blobs.SiliconeAuthor\022<\n\010cat"
      "egory\030\t \001(\0132*.ru.mail.go.webbase.blobs.S"
      "iliconeCategory\022>\n\tvideoData\030\n \001(\0132+.ru."
      "mail.go.webbase.blobs.SiliconeVideoData\022"
      "\025\n\rlayerBodyHtml\030\013 \001(\t\022<\n\014customFields\030\014"
      " \001(\0132&.ru.mail.go.webbase.blobs.CustomFi"
      "elds\022\031\n\021layer_words_count\030\r \001(\005\022\024\n\014layer"
      "_header\030\016 \001(\t\022\024\n\014layer_footer\030\017 \001(\t\022\017\n\007a"
      "mp_url\030\020 \001(\t\0224\n\tgalleries\030\021 \003(\0132!.ru.mai"
      "l.go.webbase.blobs.Gallery\022\014\n\004guid\030\022 \001(\t"
      "\022\031\n\021is_valid_fulltext\030\023 \001(\010\0225\n\006videos\030\024 "
      "\001(\0132%.ru.mail.go.webbase.blobs.PulseVide"
      "os\022\014\n\004slug\030\025 \001(\t\022\024\n\014media_rating\030\026 \001(\t\022\013"
      "\n\003ttl\030\027 \001(\003\022\022\n\ncategories\030\030 \003(\t\022\032\n\022layer"
      "_symbol_count\030\031 \001(\003\022\026\n\016pharma_product\030\032 "
      "\001(\t\022\026\n\016has_relap_test\030\033 \001(\010\022\026\n\016doc_regio"
      "n_ids\030\034 \003(\005\"F\n\013PulseVideos\0227\n\tmainVideo\030"
      "\001 \002(\0132$.ru.mail.go.webbase.blobs.PulseVi"
      "deo\"1\n\nPulseVideo\022\021\n\tvideo_url\030\001 \002(\t\022\020\n\010"
      "duration\030\002 \001(\005\"+\n\016SiliconeAuthor\022\014\n\004name"
      "\030\001 \001(\t\022\013\n\003url\030\002 \001(\t\":\n\020SiliconeCategory\022"
      "\020\n\010category\030\001 \001(\t\022\024\n\014sub_category\030\002 \001(\t\""
      "$\n\020SiliconeDocState\022\020\n\010disabled\030\001 \001(\010\"R\n"
      "\022SiliconeParsedBody\022<\n\010bodyPart\030\001 \003(\0132*."
      "ru.mail.go.webbase.blobs.SiliconeBodyPar"
      "t\"\264\004\n\020SiliconeBodyPart\022A\n\004name\030\001 \002(\01623.r"
      "u.mail.go.webbase.blobs.SiliconeBodyPart"
      ".PartName\022\020\n\010textHtml\030\002 \001(\t\022\024\n\014containsC"
      "ode\030\003 \001(\010\0225\n\005image\030\004 \001(\0132&.ru.mail.go.we"
      "bbase.blobs.SiliconImage\022\021\n\timageHref\030\005 "
      "\001(\t\0226\n\timageType\030\006 \001(\0162#.ru.mail.go.webb"
      "ase.blobs.ImageType\022\020\n\010objectId\030\007 \001(\t\022\014\n"
      "\004list\030\010 \003(\t\"\222\002\n\010PartName\022\013\n\007HEADER1\020\000\022\013\n"
      "\007HEADER2\020\001\022\013\n\007HEADER3\020\002\022\013\n\007HEADER4\020\003\022\013\n\007"
      "HEADER5\020\004\022\013\n\007HEADER6\020\005\022\020\n\014PREFORMATTED\020\006"
      "\022\010\n\004TEXT\020\007\022\t\n\005BREAK\020\010\022\r\n\tPARAGRAPH\020\n\022\010\n\004"
      "LIST\020\013\022\010\n\004LINK\020\014\022\016\n\nBLOCKQUOTE\020\r\022\007\n\003IMG\020"
      "\024\022\r\n\tINSTAGRAM\020\025\022\021\n\rVIDEO_YOUTUBE\020\036\022\017\n\013V"
      "IDEO_VIMEO\020\037\022\014\n\010VIDEO_VK\020 \022\n\n\006IFRAME\020!\022\010"
      "\n\004HTML\020\"\"O\n\007Gallery\022\014\n\004name\030\001 \002(\t\0226\n\006ima"
      "ges\030\002 \003(\0132&.ru.mail.go.webbase.blobs.Gal"
      "leryImage\"r\n\014GalleryImage\0225\n\005image\030\001 \002(\013"
      "2&.ru.mail.go.webbase.blobs.SiliconImage"
      "\022\026\n\016placeHolderUrl\030\002 \002(\t\022\023\n\013description\030"
      "\003 \001(\t\"\365\001\n\nPostImages\0229\n\tmainImage\030\001 \001(\0132"
      "&.ru.mail.go.webbase.blobs.SiliconImage\022"
      "6\n\006images\030\002 \003(\0132&.ru.mail.go.webbase.blo"
      "bs.SiliconImage\0227\n\007okImage\030\003 \001(\0132&.ru.ma"
      "il.go.webbase.blobs.SiliconImage\022;\n\013laye"
      "rImages\030\004 \003(\0132&.ru.mail.go.webbase.blobs"
      ".SiliconImage\"\312\003\n\014SiliconImage\022\023\n\013origin"
      "alUrl\030\001 \002(\t\022\022\n\npreviewUrl\030\002 \001(\t\022\017\n\007simHa"
      "sh\030\003 \001(\004\022\r\n\005width\030\004 \001(\r\022\016\n\006height\030\005 \001(\r\022"
      ";\n\014imageContent\030\006 \001(\0132%.ru.mail.go.webba"
      "se.parsing.img.Thumb\022=\n\006postID\030\007 \003(\0132-.r"
      "u.mail.go.webbase.blobs.SiliconeImagePos"
      "tID\022\021\n\tmicrobase\030\010 \001(\t\022\017\n\007caption\030\t \001(\t\022"
      "\023\n\013fetchFailed\030\n \001(\010\022C\n\016originalFormat\030\013"
      " \001(\0162+.ru.mail.go.webbase.parsing.img.Im"
      "ageFormat\022\021\n\tokImageId\030\014 \001(\004\022\017\n\007srchKey\030"
      "\r \001(\t\022\020\n\010supplied\030\016 \001(\010\022\017\n\007img_url\030\017 \001(\t"
      "\022\014\n\004tags\030\020 \003(\t\022\022\n\nsaveFailed\030\021 \001(\010\"7\n\023Si"
      "liconeImagePostID\022\017\n\007postUrl\030\001 \002(\t\022\017\n\007or"
      "dinal\030\002 \002(\005\"P\n\027SiliconeImageGalleryRef\022\017"
      "\n\007postUrl\030\001 \002(\t\022\023\n\013galleryName\030\002 \002(\t\022\017\n\007"
      "ordinal\030\003 \002(\005\"#\n\024SiliconDocTaggerInfo\022\013\n"
      "\003tag\030\001 \003(\t\"-\n\030SiliconDocTaggerHashInfo\022\021"
      "\n\ttagHashes\030\001 \003(\003\"\236\001\n\021ScrollToClickInfo\022"
      "\022\n\ntarget_url\030\001 \001(\t\022\030\n\020target_url_title\030"
      "\002 \001(\t\022\036\n\026target_url_description\030\003 \001(\t\022\031\n"
      "\021img_aerospike_url\030\004 \001(\t\022 \n\030mobile_img_a"
      "erospike_url\030\005 \001(\t\"K\n\nUserPixels\022\016\n\006read"
      "up\030\001 \003(\t\022\020\n\010redirect\030\002 \003(\t\022\014\n\004show\030\003 \003(\t"
      "\022\r\n\005click\030\004 \003(\t\"\301\001\n\021CustomAdminFields\022\024\n"
      "\014custom_title\030\001 \001(\t\022A\n\021custom_main_image"
      "\030\002 \001(\0132&.ru.mail.go.webbase.blobs.Silico"
      "nImage\022<\n\014vendor_image\030\003 \001(\0132&.ru.mail.g"
      "o.webbase.blobs.SiliconImage\022\025\n\ris_for_r"
      "ealme\030\004 \001(\010\"V\n\026SourceParsingErrorList\022<\n"
      "\006errors\030\001 \003(\0162,.ru.mail.go.webbase.blobs"
      ".SourceParsingError\"R\n\024PostParsingErrorL"
      "ist\022:\n\006errors\030\001 \003(\0162*.ru.mail.go.webbase"
      ".blobs.PostParsingError\"T\n\025ImageProcessE"
      "rrorList\022;\n\006errors\030\001 \003(\0162+.ru.mail.go.we"
      "bbase.blobs.ImageProcessError\">\n\030Silicon"
      "eYoutubeVideoData\022\017\n\007videoID\030\001 \002(\t\022\021\n\tpl"
      "ayerUrl\030\002 \002(\t\":\n\024SiliconeVideoYoutube\022\021\n"
      "\tplayerUrl\030\001 \002(\t\022\017\n\007videoID\030\002 \002(\t\"\'\n\022Sil"
      "iconeVideoVimeo\022\021\n\tplayerUrl\030\001 \002(\t\"\322\001\n\rS"
      "iliconeVideo\0229\n\004type\030\001 \002(\0162+.ru.mail.go."
      "webbase.blobs.SiliconeVideoType\022D\n\014video"
      "Youtube\030\002 \001(\0132..ru.mail.go.webbase.blobs"
      ".SiliconeVideoYoutube\022@\n\nvideoVimeo\030\003 \001("
      "\0132,.ru.mail.go.webbase.blobs.SiliconeVid"
      "eoVimeo\"\225\001\n\021SiliconeVideoData\022G\n\013youtube"
      "Data\030\001 \001(\01322.ru.mail.go.webbase.blobs.Si"
      "liconeYoutubeVideoData\0227\n\006videos\030\002 \003(\0132\'"
      ".ru.mail.go.webbase.blobs.SiliconeVideo\""
      "\252\001\n\021PostsBySourcesCmd\022<\n\tsourceIds\030\001 \003(\013"
      "2).ru.mail.go.webbase.blobs.SiliconSourc"
      "eId\022\023\n\013replyTopics\030\002 \003(\t\022B\n\022fetchTimeInt"
      "ervals\030\003 \003(\0132&.ru.mail.go.webbase.blobs."
      "TimeInterval\"]\n\rPostAndSource\022\017\n\007postUrl"
      "\030\001 \002(\t\022;\n\010sourceId\030\002 \002(\0132).ru.mail.go.we"
      "bbase.blobs.SiliconSourceId\"z\n\016PostsBySi"
      "teCmd\022\017\n\007siteIds\030\001 \003(\003\022\023\n\013replyTopics\030\002 "
      "\003(\t\022B\n\022fetchTimeIntervals\030\003 \003(\0132&.ru.mai"
      "l.go.webbase.blobs.TimeInterval\"3\n\014TimeI"
      "nterval\022\021\n\tstartTsMs\030\001 \001(\004\022\020\n\010stopTsMs\030\002"
      " \001(\004\"\205\001\n\017PostSiteSources\022\017\n\007postUrl\030\001 \002("
      "\t\022\016\n\006siteId\030\002 \002(\003\022;\n\010sourceId\030\003 \003(\0132).ru"
      ".mail.go.webbase.blobs.SiliconSourceId\022\024"
      "\n\014firstMeetSec\030\004 \001(\003\"3\n\014MarkerDigest\022\020\n\010"
      "markerId\030\001 \002(\005\022\021\n\tvalueHash\030\002 \002(\014\":\n\021Mar"
      "kerMultiDigest\022\020\n\010markerId\030\001 \002(\005\022\023\n\013valu"
      "eHashes\030\002 \003(\014\"h\n\027CustomFieldMarkerDigest"
      "\022\021\n\tfieldName\030\001 \002(\t\022:\n\nfieldValue\030\002 \001(\0132"
      "&.ru.mail.go.webbase.blobs.MarkerDigest\""
      "\\\n\030CustomFieldMarkerDigests\022@\n\005items\030\001 \003"
      "(\01321.ru.mail.go.webbase.blobs.CustomFiel"
      "dMarkerDigest\":\n\021LayerMarkerDigest\022\020\n\010ma"
      "rkerId\030\001 \002(\005\022\023\n\013valueHashes\030\002 \003(\005\"\221\004\n\032Si"
      "liconDocParserInfoDigest\0225\n\005title\030\001 \003(\0132"
      "&.ru.mail.go.webbase.blobs.MarkerDigest\022"
      ";\n\013description\030\002 \003(\0132&.ru.mail.go.webbas"
      "e.blobs.MarkerDigest\0224\n\004body\030\003 \003(\0132&.ru."
      "mail.go.webbase.blobs.MarkerDigest\022<\n\014ma"
      "inImageUrl\030\004 \003(\0132&.ru.mail.go.webbase.bl"
      "obs.MarkerDigest\022E\n\020imageGalleryUrls\030\005 \003"
      "(\0132+.ru.mail.go.webbase.blobs.MarkerMult"
      "iDigest\022>\n\tvideoUrls\030\006 \003(\0132+.ru.mail.go."
      "webbase.blobs.MarkerMultiDigest\022H\n\014custo"
      "mFields\030\007 \001(\01322.ru.mail.go.webbase.blobs"
      ".CustomFieldMarkerDigests\022:\n\005layer\030\010 \003(\013"
      "2+.ru.mail.go.webbase.blobs.LayerMarkerD"
      "igest\"*\n\014KeyValuePair\022\013\n\003Key\030\001 \001(\t\022\r\n\005Va"
      "lue\030\002 \001(\t\"P\n\017ProvidersParams\022=\n\rkeyValue"
      "Pairs\030\001 \003(\0132&.ru.mail.go.webbase.blobs.K"
      "eyValuePair\"*\n\013CustomField\022\014\n\004Name\030\001 \002(\t"
      "\022\r\n\005Value\030\002 \001(\t\"D\n\014CustomFields\0224\n\005items"
      "\030\001 \003(\0132%.ru.mail.go.webbase.blobs.Custom"
      "Field\"S\n\024SiliconeNewsTagsData\022;\n\004tags\030\001 "
      "\003(\0132-.ru.mail.go.webbase.blobs.SiliconeN"
      "ewsTagData\"/\n\023SiliconeNewsTagData\022\n\n\002id\030"
      "\001 \002(\005\022\014\n\004name\030\002 \001(\t\"[\n\027SiliconeNewsStori"
      "esData\022@\n\007stories\030\001 \003(\0132/.ru.mail.go.web"
      "base.blobs.SiliconeNewsStoryData\"1\n\025Sili"
      "coneNewsStoryData\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 "
      "\001(\t\"H\n\013RisksFields\022\020\n\010eroScore\030\001 \001(\002\022\022\n\n"
      "pornoScore\030\002 \001(\002\022\023\n\013safeContent\030\003 \001(\002*B\n"
      "\021SiliconSourceMode\022\010\n\004TEXT\020\000\022\t\n\005IMAGE\020\001\022"
      "\t\n\005VIDEO\020\002\022\r\n\tFULL_POST\020\n*\252\001\n\025SiliconSou"
      "rceProvider\022\n\n\006MANUAL\020\000\022\t\n\005ADMGO\020\001\022\r\n\tIN"
      "DEXISTO\020\002\022\016\n\nCOSMO_NEWS\020\003\022\017\n\013ADMGO_COSMO"
      "\020\004\022\013\n\007OK_BOLT\020\005\022\024\n\020LIKEMORE_CABINET\020\006\022\017\n"
      "\013ADMGO_LENTA\020\007\022\026\n\022SOCIAL_VK_CAROUSEL\020\010*\'"
      "\n\tImageType\022\007\n\003PNG\020\000\022\010\n\004JPEG\020\001\022\007\n\003GIF\020\002*"
      "\336\001\n\022SourceParsingError\022\031\n\025SOURCE_CONFIG_"
      "MISSING\020\000\022\025\n\021SOURCE_NO_CONTENT\020\001\022\023\n\017SOUR"
      "CE_NO_POSTS\020\002\022\027\n\023SOURCE_CONFIG_ERROR\020\003\022\027"
      "\n\023SOURCE_PARSER_ERROR\020\004\022\033\n\027SOURCE_BAN_CO"
      "NFIG_ERROR\020\005\022\031\n\025SOURCE_POST_URL_ERROR\020\006\022"
      "\027\n\023SITE_CONFIG_MISSING\020\007*Z\n\021PostParsingR"
      "esult\022\013\n\007POST_OK\020\000\022\020\n\014POST_NO_TEXT\020\001\022\021\n\r"
      "POST_NO_IMAGE\020\002\022\023\n\017POST_NOT_PARSED\020\003*\203\005\n"
      "\020PostParsingError\022\027\n\023POST_CONFIG_MISSING"
      "\020\000\022\033\n\027POST_TITLE_CONFIG_ERROR\020\001\022!\n\035POST_"
      "DESCRIPTION_CONFIG_ERROR\020\002\022!\n\035POST_READA"
      "BILITY_CONFIG_ERROR\020\003\022\033\n\027POST_IMAGE_CONF"
      "IG_ERROR\020\004\022\023\n\017POST_NO_CONTENT\020\005\022\022\n\016POST_"
      "URL_ERROR\020\006\022\031\n\025POST_BOILERPIPE_ERROR\020\007\022\033"
      "\n\027POST_OG_IMAGE_NOT_FOUND\020\010\022\037\n\033POST_BOIL"
      "ERPIPE_IMAGE_ERROR\020\t\022#\n\037POST_BOILERPIPE_"
      "IMAGE_NOT_FOUND\020\n\022\034\n\030POST_PARSED_HTML_MI"
      "SSING\020\013\022\030\n\024POST_VK_PARSER_ERROR\020\014\022#\n\037POS"
      "T_IMAGE_GALLERY_CONFIG_ERROR\020\r\022\033\n\027POST_V"
      "IDEO_CONFIG_ERROR\020\016\022\024\n\020POST_LAYER_ERROR\020"
      "\017\022\026\n\022POST_HOST_MISMATCH\020\020\022\"\n\036POST_CUSTOM"
      "_FIELD_CONFIG_ERROR\020\021\022\034\n\030POST_TITLE_PARS"
      "ING_ERROR\020\022\022\"\n\036POST_DESCRIPTION_PARSING_"
      "ERROR\020\023\022!\n\035POST_MAIN_IMAGE_PARSING_ERROR"
      "\020\024*I\n\022ImageProcessResult\022\014\n\010IMAGE_OK\020\000\022\016"
      "\n\nIMAGE_FAIL\020\001\022\025\n\021IMAGE_NOT_FETCHED\020\002*\234\001"
      "\n\021ImageProcessError\022\026\n\022IMAGE_RESIZE_ERRO"
      "R\020\000\022\025\n\021IMAGE_THUMB_ERROR\020\001\022\036\n\032IMAGE_PREV"
      "IEW_EXPORT_ERROR\020\002\022\037\n\033IMAGE_EXPORT_FOR_P"
      "OST_ERROR\020\003\022\027\n\023IMAGE_SIMHASH_ERROR\020\004*+\n\021"
      "SiliconeVideoType\022\013\n\007YOUTUBE\020\000\022\t\n\005VIMEO\020"
      "\001B\rB\013SiliconData"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 10296);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "silicon_data.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::parsing::img::protobuf_image_5fdefs_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_silicon_5fdata_2eproto

const ::google::protobuf::EnumDescriptor* SiliconFetchUrl_Type_descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_enum_descriptors[0];
}
bool SiliconFetchUrl_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SiliconFetchUrl_Type SiliconFetchUrl::SOURCE;
const SiliconFetchUrl_Type SiliconFetchUrl::POST;
const SiliconFetchUrl_Type SiliconFetchUrl::IMAGE;
const SiliconFetchUrl_Type SiliconFetchUrl::MARKER;
const SiliconFetchUrl_Type SiliconFetchUrl::Type_MIN;
const SiliconFetchUrl_Type SiliconFetchUrl::Type_MAX;
const int SiliconFetchUrl::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SiliconFetchUrl_SourceType_descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_enum_descriptors[1];
}
bool SiliconFetchUrl_SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SiliconFetchUrl_SourceType SiliconFetchUrl::URL;
const SiliconFetchUrl_SourceType SiliconFetchUrl::RSS;
const SiliconFetchUrl_SourceType SiliconFetchUrl::API;
const SiliconFetchUrl_SourceType SiliconFetchUrl::SourceType_MIN;
const SiliconFetchUrl_SourceType SiliconFetchUrl::SourceType_MAX;
const int SiliconFetchUrl::SourceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SiliconFetchUrl_MobileVersion_descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_enum_descriptors[2];
}
bool SiliconFetchUrl_MobileVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SiliconFetchUrl_MobileVersion SiliconFetchUrl::PREFIX;
const SiliconFetchUrl_MobileVersion SiliconFetchUrl::AUTO;
const SiliconFetchUrl_MobileVersion SiliconFetchUrl::NONE;
const SiliconFetchUrl_MobileVersion SiliconFetchUrl::MobileVersion_MIN;
const SiliconFetchUrl_MobileVersion SiliconFetchUrl::MobileVersion_MAX;
const int SiliconFetchUrl::MobileVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SiliconeBodyPart_PartName_descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_enum_descriptors[3];
}
bool SiliconeBodyPart_PartName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 21:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SiliconeBodyPart_PartName SiliconeBodyPart::HEADER1;
const SiliconeBodyPart_PartName SiliconeBodyPart::HEADER2;
const SiliconeBodyPart_PartName SiliconeBodyPart::HEADER3;
const SiliconeBodyPart_PartName SiliconeBodyPart::HEADER4;
const SiliconeBodyPart_PartName SiliconeBodyPart::HEADER5;
const SiliconeBodyPart_PartName SiliconeBodyPart::HEADER6;
const SiliconeBodyPart_PartName SiliconeBodyPart::PREFORMATTED;
const SiliconeBodyPart_PartName SiliconeBodyPart::TEXT;
const SiliconeBodyPart_PartName SiliconeBodyPart::BREAK;
const SiliconeBodyPart_PartName SiliconeBodyPart::PARAGRAPH;
const SiliconeBodyPart_PartName SiliconeBodyPart::LIST;
const SiliconeBodyPart_PartName SiliconeBodyPart::LINK;
const SiliconeBodyPart_PartName SiliconeBodyPart::BLOCKQUOTE;
const SiliconeBodyPart_PartName SiliconeBodyPart::IMG;
const SiliconeBodyPart_PartName SiliconeBodyPart::INSTAGRAM;
const SiliconeBodyPart_PartName SiliconeBodyPart::VIDEO_YOUTUBE;
const SiliconeBodyPart_PartName SiliconeBodyPart::VIDEO_VIMEO;
const SiliconeBodyPart_PartName SiliconeBodyPart::VIDEO_VK;
const SiliconeBodyPart_PartName SiliconeBodyPart::IFRAME;
const SiliconeBodyPart_PartName SiliconeBodyPart::HTML;
const SiliconeBodyPart_PartName SiliconeBodyPart::PartName_MIN;
const SiliconeBodyPart_PartName SiliconeBodyPart::PartName_MAX;
const int SiliconeBodyPart::PartName_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SiliconSourceMode_descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_enum_descriptors[4];
}
bool SiliconSourceMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SiliconSourceProvider_descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_enum_descriptors[5];
}
bool SiliconSourceProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImageType_descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_enum_descriptors[6];
}
bool ImageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SourceParsingError_descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_enum_descriptors[7];
}
bool SourceParsingError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PostParsingResult_descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_enum_descriptors[8];
}
bool PostParsingResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PostParsingError_descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_enum_descriptors[9];
}
bool PostParsingError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImageProcessResult_descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_enum_descriptors[10];
}
bool ImageProcessResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImageProcessError_descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_enum_descriptors[11];
}
bool ImageProcessError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SiliconeVideoType_descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_enum_descriptors[12];
}
bool SiliconeVideoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconSourceId::kProviderFieldNumber;
const int SiliconSourceId::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconSourceId::SiliconSourceId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconSourceId)
}
SiliconSourceId::SiliconSourceId(const SiliconSourceId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  provider_ = from.provider_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconSourceId)
}

void SiliconSourceId::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  provider_ = 0;
}

SiliconSourceId::~SiliconSourceId() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconSourceId)
  SharedDtor();
}

void SiliconSourceId::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiliconSourceId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconSourceId::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconSourceId& SiliconSourceId::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconSourceId* SiliconSourceId::New(::google::protobuf::Arena* arena) const {
  SiliconSourceId* n = new SiliconSourceId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconSourceId::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconSourceId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  provider_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconSourceId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconSourceId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.SiliconSourceProvider provider = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::SiliconSourceProvider_IsValid(value)) {
            set_provider(static_cast< ::ru::mail::go::webbase::blobs::SiliconSourceProvider >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconSourceId.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconSourceId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconSourceId)
  return false;
#undef DO_
}

void SiliconSourceId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconSourceId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.SiliconSourceProvider provider = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->provider(), output);
  }

  // required string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconSourceId.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconSourceId)
}

::google::protobuf::uint8* SiliconSourceId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconSourceId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.SiliconSourceProvider provider = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->provider(), target);
  }

  // required string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconSourceId.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconSourceId)
  return target;
}

size_t SiliconSourceId::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.SiliconSourceId)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_provider()) {
    // required .ru.mail.go.webbase.blobs.SiliconSourceProvider provider = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->provider());
  }

  return total_size;
}
size_t SiliconSourceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconSourceId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required .ru.mail.go.webbase.blobs.SiliconSourceProvider provider = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->provider());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconSourceId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconSourceId)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconSourceId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconSourceId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconSourceId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconSourceId)
    MergeFrom(*source);
  }
}

void SiliconSourceId::MergeFrom(const SiliconSourceId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconSourceId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      provider_ = from.provider_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiliconSourceId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconSourceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconSourceId::CopyFrom(const SiliconSourceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconSourceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconSourceId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SiliconSourceId::Swap(SiliconSourceId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconSourceId::InternalSwap(SiliconSourceId* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(provider_, other->provider_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconSourceId::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconSourceId

// required .ru.mail.go.webbase.blobs.SiliconSourceProvider provider = 1;
bool SiliconSourceId::has_provider() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiliconSourceId::set_has_provider() {
  _has_bits_[0] |= 0x00000002u;
}
void SiliconSourceId::clear_has_provider() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiliconSourceId::clear_provider() {
  provider_ = 0;
  clear_has_provider();
}
::ru::mail::go::webbase::blobs::SiliconSourceProvider SiliconSourceId::provider() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconSourceId.provider)
  return static_cast< ::ru::mail::go::webbase::blobs::SiliconSourceProvider >(provider_);
}
void SiliconSourceId::set_provider(::ru::mail::go::webbase::blobs::SiliconSourceProvider value) {
  assert(::ru::mail::go::webbase::blobs::SiliconSourceProvider_IsValid(value));
  set_has_provider();
  provider_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconSourceId.provider)
}

// required string id = 2;
bool SiliconSourceId::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconSourceId::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconSourceId::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconSourceId::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& SiliconSourceId::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconSourceId.id)
  return id_.GetNoArena();
}
void SiliconSourceId::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconSourceId.id)
}
#if LANG_CXX11
void SiliconSourceId::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconSourceId.id)
}
#endif
void SiliconSourceId::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconSourceId.id)
}
void SiliconSourceId::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconSourceId.id)
}
::std::string* SiliconSourceId::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconSourceId.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconSourceId::release_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconSourceId.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconSourceId::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconSourceId.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconFetchUrl::kTypeFieldNumber;
const int SiliconFetchUrl::kSourceTypeFieldNumber;
const int SiliconFetchUrl::kModeFieldNumber;
const int SiliconFetchUrl::kPostsWithImageFieldNumber;
const int SiliconFetchUrl::kSourceIdFieldNumber;
const int SiliconFetchUrl::kPublicUrlFieldNumber;
const int SiliconFetchUrl::kTaggerInfoFieldNumber;
const int SiliconFetchUrl::kSourceNamesFieldNumber;
const int SiliconFetchUrl::kSiteIdFieldNumber;
const int SiliconFetchUrl::kCategoryIdsFieldNumber;
const int SiliconFetchUrl::kMarkerFieldNumber;
const int SiliconFetchUrl::kFirstMeetSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconFetchUrl::SiliconFetchUrl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconFetchUrl)
}
SiliconFetchUrl::SiliconFetchUrl(const SiliconFetchUrl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      postswithimage_(from.postswithimage_),
      sourcenames_(from.sourcenames_),
      categoryids_(from.categoryids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  publicurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_publicurl()) {
    publicurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publicurl_);
  }
  if (from.has_sourceid()) {
    sourceid_ = new ::ru::mail::go::webbase::blobs::SiliconSourceId(*from.sourceid_);
  } else {
    sourceid_ = NULL;
  }
  if (from.has_taggerinfo()) {
    taggerinfo_ = new ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo(*from.taggerinfo_);
  } else {
    taggerinfo_ = NULL;
  }
  if (from.has_marker()) {
    marker_ = new ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest(*from.marker_);
  } else {
    marker_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&type_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconFetchUrl)
}

void SiliconFetchUrl::SharedCtor() {
  _cached_size_ = 0;
  publicurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sourceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&sourceid_)) + sizeof(mode_));
}

SiliconFetchUrl::~SiliconFetchUrl() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconFetchUrl)
  SharedDtor();
}

void SiliconFetchUrl::SharedDtor() {
  publicurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sourceid_;
  if (this != internal_default_instance()) delete taggerinfo_;
  if (this != internal_default_instance()) delete marker_;
}

void SiliconFetchUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconFetchUrl::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconFetchUrl& SiliconFetchUrl::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconFetchUrl* SiliconFetchUrl::New(::google::protobuf::Arena* arena) const {
  SiliconFetchUrl* n = new SiliconFetchUrl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconFetchUrl::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconFetchUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  postswithimage_.Clear();
  sourcenames_.Clear();
  categoryids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!publicurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*publicurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sourceid_ != NULL);
      sourceid_->::ru::mail::go::webbase::blobs::SiliconSourceId::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(taggerinfo_ != NULL);
      taggerinfo_->::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(marker_ != NULL);
      marker_->::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest::Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&firstmeetsec_) -
        reinterpret_cast<char*>(&type_)) + sizeof(firstmeetsec_));
  }
  mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconFetchUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconFetchUrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.SiliconFetchUrl.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::SiliconFetchUrl_Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::blobs::SiliconFetchUrl_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.SiliconFetchUrl.SourceType sourceType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::SiliconFetchUrl_SourceType_IsValid(value)) {
            set_sourcetype(static_cast< ::ru::mail::go::webbase::blobs::SiliconFetchUrl_SourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.SiliconSourceMode mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::SiliconSourceMode_IsValid(value)) {
            set_mode(static_cast< ::ru::mail::go::webbase::blobs::SiliconSourceMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string postsWithImage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_postswithimage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->postswithimage(this->postswithimage_size() - 1).data(),
            static_cast<int>(this->postswithimage(this->postswithimage_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sourceid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string publicUrl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publicurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->publicurl().data(), static_cast<int>(this->publicurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconDocTaggerInfo taggerInfo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taggerinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string sourceNames = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sourcenames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourcenames(this->sourcenames_size() - 1).data(),
            static_cast<int>(this->sourcenames(this->sourcenames_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 siteId = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_siteid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &siteid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 categoryIds = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 80u, input, this->mutable_categoryids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_categoryids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest marker = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 firstMeetSec = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_firstmeetsec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &firstmeetsec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconFetchUrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconFetchUrl)
  return false;
#undef DO_
}

void SiliconFetchUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconFetchUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.SiliconFetchUrl.Type type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .ru.mail.go.webbase.blobs.SiliconFetchUrl.SourceType sourceType = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sourcetype(), output);
  }

  // required .ru.mail.go.webbase.blobs.SiliconSourceMode mode = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // repeated string postsWithImage = 4;
  for (int i = 0, n = this->postswithimage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postswithimage(i).data(), static_cast<int>(this->postswithimage(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->postswithimage(i), output);
  }

  // required .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->sourceid_, output);
  }

  // optional string publicUrl = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publicurl().data(), static_cast<int>(this->publicurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->publicurl(), output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconDocTaggerInfo taggerInfo = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->taggerinfo_, output);
  }

  // repeated string sourceNames = 8;
  for (int i = 0, n = this->sourcenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcenames(i).data(), static_cast<int>(this->sourcenames(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sourcenames(i), output);
  }

  // optional int64 siteId = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->siteid(), output);
  }

  // repeated int64 categoryIds = 10;
  for (int i = 0, n = this->categoryids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      10, this->categoryids(i), output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest marker = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->marker_, output);
  }

  // optional int64 firstMeetSec = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->firstmeetsec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconFetchUrl)
}

::google::protobuf::uint8* SiliconFetchUrl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconFetchUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.SiliconFetchUrl.Type type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .ru.mail.go.webbase.blobs.SiliconFetchUrl.SourceType sourceType = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sourcetype(), target);
  }

  // required .ru.mail.go.webbase.blobs.SiliconSourceMode mode = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  // repeated string postsWithImage = 4;
  for (int i = 0, n = this->postswithimage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postswithimage(i).data(), static_cast<int>(this->postswithimage(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->postswithimage(i), target);
  }

  // required .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->sourceid_, deterministic, target);
  }

  // optional string publicUrl = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publicurl().data(), static_cast<int>(this->publicurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->publicurl(), target);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconDocTaggerInfo taggerInfo = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->taggerinfo_, deterministic, target);
  }

  // repeated string sourceNames = 8;
  for (int i = 0, n = this->sourcenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcenames(i).data(), static_cast<int>(this->sourcenames(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->sourcenames(i), target);
  }

  // optional int64 siteId = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->siteid(), target);
  }

  // repeated int64 categoryIds = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(10, this->categoryids_, target);

  // optional .ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest marker = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->marker_, deterministic, target);
  }

  // optional int64 firstMeetSec = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->firstmeetsec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconFetchUrl)
  return target;
}

size_t SiliconFetchUrl::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.SiliconFetchUrl)
  size_t total_size = 0;

  if (has_sourceid()) {
    // required .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sourceid_);
  }

  if (has_type()) {
    // required .ru.mail.go.webbase.blobs.SiliconFetchUrl.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_sourcetype()) {
    // required .ru.mail.go.webbase.blobs.SiliconFetchUrl.SourceType sourceType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sourcetype());
  }

  if (has_mode()) {
    // required .ru.mail.go.webbase.blobs.SiliconSourceMode mode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  return total_size;
}
size_t SiliconFetchUrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconFetchUrl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000132) ^ 0x00000132) == 0) {  // All required fields are present.
    // required .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sourceid_);

    // required .ru.mail.go.webbase.blobs.SiliconFetchUrl.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required .ru.mail.go.webbase.blobs.SiliconFetchUrl.SourceType sourceType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sourcetype());

    // required .ru.mail.go.webbase.blobs.SiliconSourceMode mode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string postsWithImage = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->postswithimage_size());
  for (int i = 0, n = this->postswithimage_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->postswithimage(i));
  }

  // repeated string sourceNames = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sourcenames_size());
  for (int i = 0, n = this->sourcenames_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sourcenames(i));
  }

  // repeated int64 categoryIds = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->categoryids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->categoryids_size());
    total_size += data_size;
  }

  // optional string publicUrl = 6;
  if (has_publicurl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publicurl());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional .ru.mail.go.webbase.blobs.SiliconDocTaggerInfo taggerInfo = 7;
    if (has_taggerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->taggerinfo_);
    }

    // optional .ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest marker = 11;
    if (has_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->marker_);
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional int64 siteId = 9;
    if (has_siteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->siteid());
    }

    // optional int64 firstMeetSec = 12;
    if (has_firstmeetsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->firstmeetsec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconFetchUrl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconFetchUrl)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconFetchUrl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconFetchUrl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconFetchUrl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconFetchUrl)
    MergeFrom(*source);
  }
}

void SiliconFetchUrl::MergeFrom(const SiliconFetchUrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconFetchUrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  postswithimage_.MergeFrom(from.postswithimage_);
  sourcenames_.MergeFrom(from.sourcenames_);
  categoryids_.MergeFrom(from.categoryids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_publicurl();
      publicurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publicurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sourceid()->::ru::mail::go::webbase::blobs::SiliconSourceId::MergeFrom(from.sourceid());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_taggerinfo()->::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo::MergeFrom(from.taggerinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_marker()->::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest::MergeFrom(from.marker());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      sourcetype_ = from.sourcetype_;
    }
    if (cached_has_bits & 0x00000040u) {
      siteid_ = from.siteid_;
    }
    if (cached_has_bits & 0x00000080u) {
      firstmeetsec_ = from.firstmeetsec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_mode(from.mode());
  }
}

void SiliconFetchUrl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconFetchUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconFetchUrl::CopyFrom(const SiliconFetchUrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconFetchUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconFetchUrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000132) != 0x00000132) return false;
  if (has_sourceid()) {
    if (!this->sourceid_->IsInitialized()) return false;
  }
  if (has_marker()) {
    if (!this->marker_->IsInitialized()) return false;
  }
  return true;
}

void SiliconFetchUrl::Swap(SiliconFetchUrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconFetchUrl::InternalSwap(SiliconFetchUrl* other) {
  using std::swap;
  postswithimage_.InternalSwap(&other->postswithimage_);
  sourcenames_.InternalSwap(&other->sourcenames_);
  categoryids_.InternalSwap(&other->categoryids_);
  publicurl_.Swap(&other->publicurl_);
  swap(sourceid_, other->sourceid_);
  swap(taggerinfo_, other->taggerinfo_);
  swap(marker_, other->marker_);
  swap(type_, other->type_);
  swap(sourcetype_, other->sourcetype_);
  swap(siteid_, other->siteid_);
  swap(firstmeetsec_, other->firstmeetsec_);
  swap(mode_, other->mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconFetchUrl::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconFetchUrl

// required .ru.mail.go.webbase.blobs.SiliconFetchUrl.Type type = 1;
bool SiliconFetchUrl::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SiliconFetchUrl::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void SiliconFetchUrl::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void SiliconFetchUrl::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::blobs::SiliconFetchUrl_Type SiliconFetchUrl::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.type)
  return static_cast< ::ru::mail::go::webbase::blobs::SiliconFetchUrl_Type >(type_);
}
void SiliconFetchUrl::set_type(::ru::mail::go::webbase::blobs::SiliconFetchUrl_Type value) {
  assert(::ru::mail::go::webbase::blobs::SiliconFetchUrl_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.type)
}

// required .ru.mail.go.webbase.blobs.SiliconFetchUrl.SourceType sourceType = 2;
bool SiliconFetchUrl::has_sourcetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SiliconFetchUrl::set_has_sourcetype() {
  _has_bits_[0] |= 0x00000020u;
}
void SiliconFetchUrl::clear_has_sourcetype() {
  _has_bits_[0] &= ~0x00000020u;
}
void SiliconFetchUrl::clear_sourcetype() {
  sourcetype_ = 0;
  clear_has_sourcetype();
}
::ru::mail::go::webbase::blobs::SiliconFetchUrl_SourceType SiliconFetchUrl::sourcetype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceType)
  return static_cast< ::ru::mail::go::webbase::blobs::SiliconFetchUrl_SourceType >(sourcetype_);
}
void SiliconFetchUrl::set_sourcetype(::ru::mail::go::webbase::blobs::SiliconFetchUrl_SourceType value) {
  assert(::ru::mail::go::webbase::blobs::SiliconFetchUrl_SourceType_IsValid(value));
  set_has_sourcetype();
  sourcetype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceType)
}

// required .ru.mail.go.webbase.blobs.SiliconSourceMode mode = 3;
bool SiliconFetchUrl::has_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SiliconFetchUrl::set_has_mode() {
  _has_bits_[0] |= 0x00000100u;
}
void SiliconFetchUrl::clear_has_mode() {
  _has_bits_[0] &= ~0x00000100u;
}
void SiliconFetchUrl::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
::ru::mail::go::webbase::blobs::SiliconSourceMode SiliconFetchUrl::mode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.mode)
  return static_cast< ::ru::mail::go::webbase::blobs::SiliconSourceMode >(mode_);
}
void SiliconFetchUrl::set_mode(::ru::mail::go::webbase::blobs::SiliconSourceMode value) {
  assert(::ru::mail::go::webbase::blobs::SiliconSourceMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.mode)
}

// repeated string postsWithImage = 4;
int SiliconFetchUrl::postswithimage_size() const {
  return postswithimage_.size();
}
void SiliconFetchUrl::clear_postswithimage() {
  postswithimage_.Clear();
}
const ::std::string& SiliconFetchUrl::postswithimage(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
  return postswithimage_.Get(index);
}
::std::string* SiliconFetchUrl::mutable_postswithimage(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
  return postswithimage_.Mutable(index);
}
void SiliconFetchUrl::set_postswithimage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
  postswithimage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SiliconFetchUrl::set_postswithimage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
  postswithimage_.Mutable(index)->assign(std::move(value));
}
#endif
void SiliconFetchUrl::set_postswithimage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  postswithimage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
}
void SiliconFetchUrl::set_postswithimage(int index, const char* value, size_t size) {
  postswithimage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
}
::std::string* SiliconFetchUrl::add_postswithimage() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
  return postswithimage_.Add();
}
void SiliconFetchUrl::add_postswithimage(const ::std::string& value) {
  postswithimage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
}
#if LANG_CXX11
void SiliconFetchUrl::add_postswithimage(::std::string&& value) {
  postswithimage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
}
#endif
void SiliconFetchUrl::add_postswithimage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  postswithimage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
}
void SiliconFetchUrl::add_postswithimage(const char* value, size_t size) {
  postswithimage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SiliconFetchUrl::postswithimage() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
  return postswithimage_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SiliconFetchUrl::mutable_postswithimage() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
  return &postswithimage_;
}

// required .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 5;
bool SiliconFetchUrl::has_sourceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiliconFetchUrl::set_has_sourceid() {
  _has_bits_[0] |= 0x00000002u;
}
void SiliconFetchUrl::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiliconFetchUrl::clear_sourceid() {
  if (sourceid_ != NULL) sourceid_->::ru::mail::go::webbase::blobs::SiliconSourceId::Clear();
  clear_has_sourceid();
}
const ::ru::mail::go::webbase::blobs::SiliconSourceId& SiliconFetchUrl::sourceid() const {
  const ::ru::mail::go::webbase::blobs::SiliconSourceId* p = sourceid_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceId)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconSourceId*>(
      &::ru::mail::go::webbase::blobs::_SiliconSourceId_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconSourceId* SiliconFetchUrl::mutable_sourceid() {
  set_has_sourceid();
  if (sourceid_ == NULL) {
    sourceid_ = new ::ru::mail::go::webbase::blobs::SiliconSourceId;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceId)
  return sourceid_;
}
::ru::mail::go::webbase::blobs::SiliconSourceId* SiliconFetchUrl::release_sourceid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceId)
  clear_has_sourceid();
  ::ru::mail::go::webbase::blobs::SiliconSourceId* temp = sourceid_;
  sourceid_ = NULL;
  return temp;
}
void SiliconFetchUrl::set_allocated_sourceid(::ru::mail::go::webbase::blobs::SiliconSourceId* sourceid) {
  delete sourceid_;
  sourceid_ = sourceid;
  if (sourceid) {
    set_has_sourceid();
  } else {
    clear_has_sourceid();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceId)
}

// optional string publicUrl = 6;
bool SiliconFetchUrl::has_publicurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconFetchUrl::set_has_publicurl() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconFetchUrl::clear_has_publicurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconFetchUrl::clear_publicurl() {
  publicurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publicurl();
}
const ::std::string& SiliconFetchUrl::publicurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl)
  return publicurl_.GetNoArena();
}
void SiliconFetchUrl::set_publicurl(const ::std::string& value) {
  set_has_publicurl();
  publicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl)
}
#if LANG_CXX11
void SiliconFetchUrl::set_publicurl(::std::string&& value) {
  set_has_publicurl();
  publicurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl)
}
#endif
void SiliconFetchUrl::set_publicurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_publicurl();
  publicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl)
}
void SiliconFetchUrl::set_publicurl(const char* value, size_t size) {
  set_has_publicurl();
  publicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl)
}
::std::string* SiliconFetchUrl::mutable_publicurl() {
  set_has_publicurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl)
  return publicurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconFetchUrl::release_publicurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl)
  clear_has_publicurl();
  return publicurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconFetchUrl::set_allocated_publicurl(::std::string* publicurl) {
  if (publicurl != NULL) {
    set_has_publicurl();
  } else {
    clear_has_publicurl();
  }
  publicurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publicurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl)
}

// optional .ru.mail.go.webbase.blobs.SiliconDocTaggerInfo taggerInfo = 7;
bool SiliconFetchUrl::has_taggerinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SiliconFetchUrl::set_has_taggerinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void SiliconFetchUrl::clear_has_taggerinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void SiliconFetchUrl::clear_taggerinfo() {
  if (taggerinfo_ != NULL) taggerinfo_->::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo::Clear();
  clear_has_taggerinfo();
}
const ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo& SiliconFetchUrl::taggerinfo() const {
  const ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* p = taggerinfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.taggerInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo*>(
      &::ru::mail::go::webbase::blobs::_SiliconDocTaggerInfo_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* SiliconFetchUrl::mutable_taggerinfo() {
  set_has_taggerinfo();
  if (taggerinfo_ == NULL) {
    taggerinfo_ = new ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchUrl.taggerInfo)
  return taggerinfo_;
}
::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* SiliconFetchUrl::release_taggerinfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchUrl.taggerInfo)
  clear_has_taggerinfo();
  ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* temp = taggerinfo_;
  taggerinfo_ = NULL;
  return temp;
}
void SiliconFetchUrl::set_allocated_taggerinfo(::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* taggerinfo) {
  delete taggerinfo_;
  taggerinfo_ = taggerinfo;
  if (taggerinfo) {
    set_has_taggerinfo();
  } else {
    clear_has_taggerinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchUrl.taggerInfo)
}

// repeated string sourceNames = 8;
int SiliconFetchUrl::sourcenames_size() const {
  return sourcenames_.size();
}
void SiliconFetchUrl::clear_sourcenames() {
  sourcenames_.Clear();
}
const ::std::string& SiliconFetchUrl::sourcenames(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
  return sourcenames_.Get(index);
}
::std::string* SiliconFetchUrl::mutable_sourcenames(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
  return sourcenames_.Mutable(index);
}
void SiliconFetchUrl::set_sourcenames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
  sourcenames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SiliconFetchUrl::set_sourcenames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
  sourcenames_.Mutable(index)->assign(std::move(value));
}
#endif
void SiliconFetchUrl::set_sourcenames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sourcenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
}
void SiliconFetchUrl::set_sourcenames(int index, const char* value, size_t size) {
  sourcenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
}
::std::string* SiliconFetchUrl::add_sourcenames() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
  return sourcenames_.Add();
}
void SiliconFetchUrl::add_sourcenames(const ::std::string& value) {
  sourcenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
}
#if LANG_CXX11
void SiliconFetchUrl::add_sourcenames(::std::string&& value) {
  sourcenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
}
#endif
void SiliconFetchUrl::add_sourcenames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sourcenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
}
void SiliconFetchUrl::add_sourcenames(const char* value, size_t size) {
  sourcenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SiliconFetchUrl::sourcenames() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
  return sourcenames_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SiliconFetchUrl::mutable_sourcenames() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
  return &sourcenames_;
}

// optional int64 siteId = 9;
bool SiliconFetchUrl::has_siteid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SiliconFetchUrl::set_has_siteid() {
  _has_bits_[0] |= 0x00000040u;
}
void SiliconFetchUrl::clear_has_siteid() {
  _has_bits_[0] &= ~0x00000040u;
}
void SiliconFetchUrl::clear_siteid() {
  siteid_ = GOOGLE_LONGLONG(0);
  clear_has_siteid();
}
::google::protobuf::int64 SiliconFetchUrl::siteid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.siteId)
  return siteid_;
}
void SiliconFetchUrl::set_siteid(::google::protobuf::int64 value) {
  set_has_siteid();
  siteid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.siteId)
}

// repeated int64 categoryIds = 10;
int SiliconFetchUrl::categoryids_size() const {
  return categoryids_.size();
}
void SiliconFetchUrl::clear_categoryids() {
  categoryids_.Clear();
}
::google::protobuf::int64 SiliconFetchUrl::categoryids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.categoryIds)
  return categoryids_.Get(index);
}
void SiliconFetchUrl::set_categoryids(int index, ::google::protobuf::int64 value) {
  categoryids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.categoryIds)
}
void SiliconFetchUrl::add_categoryids(::google::protobuf::int64 value) {
  categoryids_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchUrl.categoryIds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SiliconFetchUrl::categoryids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconFetchUrl.categoryIds)
  return categoryids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SiliconFetchUrl::mutable_categoryids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconFetchUrl.categoryIds)
  return &categoryids_;
}

// optional .ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest marker = 11;
bool SiliconFetchUrl::has_marker() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SiliconFetchUrl::set_has_marker() {
  _has_bits_[0] |= 0x00000008u;
}
void SiliconFetchUrl::clear_has_marker() {
  _has_bits_[0] &= ~0x00000008u;
}
void SiliconFetchUrl::clear_marker() {
  if (marker_ != NULL) marker_->::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest::Clear();
  clear_has_marker();
}
const ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest& SiliconFetchUrl::marker() const {
  const ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest* p = marker_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.marker)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest*>(
      &::ru::mail::go::webbase::blobs::_SiliconDocParserInfoDigest_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest* SiliconFetchUrl::mutable_marker() {
  set_has_marker();
  if (marker_ == NULL) {
    marker_ = new ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchUrl.marker)
  return marker_;
}
::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest* SiliconFetchUrl::release_marker() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchUrl.marker)
  clear_has_marker();
  ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest* temp = marker_;
  marker_ = NULL;
  return temp;
}
void SiliconFetchUrl::set_allocated_marker(::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest* marker) {
  delete marker_;
  marker_ = marker;
  if (marker) {
    set_has_marker();
  } else {
    clear_has_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchUrl.marker)
}

// optional int64 firstMeetSec = 12;
bool SiliconFetchUrl::has_firstmeetsec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SiliconFetchUrl::set_has_firstmeetsec() {
  _has_bits_[0] |= 0x00000080u;
}
void SiliconFetchUrl::clear_has_firstmeetsec() {
  _has_bits_[0] &= ~0x00000080u;
}
void SiliconFetchUrl::clear_firstmeetsec() {
  firstmeetsec_ = GOOGLE_LONGLONG(0);
  clear_has_firstmeetsec();
}
::google::protobuf::int64 SiliconFetchUrl::firstmeetsec() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.firstMeetSec)
  return firstmeetsec_;
}
void SiliconFetchUrl::set_firstmeetsec(::google::protobuf::int64 value) {
  set_has_firstmeetsec();
  firstmeetsec_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.firstMeetSec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconFetchedDoc::kUrlFieldNumber;
const int SiliconFetchedDoc::kMurlFieldNumber;
const int SiliconFetchedDoc::kSourceModeFieldNumber;
const int SiliconFetchedDoc::kParserInfoFieldNumber;
const int SiliconFetchedDoc::kTaggerInfoFieldNumber;
const int SiliconFetchedDoc::kFetchTimestampFieldNumber;
const int SiliconFetchedDoc::kSourceIdFieldNumber;
const int SiliconFetchedDoc::kDiscoveryVersionFieldNumber;
const int SiliconFetchedDoc::kIsRemovedFieldNumber;
const int SiliconFetchedDoc::kPublicationDateFieldNumber;
const int SiliconFetchedDoc::kCanonicalizedUrlFieldNumber;
const int SiliconFetchedDoc::kSourceNamesFieldNumber;
const int SiliconFetchedDoc::kSiteIdFieldNumber;
const int SiliconFetchedDoc::kCategoryIdsFieldNumber;
const int SiliconFetchedDoc::kUrlHashFieldNumber;
const int SiliconFetchedDoc::kRegionIdFieldNumber;
const int SiliconFetchedDoc::kFirstMeetSecFieldNumber;
const int SiliconFetchedDoc::kProvidersParamsFieldNumber;
const int SiliconFetchedDoc::kNewsTagsFieldNumber;
const int SiliconFetchedDoc::kNewsStoriesFieldNumber;
const int SiliconFetchedDoc::kVkPostFieldNumber;
const int SiliconFetchedDoc::kScrollToClickInfoFieldNumber;
const int SiliconFetchedDoc::kUserPixelsFieldNumber;
const int SiliconFetchedDoc::kStateFieldNumber;
const int SiliconFetchedDoc::kIsDocStateUpdatedFieldNumber;
const int SiliconFetchedDoc::kJsonBlocksFieldNumber;
const int SiliconFetchedDoc::kTagsFieldNumber;
const int SiliconFetchedDoc::kCustomAdminFieldsFieldNumber;
const int SiliconFetchedDoc::kExternalUrlFieldNumber;
const int SiliconFetchedDoc::kIsAdminCustomDocUpdatedFieldNumber;
const int SiliconFetchedDoc::kHasContentsFieldNumber;
const int SiliconFetchedDoc::kRisksFieldsFieldNumber;
const int SiliconFetchedDoc::kOriginalUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconFetchedDoc::SiliconFetchedDoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
}
SiliconFetchedDoc::SiliconFetchedDoc(const SiliconFetchedDoc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sourcenames_(from.sourcenames_),
      categoryids_(from.categoryids_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  murl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_murl()) {
    murl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.murl_);
  }
  canonicalizedurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_canonicalizedurl()) {
    canonicalizedurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonicalizedurl_);
  }
  vkpost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vkpost()) {
    vkpost_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vkpost_);
  }
  jsonblocks_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_jsonblocks()) {
    jsonblocks_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jsonblocks_);
  }
  external_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_external_url()) {
    external_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_url_);
  }
  original_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_original_url()) {
    original_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_url_);
  }
  if (from.has_parserinfo()) {
    parserinfo_ = new ::ru::mail::go::webbase::blobs::SiliconDocParserInfo(*from.parserinfo_);
  } else {
    parserinfo_ = NULL;
  }
  if (from.has_taggerinfo()) {
    taggerinfo_ = new ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo(*from.taggerinfo_);
  } else {
    taggerinfo_ = NULL;
  }
  if (from.has_sourceid()) {
    sourceid_ = new ::ru::mail::go::webbase::blobs::SiliconSourceId(*from.sourceid_);
  } else {
    sourceid_ = NULL;
  }
  if (from.has_providersparams()) {
    providersparams_ = new ::ru::mail::go::webbase::blobs::ProvidersParams(*from.providersparams_);
  } else {
    providersparams_ = NULL;
  }
  if (from.has_newstags()) {
    newstags_ = new ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData(*from.newstags_);
  } else {
    newstags_ = NULL;
  }
  if (from.has_newsstories()) {
    newsstories_ = new ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData(*from.newsstories_);
  } else {
    newsstories_ = NULL;
  }
  if (from.has_scrolltoclickinfo()) {
    scrolltoclickinfo_ = new ::ru::mail::go::webbase::blobs::ScrollToClickInfo(*from.scrolltoclickinfo_);
  } else {
    scrolltoclickinfo_ = NULL;
  }
  if (from.has_userpixels()) {
    userpixels_ = new ::ru::mail::go::webbase::blobs::UserPixels(*from.userpixels_);
  } else {
    userpixels_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::ru::mail::go::webbase::blobs::SiliconeDocState(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_customadminfields()) {
    customadminfields_ = new ::ru::mail::go::webbase::blobs::CustomAdminFields(*from.customadminfields_);
  } else {
    customadminfields_ = NULL;
  }
  if (from.has_risksfields()) {
    risksfields_ = new ::ru::mail::go::webbase::blobs::RisksFields(*from.risksfields_);
  } else {
    risksfields_ = NULL;
  }
  ::memcpy(&fetchtimestamp_, &from.fetchtimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&hascontents_) -
    reinterpret_cast<char*>(&fetchtimestamp_)) + sizeof(hascontents_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
}

void SiliconFetchedDoc::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  murl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonicalizedurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vkpost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jsonblocks_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&parserinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hascontents_) -
      reinterpret_cast<char*>(&parserinfo_)) + sizeof(hascontents_));
}

SiliconFetchedDoc::~SiliconFetchedDoc() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
  SharedDtor();
}

void SiliconFetchedDoc::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  murl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonicalizedurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vkpost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jsonblocks_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parserinfo_;
  if (this != internal_default_instance()) delete taggerinfo_;
  if (this != internal_default_instance()) delete sourceid_;
  if (this != internal_default_instance()) delete providersparams_;
  if (this != internal_default_instance()) delete newstags_;
  if (this != internal_default_instance()) delete newsstories_;
  if (this != internal_default_instance()) delete scrolltoclickinfo_;
  if (this != internal_default_instance()) delete userpixels_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete customadminfields_;
  if (this != internal_default_instance()) delete risksfields_;
}

void SiliconFetchedDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconFetchedDoc::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconFetchedDoc& SiliconFetchedDoc::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconFetchedDoc* SiliconFetchedDoc::New(::google::protobuf::Arena* arena) const {
  SiliconFetchedDoc* n = new SiliconFetchedDoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconFetchedDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  sourcenames_.Clear();
  categoryids_.Clear();
  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!murl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*murl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!canonicalizedurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*canonicalizedurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!vkpost_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vkpost_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!jsonblocks_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*jsonblocks_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!external_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*external_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!original_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*original_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(parserinfo_ != NULL);
      parserinfo_->::ru::mail::go::webbase::blobs::SiliconDocParserInfo::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(taggerinfo_ != NULL);
      taggerinfo_->::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(sourceid_ != NULL);
      sourceid_->::ru::mail::go::webbase::blobs::SiliconSourceId::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(providersparams_ != NULL);
      providersparams_->::ru::mail::go::webbase::blobs::ProvidersParams::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(newstags_ != NULL);
      newstags_->::ru::mail::go::webbase::blobs::SiliconeNewsTagsData::Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(newsstories_ != NULL);
      newsstories_->::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData::Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(scrolltoclickinfo_ != NULL);
      scrolltoclickinfo_->::ru::mail::go::webbase::blobs::ScrollToClickInfo::Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(userpixels_ != NULL);
      userpixels_->::ru::mail::go::webbase::blobs::UserPixels::Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(state_ != NULL);
      state_->::ru::mail::go::webbase::blobs::SiliconeDocState::Clear();
    }
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(customadminfields_ != NULL);
      customadminfields_->::ru::mail::go::webbase::blobs::CustomAdminFields::Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(risksfields_ != NULL);
      risksfields_->::ru::mail::go::webbase::blobs::RisksFields::Clear();
    }
  }
  if (cached_has_bits & 16515072u) {
    ::memset(&fetchtimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&siteid_) -
        reinterpret_cast<char*>(&fetchtimestamp_)) + sizeof(siteid_));
  }
  if (cached_has_bits & 1056964608u) {
    ::memset(&urlhash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hascontents_) -
        reinterpret_cast<char*>(&urlhash_)) + sizeof(hascontents_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconFetchedDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconFetchedDoc.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string murl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_murl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->murl().data(), static_cast<int>(this->murl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.SiliconSourceMode sourceMode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::SiliconSourceMode_IsValid(value)) {
            set_sourcemode(static_cast< ::ru::mail::go::webbase::blobs::SiliconSourceMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.SiliconDocParserInfo parserInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parserinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.SiliconDocTaggerInfo taggerInfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taggerinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 fetchTimestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_fetchtimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fetchtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sourceid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 discoveryVersion = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_discoveryversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &discoveryversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isRemoved = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_isremoved();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isremoved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 publicationDate = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_publicationdate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &publicationdate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string canonicalizedUrl = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canonicalizedurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->canonicalizedurl().data(), static_cast<int>(this->canonicalizedurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string sourceNames = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sourcenames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourcenames(this->sourcenames_size() - 1).data(),
            static_cast<int>(this->sourcenames(this->sourcenames_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 siteId = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_siteid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &siteid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 categoryIds = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 112u, input, this->mutable_categoryids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_categoryids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 urlHash = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_urlhash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &urlhash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 regionId = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_regionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 firstMeetSec = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_firstmeetsec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &firstmeetsec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ProvidersParams providersParams = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_providersparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconeNewsTagsData newsTags = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newstags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconeNewsStoriesData newsStories = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newsstories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes vkPost = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vkpost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ScrollToClickInfo scrollToClickInfo = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scrolltoclickinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UserPixels userPixels = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userpixels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconeDocState state = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isDocStateUpdated = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_isdocstateupdated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdocstateupdated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string jsonBlocks = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsonblocks()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jsonblocks().data(), static_cast<int>(this->jsonblocks().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.CustomAdminFields customAdminFields = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customadminfields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string external_url = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_url().data(), static_cast<int>(this->external_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isAdminCustomDocUpdated = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_isadmincustomdocupdated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isadmincustomdocupdated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hasContents = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_hascontents();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hascontents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.RisksFields risksFields = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_risksfields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string original_url = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_original_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->original_url().data(), static_cast<int>(this->original_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
  return false;
#undef DO_
}

void SiliconFetchedDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchedDoc.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string murl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->murl().data(), static_cast<int>(this->murl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->murl(), output);
  }

  // required .ru.mail.go.webbase.blobs.SiliconSourceMode sourceMode = 3;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sourcemode(), output);
  }

  // required .ru.mail.go.webbase.blobs.SiliconDocParserInfo parserInfo = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->parserinfo_, output);
  }

  // required .ru.mail.go.webbase.blobs.SiliconDocTaggerInfo taggerInfo = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->taggerinfo_, output);
  }

  // optional int64 fetchTimestamp = 6;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->fetchtimestamp(), output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->sourceid_, output);
  }

  // optional int64 discoveryVersion = 8;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->discoveryversion(), output);
  }

  // optional bool isRemoved = 9;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isremoved(), output);
  }

  // optional int64 publicationDate = 10;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->publicationdate(), output);
  }

  // optional string canonicalizedUrl = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->canonicalizedurl().data(), static_cast<int>(this->canonicalizedurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->canonicalizedurl(), output);
  }

  // repeated string sourceNames = 12;
  for (int i = 0, n = this->sourcenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcenames(i).data(), static_cast<int>(this->sourcenames(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->sourcenames(i), output);
  }

  // optional int64 siteId = 13;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->siteid(), output);
  }

  // repeated int64 categoryIds = 14;
  for (int i = 0, n = this->categoryids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      14, this->categoryids(i), output);
  }

  // optional int64 urlHash = 15;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->urlhash(), output);
  }

  // optional uint32 regionId = 16;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->regionid(), output);
  }

  // optional int64 firstMeetSec = 17;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->firstmeetsec(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ProvidersParams providersParams = 18;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->providersparams_, output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeNewsTagsData newsTags = 19;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->newstags_, output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeNewsStoriesData newsStories = 20;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->newsstories_, output);
  }

  // optional bytes vkPost = 22;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->vkpost(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ScrollToClickInfo scrollToClickInfo = 23;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->scrolltoclickinfo_, output);
  }

  // optional .ru.mail.go.webbase.blobs.UserPixels userPixels = 24;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->userpixels_, output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeDocState state = 25;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->state_, output);
  }

  // optional bool isDocStateUpdated = 26;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->isdocstateupdated(), output);
  }

  // optional string jsonBlocks = 27;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jsonblocks().data(), static_cast<int>(this->jsonblocks().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->jsonblocks(), output);
  }

  // repeated string tags = 28;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->tags(i), output);
  }

  // optional .ru.mail.go.webbase.blobs.CustomAdminFields customAdminFields = 29;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->customadminfields_, output);
  }

  // optional string external_url = 30;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_url().data(), static_cast<int>(this->external_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->external_url(), output);
  }

  // optional bool isAdminCustomDocUpdated = 31;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->isadmincustomdocupdated(), output);
  }

  // optional bool hasContents = 32;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->hascontents(), output);
  }

  // optional .ru.mail.go.webbase.blobs.RisksFields risksFields = 33;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *this->risksfields_, output);
  }

  // optional string original_url = 34;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->original_url().data(), static_cast<int>(this->original_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->original_url(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
}

::google::protobuf::uint8* SiliconFetchedDoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchedDoc.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional string murl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->murl().data(), static_cast<int>(this->murl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->murl(), target);
  }

  // required .ru.mail.go.webbase.blobs.SiliconSourceMode sourceMode = 3;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sourcemode(), target);
  }

  // required .ru.mail.go.webbase.blobs.SiliconDocParserInfo parserInfo = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->parserinfo_, deterministic, target);
  }

  // required .ru.mail.go.webbase.blobs.SiliconDocTaggerInfo taggerInfo = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->taggerinfo_, deterministic, target);
  }

  // optional int64 fetchTimestamp = 6;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->fetchtimestamp(), target);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->sourceid_, deterministic, target);
  }

  // optional int64 discoveryVersion = 8;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->discoveryversion(), target);
  }

  // optional bool isRemoved = 9;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isremoved(), target);
  }

  // optional int64 publicationDate = 10;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->publicationdate(), target);
  }

  // optional string canonicalizedUrl = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->canonicalizedurl().data(), static_cast<int>(this->canonicalizedurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->canonicalizedurl(), target);
  }

  // repeated string sourceNames = 12;
  for (int i = 0, n = this->sourcenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcenames(i).data(), static_cast<int>(this->sourcenames(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->sourcenames(i), target);
  }

  // optional int64 siteId = 13;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->siteid(), target);
  }

  // repeated int64 categoryIds = 14;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(14, this->categoryids_, target);

  // optional int64 urlHash = 15;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->urlhash(), target);
  }

  // optional uint32 regionId = 16;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->regionid(), target);
  }

  // optional int64 firstMeetSec = 17;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->firstmeetsec(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ProvidersParams providersParams = 18;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->providersparams_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeNewsTagsData newsTags = 19;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->newstags_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeNewsStoriesData newsStories = 20;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->newsstories_, deterministic, target);
  }

  // optional bytes vkPost = 22;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->vkpost(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ScrollToClickInfo scrollToClickInfo = 23;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->scrolltoclickinfo_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.UserPixels userPixels = 24;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->userpixels_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeDocState state = 25;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->state_, deterministic, target);
  }

  // optional bool isDocStateUpdated = 26;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->isdocstateupdated(), target);
  }

  // optional string jsonBlocks = 27;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jsonblocks().data(), static_cast<int>(this->jsonblocks().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->jsonblocks(), target);
  }

  // repeated string tags = 28;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(28, this->tags(i), target);
  }

  // optional .ru.mail.go.webbase.blobs.CustomAdminFields customAdminFields = 29;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->customadminfields_, deterministic, target);
  }

  // optional string external_url = 30;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_url().data(), static_cast<int>(this->external_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->external_url(), target);
  }

  // optional bool isAdminCustomDocUpdated = 31;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->isadmincustomdocupdated(), target);
  }

  // optional bool hasContents = 32;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->hascontents(), target);
  }

  // optional .ru.mail.go.webbase.blobs.RisksFields risksFields = 33;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, *this->risksfields_, deterministic, target);
  }

  // optional string original_url = 34;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->original_url().data(), static_cast<int>(this->original_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->original_url(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 536870912, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
  return target;
}

size_t SiliconFetchedDoc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_parserinfo()) {
    // required .ru.mail.go.webbase.blobs.SiliconDocParserInfo parserInfo = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parserinfo_);
  }

  if (has_taggerinfo()) {
    // required .ru.mail.go.webbase.blobs.SiliconDocTaggerInfo taggerInfo = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->taggerinfo_);
  }

  if (has_sourcemode()) {
    // required .ru.mail.go.webbase.blobs.SiliconSourceMode sourceMode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sourcemode());
  }

  return total_size;
}
size_t SiliconFetchedDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00100181) ^ 0x00100181) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required .ru.mail.go.webbase.blobs.SiliconDocParserInfo parserInfo = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parserinfo_);

    // required .ru.mail.go.webbase.blobs.SiliconDocTaggerInfo taggerInfo = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->taggerinfo_);

    // required .ru.mail.go.webbase.blobs.SiliconSourceMode sourceMode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sourcemode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string sourceNames = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sourcenames_size());
  for (int i = 0, n = this->sourcenames_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sourcenames(i));
  }

  // repeated int64 categoryIds = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->categoryids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->categoryids_size());
    total_size += data_size;
  }

  // repeated string tags = 28;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  if (_has_bits_[0 / 32] & 126u) {
    // optional string murl = 2;
    if (has_murl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->murl());
    }

    // optional string canonicalizedUrl = 11;
    if (has_canonicalizedurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->canonicalizedurl());
    }

    // optional bytes vkPost = 22;
    if (has_vkpost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vkpost());
    }

    // optional string jsonBlocks = 27;
    if (has_jsonblocks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsonblocks());
    }

    // optional string external_url = 30;
    if (has_external_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_url());
    }

    // optional string original_url = 34;
    if (has_original_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->original_url());
    }

  }
  if (_has_bits_[8 / 32] & 65024u) {
    // optional .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 7;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sourceid_);
    }

    // optional .ru.mail.go.webbase.blobs.ProvidersParams providersParams = 18;
    if (has_providersparams()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->providersparams_);
    }

    // optional .ru.mail.go.webbase.blobs.SiliconeNewsTagsData newsTags = 19;
    if (has_newstags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->newstags_);
    }

    // optional .ru.mail.go.webbase.blobs.SiliconeNewsStoriesData newsStories = 20;
    if (has_newsstories()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->newsstories_);
    }

    // optional .ru.mail.go.webbase.blobs.ScrollToClickInfo scrollToClickInfo = 23;
    if (has_scrolltoclickinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scrolltoclickinfo_);
    }

    // optional .ru.mail.go.webbase.blobs.UserPixels userPixels = 24;
    if (has_userpixels()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->userpixels_);
    }

    // optional .ru.mail.go.webbase.blobs.SiliconeDocState state = 25;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->state_);
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional .ru.mail.go.webbase.blobs.CustomAdminFields customAdminFields = 29;
    if (has_customadminfields()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->customadminfields_);
    }

    // optional .ru.mail.go.webbase.blobs.RisksFields risksFields = 33;
    if (has_risksfields()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->risksfields_);
    }

    // optional int64 fetchTimestamp = 6;
    if (has_fetchtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fetchtimestamp());
    }

    // optional int64 discoveryVersion = 8;
    if (has_discoveryversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->discoveryversion());
    }

  }
  if (_has_bits_[16 / 32] & 14680064u) {
    // optional uint32 regionId = 16;
    if (has_regionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regionid());
    }

    // optional int64 publicationDate = 10;
    if (has_publicationdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->publicationdate());
    }

    // optional int64 siteId = 13;
    if (has_siteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->siteid());
    }

  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    // optional int64 urlHash = 15;
    if (has_urlhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->urlhash());
    }

    // optional int64 firstMeetSec = 17;
    if (has_firstmeetsec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->firstmeetsec());
    }

    // optional bool isRemoved = 9;
    if (has_isremoved()) {
      total_size += 1 + 1;
    }

    // optional bool isDocStateUpdated = 26;
    if (has_isdocstateupdated()) {
      total_size += 2 + 1;
    }

    // optional bool isAdminCustomDocUpdated = 31;
    if (has_isadmincustomdocupdated()) {
      total_size += 2 + 1;
    }

    // optional bool hasContents = 32;
    if (has_hascontents()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconFetchedDoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconFetchedDoc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconFetchedDoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
    MergeFrom(*source);
  }
}

void SiliconFetchedDoc::MergeFrom(const SiliconFetchedDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sourcenames_.MergeFrom(from.sourcenames_);
  categoryids_.MergeFrom(from.categoryids_);
  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_murl();
      murl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.murl_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_canonicalizedurl();
      canonicalizedurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonicalizedurl_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_vkpost();
      vkpost_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vkpost_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_jsonblocks();
      jsonblocks_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jsonblocks_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_external_url();
      external_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_url_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_original_url();
      original_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_url_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_parserinfo()->::ru::mail::go::webbase::blobs::SiliconDocParserInfo::MergeFrom(from.parserinfo());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_taggerinfo()->::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo::MergeFrom(from.taggerinfo());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_sourceid()->::ru::mail::go::webbase::blobs::SiliconSourceId::MergeFrom(from.sourceid());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_providersparams()->::ru::mail::go::webbase::blobs::ProvidersParams::MergeFrom(from.providersparams());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_newstags()->::ru::mail::go::webbase::blobs::SiliconeNewsTagsData::MergeFrom(from.newstags());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_newsstories()->::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData::MergeFrom(from.newsstories());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_scrolltoclickinfo()->::ru::mail::go::webbase::blobs::ScrollToClickInfo::MergeFrom(from.scrolltoclickinfo());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_userpixels()->::ru::mail::go::webbase::blobs::UserPixels::MergeFrom(from.userpixels());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_state()->::ru::mail::go::webbase::blobs::SiliconeDocState::MergeFrom(from.state());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_customadminfields()->::ru::mail::go::webbase::blobs::CustomAdminFields::MergeFrom(from.customadminfields());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_risksfields()->::ru::mail::go::webbase::blobs::RisksFields::MergeFrom(from.risksfields());
    }
    if (cached_has_bits & 0x00040000u) {
      fetchtimestamp_ = from.fetchtimestamp_;
    }
    if (cached_has_bits & 0x00080000u) {
      discoveryversion_ = from.discoveryversion_;
    }
    if (cached_has_bits & 0x00100000u) {
      sourcemode_ = from.sourcemode_;
    }
    if (cached_has_bits & 0x00200000u) {
      regionid_ = from.regionid_;
    }
    if (cached_has_bits & 0x00400000u) {
      publicationdate_ = from.publicationdate_;
    }
    if (cached_has_bits & 0x00800000u) {
      siteid_ = from.siteid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      urlhash_ = from.urlhash_;
    }
    if (cached_has_bits & 0x02000000u) {
      firstmeetsec_ = from.firstmeetsec_;
    }
    if (cached_has_bits & 0x04000000u) {
      isremoved_ = from.isremoved_;
    }
    if (cached_has_bits & 0x08000000u) {
      isdocstateupdated_ = from.isdocstateupdated_;
    }
    if (cached_has_bits & 0x10000000u) {
      isadmincustomdocupdated_ = from.isadmincustomdocupdated_;
    }
    if (cached_has_bits & 0x20000000u) {
      hascontents_ = from.hascontents_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiliconFetchedDoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconFetchedDoc::CopyFrom(const SiliconFetchedDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconFetchedDoc::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x00100181) != 0x00100181) return false;
  if (has_parserinfo()) {
    if (!this->parserinfo_->IsInitialized()) return false;
  }
  if (has_sourceid()) {
    if (!this->sourceid_->IsInitialized()) return false;
  }
  if (has_newstags()) {
    if (!this->newstags_->IsInitialized()) return false;
  }
  if (has_newsstories()) {
    if (!this->newsstories_->IsInitialized()) return false;
  }
  if (has_customadminfields()) {
    if (!this->customadminfields_->IsInitialized()) return false;
  }
  return true;
}

void SiliconFetchedDoc::Swap(SiliconFetchedDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconFetchedDoc::InternalSwap(SiliconFetchedDoc* other) {
  using std::swap;
  sourcenames_.InternalSwap(&other->sourcenames_);
  categoryids_.InternalSwap(&other->categoryids_);
  tags_.InternalSwap(&other->tags_);
  url_.Swap(&other->url_);
  murl_.Swap(&other->murl_);
  canonicalizedurl_.Swap(&other->canonicalizedurl_);
  vkpost_.Swap(&other->vkpost_);
  jsonblocks_.Swap(&other->jsonblocks_);
  external_url_.Swap(&other->external_url_);
  original_url_.Swap(&other->original_url_);
  swap(parserinfo_, other->parserinfo_);
  swap(taggerinfo_, other->taggerinfo_);
  swap(sourceid_, other->sourceid_);
  swap(providersparams_, other->providersparams_);
  swap(newstags_, other->newstags_);
  swap(newsstories_, other->newsstories_);
  swap(scrolltoclickinfo_, other->scrolltoclickinfo_);
  swap(userpixels_, other->userpixels_);
  swap(state_, other->state_);
  swap(customadminfields_, other->customadminfields_);
  swap(risksfields_, other->risksfields_);
  swap(fetchtimestamp_, other->fetchtimestamp_);
  swap(discoveryversion_, other->discoveryversion_);
  swap(sourcemode_, other->sourcemode_);
  swap(regionid_, other->regionid_);
  swap(publicationdate_, other->publicationdate_);
  swap(siteid_, other->siteid_);
  swap(urlhash_, other->urlhash_);
  swap(firstmeetsec_, other->firstmeetsec_);
  swap(isremoved_, other->isremoved_);
  swap(isdocstateupdated_, other->isdocstateupdated_);
  swap(isadmincustomdocupdated_, other->isadmincustomdocupdated_);
  swap(hascontents_, other->hascontents_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata SiliconFetchedDoc::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconFetchedDoc

// required string url = 1;
bool SiliconFetchedDoc::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconFetchedDoc::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconFetchedDoc::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconFetchedDoc::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& SiliconFetchedDoc::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.url)
  return url_.GetNoArena();
}
void SiliconFetchedDoc::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.url)
}
#if LANG_CXX11
void SiliconFetchedDoc::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconFetchedDoc.url)
}
#endif
void SiliconFetchedDoc::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.url)
}
void SiliconFetchedDoc::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.url)
}
::std::string* SiliconFetchedDoc::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconFetchedDoc::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconFetchedDoc::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.url)
}

// optional string murl = 2;
bool SiliconFetchedDoc::has_murl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiliconFetchedDoc::set_has_murl() {
  _has_bits_[0] |= 0x00000002u;
}
void SiliconFetchedDoc::clear_has_murl() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiliconFetchedDoc::clear_murl() {
  murl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_murl();
}
const ::std::string& SiliconFetchedDoc::murl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl)
  return murl_.GetNoArena();
}
void SiliconFetchedDoc::set_murl(const ::std::string& value) {
  set_has_murl();
  murl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl)
}
#if LANG_CXX11
void SiliconFetchedDoc::set_murl(::std::string&& value) {
  set_has_murl();
  murl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl)
}
#endif
void SiliconFetchedDoc::set_murl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_murl();
  murl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl)
}
void SiliconFetchedDoc::set_murl(const char* value, size_t size) {
  set_has_murl();
  murl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl)
}
::std::string* SiliconFetchedDoc::mutable_murl() {
  set_has_murl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl)
  return murl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconFetchedDoc::release_murl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl)
  clear_has_murl();
  return murl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconFetchedDoc::set_allocated_murl(::std::string* murl) {
  if (murl != NULL) {
    set_has_murl();
  } else {
    clear_has_murl();
  }
  murl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), murl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl)
}

// required .ru.mail.go.webbase.blobs.SiliconSourceMode sourceMode = 3;
bool SiliconFetchedDoc::has_sourcemode() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SiliconFetchedDoc::set_has_sourcemode() {
  _has_bits_[0] |= 0x00100000u;
}
void SiliconFetchedDoc::clear_has_sourcemode() {
  _has_bits_[0] &= ~0x00100000u;
}
void SiliconFetchedDoc::clear_sourcemode() {
  sourcemode_ = 0;
  clear_has_sourcemode();
}
::ru::mail::go::webbase::blobs::SiliconSourceMode SiliconFetchedDoc::sourcemode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceMode)
  return static_cast< ::ru::mail::go::webbase::blobs::SiliconSourceMode >(sourcemode_);
}
void SiliconFetchedDoc::set_sourcemode(::ru::mail::go::webbase::blobs::SiliconSourceMode value) {
  assert(::ru::mail::go::webbase::blobs::SiliconSourceMode_IsValid(value));
  set_has_sourcemode();
  sourcemode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceMode)
}

// required .ru.mail.go.webbase.blobs.SiliconDocParserInfo parserInfo = 4;
bool SiliconFetchedDoc::has_parserinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SiliconFetchedDoc::set_has_parserinfo() {
  _has_bits_[0] |= 0x00000080u;
}
void SiliconFetchedDoc::clear_has_parserinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
void SiliconFetchedDoc::clear_parserinfo() {
  if (parserinfo_ != NULL) parserinfo_->::ru::mail::go::webbase::blobs::SiliconDocParserInfo::Clear();
  clear_has_parserinfo();
}
const ::ru::mail::go::webbase::blobs::SiliconDocParserInfo& SiliconFetchedDoc::parserinfo() const {
  const ::ru::mail::go::webbase::blobs::SiliconDocParserInfo* p = parserinfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.parserInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconDocParserInfo*>(
      &::ru::mail::go::webbase::blobs::_SiliconDocParserInfo_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconDocParserInfo* SiliconFetchedDoc::mutable_parserinfo() {
  set_has_parserinfo();
  if (parserinfo_ == NULL) {
    parserinfo_ = new ::ru::mail::go::webbase::blobs::SiliconDocParserInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.parserInfo)
  return parserinfo_;
}
::ru::mail::go::webbase::blobs::SiliconDocParserInfo* SiliconFetchedDoc::release_parserinfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.parserInfo)
  clear_has_parserinfo();
  ::ru::mail::go::webbase::blobs::SiliconDocParserInfo* temp = parserinfo_;
  parserinfo_ = NULL;
  return temp;
}
void SiliconFetchedDoc::set_allocated_parserinfo(::ru::mail::go::webbase::blobs::SiliconDocParserInfo* parserinfo) {
  delete parserinfo_;
  parserinfo_ = parserinfo;
  if (parserinfo) {
    set_has_parserinfo();
  } else {
    clear_has_parserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.parserInfo)
}

// required .ru.mail.go.webbase.blobs.SiliconDocTaggerInfo taggerInfo = 5;
bool SiliconFetchedDoc::has_taggerinfo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SiliconFetchedDoc::set_has_taggerinfo() {
  _has_bits_[0] |= 0x00000100u;
}
void SiliconFetchedDoc::clear_has_taggerinfo() {
  _has_bits_[0] &= ~0x00000100u;
}
void SiliconFetchedDoc::clear_taggerinfo() {
  if (taggerinfo_ != NULL) taggerinfo_->::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo::Clear();
  clear_has_taggerinfo();
}
const ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo& SiliconFetchedDoc::taggerinfo() const {
  const ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* p = taggerinfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.taggerInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo*>(
      &::ru::mail::go::webbase::blobs::_SiliconDocTaggerInfo_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* SiliconFetchedDoc::mutable_taggerinfo() {
  set_has_taggerinfo();
  if (taggerinfo_ == NULL) {
    taggerinfo_ = new ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.taggerInfo)
  return taggerinfo_;
}
::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* SiliconFetchedDoc::release_taggerinfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.taggerInfo)
  clear_has_taggerinfo();
  ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* temp = taggerinfo_;
  taggerinfo_ = NULL;
  return temp;
}
void SiliconFetchedDoc::set_allocated_taggerinfo(::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* taggerinfo) {
  delete taggerinfo_;
  taggerinfo_ = taggerinfo;
  if (taggerinfo) {
    set_has_taggerinfo();
  } else {
    clear_has_taggerinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.taggerInfo)
}

// optional int64 fetchTimestamp = 6;
bool SiliconFetchedDoc::has_fetchtimestamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SiliconFetchedDoc::set_has_fetchtimestamp() {
  _has_bits_[0] |= 0x00040000u;
}
void SiliconFetchedDoc::clear_has_fetchtimestamp() {
  _has_bits_[0] &= ~0x00040000u;
}
void SiliconFetchedDoc::clear_fetchtimestamp() {
  fetchtimestamp_ = GOOGLE_LONGLONG(0);
  clear_has_fetchtimestamp();
}
::google::protobuf::int64 SiliconFetchedDoc::fetchtimestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.fetchTimestamp)
  return fetchtimestamp_;
}
void SiliconFetchedDoc::set_fetchtimestamp(::google::protobuf::int64 value) {
  set_has_fetchtimestamp();
  fetchtimestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.fetchTimestamp)
}

// optional .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 7;
bool SiliconFetchedDoc::has_sourceid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SiliconFetchedDoc::set_has_sourceid() {
  _has_bits_[0] |= 0x00000200u;
}
void SiliconFetchedDoc::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000200u;
}
void SiliconFetchedDoc::clear_sourceid() {
  if (sourceid_ != NULL) sourceid_->::ru::mail::go::webbase::blobs::SiliconSourceId::Clear();
  clear_has_sourceid();
}
const ::ru::mail::go::webbase::blobs::SiliconSourceId& SiliconFetchedDoc::sourceid() const {
  const ::ru::mail::go::webbase::blobs::SiliconSourceId* p = sourceid_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceId)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconSourceId*>(
      &::ru::mail::go::webbase::blobs::_SiliconSourceId_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconSourceId* SiliconFetchedDoc::mutable_sourceid() {
  set_has_sourceid();
  if (sourceid_ == NULL) {
    sourceid_ = new ::ru::mail::go::webbase::blobs::SiliconSourceId;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceId)
  return sourceid_;
}
::ru::mail::go::webbase::blobs::SiliconSourceId* SiliconFetchedDoc::release_sourceid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceId)
  clear_has_sourceid();
  ::ru::mail::go::webbase::blobs::SiliconSourceId* temp = sourceid_;
  sourceid_ = NULL;
  return temp;
}
void SiliconFetchedDoc::set_allocated_sourceid(::ru::mail::go::webbase::blobs::SiliconSourceId* sourceid) {
  delete sourceid_;
  sourceid_ = sourceid;
  if (sourceid) {
    set_has_sourceid();
  } else {
    clear_has_sourceid();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceId)
}

// optional int64 discoveryVersion = 8;
bool SiliconFetchedDoc::has_discoveryversion() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SiliconFetchedDoc::set_has_discoveryversion() {
  _has_bits_[0] |= 0x00080000u;
}
void SiliconFetchedDoc::clear_has_discoveryversion() {
  _has_bits_[0] &= ~0x00080000u;
}
void SiliconFetchedDoc::clear_discoveryversion() {
  discoveryversion_ = GOOGLE_LONGLONG(0);
  clear_has_discoveryversion();
}
::google::protobuf::int64 SiliconFetchedDoc::discoveryversion() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.discoveryVersion)
  return discoveryversion_;
}
void SiliconFetchedDoc::set_discoveryversion(::google::protobuf::int64 value) {
  set_has_discoveryversion();
  discoveryversion_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.discoveryVersion)
}

// optional bool isRemoved = 9;
bool SiliconFetchedDoc::has_isremoved() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void SiliconFetchedDoc::set_has_isremoved() {
  _has_bits_[0] |= 0x04000000u;
}
void SiliconFetchedDoc::clear_has_isremoved() {
  _has_bits_[0] &= ~0x04000000u;
}
void SiliconFetchedDoc::clear_isremoved() {
  isremoved_ = false;
  clear_has_isremoved();
}
bool SiliconFetchedDoc::isremoved() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.isRemoved)
  return isremoved_;
}
void SiliconFetchedDoc::set_isremoved(bool value) {
  set_has_isremoved();
  isremoved_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.isRemoved)
}

// optional int64 publicationDate = 10;
bool SiliconFetchedDoc::has_publicationdate() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SiliconFetchedDoc::set_has_publicationdate() {
  _has_bits_[0] |= 0x00400000u;
}
void SiliconFetchedDoc::clear_has_publicationdate() {
  _has_bits_[0] &= ~0x00400000u;
}
void SiliconFetchedDoc::clear_publicationdate() {
  publicationdate_ = GOOGLE_LONGLONG(0);
  clear_has_publicationdate();
}
::google::protobuf::int64 SiliconFetchedDoc::publicationdate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.publicationDate)
  return publicationdate_;
}
void SiliconFetchedDoc::set_publicationdate(::google::protobuf::int64 value) {
  set_has_publicationdate();
  publicationdate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.publicationDate)
}

// optional string canonicalizedUrl = 11;
bool SiliconFetchedDoc::has_canonicalizedurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SiliconFetchedDoc::set_has_canonicalizedurl() {
  _has_bits_[0] |= 0x00000004u;
}
void SiliconFetchedDoc::clear_has_canonicalizedurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void SiliconFetchedDoc::clear_canonicalizedurl() {
  canonicalizedurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_canonicalizedurl();
}
const ::std::string& SiliconFetchedDoc::canonicalizedurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl)
  return canonicalizedurl_.GetNoArena();
}
void SiliconFetchedDoc::set_canonicalizedurl(const ::std::string& value) {
  set_has_canonicalizedurl();
  canonicalizedurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl)
}
#if LANG_CXX11
void SiliconFetchedDoc::set_canonicalizedurl(::std::string&& value) {
  set_has_canonicalizedurl();
  canonicalizedurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl)
}
#endif
void SiliconFetchedDoc::set_canonicalizedurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_canonicalizedurl();
  canonicalizedurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl)
}
void SiliconFetchedDoc::set_canonicalizedurl(const char* value, size_t size) {
  set_has_canonicalizedurl();
  canonicalizedurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl)
}
::std::string* SiliconFetchedDoc::mutable_canonicalizedurl() {
  set_has_canonicalizedurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl)
  return canonicalizedurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconFetchedDoc::release_canonicalizedurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl)
  clear_has_canonicalizedurl();
  return canonicalizedurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconFetchedDoc::set_allocated_canonicalizedurl(::std::string* canonicalizedurl) {
  if (canonicalizedurl != NULL) {
    set_has_canonicalizedurl();
  } else {
    clear_has_canonicalizedurl();
  }
  canonicalizedurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canonicalizedurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl)
}

// repeated string sourceNames = 12;
int SiliconFetchedDoc::sourcenames_size() const {
  return sourcenames_.size();
}
void SiliconFetchedDoc::clear_sourcenames() {
  sourcenames_.Clear();
}
const ::std::string& SiliconFetchedDoc::sourcenames(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
  return sourcenames_.Get(index);
}
::std::string* SiliconFetchedDoc::mutable_sourcenames(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
  return sourcenames_.Mutable(index);
}
void SiliconFetchedDoc::set_sourcenames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
  sourcenames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SiliconFetchedDoc::set_sourcenames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
  sourcenames_.Mutable(index)->assign(std::move(value));
}
#endif
void SiliconFetchedDoc::set_sourcenames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sourcenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
}
void SiliconFetchedDoc::set_sourcenames(int index, const char* value, size_t size) {
  sourcenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
}
::std::string* SiliconFetchedDoc::add_sourcenames() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
  return sourcenames_.Add();
}
void SiliconFetchedDoc::add_sourcenames(const ::std::string& value) {
  sourcenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
}
#if LANG_CXX11
void SiliconFetchedDoc::add_sourcenames(::std::string&& value) {
  sourcenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
}
#endif
void SiliconFetchedDoc::add_sourcenames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sourcenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
}
void SiliconFetchedDoc::add_sourcenames(const char* value, size_t size) {
  sourcenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SiliconFetchedDoc::sourcenames() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
  return sourcenames_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SiliconFetchedDoc::mutable_sourcenames() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
  return &sourcenames_;
}

// optional int64 siteId = 13;
bool SiliconFetchedDoc::has_siteid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SiliconFetchedDoc::set_has_siteid() {
  _has_bits_[0] |= 0x00800000u;
}
void SiliconFetchedDoc::clear_has_siteid() {
  _has_bits_[0] &= ~0x00800000u;
}
void SiliconFetchedDoc::clear_siteid() {
  siteid_ = GOOGLE_LONGLONG(0);
  clear_has_siteid();
}
::google::protobuf::int64 SiliconFetchedDoc::siteid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.siteId)
  return siteid_;
}
void SiliconFetchedDoc::set_siteid(::google::protobuf::int64 value) {
  set_has_siteid();
  siteid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.siteId)
}

// repeated int64 categoryIds = 14;
int SiliconFetchedDoc::categoryids_size() const {
  return categoryids_.size();
}
void SiliconFetchedDoc::clear_categoryids() {
  categoryids_.Clear();
}
::google::protobuf::int64 SiliconFetchedDoc::categoryids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.categoryIds)
  return categoryids_.Get(index);
}
void SiliconFetchedDoc::set_categoryids(int index, ::google::protobuf::int64 value) {
  categoryids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.categoryIds)
}
void SiliconFetchedDoc::add_categoryids(::google::protobuf::int64 value) {
  categoryids_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchedDoc.categoryIds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SiliconFetchedDoc::categoryids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconFetchedDoc.categoryIds)
  return categoryids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SiliconFetchedDoc::mutable_categoryids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconFetchedDoc.categoryIds)
  return &categoryids_;
}

// optional int64 urlHash = 15;
bool SiliconFetchedDoc::has_urlhash() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void SiliconFetchedDoc::set_has_urlhash() {
  _has_bits_[0] |= 0x01000000u;
}
void SiliconFetchedDoc::clear_has_urlhash() {
  _has_bits_[0] &= ~0x01000000u;
}
void SiliconFetchedDoc::clear_urlhash() {
  urlhash_ = GOOGLE_LONGLONG(0);
  clear_has_urlhash();
}
::google::protobuf::int64 SiliconFetchedDoc::urlhash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.urlHash)
  return urlhash_;
}
void SiliconFetchedDoc::set_urlhash(::google::protobuf::int64 value) {
  set_has_urlhash();
  urlhash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.urlHash)
}

// optional uint32 regionId = 16;
bool SiliconFetchedDoc::has_regionid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SiliconFetchedDoc::set_has_regionid() {
  _has_bits_[0] |= 0x00200000u;
}
void SiliconFetchedDoc::clear_has_regionid() {
  _has_bits_[0] &= ~0x00200000u;
}
void SiliconFetchedDoc::clear_regionid() {
  regionid_ = 0u;
  clear_has_regionid();
}
::google::protobuf::uint32 SiliconFetchedDoc::regionid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.regionId)
  return regionid_;
}
void SiliconFetchedDoc::set_regionid(::google::protobuf::uint32 value) {
  set_has_regionid();
  regionid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.regionId)
}

// optional int64 firstMeetSec = 17;
bool SiliconFetchedDoc::has_firstmeetsec() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void SiliconFetchedDoc::set_has_firstmeetsec() {
  _has_bits_[0] |= 0x02000000u;
}
void SiliconFetchedDoc::clear_has_firstmeetsec() {
  _has_bits_[0] &= ~0x02000000u;
}
void SiliconFetchedDoc::clear_firstmeetsec() {
  firstmeetsec_ = GOOGLE_LONGLONG(0);
  clear_has_firstmeetsec();
}
::google::protobuf::int64 SiliconFetchedDoc::firstmeetsec() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.firstMeetSec)
  return firstmeetsec_;
}
void SiliconFetchedDoc::set_firstmeetsec(::google::protobuf::int64 value) {
  set_has_firstmeetsec();
  firstmeetsec_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.firstMeetSec)
}

// optional .ru.mail.go.webbase.blobs.ProvidersParams providersParams = 18;
bool SiliconFetchedDoc::has_providersparams() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SiliconFetchedDoc::set_has_providersparams() {
  _has_bits_[0] |= 0x00000400u;
}
void SiliconFetchedDoc::clear_has_providersparams() {
  _has_bits_[0] &= ~0x00000400u;
}
void SiliconFetchedDoc::clear_providersparams() {
  if (providersparams_ != NULL) providersparams_->::ru::mail::go::webbase::blobs::ProvidersParams::Clear();
  clear_has_providersparams();
}
const ::ru::mail::go::webbase::blobs::ProvidersParams& SiliconFetchedDoc::providersparams() const {
  const ::ru::mail::go::webbase::blobs::ProvidersParams* p = providersparams_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.providersParams)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ProvidersParams*>(
      &::ru::mail::go::webbase::blobs::_ProvidersParams_default_instance_);
}
::ru::mail::go::webbase::blobs::ProvidersParams* SiliconFetchedDoc::mutable_providersparams() {
  set_has_providersparams();
  if (providersparams_ == NULL) {
    providersparams_ = new ::ru::mail::go::webbase::blobs::ProvidersParams;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.providersParams)
  return providersparams_;
}
::ru::mail::go::webbase::blobs::ProvidersParams* SiliconFetchedDoc::release_providersparams() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.providersParams)
  clear_has_providersparams();
  ::ru::mail::go::webbase::blobs::ProvidersParams* temp = providersparams_;
  providersparams_ = NULL;
  return temp;
}
void SiliconFetchedDoc::set_allocated_providersparams(::ru::mail::go::webbase::blobs::ProvidersParams* providersparams) {
  delete providersparams_;
  providersparams_ = providersparams;
  if (providersparams) {
    set_has_providersparams();
  } else {
    clear_has_providersparams();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.providersParams)
}

// optional .ru.mail.go.webbase.blobs.SiliconeNewsTagsData newsTags = 19;
bool SiliconFetchedDoc::has_newstags() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SiliconFetchedDoc::set_has_newstags() {
  _has_bits_[0] |= 0x00000800u;
}
void SiliconFetchedDoc::clear_has_newstags() {
  _has_bits_[0] &= ~0x00000800u;
}
void SiliconFetchedDoc::clear_newstags() {
  if (newstags_ != NULL) newstags_->::ru::mail::go::webbase::blobs::SiliconeNewsTagsData::Clear();
  clear_has_newstags();
}
const ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData& SiliconFetchedDoc::newstags() const {
  const ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData* p = newstags_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.newsTags)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData*>(
      &::ru::mail::go::webbase::blobs::_SiliconeNewsTagsData_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconeNewsTagsData* SiliconFetchedDoc::mutable_newstags() {
  set_has_newstags();
  if (newstags_ == NULL) {
    newstags_ = new ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.newsTags)
  return newstags_;
}
::ru::mail::go::webbase::blobs::SiliconeNewsTagsData* SiliconFetchedDoc::release_newstags() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.newsTags)
  clear_has_newstags();
  ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData* temp = newstags_;
  newstags_ = NULL;
  return temp;
}
void SiliconFetchedDoc::set_allocated_newstags(::ru::mail::go::webbase::blobs::SiliconeNewsTagsData* newstags) {
  delete newstags_;
  newstags_ = newstags;
  if (newstags) {
    set_has_newstags();
  } else {
    clear_has_newstags();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.newsTags)
}

// optional .ru.mail.go.webbase.blobs.SiliconeNewsStoriesData newsStories = 20;
bool SiliconFetchedDoc::has_newsstories() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SiliconFetchedDoc::set_has_newsstories() {
  _has_bits_[0] |= 0x00001000u;
}
void SiliconFetchedDoc::clear_has_newsstories() {
  _has_bits_[0] &= ~0x00001000u;
}
void SiliconFetchedDoc::clear_newsstories() {
  if (newsstories_ != NULL) newsstories_->::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData::Clear();
  clear_has_newsstories();
}
const ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData& SiliconFetchedDoc::newsstories() const {
  const ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData* p = newsstories_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.newsStories)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData*>(
      &::ru::mail::go::webbase::blobs::_SiliconeNewsStoriesData_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData* SiliconFetchedDoc::mutable_newsstories() {
  set_has_newsstories();
  if (newsstories_ == NULL) {
    newsstories_ = new ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.newsStories)
  return newsstories_;
}
::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData* SiliconFetchedDoc::release_newsstories() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.newsStories)
  clear_has_newsstories();
  ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData* temp = newsstories_;
  newsstories_ = NULL;
  return temp;
}
void SiliconFetchedDoc::set_allocated_newsstories(::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData* newsstories) {
  delete newsstories_;
  newsstories_ = newsstories;
  if (newsstories) {
    set_has_newsstories();
  } else {
    clear_has_newsstories();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.newsStories)
}

// optional bytes vkPost = 22;
bool SiliconFetchedDoc::has_vkpost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SiliconFetchedDoc::set_has_vkpost() {
  _has_bits_[0] |= 0x00000008u;
}
void SiliconFetchedDoc::clear_has_vkpost() {
  _has_bits_[0] &= ~0x00000008u;
}
void SiliconFetchedDoc::clear_vkpost() {
  vkpost_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vkpost();
}
const ::std::string& SiliconFetchedDoc::vkpost() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.vkPost)
  return vkpost_.GetNoArena();
}
void SiliconFetchedDoc::set_vkpost(const ::std::string& value) {
  set_has_vkpost();
  vkpost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.vkPost)
}
#if LANG_CXX11
void SiliconFetchedDoc::set_vkpost(::std::string&& value) {
  set_has_vkpost();
  vkpost_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconFetchedDoc.vkPost)
}
#endif
void SiliconFetchedDoc::set_vkpost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vkpost();
  vkpost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.vkPost)
}
void SiliconFetchedDoc::set_vkpost(const void* value, size_t size) {
  set_has_vkpost();
  vkpost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.vkPost)
}
::std::string* SiliconFetchedDoc::mutable_vkpost() {
  set_has_vkpost();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.vkPost)
  return vkpost_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconFetchedDoc::release_vkpost() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.vkPost)
  clear_has_vkpost();
  return vkpost_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconFetchedDoc::set_allocated_vkpost(::std::string* vkpost) {
  if (vkpost != NULL) {
    set_has_vkpost();
  } else {
    clear_has_vkpost();
  }
  vkpost_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vkpost);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.vkPost)
}

// optional .ru.mail.go.webbase.blobs.ScrollToClickInfo scrollToClickInfo = 23;
bool SiliconFetchedDoc::has_scrolltoclickinfo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SiliconFetchedDoc::set_has_scrolltoclickinfo() {
  _has_bits_[0] |= 0x00002000u;
}
void SiliconFetchedDoc::clear_has_scrolltoclickinfo() {
  _has_bits_[0] &= ~0x00002000u;
}
void SiliconFetchedDoc::clear_scrolltoclickinfo() {
  if (scrolltoclickinfo_ != NULL) scrolltoclickinfo_->::ru::mail::go::webbase::blobs::ScrollToClickInfo::Clear();
  clear_has_scrolltoclickinfo();
}
const ::ru::mail::go::webbase::blobs::ScrollToClickInfo& SiliconFetchedDoc::scrolltoclickinfo() const {
  const ::ru::mail::go::webbase::blobs::ScrollToClickInfo* p = scrolltoclickinfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.scrollToClickInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ScrollToClickInfo*>(
      &::ru::mail::go::webbase::blobs::_ScrollToClickInfo_default_instance_);
}
::ru::mail::go::webbase::blobs::ScrollToClickInfo* SiliconFetchedDoc::mutable_scrolltoclickinfo() {
  set_has_scrolltoclickinfo();
  if (scrolltoclickinfo_ == NULL) {
    scrolltoclickinfo_ = new ::ru::mail::go::webbase::blobs::ScrollToClickInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.scrollToClickInfo)
  return scrolltoclickinfo_;
}
::ru::mail::go::webbase::blobs::ScrollToClickInfo* SiliconFetchedDoc::release_scrolltoclickinfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.scrollToClickInfo)
  clear_has_scrolltoclickinfo();
  ::ru::mail::go::webbase::blobs::ScrollToClickInfo* temp = scrolltoclickinfo_;
  scrolltoclickinfo_ = NULL;
  return temp;
}
void SiliconFetchedDoc::set_allocated_scrolltoclickinfo(::ru::mail::go::webbase::blobs::ScrollToClickInfo* scrolltoclickinfo) {
  delete scrolltoclickinfo_;
  scrolltoclickinfo_ = scrolltoclickinfo;
  if (scrolltoclickinfo) {
    set_has_scrolltoclickinfo();
  } else {
    clear_has_scrolltoclickinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.scrollToClickInfo)
}

// optional .ru.mail.go.webbase.blobs.UserPixels userPixels = 24;
bool SiliconFetchedDoc::has_userpixels() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SiliconFetchedDoc::set_has_userpixels() {
  _has_bits_[0] |= 0x00004000u;
}
void SiliconFetchedDoc::clear_has_userpixels() {
  _has_bits_[0] &= ~0x00004000u;
}
void SiliconFetchedDoc::clear_userpixels() {
  if (userpixels_ != NULL) userpixels_->::ru::mail::go::webbase::blobs::UserPixels::Clear();
  clear_has_userpixels();
}
const ::ru::mail::go::webbase::blobs::UserPixels& SiliconFetchedDoc::userpixels() const {
  const ::ru::mail::go::webbase::blobs::UserPixels* p = userpixels_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.userPixels)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UserPixels*>(
      &::ru::mail::go::webbase::blobs::_UserPixels_default_instance_);
}
::ru::mail::go::webbase::blobs::UserPixels* SiliconFetchedDoc::mutable_userpixels() {
  set_has_userpixels();
  if (userpixels_ == NULL) {
    userpixels_ = new ::ru::mail::go::webbase::blobs::UserPixels;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.userPixels)
  return userpixels_;
}
::ru::mail::go::webbase::blobs::UserPixels* SiliconFetchedDoc::release_userpixels() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.userPixels)
  clear_has_userpixels();
  ::ru::mail::go::webbase::blobs::UserPixels* temp = userpixels_;
  userpixels_ = NULL;
  return temp;
}
void SiliconFetchedDoc::set_allocated_userpixels(::ru::mail::go::webbase::blobs::UserPixels* userpixels) {
  delete userpixels_;
  userpixels_ = userpixels;
  if (userpixels) {
    set_has_userpixels();
  } else {
    clear_has_userpixels();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.userPixels)
}

// optional .ru.mail.go.webbase.blobs.SiliconeDocState state = 25;
bool SiliconFetchedDoc::has_state() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SiliconFetchedDoc::set_has_state() {
  _has_bits_[0] |= 0x00008000u;
}
void SiliconFetchedDoc::clear_has_state() {
  _has_bits_[0] &= ~0x00008000u;
}
void SiliconFetchedDoc::clear_state() {
  if (state_ != NULL) state_->::ru::mail::go::webbase::blobs::SiliconeDocState::Clear();
  clear_has_state();
}
const ::ru::mail::go::webbase::blobs::SiliconeDocState& SiliconFetchedDoc::state() const {
  const ::ru::mail::go::webbase::blobs::SiliconeDocState* p = state_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.state)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeDocState*>(
      &::ru::mail::go::webbase::blobs::_SiliconeDocState_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconeDocState* SiliconFetchedDoc::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::ru::mail::go::webbase::blobs::SiliconeDocState;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.state)
  return state_;
}
::ru::mail::go::webbase::blobs::SiliconeDocState* SiliconFetchedDoc::release_state() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.state)
  clear_has_state();
  ::ru::mail::go::webbase::blobs::SiliconeDocState* temp = state_;
  state_ = NULL;
  return temp;
}
void SiliconFetchedDoc::set_allocated_state(::ru::mail::go::webbase::blobs::SiliconeDocState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.state)
}

// optional bool isDocStateUpdated = 26;
bool SiliconFetchedDoc::has_isdocstateupdated() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void SiliconFetchedDoc::set_has_isdocstateupdated() {
  _has_bits_[0] |= 0x08000000u;
}
void SiliconFetchedDoc::clear_has_isdocstateupdated() {
  _has_bits_[0] &= ~0x08000000u;
}
void SiliconFetchedDoc::clear_isdocstateupdated() {
  isdocstateupdated_ = false;
  clear_has_isdocstateupdated();
}
bool SiliconFetchedDoc::isdocstateupdated() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.isDocStateUpdated)
  return isdocstateupdated_;
}
void SiliconFetchedDoc::set_isdocstateupdated(bool value) {
  set_has_isdocstateupdated();
  isdocstateupdated_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.isDocStateUpdated)
}

// optional string jsonBlocks = 27;
bool SiliconFetchedDoc::has_jsonblocks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SiliconFetchedDoc::set_has_jsonblocks() {
  _has_bits_[0] |= 0x00000010u;
}
void SiliconFetchedDoc::clear_has_jsonblocks() {
  _has_bits_[0] &= ~0x00000010u;
}
void SiliconFetchedDoc::clear_jsonblocks() {
  jsonblocks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_jsonblocks();
}
const ::std::string& SiliconFetchedDoc::jsonblocks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks)
  return jsonblocks_.GetNoArena();
}
void SiliconFetchedDoc::set_jsonblocks(const ::std::string& value) {
  set_has_jsonblocks();
  jsonblocks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks)
}
#if LANG_CXX11
void SiliconFetchedDoc::set_jsonblocks(::std::string&& value) {
  set_has_jsonblocks();
  jsonblocks_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks)
}
#endif
void SiliconFetchedDoc::set_jsonblocks(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_jsonblocks();
  jsonblocks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks)
}
void SiliconFetchedDoc::set_jsonblocks(const char* value, size_t size) {
  set_has_jsonblocks();
  jsonblocks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks)
}
::std::string* SiliconFetchedDoc::mutable_jsonblocks() {
  set_has_jsonblocks();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks)
  return jsonblocks_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconFetchedDoc::release_jsonblocks() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks)
  clear_has_jsonblocks();
  return jsonblocks_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconFetchedDoc::set_allocated_jsonblocks(::std::string* jsonblocks) {
  if (jsonblocks != NULL) {
    set_has_jsonblocks();
  } else {
    clear_has_jsonblocks();
  }
  jsonblocks_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jsonblocks);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks)
}

// repeated string tags = 28;
int SiliconFetchedDoc::tags_size() const {
  return tags_.size();
}
void SiliconFetchedDoc::clear_tags() {
  tags_.Clear();
}
const ::std::string& SiliconFetchedDoc::tags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
  return tags_.Get(index);
}
::std::string* SiliconFetchedDoc::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
  return tags_.Mutable(index);
}
void SiliconFetchedDoc::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SiliconFetchedDoc::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
void SiliconFetchedDoc::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
}
void SiliconFetchedDoc::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
}
::std::string* SiliconFetchedDoc::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
  return tags_.Add();
}
void SiliconFetchedDoc::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
}
#if LANG_CXX11
void SiliconFetchedDoc::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
}
#endif
void SiliconFetchedDoc::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
}
void SiliconFetchedDoc::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SiliconFetchedDoc::tags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
  return tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SiliconFetchedDoc::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
  return &tags_;
}

// optional .ru.mail.go.webbase.blobs.CustomAdminFields customAdminFields = 29;
bool SiliconFetchedDoc::has_customadminfields() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SiliconFetchedDoc::set_has_customadminfields() {
  _has_bits_[0] |= 0x00010000u;
}
void SiliconFetchedDoc::clear_has_customadminfields() {
  _has_bits_[0] &= ~0x00010000u;
}
void SiliconFetchedDoc::clear_customadminfields() {
  if (customadminfields_ != NULL) customadminfields_->::ru::mail::go::webbase::blobs::CustomAdminFields::Clear();
  clear_has_customadminfields();
}
const ::ru::mail::go::webbase::blobs::CustomAdminFields& SiliconFetchedDoc::customadminfields() const {
  const ::ru::mail::go::webbase::blobs::CustomAdminFields* p = customadminfields_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.customAdminFields)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::CustomAdminFields*>(
      &::ru::mail::go::webbase::blobs::_CustomAdminFields_default_instance_);
}
::ru::mail::go::webbase::blobs::CustomAdminFields* SiliconFetchedDoc::mutable_customadminfields() {
  set_has_customadminfields();
  if (customadminfields_ == NULL) {
    customadminfields_ = new ::ru::mail::go::webbase::blobs::CustomAdminFields;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.customAdminFields)
  return customadminfields_;
}
::ru::mail::go::webbase::blobs::CustomAdminFields* SiliconFetchedDoc::release_customadminfields() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.customAdminFields)
  clear_has_customadminfields();
  ::ru::mail::go::webbase::blobs::CustomAdminFields* temp = customadminfields_;
  customadminfields_ = NULL;
  return temp;
}
void SiliconFetchedDoc::set_allocated_customadminfields(::ru::mail::go::webbase::blobs::CustomAdminFields* customadminfields) {
  delete customadminfields_;
  customadminfields_ = customadminfields;
  if (customadminfields) {
    set_has_customadminfields();
  } else {
    clear_has_customadminfields();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.customAdminFields)
}

// optional string external_url = 30;
bool SiliconFetchedDoc::has_external_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SiliconFetchedDoc::set_has_external_url() {
  _has_bits_[0] |= 0x00000020u;
}
void SiliconFetchedDoc::clear_has_external_url() {
  _has_bits_[0] &= ~0x00000020u;
}
void SiliconFetchedDoc::clear_external_url() {
  external_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_external_url();
}
const ::std::string& SiliconFetchedDoc::external_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url)
  return external_url_.GetNoArena();
}
void SiliconFetchedDoc::set_external_url(const ::std::string& value) {
  set_has_external_url();
  external_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url)
}
#if LANG_CXX11
void SiliconFetchedDoc::set_external_url(::std::string&& value) {
  set_has_external_url();
  external_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url)
}
#endif
void SiliconFetchedDoc::set_external_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_external_url();
  external_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url)
}
void SiliconFetchedDoc::set_external_url(const char* value, size_t size) {
  set_has_external_url();
  external_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url)
}
::std::string* SiliconFetchedDoc::mutable_external_url() {
  set_has_external_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url)
  return external_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconFetchedDoc::release_external_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url)
  clear_has_external_url();
  return external_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconFetchedDoc::set_allocated_external_url(::std::string* external_url) {
  if (external_url != NULL) {
    set_has_external_url();
  } else {
    clear_has_external_url();
  }
  external_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url)
}

// optional bool isAdminCustomDocUpdated = 31;
bool SiliconFetchedDoc::has_isadmincustomdocupdated() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void SiliconFetchedDoc::set_has_isadmincustomdocupdated() {
  _has_bits_[0] |= 0x10000000u;
}
void SiliconFetchedDoc::clear_has_isadmincustomdocupdated() {
  _has_bits_[0] &= ~0x10000000u;
}
void SiliconFetchedDoc::clear_isadmincustomdocupdated() {
  isadmincustomdocupdated_ = false;
  clear_has_isadmincustomdocupdated();
}
bool SiliconFetchedDoc::isadmincustomdocupdated() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.isAdminCustomDocUpdated)
  return isadmincustomdocupdated_;
}
void SiliconFetchedDoc::set_isadmincustomdocupdated(bool value) {
  set_has_isadmincustomdocupdated();
  isadmincustomdocupdated_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.isAdminCustomDocUpdated)
}

// optional bool hasContents = 32;
bool SiliconFetchedDoc::has_hascontents() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void SiliconFetchedDoc::set_has_hascontents() {
  _has_bits_[0] |= 0x20000000u;
}
void SiliconFetchedDoc::clear_has_hascontents() {
  _has_bits_[0] &= ~0x20000000u;
}
void SiliconFetchedDoc::clear_hascontents() {
  hascontents_ = false;
  clear_has_hascontents();
}
bool SiliconFetchedDoc::hascontents() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.hasContents)
  return hascontents_;
}
void SiliconFetchedDoc::set_hascontents(bool value) {
  set_has_hascontents();
  hascontents_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.hasContents)
}

// optional .ru.mail.go.webbase.blobs.RisksFields risksFields = 33;
bool SiliconFetchedDoc::has_risksfields() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SiliconFetchedDoc::set_has_risksfields() {
  _has_bits_[0] |= 0x00020000u;
}
void SiliconFetchedDoc::clear_has_risksfields() {
  _has_bits_[0] &= ~0x00020000u;
}
void SiliconFetchedDoc::clear_risksfields() {
  if (risksfields_ != NULL) risksfields_->::ru::mail::go::webbase::blobs::RisksFields::Clear();
  clear_has_risksfields();
}
const ::ru::mail::go::webbase::blobs::RisksFields& SiliconFetchedDoc::risksfields() const {
  const ::ru::mail::go::webbase::blobs::RisksFields* p = risksfields_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.risksFields)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::RisksFields*>(
      &::ru::mail::go::webbase::blobs::_RisksFields_default_instance_);
}
::ru::mail::go::webbase::blobs::RisksFields* SiliconFetchedDoc::mutable_risksfields() {
  set_has_risksfields();
  if (risksfields_ == NULL) {
    risksfields_ = new ::ru::mail::go::webbase::blobs::RisksFields;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.risksFields)
  return risksfields_;
}
::ru::mail::go::webbase::blobs::RisksFields* SiliconFetchedDoc::release_risksfields() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.risksFields)
  clear_has_risksfields();
  ::ru::mail::go::webbase::blobs::RisksFields* temp = risksfields_;
  risksfields_ = NULL;
  return temp;
}
void SiliconFetchedDoc::set_allocated_risksfields(::ru::mail::go::webbase::blobs::RisksFields* risksfields) {
  delete risksfields_;
  risksfields_ = risksfields;
  if (risksfields) {
    set_has_risksfields();
  } else {
    clear_has_risksfields();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.risksFields)
}

// optional string original_url = 34;
bool SiliconFetchedDoc::has_original_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SiliconFetchedDoc::set_has_original_url() {
  _has_bits_[0] |= 0x00000040u;
}
void SiliconFetchedDoc::clear_has_original_url() {
  _has_bits_[0] &= ~0x00000040u;
}
void SiliconFetchedDoc::clear_original_url() {
  original_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_original_url();
}
const ::std::string& SiliconFetchedDoc::original_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url)
  return original_url_.GetNoArena();
}
void SiliconFetchedDoc::set_original_url(const ::std::string& value) {
  set_has_original_url();
  original_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url)
}
#if LANG_CXX11
void SiliconFetchedDoc::set_original_url(::std::string&& value) {
  set_has_original_url();
  original_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url)
}
#endif
void SiliconFetchedDoc::set_original_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_original_url();
  original_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url)
}
void SiliconFetchedDoc::set_original_url(const char* value, size_t size) {
  set_has_original_url();
  original_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url)
}
::std::string* SiliconFetchedDoc::mutable_original_url() {
  set_has_original_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url)
  return original_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconFetchedDoc::release_original_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url)
  clear_has_original_url();
  return original_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconFetchedDoc::set_allocated_original_url(::std::string* original_url) {
  if (original_url != NULL) {
    set_has_original_url();
  } else {
    clear_has_original_url();
  }
  original_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconDocParserInfo::kTitleFieldNumber;
const int SiliconDocParserInfo::kDescriptionFieldNumber;
const int SiliconDocParserInfo::kBodyFieldNumber;
const int SiliconDocParserInfo::kImagesFieldNumber;
const int SiliconDocParserInfo::kVideoFieldNumber;
const int SiliconDocParserInfo::kDescriptionRssFieldNumber;
const int SiliconDocParserInfo::kParsedBodyFieldNumber;
const int SiliconDocParserInfo::kAuthorFieldNumber;
const int SiliconDocParserInfo::kCategoryFieldNumber;
const int SiliconDocParserInfo::kVideoDataFieldNumber;
const int SiliconDocParserInfo::kLayerBodyHtmlFieldNumber;
const int SiliconDocParserInfo::kCustomFieldsFieldNumber;
const int SiliconDocParserInfo::kLayerWordsCountFieldNumber;
const int SiliconDocParserInfo::kLayerHeaderFieldNumber;
const int SiliconDocParserInfo::kLayerFooterFieldNumber;
const int SiliconDocParserInfo::kAmpUrlFieldNumber;
const int SiliconDocParserInfo::kGalleriesFieldNumber;
const int SiliconDocParserInfo::kGuidFieldNumber;
const int SiliconDocParserInfo::kIsValidFulltextFieldNumber;
const int SiliconDocParserInfo::kVideosFieldNumber;
const int SiliconDocParserInfo::kSlugFieldNumber;
const int SiliconDocParserInfo::kMediaRatingFieldNumber;
const int SiliconDocParserInfo::kTtlFieldNumber;
const int SiliconDocParserInfo::kCategoriesFieldNumber;
const int SiliconDocParserInfo::kLayerSymbolCountFieldNumber;
const int SiliconDocParserInfo::kPharmaProductFieldNumber;
const int SiliconDocParserInfo::kHasRelapTestFieldNumber;
const int SiliconDocParserInfo::kDocRegionIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconDocParserInfo::SiliconDocParserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
}
SiliconDocParserInfo::SiliconDocParserInfo(const SiliconDocParserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      galleries_(from.galleries_),
      categories_(from.categories_),
      doc_region_ids_(from.doc_region_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  video_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video()) {
    video_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_);
  }
  descriptionrss_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_descriptionrss()) {
    descriptionrss_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptionrss_);
  }
  layerbodyhtml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layerbodyhtml()) {
    layerbodyhtml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layerbodyhtml_);
  }
  layer_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer_header()) {
    layer_header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_header_);
  }
  layer_footer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer_footer()) {
    layer_footer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_footer_);
  }
  amp_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_amp_url()) {
    amp_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amp_url_);
  }
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guid()) {
    guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_);
  }
  slug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_slug()) {
    slug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slug_);
  }
  media_rating_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_media_rating()) {
    media_rating_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.media_rating_);
  }
  pharma_product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pharma_product()) {
    pharma_product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pharma_product_);
  }
  if (from.has_images()) {
    images_ = new ::ru::mail::go::webbase::blobs::PostImages(*from.images_);
  } else {
    images_ = NULL;
  }
  if (from.has_parsedbody()) {
    parsedbody_ = new ::ru::mail::go::webbase::blobs::SiliconeParsedBody(*from.parsedbody_);
  } else {
    parsedbody_ = NULL;
  }
  if (from.has_author()) {
    author_ = new ::ru::mail::go::webbase::blobs::SiliconeAuthor(*from.author_);
  } else {
    author_ = NULL;
  }
  if (from.has_category()) {
    category_ = new ::ru::mail::go::webbase::blobs::SiliconeCategory(*from.category_);
  } else {
    category_ = NULL;
  }
  if (from.has_videodata()) {
    videodata_ = new ::ru::mail::go::webbase::blobs::SiliconeVideoData(*from.videodata_);
  } else {
    videodata_ = NULL;
  }
  if (from.has_customfields()) {
    customfields_ = new ::ru::mail::go::webbase::blobs::CustomFields(*from.customfields_);
  } else {
    customfields_ = NULL;
  }
  if (from.has_videos()) {
    videos_ = new ::ru::mail::go::webbase::blobs::PulseVideos(*from.videos_);
  } else {
    videos_ = NULL;
  }
  ::memcpy(&layer_words_count_, &from.layer_words_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&layer_symbol_count_) -
    reinterpret_cast<char*>(&layer_words_count_)) + sizeof(layer_symbol_count_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
}

void SiliconDocParserInfo::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptionrss_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layerbodyhtml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_footer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amp_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_rating_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pharma_product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&images_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layer_symbol_count_) -
      reinterpret_cast<char*>(&images_)) + sizeof(layer_symbol_count_));
}

SiliconDocParserInfo::~SiliconDocParserInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
  SharedDtor();
}

void SiliconDocParserInfo::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptionrss_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layerbodyhtml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_footer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amp_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slug_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_rating_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pharma_product_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete images_;
  if (this != internal_default_instance()) delete parsedbody_;
  if (this != internal_default_instance()) delete author_;
  if (this != internal_default_instance()) delete category_;
  if (this != internal_default_instance()) delete videodata_;
  if (this != internal_default_instance()) delete customfields_;
  if (this != internal_default_instance()) delete videos_;
}

void SiliconDocParserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconDocParserInfo::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconDocParserInfo& SiliconDocParserInfo::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconDocParserInfo* SiliconDocParserInfo::New(::google::protobuf::Arena* arena) const {
  SiliconDocParserInfo* n = new SiliconDocParserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconDocParserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  galleries_.Clear();
  categories_.Clear();
  doc_region_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*body_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!video_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*video_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!descriptionrss_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*descriptionrss_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!layerbodyhtml_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*layerbodyhtml_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!layer_header_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*layer_header_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!layer_footer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*layer_footer_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!amp_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*amp_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!guid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*guid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(!slug_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*slug_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(!media_rating_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*media_rating_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(!pharma_product_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pharma_product_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(images_ != NULL);
      images_->::ru::mail::go::webbase::blobs::PostImages::Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(parsedbody_ != NULL);
      parsedbody_->::ru::mail::go::webbase::blobs::SiliconeParsedBody::Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(author_ != NULL);
      author_->::ru::mail::go::webbase::blobs::SiliconeAuthor::Clear();
    }
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(category_ != NULL);
      category_->::ru::mail::go::webbase::blobs::SiliconeCategory::Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(videodata_ != NULL);
      videodata_->::ru::mail::go::webbase::blobs::SiliconeVideoData::Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(customfields_ != NULL);
      customfields_->::ru::mail::go::webbase::blobs::CustomFields::Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(videos_ != NULL);
      videos_->::ru::mail::go::webbase::blobs::PulseVideos::Clear();
    }
  }
  if (cached_has_bits & 15728640u) {
    ::memset(&layer_words_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ttl_) -
        reinterpret_cast<char*>(&layer_words_count_)) + sizeof(ttl_));
  }
  layer_symbol_count_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconDocParserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconDocParserInfo.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconDocParserInfo.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string body = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body().data(), static_cast<int>(this->body().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconDocParserInfo.body");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.PostImages images = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string video = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video().data(), static_cast<int>(this->video().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconDocParserInfo.video");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string descriptionRss = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descriptionrss()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->descriptionrss().data(), static_cast<int>(this->descriptionrss().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconeParsedBody parsedBody = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parsedbody()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconeAuthor author = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_author()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconeCategory category = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_category()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconeVideoData videoData = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videodata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string layerBodyHtml = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layerbodyhtml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layerbodyhtml().data(), static_cast<int>(this->layerbodyhtml().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.CustomFields customFields = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customfields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 layer_words_count = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_layer_words_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_words_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string layer_header = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layer_header()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer_header().data(), static_cast<int>(this->layer_header().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string layer_footer = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layer_footer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer_footer().data(), static_cast<int>(this->layer_footer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string amp_url = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amp_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->amp_url().data(), static_cast<int>(this->amp_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.Gallery galleries = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_galleries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string guid = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), static_cast<int>(this->guid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_valid_fulltext = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_is_valid_fulltext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_fulltext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.PulseVideos videos = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string slug = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slug().data(), static_cast<int>(this->slug().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string media_rating = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_rating()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_rating().data(), static_cast<int>(this->media_rating().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ttl = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_ttl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string categories = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_categories()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->categories(this->categories_size() - 1).data(),
            static_cast<int>(this->categories(this->categories_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 layer_symbol_count = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_layer_symbol_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &layer_symbol_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pharma_product = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pharma_product()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pharma_product().data(), static_cast<int>(this->pharma_product().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_relap_test = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_has_relap_test();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_relap_test_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 doc_region_ids = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 224u, input, this->mutable_doc_region_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_doc_region_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
  return false;
#undef DO_
}

void SiliconDocParserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string body = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->body(), output);
  }

  // required .ru.mail.go.webbase.blobs.PostImages images = 4;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->images_, output);
  }

  // optional string video = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video().data(), static_cast<int>(this->video().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.video");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->video(), output);
  }

  // optional string descriptionRss = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->descriptionrss().data(), static_cast<int>(this->descriptionrss().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->descriptionrss(), output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeParsedBody parsedBody = 7;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->parsedbody_, output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeAuthor author = 8;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->author_, output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeCategory category = 9;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->category_, output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeVideoData videoData = 10;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->videodata_, output);
  }

  // optional string layerBodyHtml = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layerbodyhtml().data(), static_cast<int>(this->layerbodyhtml().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->layerbodyhtml(), output);
  }

  // optional .ru.mail.go.webbase.blobs.CustomFields customFields = 12;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->customfields_, output);
  }

  // optional int32 layer_words_count = 13;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->layer_words_count(), output);
  }

  // optional string layer_header = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_header().data(), static_cast<int>(this->layer_header().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->layer_header(), output);
  }

  // optional string layer_footer = 15;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_footer().data(), static_cast<int>(this->layer_footer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->layer_footer(), output);
  }

  // optional string amp_url = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->amp_url().data(), static_cast<int>(this->amp_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->amp_url(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.Gallery galleries = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->galleries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->galleries(static_cast<int>(i)), output);
  }

  // optional string guid = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), static_cast<int>(this->guid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->guid(), output);
  }

  // optional bool is_valid_fulltext = 19;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_valid_fulltext(), output);
  }

  // optional .ru.mail.go.webbase.blobs.PulseVideos videos = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->videos_, output);
  }

  // optional string slug = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slug().data(), static_cast<int>(this->slug().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->slug(), output);
  }

  // optional string media_rating = 22;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_rating().data(), static_cast<int>(this->media_rating().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->media_rating(), output);
  }

  // optional int64 ttl = 23;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->ttl(), output);
  }

  // repeated string categories = 24;
  for (int i = 0, n = this->categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->categories(i).data(), static_cast<int>(this->categories(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->categories(i), output);
  }

  // optional int64 layer_symbol_count = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->layer_symbol_count(), output);
  }

  // optional string pharma_product = 26;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pharma_product().data(), static_cast<int>(this->pharma_product().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->pharma_product(), output);
  }

  // optional bool has_relap_test = 27;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->has_relap_test(), output);
  }

  // repeated int32 doc_region_ids = 28;
  for (int i = 0, n = this->doc_region_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      28, this->doc_region_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
}

::google::protobuf::uint8* SiliconDocParserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string body = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->body(), target);
  }

  // required .ru.mail.go.webbase.blobs.PostImages images = 4;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->images_, deterministic, target);
  }

  // optional string video = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video().data(), static_cast<int>(this->video().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.video");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->video(), target);
  }

  // optional string descriptionRss = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->descriptionrss().data(), static_cast<int>(this->descriptionrss().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->descriptionrss(), target);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeParsedBody parsedBody = 7;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->parsedbody_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeAuthor author = 8;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->author_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeCategory category = 9;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->category_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeVideoData videoData = 10;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->videodata_, deterministic, target);
  }

  // optional string layerBodyHtml = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layerbodyhtml().data(), static_cast<int>(this->layerbodyhtml().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->layerbodyhtml(), target);
  }

  // optional .ru.mail.go.webbase.blobs.CustomFields customFields = 12;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->customfields_, deterministic, target);
  }

  // optional int32 layer_words_count = 13;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->layer_words_count(), target);
  }

  // optional string layer_header = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_header().data(), static_cast<int>(this->layer_header().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->layer_header(), target);
  }

  // optional string layer_footer = 15;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_footer().data(), static_cast<int>(this->layer_footer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->layer_footer(), target);
  }

  // optional string amp_url = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->amp_url().data(), static_cast<int>(this->amp_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->amp_url(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.Gallery galleries = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->galleries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->galleries(static_cast<int>(i)), deterministic, target);
  }

  // optional string guid = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), static_cast<int>(this->guid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->guid(), target);
  }

  // optional bool is_valid_fulltext = 19;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_valid_fulltext(), target);
  }

  // optional .ru.mail.go.webbase.blobs.PulseVideos videos = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->videos_, deterministic, target);
  }

  // optional string slug = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slug().data(), static_cast<int>(this->slug().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->slug(), target);
  }

  // optional string media_rating = 22;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_rating().data(), static_cast<int>(this->media_rating().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->media_rating(), target);
  }

  // optional int64 ttl = 23;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->ttl(), target);
  }

  // repeated string categories = 24;
  for (int i = 0, n = this->categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->categories(i).data(), static_cast<int>(this->categories(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(24, this->categories(i), target);
  }

  // optional int64 layer_symbol_count = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->layer_symbol_count(), target);
  }

  // optional string pharma_product = 26;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pharma_product().data(), static_cast<int>(this->pharma_product().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->pharma_product(), target);
  }

  // optional bool has_relap_test = 27;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->has_relap_test(), target);
  }

  // repeated int32 doc_region_ids = 28;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(28, this->doc_region_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
  return target;
}

size_t SiliconDocParserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.PostImages images = 4;
  if (has_images()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->images_);
  }
  // repeated .ru.mail.go.webbase.blobs.Gallery galleries = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->galleries_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->galleries(static_cast<int>(i)));
    }
  }

  // repeated string categories = 24;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->categories_size());
  for (int i = 0, n = this->categories_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->categories(i));
  }

  // repeated int32 doc_region_ids = 28;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->doc_region_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->doc_region_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string body = 3;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

    // optional string video = 5;
    if (has_video()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video());
    }

    // optional string descriptionRss = 6;
    if (has_descriptionrss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->descriptionrss());
    }

    // optional string layerBodyHtml = 11;
    if (has_layerbodyhtml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layerbodyhtml());
    }

    // optional string layer_header = 14;
    if (has_layer_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layer_header());
    }

    // optional string layer_footer = 15;
    if (has_layer_footer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layer_footer());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional string amp_url = 16;
    if (has_amp_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amp_url());
    }

    // optional string guid = 18;
    if (has_guid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional string slug = 21;
    if (has_slug()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slug());
    }

    // optional string media_rating = 22;
    if (has_media_rating()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_rating());
    }

    // optional string pharma_product = 26;
    if (has_pharma_product()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pharma_product());
    }

  }
  if (_has_bits_[8 / 32] & 49152u) {
    // optional .ru.mail.go.webbase.blobs.SiliconeParsedBody parsedBody = 7;
    if (has_parsedbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->parsedbody_);
    }

    // optional .ru.mail.go.webbase.blobs.SiliconeAuthor author = 8;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->author_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .ru.mail.go.webbase.blobs.SiliconeCategory category = 9;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->category_);
    }

    // optional .ru.mail.go.webbase.blobs.SiliconeVideoData videoData = 10;
    if (has_videodata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->videodata_);
    }

    // optional .ru.mail.go.webbase.blobs.CustomFields customFields = 12;
    if (has_customfields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->customfields_);
    }

    // optional .ru.mail.go.webbase.blobs.PulseVideos videos = 20;
    if (has_videos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->videos_);
    }

    // optional int32 layer_words_count = 13;
    if (has_layer_words_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer_words_count());
    }

    // optional bool is_valid_fulltext = 19;
    if (has_is_valid_fulltext()) {
      total_size += 2 + 1;
    }

    // optional bool has_relap_test = 27;
    if (has_has_relap_test()) {
      total_size += 2 + 1;
    }

    // optional int64 ttl = 23;
    if (has_ttl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ttl());
    }

  }
  // optional int64 layer_symbol_count = 25;
  if (has_layer_symbol_count()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->layer_symbol_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconDocParserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconDocParserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconDocParserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
    MergeFrom(*source);
  }
}

void SiliconDocParserInfo::MergeFrom(const SiliconDocParserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  galleries_.MergeFrom(from.galleries_);
  categories_.MergeFrom(from.categories_);
  doc_region_ids_.MergeFrom(from.doc_region_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_video();
      video_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_descriptionrss();
      descriptionrss_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptionrss_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_layerbodyhtml();
      layerbodyhtml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layerbodyhtml_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_layer_header();
      layer_header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_header_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_layer_footer();
      layer_footer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_footer_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_amp_url();
      amp_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amp_url_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_guid();
      guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_slug();
      slug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slug_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_media_rating();
      media_rating_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.media_rating_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_pharma_product();
      pharma_product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pharma_product_);
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_images()->::ru::mail::go::webbase::blobs::PostImages::MergeFrom(from.images());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_parsedbody()->::ru::mail::go::webbase::blobs::SiliconeParsedBody::MergeFrom(from.parsedbody());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_author()->::ru::mail::go::webbase::blobs::SiliconeAuthor::MergeFrom(from.author());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_category()->::ru::mail::go::webbase::blobs::SiliconeCategory::MergeFrom(from.category());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_videodata()->::ru::mail::go::webbase::blobs::SiliconeVideoData::MergeFrom(from.videodata());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_customfields()->::ru::mail::go::webbase::blobs::CustomFields::MergeFrom(from.customfields());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_videos()->::ru::mail::go::webbase::blobs::PulseVideos::MergeFrom(from.videos());
    }
    if (cached_has_bits & 0x00100000u) {
      layer_words_count_ = from.layer_words_count_;
    }
    if (cached_has_bits & 0x00200000u) {
      is_valid_fulltext_ = from.is_valid_fulltext_;
    }
    if (cached_has_bits & 0x00400000u) {
      has_relap_test_ = from.has_relap_test_;
    }
    if (cached_has_bits & 0x00800000u) {
      ttl_ = from.ttl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    set_layer_symbol_count(from.layer_symbol_count());
  }
}

void SiliconDocParserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconDocParserInfo::CopyFrom(const SiliconDocParserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconDocParserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00002000) != 0x00002000) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->galleries())) return false;
  if (has_images()) {
    if (!this->images_->IsInitialized()) return false;
  }
  if (has_parsedbody()) {
    if (!this->parsedbody_->IsInitialized()) return false;
  }
  if (has_videodata()) {
    if (!this->videodata_->IsInitialized()) return false;
  }
  if (has_customfields()) {
    if (!this->customfields_->IsInitialized()) return false;
  }
  if (has_videos()) {
    if (!this->videos_->IsInitialized()) return false;
  }
  return true;
}

void SiliconDocParserInfo::Swap(SiliconDocParserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconDocParserInfo::InternalSwap(SiliconDocParserInfo* other) {
  using std::swap;
  galleries_.InternalSwap(&other->galleries_);
  categories_.InternalSwap(&other->categories_);
  doc_region_ids_.InternalSwap(&other->doc_region_ids_);
  title_.Swap(&other->title_);
  description_.Swap(&other->description_);
  body_.Swap(&other->body_);
  video_.Swap(&other->video_);
  descriptionrss_.Swap(&other->descriptionrss_);
  layerbodyhtml_.Swap(&other->layerbodyhtml_);
  layer_header_.Swap(&other->layer_header_);
  layer_footer_.Swap(&other->layer_footer_);
  amp_url_.Swap(&other->amp_url_);
  guid_.Swap(&other->guid_);
  slug_.Swap(&other->slug_);
  media_rating_.Swap(&other->media_rating_);
  pharma_product_.Swap(&other->pharma_product_);
  swap(images_, other->images_);
  swap(parsedbody_, other->parsedbody_);
  swap(author_, other->author_);
  swap(category_, other->category_);
  swap(videodata_, other->videodata_);
  swap(customfields_, other->customfields_);
  swap(videos_, other->videos_);
  swap(layer_words_count_, other->layer_words_count_);
  swap(is_valid_fulltext_, other->is_valid_fulltext_);
  swap(has_relap_test_, other->has_relap_test_);
  swap(ttl_, other->ttl_);
  swap(layer_symbol_count_, other->layer_symbol_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconDocParserInfo::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconDocParserInfo

// optional string title = 1;
bool SiliconDocParserInfo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconDocParserInfo::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconDocParserInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconDocParserInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& SiliconDocParserInfo::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.title)
  return title_.GetNoArena();
}
void SiliconDocParserInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.title)
}
#if LANG_CXX11
void SiliconDocParserInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.title)
}
#endif
void SiliconDocParserInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.title)
}
void SiliconDocParserInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.title)
}
::std::string* SiliconDocParserInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconDocParserInfo::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconDocParserInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.title)
}

// optional string description = 2;
bool SiliconDocParserInfo::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiliconDocParserInfo::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void SiliconDocParserInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiliconDocParserInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& SiliconDocParserInfo::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.description)
  return description_.GetNoArena();
}
void SiliconDocParserInfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.description)
}
#if LANG_CXX11
void SiliconDocParserInfo::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.description)
}
#endif
void SiliconDocParserInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.description)
}
void SiliconDocParserInfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.description)
}
::std::string* SiliconDocParserInfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconDocParserInfo::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconDocParserInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.description)
}

// optional string body = 3;
bool SiliconDocParserInfo::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SiliconDocParserInfo::set_has_body() {
  _has_bits_[0] |= 0x00000004u;
}
void SiliconDocParserInfo::clear_has_body() {
  _has_bits_[0] &= ~0x00000004u;
}
void SiliconDocParserInfo::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
const ::std::string& SiliconDocParserInfo::body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.body)
  return body_.GetNoArena();
}
void SiliconDocParserInfo::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.body)
}
#if LANG_CXX11
void SiliconDocParserInfo::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.body)
}
#endif
void SiliconDocParserInfo::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.body)
}
void SiliconDocParserInfo::set_body(const char* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.body)
}
::std::string* SiliconDocParserInfo::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconDocParserInfo::release_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconDocParserInfo::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.body)
}

// required .ru.mail.go.webbase.blobs.PostImages images = 4;
bool SiliconDocParserInfo::has_images() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SiliconDocParserInfo::set_has_images() {
  _has_bits_[0] |= 0x00002000u;
}
void SiliconDocParserInfo::clear_has_images() {
  _has_bits_[0] &= ~0x00002000u;
}
void SiliconDocParserInfo::clear_images() {
  if (images_ != NULL) images_->::ru::mail::go::webbase::blobs::PostImages::Clear();
  clear_has_images();
}
const ::ru::mail::go::webbase::blobs::PostImages& SiliconDocParserInfo::images() const {
  const ::ru::mail::go::webbase::blobs::PostImages* p = images_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.images)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::PostImages*>(
      &::ru::mail::go::webbase::blobs::_PostImages_default_instance_);
}
::ru::mail::go::webbase::blobs::PostImages* SiliconDocParserInfo::mutable_images() {
  set_has_images();
  if (images_ == NULL) {
    images_ = new ::ru::mail::go::webbase::blobs::PostImages;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.images)
  return images_;
}
::ru::mail::go::webbase::blobs::PostImages* SiliconDocParserInfo::release_images() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.images)
  clear_has_images();
  ::ru::mail::go::webbase::blobs::PostImages* temp = images_;
  images_ = NULL;
  return temp;
}
void SiliconDocParserInfo::set_allocated_images(::ru::mail::go::webbase::blobs::PostImages* images) {
  delete images_;
  images_ = images;
  if (images) {
    set_has_images();
  } else {
    clear_has_images();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.images)
}

// optional string video = 5;
bool SiliconDocParserInfo::has_video() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SiliconDocParserInfo::set_has_video() {
  _has_bits_[0] |= 0x00000008u;
}
void SiliconDocParserInfo::clear_has_video() {
  _has_bits_[0] &= ~0x00000008u;
}
void SiliconDocParserInfo::clear_video() {
  video_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video();
}
const ::std::string& SiliconDocParserInfo::video() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.video)
  return video_.GetNoArena();
}
void SiliconDocParserInfo::set_video(const ::std::string& value) {
  set_has_video();
  video_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.video)
}
#if LANG_CXX11
void SiliconDocParserInfo::set_video(::std::string&& value) {
  set_has_video();
  video_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.video)
}
#endif
void SiliconDocParserInfo::set_video(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video();
  video_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.video)
}
void SiliconDocParserInfo::set_video(const char* value, size_t size) {
  set_has_video();
  video_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.video)
}
::std::string* SiliconDocParserInfo::mutable_video() {
  set_has_video();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.video)
  return video_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconDocParserInfo::release_video() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.video)
  clear_has_video();
  return video_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconDocParserInfo::set_allocated_video(::std::string* video) {
  if (video != NULL) {
    set_has_video();
  } else {
    clear_has_video();
  }
  video_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.video)
}

// optional string descriptionRss = 6;
bool SiliconDocParserInfo::has_descriptionrss() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SiliconDocParserInfo::set_has_descriptionrss() {
  _has_bits_[0] |= 0x00000010u;
}
void SiliconDocParserInfo::clear_has_descriptionrss() {
  _has_bits_[0] &= ~0x00000010u;
}
void SiliconDocParserInfo::clear_descriptionrss() {
  descriptionrss_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_descriptionrss();
}
const ::std::string& SiliconDocParserInfo::descriptionrss() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss)
  return descriptionrss_.GetNoArena();
}
void SiliconDocParserInfo::set_descriptionrss(const ::std::string& value) {
  set_has_descriptionrss();
  descriptionrss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss)
}
#if LANG_CXX11
void SiliconDocParserInfo::set_descriptionrss(::std::string&& value) {
  set_has_descriptionrss();
  descriptionrss_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss)
}
#endif
void SiliconDocParserInfo::set_descriptionrss(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_descriptionrss();
  descriptionrss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss)
}
void SiliconDocParserInfo::set_descriptionrss(const char* value, size_t size) {
  set_has_descriptionrss();
  descriptionrss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss)
}
::std::string* SiliconDocParserInfo::mutable_descriptionrss() {
  set_has_descriptionrss();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss)
  return descriptionrss_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconDocParserInfo::release_descriptionrss() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss)
  clear_has_descriptionrss();
  return descriptionrss_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconDocParserInfo::set_allocated_descriptionrss(::std::string* descriptionrss) {
  if (descriptionrss != NULL) {
    set_has_descriptionrss();
  } else {
    clear_has_descriptionrss();
  }
  descriptionrss_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptionrss);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss)
}

// optional .ru.mail.go.webbase.blobs.SiliconeParsedBody parsedBody = 7;
bool SiliconDocParserInfo::has_parsedbody() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SiliconDocParserInfo::set_has_parsedbody() {
  _has_bits_[0] |= 0x00004000u;
}
void SiliconDocParserInfo::clear_has_parsedbody() {
  _has_bits_[0] &= ~0x00004000u;
}
void SiliconDocParserInfo::clear_parsedbody() {
  if (parsedbody_ != NULL) parsedbody_->::ru::mail::go::webbase::blobs::SiliconeParsedBody::Clear();
  clear_has_parsedbody();
}
const ::ru::mail::go::webbase::blobs::SiliconeParsedBody& SiliconDocParserInfo::parsedbody() const {
  const ::ru::mail::go::webbase::blobs::SiliconeParsedBody* p = parsedbody_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.parsedBody)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeParsedBody*>(
      &::ru::mail::go::webbase::blobs::_SiliconeParsedBody_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconeParsedBody* SiliconDocParserInfo::mutable_parsedbody() {
  set_has_parsedbody();
  if (parsedbody_ == NULL) {
    parsedbody_ = new ::ru::mail::go::webbase::blobs::SiliconeParsedBody;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.parsedBody)
  return parsedbody_;
}
::ru::mail::go::webbase::blobs::SiliconeParsedBody* SiliconDocParserInfo::release_parsedbody() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.parsedBody)
  clear_has_parsedbody();
  ::ru::mail::go::webbase::blobs::SiliconeParsedBody* temp = parsedbody_;
  parsedbody_ = NULL;
  return temp;
}
void SiliconDocParserInfo::set_allocated_parsedbody(::ru::mail::go::webbase::blobs::SiliconeParsedBody* parsedbody) {
  delete parsedbody_;
  parsedbody_ = parsedbody;
  if (parsedbody) {
    set_has_parsedbody();
  } else {
    clear_has_parsedbody();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.parsedBody)
}

// optional .ru.mail.go.webbase.blobs.SiliconeAuthor author = 8;
bool SiliconDocParserInfo::has_author() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SiliconDocParserInfo::set_has_author() {
  _has_bits_[0] |= 0x00008000u;
}
void SiliconDocParserInfo::clear_has_author() {
  _has_bits_[0] &= ~0x00008000u;
}
void SiliconDocParserInfo::clear_author() {
  if (author_ != NULL) author_->::ru::mail::go::webbase::blobs::SiliconeAuthor::Clear();
  clear_has_author();
}
const ::ru::mail::go::webbase::blobs::SiliconeAuthor& SiliconDocParserInfo::author() const {
  const ::ru::mail::go::webbase::blobs::SiliconeAuthor* p = author_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.author)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeAuthor*>(
      &::ru::mail::go::webbase::blobs::_SiliconeAuthor_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconeAuthor* SiliconDocParserInfo::mutable_author() {
  set_has_author();
  if (author_ == NULL) {
    author_ = new ::ru::mail::go::webbase::blobs::SiliconeAuthor;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.author)
  return author_;
}
::ru::mail::go::webbase::blobs::SiliconeAuthor* SiliconDocParserInfo::release_author() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.author)
  clear_has_author();
  ::ru::mail::go::webbase::blobs::SiliconeAuthor* temp = author_;
  author_ = NULL;
  return temp;
}
void SiliconDocParserInfo::set_allocated_author(::ru::mail::go::webbase::blobs::SiliconeAuthor* author) {
  delete author_;
  author_ = author;
  if (author) {
    set_has_author();
  } else {
    clear_has_author();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.author)
}

// optional .ru.mail.go.webbase.blobs.SiliconeCategory category = 9;
bool SiliconDocParserInfo::has_category() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SiliconDocParserInfo::set_has_category() {
  _has_bits_[0] |= 0x00010000u;
}
void SiliconDocParserInfo::clear_has_category() {
  _has_bits_[0] &= ~0x00010000u;
}
void SiliconDocParserInfo::clear_category() {
  if (category_ != NULL) category_->::ru::mail::go::webbase::blobs::SiliconeCategory::Clear();
  clear_has_category();
}
const ::ru::mail::go::webbase::blobs::SiliconeCategory& SiliconDocParserInfo::category() const {
  const ::ru::mail::go::webbase::blobs::SiliconeCategory* p = category_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.category)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeCategory*>(
      &::ru::mail::go::webbase::blobs::_SiliconeCategory_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconeCategory* SiliconDocParserInfo::mutable_category() {
  set_has_category();
  if (category_ == NULL) {
    category_ = new ::ru::mail::go::webbase::blobs::SiliconeCategory;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.category)
  return category_;
}
::ru::mail::go::webbase::blobs::SiliconeCategory* SiliconDocParserInfo::release_category() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.category)
  clear_has_category();
  ::ru::mail::go::webbase::blobs::SiliconeCategory* temp = category_;
  category_ = NULL;
  return temp;
}
void SiliconDocParserInfo::set_allocated_category(::ru::mail::go::webbase::blobs::SiliconeCategory* category) {
  delete category_;
  category_ = category;
  if (category) {
    set_has_category();
  } else {
    clear_has_category();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.category)
}

// optional .ru.mail.go.webbase.blobs.SiliconeVideoData videoData = 10;
bool SiliconDocParserInfo::has_videodata() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SiliconDocParserInfo::set_has_videodata() {
  _has_bits_[0] |= 0x00020000u;
}
void SiliconDocParserInfo::clear_has_videodata() {
  _has_bits_[0] &= ~0x00020000u;
}
void SiliconDocParserInfo::clear_videodata() {
  if (videodata_ != NULL) videodata_->::ru::mail::go::webbase::blobs::SiliconeVideoData::Clear();
  clear_has_videodata();
}
const ::ru::mail::go::webbase::blobs::SiliconeVideoData& SiliconDocParserInfo::videodata() const {
  const ::ru::mail::go::webbase::blobs::SiliconeVideoData* p = videodata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.videoData)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeVideoData*>(
      &::ru::mail::go::webbase::blobs::_SiliconeVideoData_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconeVideoData* SiliconDocParserInfo::mutable_videodata() {
  set_has_videodata();
  if (videodata_ == NULL) {
    videodata_ = new ::ru::mail::go::webbase::blobs::SiliconeVideoData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.videoData)
  return videodata_;
}
::ru::mail::go::webbase::blobs::SiliconeVideoData* SiliconDocParserInfo::release_videodata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.videoData)
  clear_has_videodata();
  ::ru::mail::go::webbase::blobs::SiliconeVideoData* temp = videodata_;
  videodata_ = NULL;
  return temp;
}
void SiliconDocParserInfo::set_allocated_videodata(::ru::mail::go::webbase::blobs::SiliconeVideoData* videodata) {
  delete videodata_;
  videodata_ = videodata;
  if (videodata) {
    set_has_videodata();
  } else {
    clear_has_videodata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.videoData)
}

// optional string layerBodyHtml = 11;
bool SiliconDocParserInfo::has_layerbodyhtml() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SiliconDocParserInfo::set_has_layerbodyhtml() {
  _has_bits_[0] |= 0x00000020u;
}
void SiliconDocParserInfo::clear_has_layerbodyhtml() {
  _has_bits_[0] &= ~0x00000020u;
}
void SiliconDocParserInfo::clear_layerbodyhtml() {
  layerbodyhtml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layerbodyhtml();
}
const ::std::string& SiliconDocParserInfo::layerbodyhtml() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml)
  return layerbodyhtml_.GetNoArena();
}
void SiliconDocParserInfo::set_layerbodyhtml(const ::std::string& value) {
  set_has_layerbodyhtml();
  layerbodyhtml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml)
}
#if LANG_CXX11
void SiliconDocParserInfo::set_layerbodyhtml(::std::string&& value) {
  set_has_layerbodyhtml();
  layerbodyhtml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml)
}
#endif
void SiliconDocParserInfo::set_layerbodyhtml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_layerbodyhtml();
  layerbodyhtml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml)
}
void SiliconDocParserInfo::set_layerbodyhtml(const char* value, size_t size) {
  set_has_layerbodyhtml();
  layerbodyhtml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml)
}
::std::string* SiliconDocParserInfo::mutable_layerbodyhtml() {
  set_has_layerbodyhtml();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml)
  return layerbodyhtml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconDocParserInfo::release_layerbodyhtml() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml)
  clear_has_layerbodyhtml();
  return layerbodyhtml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconDocParserInfo::set_allocated_layerbodyhtml(::std::string* layerbodyhtml) {
  if (layerbodyhtml != NULL) {
    set_has_layerbodyhtml();
  } else {
    clear_has_layerbodyhtml();
  }
  layerbodyhtml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layerbodyhtml);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml)
}

// optional .ru.mail.go.webbase.blobs.CustomFields customFields = 12;
bool SiliconDocParserInfo::has_customfields() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SiliconDocParserInfo::set_has_customfields() {
  _has_bits_[0] |= 0x00040000u;
}
void SiliconDocParserInfo::clear_has_customfields() {
  _has_bits_[0] &= ~0x00040000u;
}
void SiliconDocParserInfo::clear_customfields() {
  if (customfields_ != NULL) customfields_->::ru::mail::go::webbase::blobs::CustomFields::Clear();
  clear_has_customfields();
}
const ::ru::mail::go::webbase::blobs::CustomFields& SiliconDocParserInfo::customfields() const {
  const ::ru::mail::go::webbase::blobs::CustomFields* p = customfields_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.customFields)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::CustomFields*>(
      &::ru::mail::go::webbase::blobs::_CustomFields_default_instance_);
}
::ru::mail::go::webbase::blobs::CustomFields* SiliconDocParserInfo::mutable_customfields() {
  set_has_customfields();
  if (customfields_ == NULL) {
    customfields_ = new ::ru::mail::go::webbase::blobs::CustomFields;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.customFields)
  return customfields_;
}
::ru::mail::go::webbase::blobs::CustomFields* SiliconDocParserInfo::release_customfields() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.customFields)
  clear_has_customfields();
  ::ru::mail::go::webbase::blobs::CustomFields* temp = customfields_;
  customfields_ = NULL;
  return temp;
}
void SiliconDocParserInfo::set_allocated_customfields(::ru::mail::go::webbase::blobs::CustomFields* customfields) {
  delete customfields_;
  customfields_ = customfields;
  if (customfields) {
    set_has_customfields();
  } else {
    clear_has_customfields();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.customFields)
}

// optional int32 layer_words_count = 13;
bool SiliconDocParserInfo::has_layer_words_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SiliconDocParserInfo::set_has_layer_words_count() {
  _has_bits_[0] |= 0x00100000u;
}
void SiliconDocParserInfo::clear_has_layer_words_count() {
  _has_bits_[0] &= ~0x00100000u;
}
void SiliconDocParserInfo::clear_layer_words_count() {
  layer_words_count_ = 0;
  clear_has_layer_words_count();
}
::google::protobuf::int32 SiliconDocParserInfo::layer_words_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_words_count)
  return layer_words_count_;
}
void SiliconDocParserInfo::set_layer_words_count(::google::protobuf::int32 value) {
  set_has_layer_words_count();
  layer_words_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_words_count)
}

// optional string layer_header = 14;
bool SiliconDocParserInfo::has_layer_header() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SiliconDocParserInfo::set_has_layer_header() {
  _has_bits_[0] |= 0x00000040u;
}
void SiliconDocParserInfo::clear_has_layer_header() {
  _has_bits_[0] &= ~0x00000040u;
}
void SiliconDocParserInfo::clear_layer_header() {
  layer_header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer_header();
}
const ::std::string& SiliconDocParserInfo::layer_header() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header)
  return layer_header_.GetNoArena();
}
void SiliconDocParserInfo::set_layer_header(const ::std::string& value) {
  set_has_layer_header();
  layer_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header)
}
#if LANG_CXX11
void SiliconDocParserInfo::set_layer_header(::std::string&& value) {
  set_has_layer_header();
  layer_header_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header)
}
#endif
void SiliconDocParserInfo::set_layer_header(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_layer_header();
  layer_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header)
}
void SiliconDocParserInfo::set_layer_header(const char* value, size_t size) {
  set_has_layer_header();
  layer_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header)
}
::std::string* SiliconDocParserInfo::mutable_layer_header() {
  set_has_layer_header();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header)
  return layer_header_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconDocParserInfo::release_layer_header() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header)
  clear_has_layer_header();
  return layer_header_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconDocParserInfo::set_allocated_layer_header(::std::string* layer_header) {
  if (layer_header != NULL) {
    set_has_layer_header();
  } else {
    clear_has_layer_header();
  }
  layer_header_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer_header);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header)
}

// optional string layer_footer = 15;
bool SiliconDocParserInfo::has_layer_footer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SiliconDocParserInfo::set_has_layer_footer() {
  _has_bits_[0] |= 0x00000080u;
}
void SiliconDocParserInfo::clear_has_layer_footer() {
  _has_bits_[0] &= ~0x00000080u;
}
void SiliconDocParserInfo::clear_layer_footer() {
  layer_footer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer_footer();
}
const ::std::string& SiliconDocParserInfo::layer_footer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer)
  return layer_footer_.GetNoArena();
}
void SiliconDocParserInfo::set_layer_footer(const ::std::string& value) {
  set_has_layer_footer();
  layer_footer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer)
}
#if LANG_CXX11
void SiliconDocParserInfo::set_layer_footer(::std::string&& value) {
  set_has_layer_footer();
  layer_footer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer)
}
#endif
void SiliconDocParserInfo::set_layer_footer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_layer_footer();
  layer_footer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer)
}
void SiliconDocParserInfo::set_layer_footer(const char* value, size_t size) {
  set_has_layer_footer();
  layer_footer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer)
}
::std::string* SiliconDocParserInfo::mutable_layer_footer() {
  set_has_layer_footer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer)
  return layer_footer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconDocParserInfo::release_layer_footer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer)
  clear_has_layer_footer();
  return layer_footer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconDocParserInfo::set_allocated_layer_footer(::std::string* layer_footer) {
  if (layer_footer != NULL) {
    set_has_layer_footer();
  } else {
    clear_has_layer_footer();
  }
  layer_footer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer_footer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer)
}

// optional string amp_url = 16;
bool SiliconDocParserInfo::has_amp_url() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SiliconDocParserInfo::set_has_amp_url() {
  _has_bits_[0] |= 0x00000100u;
}
void SiliconDocParserInfo::clear_has_amp_url() {
  _has_bits_[0] &= ~0x00000100u;
}
void SiliconDocParserInfo::clear_amp_url() {
  amp_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_amp_url();
}
const ::std::string& SiliconDocParserInfo::amp_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url)
  return amp_url_.GetNoArena();
}
void SiliconDocParserInfo::set_amp_url(const ::std::string& value) {
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url)
}
#if LANG_CXX11
void SiliconDocParserInfo::set_amp_url(::std::string&& value) {
  set_has_amp_url();
  amp_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url)
}
#endif
void SiliconDocParserInfo::set_amp_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url)
}
void SiliconDocParserInfo::set_amp_url(const char* value, size_t size) {
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url)
}
::std::string* SiliconDocParserInfo::mutable_amp_url() {
  set_has_amp_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url)
  return amp_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconDocParserInfo::release_amp_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url)
  clear_has_amp_url();
  return amp_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconDocParserInfo::set_allocated_amp_url(::std::string* amp_url) {
  if (amp_url != NULL) {
    set_has_amp_url();
  } else {
    clear_has_amp_url();
  }
  amp_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amp_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url)
}

// repeated .ru.mail.go.webbase.blobs.Gallery galleries = 17;
int SiliconDocParserInfo::galleries_size() const {
  return galleries_.size();
}
void SiliconDocParserInfo::clear_galleries() {
  galleries_.Clear();
}
const ::ru::mail::go::webbase::blobs::Gallery& SiliconDocParserInfo::galleries(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.galleries)
  return galleries_.Get(index);
}
::ru::mail::go::webbase::blobs::Gallery* SiliconDocParserInfo::mutable_galleries(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.galleries)
  return galleries_.Mutable(index);
}
::ru::mail::go::webbase::blobs::Gallery* SiliconDocParserInfo::add_galleries() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfo.galleries)
  return galleries_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Gallery >*
SiliconDocParserInfo::mutable_galleries() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfo.galleries)
  return &galleries_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Gallery >&
SiliconDocParserInfo::galleries() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfo.galleries)
  return galleries_;
}

// optional string guid = 18;
bool SiliconDocParserInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SiliconDocParserInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000200u;
}
void SiliconDocParserInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000200u;
}
void SiliconDocParserInfo::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guid();
}
const ::std::string& SiliconDocParserInfo::guid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid)
  return guid_.GetNoArena();
}
void SiliconDocParserInfo::set_guid(const ::std::string& value) {
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid)
}
#if LANG_CXX11
void SiliconDocParserInfo::set_guid(::std::string&& value) {
  set_has_guid();
  guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid)
}
#endif
void SiliconDocParserInfo::set_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid)
}
void SiliconDocParserInfo::set_guid(const char* value, size_t size) {
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid)
}
::std::string* SiliconDocParserInfo::mutable_guid() {
  set_has_guid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconDocParserInfo::release_guid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid)
  clear_has_guid();
  return guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconDocParserInfo::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    set_has_guid();
  } else {
    clear_has_guid();
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid)
}

// optional bool is_valid_fulltext = 19;
bool SiliconDocParserInfo::has_is_valid_fulltext() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SiliconDocParserInfo::set_has_is_valid_fulltext() {
  _has_bits_[0] |= 0x00200000u;
}
void SiliconDocParserInfo::clear_has_is_valid_fulltext() {
  _has_bits_[0] &= ~0x00200000u;
}
void SiliconDocParserInfo::clear_is_valid_fulltext() {
  is_valid_fulltext_ = false;
  clear_has_is_valid_fulltext();
}
bool SiliconDocParserInfo::is_valid_fulltext() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.is_valid_fulltext)
  return is_valid_fulltext_;
}
void SiliconDocParserInfo::set_is_valid_fulltext(bool value) {
  set_has_is_valid_fulltext();
  is_valid_fulltext_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.is_valid_fulltext)
}

// optional .ru.mail.go.webbase.blobs.PulseVideos videos = 20;
bool SiliconDocParserInfo::has_videos() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SiliconDocParserInfo::set_has_videos() {
  _has_bits_[0] |= 0x00080000u;
}
void SiliconDocParserInfo::clear_has_videos() {
  _has_bits_[0] &= ~0x00080000u;
}
void SiliconDocParserInfo::clear_videos() {
  if (videos_ != NULL) videos_->::ru::mail::go::webbase::blobs::PulseVideos::Clear();
  clear_has_videos();
}
const ::ru::mail::go::webbase::blobs::PulseVideos& SiliconDocParserInfo::videos() const {
  const ::ru::mail::go::webbase::blobs::PulseVideos* p = videos_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.videos)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::PulseVideos*>(
      &::ru::mail::go::webbase::blobs::_PulseVideos_default_instance_);
}
::ru::mail::go::webbase::blobs::PulseVideos* SiliconDocParserInfo::mutable_videos() {
  set_has_videos();
  if (videos_ == NULL) {
    videos_ = new ::ru::mail::go::webbase::blobs::PulseVideos;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.videos)
  return videos_;
}
::ru::mail::go::webbase::blobs::PulseVideos* SiliconDocParserInfo::release_videos() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.videos)
  clear_has_videos();
  ::ru::mail::go::webbase::blobs::PulseVideos* temp = videos_;
  videos_ = NULL;
  return temp;
}
void SiliconDocParserInfo::set_allocated_videos(::ru::mail::go::webbase::blobs::PulseVideos* videos) {
  delete videos_;
  videos_ = videos;
  if (videos) {
    set_has_videos();
  } else {
    clear_has_videos();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.videos)
}

// optional string slug = 21;
bool SiliconDocParserInfo::has_slug() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SiliconDocParserInfo::set_has_slug() {
  _has_bits_[0] |= 0x00000400u;
}
void SiliconDocParserInfo::clear_has_slug() {
  _has_bits_[0] &= ~0x00000400u;
}
void SiliconDocParserInfo::clear_slug() {
  slug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_slug();
}
const ::std::string& SiliconDocParserInfo::slug() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug)
  return slug_.GetNoArena();
}
void SiliconDocParserInfo::set_slug(const ::std::string& value) {
  set_has_slug();
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug)
}
#if LANG_CXX11
void SiliconDocParserInfo::set_slug(::std::string&& value) {
  set_has_slug();
  slug_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug)
}
#endif
void SiliconDocParserInfo::set_slug(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_slug();
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug)
}
void SiliconDocParserInfo::set_slug(const char* value, size_t size) {
  set_has_slug();
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug)
}
::std::string* SiliconDocParserInfo::mutable_slug() {
  set_has_slug();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug)
  return slug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconDocParserInfo::release_slug() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug)
  clear_has_slug();
  return slug_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconDocParserInfo::set_allocated_slug(::std::string* slug) {
  if (slug != NULL) {
    set_has_slug();
  } else {
    clear_has_slug();
  }
  slug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slug);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug)
}

// optional string media_rating = 22;
bool SiliconDocParserInfo::has_media_rating() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SiliconDocParserInfo::set_has_media_rating() {
  _has_bits_[0] |= 0x00000800u;
}
void SiliconDocParserInfo::clear_has_media_rating() {
  _has_bits_[0] &= ~0x00000800u;
}
void SiliconDocParserInfo::clear_media_rating() {
  media_rating_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_media_rating();
}
const ::std::string& SiliconDocParserInfo::media_rating() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating)
  return media_rating_.GetNoArena();
}
void SiliconDocParserInfo::set_media_rating(const ::std::string& value) {
  set_has_media_rating();
  media_rating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating)
}
#if LANG_CXX11
void SiliconDocParserInfo::set_media_rating(::std::string&& value) {
  set_has_media_rating();
  media_rating_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating)
}
#endif
void SiliconDocParserInfo::set_media_rating(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_media_rating();
  media_rating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating)
}
void SiliconDocParserInfo::set_media_rating(const char* value, size_t size) {
  set_has_media_rating();
  media_rating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating)
}
::std::string* SiliconDocParserInfo::mutable_media_rating() {
  set_has_media_rating();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating)
  return media_rating_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconDocParserInfo::release_media_rating() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating)
  clear_has_media_rating();
  return media_rating_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconDocParserInfo::set_allocated_media_rating(::std::string* media_rating) {
  if (media_rating != NULL) {
    set_has_media_rating();
  } else {
    clear_has_media_rating();
  }
  media_rating_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_rating);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating)
}

// optional int64 ttl = 23;
bool SiliconDocParserInfo::has_ttl() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SiliconDocParserInfo::set_has_ttl() {
  _has_bits_[0] |= 0x00800000u;
}
void SiliconDocParserInfo::clear_has_ttl() {
  _has_bits_[0] &= ~0x00800000u;
}
void SiliconDocParserInfo::clear_ttl() {
  ttl_ = GOOGLE_LONGLONG(0);
  clear_has_ttl();
}
::google::protobuf::int64 SiliconDocParserInfo::ttl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.ttl)
  return ttl_;
}
void SiliconDocParserInfo::set_ttl(::google::protobuf::int64 value) {
  set_has_ttl();
  ttl_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.ttl)
}

// repeated string categories = 24;
int SiliconDocParserInfo::categories_size() const {
  return categories_.size();
}
void SiliconDocParserInfo::clear_categories() {
  categories_.Clear();
}
const ::std::string& SiliconDocParserInfo::categories(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
  return categories_.Get(index);
}
::std::string* SiliconDocParserInfo::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
  return categories_.Mutable(index);
}
void SiliconDocParserInfo::set_categories(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
  categories_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SiliconDocParserInfo::set_categories(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
  categories_.Mutable(index)->assign(std::move(value));
}
#endif
void SiliconDocParserInfo::set_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
}
void SiliconDocParserInfo::set_categories(int index, const char* value, size_t size) {
  categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
}
::std::string* SiliconDocParserInfo::add_categories() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
  return categories_.Add();
}
void SiliconDocParserInfo::add_categories(const ::std::string& value) {
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
}
#if LANG_CXX11
void SiliconDocParserInfo::add_categories(::std::string&& value) {
  categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
}
#endif
void SiliconDocParserInfo::add_categories(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
}
void SiliconDocParserInfo::add_categories(const char* value, size_t size) {
  categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SiliconDocParserInfo::categories() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
  return categories_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SiliconDocParserInfo::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
  return &categories_;
}

// optional int64 layer_symbol_count = 25;
bool SiliconDocParserInfo::has_layer_symbol_count() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void SiliconDocParserInfo::set_has_layer_symbol_count() {
  _has_bits_[0] |= 0x01000000u;
}
void SiliconDocParserInfo::clear_has_layer_symbol_count() {
  _has_bits_[0] &= ~0x01000000u;
}
void SiliconDocParserInfo::clear_layer_symbol_count() {
  layer_symbol_count_ = GOOGLE_LONGLONG(0);
  clear_has_layer_symbol_count();
}
::google::protobuf::int64 SiliconDocParserInfo::layer_symbol_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_symbol_count)
  return layer_symbol_count_;
}
void SiliconDocParserInfo::set_layer_symbol_count(::google::protobuf::int64 value) {
  set_has_layer_symbol_count();
  layer_symbol_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_symbol_count)
}

// optional string pharma_product = 26;
bool SiliconDocParserInfo::has_pharma_product() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SiliconDocParserInfo::set_has_pharma_product() {
  _has_bits_[0] |= 0x00001000u;
}
void SiliconDocParserInfo::clear_has_pharma_product() {
  _has_bits_[0] &= ~0x00001000u;
}
void SiliconDocParserInfo::clear_pharma_product() {
  pharma_product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pharma_product();
}
const ::std::string& SiliconDocParserInfo::pharma_product() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product)
  return pharma_product_.GetNoArena();
}
void SiliconDocParserInfo::set_pharma_product(const ::std::string& value) {
  set_has_pharma_product();
  pharma_product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product)
}
#if LANG_CXX11
void SiliconDocParserInfo::set_pharma_product(::std::string&& value) {
  set_has_pharma_product();
  pharma_product_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product)
}
#endif
void SiliconDocParserInfo::set_pharma_product(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pharma_product();
  pharma_product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product)
}
void SiliconDocParserInfo::set_pharma_product(const char* value, size_t size) {
  set_has_pharma_product();
  pharma_product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product)
}
::std::string* SiliconDocParserInfo::mutable_pharma_product() {
  set_has_pharma_product();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product)
  return pharma_product_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconDocParserInfo::release_pharma_product() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product)
  clear_has_pharma_product();
  return pharma_product_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconDocParserInfo::set_allocated_pharma_product(::std::string* pharma_product) {
  if (pharma_product != NULL) {
    set_has_pharma_product();
  } else {
    clear_has_pharma_product();
  }
  pharma_product_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pharma_product);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product)
}

// optional bool has_relap_test = 27;
bool SiliconDocParserInfo::has_has_relap_test() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SiliconDocParserInfo::set_has_has_relap_test() {
  _has_bits_[0] |= 0x00400000u;
}
void SiliconDocParserInfo::clear_has_has_relap_test() {
  _has_bits_[0] &= ~0x00400000u;
}
void SiliconDocParserInfo::clear_has_relap_test() {
  has_relap_test_ = false;
  clear_has_has_relap_test();
}
bool SiliconDocParserInfo::has_relap_test() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.has_relap_test)
  return has_relap_test_;
}
void SiliconDocParserInfo::set_has_relap_test(bool value) {
  set_has_has_relap_test();
  has_relap_test_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.has_relap_test)
}

// repeated int32 doc_region_ids = 28;
int SiliconDocParserInfo::doc_region_ids_size() const {
  return doc_region_ids_.size();
}
void SiliconDocParserInfo::clear_doc_region_ids() {
  doc_region_ids_.Clear();
}
::google::protobuf::int32 SiliconDocParserInfo::doc_region_ids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.doc_region_ids)
  return doc_region_ids_.Get(index);
}
void SiliconDocParserInfo::set_doc_region_ids(int index, ::google::protobuf::int32 value) {
  doc_region_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.doc_region_ids)
}
void SiliconDocParserInfo::add_doc_region_ids(::google::protobuf::int32 value) {
  doc_region_ids_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfo.doc_region_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SiliconDocParserInfo::doc_region_ids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfo.doc_region_ids)
  return doc_region_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SiliconDocParserInfo::mutable_doc_region_ids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfo.doc_region_ids)
  return &doc_region_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PulseVideos::kMainVideoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PulseVideos::PulseVideos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.PulseVideos)
}
PulseVideos::PulseVideos(const PulseVideos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mainvideo()) {
    mainvideo_ = new ::ru::mail::go::webbase::blobs::PulseVideo(*from.mainvideo_);
  } else {
    mainvideo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.PulseVideos)
}

void PulseVideos::SharedCtor() {
  _cached_size_ = 0;
  mainvideo_ = NULL;
}

PulseVideos::~PulseVideos() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.PulseVideos)
  SharedDtor();
}

void PulseVideos::SharedDtor() {
  if (this != internal_default_instance()) delete mainvideo_;
}

void PulseVideos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PulseVideos::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PulseVideos& PulseVideos::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PulseVideos* PulseVideos::New(::google::protobuf::Arena* arena) const {
  PulseVideos* n = new PulseVideos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PulseVideos::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.PulseVideos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_mainvideo()) {
    GOOGLE_DCHECK(mainvideo_ != NULL);
    mainvideo_->::ru::mail::go::webbase::blobs::PulseVideo::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PulseVideos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.PulseVideos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.PulseVideo mainVideo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mainvideo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.PulseVideos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.PulseVideos)
  return false;
#undef DO_
}

void PulseVideos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.PulseVideos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.PulseVideo mainVideo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mainvideo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.PulseVideos)
}

::google::protobuf::uint8* PulseVideos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.PulseVideos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.PulseVideo mainVideo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->mainvideo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.PulseVideos)
  return target;
}

size_t PulseVideos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.PulseVideos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.PulseVideo mainVideo = 1;
  if (has_mainvideo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mainvideo_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PulseVideos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.PulseVideos)
  GOOGLE_DCHECK_NE(&from, this);
  const PulseVideos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PulseVideos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.PulseVideos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.PulseVideos)
    MergeFrom(*source);
  }
}

void PulseVideos::MergeFrom(const PulseVideos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.PulseVideos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mainvideo()) {
    mutable_mainvideo()->::ru::mail::go::webbase::blobs::PulseVideo::MergeFrom(from.mainvideo());
  }
}

void PulseVideos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.PulseVideos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PulseVideos::CopyFrom(const PulseVideos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.PulseVideos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PulseVideos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_mainvideo()) {
    if (!this->mainvideo_->IsInitialized()) return false;
  }
  return true;
}

void PulseVideos::Swap(PulseVideos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PulseVideos::InternalSwap(PulseVideos* other) {
  using std::swap;
  swap(mainvideo_, other->mainvideo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PulseVideos::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PulseVideos

// required .ru.mail.go.webbase.blobs.PulseVideo mainVideo = 1;
bool PulseVideos::has_mainvideo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PulseVideos::set_has_mainvideo() {
  _has_bits_[0] |= 0x00000001u;
}
void PulseVideos::clear_has_mainvideo() {
  _has_bits_[0] &= ~0x00000001u;
}
void PulseVideos::clear_mainvideo() {
  if (mainvideo_ != NULL) mainvideo_->::ru::mail::go::webbase::blobs::PulseVideo::Clear();
  clear_has_mainvideo();
}
const ::ru::mail::go::webbase::blobs::PulseVideo& PulseVideos::mainvideo() const {
  const ::ru::mail::go::webbase::blobs::PulseVideo* p = mainvideo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PulseVideos.mainVideo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::PulseVideo*>(
      &::ru::mail::go::webbase::blobs::_PulseVideo_default_instance_);
}
::ru::mail::go::webbase::blobs::PulseVideo* PulseVideos::mutable_mainvideo() {
  set_has_mainvideo();
  if (mainvideo_ == NULL) {
    mainvideo_ = new ::ru::mail::go::webbase::blobs::PulseVideo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PulseVideos.mainVideo)
  return mainvideo_;
}
::ru::mail::go::webbase::blobs::PulseVideo* PulseVideos::release_mainvideo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PulseVideos.mainVideo)
  clear_has_mainvideo();
  ::ru::mail::go::webbase::blobs::PulseVideo* temp = mainvideo_;
  mainvideo_ = NULL;
  return temp;
}
void PulseVideos::set_allocated_mainvideo(::ru::mail::go::webbase::blobs::PulseVideo* mainvideo) {
  delete mainvideo_;
  mainvideo_ = mainvideo;
  if (mainvideo) {
    set_has_mainvideo();
  } else {
    clear_has_mainvideo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PulseVideos.mainVideo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PulseVideo::kVideoUrlFieldNumber;
const int PulseVideo::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PulseVideo::PulseVideo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.PulseVideo)
}
PulseVideo::PulseVideo(const PulseVideo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_url()) {
    video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
  }
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.PulseVideo)
}

void PulseVideo::SharedCtor() {
  _cached_size_ = 0;
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ = 0;
}

PulseVideo::~PulseVideo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.PulseVideo)
  SharedDtor();
}

void PulseVideo::SharedDtor() {
  video_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PulseVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PulseVideo::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PulseVideo& PulseVideo::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PulseVideo* PulseVideo::New(::google::protobuf::Arena* arena) const {
  PulseVideo* n = new PulseVideo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PulseVideo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.PulseVideo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_video_url()) {
    GOOGLE_DCHECK(!video_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*video_url_.UnsafeRawStringPointer())->clear();
  }
  duration_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PulseVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.PulseVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string video_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_url().data(), static_cast<int>(this->video_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.PulseVideo.video_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.PulseVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.PulseVideo)
  return false;
#undef DO_
}

void PulseVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.PulseVideo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string video_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), static_cast<int>(this->video_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PulseVideo.video_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->video_url(), output);
  }

  // optional int32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.PulseVideo)
}

::google::protobuf::uint8* PulseVideo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.PulseVideo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string video_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), static_cast<int>(this->video_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PulseVideo.video_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->video_url(), target);
  }

  // optional int32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.PulseVideo)
  return target;
}

size_t PulseVideo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.PulseVideo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string video_url = 1;
  if (has_video_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->video_url());
  }
  // optional int32 duration = 2;
  if (has_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PulseVideo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.PulseVideo)
  GOOGLE_DCHECK_NE(&from, this);
  const PulseVideo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PulseVideo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.PulseVideo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.PulseVideo)
    MergeFrom(*source);
  }
}

void PulseVideo::MergeFrom(const PulseVideo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.PulseVideo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_video_url();
      video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PulseVideo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.PulseVideo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PulseVideo::CopyFrom(const PulseVideo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.PulseVideo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PulseVideo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PulseVideo::Swap(PulseVideo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PulseVideo::InternalSwap(PulseVideo* other) {
  using std::swap;
  video_url_.Swap(&other->video_url_);
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PulseVideo::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PulseVideo

// required string video_url = 1;
bool PulseVideo::has_video_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PulseVideo::set_has_video_url() {
  _has_bits_[0] |= 0x00000001u;
}
void PulseVideo::clear_has_video_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void PulseVideo::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_url();
}
const ::std::string& PulseVideo::video_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PulseVideo.video_url)
  return video_url_.GetNoArena();
}
void PulseVideo::set_video_url(const ::std::string& value) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PulseVideo.video_url)
}
#if LANG_CXX11
void PulseVideo::set_video_url(::std::string&& value) {
  set_has_video_url();
  video_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.PulseVideo.video_url)
}
#endif
void PulseVideo::set_video_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.PulseVideo.video_url)
}
void PulseVideo::set_video_url(const char* value, size_t size) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.PulseVideo.video_url)
}
::std::string* PulseVideo::mutable_video_url() {
  set_has_video_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PulseVideo.video_url)
  return video_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PulseVideo::release_video_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PulseVideo.video_url)
  clear_has_video_url();
  return video_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PulseVideo::set_allocated_video_url(::std::string* video_url) {
  if (video_url != NULL) {
    set_has_video_url();
  } else {
    clear_has_video_url();
  }
  video_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PulseVideo.video_url)
}

// optional int32 duration = 2;
bool PulseVideo::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PulseVideo::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void PulseVideo::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void PulseVideo::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
::google::protobuf::int32 PulseVideo::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PulseVideo.duration)
  return duration_;
}
void PulseVideo::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PulseVideo.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconeAuthor::kNameFieldNumber;
const int SiliconeAuthor::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconeAuthor::SiliconeAuthor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconeAuthor)
}
SiliconeAuthor::SiliconeAuthor(const SiliconeAuthor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconeAuthor)
}

void SiliconeAuthor::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SiliconeAuthor::~SiliconeAuthor() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconeAuthor)
  SharedDtor();
}

void SiliconeAuthor::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiliconeAuthor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconeAuthor::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconeAuthor& SiliconeAuthor::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconeAuthor* SiliconeAuthor::New(::google::protobuf::Arena* arena) const {
  SiliconeAuthor* n = new SiliconeAuthor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconeAuthor::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconeAuthor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconeAuthor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconeAuthor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeAuthor.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeAuthor.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconeAuthor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconeAuthor)
  return false;
#undef DO_
}

void SiliconeAuthor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconeAuthor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeAuthor.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeAuthor.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconeAuthor)
}

::google::protobuf::uint8* SiliconeAuthor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconeAuthor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeAuthor.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeAuthor.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconeAuthor)
  return target;
}

size_t SiliconeAuthor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconeAuthor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconeAuthor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconeAuthor)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconeAuthor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconeAuthor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconeAuthor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconeAuthor)
    MergeFrom(*source);
  }
}

void SiliconeAuthor::MergeFrom(const SiliconeAuthor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconeAuthor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
  }
}

void SiliconeAuthor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconeAuthor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconeAuthor::CopyFrom(const SiliconeAuthor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconeAuthor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconeAuthor::IsInitialized() const {
  return true;
}

void SiliconeAuthor::Swap(SiliconeAuthor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconeAuthor::InternalSwap(SiliconeAuthor* other) {
  using std::swap;
  name_.Swap(&other->name_);
  url_.Swap(&other->url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconeAuthor::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconeAuthor

// optional string name = 1;
bool SiliconeAuthor::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconeAuthor::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconeAuthor::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconeAuthor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& SiliconeAuthor::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeAuthor.name)
  return name_.GetNoArena();
}
void SiliconeAuthor::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeAuthor.name)
}
#if LANG_CXX11
void SiliconeAuthor::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeAuthor.name)
}
#endif
void SiliconeAuthor::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeAuthor.name)
}
void SiliconeAuthor::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeAuthor.name)
}
::std::string* SiliconeAuthor::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeAuthor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeAuthor::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeAuthor.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeAuthor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeAuthor.name)
}

// optional string url = 2;
bool SiliconeAuthor::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiliconeAuthor::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void SiliconeAuthor::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiliconeAuthor::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& SiliconeAuthor::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeAuthor.url)
  return url_.GetNoArena();
}
void SiliconeAuthor::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeAuthor.url)
}
#if LANG_CXX11
void SiliconeAuthor::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeAuthor.url)
}
#endif
void SiliconeAuthor::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeAuthor.url)
}
void SiliconeAuthor::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeAuthor.url)
}
::std::string* SiliconeAuthor::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeAuthor.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeAuthor::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeAuthor.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeAuthor::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeAuthor.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconeCategory::kCategoryFieldNumber;
const int SiliconeCategory::kSubCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconeCategory::SiliconeCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconeCategory)
}
SiliconeCategory::SiliconeCategory(const SiliconeCategory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_category()) {
    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  sub_category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sub_category()) {
    sub_category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_category_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconeCategory)
}

void SiliconeCategory::SharedCtor() {
  _cached_size_ = 0;
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SiliconeCategory::~SiliconeCategory() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconeCategory)
  SharedDtor();
}

void SiliconeCategory::SharedDtor() {
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiliconeCategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconeCategory::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconeCategory& SiliconeCategory::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconeCategory* SiliconeCategory::New(::google::protobuf::Arena* arena) const {
  SiliconeCategory* n = new SiliconeCategory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconeCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconeCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!category_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*category_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!sub_category_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sub_category_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconeCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconeCategory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string category = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category().data(), static_cast<int>(this->category().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeCategory.category");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sub_category = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sub_category().data(), static_cast<int>(this->sub_category().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeCategory.sub_category");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconeCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconeCategory)
  return false;
#undef DO_
}

void SiliconeCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconeCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string category = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeCategory.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->category(), output);
  }

  // optional string sub_category = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub_category().data(), static_cast<int>(this->sub_category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeCategory.sub_category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sub_category(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconeCategory)
}

::google::protobuf::uint8* SiliconeCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconeCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string category = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeCategory.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->category(), target);
  }

  // optional string sub_category = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub_category().data(), static_cast<int>(this->sub_category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeCategory.sub_category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sub_category(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconeCategory)
  return target;
}

size_t SiliconeCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconeCategory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string category = 1;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }

    // optional string sub_category = 2;
    if (has_sub_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sub_category());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconeCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconeCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconeCategory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconeCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconeCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconeCategory)
    MergeFrom(*source);
  }
}

void SiliconeCategory::MergeFrom(const SiliconeCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconeCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_category();
      category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sub_category();
      sub_category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_category_);
    }
  }
}

void SiliconeCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconeCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconeCategory::CopyFrom(const SiliconeCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconeCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconeCategory::IsInitialized() const {
  return true;
}

void SiliconeCategory::Swap(SiliconeCategory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconeCategory::InternalSwap(SiliconeCategory* other) {
  using std::swap;
  category_.Swap(&other->category_);
  sub_category_.Swap(&other->sub_category_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconeCategory::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconeCategory

// optional string category = 1;
bool SiliconeCategory::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconeCategory::set_has_category() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconeCategory::clear_has_category() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconeCategory::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
const ::std::string& SiliconeCategory::category() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeCategory.category)
  return category_.GetNoArena();
}
void SiliconeCategory::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeCategory.category)
}
#if LANG_CXX11
void SiliconeCategory::set_category(::std::string&& value) {
  set_has_category();
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeCategory.category)
}
#endif
void SiliconeCategory::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeCategory.category)
}
void SiliconeCategory::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeCategory.category)
}
::std::string* SiliconeCategory::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeCategory.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeCategory::release_category() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeCategory.category)
  clear_has_category();
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeCategory::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeCategory.category)
}

// optional string sub_category = 2;
bool SiliconeCategory::has_sub_category() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiliconeCategory::set_has_sub_category() {
  _has_bits_[0] |= 0x00000002u;
}
void SiliconeCategory::clear_has_sub_category() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiliconeCategory::clear_sub_category() {
  sub_category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sub_category();
}
const ::std::string& SiliconeCategory::sub_category() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeCategory.sub_category)
  return sub_category_.GetNoArena();
}
void SiliconeCategory::set_sub_category(const ::std::string& value) {
  set_has_sub_category();
  sub_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeCategory.sub_category)
}
#if LANG_CXX11
void SiliconeCategory::set_sub_category(::std::string&& value) {
  set_has_sub_category();
  sub_category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeCategory.sub_category)
}
#endif
void SiliconeCategory::set_sub_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sub_category();
  sub_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeCategory.sub_category)
}
void SiliconeCategory::set_sub_category(const char* value, size_t size) {
  set_has_sub_category();
  sub_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeCategory.sub_category)
}
::std::string* SiliconeCategory::mutable_sub_category() {
  set_has_sub_category();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeCategory.sub_category)
  return sub_category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeCategory::release_sub_category() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeCategory.sub_category)
  clear_has_sub_category();
  return sub_category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeCategory::set_allocated_sub_category(::std::string* sub_category) {
  if (sub_category != NULL) {
    set_has_sub_category();
  } else {
    clear_has_sub_category();
  }
  sub_category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sub_category);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeCategory.sub_category)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconeDocState::kDisabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconeDocState::SiliconeDocState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconeDocState)
}
SiliconeDocState::SiliconeDocState(const SiliconeDocState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  disabled_ = from.disabled_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconeDocState)
}

void SiliconeDocState::SharedCtor() {
  _cached_size_ = 0;
  disabled_ = false;
}

SiliconeDocState::~SiliconeDocState() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconeDocState)
  SharedDtor();
}

void SiliconeDocState::SharedDtor() {
}

void SiliconeDocState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconeDocState::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconeDocState& SiliconeDocState::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconeDocState* SiliconeDocState::New(::google::protobuf::Arena* arena) const {
  SiliconeDocState* n = new SiliconeDocState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconeDocState::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconeDocState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconeDocState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconeDocState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool disabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_disabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconeDocState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconeDocState)
  return false;
#undef DO_
}

void SiliconeDocState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconeDocState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool disabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconeDocState)
}

::google::protobuf::uint8* SiliconeDocState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconeDocState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool disabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->disabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconeDocState)
  return target;
}

size_t SiliconeDocState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconeDocState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool disabled = 1;
  if (has_disabled()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconeDocState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconeDocState)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconeDocState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconeDocState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconeDocState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconeDocState)
    MergeFrom(*source);
  }
}

void SiliconeDocState::MergeFrom(const SiliconeDocState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconeDocState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_disabled()) {
    set_disabled(from.disabled());
  }
}

void SiliconeDocState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconeDocState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconeDocState::CopyFrom(const SiliconeDocState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconeDocState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconeDocState::IsInitialized() const {
  return true;
}

void SiliconeDocState::Swap(SiliconeDocState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconeDocState::InternalSwap(SiliconeDocState* other) {
  using std::swap;
  swap(disabled_, other->disabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconeDocState::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconeDocState

// optional bool disabled = 1;
bool SiliconeDocState::has_disabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconeDocState::set_has_disabled() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconeDocState::clear_has_disabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconeDocState::clear_disabled() {
  disabled_ = false;
  clear_has_disabled();
}
bool SiliconeDocState::disabled() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeDocState.disabled)
  return disabled_;
}
void SiliconeDocState::set_disabled(bool value) {
  set_has_disabled();
  disabled_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeDocState.disabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconeParsedBody::kBodyPartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconeParsedBody::SiliconeParsedBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconeParsedBody)
}
SiliconeParsedBody::SiliconeParsedBody(const SiliconeParsedBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bodypart_(from.bodypart_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconeParsedBody)
}

void SiliconeParsedBody::SharedCtor() {
  _cached_size_ = 0;
}

SiliconeParsedBody::~SiliconeParsedBody() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconeParsedBody)
  SharedDtor();
}

void SiliconeParsedBody::SharedDtor() {
}

void SiliconeParsedBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconeParsedBody::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconeParsedBody& SiliconeParsedBody::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconeParsedBody* SiliconeParsedBody::New(::google::protobuf::Arena* arena) const {
  SiliconeParsedBody* n = new SiliconeParsedBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconeParsedBody::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconeParsedBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bodypart_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconeParsedBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconeParsedBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.SiliconeBodyPart bodyPart = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bodypart()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconeParsedBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconeParsedBody)
  return false;
#undef DO_
}

void SiliconeParsedBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconeParsedBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.SiliconeBodyPart bodyPart = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bodypart_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bodypart(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconeParsedBody)
}

::google::protobuf::uint8* SiliconeParsedBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconeParsedBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.SiliconeBodyPart bodyPart = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bodypart_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->bodypart(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconeParsedBody)
  return target;
}

size_t SiliconeParsedBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconeParsedBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.SiliconeBodyPart bodyPart = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bodypart_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bodypart(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconeParsedBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconeParsedBody)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconeParsedBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconeParsedBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconeParsedBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconeParsedBody)
    MergeFrom(*source);
  }
}

void SiliconeParsedBody::MergeFrom(const SiliconeParsedBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconeParsedBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bodypart_.MergeFrom(from.bodypart_);
}

void SiliconeParsedBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconeParsedBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconeParsedBody::CopyFrom(const SiliconeParsedBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconeParsedBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconeParsedBody::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->bodypart())) return false;
  return true;
}

void SiliconeParsedBody::Swap(SiliconeParsedBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconeParsedBody::InternalSwap(SiliconeParsedBody* other) {
  using std::swap;
  bodypart_.InternalSwap(&other->bodypart_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconeParsedBody::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconeParsedBody

// repeated .ru.mail.go.webbase.blobs.SiliconeBodyPart bodyPart = 1;
int SiliconeParsedBody::bodypart_size() const {
  return bodypart_.size();
}
void SiliconeParsedBody::clear_bodypart() {
  bodypart_.Clear();
}
const ::ru::mail::go::webbase::blobs::SiliconeBodyPart& SiliconeParsedBody::bodypart(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeParsedBody.bodyPart)
  return bodypart_.Get(index);
}
::ru::mail::go::webbase::blobs::SiliconeBodyPart* SiliconeParsedBody::mutable_bodypart(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeParsedBody.bodyPart)
  return bodypart_.Mutable(index);
}
::ru::mail::go::webbase::blobs::SiliconeBodyPart* SiliconeParsedBody::add_bodypart() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconeParsedBody.bodyPart)
  return bodypart_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeBodyPart >*
SiliconeParsedBody::mutable_bodypart() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconeParsedBody.bodyPart)
  return &bodypart_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeBodyPart >&
SiliconeParsedBody::bodypart() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconeParsedBody.bodyPart)
  return bodypart_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconeBodyPart::kNameFieldNumber;
const int SiliconeBodyPart::kTextHtmlFieldNumber;
const int SiliconeBodyPart::kContainsCodeFieldNumber;
const int SiliconeBodyPart::kImageFieldNumber;
const int SiliconeBodyPart::kImageHrefFieldNumber;
const int SiliconeBodyPart::kImageTypeFieldNumber;
const int SiliconeBodyPart::kObjectIdFieldNumber;
const int SiliconeBodyPart::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconeBodyPart::SiliconeBodyPart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconeBodyPart)
}
SiliconeBodyPart::SiliconeBodyPart(const SiliconeBodyPart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  texthtml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_texthtml()) {
    texthtml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texthtml_);
  }
  imagehref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imagehref()) {
    imagehref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagehref_);
  }
  objectid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_objectid()) {
    objectid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objectid_);
  }
  if (from.has_image()) {
    image_ = new ::ru::mail::go::webbase::blobs::SiliconImage(*from.image_);
  } else {
    image_ = NULL;
  }
  ::memcpy(&name_, &from.name_,
    static_cast<size_t>(reinterpret_cast<char*>(&imagetype_) -
    reinterpret_cast<char*>(&name_)) + sizeof(imagetype_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconeBodyPart)
}

void SiliconeBodyPart::SharedCtor() {
  _cached_size_ = 0;
  texthtml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagehref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imagetype_) -
      reinterpret_cast<char*>(&image_)) + sizeof(imagetype_));
}

SiliconeBodyPart::~SiliconeBodyPart() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconeBodyPart)
  SharedDtor();
}

void SiliconeBodyPart::SharedDtor() {
  texthtml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagehref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_;
}

void SiliconeBodyPart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconeBodyPart::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconeBodyPart& SiliconeBodyPart::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconeBodyPart* SiliconeBodyPart::New(::google::protobuf::Arena* arena) const {
  SiliconeBodyPart* n = new SiliconeBodyPart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconeBodyPart::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconeBodyPart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!texthtml_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*texthtml_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!imagehref_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imagehref_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!objectid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*objectid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(image_ != NULL);
      image_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&name_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&imagetype_) -
        reinterpret_cast<char*>(&name_)) + sizeof(imagetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconeBodyPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconeBodyPart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.SiliconeBodyPart.PartName name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::SiliconeBodyPart_PartName_IsValid(value)) {
            set_name(static_cast< ::ru::mail::go::webbase::blobs::SiliconeBodyPart_PartName >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string textHtml = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_texthtml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->texthtml().data(), static_cast<int>(this->texthtml().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool containsCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_containscode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &containscode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconImage image = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string imageHref = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagehref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imagehref().data(), static_cast<int>(this->imagehref().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ImageType imageType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ImageType_IsValid(value)) {
            set_imagetype(static_cast< ::ru::mail::go::webbase::blobs::ImageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string objectId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->objectid().data(), static_cast<int>(this->objectid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->list(this->list_size() - 1).data(),
            static_cast<int>(this->list(this->list_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeBodyPart.list");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconeBodyPart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconeBodyPart)
  return false;
#undef DO_
}

void SiliconeBodyPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconeBodyPart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.SiliconeBodyPart.PartName name = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }

  // optional string textHtml = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->texthtml().data(), static_cast<int>(this->texthtml().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->texthtml(), output);
  }

  // optional bool containsCode = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->containscode(), output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconImage image = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->image_, output);
  }

  // optional string imageHref = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagehref().data(), static_cast<int>(this->imagehref().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->imagehref(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ImageType imageType = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->imagetype(), output);
  }

  // optional string objectId = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objectid().data(), static_cast<int>(this->objectid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->objectid(), output);
  }

  // repeated string list = 8;
  for (int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->list(i).data(), static_cast<int>(this->list(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeBodyPart.list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconeBodyPart)
}

::google::protobuf::uint8* SiliconeBodyPart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconeBodyPart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.SiliconeBodyPart.PartName name = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->name(), target);
  }

  // optional string textHtml = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->texthtml().data(), static_cast<int>(this->texthtml().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->texthtml(), target);
  }

  // optional bool containsCode = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->containscode(), target);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconImage image = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->image_, deterministic, target);
  }

  // optional string imageHref = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagehref().data(), static_cast<int>(this->imagehref().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->imagehref(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ImageType imageType = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->imagetype(), target);
  }

  // optional string objectId = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objectid().data(), static_cast<int>(this->objectid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->objectid(), target);
  }

  // repeated string list = 8;
  for (int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->list(i).data(), static_cast<int>(this->list(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeBodyPart.list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconeBodyPart)
  return target;
}

size_t SiliconeBodyPart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconeBodyPart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.SiliconeBodyPart.PartName name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->name());
  }
  // repeated string list = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->list_size());
  for (int i = 0, n = this->list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->list(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string textHtml = 2;
    if (has_texthtml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->texthtml());
    }

    // optional string imageHref = 5;
    if (has_imagehref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagehref());
    }

    // optional string objectId = 7;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectid());
    }

    // optional .ru.mail.go.webbase.blobs.SiliconImage image = 4;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_);
    }

  }
  if (_has_bits_[0 / 32] & 96u) {
    // optional bool containsCode = 3;
    if (has_containscode()) {
      total_size += 1 + 1;
    }

    // optional .ru.mail.go.webbase.blobs.ImageType imageType = 6;
    if (has_imagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->imagetype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconeBodyPart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconeBodyPart)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconeBodyPart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconeBodyPart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconeBodyPart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconeBodyPart)
    MergeFrom(*source);
  }
}

void SiliconeBodyPart::MergeFrom(const SiliconeBodyPart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconeBodyPart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_texthtml();
      texthtml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texthtml_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_imagehref();
      imagehref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagehref_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_objectid();
      objectid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objectid_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_image()->::ru::mail::go::webbase::blobs::SiliconImage::MergeFrom(from.image());
    }
    if (cached_has_bits & 0x00000010u) {
      name_ = from.name_;
    }
    if (cached_has_bits & 0x00000020u) {
      containscode_ = from.containscode_;
    }
    if (cached_has_bits & 0x00000040u) {
      imagetype_ = from.imagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiliconeBodyPart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconeBodyPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconeBodyPart::CopyFrom(const SiliconeBodyPart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconeBodyPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconeBodyPart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (has_image()) {
    if (!this->image_->IsInitialized()) return false;
  }
  return true;
}

void SiliconeBodyPart::Swap(SiliconeBodyPart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconeBodyPart::InternalSwap(SiliconeBodyPart* other) {
  using std::swap;
  list_.InternalSwap(&other->list_);
  texthtml_.Swap(&other->texthtml_);
  imagehref_.Swap(&other->imagehref_);
  objectid_.Swap(&other->objectid_);
  swap(image_, other->image_);
  swap(name_, other->name_);
  swap(containscode_, other->containscode_);
  swap(imagetype_, other->imagetype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconeBodyPart::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconeBodyPart

// required .ru.mail.go.webbase.blobs.SiliconeBodyPart.PartName name = 1;
bool SiliconeBodyPart::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SiliconeBodyPart::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
void SiliconeBodyPart::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void SiliconeBodyPart::clear_name() {
  name_ = 0;
  clear_has_name();
}
::ru::mail::go::webbase::blobs::SiliconeBodyPart_PartName SiliconeBodyPart::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeBodyPart.name)
  return static_cast< ::ru::mail::go::webbase::blobs::SiliconeBodyPart_PartName >(name_);
}
void SiliconeBodyPart::set_name(::ru::mail::go::webbase::blobs::SiliconeBodyPart_PartName value) {
  assert(::ru::mail::go::webbase::blobs::SiliconeBodyPart_PartName_IsValid(value));
  set_has_name();
  name_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeBodyPart.name)
}

// optional string textHtml = 2;
bool SiliconeBodyPart::has_texthtml() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconeBodyPart::set_has_texthtml() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconeBodyPart::clear_has_texthtml() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconeBodyPart::clear_texthtml() {
  texthtml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_texthtml();
}
const ::std::string& SiliconeBodyPart::texthtml() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml)
  return texthtml_.GetNoArena();
}
void SiliconeBodyPart::set_texthtml(const ::std::string& value) {
  set_has_texthtml();
  texthtml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml)
}
#if LANG_CXX11
void SiliconeBodyPart::set_texthtml(::std::string&& value) {
  set_has_texthtml();
  texthtml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml)
}
#endif
void SiliconeBodyPart::set_texthtml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_texthtml();
  texthtml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml)
}
void SiliconeBodyPart::set_texthtml(const char* value, size_t size) {
  set_has_texthtml();
  texthtml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml)
}
::std::string* SiliconeBodyPart::mutable_texthtml() {
  set_has_texthtml();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml)
  return texthtml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeBodyPart::release_texthtml() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml)
  clear_has_texthtml();
  return texthtml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeBodyPart::set_allocated_texthtml(::std::string* texthtml) {
  if (texthtml != NULL) {
    set_has_texthtml();
  } else {
    clear_has_texthtml();
  }
  texthtml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), texthtml);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml)
}

// optional bool containsCode = 3;
bool SiliconeBodyPart::has_containscode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SiliconeBodyPart::set_has_containscode() {
  _has_bits_[0] |= 0x00000020u;
}
void SiliconeBodyPart::clear_has_containscode() {
  _has_bits_[0] &= ~0x00000020u;
}
void SiliconeBodyPart::clear_containscode() {
  containscode_ = false;
  clear_has_containscode();
}
bool SiliconeBodyPart::containscode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeBodyPart.containsCode)
  return containscode_;
}
void SiliconeBodyPart::set_containscode(bool value) {
  set_has_containscode();
  containscode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeBodyPart.containsCode)
}

// optional .ru.mail.go.webbase.blobs.SiliconImage image = 4;
bool SiliconeBodyPart::has_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SiliconeBodyPart::set_has_image() {
  _has_bits_[0] |= 0x00000008u;
}
void SiliconeBodyPart::clear_has_image() {
  _has_bits_[0] &= ~0x00000008u;
}
void SiliconeBodyPart::clear_image() {
  if (image_ != NULL) image_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
  clear_has_image();
}
const ::ru::mail::go::webbase::blobs::SiliconImage& SiliconeBodyPart::image() const {
  const ::ru::mail::go::webbase::blobs::SiliconImage* p = image_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeBodyPart.image)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconImage*>(
      &::ru::mail::go::webbase::blobs::_SiliconImage_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconImage* SiliconeBodyPart::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::ru::mail::go::webbase::blobs::SiliconImage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeBodyPart.image)
  return image_;
}
::ru::mail::go::webbase::blobs::SiliconImage* SiliconeBodyPart::release_image() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeBodyPart.image)
  clear_has_image();
  ::ru::mail::go::webbase::blobs::SiliconImage* temp = image_;
  image_ = NULL;
  return temp;
}
void SiliconeBodyPart::set_allocated_image(::ru::mail::go::webbase::blobs::SiliconImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeBodyPart.image)
}

// optional string imageHref = 5;
bool SiliconeBodyPart::has_imagehref() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiliconeBodyPart::set_has_imagehref() {
  _has_bits_[0] |= 0x00000002u;
}
void SiliconeBodyPart::clear_has_imagehref() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiliconeBodyPart::clear_imagehref() {
  imagehref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imagehref();
}
const ::std::string& SiliconeBodyPart::imagehref() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref)
  return imagehref_.GetNoArena();
}
void SiliconeBodyPart::set_imagehref(const ::std::string& value) {
  set_has_imagehref();
  imagehref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref)
}
#if LANG_CXX11
void SiliconeBodyPart::set_imagehref(::std::string&& value) {
  set_has_imagehref();
  imagehref_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref)
}
#endif
void SiliconeBodyPart::set_imagehref(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imagehref();
  imagehref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref)
}
void SiliconeBodyPart::set_imagehref(const char* value, size_t size) {
  set_has_imagehref();
  imagehref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref)
}
::std::string* SiliconeBodyPart::mutable_imagehref() {
  set_has_imagehref();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref)
  return imagehref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeBodyPart::release_imagehref() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref)
  clear_has_imagehref();
  return imagehref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeBodyPart::set_allocated_imagehref(::std::string* imagehref) {
  if (imagehref != NULL) {
    set_has_imagehref();
  } else {
    clear_has_imagehref();
  }
  imagehref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagehref);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref)
}

// optional .ru.mail.go.webbase.blobs.ImageType imageType = 6;
bool SiliconeBodyPart::has_imagetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SiliconeBodyPart::set_has_imagetype() {
  _has_bits_[0] |= 0x00000040u;
}
void SiliconeBodyPart::clear_has_imagetype() {
  _has_bits_[0] &= ~0x00000040u;
}
void SiliconeBodyPart::clear_imagetype() {
  imagetype_ = 0;
  clear_has_imagetype();
}
::ru::mail::go::webbase::blobs::ImageType SiliconeBodyPart::imagetype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageType)
  return static_cast< ::ru::mail::go::webbase::blobs::ImageType >(imagetype_);
}
void SiliconeBodyPart::set_imagetype(::ru::mail::go::webbase::blobs::ImageType value) {
  assert(::ru::mail::go::webbase::blobs::ImageType_IsValid(value));
  set_has_imagetype();
  imagetype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageType)
}

// optional string objectId = 7;
bool SiliconeBodyPart::has_objectid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SiliconeBodyPart::set_has_objectid() {
  _has_bits_[0] |= 0x00000004u;
}
void SiliconeBodyPart::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000004u;
}
void SiliconeBodyPart::clear_objectid() {
  objectid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_objectid();
}
const ::std::string& SiliconeBodyPart::objectid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId)
  return objectid_.GetNoArena();
}
void SiliconeBodyPart::set_objectid(const ::std::string& value) {
  set_has_objectid();
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId)
}
#if LANG_CXX11
void SiliconeBodyPart::set_objectid(::std::string&& value) {
  set_has_objectid();
  objectid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId)
}
#endif
void SiliconeBodyPart::set_objectid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_objectid();
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId)
}
void SiliconeBodyPart::set_objectid(const char* value, size_t size) {
  set_has_objectid();
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId)
}
::std::string* SiliconeBodyPart::mutable_objectid() {
  set_has_objectid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId)
  return objectid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeBodyPart::release_objectid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId)
  clear_has_objectid();
  return objectid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeBodyPart::set_allocated_objectid(::std::string* objectid) {
  if (objectid != NULL) {
    set_has_objectid();
  } else {
    clear_has_objectid();
  }
  objectid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objectid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId)
}

// repeated string list = 8;
int SiliconeBodyPart::list_size() const {
  return list_.size();
}
void SiliconeBodyPart::clear_list() {
  list_.Clear();
}
const ::std::string& SiliconeBodyPart::list(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
  return list_.Get(index);
}
::std::string* SiliconeBodyPart::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
  return list_.Mutable(index);
}
void SiliconeBodyPart::set_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
  list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SiliconeBodyPart::set_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
  list_.Mutable(index)->assign(std::move(value));
}
#endif
void SiliconeBodyPart::set_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
}
void SiliconeBodyPart::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
}
::std::string* SiliconeBodyPart::add_list() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
  return list_.Add();
}
void SiliconeBodyPart::add_list(const ::std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
}
#if LANG_CXX11
void SiliconeBodyPart::add_list(::std::string&& value) {
  list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
}
#endif
void SiliconeBodyPart::add_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
}
void SiliconeBodyPart::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SiliconeBodyPart::list() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
  return list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SiliconeBodyPart::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
  return &list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gallery::kNameFieldNumber;
const int Gallery::kImagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gallery::Gallery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.Gallery)
}
Gallery::Gallery(const Gallery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      images_(from.images_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.Gallery)
}

void Gallery::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Gallery::~Gallery() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.Gallery)
  SharedDtor();
}

void Gallery::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Gallery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gallery::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gallery& Gallery::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gallery* Gallery::New(::google::protobuf::Arena* arena) const {
  Gallery* n = new Gallery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gallery::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.Gallery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gallery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.Gallery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Gallery.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.GalleryImage images = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.Gallery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.Gallery)
  return false;
#undef DO_
}

void Gallery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.Gallery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Gallery.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.GalleryImage images = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->images(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.Gallery)
}

::google::protobuf::uint8* Gallery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.Gallery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Gallery.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.GalleryImage images = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->images(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.Gallery)
  return target;
}

size_t Gallery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.Gallery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated .ru.mail.go.webbase.blobs.GalleryImage images = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->images_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->images(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gallery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.Gallery)
  GOOGLE_DCHECK_NE(&from, this);
  const Gallery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gallery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.Gallery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.Gallery)
    MergeFrom(*source);
  }
}

void Gallery::MergeFrom(const Gallery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.Gallery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Gallery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.Gallery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gallery::CopyFrom(const Gallery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.Gallery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gallery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->images())) return false;
  return true;
}

void Gallery::Swap(Gallery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gallery::InternalSwap(Gallery* other) {
  using std::swap;
  images_.InternalSwap(&other->images_);
  name_.Swap(&other->name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gallery::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gallery

// required string name = 1;
bool Gallery::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gallery::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Gallery::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gallery::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Gallery::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Gallery.name)
  return name_.GetNoArena();
}
void Gallery::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Gallery.name)
}
#if LANG_CXX11
void Gallery::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Gallery.name)
}
#endif
void Gallery::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Gallery.name)
}
void Gallery::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Gallery.name)
}
::std::string* Gallery::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Gallery.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Gallery::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Gallery.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Gallery::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Gallery.name)
}

// repeated .ru.mail.go.webbase.blobs.GalleryImage images = 2;
int Gallery::images_size() const {
  return images_.size();
}
void Gallery::clear_images() {
  images_.Clear();
}
const ::ru::mail::go::webbase::blobs::GalleryImage& Gallery::images(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Gallery.images)
  return images_.Get(index);
}
::ru::mail::go::webbase::blobs::GalleryImage* Gallery::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Gallery.images)
  return images_.Mutable(index);
}
::ru::mail::go::webbase::blobs::GalleryImage* Gallery::add_images() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.Gallery.images)
  return images_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::GalleryImage >*
Gallery::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.Gallery.images)
  return &images_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::GalleryImage >&
Gallery::images() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.Gallery.images)
  return images_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryImage::kImageFieldNumber;
const int GalleryImage::kPlaceHolderUrlFieldNumber;
const int GalleryImage::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryImage::GalleryImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.GalleryImage)
}
GalleryImage::GalleryImage(const GalleryImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  placeholderurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_placeholderurl()) {
    placeholderurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.placeholderurl_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_image()) {
    image_ = new ::ru::mail::go::webbase::blobs::SiliconImage(*from.image_);
  } else {
    image_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.GalleryImage)
}

void GalleryImage::SharedCtor() {
  _cached_size_ = 0;
  placeholderurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_ = NULL;
}

GalleryImage::~GalleryImage() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.GalleryImage)
  SharedDtor();
}

void GalleryImage::SharedDtor() {
  placeholderurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_;
}

void GalleryImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryImage::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryImage& GalleryImage::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryImage* GalleryImage::New(::google::protobuf::Arena* arena) const {
  GalleryImage* n = new GalleryImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryImage::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.GalleryImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!placeholderurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*placeholderurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(image_ != NULL);
      image_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GalleryImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.GalleryImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.SiliconImage image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string placeHolderUrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_placeholderurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->placeholderurl().data(), static_cast<int>(this->placeholderurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.GalleryImage.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.GalleryImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.GalleryImage)
  return false;
#undef DO_
}

void GalleryImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.GalleryImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.SiliconImage image = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->image_, output);
  }

  // required string placeHolderUrl = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->placeholderurl().data(), static_cast<int>(this->placeholderurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->placeholderurl(), output);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.GalleryImage.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.GalleryImage)
}

::google::protobuf::uint8* GalleryImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.GalleryImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.SiliconImage image = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->image_, deterministic, target);
  }

  // required string placeHolderUrl = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->placeholderurl().data(), static_cast<int>(this->placeholderurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->placeholderurl(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.GalleryImage.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.GalleryImage)
  return target;
}

size_t GalleryImage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.GalleryImage)
  size_t total_size = 0;

  if (has_placeholderurl()) {
    // required string placeHolderUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->placeholderurl());
  }

  if (has_image()) {
    // required .ru.mail.go.webbase.blobs.SiliconImage image = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  return total_size;
}
size_t GalleryImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.GalleryImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string placeHolderUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->placeholderurl());

    // required .ru.mail.go.webbase.blobs.SiliconImage image = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string description = 3;
  if (has_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.GalleryImage)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.GalleryImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.GalleryImage)
    MergeFrom(*source);
  }
}

void GalleryImage::MergeFrom(const GalleryImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.GalleryImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_placeholderurl();
      placeholderurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.placeholderurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_image()->::ru::mail::go::webbase::blobs::SiliconImage::MergeFrom(from.image());
    }
  }
}

void GalleryImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.GalleryImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryImage::CopyFrom(const GalleryImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.GalleryImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (has_image()) {
    if (!this->image_->IsInitialized()) return false;
  }
  return true;
}

void GalleryImage::Swap(GalleryImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryImage::InternalSwap(GalleryImage* other) {
  using std::swap;
  placeholderurl_.Swap(&other->placeholderurl_);
  description_.Swap(&other->description_);
  swap(image_, other->image_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryImage::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryImage

// required .ru.mail.go.webbase.blobs.SiliconImage image = 1;
bool GalleryImage::has_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GalleryImage::set_has_image() {
  _has_bits_[0] |= 0x00000004u;
}
void GalleryImage::clear_has_image() {
  _has_bits_[0] &= ~0x00000004u;
}
void GalleryImage::clear_image() {
  if (image_ != NULL) image_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
  clear_has_image();
}
const ::ru::mail::go::webbase::blobs::SiliconImage& GalleryImage::image() const {
  const ::ru::mail::go::webbase::blobs::SiliconImage* p = image_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.GalleryImage.image)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconImage*>(
      &::ru::mail::go::webbase::blobs::_SiliconImage_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconImage* GalleryImage::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::ru::mail::go::webbase::blobs::SiliconImage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.GalleryImage.image)
  return image_;
}
::ru::mail::go::webbase::blobs::SiliconImage* GalleryImage::release_image() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.GalleryImage.image)
  clear_has_image();
  ::ru::mail::go::webbase::blobs::SiliconImage* temp = image_;
  image_ = NULL;
  return temp;
}
void GalleryImage::set_allocated_image(::ru::mail::go::webbase::blobs::SiliconImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.GalleryImage.image)
}

// required string placeHolderUrl = 2;
bool GalleryImage::has_placeholderurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GalleryImage::set_has_placeholderurl() {
  _has_bits_[0] |= 0x00000001u;
}
void GalleryImage::clear_has_placeholderurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void GalleryImage::clear_placeholderurl() {
  placeholderurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_placeholderurl();
}
const ::std::string& GalleryImage::placeholderurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl)
  return placeholderurl_.GetNoArena();
}
void GalleryImage::set_placeholderurl(const ::std::string& value) {
  set_has_placeholderurl();
  placeholderurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl)
}
#if LANG_CXX11
void GalleryImage::set_placeholderurl(::std::string&& value) {
  set_has_placeholderurl();
  placeholderurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl)
}
#endif
void GalleryImage::set_placeholderurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_placeholderurl();
  placeholderurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl)
}
void GalleryImage::set_placeholderurl(const char* value, size_t size) {
  set_has_placeholderurl();
  placeholderurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl)
}
::std::string* GalleryImage::mutable_placeholderurl() {
  set_has_placeholderurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl)
  return placeholderurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GalleryImage::release_placeholderurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl)
  clear_has_placeholderurl();
  return placeholderurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GalleryImage::set_allocated_placeholderurl(::std::string* placeholderurl) {
  if (placeholderurl != NULL) {
    set_has_placeholderurl();
  } else {
    clear_has_placeholderurl();
  }
  placeholderurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), placeholderurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl)
}

// optional string description = 3;
bool GalleryImage::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GalleryImage::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void GalleryImage::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void GalleryImage::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& GalleryImage::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.GalleryImage.description)
  return description_.GetNoArena();
}
void GalleryImage::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.GalleryImage.description)
}
#if LANG_CXX11
void GalleryImage::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.GalleryImage.description)
}
#endif
void GalleryImage::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.GalleryImage.description)
}
void GalleryImage::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.GalleryImage.description)
}
::std::string* GalleryImage::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.GalleryImage.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GalleryImage::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.GalleryImage.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GalleryImage::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.GalleryImage.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PostImages::kMainImageFieldNumber;
const int PostImages::kImagesFieldNumber;
const int PostImages::kOkImageFieldNumber;
const int PostImages::kLayerImagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PostImages::PostImages()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.PostImages)
}
PostImages::PostImages(const PostImages& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      images_(from.images_),
      layerimages_(from.layerimages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mainimage()) {
    mainimage_ = new ::ru::mail::go::webbase::blobs::SiliconImage(*from.mainimage_);
  } else {
    mainimage_ = NULL;
  }
  if (from.has_okimage()) {
    okimage_ = new ::ru::mail::go::webbase::blobs::SiliconImage(*from.okimage_);
  } else {
    okimage_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.PostImages)
}

void PostImages::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&mainimage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&okimage_) -
      reinterpret_cast<char*>(&mainimage_)) + sizeof(okimage_));
}

PostImages::~PostImages() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.PostImages)
  SharedDtor();
}

void PostImages::SharedDtor() {
  if (this != internal_default_instance()) delete mainimage_;
  if (this != internal_default_instance()) delete okimage_;
}

void PostImages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostImages::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PostImages& PostImages::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PostImages* PostImages::New(::google::protobuf::Arena* arena) const {
  PostImages* n = new PostImages;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PostImages::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.PostImages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  layerimages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(mainimage_ != NULL);
      mainimage_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(okimage_ != NULL);
      okimage_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PostImages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.PostImages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.SiliconImage mainImage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mainimage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.SiliconImage images = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconImage okImage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_okimage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.SiliconImage layerImages = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layerimages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.PostImages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.PostImages)
  return false;
#undef DO_
}

void PostImages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.PostImages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.SiliconImage mainImage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mainimage_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.SiliconImage images = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->images(static_cast<int>(i)), output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconImage okImage = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->okimage_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.SiliconImage layerImages = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->layerimages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->layerimages(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.PostImages)
}

::google::protobuf::uint8* PostImages::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.PostImages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.SiliconImage mainImage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->mainimage_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.SiliconImage images = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->images(static_cast<int>(i)), deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconImage okImage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->okimage_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.SiliconImage layerImages = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->layerimages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->layerimages(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.PostImages)
  return target;
}

size_t PostImages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.PostImages)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.SiliconImage images = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->images_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->images(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.blobs.SiliconImage layerImages = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->layerimages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layerimages(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .ru.mail.go.webbase.blobs.SiliconImage mainImage = 1;
    if (has_mainimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mainimage_);
    }

    // optional .ru.mail.go.webbase.blobs.SiliconImage okImage = 3;
    if (has_okimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->okimage_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostImages::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.PostImages)
  GOOGLE_DCHECK_NE(&from, this);
  const PostImages* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PostImages>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.PostImages)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.PostImages)
    MergeFrom(*source);
  }
}

void PostImages::MergeFrom(const PostImages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.PostImages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  layerimages_.MergeFrom(from.layerimages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_mainimage()->::ru::mail::go::webbase::blobs::SiliconImage::MergeFrom(from.mainimage());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_okimage()->::ru::mail::go::webbase::blobs::SiliconImage::MergeFrom(from.okimage());
    }
  }
}

void PostImages::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.PostImages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostImages::CopyFrom(const PostImages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.PostImages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostImages::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->images())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->layerimages())) return false;
  if (has_mainimage()) {
    if (!this->mainimage_->IsInitialized()) return false;
  }
  if (has_okimage()) {
    if (!this->okimage_->IsInitialized()) return false;
  }
  return true;
}

void PostImages::Swap(PostImages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PostImages::InternalSwap(PostImages* other) {
  using std::swap;
  images_.InternalSwap(&other->images_);
  layerimages_.InternalSwap(&other->layerimages_);
  swap(mainimage_, other->mainimage_);
  swap(okimage_, other->okimage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PostImages::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PostImages

// optional .ru.mail.go.webbase.blobs.SiliconImage mainImage = 1;
bool PostImages::has_mainimage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PostImages::set_has_mainimage() {
  _has_bits_[0] |= 0x00000001u;
}
void PostImages::clear_has_mainimage() {
  _has_bits_[0] &= ~0x00000001u;
}
void PostImages::clear_mainimage() {
  if (mainimage_ != NULL) mainimage_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
  clear_has_mainimage();
}
const ::ru::mail::go::webbase::blobs::SiliconImage& PostImages::mainimage() const {
  const ::ru::mail::go::webbase::blobs::SiliconImage* p = mainimage_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostImages.mainImage)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconImage*>(
      &::ru::mail::go::webbase::blobs::_SiliconImage_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconImage* PostImages::mutable_mainimage() {
  set_has_mainimage();
  if (mainimage_ == NULL) {
    mainimage_ = new ::ru::mail::go::webbase::blobs::SiliconImage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostImages.mainImage)
  return mainimage_;
}
::ru::mail::go::webbase::blobs::SiliconImage* PostImages::release_mainimage() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PostImages.mainImage)
  clear_has_mainimage();
  ::ru::mail::go::webbase::blobs::SiliconImage* temp = mainimage_;
  mainimage_ = NULL;
  return temp;
}
void PostImages::set_allocated_mainimage(::ru::mail::go::webbase::blobs::SiliconImage* mainimage) {
  delete mainimage_;
  mainimage_ = mainimage;
  if (mainimage) {
    set_has_mainimage();
  } else {
    clear_has_mainimage();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PostImages.mainImage)
}

// repeated .ru.mail.go.webbase.blobs.SiliconImage images = 2;
int PostImages::images_size() const {
  return images_.size();
}
void PostImages::clear_images() {
  images_.Clear();
}
const ::ru::mail::go::webbase::blobs::SiliconImage& PostImages::images(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostImages.images)
  return images_.Get(index);
}
::ru::mail::go::webbase::blobs::SiliconImage* PostImages::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostImages.images)
  return images_.Mutable(index);
}
::ru::mail::go::webbase::blobs::SiliconImage* PostImages::add_images() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostImages.images)
  return images_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconImage >*
PostImages::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostImages.images)
  return &images_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconImage >&
PostImages::images() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostImages.images)
  return images_;
}

// optional .ru.mail.go.webbase.blobs.SiliconImage okImage = 3;
bool PostImages::has_okimage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PostImages::set_has_okimage() {
  _has_bits_[0] |= 0x00000002u;
}
void PostImages::clear_has_okimage() {
  _has_bits_[0] &= ~0x00000002u;
}
void PostImages::clear_okimage() {
  if (okimage_ != NULL) okimage_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
  clear_has_okimage();
}
const ::ru::mail::go::webbase::blobs::SiliconImage& PostImages::okimage() const {
  const ::ru::mail::go::webbase::blobs::SiliconImage* p = okimage_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostImages.okImage)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconImage*>(
      &::ru::mail::go::webbase::blobs::_SiliconImage_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconImage* PostImages::mutable_okimage() {
  set_has_okimage();
  if (okimage_ == NULL) {
    okimage_ = new ::ru::mail::go::webbase::blobs::SiliconImage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostImages.okImage)
  return okimage_;
}
::ru::mail::go::webbase::blobs::SiliconImage* PostImages::release_okimage() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PostImages.okImage)
  clear_has_okimage();
  ::ru::mail::go::webbase::blobs::SiliconImage* temp = okimage_;
  okimage_ = NULL;
  return temp;
}
void PostImages::set_allocated_okimage(::ru::mail::go::webbase::blobs::SiliconImage* okimage) {
  delete okimage_;
  okimage_ = okimage;
  if (okimage) {
    set_has_okimage();
  } else {
    clear_has_okimage();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PostImages.okImage)
}

// repeated .ru.mail.go.webbase.blobs.SiliconImage layerImages = 4;
int PostImages::layerimages_size() const {
  return layerimages_.size();
}
void PostImages::clear_layerimages() {
  layerimages_.Clear();
}
const ::ru::mail::go::webbase::blobs::SiliconImage& PostImages::layerimages(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostImages.layerImages)
  return layerimages_.Get(index);
}
::ru::mail::go::webbase::blobs::SiliconImage* PostImages::mutable_layerimages(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostImages.layerImages)
  return layerimages_.Mutable(index);
}
::ru::mail::go::webbase::blobs::SiliconImage* PostImages::add_layerimages() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostImages.layerImages)
  return layerimages_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconImage >*
PostImages::mutable_layerimages() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostImages.layerImages)
  return &layerimages_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconImage >&
PostImages::layerimages() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostImages.layerImages)
  return layerimages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconImage::kOriginalUrlFieldNumber;
const int SiliconImage::kPreviewUrlFieldNumber;
const int SiliconImage::kSimHashFieldNumber;
const int SiliconImage::kWidthFieldNumber;
const int SiliconImage::kHeightFieldNumber;
const int SiliconImage::kImageContentFieldNumber;
const int SiliconImage::kPostIDFieldNumber;
const int SiliconImage::kMicrobaseFieldNumber;
const int SiliconImage::kCaptionFieldNumber;
const int SiliconImage::kFetchFailedFieldNumber;
const int SiliconImage::kOriginalFormatFieldNumber;
const int SiliconImage::kOkImageIdFieldNumber;
const int SiliconImage::kSrchKeyFieldNumber;
const int SiliconImage::kSuppliedFieldNumber;
const int SiliconImage::kImgUrlFieldNumber;
const int SiliconImage::kTagsFieldNumber;
const int SiliconImage::kSaveFailedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconImage::SiliconImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconImage)
}
SiliconImage::SiliconImage(const SiliconImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      postid_(from.postid_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  originalurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_originalurl()) {
    originalurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.originalurl_);
  }
  previewurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_previewurl()) {
    previewurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previewurl_);
  }
  microbase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_microbase()) {
    microbase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.microbase_);
  }
  caption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_caption()) {
    caption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caption_);
  }
  srchkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_srchkey()) {
    srchkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srchkey_);
  }
  img_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_img_url()) {
    img_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_url_);
  }
  if (from.has_imagecontent()) {
    imagecontent_ = new ::ru::mail::go::webbase::parsing::img::Thumb(*from.imagecontent_);
  } else {
    imagecontent_ = NULL;
  }
  ::memcpy(&simhash_, &from.simhash_,
    static_cast<size_t>(reinterpret_cast<char*>(&savefailed_) -
    reinterpret_cast<char*>(&simhash_)) + sizeof(savefailed_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconImage)
}

void SiliconImage::SharedCtor() {
  _cached_size_ = 0;
  originalurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previewurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  microbase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srchkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&imagecontent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&savefailed_) -
      reinterpret_cast<char*>(&imagecontent_)) + sizeof(savefailed_));
}

SiliconImage::~SiliconImage() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconImage)
  SharedDtor();
}

void SiliconImage::SharedDtor() {
  originalurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previewurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  microbase_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caption_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srchkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete imagecontent_;
}

void SiliconImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconImage::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconImage& SiliconImage::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconImage* SiliconImage::New(::google::protobuf::Arena* arena) const {
  SiliconImage* n = new SiliconImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconImage::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  postid_.Clear();
  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!originalurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*originalurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!previewurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*previewurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!microbase_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*microbase_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!caption_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*caption_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!srchkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*srchkey_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!img_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*img_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(imagecontent_ != NULL);
      imagecontent_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
    }
  }
  simhash_ = GOOGLE_ULONGLONG(0);
  if (cached_has_bits & 32512u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&savefailed_) -
        reinterpret_cast<char*>(&width_)) + sizeof(savefailed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string originalUrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originalurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->originalurl().data(), static_cast<int>(this->originalurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconImage.originalUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string previewUrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_previewurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->previewurl().data(), static_cast<int>(this->previewurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconImage.previewUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 simHash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_simhash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &simhash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.parsing.img.Thumb imageContent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagecontent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.SiliconeImagePostID postID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_postid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string microbase = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_microbase()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->microbase().data(), static_cast<int>(this->microbase().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconImage.microbase");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string caption = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->caption().data(), static_cast<int>(this->caption().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconImage.caption");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fetchFailed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_fetchfailed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetchfailed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.parsing.img.ImageFormat originalFormat = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::parsing::img::ImageFormat_IsValid(value)) {
            set_originalformat(static_cast< ::ru::mail::go::webbase::parsing::img::ImageFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 okImageId = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_okimageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &okimageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string srchKey = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srchkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->srchkey().data(), static_cast<int>(this->srchkey().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconImage.srchKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool supplied = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_supplied();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supplied_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string img_url = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->img_url().data(), static_cast<int>(this->img_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconImage.img_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconImage.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool saveFailed = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_savefailed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &savefailed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconImage)
  return false;
#undef DO_
}

void SiliconImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string originalUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originalurl().data(), static_cast<int>(this->originalurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconImage.originalUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->originalurl(), output);
  }

  // optional string previewUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previewurl().data(), static_cast<int>(this->previewurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconImage.previewUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->previewurl(), output);
  }

  // optional uint64 simHash = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->simhash(), output);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->height(), output);
  }

  // optional .ru.mail.go.webbase.parsing.img.Thumb imageContent = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->imagecontent_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.SiliconeImagePostID postID = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->postid_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->postid(static_cast<int>(i)), output);
  }

  // optional string microbase = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->microbase().data(), static_cast<int>(this->microbase().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconImage.microbase");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->microbase(), output);
  }

  // optional string caption = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caption().data(), static_cast<int>(this->caption().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconImage.caption");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->caption(), output);
  }

  // optional bool fetchFailed = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->fetchfailed(), output);
  }

  // optional .ru.mail.go.webbase.parsing.img.ImageFormat originalFormat = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->originalformat(), output);
  }

  // optional uint64 okImageId = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->okimageid(), output);
  }

  // optional string srchKey = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->srchkey().data(), static_cast<int>(this->srchkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconImage.srchKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->srchkey(), output);
  }

  // optional bool supplied = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->supplied(), output);
  }

  // optional string img_url = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_url().data(), static_cast<int>(this->img_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconImage.img_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->img_url(), output);
  }

  // repeated string tags = 16;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconImage.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->tags(i), output);
  }

  // optional bool saveFailed = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->savefailed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconImage)
}

::google::protobuf::uint8* SiliconImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string originalUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originalurl().data(), static_cast<int>(this->originalurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconImage.originalUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->originalurl(), target);
  }

  // optional string previewUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previewurl().data(), static_cast<int>(this->previewurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconImage.previewUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->previewurl(), target);
  }

  // optional uint64 simHash = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->simhash(), target);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->height(), target);
  }

  // optional .ru.mail.go.webbase.parsing.img.Thumb imageContent = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->imagecontent_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.SiliconeImagePostID postID = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->postid_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->postid(static_cast<int>(i)), deterministic, target);
  }

  // optional string microbase = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->microbase().data(), static_cast<int>(this->microbase().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconImage.microbase");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->microbase(), target);
  }

  // optional string caption = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caption().data(), static_cast<int>(this->caption().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconImage.caption");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->caption(), target);
  }

  // optional bool fetchFailed = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->fetchfailed(), target);
  }

  // optional .ru.mail.go.webbase.parsing.img.ImageFormat originalFormat = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->originalformat(), target);
  }

  // optional uint64 okImageId = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->okimageid(), target);
  }

  // optional string srchKey = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->srchkey().data(), static_cast<int>(this->srchkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconImage.srchKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->srchkey(), target);
  }

  // optional bool supplied = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->supplied(), target);
  }

  // optional string img_url = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_url().data(), static_cast<int>(this->img_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconImage.img_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->img_url(), target);
  }

  // repeated string tags = 16;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconImage.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->tags(i), target);
  }

  // optional bool saveFailed = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->savefailed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconImage)
  return target;
}

size_t SiliconImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string originalUrl = 1;
  if (has_originalurl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->originalurl());
  }
  // repeated .ru.mail.go.webbase.blobs.SiliconeImagePostID postID = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->postid_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->postid(static_cast<int>(i)));
    }
  }

  // repeated string tags = 16;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  if (_has_bits_[0 / 32] & 254u) {
    // optional string previewUrl = 2;
    if (has_previewurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->previewurl());
    }

    // optional string microbase = 8;
    if (has_microbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->microbase());
    }

    // optional string caption = 9;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional string srchKey = 13;
    if (has_srchkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srchkey());
    }

    // optional string img_url = 15;
    if (has_img_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->img_url());
    }

    // optional .ru.mail.go.webbase.parsing.img.Thumb imageContent = 6;
    if (has_imagecontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imagecontent_);
    }

    // optional uint64 simHash = 3;
    if (has_simhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->simhash());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional uint32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint64 okImageId = 12;
    if (has_okimageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->okimageid());
    }

    // optional .ru.mail.go.webbase.parsing.img.ImageFormat originalFormat = 11;
    if (has_originalformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->originalformat());
    }

    // optional bool fetchFailed = 10;
    if (has_fetchfailed()) {
      total_size += 1 + 1;
    }

    // optional bool supplied = 14;
    if (has_supplied()) {
      total_size += 1 + 1;
    }

    // optional bool saveFailed = 17;
    if (has_savefailed()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconImage)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconImage)
    MergeFrom(*source);
  }
}

void SiliconImage::MergeFrom(const SiliconImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  postid_.MergeFrom(from.postid_);
  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_originalurl();
      originalurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.originalurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_previewurl();
      previewurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previewurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_microbase();
      microbase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.microbase_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_caption();
      caption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caption_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_srchkey();
      srchkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srchkey_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_img_url();
      img_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_url_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_imagecontent()->::ru::mail::go::webbase::parsing::img::Thumb::MergeFrom(from.imagecontent());
    }
    if (cached_has_bits & 0x00000080u) {
      simhash_ = from.simhash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000200u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000400u) {
      okimageid_ = from.okimageid_;
    }
    if (cached_has_bits & 0x00000800u) {
      originalformat_ = from.originalformat_;
    }
    if (cached_has_bits & 0x00001000u) {
      fetchfailed_ = from.fetchfailed_;
    }
    if (cached_has_bits & 0x00002000u) {
      supplied_ = from.supplied_;
    }
    if (cached_has_bits & 0x00004000u) {
      savefailed_ = from.savefailed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiliconImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconImage::CopyFrom(const SiliconImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->postid())) return false;
  if (has_imagecontent()) {
    if (!this->imagecontent_->IsInitialized()) return false;
  }
  return true;
}

void SiliconImage::Swap(SiliconImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconImage::InternalSwap(SiliconImage* other) {
  using std::swap;
  postid_.InternalSwap(&other->postid_);
  tags_.InternalSwap(&other->tags_);
  originalurl_.Swap(&other->originalurl_);
  previewurl_.Swap(&other->previewurl_);
  microbase_.Swap(&other->microbase_);
  caption_.Swap(&other->caption_);
  srchkey_.Swap(&other->srchkey_);
  img_url_.Swap(&other->img_url_);
  swap(imagecontent_, other->imagecontent_);
  swap(simhash_, other->simhash_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(okimageid_, other->okimageid_);
  swap(originalformat_, other->originalformat_);
  swap(fetchfailed_, other->fetchfailed_);
  swap(supplied_, other->supplied_);
  swap(savefailed_, other->savefailed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconImage::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconImage

// required string originalUrl = 1;
bool SiliconImage::has_originalurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconImage::set_has_originalurl() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconImage::clear_has_originalurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconImage::clear_originalurl() {
  originalurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_originalurl();
}
const ::std::string& SiliconImage::originalurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.originalUrl)
  return originalurl_.GetNoArena();
}
void SiliconImage::set_originalurl(const ::std::string& value) {
  set_has_originalurl();
  originalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.originalUrl)
}
#if LANG_CXX11
void SiliconImage::set_originalurl(::std::string&& value) {
  set_has_originalurl();
  originalurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconImage.originalUrl)
}
#endif
void SiliconImage::set_originalurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_originalurl();
  originalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconImage.originalUrl)
}
void SiliconImage::set_originalurl(const char* value, size_t size) {
  set_has_originalurl();
  originalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconImage.originalUrl)
}
::std::string* SiliconImage::mutable_originalurl() {
  set_has_originalurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.originalUrl)
  return originalurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconImage::release_originalurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconImage.originalUrl)
  clear_has_originalurl();
  return originalurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconImage::set_allocated_originalurl(::std::string* originalurl) {
  if (originalurl != NULL) {
    set_has_originalurl();
  } else {
    clear_has_originalurl();
  }
  originalurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), originalurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconImage.originalUrl)
}

// optional string previewUrl = 2;
bool SiliconImage::has_previewurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiliconImage::set_has_previewurl() {
  _has_bits_[0] |= 0x00000002u;
}
void SiliconImage::clear_has_previewurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiliconImage::clear_previewurl() {
  previewurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_previewurl();
}
const ::std::string& SiliconImage::previewurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.previewUrl)
  return previewurl_.GetNoArena();
}
void SiliconImage::set_previewurl(const ::std::string& value) {
  set_has_previewurl();
  previewurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.previewUrl)
}
#if LANG_CXX11
void SiliconImage::set_previewurl(::std::string&& value) {
  set_has_previewurl();
  previewurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconImage.previewUrl)
}
#endif
void SiliconImage::set_previewurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_previewurl();
  previewurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconImage.previewUrl)
}
void SiliconImage::set_previewurl(const char* value, size_t size) {
  set_has_previewurl();
  previewurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconImage.previewUrl)
}
::std::string* SiliconImage::mutable_previewurl() {
  set_has_previewurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.previewUrl)
  return previewurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconImage::release_previewurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconImage.previewUrl)
  clear_has_previewurl();
  return previewurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconImage::set_allocated_previewurl(::std::string* previewurl) {
  if (previewurl != NULL) {
    set_has_previewurl();
  } else {
    clear_has_previewurl();
  }
  previewurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previewurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconImage.previewUrl)
}

// optional uint64 simHash = 3;
bool SiliconImage::has_simhash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SiliconImage::set_has_simhash() {
  _has_bits_[0] |= 0x00000080u;
}
void SiliconImage::clear_has_simhash() {
  _has_bits_[0] &= ~0x00000080u;
}
void SiliconImage::clear_simhash() {
  simhash_ = GOOGLE_ULONGLONG(0);
  clear_has_simhash();
}
::google::protobuf::uint64 SiliconImage::simhash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.simHash)
  return simhash_;
}
void SiliconImage::set_simhash(::google::protobuf::uint64 value) {
  set_has_simhash();
  simhash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.simHash)
}

// optional uint32 width = 4;
bool SiliconImage::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SiliconImage::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
void SiliconImage::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
void SiliconImage::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 SiliconImage::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.width)
  return width_;
}
void SiliconImage::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.width)
}

// optional uint32 height = 5;
bool SiliconImage::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SiliconImage::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
void SiliconImage::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
void SiliconImage::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 SiliconImage::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.height)
  return height_;
}
void SiliconImage::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.height)
}

// optional .ru.mail.go.webbase.parsing.img.Thumb imageContent = 6;
bool SiliconImage::has_imagecontent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SiliconImage::set_has_imagecontent() {
  _has_bits_[0] |= 0x00000040u;
}
void SiliconImage::clear_has_imagecontent() {
  _has_bits_[0] &= ~0x00000040u;
}
void SiliconImage::clear_imagecontent() {
  if (imagecontent_ != NULL) imagecontent_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
  clear_has_imagecontent();
}
const ::ru::mail::go::webbase::parsing::img::Thumb& SiliconImage::imagecontent() const {
  const ::ru::mail::go::webbase::parsing::img::Thumb* p = imagecontent_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.imageContent)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::Thumb*>(
      &::ru::mail::go::webbase::parsing::img::_Thumb_default_instance_);
}
::ru::mail::go::webbase::parsing::img::Thumb* SiliconImage::mutable_imagecontent() {
  set_has_imagecontent();
  if (imagecontent_ == NULL) {
    imagecontent_ = new ::ru::mail::go::webbase::parsing::img::Thumb;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.imageContent)
  return imagecontent_;
}
::ru::mail::go::webbase::parsing::img::Thumb* SiliconImage::release_imagecontent() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconImage.imageContent)
  clear_has_imagecontent();
  ::ru::mail::go::webbase::parsing::img::Thumb* temp = imagecontent_;
  imagecontent_ = NULL;
  return temp;
}
void SiliconImage::set_allocated_imagecontent(::ru::mail::go::webbase::parsing::img::Thumb* imagecontent) {
  delete imagecontent_;
  imagecontent_ = imagecontent;
  if (imagecontent) {
    set_has_imagecontent();
  } else {
    clear_has_imagecontent();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconImage.imageContent)
}

// repeated .ru.mail.go.webbase.blobs.SiliconeImagePostID postID = 7;
int SiliconImage::postid_size() const {
  return postid_.size();
}
void SiliconImage::clear_postid() {
  postid_.Clear();
}
const ::ru::mail::go::webbase::blobs::SiliconeImagePostID& SiliconImage::postid(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.postID)
  return postid_.Get(index);
}
::ru::mail::go::webbase::blobs::SiliconeImagePostID* SiliconImage::mutable_postid(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.postID)
  return postid_.Mutable(index);
}
::ru::mail::go::webbase::blobs::SiliconeImagePostID* SiliconImage::add_postid() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconImage.postID)
  return postid_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeImagePostID >*
SiliconImage::mutable_postid() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconImage.postID)
  return &postid_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeImagePostID >&
SiliconImage::postid() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconImage.postID)
  return postid_;
}

// optional string microbase = 8;
bool SiliconImage::has_microbase() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SiliconImage::set_has_microbase() {
  _has_bits_[0] |= 0x00000004u;
}
void SiliconImage::clear_has_microbase() {
  _has_bits_[0] &= ~0x00000004u;
}
void SiliconImage::clear_microbase() {
  microbase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_microbase();
}
const ::std::string& SiliconImage::microbase() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.microbase)
  return microbase_.GetNoArena();
}
void SiliconImage::set_microbase(const ::std::string& value) {
  set_has_microbase();
  microbase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.microbase)
}
#if LANG_CXX11
void SiliconImage::set_microbase(::std::string&& value) {
  set_has_microbase();
  microbase_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconImage.microbase)
}
#endif
void SiliconImage::set_microbase(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_microbase();
  microbase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconImage.microbase)
}
void SiliconImage::set_microbase(const char* value, size_t size) {
  set_has_microbase();
  microbase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconImage.microbase)
}
::std::string* SiliconImage::mutable_microbase() {
  set_has_microbase();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.microbase)
  return microbase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconImage::release_microbase() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconImage.microbase)
  clear_has_microbase();
  return microbase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconImage::set_allocated_microbase(::std::string* microbase) {
  if (microbase != NULL) {
    set_has_microbase();
  } else {
    clear_has_microbase();
  }
  microbase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), microbase);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconImage.microbase)
}

// optional string caption = 9;
bool SiliconImage::has_caption() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SiliconImage::set_has_caption() {
  _has_bits_[0] |= 0x00000008u;
}
void SiliconImage::clear_has_caption() {
  _has_bits_[0] &= ~0x00000008u;
}
void SiliconImage::clear_caption() {
  caption_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caption();
}
const ::std::string& SiliconImage::caption() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.caption)
  return caption_.GetNoArena();
}
void SiliconImage::set_caption(const ::std::string& value) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.caption)
}
#if LANG_CXX11
void SiliconImage::set_caption(::std::string&& value) {
  set_has_caption();
  caption_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconImage.caption)
}
#endif
void SiliconImage::set_caption(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconImage.caption)
}
void SiliconImage::set_caption(const char* value, size_t size) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconImage.caption)
}
::std::string* SiliconImage::mutable_caption() {
  set_has_caption();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.caption)
  return caption_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconImage::release_caption() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconImage.caption)
  clear_has_caption();
  return caption_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconImage::set_allocated_caption(::std::string* caption) {
  if (caption != NULL) {
    set_has_caption();
  } else {
    clear_has_caption();
  }
  caption_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caption);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconImage.caption)
}

// optional bool fetchFailed = 10;
bool SiliconImage::has_fetchfailed() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SiliconImage::set_has_fetchfailed() {
  _has_bits_[0] |= 0x00001000u;
}
void SiliconImage::clear_has_fetchfailed() {
  _has_bits_[0] &= ~0x00001000u;
}
void SiliconImage::clear_fetchfailed() {
  fetchfailed_ = false;
  clear_has_fetchfailed();
}
bool SiliconImage::fetchfailed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.fetchFailed)
  return fetchfailed_;
}
void SiliconImage::set_fetchfailed(bool value) {
  set_has_fetchfailed();
  fetchfailed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.fetchFailed)
}

// optional .ru.mail.go.webbase.parsing.img.ImageFormat originalFormat = 11;
bool SiliconImage::has_originalformat() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SiliconImage::set_has_originalformat() {
  _has_bits_[0] |= 0x00000800u;
}
void SiliconImage::clear_has_originalformat() {
  _has_bits_[0] &= ~0x00000800u;
}
void SiliconImage::clear_originalformat() {
  originalformat_ = 0;
  clear_has_originalformat();
}
::ru::mail::go::webbase::parsing::img::ImageFormat SiliconImage::originalformat() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.originalFormat)
  return static_cast< ::ru::mail::go::webbase::parsing::img::ImageFormat >(originalformat_);
}
void SiliconImage::set_originalformat(::ru::mail::go::webbase::parsing::img::ImageFormat value) {
  assert(::ru::mail::go::webbase::parsing::img::ImageFormat_IsValid(value));
  set_has_originalformat();
  originalformat_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.originalFormat)
}

// optional uint64 okImageId = 12;
bool SiliconImage::has_okimageid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SiliconImage::set_has_okimageid() {
  _has_bits_[0] |= 0x00000400u;
}
void SiliconImage::clear_has_okimageid() {
  _has_bits_[0] &= ~0x00000400u;
}
void SiliconImage::clear_okimageid() {
  okimageid_ = GOOGLE_ULONGLONG(0);
  clear_has_okimageid();
}
::google::protobuf::uint64 SiliconImage::okimageid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.okImageId)
  return okimageid_;
}
void SiliconImage::set_okimageid(::google::protobuf::uint64 value) {
  set_has_okimageid();
  okimageid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.okImageId)
}

// optional string srchKey = 13;
bool SiliconImage::has_srchkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SiliconImage::set_has_srchkey() {
  _has_bits_[0] |= 0x00000010u;
}
void SiliconImage::clear_has_srchkey() {
  _has_bits_[0] &= ~0x00000010u;
}
void SiliconImage::clear_srchkey() {
  srchkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_srchkey();
}
const ::std::string& SiliconImage::srchkey() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.srchKey)
  return srchkey_.GetNoArena();
}
void SiliconImage::set_srchkey(const ::std::string& value) {
  set_has_srchkey();
  srchkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.srchKey)
}
#if LANG_CXX11
void SiliconImage::set_srchkey(::std::string&& value) {
  set_has_srchkey();
  srchkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconImage.srchKey)
}
#endif
void SiliconImage::set_srchkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_srchkey();
  srchkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconImage.srchKey)
}
void SiliconImage::set_srchkey(const char* value, size_t size) {
  set_has_srchkey();
  srchkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconImage.srchKey)
}
::std::string* SiliconImage::mutable_srchkey() {
  set_has_srchkey();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.srchKey)
  return srchkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconImage::release_srchkey() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconImage.srchKey)
  clear_has_srchkey();
  return srchkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconImage::set_allocated_srchkey(::std::string* srchkey) {
  if (srchkey != NULL) {
    set_has_srchkey();
  } else {
    clear_has_srchkey();
  }
  srchkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srchkey);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconImage.srchKey)
}

// optional bool supplied = 14;
bool SiliconImage::has_supplied() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SiliconImage::set_has_supplied() {
  _has_bits_[0] |= 0x00002000u;
}
void SiliconImage::clear_has_supplied() {
  _has_bits_[0] &= ~0x00002000u;
}
void SiliconImage::clear_supplied() {
  supplied_ = false;
  clear_has_supplied();
}
bool SiliconImage::supplied() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.supplied)
  return supplied_;
}
void SiliconImage::set_supplied(bool value) {
  set_has_supplied();
  supplied_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.supplied)
}

// optional string img_url = 15;
bool SiliconImage::has_img_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SiliconImage::set_has_img_url() {
  _has_bits_[0] |= 0x00000020u;
}
void SiliconImage::clear_has_img_url() {
  _has_bits_[0] &= ~0x00000020u;
}
void SiliconImage::clear_img_url() {
  img_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_img_url();
}
const ::std::string& SiliconImage::img_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.img_url)
  return img_url_.GetNoArena();
}
void SiliconImage::set_img_url(const ::std::string& value) {
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.img_url)
}
#if LANG_CXX11
void SiliconImage::set_img_url(::std::string&& value) {
  set_has_img_url();
  img_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconImage.img_url)
}
#endif
void SiliconImage::set_img_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconImage.img_url)
}
void SiliconImage::set_img_url(const char* value, size_t size) {
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconImage.img_url)
}
::std::string* SiliconImage::mutable_img_url() {
  set_has_img_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.img_url)
  return img_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconImage::release_img_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconImage.img_url)
  clear_has_img_url();
  return img_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconImage::set_allocated_img_url(::std::string* img_url) {
  if (img_url != NULL) {
    set_has_img_url();
  } else {
    clear_has_img_url();
  }
  img_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconImage.img_url)
}

// repeated string tags = 16;
int SiliconImage::tags_size() const {
  return tags_.size();
}
void SiliconImage::clear_tags() {
  tags_.Clear();
}
const ::std::string& SiliconImage::tags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.tags)
  return tags_.Get(index);
}
::std::string* SiliconImage::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.tags)
  return tags_.Mutable(index);
}
void SiliconImage::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SiliconImage::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
void SiliconImage::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconImage.tags)
}
void SiliconImage::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconImage.tags)
}
::std::string* SiliconImage::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SiliconImage.tags)
  return tags_.Add();
}
void SiliconImage::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconImage.tags)
}
#if LANG_CXX11
void SiliconImage::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconImage.tags)
}
#endif
void SiliconImage::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SiliconImage.tags)
}
void SiliconImage::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SiliconImage.tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SiliconImage::tags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconImage.tags)
  return tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SiliconImage::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconImage.tags)
  return &tags_;
}

// optional bool saveFailed = 17;
bool SiliconImage::has_savefailed() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SiliconImage::set_has_savefailed() {
  _has_bits_[0] |= 0x00004000u;
}
void SiliconImage::clear_has_savefailed() {
  _has_bits_[0] &= ~0x00004000u;
}
void SiliconImage::clear_savefailed() {
  savefailed_ = false;
  clear_has_savefailed();
}
bool SiliconImage::savefailed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.saveFailed)
  return savefailed_;
}
void SiliconImage::set_savefailed(bool value) {
  set_has_savefailed();
  savefailed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.saveFailed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconeImagePostID::kPostUrlFieldNumber;
const int SiliconeImagePostID::kOrdinalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconeImagePostID::SiliconeImagePostID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconeImagePostID)
}
SiliconeImagePostID::SiliconeImagePostID(const SiliconeImagePostID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  posturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_posturl()) {
    posturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posturl_);
  }
  ordinal_ = from.ordinal_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconeImagePostID)
}

void SiliconeImagePostID::SharedCtor() {
  _cached_size_ = 0;
  posturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordinal_ = 0;
}

SiliconeImagePostID::~SiliconeImagePostID() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconeImagePostID)
  SharedDtor();
}

void SiliconeImagePostID::SharedDtor() {
  posturl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiliconeImagePostID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconeImagePostID::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconeImagePostID& SiliconeImagePostID::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconeImagePostID* SiliconeImagePostID::New(::google::protobuf::Arena* arena) const {
  SiliconeImagePostID* n = new SiliconeImagePostID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconeImagePostID::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconeImagePostID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_posturl()) {
    GOOGLE_DCHECK(!posturl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*posturl_.UnsafeRawStringPointer())->clear();
  }
  ordinal_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconeImagePostID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconeImagePostID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string postUrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_posturl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->posturl().data(), static_cast<int>(this->posturl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ordinal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ordinal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconeImagePostID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconeImagePostID)
  return false;
#undef DO_
}

void SiliconeImagePostID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconeImagePostID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string postUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->posturl().data(), static_cast<int>(this->posturl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->posturl(), output);
  }

  // required int32 ordinal = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordinal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconeImagePostID)
}

::google::protobuf::uint8* SiliconeImagePostID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconeImagePostID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string postUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->posturl().data(), static_cast<int>(this->posturl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->posturl(), target);
  }

  // required int32 ordinal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordinal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconeImagePostID)
  return target;
}

size_t SiliconeImagePostID::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.SiliconeImagePostID)
  size_t total_size = 0;

  if (has_posturl()) {
    // required string postUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->posturl());
  }

  if (has_ordinal()) {
    // required int32 ordinal = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ordinal());
  }

  return total_size;
}
size_t SiliconeImagePostID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconeImagePostID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string postUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->posturl());

    // required int32 ordinal = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ordinal());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconeImagePostID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconeImagePostID)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconeImagePostID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconeImagePostID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconeImagePostID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconeImagePostID)
    MergeFrom(*source);
  }
}

void SiliconeImagePostID::MergeFrom(const SiliconeImagePostID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconeImagePostID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_posturl();
      posturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posturl_);
    }
    if (cached_has_bits & 0x00000002u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiliconeImagePostID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconeImagePostID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconeImagePostID::CopyFrom(const SiliconeImagePostID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconeImagePostID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconeImagePostID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SiliconeImagePostID::Swap(SiliconeImagePostID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconeImagePostID::InternalSwap(SiliconeImagePostID* other) {
  using std::swap;
  posturl_.Swap(&other->posturl_);
  swap(ordinal_, other->ordinal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconeImagePostID::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconeImagePostID

// required string postUrl = 1;
bool SiliconeImagePostID::has_posturl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconeImagePostID::set_has_posturl() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconeImagePostID::clear_has_posturl() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconeImagePostID::clear_posturl() {
  posturl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posturl();
}
const ::std::string& SiliconeImagePostID::posturl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl)
  return posturl_.GetNoArena();
}
void SiliconeImagePostID::set_posturl(const ::std::string& value) {
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl)
}
#if LANG_CXX11
void SiliconeImagePostID::set_posturl(::std::string&& value) {
  set_has_posturl();
  posturl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl)
}
#endif
void SiliconeImagePostID::set_posturl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl)
}
void SiliconeImagePostID::set_posturl(const char* value, size_t size) {
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl)
}
::std::string* SiliconeImagePostID::mutable_posturl() {
  set_has_posturl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl)
  return posturl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeImagePostID::release_posturl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl)
  clear_has_posturl();
  return posturl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeImagePostID::set_allocated_posturl(::std::string* posturl) {
  if (posturl != NULL) {
    set_has_posturl();
  } else {
    clear_has_posturl();
  }
  posturl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posturl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl)
}

// required int32 ordinal = 2;
bool SiliconeImagePostID::has_ordinal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiliconeImagePostID::set_has_ordinal() {
  _has_bits_[0] |= 0x00000002u;
}
void SiliconeImagePostID::clear_has_ordinal() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiliconeImagePostID::clear_ordinal() {
  ordinal_ = 0;
  clear_has_ordinal();
}
::google::protobuf::int32 SiliconeImagePostID::ordinal() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeImagePostID.ordinal)
  return ordinal_;
}
void SiliconeImagePostID::set_ordinal(::google::protobuf::int32 value) {
  set_has_ordinal();
  ordinal_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeImagePostID.ordinal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconeImageGalleryRef::kPostUrlFieldNumber;
const int SiliconeImageGalleryRef::kGalleryNameFieldNumber;
const int SiliconeImageGalleryRef::kOrdinalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconeImageGalleryRef::SiliconeImageGalleryRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
}
SiliconeImageGalleryRef::SiliconeImageGalleryRef(const SiliconeImageGalleryRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  posturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_posturl()) {
    posturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posturl_);
  }
  galleryname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_galleryname()) {
    galleryname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.galleryname_);
  }
  ordinal_ = from.ordinal_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
}

void SiliconeImageGalleryRef::SharedCtor() {
  _cached_size_ = 0;
  posturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  galleryname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordinal_ = 0;
}

SiliconeImageGalleryRef::~SiliconeImageGalleryRef() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
  SharedDtor();
}

void SiliconeImageGalleryRef::SharedDtor() {
  posturl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  galleryname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiliconeImageGalleryRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconeImageGalleryRef::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconeImageGalleryRef& SiliconeImageGalleryRef::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconeImageGalleryRef* SiliconeImageGalleryRef::New(::google::protobuf::Arena* arena) const {
  SiliconeImageGalleryRef* n = new SiliconeImageGalleryRef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconeImageGalleryRef::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!posturl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*posturl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!galleryname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*galleryname_.UnsafeRawStringPointer())->clear();
    }
  }
  ordinal_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconeImageGalleryRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string postUrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_posturl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->posturl().data(), static_cast<int>(this->posturl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string galleryName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_galleryname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->galleryname().data(), static_cast<int>(this->galleryname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ordinal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ordinal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
  return false;
#undef DO_
}

void SiliconeImageGalleryRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string postUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->posturl().data(), static_cast<int>(this->posturl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->posturl(), output);
  }

  // required string galleryName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->galleryname().data(), static_cast<int>(this->galleryname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->galleryname(), output);
  }

  // required int32 ordinal = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordinal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
}

::google::protobuf::uint8* SiliconeImageGalleryRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string postUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->posturl().data(), static_cast<int>(this->posturl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->posturl(), target);
  }

  // required string galleryName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->galleryname().data(), static_cast<int>(this->galleryname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->galleryname(), target);
  }

  // required int32 ordinal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordinal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
  return target;
}

size_t SiliconeImageGalleryRef::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
  size_t total_size = 0;

  if (has_posturl()) {
    // required string postUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->posturl());
  }

  if (has_galleryname()) {
    // required string galleryName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->galleryname());
  }

  if (has_ordinal()) {
    // required int32 ordinal = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ordinal());
  }

  return total_size;
}
size_t SiliconeImageGalleryRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string postUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->posturl());

    // required string galleryName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->galleryname());

    // required int32 ordinal = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ordinal());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconeImageGalleryRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconeImageGalleryRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconeImageGalleryRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
    MergeFrom(*source);
  }
}

void SiliconeImageGalleryRef::MergeFrom(const SiliconeImageGalleryRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_posturl();
      posturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posturl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_galleryname();
      galleryname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.galleryname_);
    }
    if (cached_has_bits & 0x00000004u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiliconeImageGalleryRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconeImageGalleryRef::CopyFrom(const SiliconeImageGalleryRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconeImageGalleryRef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SiliconeImageGalleryRef::Swap(SiliconeImageGalleryRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconeImageGalleryRef::InternalSwap(SiliconeImageGalleryRef* other) {
  using std::swap;
  posturl_.Swap(&other->posturl_);
  galleryname_.Swap(&other->galleryname_);
  swap(ordinal_, other->ordinal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconeImageGalleryRef::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconeImageGalleryRef

// required string postUrl = 1;
bool SiliconeImageGalleryRef::has_posturl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconeImageGalleryRef::set_has_posturl() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconeImageGalleryRef::clear_has_posturl() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconeImageGalleryRef::clear_posturl() {
  posturl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posturl();
}
const ::std::string& SiliconeImageGalleryRef::posturl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl)
  return posturl_.GetNoArena();
}
void SiliconeImageGalleryRef::set_posturl(const ::std::string& value) {
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl)
}
#if LANG_CXX11
void SiliconeImageGalleryRef::set_posturl(::std::string&& value) {
  set_has_posturl();
  posturl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl)
}
#endif
void SiliconeImageGalleryRef::set_posturl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl)
}
void SiliconeImageGalleryRef::set_posturl(const char* value, size_t size) {
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl)
}
::std::string* SiliconeImageGalleryRef::mutable_posturl() {
  set_has_posturl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl)
  return posturl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeImageGalleryRef::release_posturl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl)
  clear_has_posturl();
  return posturl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeImageGalleryRef::set_allocated_posturl(::std::string* posturl) {
  if (posturl != NULL) {
    set_has_posturl();
  } else {
    clear_has_posturl();
  }
  posturl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posturl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl)
}

// required string galleryName = 2;
bool SiliconeImageGalleryRef::has_galleryname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiliconeImageGalleryRef::set_has_galleryname() {
  _has_bits_[0] |= 0x00000002u;
}
void SiliconeImageGalleryRef::clear_has_galleryname() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiliconeImageGalleryRef::clear_galleryname() {
  galleryname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_galleryname();
}
const ::std::string& SiliconeImageGalleryRef::galleryname() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName)
  return galleryname_.GetNoArena();
}
void SiliconeImageGalleryRef::set_galleryname(const ::std::string& value) {
  set_has_galleryname();
  galleryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName)
}
#if LANG_CXX11
void SiliconeImageGalleryRef::set_galleryname(::std::string&& value) {
  set_has_galleryname();
  galleryname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName)
}
#endif
void SiliconeImageGalleryRef::set_galleryname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_galleryname();
  galleryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName)
}
void SiliconeImageGalleryRef::set_galleryname(const char* value, size_t size) {
  set_has_galleryname();
  galleryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName)
}
::std::string* SiliconeImageGalleryRef::mutable_galleryname() {
  set_has_galleryname();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName)
  return galleryname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeImageGalleryRef::release_galleryname() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName)
  clear_has_galleryname();
  return galleryname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeImageGalleryRef::set_allocated_galleryname(::std::string* galleryname) {
  if (galleryname != NULL) {
    set_has_galleryname();
  } else {
    clear_has_galleryname();
  }
  galleryname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), galleryname);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName)
}

// required int32 ordinal = 3;
bool SiliconeImageGalleryRef::has_ordinal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SiliconeImageGalleryRef::set_has_ordinal() {
  _has_bits_[0] |= 0x00000004u;
}
void SiliconeImageGalleryRef::clear_has_ordinal() {
  _has_bits_[0] &= ~0x00000004u;
}
void SiliconeImageGalleryRef::clear_ordinal() {
  ordinal_ = 0;
  clear_has_ordinal();
}
::google::protobuf::int32 SiliconeImageGalleryRef::ordinal() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.ordinal)
  return ordinal_;
}
void SiliconeImageGalleryRef::set_ordinal(::google::protobuf::int32 value) {
  set_has_ordinal();
  ordinal_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.ordinal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconDocTaggerInfo::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconDocTaggerInfo::SiliconDocTaggerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
}
SiliconDocTaggerInfo::SiliconDocTaggerInfo(const SiliconDocTaggerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tag_(from.tag_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
}

void SiliconDocTaggerInfo::SharedCtor() {
  _cached_size_ = 0;
}

SiliconDocTaggerInfo::~SiliconDocTaggerInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
  SharedDtor();
}

void SiliconDocTaggerInfo::SharedDtor() {
}

void SiliconDocTaggerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconDocTaggerInfo::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconDocTaggerInfo& SiliconDocTaggerInfo::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconDocTaggerInfo* SiliconDocTaggerInfo::New(::google::protobuf::Arena* arena) const {
  SiliconDocTaggerInfo* n = new SiliconDocTaggerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconDocTaggerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconDocTaggerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag(this->tag_size() - 1).data(),
            static_cast<int>(this->tag(this->tag_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
  return false;
#undef DO_
}

void SiliconDocTaggerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tag = 1;
  for (int i = 0, n = this->tag_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag(i).data(), static_cast<int>(this->tag(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tag(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
}

::google::protobuf::uint8* SiliconDocTaggerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tag = 1;
  for (int i = 0, n = this->tag_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag(i).data(), static_cast<int>(this->tag(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->tag(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
  return target;
}

size_t SiliconDocTaggerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string tag = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tag_size());
  for (int i = 0, n = this->tag_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconDocTaggerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconDocTaggerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconDocTaggerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
    MergeFrom(*source);
  }
}

void SiliconDocTaggerInfo::MergeFrom(const SiliconDocTaggerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tag_.MergeFrom(from.tag_);
}

void SiliconDocTaggerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconDocTaggerInfo::CopyFrom(const SiliconDocTaggerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconDocTaggerInfo::IsInitialized() const {
  return true;
}

void SiliconDocTaggerInfo::Swap(SiliconDocTaggerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconDocTaggerInfo::InternalSwap(SiliconDocTaggerInfo* other) {
  using std::swap;
  tag_.InternalSwap(&other->tag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconDocTaggerInfo::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconDocTaggerInfo

// repeated string tag = 1;
int SiliconDocTaggerInfo::tag_size() const {
  return tag_.size();
}
void SiliconDocTaggerInfo::clear_tag() {
  tag_.Clear();
}
const ::std::string& SiliconDocTaggerInfo::tag(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
  return tag_.Get(index);
}
::std::string* SiliconDocTaggerInfo::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
  return tag_.Mutable(index);
}
void SiliconDocTaggerInfo::set_tag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
  tag_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SiliconDocTaggerInfo::set_tag(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
  tag_.Mutable(index)->assign(std::move(value));
}
#endif
void SiliconDocTaggerInfo::set_tag(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
}
void SiliconDocTaggerInfo::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
}
::std::string* SiliconDocTaggerInfo::add_tag() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
  return tag_.Add();
}
void SiliconDocTaggerInfo::add_tag(const ::std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
}
#if LANG_CXX11
void SiliconDocTaggerInfo::add_tag(::std::string&& value) {
  tag_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
}
#endif
void SiliconDocTaggerInfo::add_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
}
void SiliconDocTaggerInfo::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SiliconDocTaggerInfo::tag() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
  return tag_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SiliconDocTaggerInfo::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
  return &tag_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconDocTaggerHashInfo::kTagHashesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconDocTaggerHashInfo::SiliconDocTaggerHashInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
}
SiliconDocTaggerHashInfo::SiliconDocTaggerHashInfo(const SiliconDocTaggerHashInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      taghashes_(from.taghashes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
}

void SiliconDocTaggerHashInfo::SharedCtor() {
  _cached_size_ = 0;
}

SiliconDocTaggerHashInfo::~SiliconDocTaggerHashInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
  SharedDtor();
}

void SiliconDocTaggerHashInfo::SharedDtor() {
}

void SiliconDocTaggerHashInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconDocTaggerHashInfo::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconDocTaggerHashInfo& SiliconDocTaggerHashInfo::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconDocTaggerHashInfo* SiliconDocTaggerHashInfo::New(::google::protobuf::Arena* arena) const {
  SiliconDocTaggerHashInfo* n = new SiliconDocTaggerHashInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconDocTaggerHashInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taghashes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconDocTaggerHashInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 tagHashes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8u, input, this->mutable_taghashes())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_taghashes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
  return false;
#undef DO_
}

void SiliconDocTaggerHashInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 tagHashes = 1;
  for (int i = 0, n = this->taghashes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->taghashes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
}

::google::protobuf::uint8* SiliconDocTaggerHashInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 tagHashes = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(1, this->taghashes_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
  return target;
}

size_t SiliconDocTaggerHashInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 tagHashes = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->taghashes_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->taghashes_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconDocTaggerHashInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconDocTaggerHashInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconDocTaggerHashInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
    MergeFrom(*source);
  }
}

void SiliconDocTaggerHashInfo::MergeFrom(const SiliconDocTaggerHashInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  taghashes_.MergeFrom(from.taghashes_);
}

void SiliconDocTaggerHashInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconDocTaggerHashInfo::CopyFrom(const SiliconDocTaggerHashInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconDocTaggerHashInfo::IsInitialized() const {
  return true;
}

void SiliconDocTaggerHashInfo::Swap(SiliconDocTaggerHashInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconDocTaggerHashInfo::InternalSwap(SiliconDocTaggerHashInfo* other) {
  using std::swap;
  taghashes_.InternalSwap(&other->taghashes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconDocTaggerHashInfo::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconDocTaggerHashInfo

// repeated int64 tagHashes = 1;
int SiliconDocTaggerHashInfo::taghashes_size() const {
  return taghashes_.size();
}
void SiliconDocTaggerHashInfo::clear_taghashes() {
  taghashes_.Clear();
}
::google::protobuf::int64 SiliconDocTaggerHashInfo::taghashes(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo.tagHashes)
  return taghashes_.Get(index);
}
void SiliconDocTaggerHashInfo::set_taghashes(int index, ::google::protobuf::int64 value) {
  taghashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo.tagHashes)
}
void SiliconDocTaggerHashInfo::add_taghashes(::google::protobuf::int64 value) {
  taghashes_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo.tagHashes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SiliconDocTaggerHashInfo::taghashes() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo.tagHashes)
  return taghashes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SiliconDocTaggerHashInfo::mutable_taghashes() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo.tagHashes)
  return &taghashes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScrollToClickInfo::kTargetUrlFieldNumber;
const int ScrollToClickInfo::kTargetUrlTitleFieldNumber;
const int ScrollToClickInfo::kTargetUrlDescriptionFieldNumber;
const int ScrollToClickInfo::kImgAerospikeUrlFieldNumber;
const int ScrollToClickInfo::kMobileImgAerospikeUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScrollToClickInfo::ScrollToClickInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ScrollToClickInfo)
}
ScrollToClickInfo::ScrollToClickInfo(const ScrollToClickInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_url()) {
    target_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_url_);
  }
  target_url_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_url_title()) {
    target_url_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_url_title_);
  }
  target_url_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_url_description()) {
    target_url_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_url_description_);
  }
  img_aerospike_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_img_aerospike_url()) {
    img_aerospike_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_aerospike_url_);
  }
  mobile_img_aerospike_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mobile_img_aerospike_url()) {
    mobile_img_aerospike_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_img_aerospike_url_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ScrollToClickInfo)
}

void ScrollToClickInfo::SharedCtor() {
  _cached_size_ = 0;
  target_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_url_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_url_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_aerospike_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_img_aerospike_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ScrollToClickInfo::~ScrollToClickInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ScrollToClickInfo)
  SharedDtor();
}

void ScrollToClickInfo::SharedDtor() {
  target_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_url_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_url_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_aerospike_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_img_aerospike_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ScrollToClickInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScrollToClickInfo::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScrollToClickInfo& ScrollToClickInfo::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScrollToClickInfo* ScrollToClickInfo::New(::google::protobuf::Arena* arena) const {
  ScrollToClickInfo* n = new ScrollToClickInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScrollToClickInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ScrollToClickInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!target_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*target_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!target_url_title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*target_url_title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!target_url_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*target_url_description_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!img_aerospike_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*img_aerospike_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!mobile_img_aerospike_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mobile_img_aerospike_url_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScrollToClickInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ScrollToClickInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string target_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_url().data(), static_cast<int>(this->target_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target_url_title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_url_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_url_title().data(), static_cast<int>(this->target_url_title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target_url_description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_url_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_url_description().data(), static_cast<int>(this->target_url_description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string img_aerospike_url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img_aerospike_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->img_aerospike_url().data(), static_cast<int>(this->img_aerospike_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mobile_img_aerospike_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_img_aerospike_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobile_img_aerospike_url().data(), static_cast<int>(this->mobile_img_aerospike_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ScrollToClickInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ScrollToClickInfo)
  return false;
#undef DO_
}

void ScrollToClickInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ScrollToClickInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string target_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_url().data(), static_cast<int>(this->target_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->target_url(), output);
  }

  // optional string target_url_title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_url_title().data(), static_cast<int>(this->target_url_title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->target_url_title(), output);
  }

  // optional string target_url_description = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_url_description().data(), static_cast<int>(this->target_url_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->target_url_description(), output);
  }

  // optional string img_aerospike_url = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_aerospike_url().data(), static_cast<int>(this->img_aerospike_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->img_aerospike_url(), output);
  }

  // optional string mobile_img_aerospike_url = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile_img_aerospike_url().data(), static_cast<int>(this->mobile_img_aerospike_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mobile_img_aerospike_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ScrollToClickInfo)
}

::google::protobuf::uint8* ScrollToClickInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ScrollToClickInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string target_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_url().data(), static_cast<int>(this->target_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target_url(), target);
  }

  // optional string target_url_title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_url_title().data(), static_cast<int>(this->target_url_title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target_url_title(), target);
  }

  // optional string target_url_description = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_url_description().data(), static_cast<int>(this->target_url_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target_url_description(), target);
  }

  // optional string img_aerospike_url = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_aerospike_url().data(), static_cast<int>(this->img_aerospike_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->img_aerospike_url(), target);
  }

  // optional string mobile_img_aerospike_url = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile_img_aerospike_url().data(), static_cast<int>(this->mobile_img_aerospike_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mobile_img_aerospike_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ScrollToClickInfo)
  return target;
}

size_t ScrollToClickInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ScrollToClickInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string target_url = 1;
    if (has_target_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_url());
    }

    // optional string target_url_title = 2;
    if (has_target_url_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_url_title());
    }

    // optional string target_url_description = 3;
    if (has_target_url_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_url_description());
    }

    // optional string img_aerospike_url = 4;
    if (has_img_aerospike_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->img_aerospike_url());
    }

    // optional string mobile_img_aerospike_url = 5;
    if (has_mobile_img_aerospike_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_img_aerospike_url());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScrollToClickInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ScrollToClickInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ScrollToClickInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScrollToClickInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ScrollToClickInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ScrollToClickInfo)
    MergeFrom(*source);
  }
}

void ScrollToClickInfo::MergeFrom(const ScrollToClickInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ScrollToClickInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_target_url();
      target_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_target_url_title();
      target_url_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_url_title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_target_url_description();
      target_url_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_url_description_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_img_aerospike_url();
      img_aerospike_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_aerospike_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_mobile_img_aerospike_url();
      mobile_img_aerospike_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_img_aerospike_url_);
    }
  }
}

void ScrollToClickInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ScrollToClickInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScrollToClickInfo::CopyFrom(const ScrollToClickInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ScrollToClickInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScrollToClickInfo::IsInitialized() const {
  return true;
}

void ScrollToClickInfo::Swap(ScrollToClickInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScrollToClickInfo::InternalSwap(ScrollToClickInfo* other) {
  using std::swap;
  target_url_.Swap(&other->target_url_);
  target_url_title_.Swap(&other->target_url_title_);
  target_url_description_.Swap(&other->target_url_description_);
  img_aerospike_url_.Swap(&other->img_aerospike_url_);
  mobile_img_aerospike_url_.Swap(&other->mobile_img_aerospike_url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScrollToClickInfo::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScrollToClickInfo

// optional string target_url = 1;
bool ScrollToClickInfo::has_target_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScrollToClickInfo::set_has_target_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ScrollToClickInfo::clear_has_target_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScrollToClickInfo::clear_target_url() {
  target_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_url();
}
const ::std::string& ScrollToClickInfo::target_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url)
  return target_url_.GetNoArena();
}
void ScrollToClickInfo::set_target_url(const ::std::string& value) {
  set_has_target_url();
  target_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url)
}
#if LANG_CXX11
void ScrollToClickInfo::set_target_url(::std::string&& value) {
  set_has_target_url();
  target_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url)
}
#endif
void ScrollToClickInfo::set_target_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target_url();
  target_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url)
}
void ScrollToClickInfo::set_target_url(const char* value, size_t size) {
  set_has_target_url();
  target_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url)
}
::std::string* ScrollToClickInfo::mutable_target_url() {
  set_has_target_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url)
  return target_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScrollToClickInfo::release_target_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url)
  clear_has_target_url();
  return target_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScrollToClickInfo::set_allocated_target_url(::std::string* target_url) {
  if (target_url != NULL) {
    set_has_target_url();
  } else {
    clear_has_target_url();
  }
  target_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url)
}

// optional string target_url_title = 2;
bool ScrollToClickInfo::has_target_url_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScrollToClickInfo::set_has_target_url_title() {
  _has_bits_[0] |= 0x00000002u;
}
void ScrollToClickInfo::clear_has_target_url_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScrollToClickInfo::clear_target_url_title() {
  target_url_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_url_title();
}
const ::std::string& ScrollToClickInfo::target_url_title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title)
  return target_url_title_.GetNoArena();
}
void ScrollToClickInfo::set_target_url_title(const ::std::string& value) {
  set_has_target_url_title();
  target_url_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title)
}
#if LANG_CXX11
void ScrollToClickInfo::set_target_url_title(::std::string&& value) {
  set_has_target_url_title();
  target_url_title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title)
}
#endif
void ScrollToClickInfo::set_target_url_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target_url_title();
  target_url_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title)
}
void ScrollToClickInfo::set_target_url_title(const char* value, size_t size) {
  set_has_target_url_title();
  target_url_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title)
}
::std::string* ScrollToClickInfo::mutable_target_url_title() {
  set_has_target_url_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title)
  return target_url_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScrollToClickInfo::release_target_url_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title)
  clear_has_target_url_title();
  return target_url_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScrollToClickInfo::set_allocated_target_url_title(::std::string* target_url_title) {
  if (target_url_title != NULL) {
    set_has_target_url_title();
  } else {
    clear_has_target_url_title();
  }
  target_url_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_url_title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title)
}

// optional string target_url_description = 3;
bool ScrollToClickInfo::has_target_url_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScrollToClickInfo::set_has_target_url_description() {
  _has_bits_[0] |= 0x00000004u;
}
void ScrollToClickInfo::clear_has_target_url_description() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScrollToClickInfo::clear_target_url_description() {
  target_url_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_url_description();
}
const ::std::string& ScrollToClickInfo::target_url_description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description)
  return target_url_description_.GetNoArena();
}
void ScrollToClickInfo::set_target_url_description(const ::std::string& value) {
  set_has_target_url_description();
  target_url_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description)
}
#if LANG_CXX11
void ScrollToClickInfo::set_target_url_description(::std::string&& value) {
  set_has_target_url_description();
  target_url_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description)
}
#endif
void ScrollToClickInfo::set_target_url_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target_url_description();
  target_url_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description)
}
void ScrollToClickInfo::set_target_url_description(const char* value, size_t size) {
  set_has_target_url_description();
  target_url_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description)
}
::std::string* ScrollToClickInfo::mutable_target_url_description() {
  set_has_target_url_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description)
  return target_url_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScrollToClickInfo::release_target_url_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description)
  clear_has_target_url_description();
  return target_url_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScrollToClickInfo::set_allocated_target_url_description(::std::string* target_url_description) {
  if (target_url_description != NULL) {
    set_has_target_url_description();
  } else {
    clear_has_target_url_description();
  }
  target_url_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_url_description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description)
}

// optional string img_aerospike_url = 4;
bool ScrollToClickInfo::has_img_aerospike_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScrollToClickInfo::set_has_img_aerospike_url() {
  _has_bits_[0] |= 0x00000008u;
}
void ScrollToClickInfo::clear_has_img_aerospike_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScrollToClickInfo::clear_img_aerospike_url() {
  img_aerospike_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_img_aerospike_url();
}
const ::std::string& ScrollToClickInfo::img_aerospike_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url)
  return img_aerospike_url_.GetNoArena();
}
void ScrollToClickInfo::set_img_aerospike_url(const ::std::string& value) {
  set_has_img_aerospike_url();
  img_aerospike_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url)
}
#if LANG_CXX11
void ScrollToClickInfo::set_img_aerospike_url(::std::string&& value) {
  set_has_img_aerospike_url();
  img_aerospike_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url)
}
#endif
void ScrollToClickInfo::set_img_aerospike_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_img_aerospike_url();
  img_aerospike_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url)
}
void ScrollToClickInfo::set_img_aerospike_url(const char* value, size_t size) {
  set_has_img_aerospike_url();
  img_aerospike_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url)
}
::std::string* ScrollToClickInfo::mutable_img_aerospike_url() {
  set_has_img_aerospike_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url)
  return img_aerospike_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScrollToClickInfo::release_img_aerospike_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url)
  clear_has_img_aerospike_url();
  return img_aerospike_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScrollToClickInfo::set_allocated_img_aerospike_url(::std::string* img_aerospike_url) {
  if (img_aerospike_url != NULL) {
    set_has_img_aerospike_url();
  } else {
    clear_has_img_aerospike_url();
  }
  img_aerospike_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img_aerospike_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url)
}

// optional string mobile_img_aerospike_url = 5;
bool ScrollToClickInfo::has_mobile_img_aerospike_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ScrollToClickInfo::set_has_mobile_img_aerospike_url() {
  _has_bits_[0] |= 0x00000010u;
}
void ScrollToClickInfo::clear_has_mobile_img_aerospike_url() {
  _has_bits_[0] &= ~0x00000010u;
}
void ScrollToClickInfo::clear_mobile_img_aerospike_url() {
  mobile_img_aerospike_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobile_img_aerospike_url();
}
const ::std::string& ScrollToClickInfo::mobile_img_aerospike_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url)
  return mobile_img_aerospike_url_.GetNoArena();
}
void ScrollToClickInfo::set_mobile_img_aerospike_url(const ::std::string& value) {
  set_has_mobile_img_aerospike_url();
  mobile_img_aerospike_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url)
}
#if LANG_CXX11
void ScrollToClickInfo::set_mobile_img_aerospike_url(::std::string&& value) {
  set_has_mobile_img_aerospike_url();
  mobile_img_aerospike_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url)
}
#endif
void ScrollToClickInfo::set_mobile_img_aerospike_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobile_img_aerospike_url();
  mobile_img_aerospike_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url)
}
void ScrollToClickInfo::set_mobile_img_aerospike_url(const char* value, size_t size) {
  set_has_mobile_img_aerospike_url();
  mobile_img_aerospike_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url)
}
::std::string* ScrollToClickInfo::mutable_mobile_img_aerospike_url() {
  set_has_mobile_img_aerospike_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url)
  return mobile_img_aerospike_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScrollToClickInfo::release_mobile_img_aerospike_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url)
  clear_has_mobile_img_aerospike_url();
  return mobile_img_aerospike_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScrollToClickInfo::set_allocated_mobile_img_aerospike_url(::std::string* mobile_img_aerospike_url) {
  if (mobile_img_aerospike_url != NULL) {
    set_has_mobile_img_aerospike_url();
  } else {
    clear_has_mobile_img_aerospike_url();
  }
  mobile_img_aerospike_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile_img_aerospike_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserPixels::kReadupFieldNumber;
const int UserPixels::kRedirectFieldNumber;
const int UserPixels::kShowFieldNumber;
const int UserPixels::kClickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserPixels::UserPixels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.UserPixels)
}
UserPixels::UserPixels(const UserPixels& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      readup_(from.readup_),
      redirect_(from.redirect_),
      show_(from.show_),
      click_(from.click_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.UserPixels)
}

void UserPixels::SharedCtor() {
  _cached_size_ = 0;
}

UserPixels::~UserPixels() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.UserPixels)
  SharedDtor();
}

void UserPixels::SharedDtor() {
}

void UserPixels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPixels::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserPixels& UserPixels::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserPixels* UserPixels::New(::google::protobuf::Arena* arena) const {
  UserPixels* n = new UserPixels;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserPixels::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.UserPixels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  readup_.Clear();
  redirect_.Clear();
  show_.Clear();
  click_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserPixels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.UserPixels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string readup = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_readup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->readup(this->readup_size() - 1).data(),
            static_cast<int>(this->readup(this->readup_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UserPixels.readup");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string redirect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_redirect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect(this->redirect_size() - 1).data(),
            static_cast<int>(this->redirect(this->redirect_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UserPixels.redirect");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string show = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_show()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->show(this->show_size() - 1).data(),
            static_cast<int>(this->show(this->show_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UserPixels.show");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string click = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_click()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click(this->click_size() - 1).data(),
            static_cast<int>(this->click(this->click_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UserPixels.click");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.UserPixels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.UserPixels)
  return false;
#undef DO_
}

void UserPixels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.UserPixels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string readup = 1;
  for (int i = 0, n = this->readup_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readup(i).data(), static_cast<int>(this->readup(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UserPixels.readup");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->readup(i), output);
  }

  // repeated string redirect = 2;
  for (int i = 0, n = this->redirect_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect(i).data(), static_cast<int>(this->redirect(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UserPixels.redirect");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->redirect(i), output);
  }

  // repeated string show = 3;
  for (int i = 0, n = this->show_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->show(i).data(), static_cast<int>(this->show(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UserPixels.show");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->show(i), output);
  }

  // repeated string click = 4;
  for (int i = 0, n = this->click_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click(i).data(), static_cast<int>(this->click(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UserPixels.click");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->click(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.UserPixels)
}

::google::protobuf::uint8* UserPixels::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.UserPixels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string readup = 1;
  for (int i = 0, n = this->readup_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readup(i).data(), static_cast<int>(this->readup(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UserPixels.readup");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->readup(i), target);
  }

  // repeated string redirect = 2;
  for (int i = 0, n = this->redirect_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect(i).data(), static_cast<int>(this->redirect(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UserPixels.redirect");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->redirect(i), target);
  }

  // repeated string show = 3;
  for (int i = 0, n = this->show_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->show(i).data(), static_cast<int>(this->show(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UserPixels.show");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->show(i), target);
  }

  // repeated string click = 4;
  for (int i = 0, n = this->click_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click(i).data(), static_cast<int>(this->click(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UserPixels.click");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->click(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.UserPixels)
  return target;
}

size_t UserPixels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.UserPixels)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string readup = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->readup_size());
  for (int i = 0, n = this->readup_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->readup(i));
  }

  // repeated string redirect = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->redirect_size());
  for (int i = 0, n = this->redirect_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->redirect(i));
  }

  // repeated string show = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->show_size());
  for (int i = 0, n = this->show_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->show(i));
  }

  // repeated string click = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->click_size());
  for (int i = 0, n = this->click_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->click(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPixels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.UserPixels)
  GOOGLE_DCHECK_NE(&from, this);
  const UserPixels* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserPixels>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.UserPixels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.UserPixels)
    MergeFrom(*source);
  }
}

void UserPixels::MergeFrom(const UserPixels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.UserPixels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  readup_.MergeFrom(from.readup_);
  redirect_.MergeFrom(from.redirect_);
  show_.MergeFrom(from.show_);
  click_.MergeFrom(from.click_);
}

void UserPixels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.UserPixels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPixels::CopyFrom(const UserPixels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.UserPixels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPixels::IsInitialized() const {
  return true;
}

void UserPixels::Swap(UserPixels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserPixels::InternalSwap(UserPixels* other) {
  using std::swap;
  readup_.InternalSwap(&other->readup_);
  redirect_.InternalSwap(&other->redirect_);
  show_.InternalSwap(&other->show_);
  click_.InternalSwap(&other->click_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserPixels::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserPixels

// repeated string readup = 1;
int UserPixels::readup_size() const {
  return readup_.size();
}
void UserPixels::clear_readup() {
  readup_.Clear();
}
const ::std::string& UserPixels::readup(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UserPixels.readup)
  return readup_.Get(index);
}
::std::string* UserPixels::mutable_readup(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UserPixels.readup)
  return readup_.Mutable(index);
}
void UserPixels::set_readup(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UserPixels.readup)
  readup_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void UserPixels::set_readup(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UserPixels.readup)
  readup_.Mutable(index)->assign(std::move(value));
}
#endif
void UserPixels::set_readup(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  readup_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UserPixels.readup)
}
void UserPixels::set_readup(int index, const char* value, size_t size) {
  readup_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UserPixels.readup)
}
::std::string* UserPixels::add_readup() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.UserPixels.readup)
  return readup_.Add();
}
void UserPixels::add_readup(const ::std::string& value) {
  readup_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UserPixels.readup)
}
#if LANG_CXX11
void UserPixels::add_readup(::std::string&& value) {
  readup_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UserPixels.readup)
}
#endif
void UserPixels::add_readup(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  readup_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.UserPixels.readup)
}
void UserPixels::add_readup(const char* value, size_t size) {
  readup_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.UserPixels.readup)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserPixels::readup() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.UserPixels.readup)
  return readup_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
UserPixels::mutable_readup() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.UserPixels.readup)
  return &readup_;
}

// repeated string redirect = 2;
int UserPixels::redirect_size() const {
  return redirect_.size();
}
void UserPixels::clear_redirect() {
  redirect_.Clear();
}
const ::std::string& UserPixels::redirect(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UserPixels.redirect)
  return redirect_.Get(index);
}
::std::string* UserPixels::mutable_redirect(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UserPixels.redirect)
  return redirect_.Mutable(index);
}
void UserPixels::set_redirect(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UserPixels.redirect)
  redirect_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void UserPixels::set_redirect(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UserPixels.redirect)
  redirect_.Mutable(index)->assign(std::move(value));
}
#endif
void UserPixels::set_redirect(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirect_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UserPixels.redirect)
}
void UserPixels::set_redirect(int index, const char* value, size_t size) {
  redirect_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UserPixels.redirect)
}
::std::string* UserPixels::add_redirect() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.UserPixels.redirect)
  return redirect_.Add();
}
void UserPixels::add_redirect(const ::std::string& value) {
  redirect_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UserPixels.redirect)
}
#if LANG_CXX11
void UserPixels::add_redirect(::std::string&& value) {
  redirect_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UserPixels.redirect)
}
#endif
void UserPixels::add_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirect_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.UserPixels.redirect)
}
void UserPixels::add_redirect(const char* value, size_t size) {
  redirect_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.UserPixels.redirect)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserPixels::redirect() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.UserPixels.redirect)
  return redirect_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
UserPixels::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.UserPixels.redirect)
  return &redirect_;
}

// repeated string show = 3;
int UserPixels::show_size() const {
  return show_.size();
}
void UserPixels::clear_show() {
  show_.Clear();
}
const ::std::string& UserPixels::show(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UserPixels.show)
  return show_.Get(index);
}
::std::string* UserPixels::mutable_show(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UserPixels.show)
  return show_.Mutable(index);
}
void UserPixels::set_show(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UserPixels.show)
  show_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void UserPixels::set_show(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UserPixels.show)
  show_.Mutable(index)->assign(std::move(value));
}
#endif
void UserPixels::set_show(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  show_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UserPixels.show)
}
void UserPixels::set_show(int index, const char* value, size_t size) {
  show_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UserPixels.show)
}
::std::string* UserPixels::add_show() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.UserPixels.show)
  return show_.Add();
}
void UserPixels::add_show(const ::std::string& value) {
  show_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UserPixels.show)
}
#if LANG_CXX11
void UserPixels::add_show(::std::string&& value) {
  show_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UserPixels.show)
}
#endif
void UserPixels::add_show(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  show_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.UserPixels.show)
}
void UserPixels::add_show(const char* value, size_t size) {
  show_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.UserPixels.show)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserPixels::show() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.UserPixels.show)
  return show_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
UserPixels::mutable_show() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.UserPixels.show)
  return &show_;
}

// repeated string click = 4;
int UserPixels::click_size() const {
  return click_.size();
}
void UserPixels::clear_click() {
  click_.Clear();
}
const ::std::string& UserPixels::click(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UserPixels.click)
  return click_.Get(index);
}
::std::string* UserPixels::mutable_click(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UserPixels.click)
  return click_.Mutable(index);
}
void UserPixels::set_click(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UserPixels.click)
  click_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void UserPixels::set_click(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UserPixels.click)
  click_.Mutable(index)->assign(std::move(value));
}
#endif
void UserPixels::set_click(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  click_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UserPixels.click)
}
void UserPixels::set_click(int index, const char* value, size_t size) {
  click_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UserPixels.click)
}
::std::string* UserPixels::add_click() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.UserPixels.click)
  return click_.Add();
}
void UserPixels::add_click(const ::std::string& value) {
  click_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UserPixels.click)
}
#if LANG_CXX11
void UserPixels::add_click(::std::string&& value) {
  click_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UserPixels.click)
}
#endif
void UserPixels::add_click(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  click_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.UserPixels.click)
}
void UserPixels::add_click(const char* value, size_t size) {
  click_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.UserPixels.click)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserPixels::click() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.UserPixels.click)
  return click_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
UserPixels::mutable_click() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.UserPixels.click)
  return &click_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomAdminFields::kCustomTitleFieldNumber;
const int CustomAdminFields::kCustomMainImageFieldNumber;
const int CustomAdminFields::kVendorImageFieldNumber;
const int CustomAdminFields::kIsForRealmeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomAdminFields::CustomAdminFields()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.CustomAdminFields)
}
CustomAdminFields::CustomAdminFields(const CustomAdminFields& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_title()) {
    custom_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_title_);
  }
  if (from.has_custom_main_image()) {
    custom_main_image_ = new ::ru::mail::go::webbase::blobs::SiliconImage(*from.custom_main_image_);
  } else {
    custom_main_image_ = NULL;
  }
  if (from.has_vendor_image()) {
    vendor_image_ = new ::ru::mail::go::webbase::blobs::SiliconImage(*from.vendor_image_);
  } else {
    vendor_image_ = NULL;
  }
  is_for_realme_ = from.is_for_realme_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.CustomAdminFields)
}

void CustomAdminFields::SharedCtor() {
  _cached_size_ = 0;
  custom_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&custom_main_image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_for_realme_) -
      reinterpret_cast<char*>(&custom_main_image_)) + sizeof(is_for_realme_));
}

CustomAdminFields::~CustomAdminFields() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.CustomAdminFields)
  SharedDtor();
}

void CustomAdminFields::SharedDtor() {
  custom_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete custom_main_image_;
  if (this != internal_default_instance()) delete vendor_image_;
}

void CustomAdminFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomAdminFields::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomAdminFields& CustomAdminFields::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomAdminFields* CustomAdminFields::New(::google::protobuf::Arena* arena) const {
  CustomAdminFields* n = new CustomAdminFields;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomAdminFields::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.CustomAdminFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!custom_title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*custom_title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(custom_main_image_ != NULL);
      custom_main_image_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vendor_image_ != NULL);
      vendor_image_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
    }
  }
  is_for_realme_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CustomAdminFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.CustomAdminFields)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string custom_title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_title().data(), static_cast<int>(this->custom_title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.CustomAdminFields.custom_title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconImage custom_main_image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_main_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconImage vendor_image = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vendor_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_for_realme = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_for_realme();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_for_realme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.CustomAdminFields)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.CustomAdminFields)
  return false;
#undef DO_
}

void CustomAdminFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.CustomAdminFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string custom_title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_title().data(), static_cast<int>(this->custom_title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CustomAdminFields.custom_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->custom_title(), output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconImage custom_main_image = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->custom_main_image_, output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconImage vendor_image = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->vendor_image_, output);
  }

  // optional bool is_for_realme = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_for_realme(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.CustomAdminFields)
}

::google::protobuf::uint8* CustomAdminFields::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.CustomAdminFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string custom_title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_title().data(), static_cast<int>(this->custom_title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CustomAdminFields.custom_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->custom_title(), target);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconImage custom_main_image = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->custom_main_image_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconImage vendor_image = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->vendor_image_, deterministic, target);
  }

  // optional bool is_for_realme = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_for_realme(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.CustomAdminFields)
  return target;
}

size_t CustomAdminFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.CustomAdminFields)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string custom_title = 1;
    if (has_custom_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_title());
    }

    // optional .ru.mail.go.webbase.blobs.SiliconImage custom_main_image = 2;
    if (has_custom_main_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->custom_main_image_);
    }

    // optional .ru.mail.go.webbase.blobs.SiliconImage vendor_image = 3;
    if (has_vendor_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vendor_image_);
    }

    // optional bool is_for_realme = 4;
    if (has_is_for_realme()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomAdminFields::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.CustomAdminFields)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomAdminFields* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomAdminFields>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.CustomAdminFields)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.CustomAdminFields)
    MergeFrom(*source);
  }
}

void CustomAdminFields::MergeFrom(const CustomAdminFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.CustomAdminFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_custom_title();
      custom_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_title_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_custom_main_image()->::ru::mail::go::webbase::blobs::SiliconImage::MergeFrom(from.custom_main_image());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_vendor_image()->::ru::mail::go::webbase::blobs::SiliconImage::MergeFrom(from.vendor_image());
    }
    if (cached_has_bits & 0x00000008u) {
      is_for_realme_ = from.is_for_realme_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CustomAdminFields::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.CustomAdminFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomAdminFields::CopyFrom(const CustomAdminFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.CustomAdminFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomAdminFields::IsInitialized() const {
  if (has_custom_main_image()) {
    if (!this->custom_main_image_->IsInitialized()) return false;
  }
  if (has_vendor_image()) {
    if (!this->vendor_image_->IsInitialized()) return false;
  }
  return true;
}

void CustomAdminFields::Swap(CustomAdminFields* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomAdminFields::InternalSwap(CustomAdminFields* other) {
  using std::swap;
  custom_title_.Swap(&other->custom_title_);
  swap(custom_main_image_, other->custom_main_image_);
  swap(vendor_image_, other->vendor_image_);
  swap(is_for_realme_, other->is_for_realme_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomAdminFields::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomAdminFields

// optional string custom_title = 1;
bool CustomAdminFields::has_custom_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CustomAdminFields::set_has_custom_title() {
  _has_bits_[0] |= 0x00000001u;
}
void CustomAdminFields::clear_has_custom_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void CustomAdminFields::clear_custom_title() {
  custom_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_title();
}
const ::std::string& CustomAdminFields::custom_title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomAdminFields.custom_title)
  return custom_title_.GetNoArena();
}
void CustomAdminFields::set_custom_title(const ::std::string& value) {
  set_has_custom_title();
  custom_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CustomAdminFields.custom_title)
}
#if LANG_CXX11
void CustomAdminFields::set_custom_title(::std::string&& value) {
  set_has_custom_title();
  custom_title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CustomAdminFields.custom_title)
}
#endif
void CustomAdminFields::set_custom_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_custom_title();
  custom_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CustomAdminFields.custom_title)
}
void CustomAdminFields::set_custom_title(const char* value, size_t size) {
  set_has_custom_title();
  custom_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CustomAdminFields.custom_title)
}
::std::string* CustomAdminFields::mutable_custom_title() {
  set_has_custom_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomAdminFields.custom_title)
  return custom_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CustomAdminFields::release_custom_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CustomAdminFields.custom_title)
  clear_has_custom_title();
  return custom_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CustomAdminFields::set_allocated_custom_title(::std::string* custom_title) {
  if (custom_title != NULL) {
    set_has_custom_title();
  } else {
    clear_has_custom_title();
  }
  custom_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CustomAdminFields.custom_title)
}

// optional .ru.mail.go.webbase.blobs.SiliconImage custom_main_image = 2;
bool CustomAdminFields::has_custom_main_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CustomAdminFields::set_has_custom_main_image() {
  _has_bits_[0] |= 0x00000002u;
}
void CustomAdminFields::clear_has_custom_main_image() {
  _has_bits_[0] &= ~0x00000002u;
}
void CustomAdminFields::clear_custom_main_image() {
  if (custom_main_image_ != NULL) custom_main_image_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
  clear_has_custom_main_image();
}
const ::ru::mail::go::webbase::blobs::SiliconImage& CustomAdminFields::custom_main_image() const {
  const ::ru::mail::go::webbase::blobs::SiliconImage* p = custom_main_image_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomAdminFields.custom_main_image)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconImage*>(
      &::ru::mail::go::webbase::blobs::_SiliconImage_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconImage* CustomAdminFields::mutable_custom_main_image() {
  set_has_custom_main_image();
  if (custom_main_image_ == NULL) {
    custom_main_image_ = new ::ru::mail::go::webbase::blobs::SiliconImage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomAdminFields.custom_main_image)
  return custom_main_image_;
}
::ru::mail::go::webbase::blobs::SiliconImage* CustomAdminFields::release_custom_main_image() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CustomAdminFields.custom_main_image)
  clear_has_custom_main_image();
  ::ru::mail::go::webbase::blobs::SiliconImage* temp = custom_main_image_;
  custom_main_image_ = NULL;
  return temp;
}
void CustomAdminFields::set_allocated_custom_main_image(::ru::mail::go::webbase::blobs::SiliconImage* custom_main_image) {
  delete custom_main_image_;
  custom_main_image_ = custom_main_image;
  if (custom_main_image) {
    set_has_custom_main_image();
  } else {
    clear_has_custom_main_image();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CustomAdminFields.custom_main_image)
}

// optional .ru.mail.go.webbase.blobs.SiliconImage vendor_image = 3;
bool CustomAdminFields::has_vendor_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CustomAdminFields::set_has_vendor_image() {
  _has_bits_[0] |= 0x00000004u;
}
void CustomAdminFields::clear_has_vendor_image() {
  _has_bits_[0] &= ~0x00000004u;
}
void CustomAdminFields::clear_vendor_image() {
  if (vendor_image_ != NULL) vendor_image_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
  clear_has_vendor_image();
}
const ::ru::mail::go::webbase::blobs::SiliconImage& CustomAdminFields::vendor_image() const {
  const ::ru::mail::go::webbase::blobs::SiliconImage* p = vendor_image_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomAdminFields.vendor_image)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconImage*>(
      &::ru::mail::go::webbase::blobs::_SiliconImage_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconImage* CustomAdminFields::mutable_vendor_image() {
  set_has_vendor_image();
  if (vendor_image_ == NULL) {
    vendor_image_ = new ::ru::mail::go::webbase::blobs::SiliconImage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomAdminFields.vendor_image)
  return vendor_image_;
}
::ru::mail::go::webbase::blobs::SiliconImage* CustomAdminFields::release_vendor_image() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CustomAdminFields.vendor_image)
  clear_has_vendor_image();
  ::ru::mail::go::webbase::blobs::SiliconImage* temp = vendor_image_;
  vendor_image_ = NULL;
  return temp;
}
void CustomAdminFields::set_allocated_vendor_image(::ru::mail::go::webbase::blobs::SiliconImage* vendor_image) {
  delete vendor_image_;
  vendor_image_ = vendor_image;
  if (vendor_image) {
    set_has_vendor_image();
  } else {
    clear_has_vendor_image();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CustomAdminFields.vendor_image)
}

// optional bool is_for_realme = 4;
bool CustomAdminFields::has_is_for_realme() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CustomAdminFields::set_has_is_for_realme() {
  _has_bits_[0] |= 0x00000008u;
}
void CustomAdminFields::clear_has_is_for_realme() {
  _has_bits_[0] &= ~0x00000008u;
}
void CustomAdminFields::clear_is_for_realme() {
  is_for_realme_ = false;
  clear_has_is_for_realme();
}
bool CustomAdminFields::is_for_realme() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomAdminFields.is_for_realme)
  return is_for_realme_;
}
void CustomAdminFields::set_is_for_realme(bool value) {
  set_has_is_for_realme();
  is_for_realme_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CustomAdminFields.is_for_realme)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceParsingErrorList::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceParsingErrorList::SourceParsingErrorList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SourceParsingErrorList)
}
SourceParsingErrorList::SourceParsingErrorList(const SourceParsingErrorList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SourceParsingErrorList)
}

void SourceParsingErrorList::SharedCtor() {
  _cached_size_ = 0;
}

SourceParsingErrorList::~SourceParsingErrorList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SourceParsingErrorList)
  SharedDtor();
}

void SourceParsingErrorList::SharedDtor() {
}

void SourceParsingErrorList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceParsingErrorList::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceParsingErrorList& SourceParsingErrorList::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceParsingErrorList* SourceParsingErrorList::New(::google::protobuf::Arena* arena) const {
  SourceParsingErrorList* n = new SourceParsingErrorList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SourceParsingErrorList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SourceParsingErrorList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceParsingErrorList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SourceParsingErrorList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.SourceParsingError errors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::SourceParsingError_IsValid(value)) {
            add_errors(static_cast< ::ru::mail::go::webbase::blobs::SourceParsingError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::ru::mail::go::webbase::blobs::SourceParsingError_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_errors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SourceParsingErrorList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SourceParsingErrorList)
  return false;
#undef DO_
}

void SourceParsingErrorList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SourceParsingErrorList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.SourceParsingError errors = 1;
  for (int i = 0, n = this->errors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errors(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SourceParsingErrorList)
}

::google::protobuf::uint8* SourceParsingErrorList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SourceParsingErrorList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.SourceParsingError errors = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->errors_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SourceParsingErrorList)
  return target;
}

size_t SourceParsingErrorList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SourceParsingErrorList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.SourceParsingError errors = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->errors_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->errors(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceParsingErrorList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SourceParsingErrorList)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceParsingErrorList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceParsingErrorList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SourceParsingErrorList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SourceParsingErrorList)
    MergeFrom(*source);
  }
}

void SourceParsingErrorList::MergeFrom(const SourceParsingErrorList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SourceParsingErrorList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
}

void SourceParsingErrorList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SourceParsingErrorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceParsingErrorList::CopyFrom(const SourceParsingErrorList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SourceParsingErrorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceParsingErrorList::IsInitialized() const {
  return true;
}

void SourceParsingErrorList::Swap(SourceParsingErrorList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SourceParsingErrorList::InternalSwap(SourceParsingErrorList* other) {
  using std::swap;
  errors_.InternalSwap(&other->errors_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceParsingErrorList::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceParsingErrorList

// repeated .ru.mail.go.webbase.blobs.SourceParsingError errors = 1;
int SourceParsingErrorList::errors_size() const {
  return errors_.size();
}
void SourceParsingErrorList::clear_errors() {
  errors_.Clear();
}
::ru::mail::go::webbase::blobs::SourceParsingError SourceParsingErrorList::errors(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SourceParsingErrorList.errors)
  return static_cast< ::ru::mail::go::webbase::blobs::SourceParsingError >(errors_.Get(index));
}
void SourceParsingErrorList::set_errors(int index, ::ru::mail::go::webbase::blobs::SourceParsingError value) {
  assert(::ru::mail::go::webbase::blobs::SourceParsingError_IsValid(value));
  errors_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SourceParsingErrorList.errors)
}
void SourceParsingErrorList::add_errors(::ru::mail::go::webbase::blobs::SourceParsingError value) {
  assert(::ru::mail::go::webbase::blobs::SourceParsingError_IsValid(value));
  errors_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SourceParsingErrorList.errors)
}
const ::google::protobuf::RepeatedField<int>&
SourceParsingErrorList::errors() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SourceParsingErrorList.errors)
  return errors_;
}
::google::protobuf::RepeatedField<int>*
SourceParsingErrorList::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SourceParsingErrorList.errors)
  return &errors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PostParsingErrorList::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PostParsingErrorList::PostParsingErrorList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.PostParsingErrorList)
}
PostParsingErrorList::PostParsingErrorList(const PostParsingErrorList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.PostParsingErrorList)
}

void PostParsingErrorList::SharedCtor() {
  _cached_size_ = 0;
}

PostParsingErrorList::~PostParsingErrorList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.PostParsingErrorList)
  SharedDtor();
}

void PostParsingErrorList::SharedDtor() {
}

void PostParsingErrorList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostParsingErrorList::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PostParsingErrorList& PostParsingErrorList::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PostParsingErrorList* PostParsingErrorList::New(::google::protobuf::Arena* arena) const {
  PostParsingErrorList* n = new PostParsingErrorList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PostParsingErrorList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.PostParsingErrorList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PostParsingErrorList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.PostParsingErrorList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.PostParsingError errors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::PostParsingError_IsValid(value)) {
            add_errors(static_cast< ::ru::mail::go::webbase::blobs::PostParsingError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::ru::mail::go::webbase::blobs::PostParsingError_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_errors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.PostParsingErrorList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.PostParsingErrorList)
  return false;
#undef DO_
}

void PostParsingErrorList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.PostParsingErrorList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.PostParsingError errors = 1;
  for (int i = 0, n = this->errors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errors(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.PostParsingErrorList)
}

::google::protobuf::uint8* PostParsingErrorList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.PostParsingErrorList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.PostParsingError errors = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->errors_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.PostParsingErrorList)
  return target;
}

size_t PostParsingErrorList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.PostParsingErrorList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.PostParsingError errors = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->errors_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->errors(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostParsingErrorList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.PostParsingErrorList)
  GOOGLE_DCHECK_NE(&from, this);
  const PostParsingErrorList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PostParsingErrorList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.PostParsingErrorList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.PostParsingErrorList)
    MergeFrom(*source);
  }
}

void PostParsingErrorList::MergeFrom(const PostParsingErrorList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.PostParsingErrorList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
}

void PostParsingErrorList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.PostParsingErrorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostParsingErrorList::CopyFrom(const PostParsingErrorList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.PostParsingErrorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostParsingErrorList::IsInitialized() const {
  return true;
}

void PostParsingErrorList::Swap(PostParsingErrorList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PostParsingErrorList::InternalSwap(PostParsingErrorList* other) {
  using std::swap;
  errors_.InternalSwap(&other->errors_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PostParsingErrorList::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PostParsingErrorList

// repeated .ru.mail.go.webbase.blobs.PostParsingError errors = 1;
int PostParsingErrorList::errors_size() const {
  return errors_.size();
}
void PostParsingErrorList::clear_errors() {
  errors_.Clear();
}
::ru::mail::go::webbase::blobs::PostParsingError PostParsingErrorList::errors(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostParsingErrorList.errors)
  return static_cast< ::ru::mail::go::webbase::blobs::PostParsingError >(errors_.Get(index));
}
void PostParsingErrorList::set_errors(int index, ::ru::mail::go::webbase::blobs::PostParsingError value) {
  assert(::ru::mail::go::webbase::blobs::PostParsingError_IsValid(value));
  errors_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostParsingErrorList.errors)
}
void PostParsingErrorList::add_errors(::ru::mail::go::webbase::blobs::PostParsingError value) {
  assert(::ru::mail::go::webbase::blobs::PostParsingError_IsValid(value));
  errors_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostParsingErrorList.errors)
}
const ::google::protobuf::RepeatedField<int>&
PostParsingErrorList::errors() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostParsingErrorList.errors)
  return errors_;
}
::google::protobuf::RepeatedField<int>*
PostParsingErrorList::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostParsingErrorList.errors)
  return &errors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageProcessErrorList::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageProcessErrorList::ImageProcessErrorList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImageProcessErrorList)
}
ImageProcessErrorList::ImageProcessErrorList(const ImageProcessErrorList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImageProcessErrorList)
}

void ImageProcessErrorList::SharedCtor() {
  _cached_size_ = 0;
}

ImageProcessErrorList::~ImageProcessErrorList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImageProcessErrorList)
  SharedDtor();
}

void ImageProcessErrorList::SharedDtor() {
}

void ImageProcessErrorList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageProcessErrorList::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageProcessErrorList& ImageProcessErrorList::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageProcessErrorList* ImageProcessErrorList::New(::google::protobuf::Arena* arena) const {
  ImageProcessErrorList* n = new ImageProcessErrorList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageProcessErrorList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImageProcessErrorList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageProcessErrorList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImageProcessErrorList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.ImageProcessError errors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ImageProcessError_IsValid(value)) {
            add_errors(static_cast< ::ru::mail::go::webbase::blobs::ImageProcessError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::ru::mail::go::webbase::blobs::ImageProcessError_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_errors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImageProcessErrorList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImageProcessErrorList)
  return false;
#undef DO_
}

void ImageProcessErrorList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImageProcessErrorList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.ImageProcessError errors = 1;
  for (int i = 0, n = this->errors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errors(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImageProcessErrorList)
}

::google::protobuf::uint8* ImageProcessErrorList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImageProcessErrorList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.ImageProcessError errors = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->errors_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImageProcessErrorList)
  return target;
}

size_t ImageProcessErrorList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImageProcessErrorList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.ImageProcessError errors = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->errors_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->errors(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageProcessErrorList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImageProcessErrorList)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageProcessErrorList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageProcessErrorList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImageProcessErrorList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImageProcessErrorList)
    MergeFrom(*source);
  }
}

void ImageProcessErrorList::MergeFrom(const ImageProcessErrorList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImageProcessErrorList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
}

void ImageProcessErrorList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImageProcessErrorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageProcessErrorList::CopyFrom(const ImageProcessErrorList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImageProcessErrorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageProcessErrorList::IsInitialized() const {
  return true;
}

void ImageProcessErrorList::Swap(ImageProcessErrorList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageProcessErrorList::InternalSwap(ImageProcessErrorList* other) {
  using std::swap;
  errors_.InternalSwap(&other->errors_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageProcessErrorList::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageProcessErrorList

// repeated .ru.mail.go.webbase.blobs.ImageProcessError errors = 1;
int ImageProcessErrorList::errors_size() const {
  return errors_.size();
}
void ImageProcessErrorList::clear_errors() {
  errors_.Clear();
}
::ru::mail::go::webbase::blobs::ImageProcessError ImageProcessErrorList::errors(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProcessErrorList.errors)
  return static_cast< ::ru::mail::go::webbase::blobs::ImageProcessError >(errors_.Get(index));
}
void ImageProcessErrorList::set_errors(int index, ::ru::mail::go::webbase::blobs::ImageProcessError value) {
  assert(::ru::mail::go::webbase::blobs::ImageProcessError_IsValid(value));
  errors_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProcessErrorList.errors)
}
void ImageProcessErrorList::add_errors(::ru::mail::go::webbase::blobs::ImageProcessError value) {
  assert(::ru::mail::go::webbase::blobs::ImageProcessError_IsValid(value));
  errors_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ImageProcessErrorList.errors)
}
const ::google::protobuf::RepeatedField<int>&
ImageProcessErrorList::errors() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ImageProcessErrorList.errors)
  return errors_;
}
::google::protobuf::RepeatedField<int>*
ImageProcessErrorList::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ImageProcessErrorList.errors)
  return &errors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconeYoutubeVideoData::kVideoIDFieldNumber;
const int SiliconeYoutubeVideoData::kPlayerUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconeYoutubeVideoData::SiliconeYoutubeVideoData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
}
SiliconeYoutubeVideoData::SiliconeYoutubeVideoData(const SiliconeYoutubeVideoData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  videoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_videoid()) {
    videoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videoid_);
  }
  playerurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerurl()) {
    playerurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerurl_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
}

void SiliconeYoutubeVideoData::SharedCtor() {
  _cached_size_ = 0;
  videoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SiliconeYoutubeVideoData::~SiliconeYoutubeVideoData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
  SharedDtor();
}

void SiliconeYoutubeVideoData::SharedDtor() {
  videoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiliconeYoutubeVideoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconeYoutubeVideoData::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconeYoutubeVideoData& SiliconeYoutubeVideoData::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconeYoutubeVideoData* SiliconeYoutubeVideoData::New(::google::protobuf::Arena* arena) const {
  SiliconeYoutubeVideoData* n = new SiliconeYoutubeVideoData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconeYoutubeVideoData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!videoid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*videoid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!playerurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*playerurl_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconeYoutubeVideoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string videoID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->videoid().data(), static_cast<int>(this->videoid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string playerUrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerurl().data(), static_cast<int>(this->playerurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
  return false;
#undef DO_
}

void SiliconeYoutubeVideoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string videoID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videoid().data(), static_cast<int>(this->videoid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->videoid(), output);
  }

  // required string playerUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerurl().data(), static_cast<int>(this->playerurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playerurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
}

::google::protobuf::uint8* SiliconeYoutubeVideoData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string videoID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videoid().data(), static_cast<int>(this->videoid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->videoid(), target);
  }

  // required string playerUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerurl().data(), static_cast<int>(this->playerurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playerurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
  return target;
}

size_t SiliconeYoutubeVideoData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
  size_t total_size = 0;

  if (has_videoid()) {
    // required string videoID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->videoid());
  }

  if (has_playerurl()) {
    // required string playerUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerurl());
  }

  return total_size;
}
size_t SiliconeYoutubeVideoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string videoID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->videoid());

    // required string playerUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerurl());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconeYoutubeVideoData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconeYoutubeVideoData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconeYoutubeVideoData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
    MergeFrom(*source);
  }
}

void SiliconeYoutubeVideoData::MergeFrom(const SiliconeYoutubeVideoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_videoid();
      videoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videoid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_playerurl();
      playerurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerurl_);
    }
  }
}

void SiliconeYoutubeVideoData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconeYoutubeVideoData::CopyFrom(const SiliconeYoutubeVideoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconeYoutubeVideoData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SiliconeYoutubeVideoData::Swap(SiliconeYoutubeVideoData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconeYoutubeVideoData::InternalSwap(SiliconeYoutubeVideoData* other) {
  using std::swap;
  videoid_.Swap(&other->videoid_);
  playerurl_.Swap(&other->playerurl_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconeYoutubeVideoData::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconeYoutubeVideoData

// required string videoID = 1;
bool SiliconeYoutubeVideoData::has_videoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconeYoutubeVideoData::set_has_videoid() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconeYoutubeVideoData::clear_has_videoid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconeYoutubeVideoData::clear_videoid() {
  videoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_videoid();
}
const ::std::string& SiliconeYoutubeVideoData::videoid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID)
  return videoid_.GetNoArena();
}
void SiliconeYoutubeVideoData::set_videoid(const ::std::string& value) {
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID)
}
#if LANG_CXX11
void SiliconeYoutubeVideoData::set_videoid(::std::string&& value) {
  set_has_videoid();
  videoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID)
}
#endif
void SiliconeYoutubeVideoData::set_videoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID)
}
void SiliconeYoutubeVideoData::set_videoid(const char* value, size_t size) {
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID)
}
::std::string* SiliconeYoutubeVideoData::mutable_videoid() {
  set_has_videoid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID)
  return videoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeYoutubeVideoData::release_videoid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID)
  clear_has_videoid();
  return videoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeYoutubeVideoData::set_allocated_videoid(::std::string* videoid) {
  if (videoid != NULL) {
    set_has_videoid();
  } else {
    clear_has_videoid();
  }
  videoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videoid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID)
}

// required string playerUrl = 2;
bool SiliconeYoutubeVideoData::has_playerurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiliconeYoutubeVideoData::set_has_playerurl() {
  _has_bits_[0] |= 0x00000002u;
}
void SiliconeYoutubeVideoData::clear_has_playerurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiliconeYoutubeVideoData::clear_playerurl() {
  playerurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerurl();
}
const ::std::string& SiliconeYoutubeVideoData::playerurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl)
  return playerurl_.GetNoArena();
}
void SiliconeYoutubeVideoData::set_playerurl(const ::std::string& value) {
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl)
}
#if LANG_CXX11
void SiliconeYoutubeVideoData::set_playerurl(::std::string&& value) {
  set_has_playerurl();
  playerurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl)
}
#endif
void SiliconeYoutubeVideoData::set_playerurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl)
}
void SiliconeYoutubeVideoData::set_playerurl(const char* value, size_t size) {
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl)
}
::std::string* SiliconeYoutubeVideoData::mutable_playerurl() {
  set_has_playerurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl)
  return playerurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeYoutubeVideoData::release_playerurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl)
  clear_has_playerurl();
  return playerurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeYoutubeVideoData::set_allocated_playerurl(::std::string* playerurl) {
  if (playerurl != NULL) {
    set_has_playerurl();
  } else {
    clear_has_playerurl();
  }
  playerurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconeVideoYoutube::kPlayerUrlFieldNumber;
const int SiliconeVideoYoutube::kVideoIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconeVideoYoutube::SiliconeVideoYoutube()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
}
SiliconeVideoYoutube::SiliconeVideoYoutube(const SiliconeVideoYoutube& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerurl()) {
    playerurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerurl_);
  }
  videoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_videoid()) {
    videoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videoid_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
}

void SiliconeVideoYoutube::SharedCtor() {
  _cached_size_ = 0;
  playerurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SiliconeVideoYoutube::~SiliconeVideoYoutube() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
  SharedDtor();
}

void SiliconeVideoYoutube::SharedDtor() {
  playerurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiliconeVideoYoutube::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconeVideoYoutube::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconeVideoYoutube& SiliconeVideoYoutube::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconeVideoYoutube* SiliconeVideoYoutube::New(::google::protobuf::Arena* arena) const {
  SiliconeVideoYoutube* n = new SiliconeVideoYoutube;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconeVideoYoutube::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!playerurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*playerurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!videoid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*videoid_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconeVideoYoutube::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerUrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerurl().data(), static_cast<int>(this->playerurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string videoID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->videoid().data(), static_cast<int>(this->videoid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
  return false;
#undef DO_
}

void SiliconeVideoYoutube::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string playerUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerurl().data(), static_cast<int>(this->playerurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playerurl(), output);
  }

  // required string videoID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videoid().data(), static_cast<int>(this->videoid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->videoid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
}

::google::protobuf::uint8* SiliconeVideoYoutube::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string playerUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerurl().data(), static_cast<int>(this->playerurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerurl(), target);
  }

  // required string videoID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videoid().data(), static_cast<int>(this->videoid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->videoid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
  return target;
}

size_t SiliconeVideoYoutube::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
  size_t total_size = 0;

  if (has_playerurl()) {
    // required string playerUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerurl());
  }

  if (has_videoid()) {
    // required string videoID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->videoid());
  }

  return total_size;
}
size_t SiliconeVideoYoutube::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string playerUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerurl());

    // required string videoID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->videoid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconeVideoYoutube::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconeVideoYoutube* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconeVideoYoutube>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
    MergeFrom(*source);
  }
}

void SiliconeVideoYoutube::MergeFrom(const SiliconeVideoYoutube& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_playerurl();
      playerurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_videoid();
      videoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videoid_);
    }
  }
}

void SiliconeVideoYoutube::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconeVideoYoutube::CopyFrom(const SiliconeVideoYoutube& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconeVideoYoutube::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SiliconeVideoYoutube::Swap(SiliconeVideoYoutube* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconeVideoYoutube::InternalSwap(SiliconeVideoYoutube* other) {
  using std::swap;
  playerurl_.Swap(&other->playerurl_);
  videoid_.Swap(&other->videoid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconeVideoYoutube::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconeVideoYoutube

// required string playerUrl = 1;
bool SiliconeVideoYoutube::has_playerurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconeVideoYoutube::set_has_playerurl() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconeVideoYoutube::clear_has_playerurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconeVideoYoutube::clear_playerurl() {
  playerurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerurl();
}
const ::std::string& SiliconeVideoYoutube::playerurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl)
  return playerurl_.GetNoArena();
}
void SiliconeVideoYoutube::set_playerurl(const ::std::string& value) {
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl)
}
#if LANG_CXX11
void SiliconeVideoYoutube::set_playerurl(::std::string&& value) {
  set_has_playerurl();
  playerurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl)
}
#endif
void SiliconeVideoYoutube::set_playerurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl)
}
void SiliconeVideoYoutube::set_playerurl(const char* value, size_t size) {
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl)
}
::std::string* SiliconeVideoYoutube::mutable_playerurl() {
  set_has_playerurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl)
  return playerurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeVideoYoutube::release_playerurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl)
  clear_has_playerurl();
  return playerurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeVideoYoutube::set_allocated_playerurl(::std::string* playerurl) {
  if (playerurl != NULL) {
    set_has_playerurl();
  } else {
    clear_has_playerurl();
  }
  playerurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl)
}

// required string videoID = 2;
bool SiliconeVideoYoutube::has_videoid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiliconeVideoYoutube::set_has_videoid() {
  _has_bits_[0] |= 0x00000002u;
}
void SiliconeVideoYoutube::clear_has_videoid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiliconeVideoYoutube::clear_videoid() {
  videoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_videoid();
}
const ::std::string& SiliconeVideoYoutube::videoid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID)
  return videoid_.GetNoArena();
}
void SiliconeVideoYoutube::set_videoid(const ::std::string& value) {
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID)
}
#if LANG_CXX11
void SiliconeVideoYoutube::set_videoid(::std::string&& value) {
  set_has_videoid();
  videoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID)
}
#endif
void SiliconeVideoYoutube::set_videoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID)
}
void SiliconeVideoYoutube::set_videoid(const char* value, size_t size) {
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID)
}
::std::string* SiliconeVideoYoutube::mutable_videoid() {
  set_has_videoid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID)
  return videoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeVideoYoutube::release_videoid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID)
  clear_has_videoid();
  return videoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeVideoYoutube::set_allocated_videoid(::std::string* videoid) {
  if (videoid != NULL) {
    set_has_videoid();
  } else {
    clear_has_videoid();
  }
  videoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videoid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconeVideoVimeo::kPlayerUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconeVideoVimeo::SiliconeVideoVimeo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
}
SiliconeVideoVimeo::SiliconeVideoVimeo(const SiliconeVideoVimeo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerurl()) {
    playerurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerurl_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
}

void SiliconeVideoVimeo::SharedCtor() {
  _cached_size_ = 0;
  playerurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SiliconeVideoVimeo::~SiliconeVideoVimeo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
  SharedDtor();
}

void SiliconeVideoVimeo::SharedDtor() {
  playerurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiliconeVideoVimeo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconeVideoVimeo::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconeVideoVimeo& SiliconeVideoVimeo::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconeVideoVimeo* SiliconeVideoVimeo::New(::google::protobuf::Arena* arena) const {
  SiliconeVideoVimeo* n = new SiliconeVideoVimeo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconeVideoVimeo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_playerurl()) {
    GOOGLE_DCHECK(!playerurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*playerurl_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconeVideoVimeo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerUrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerurl().data(), static_cast<int>(this->playerurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
  return false;
#undef DO_
}

void SiliconeVideoVimeo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string playerUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerurl().data(), static_cast<int>(this->playerurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playerurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
}

::google::protobuf::uint8* SiliconeVideoVimeo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string playerUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerurl().data(), static_cast<int>(this->playerurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
  return target;
}

size_t SiliconeVideoVimeo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string playerUrl = 1;
  if (has_playerurl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerurl());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconeVideoVimeo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconeVideoVimeo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconeVideoVimeo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
    MergeFrom(*source);
  }
}

void SiliconeVideoVimeo::MergeFrom(const SiliconeVideoVimeo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerurl()) {
    set_has_playerurl();
    playerurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerurl_);
  }
}

void SiliconeVideoVimeo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconeVideoVimeo::CopyFrom(const SiliconeVideoVimeo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconeVideoVimeo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SiliconeVideoVimeo::Swap(SiliconeVideoVimeo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconeVideoVimeo::InternalSwap(SiliconeVideoVimeo* other) {
  using std::swap;
  playerurl_.Swap(&other->playerurl_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconeVideoVimeo::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconeVideoVimeo

// required string playerUrl = 1;
bool SiliconeVideoVimeo::has_playerurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconeVideoVimeo::set_has_playerurl() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconeVideoVimeo::clear_has_playerurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconeVideoVimeo::clear_playerurl() {
  playerurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerurl();
}
const ::std::string& SiliconeVideoVimeo::playerurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl)
  return playerurl_.GetNoArena();
}
void SiliconeVideoVimeo::set_playerurl(const ::std::string& value) {
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl)
}
#if LANG_CXX11
void SiliconeVideoVimeo::set_playerurl(::std::string&& value) {
  set_has_playerurl();
  playerurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl)
}
#endif
void SiliconeVideoVimeo::set_playerurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl)
}
void SiliconeVideoVimeo::set_playerurl(const char* value, size_t size) {
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl)
}
::std::string* SiliconeVideoVimeo::mutable_playerurl() {
  set_has_playerurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl)
  return playerurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeVideoVimeo::release_playerurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl)
  clear_has_playerurl();
  return playerurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeVideoVimeo::set_allocated_playerurl(::std::string* playerurl) {
  if (playerurl != NULL) {
    set_has_playerurl();
  } else {
    clear_has_playerurl();
  }
  playerurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconeVideo::kTypeFieldNumber;
const int SiliconeVideo::kVideoYoutubeFieldNumber;
const int SiliconeVideo::kVideoVimeoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconeVideo::SiliconeVideo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconeVideo)
}
SiliconeVideo::SiliconeVideo(const SiliconeVideo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_videoyoutube()) {
    videoyoutube_ = new ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube(*from.videoyoutube_);
  } else {
    videoyoutube_ = NULL;
  }
  if (from.has_videovimeo()) {
    videovimeo_ = new ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo(*from.videovimeo_);
  } else {
    videovimeo_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconeVideo)
}

void SiliconeVideo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&videoyoutube_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&videoyoutube_)) + sizeof(type_));
}

SiliconeVideo::~SiliconeVideo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconeVideo)
  SharedDtor();
}

void SiliconeVideo::SharedDtor() {
  if (this != internal_default_instance()) delete videoyoutube_;
  if (this != internal_default_instance()) delete videovimeo_;
}

void SiliconeVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconeVideo::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconeVideo& SiliconeVideo::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconeVideo* SiliconeVideo::New(::google::protobuf::Arena* arena) const {
  SiliconeVideo* n = new SiliconeVideo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconeVideo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconeVideo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(videoyoutube_ != NULL);
      videoyoutube_->::ru::mail::go::webbase::blobs::SiliconeVideoYoutube::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(videovimeo_ != NULL);
      videovimeo_->::ru::mail::go::webbase::blobs::SiliconeVideoVimeo::Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconeVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconeVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.SiliconeVideoType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::SiliconeVideoType_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::blobs::SiliconeVideoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconeVideoYoutube videoYoutube = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videoyoutube()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconeVideoVimeo videoVimeo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videovimeo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconeVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconeVideo)
  return false;
#undef DO_
}

void SiliconeVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconeVideo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.SiliconeVideoType type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeVideoYoutube videoYoutube = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->videoyoutube_, output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeVideoVimeo videoVimeo = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->videovimeo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconeVideo)
}

::google::protobuf::uint8* SiliconeVideo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconeVideo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.SiliconeVideoType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeVideoYoutube videoYoutube = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->videoyoutube_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeVideoVimeo videoVimeo = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->videovimeo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconeVideo)
  return target;
}

size_t SiliconeVideo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconeVideo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.SiliconeVideoType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ru.mail.go.webbase.blobs.SiliconeVideoYoutube videoYoutube = 2;
    if (has_videoyoutube()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->videoyoutube_);
    }

    // optional .ru.mail.go.webbase.blobs.SiliconeVideoVimeo videoVimeo = 3;
    if (has_videovimeo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->videovimeo_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconeVideo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconeVideo)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconeVideo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconeVideo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconeVideo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconeVideo)
    MergeFrom(*source);
  }
}

void SiliconeVideo::MergeFrom(const SiliconeVideo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconeVideo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_videoyoutube()->::ru::mail::go::webbase::blobs::SiliconeVideoYoutube::MergeFrom(from.videoyoutube());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_videovimeo()->::ru::mail::go::webbase::blobs::SiliconeVideoVimeo::MergeFrom(from.videovimeo());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiliconeVideo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconeVideo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconeVideo::CopyFrom(const SiliconeVideo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconeVideo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconeVideo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_videoyoutube()) {
    if (!this->videoyoutube_->IsInitialized()) return false;
  }
  if (has_videovimeo()) {
    if (!this->videovimeo_->IsInitialized()) return false;
  }
  return true;
}

void SiliconeVideo::Swap(SiliconeVideo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconeVideo::InternalSwap(SiliconeVideo* other) {
  using std::swap;
  swap(videoyoutube_, other->videoyoutube_);
  swap(videovimeo_, other->videovimeo_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconeVideo::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconeVideo

// required .ru.mail.go.webbase.blobs.SiliconeVideoType type = 1;
bool SiliconeVideo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SiliconeVideo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void SiliconeVideo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void SiliconeVideo::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::blobs::SiliconeVideoType SiliconeVideo::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeVideo.type)
  return static_cast< ::ru::mail::go::webbase::blobs::SiliconeVideoType >(type_);
}
void SiliconeVideo::set_type(::ru::mail::go::webbase::blobs::SiliconeVideoType value) {
  assert(::ru::mail::go::webbase::blobs::SiliconeVideoType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeVideo.type)
}

// optional .ru.mail.go.webbase.blobs.SiliconeVideoYoutube videoYoutube = 2;
bool SiliconeVideo::has_videoyoutube() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconeVideo::set_has_videoyoutube() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconeVideo::clear_has_videoyoutube() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconeVideo::clear_videoyoutube() {
  if (videoyoutube_ != NULL) videoyoutube_->::ru::mail::go::webbase::blobs::SiliconeVideoYoutube::Clear();
  clear_has_videoyoutube();
}
const ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube& SiliconeVideo::videoyoutube() const {
  const ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube* p = videoyoutube_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeVideo.videoYoutube)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube*>(
      &::ru::mail::go::webbase::blobs::_SiliconeVideoYoutube_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconeVideoYoutube* SiliconeVideo::mutable_videoyoutube() {
  set_has_videoyoutube();
  if (videoyoutube_ == NULL) {
    videoyoutube_ = new ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeVideo.videoYoutube)
  return videoyoutube_;
}
::ru::mail::go::webbase::blobs::SiliconeVideoYoutube* SiliconeVideo::release_videoyoutube() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeVideo.videoYoutube)
  clear_has_videoyoutube();
  ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube* temp = videoyoutube_;
  videoyoutube_ = NULL;
  return temp;
}
void SiliconeVideo::set_allocated_videoyoutube(::ru::mail::go::webbase::blobs::SiliconeVideoYoutube* videoyoutube) {
  delete videoyoutube_;
  videoyoutube_ = videoyoutube;
  if (videoyoutube) {
    set_has_videoyoutube();
  } else {
    clear_has_videoyoutube();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeVideo.videoYoutube)
}

// optional .ru.mail.go.webbase.blobs.SiliconeVideoVimeo videoVimeo = 3;
bool SiliconeVideo::has_videovimeo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiliconeVideo::set_has_videovimeo() {
  _has_bits_[0] |= 0x00000002u;
}
void SiliconeVideo::clear_has_videovimeo() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiliconeVideo::clear_videovimeo() {
  if (videovimeo_ != NULL) videovimeo_->::ru::mail::go::webbase::blobs::SiliconeVideoVimeo::Clear();
  clear_has_videovimeo();
}
const ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo& SiliconeVideo::videovimeo() const {
  const ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo* p = videovimeo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeVideo.videoVimeo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo*>(
      &::ru::mail::go::webbase::blobs::_SiliconeVideoVimeo_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconeVideoVimeo* SiliconeVideo::mutable_videovimeo() {
  set_has_videovimeo();
  if (videovimeo_ == NULL) {
    videovimeo_ = new ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeVideo.videoVimeo)
  return videovimeo_;
}
::ru::mail::go::webbase::blobs::SiliconeVideoVimeo* SiliconeVideo::release_videovimeo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeVideo.videoVimeo)
  clear_has_videovimeo();
  ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo* temp = videovimeo_;
  videovimeo_ = NULL;
  return temp;
}
void SiliconeVideo::set_allocated_videovimeo(::ru::mail::go::webbase::blobs::SiliconeVideoVimeo* videovimeo) {
  delete videovimeo_;
  videovimeo_ = videovimeo;
  if (videovimeo) {
    set_has_videovimeo();
  } else {
    clear_has_videovimeo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeVideo.videoVimeo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconeVideoData::kYoutubeDataFieldNumber;
const int SiliconeVideoData::kVideosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconeVideoData::SiliconeVideoData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconeVideoData)
}
SiliconeVideoData::SiliconeVideoData(const SiliconeVideoData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      videos_(from.videos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_youtubedata()) {
    youtubedata_ = new ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData(*from.youtubedata_);
  } else {
    youtubedata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconeVideoData)
}

void SiliconeVideoData::SharedCtor() {
  _cached_size_ = 0;
  youtubedata_ = NULL;
}

SiliconeVideoData::~SiliconeVideoData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconeVideoData)
  SharedDtor();
}

void SiliconeVideoData::SharedDtor() {
  if (this != internal_default_instance()) delete youtubedata_;
}

void SiliconeVideoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconeVideoData::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconeVideoData& SiliconeVideoData::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconeVideoData* SiliconeVideoData::New(::google::protobuf::Arena* arena) const {
  SiliconeVideoData* n = new SiliconeVideoData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconeVideoData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconeVideoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  videos_.Clear();
  if (has_youtubedata()) {
    GOOGLE_DCHECK(youtubedata_ != NULL);
    youtubedata_->::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconeVideoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconeVideoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData youtubeData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_youtubedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.SiliconeVideo videos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_videos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconeVideoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconeVideoData)
  return false;
#undef DO_
}

void SiliconeVideoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconeVideoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData youtubeData = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->youtubedata_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.SiliconeVideo videos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->videos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->videos(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconeVideoData)
}

::google::protobuf::uint8* SiliconeVideoData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconeVideoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData youtubeData = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->youtubedata_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.SiliconeVideo videos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->videos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->videos(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconeVideoData)
  return target;
}

size_t SiliconeVideoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconeVideoData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.SiliconeVideo videos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->videos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->videos(static_cast<int>(i)));
    }
  }

  // optional .ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData youtubeData = 1;
  if (has_youtubedata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->youtubedata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconeVideoData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconeVideoData)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconeVideoData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconeVideoData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconeVideoData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconeVideoData)
    MergeFrom(*source);
  }
}

void SiliconeVideoData::MergeFrom(const SiliconeVideoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconeVideoData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  videos_.MergeFrom(from.videos_);
  if (from.has_youtubedata()) {
    mutable_youtubedata()->::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData::MergeFrom(from.youtubedata());
  }
}

void SiliconeVideoData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconeVideoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconeVideoData::CopyFrom(const SiliconeVideoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconeVideoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconeVideoData::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->videos())) return false;
  if (has_youtubedata()) {
    if (!this->youtubedata_->IsInitialized()) return false;
  }
  return true;
}

void SiliconeVideoData::Swap(SiliconeVideoData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconeVideoData::InternalSwap(SiliconeVideoData* other) {
  using std::swap;
  videos_.InternalSwap(&other->videos_);
  swap(youtubedata_, other->youtubedata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconeVideoData::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconeVideoData

// optional .ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData youtubeData = 1;
bool SiliconeVideoData::has_youtubedata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconeVideoData::set_has_youtubedata() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconeVideoData::clear_has_youtubedata() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconeVideoData::clear_youtubedata() {
  if (youtubedata_ != NULL) youtubedata_->::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData::Clear();
  clear_has_youtubedata();
}
const ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData& SiliconeVideoData::youtubedata() const {
  const ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData* p = youtubedata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeVideoData.youtubeData)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData*>(
      &::ru::mail::go::webbase::blobs::_SiliconeYoutubeVideoData_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData* SiliconeVideoData::mutable_youtubedata() {
  set_has_youtubedata();
  if (youtubedata_ == NULL) {
    youtubedata_ = new ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeVideoData.youtubeData)
  return youtubedata_;
}
::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData* SiliconeVideoData::release_youtubedata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeVideoData.youtubeData)
  clear_has_youtubedata();
  ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData* temp = youtubedata_;
  youtubedata_ = NULL;
  return temp;
}
void SiliconeVideoData::set_allocated_youtubedata(::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData* youtubedata) {
  delete youtubedata_;
  youtubedata_ = youtubedata;
  if (youtubedata) {
    set_has_youtubedata();
  } else {
    clear_has_youtubedata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeVideoData.youtubeData)
}

// repeated .ru.mail.go.webbase.blobs.SiliconeVideo videos = 2;
int SiliconeVideoData::videos_size() const {
  return videos_.size();
}
void SiliconeVideoData::clear_videos() {
  videos_.Clear();
}
const ::ru::mail::go::webbase::blobs::SiliconeVideo& SiliconeVideoData::videos(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeVideoData.videos)
  return videos_.Get(index);
}
::ru::mail::go::webbase::blobs::SiliconeVideo* SiliconeVideoData::mutable_videos(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeVideoData.videos)
  return videos_.Mutable(index);
}
::ru::mail::go::webbase::blobs::SiliconeVideo* SiliconeVideoData::add_videos() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconeVideoData.videos)
  return videos_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeVideo >*
SiliconeVideoData::mutable_videos() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconeVideoData.videos)
  return &videos_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeVideo >&
SiliconeVideoData::videos() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconeVideoData.videos)
  return videos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PostsBySourcesCmd::kSourceIdsFieldNumber;
const int PostsBySourcesCmd::kReplyTopicsFieldNumber;
const int PostsBySourcesCmd::kFetchTimeIntervalsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PostsBySourcesCmd::PostsBySourcesCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
}
PostsBySourcesCmd::PostsBySourcesCmd(const PostsBySourcesCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sourceids_(from.sourceids_),
      replytopics_(from.replytopics_),
      fetchtimeintervals_(from.fetchtimeintervals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
}

void PostsBySourcesCmd::SharedCtor() {
  _cached_size_ = 0;
}

PostsBySourcesCmd::~PostsBySourcesCmd() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
  SharedDtor();
}

void PostsBySourcesCmd::SharedDtor() {
}

void PostsBySourcesCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostsBySourcesCmd::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PostsBySourcesCmd& PostsBySourcesCmd::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PostsBySourcesCmd* PostsBySourcesCmd::New(::google::protobuf::Arena* arena) const {
  PostsBySourcesCmd* n = new PostsBySourcesCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PostsBySourcesCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourceids_.Clear();
  replytopics_.Clear();
  fetchtimeintervals_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PostsBySourcesCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.SiliconSourceId sourceIds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sourceids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string replyTopics = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_replytopics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->replytopics(this->replytopics_size() - 1).data(),
            static_cast<int>(this->replytopics(this->replytopics_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.TimeInterval fetchTimeIntervals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fetchtimeintervals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
  return false;
#undef DO_
}

void PostsBySourcesCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.SiliconSourceId sourceIds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sourceids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sourceids(static_cast<int>(i)), output);
  }

  // repeated string replyTopics = 2;
  for (int i = 0, n = this->replytopics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replytopics(i).data(), static_cast<int>(this->replytopics(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->replytopics(i), output);
  }

  // repeated .ru.mail.go.webbase.blobs.TimeInterval fetchTimeIntervals = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fetchtimeintervals_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fetchtimeintervals(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
}

::google::protobuf::uint8* PostsBySourcesCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.SiliconSourceId sourceIds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sourceids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sourceids(static_cast<int>(i)), deterministic, target);
  }

  // repeated string replyTopics = 2;
  for (int i = 0, n = this->replytopics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replytopics(i).data(), static_cast<int>(this->replytopics(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->replytopics(i), target);
  }

  // repeated .ru.mail.go.webbase.blobs.TimeInterval fetchTimeIntervals = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fetchtimeintervals_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->fetchtimeintervals(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
  return target;
}

size_t PostsBySourcesCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.SiliconSourceId sourceIds = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sourceids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sourceids(static_cast<int>(i)));
    }
  }

  // repeated string replyTopics = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->replytopics_size());
  for (int i = 0, n = this->replytopics_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->replytopics(i));
  }

  // repeated .ru.mail.go.webbase.blobs.TimeInterval fetchTimeIntervals = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->fetchtimeintervals_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetchtimeintervals(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostsBySourcesCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const PostsBySourcesCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PostsBySourcesCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
    MergeFrom(*source);
  }
}

void PostsBySourcesCmd::MergeFrom(const PostsBySourcesCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sourceids_.MergeFrom(from.sourceids_);
  replytopics_.MergeFrom(from.replytopics_);
  fetchtimeintervals_.MergeFrom(from.fetchtimeintervals_);
}

void PostsBySourcesCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostsBySourcesCmd::CopyFrom(const PostsBySourcesCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostsBySourcesCmd::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->sourceids())) return false;
  return true;
}

void PostsBySourcesCmd::Swap(PostsBySourcesCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PostsBySourcesCmd::InternalSwap(PostsBySourcesCmd* other) {
  using std::swap;
  sourceids_.InternalSwap(&other->sourceids_);
  replytopics_.InternalSwap(&other->replytopics_);
  fetchtimeintervals_.InternalSwap(&other->fetchtimeintervals_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PostsBySourcesCmd::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PostsBySourcesCmd

// repeated .ru.mail.go.webbase.blobs.SiliconSourceId sourceIds = 1;
int PostsBySourcesCmd::sourceids_size() const {
  return sourceids_.size();
}
void PostsBySourcesCmd::clear_sourceids() {
  sourceids_.Clear();
}
const ::ru::mail::go::webbase::blobs::SiliconSourceId& PostsBySourcesCmd::sourceids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostsBySourcesCmd.sourceIds)
  return sourceids_.Get(index);
}
::ru::mail::go::webbase::blobs::SiliconSourceId* PostsBySourcesCmd::mutable_sourceids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostsBySourcesCmd.sourceIds)
  return sourceids_.Mutable(index);
}
::ru::mail::go::webbase::blobs::SiliconSourceId* PostsBySourcesCmd::add_sourceids() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostsBySourcesCmd.sourceIds)
  return sourceids_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconSourceId >*
PostsBySourcesCmd::mutable_sourceids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostsBySourcesCmd.sourceIds)
  return &sourceids_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconSourceId >&
PostsBySourcesCmd::sourceids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostsBySourcesCmd.sourceIds)
  return sourceids_;
}

// repeated string replyTopics = 2;
int PostsBySourcesCmd::replytopics_size() const {
  return replytopics_.size();
}
void PostsBySourcesCmd::clear_replytopics() {
  replytopics_.Clear();
}
const ::std::string& PostsBySourcesCmd::replytopics(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
  return replytopics_.Get(index);
}
::std::string* PostsBySourcesCmd::mutable_replytopics(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
  return replytopics_.Mutable(index);
}
void PostsBySourcesCmd::set_replytopics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
  replytopics_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PostsBySourcesCmd::set_replytopics(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
  replytopics_.Mutable(index)->assign(std::move(value));
}
#endif
void PostsBySourcesCmd::set_replytopics(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  replytopics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
}
void PostsBySourcesCmd::set_replytopics(int index, const char* value, size_t size) {
  replytopics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
}
::std::string* PostsBySourcesCmd::add_replytopics() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
  return replytopics_.Add();
}
void PostsBySourcesCmd::add_replytopics(const ::std::string& value) {
  replytopics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
}
#if LANG_CXX11
void PostsBySourcesCmd::add_replytopics(::std::string&& value) {
  replytopics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
}
#endif
void PostsBySourcesCmd::add_replytopics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  replytopics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
}
void PostsBySourcesCmd::add_replytopics(const char* value, size_t size) {
  replytopics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PostsBySourcesCmd::replytopics() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
  return replytopics_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PostsBySourcesCmd::mutable_replytopics() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
  return &replytopics_;
}

// repeated .ru.mail.go.webbase.blobs.TimeInterval fetchTimeIntervals = 3;
int PostsBySourcesCmd::fetchtimeintervals_size() const {
  return fetchtimeintervals_.size();
}
void PostsBySourcesCmd::clear_fetchtimeintervals() {
  fetchtimeintervals_.Clear();
}
const ::ru::mail::go::webbase::blobs::TimeInterval& PostsBySourcesCmd::fetchtimeintervals(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostsBySourcesCmd.fetchTimeIntervals)
  return fetchtimeintervals_.Get(index);
}
::ru::mail::go::webbase::blobs::TimeInterval* PostsBySourcesCmd::mutable_fetchtimeintervals(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostsBySourcesCmd.fetchTimeIntervals)
  return fetchtimeintervals_.Mutable(index);
}
::ru::mail::go::webbase::blobs::TimeInterval* PostsBySourcesCmd::add_fetchtimeintervals() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostsBySourcesCmd.fetchTimeIntervals)
  return fetchtimeintervals_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TimeInterval >*
PostsBySourcesCmd::mutable_fetchtimeintervals() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostsBySourcesCmd.fetchTimeIntervals)
  return &fetchtimeintervals_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TimeInterval >&
PostsBySourcesCmd::fetchtimeintervals() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostsBySourcesCmd.fetchTimeIntervals)
  return fetchtimeintervals_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PostAndSource::kPostUrlFieldNumber;
const int PostAndSource::kSourceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PostAndSource::PostAndSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.PostAndSource)
}
PostAndSource::PostAndSource(const PostAndSource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  posturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_posturl()) {
    posturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posturl_);
  }
  if (from.has_sourceid()) {
    sourceid_ = new ::ru::mail::go::webbase::blobs::SiliconSourceId(*from.sourceid_);
  } else {
    sourceid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.PostAndSource)
}

void PostAndSource::SharedCtor() {
  _cached_size_ = 0;
  posturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceid_ = NULL;
}

PostAndSource::~PostAndSource() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.PostAndSource)
  SharedDtor();
}

void PostAndSource::SharedDtor() {
  posturl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sourceid_;
}

void PostAndSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostAndSource::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PostAndSource& PostAndSource::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PostAndSource* PostAndSource::New(::google::protobuf::Arena* arena) const {
  PostAndSource* n = new PostAndSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PostAndSource::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.PostAndSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!posturl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*posturl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sourceid_ != NULL);
      sourceid_->::ru::mail::go::webbase::blobs::SiliconSourceId::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PostAndSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.PostAndSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string postUrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_posturl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->posturl().data(), static_cast<int>(this->posturl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.PostAndSource.postUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sourceid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.PostAndSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.PostAndSource)
  return false;
#undef DO_
}

void PostAndSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.PostAndSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string postUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->posturl().data(), static_cast<int>(this->posturl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PostAndSource.postUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->posturl(), output);
  }

  // required .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sourceid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.PostAndSource)
}

::google::protobuf::uint8* PostAndSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.PostAndSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string postUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->posturl().data(), static_cast<int>(this->posturl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PostAndSource.postUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->posturl(), target);
  }

  // required .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sourceid_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.PostAndSource)
  return target;
}

size_t PostAndSource::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.PostAndSource)
  size_t total_size = 0;

  if (has_posturl()) {
    // required string postUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->posturl());
  }

  if (has_sourceid()) {
    // required .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sourceid_);
  }

  return total_size;
}
size_t PostAndSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.PostAndSource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string postUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->posturl());

    // required .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sourceid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostAndSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.PostAndSource)
  GOOGLE_DCHECK_NE(&from, this);
  const PostAndSource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PostAndSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.PostAndSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.PostAndSource)
    MergeFrom(*source);
  }
}

void PostAndSource::MergeFrom(const PostAndSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.PostAndSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_posturl();
      posturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posturl_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sourceid()->::ru::mail::go::webbase::blobs::SiliconSourceId::MergeFrom(from.sourceid());
    }
  }
}

void PostAndSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.PostAndSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostAndSource::CopyFrom(const PostAndSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.PostAndSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAndSource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_sourceid()) {
    if (!this->sourceid_->IsInitialized()) return false;
  }
  return true;
}

void PostAndSource::Swap(PostAndSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PostAndSource::InternalSwap(PostAndSource* other) {
  using std::swap;
  posturl_.Swap(&other->posturl_);
  swap(sourceid_, other->sourceid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PostAndSource::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PostAndSource

// required string postUrl = 1;
bool PostAndSource::has_posturl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PostAndSource::set_has_posturl() {
  _has_bits_[0] |= 0x00000001u;
}
void PostAndSource::clear_has_posturl() {
  _has_bits_[0] &= ~0x00000001u;
}
void PostAndSource::clear_posturl() {
  posturl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posturl();
}
const ::std::string& PostAndSource::posturl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostAndSource.postUrl)
  return posturl_.GetNoArena();
}
void PostAndSource::set_posturl(const ::std::string& value) {
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostAndSource.postUrl)
}
#if LANG_CXX11
void PostAndSource::set_posturl(::std::string&& value) {
  set_has_posturl();
  posturl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.PostAndSource.postUrl)
}
#endif
void PostAndSource::set_posturl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.PostAndSource.postUrl)
}
void PostAndSource::set_posturl(const char* value, size_t size) {
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.PostAndSource.postUrl)
}
::std::string* PostAndSource::mutable_posturl() {
  set_has_posturl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostAndSource.postUrl)
  return posturl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PostAndSource::release_posturl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PostAndSource.postUrl)
  clear_has_posturl();
  return posturl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PostAndSource::set_allocated_posturl(::std::string* posturl) {
  if (posturl != NULL) {
    set_has_posturl();
  } else {
    clear_has_posturl();
  }
  posturl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posturl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PostAndSource.postUrl)
}

// required .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 2;
bool PostAndSource::has_sourceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PostAndSource::set_has_sourceid() {
  _has_bits_[0] |= 0x00000002u;
}
void PostAndSource::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PostAndSource::clear_sourceid() {
  if (sourceid_ != NULL) sourceid_->::ru::mail::go::webbase::blobs::SiliconSourceId::Clear();
  clear_has_sourceid();
}
const ::ru::mail::go::webbase::blobs::SiliconSourceId& PostAndSource::sourceid() const {
  const ::ru::mail::go::webbase::blobs::SiliconSourceId* p = sourceid_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostAndSource.sourceId)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconSourceId*>(
      &::ru::mail::go::webbase::blobs::_SiliconSourceId_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconSourceId* PostAndSource::mutable_sourceid() {
  set_has_sourceid();
  if (sourceid_ == NULL) {
    sourceid_ = new ::ru::mail::go::webbase::blobs::SiliconSourceId;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostAndSource.sourceId)
  return sourceid_;
}
::ru::mail::go::webbase::blobs::SiliconSourceId* PostAndSource::release_sourceid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PostAndSource.sourceId)
  clear_has_sourceid();
  ::ru::mail::go::webbase::blobs::SiliconSourceId* temp = sourceid_;
  sourceid_ = NULL;
  return temp;
}
void PostAndSource::set_allocated_sourceid(::ru::mail::go::webbase::blobs::SiliconSourceId* sourceid) {
  delete sourceid_;
  sourceid_ = sourceid;
  if (sourceid) {
    set_has_sourceid();
  } else {
    clear_has_sourceid();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PostAndSource.sourceId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PostsBySiteCmd::kSiteIdsFieldNumber;
const int PostsBySiteCmd::kReplyTopicsFieldNumber;
const int PostsBySiteCmd::kFetchTimeIntervalsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PostsBySiteCmd::PostsBySiteCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.PostsBySiteCmd)
}
PostsBySiteCmd::PostsBySiteCmd(const PostsBySiteCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      siteids_(from.siteids_),
      replytopics_(from.replytopics_),
      fetchtimeintervals_(from.fetchtimeintervals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.PostsBySiteCmd)
}

void PostsBySiteCmd::SharedCtor() {
  _cached_size_ = 0;
}

PostsBySiteCmd::~PostsBySiteCmd() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.PostsBySiteCmd)
  SharedDtor();
}

void PostsBySiteCmd::SharedDtor() {
}

void PostsBySiteCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostsBySiteCmd::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PostsBySiteCmd& PostsBySiteCmd::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PostsBySiteCmd* PostsBySiteCmd::New(::google::protobuf::Arena* arena) const {
  PostsBySiteCmd* n = new PostsBySiteCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PostsBySiteCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.PostsBySiteCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  siteids_.Clear();
  replytopics_.Clear();
  fetchtimeintervals_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PostsBySiteCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.PostsBySiteCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 siteIds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8u, input, this->mutable_siteids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_siteids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string replyTopics = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_replytopics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->replytopics(this->replytopics_size() - 1).data(),
            static_cast<int>(this->replytopics(this->replytopics_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.TimeInterval fetchTimeIntervals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fetchtimeintervals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.PostsBySiteCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.PostsBySiteCmd)
  return false;
#undef DO_
}

void PostsBySiteCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.PostsBySiteCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 siteIds = 1;
  for (int i = 0, n = this->siteids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->siteids(i), output);
  }

  // repeated string replyTopics = 2;
  for (int i = 0, n = this->replytopics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replytopics(i).data(), static_cast<int>(this->replytopics(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->replytopics(i), output);
  }

  // repeated .ru.mail.go.webbase.blobs.TimeInterval fetchTimeIntervals = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fetchtimeintervals_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fetchtimeintervals(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.PostsBySiteCmd)
}

::google::protobuf::uint8* PostsBySiteCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.PostsBySiteCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 siteIds = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(1, this->siteids_, target);

  // repeated string replyTopics = 2;
  for (int i = 0, n = this->replytopics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replytopics(i).data(), static_cast<int>(this->replytopics(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->replytopics(i), target);
  }

  // repeated .ru.mail.go.webbase.blobs.TimeInterval fetchTimeIntervals = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fetchtimeintervals_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->fetchtimeintervals(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.PostsBySiteCmd)
  return target;
}

size_t PostsBySiteCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.PostsBySiteCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 siteIds = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->siteids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->siteids_size());
    total_size += data_size;
  }

  // repeated string replyTopics = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->replytopics_size());
  for (int i = 0, n = this->replytopics_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->replytopics(i));
  }

  // repeated .ru.mail.go.webbase.blobs.TimeInterval fetchTimeIntervals = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->fetchtimeintervals_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetchtimeintervals(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostsBySiteCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.PostsBySiteCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const PostsBySiteCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PostsBySiteCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.PostsBySiteCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.PostsBySiteCmd)
    MergeFrom(*source);
  }
}

void PostsBySiteCmd::MergeFrom(const PostsBySiteCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.PostsBySiteCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  siteids_.MergeFrom(from.siteids_);
  replytopics_.MergeFrom(from.replytopics_);
  fetchtimeintervals_.MergeFrom(from.fetchtimeintervals_);
}

void PostsBySiteCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.PostsBySiteCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostsBySiteCmd::CopyFrom(const PostsBySiteCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.PostsBySiteCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostsBySiteCmd::IsInitialized() const {
  return true;
}

void PostsBySiteCmd::Swap(PostsBySiteCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PostsBySiteCmd::InternalSwap(PostsBySiteCmd* other) {
  using std::swap;
  siteids_.InternalSwap(&other->siteids_);
  replytopics_.InternalSwap(&other->replytopics_);
  fetchtimeintervals_.InternalSwap(&other->fetchtimeintervals_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PostsBySiteCmd::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PostsBySiteCmd

// repeated int64 siteIds = 1;
int PostsBySiteCmd::siteids_size() const {
  return siteids_.size();
}
void PostsBySiteCmd::clear_siteids() {
  siteids_.Clear();
}
::google::protobuf::int64 PostsBySiteCmd::siteids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostsBySiteCmd.siteIds)
  return siteids_.Get(index);
}
void PostsBySiteCmd::set_siteids(int index, ::google::protobuf::int64 value) {
  siteids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostsBySiteCmd.siteIds)
}
void PostsBySiteCmd::add_siteids(::google::protobuf::int64 value) {
  siteids_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostsBySiteCmd.siteIds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PostsBySiteCmd::siteids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostsBySiteCmd.siteIds)
  return siteids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PostsBySiteCmd::mutable_siteids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostsBySiteCmd.siteIds)
  return &siteids_;
}

// repeated string replyTopics = 2;
int PostsBySiteCmd::replytopics_size() const {
  return replytopics_.size();
}
void PostsBySiteCmd::clear_replytopics() {
  replytopics_.Clear();
}
const ::std::string& PostsBySiteCmd::replytopics(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
  return replytopics_.Get(index);
}
::std::string* PostsBySiteCmd::mutable_replytopics(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
  return replytopics_.Mutable(index);
}
void PostsBySiteCmd::set_replytopics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
  replytopics_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PostsBySiteCmd::set_replytopics(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
  replytopics_.Mutable(index)->assign(std::move(value));
}
#endif
void PostsBySiteCmd::set_replytopics(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  replytopics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
}
void PostsBySiteCmd::set_replytopics(int index, const char* value, size_t size) {
  replytopics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
}
::std::string* PostsBySiteCmd::add_replytopics() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
  return replytopics_.Add();
}
void PostsBySiteCmd::add_replytopics(const ::std::string& value) {
  replytopics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
}
#if LANG_CXX11
void PostsBySiteCmd::add_replytopics(::std::string&& value) {
  replytopics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
}
#endif
void PostsBySiteCmd::add_replytopics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  replytopics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
}
void PostsBySiteCmd::add_replytopics(const char* value, size_t size) {
  replytopics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PostsBySiteCmd::replytopics() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
  return replytopics_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PostsBySiteCmd::mutable_replytopics() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
  return &replytopics_;
}

// repeated .ru.mail.go.webbase.blobs.TimeInterval fetchTimeIntervals = 3;
int PostsBySiteCmd::fetchtimeintervals_size() const {
  return fetchtimeintervals_.size();
}
void PostsBySiteCmd::clear_fetchtimeintervals() {
  fetchtimeintervals_.Clear();
}
const ::ru::mail::go::webbase::blobs::TimeInterval& PostsBySiteCmd::fetchtimeintervals(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostsBySiteCmd.fetchTimeIntervals)
  return fetchtimeintervals_.Get(index);
}
::ru::mail::go::webbase::blobs::TimeInterval* PostsBySiteCmd::mutable_fetchtimeintervals(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostsBySiteCmd.fetchTimeIntervals)
  return fetchtimeintervals_.Mutable(index);
}
::ru::mail::go::webbase::blobs::TimeInterval* PostsBySiteCmd::add_fetchtimeintervals() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostsBySiteCmd.fetchTimeIntervals)
  return fetchtimeintervals_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TimeInterval >*
PostsBySiteCmd::mutable_fetchtimeintervals() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostsBySiteCmd.fetchTimeIntervals)
  return &fetchtimeintervals_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TimeInterval >&
PostsBySiteCmd::fetchtimeintervals() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostsBySiteCmd.fetchTimeIntervals)
  return fetchtimeintervals_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeInterval::kStartTsMsFieldNumber;
const int TimeInterval::kStopTsMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeInterval::TimeInterval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.TimeInterval)
}
TimeInterval::TimeInterval(const TimeInterval& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&starttsms_, &from.starttsms_,
    static_cast<size_t>(reinterpret_cast<char*>(&stoptsms_) -
    reinterpret_cast<char*>(&starttsms_)) + sizeof(stoptsms_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.TimeInterval)
}

void TimeInterval::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&starttsms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stoptsms_) -
      reinterpret_cast<char*>(&starttsms_)) + sizeof(stoptsms_));
}

TimeInterval::~TimeInterval() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.TimeInterval)
  SharedDtor();
}

void TimeInterval::SharedDtor() {
}

void TimeInterval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeInterval::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeInterval& TimeInterval::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimeInterval* TimeInterval::New(::google::protobuf::Arena* arena) const {
  TimeInterval* n = new TimeInterval;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.TimeInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&starttsms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stoptsms_) -
        reinterpret_cast<char*>(&starttsms_)) + sizeof(stoptsms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeInterval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.TimeInterval)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 startTsMs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_starttsms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttsms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 stopTsMs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_stoptsms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stoptsms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.TimeInterval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.TimeInterval)
  return false;
#undef DO_
}

void TimeInterval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.TimeInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 startTsMs = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->starttsms(), output);
  }

  // optional uint64 stopTsMs = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stoptsms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.TimeInterval)
}

::google::protobuf::uint8* TimeInterval::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.TimeInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 startTsMs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->starttsms(), target);
  }

  // optional uint64 stopTsMs = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stoptsms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.TimeInterval)
  return target;
}

size_t TimeInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.TimeInterval)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 startTsMs = 1;
    if (has_starttsms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttsms());
    }

    // optional uint64 stopTsMs = 2;
    if (has_stoptsms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stoptsms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeInterval::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.TimeInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeInterval* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeInterval>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.TimeInterval)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.TimeInterval)
    MergeFrom(*source);
  }
}

void TimeInterval::MergeFrom(const TimeInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.TimeInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      starttsms_ = from.starttsms_;
    }
    if (cached_has_bits & 0x00000002u) {
      stoptsms_ = from.stoptsms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeInterval::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.TimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeInterval::CopyFrom(const TimeInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.TimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeInterval::IsInitialized() const {
  return true;
}

void TimeInterval::Swap(TimeInterval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeInterval::InternalSwap(TimeInterval* other) {
  using std::swap;
  swap(starttsms_, other->starttsms_);
  swap(stoptsms_, other->stoptsms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeInterval::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeInterval

// optional uint64 startTsMs = 1;
bool TimeInterval::has_starttsms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeInterval::set_has_starttsms() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeInterval::clear_has_starttsms() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeInterval::clear_starttsms() {
  starttsms_ = GOOGLE_ULONGLONG(0);
  clear_has_starttsms();
}
::google::protobuf::uint64 TimeInterval::starttsms() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TimeInterval.startTsMs)
  return starttsms_;
}
void TimeInterval::set_starttsms(::google::protobuf::uint64 value) {
  set_has_starttsms();
  starttsms_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TimeInterval.startTsMs)
}

// optional uint64 stopTsMs = 2;
bool TimeInterval::has_stoptsms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimeInterval::set_has_stoptsms() {
  _has_bits_[0] |= 0x00000002u;
}
void TimeInterval::clear_has_stoptsms() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimeInterval::clear_stoptsms() {
  stoptsms_ = GOOGLE_ULONGLONG(0);
  clear_has_stoptsms();
}
::google::protobuf::uint64 TimeInterval::stoptsms() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TimeInterval.stopTsMs)
  return stoptsms_;
}
void TimeInterval::set_stoptsms(::google::protobuf::uint64 value) {
  set_has_stoptsms();
  stoptsms_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TimeInterval.stopTsMs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PostSiteSources::kPostUrlFieldNumber;
const int PostSiteSources::kSiteIdFieldNumber;
const int PostSiteSources::kSourceIdFieldNumber;
const int PostSiteSources::kFirstMeetSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PostSiteSources::PostSiteSources()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.PostSiteSources)
}
PostSiteSources::PostSiteSources(const PostSiteSources& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sourceid_(from.sourceid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  posturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_posturl()) {
    posturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posturl_);
  }
  ::memcpy(&siteid_, &from.siteid_,
    static_cast<size_t>(reinterpret_cast<char*>(&firstmeetsec_) -
    reinterpret_cast<char*>(&siteid_)) + sizeof(firstmeetsec_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.PostSiteSources)
}

void PostSiteSources::SharedCtor() {
  _cached_size_ = 0;
  posturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&siteid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&firstmeetsec_) -
      reinterpret_cast<char*>(&siteid_)) + sizeof(firstmeetsec_));
}

PostSiteSources::~PostSiteSources() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.PostSiteSources)
  SharedDtor();
}

void PostSiteSources::SharedDtor() {
  posturl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PostSiteSources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostSiteSources::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PostSiteSources& PostSiteSources::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PostSiteSources* PostSiteSources::New(::google::protobuf::Arena* arena) const {
  PostSiteSources* n = new PostSiteSources;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PostSiteSources::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.PostSiteSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourceid_.Clear();
  if (has_posturl()) {
    GOOGLE_DCHECK(!posturl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*posturl_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&siteid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&firstmeetsec_) -
        reinterpret_cast<char*>(&siteid_)) + sizeof(firstmeetsec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PostSiteSources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.PostSiteSources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string postUrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_posturl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->posturl().data(), static_cast<int>(this->posturl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.PostSiteSources.postUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 siteId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_siteid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &siteid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sourceid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 firstMeetSec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_firstmeetsec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &firstmeetsec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.PostSiteSources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.PostSiteSources)
  return false;
#undef DO_
}

void PostSiteSources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.PostSiteSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string postUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->posturl().data(), static_cast<int>(this->posturl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PostSiteSources.postUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->posturl(), output);
  }

  // required int64 siteId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->siteid(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sourceid_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sourceid(static_cast<int>(i)), output);
  }

  // optional int64 firstMeetSec = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->firstmeetsec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.PostSiteSources)
}

::google::protobuf::uint8* PostSiteSources::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.PostSiteSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string postUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->posturl().data(), static_cast<int>(this->posturl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PostSiteSources.postUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->posturl(), target);
  }

  // required int64 siteId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->siteid(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sourceid_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->sourceid(static_cast<int>(i)), deterministic, target);
  }

  // optional int64 firstMeetSec = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->firstmeetsec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.PostSiteSources)
  return target;
}

size_t PostSiteSources::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.PostSiteSources)
  size_t total_size = 0;

  if (has_posturl()) {
    // required string postUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->posturl());
  }

  if (has_siteid()) {
    // required int64 siteId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->siteid());
  }

  return total_size;
}
size_t PostSiteSources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.PostSiteSources)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string postUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->posturl());

    // required int64 siteId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->siteid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->sourceid_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sourceid(static_cast<int>(i)));
    }
  }

  // optional int64 firstMeetSec = 4;
  if (has_firstmeetsec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->firstmeetsec());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostSiteSources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.PostSiteSources)
  GOOGLE_DCHECK_NE(&from, this);
  const PostSiteSources* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PostSiteSources>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.PostSiteSources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.PostSiteSources)
    MergeFrom(*source);
  }
}

void PostSiteSources::MergeFrom(const PostSiteSources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.PostSiteSources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sourceid_.MergeFrom(from.sourceid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_posturl();
      posturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posturl_);
    }
    if (cached_has_bits & 0x00000002u) {
      siteid_ = from.siteid_;
    }
    if (cached_has_bits & 0x00000004u) {
      firstmeetsec_ = from.firstmeetsec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PostSiteSources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.PostSiteSources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostSiteSources::CopyFrom(const PostSiteSources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.PostSiteSources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostSiteSources::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sourceid())) return false;
  return true;
}

void PostSiteSources::Swap(PostSiteSources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PostSiteSources::InternalSwap(PostSiteSources* other) {
  using std::swap;
  sourceid_.InternalSwap(&other->sourceid_);
  posturl_.Swap(&other->posturl_);
  swap(siteid_, other->siteid_);
  swap(firstmeetsec_, other->firstmeetsec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PostSiteSources::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PostSiteSources

// required string postUrl = 1;
bool PostSiteSources::has_posturl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PostSiteSources::set_has_posturl() {
  _has_bits_[0] |= 0x00000001u;
}
void PostSiteSources::clear_has_posturl() {
  _has_bits_[0] &= ~0x00000001u;
}
void PostSiteSources::clear_posturl() {
  posturl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posturl();
}
const ::std::string& PostSiteSources::posturl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostSiteSources.postUrl)
  return posturl_.GetNoArena();
}
void PostSiteSources::set_posturl(const ::std::string& value) {
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostSiteSources.postUrl)
}
#if LANG_CXX11
void PostSiteSources::set_posturl(::std::string&& value) {
  set_has_posturl();
  posturl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.PostSiteSources.postUrl)
}
#endif
void PostSiteSources::set_posturl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.PostSiteSources.postUrl)
}
void PostSiteSources::set_posturl(const char* value, size_t size) {
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.PostSiteSources.postUrl)
}
::std::string* PostSiteSources::mutable_posturl() {
  set_has_posturl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostSiteSources.postUrl)
  return posturl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PostSiteSources::release_posturl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PostSiteSources.postUrl)
  clear_has_posturl();
  return posturl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PostSiteSources::set_allocated_posturl(::std::string* posturl) {
  if (posturl != NULL) {
    set_has_posturl();
  } else {
    clear_has_posturl();
  }
  posturl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posturl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PostSiteSources.postUrl)
}

// required int64 siteId = 2;
bool PostSiteSources::has_siteid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PostSiteSources::set_has_siteid() {
  _has_bits_[0] |= 0x00000002u;
}
void PostSiteSources::clear_has_siteid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PostSiteSources::clear_siteid() {
  siteid_ = GOOGLE_LONGLONG(0);
  clear_has_siteid();
}
::google::protobuf::int64 PostSiteSources::siteid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostSiteSources.siteId)
  return siteid_;
}
void PostSiteSources::set_siteid(::google::protobuf::int64 value) {
  set_has_siteid();
  siteid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostSiteSources.siteId)
}

// repeated .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 3;
int PostSiteSources::sourceid_size() const {
  return sourceid_.size();
}
void PostSiteSources::clear_sourceid() {
  sourceid_.Clear();
}
const ::ru::mail::go::webbase::blobs::SiliconSourceId& PostSiteSources::sourceid(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostSiteSources.sourceId)
  return sourceid_.Get(index);
}
::ru::mail::go::webbase::blobs::SiliconSourceId* PostSiteSources::mutable_sourceid(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostSiteSources.sourceId)
  return sourceid_.Mutable(index);
}
::ru::mail::go::webbase::blobs::SiliconSourceId* PostSiteSources::add_sourceid() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostSiteSources.sourceId)
  return sourceid_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconSourceId >*
PostSiteSources::mutable_sourceid() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostSiteSources.sourceId)
  return &sourceid_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconSourceId >&
PostSiteSources::sourceid() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostSiteSources.sourceId)
  return sourceid_;
}

// optional int64 firstMeetSec = 4;
bool PostSiteSources::has_firstmeetsec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PostSiteSources::set_has_firstmeetsec() {
  _has_bits_[0] |= 0x00000004u;
}
void PostSiteSources::clear_has_firstmeetsec() {
  _has_bits_[0] &= ~0x00000004u;
}
void PostSiteSources::clear_firstmeetsec() {
  firstmeetsec_ = GOOGLE_LONGLONG(0);
  clear_has_firstmeetsec();
}
::google::protobuf::int64 PostSiteSources::firstmeetsec() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostSiteSources.firstMeetSec)
  return firstmeetsec_;
}
void PostSiteSources::set_firstmeetsec(::google::protobuf::int64 value) {
  set_has_firstmeetsec();
  firstmeetsec_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostSiteSources.firstMeetSec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkerDigest::kMarkerIdFieldNumber;
const int MarkerDigest::kValueHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkerDigest::MarkerDigest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.MarkerDigest)
}
MarkerDigest::MarkerDigest(const MarkerDigest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  valuehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_valuehash()) {
    valuehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valuehash_);
  }
  markerid_ = from.markerid_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.MarkerDigest)
}

void MarkerDigest::SharedCtor() {
  _cached_size_ = 0;
  valuehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  markerid_ = 0;
}

MarkerDigest::~MarkerDigest() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.MarkerDigest)
  SharedDtor();
}

void MarkerDigest::SharedDtor() {
  valuehash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarkerDigest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkerDigest::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarkerDigest& MarkerDigest::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

MarkerDigest* MarkerDigest::New(::google::protobuf::Arena* arena) const {
  MarkerDigest* n = new MarkerDigest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarkerDigest::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.MarkerDigest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_valuehash()) {
    GOOGLE_DCHECK(!valuehash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*valuehash_.UnsafeRawStringPointer())->clear();
  }
  markerid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarkerDigest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.MarkerDigest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 markerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_markerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &markerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes valueHash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_valuehash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.MarkerDigest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.MarkerDigest)
  return false;
#undef DO_
}

void MarkerDigest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.MarkerDigest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 markerId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->markerid(), output);
  }

  // required bytes valueHash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->valuehash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.MarkerDigest)
}

::google::protobuf::uint8* MarkerDigest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.MarkerDigest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 markerId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->markerid(), target);
  }

  // required bytes valueHash = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->valuehash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.MarkerDigest)
  return target;
}

size_t MarkerDigest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.MarkerDigest)
  size_t total_size = 0;

  if (has_valuehash()) {
    // required bytes valueHash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->valuehash());
  }

  if (has_markerid()) {
    // required int32 markerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->markerid());
  }

  return total_size;
}
size_t MarkerDigest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.MarkerDigest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes valueHash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->valuehash());

    // required int32 markerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->markerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkerDigest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.MarkerDigest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkerDigest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarkerDigest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.MarkerDigest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.MarkerDigest)
    MergeFrom(*source);
  }
}

void MarkerDigest::MergeFrom(const MarkerDigest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.MarkerDigest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_valuehash();
      valuehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valuehash_);
    }
    if (cached_has_bits & 0x00000002u) {
      markerid_ = from.markerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarkerDigest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.MarkerDigest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkerDigest::CopyFrom(const MarkerDigest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.MarkerDigest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkerDigest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MarkerDigest::Swap(MarkerDigest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkerDigest::InternalSwap(MarkerDigest* other) {
  using std::swap;
  valuehash_.Swap(&other->valuehash_);
  swap(markerid_, other->markerid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarkerDigest::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarkerDigest

// required int32 markerId = 1;
bool MarkerDigest::has_markerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MarkerDigest::set_has_markerid() {
  _has_bits_[0] |= 0x00000002u;
}
void MarkerDigest::clear_has_markerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void MarkerDigest::clear_markerid() {
  markerid_ = 0;
  clear_has_markerid();
}
::google::protobuf::int32 MarkerDigest::markerid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkerDigest.markerId)
  return markerid_;
}
void MarkerDigest::set_markerid(::google::protobuf::int32 value) {
  set_has_markerid();
  markerid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkerDigest.markerId)
}

// required bytes valueHash = 2;
bool MarkerDigest::has_valuehash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarkerDigest::set_has_valuehash() {
  _has_bits_[0] |= 0x00000001u;
}
void MarkerDigest::clear_has_valuehash() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarkerDigest::clear_valuehash() {
  valuehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_valuehash();
}
const ::std::string& MarkerDigest::valuehash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkerDigest.valueHash)
  return valuehash_.GetNoArena();
}
void MarkerDigest::set_valuehash(const ::std::string& value) {
  set_has_valuehash();
  valuehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkerDigest.valueHash)
}
#if LANG_CXX11
void MarkerDigest::set_valuehash(::std::string&& value) {
  set_has_valuehash();
  valuehash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MarkerDigest.valueHash)
}
#endif
void MarkerDigest::set_valuehash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_valuehash();
  valuehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MarkerDigest.valueHash)
}
void MarkerDigest::set_valuehash(const void* value, size_t size) {
  set_has_valuehash();
  valuehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MarkerDigest.valueHash)
}
::std::string* MarkerDigest::mutable_valuehash() {
  set_has_valuehash();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MarkerDigest.valueHash)
  return valuehash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkerDigest::release_valuehash() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MarkerDigest.valueHash)
  clear_has_valuehash();
  return valuehash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkerDigest::set_allocated_valuehash(::std::string* valuehash) {
  if (valuehash != NULL) {
    set_has_valuehash();
  } else {
    clear_has_valuehash();
  }
  valuehash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), valuehash);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MarkerDigest.valueHash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkerMultiDigest::kMarkerIdFieldNumber;
const int MarkerMultiDigest::kValueHashesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkerMultiDigest::MarkerMultiDigest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.MarkerMultiDigest)
}
MarkerMultiDigest::MarkerMultiDigest(const MarkerMultiDigest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      valuehashes_(from.valuehashes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  markerid_ = from.markerid_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.MarkerMultiDigest)
}

void MarkerMultiDigest::SharedCtor() {
  _cached_size_ = 0;
  markerid_ = 0;
}

MarkerMultiDigest::~MarkerMultiDigest() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.MarkerMultiDigest)
  SharedDtor();
}

void MarkerMultiDigest::SharedDtor() {
}

void MarkerMultiDigest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkerMultiDigest::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarkerMultiDigest& MarkerMultiDigest::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

MarkerMultiDigest* MarkerMultiDigest::New(::google::protobuf::Arena* arena) const {
  MarkerMultiDigest* n = new MarkerMultiDigest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarkerMultiDigest::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.MarkerMultiDigest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  valuehashes_.Clear();
  markerid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarkerMultiDigest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.MarkerMultiDigest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 markerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_markerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &markerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes valueHashes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_valuehashes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.MarkerMultiDigest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.MarkerMultiDigest)
  return false;
#undef DO_
}

void MarkerMultiDigest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.MarkerMultiDigest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 markerId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->markerid(), output);
  }

  // repeated bytes valueHashes = 2;
  for (int i = 0, n = this->valuehashes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->valuehashes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.MarkerMultiDigest)
}

::google::protobuf::uint8* MarkerMultiDigest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.MarkerMultiDigest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 markerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->markerid(), target);
  }

  // repeated bytes valueHashes = 2;
  for (int i = 0, n = this->valuehashes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->valuehashes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.MarkerMultiDigest)
  return target;
}

size_t MarkerMultiDigest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.MarkerMultiDigest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 markerId = 1;
  if (has_markerid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->markerid());
  }
  // repeated bytes valueHashes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->valuehashes_size());
  for (int i = 0, n = this->valuehashes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->valuehashes(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkerMultiDigest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.MarkerMultiDigest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkerMultiDigest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarkerMultiDigest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.MarkerMultiDigest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.MarkerMultiDigest)
    MergeFrom(*source);
  }
}

void MarkerMultiDigest::MergeFrom(const MarkerMultiDigest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.MarkerMultiDigest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  valuehashes_.MergeFrom(from.valuehashes_);
  if (from.has_markerid()) {
    set_markerid(from.markerid());
  }
}

void MarkerMultiDigest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.MarkerMultiDigest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkerMultiDigest::CopyFrom(const MarkerMultiDigest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.MarkerMultiDigest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkerMultiDigest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MarkerMultiDigest::Swap(MarkerMultiDigest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkerMultiDigest::InternalSwap(MarkerMultiDigest* other) {
  using std::swap;
  valuehashes_.InternalSwap(&other->valuehashes_);
  swap(markerid_, other->markerid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarkerMultiDigest::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarkerMultiDigest

// required int32 markerId = 1;
bool MarkerMultiDigest::has_markerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarkerMultiDigest::set_has_markerid() {
  _has_bits_[0] |= 0x00000001u;
}
void MarkerMultiDigest::clear_has_markerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarkerMultiDigest::clear_markerid() {
  markerid_ = 0;
  clear_has_markerid();
}
::google::protobuf::int32 MarkerMultiDigest::markerid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkerMultiDigest.markerId)
  return markerid_;
}
void MarkerMultiDigest::set_markerid(::google::protobuf::int32 value) {
  set_has_markerid();
  markerid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkerMultiDigest.markerId)
}

// repeated bytes valueHashes = 2;
int MarkerMultiDigest::valuehashes_size() const {
  return valuehashes_.size();
}
void MarkerMultiDigest::clear_valuehashes() {
  valuehashes_.Clear();
}
const ::std::string& MarkerMultiDigest::valuehashes(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
  return valuehashes_.Get(index);
}
::std::string* MarkerMultiDigest::mutable_valuehashes(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
  return valuehashes_.Mutable(index);
}
void MarkerMultiDigest::set_valuehashes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
  valuehashes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void MarkerMultiDigest::set_valuehashes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
  valuehashes_.Mutable(index)->assign(std::move(value));
}
#endif
void MarkerMultiDigest::set_valuehashes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valuehashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
}
void MarkerMultiDigest::set_valuehashes(int index, const void* value, size_t size) {
  valuehashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
}
::std::string* MarkerMultiDigest::add_valuehashes() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
  return valuehashes_.Add();
}
void MarkerMultiDigest::add_valuehashes(const ::std::string& value) {
  valuehashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
}
#if LANG_CXX11
void MarkerMultiDigest::add_valuehashes(::std::string&& value) {
  valuehashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
}
#endif
void MarkerMultiDigest::add_valuehashes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valuehashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
}
void MarkerMultiDigest::add_valuehashes(const void* value, size_t size) {
  valuehashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MarkerMultiDigest::valuehashes() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
  return valuehashes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MarkerMultiDigest::mutable_valuehashes() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
  return &valuehashes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomFieldMarkerDigest::kFieldNameFieldNumber;
const int CustomFieldMarkerDigest::kFieldValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomFieldMarkerDigest::CustomFieldMarkerDigest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
}
CustomFieldMarkerDigest::CustomFieldMarkerDigest(const CustomFieldMarkerDigest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fieldname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fieldname()) {
    fieldname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fieldname_);
  }
  if (from.has_fieldvalue()) {
    fieldvalue_ = new ::ru::mail::go::webbase::blobs::MarkerDigest(*from.fieldvalue_);
  } else {
    fieldvalue_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
}

void CustomFieldMarkerDigest::SharedCtor() {
  _cached_size_ = 0;
  fieldname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fieldvalue_ = NULL;
}

CustomFieldMarkerDigest::~CustomFieldMarkerDigest() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
  SharedDtor();
}

void CustomFieldMarkerDigest::SharedDtor() {
  fieldname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fieldvalue_;
}

void CustomFieldMarkerDigest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomFieldMarkerDigest::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomFieldMarkerDigest& CustomFieldMarkerDigest::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomFieldMarkerDigest* CustomFieldMarkerDigest::New(::google::protobuf::Arena* arena) const {
  CustomFieldMarkerDigest* n = new CustomFieldMarkerDigest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomFieldMarkerDigest::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!fieldname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fieldname_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fieldvalue_ != NULL);
      fieldvalue_->::ru::mail::go::webbase::blobs::MarkerDigest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CustomFieldMarkerDigest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fieldName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fieldname().data(), static_cast<int>(this->fieldname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.MarkerDigest fieldValue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fieldvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
  return false;
#undef DO_
}

void CustomFieldMarkerDigest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string fieldName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldname().data(), static_cast<int>(this->fieldname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fieldname(), output);
  }

  // optional .ru.mail.go.webbase.blobs.MarkerDigest fieldValue = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fieldvalue_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
}

::google::protobuf::uint8* CustomFieldMarkerDigest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string fieldName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldname().data(), static_cast<int>(this->fieldname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fieldname(), target);
  }

  // optional .ru.mail.go.webbase.blobs.MarkerDigest fieldValue = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fieldvalue_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
  return target;
}

size_t CustomFieldMarkerDigest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string fieldName = 1;
  if (has_fieldname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fieldname());
  }
  // optional .ru.mail.go.webbase.blobs.MarkerDigest fieldValue = 2;
  if (has_fieldvalue()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fieldvalue_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomFieldMarkerDigest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomFieldMarkerDigest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomFieldMarkerDigest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
    MergeFrom(*source);
  }
}

void CustomFieldMarkerDigest::MergeFrom(const CustomFieldMarkerDigest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fieldname();
      fieldname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fieldname_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fieldvalue()->::ru::mail::go::webbase::blobs::MarkerDigest::MergeFrom(from.fieldvalue());
    }
  }
}

void CustomFieldMarkerDigest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomFieldMarkerDigest::CopyFrom(const CustomFieldMarkerDigest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomFieldMarkerDigest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_fieldvalue()) {
    if (!this->fieldvalue_->IsInitialized()) return false;
  }
  return true;
}

void CustomFieldMarkerDigest::Swap(CustomFieldMarkerDigest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomFieldMarkerDigest::InternalSwap(CustomFieldMarkerDigest* other) {
  using std::swap;
  fieldname_.Swap(&other->fieldname_);
  swap(fieldvalue_, other->fieldvalue_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomFieldMarkerDigest::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomFieldMarkerDigest

// required string fieldName = 1;
bool CustomFieldMarkerDigest::has_fieldname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CustomFieldMarkerDigest::set_has_fieldname() {
  _has_bits_[0] |= 0x00000001u;
}
void CustomFieldMarkerDigest::clear_has_fieldname() {
  _has_bits_[0] &= ~0x00000001u;
}
void CustomFieldMarkerDigest::clear_fieldname() {
  fieldname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fieldname();
}
const ::std::string& CustomFieldMarkerDigest::fieldname() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName)
  return fieldname_.GetNoArena();
}
void CustomFieldMarkerDigest::set_fieldname(const ::std::string& value) {
  set_has_fieldname();
  fieldname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName)
}
#if LANG_CXX11
void CustomFieldMarkerDigest::set_fieldname(::std::string&& value) {
  set_has_fieldname();
  fieldname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName)
}
#endif
void CustomFieldMarkerDigest::set_fieldname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fieldname();
  fieldname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName)
}
void CustomFieldMarkerDigest::set_fieldname(const char* value, size_t size) {
  set_has_fieldname();
  fieldname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName)
}
::std::string* CustomFieldMarkerDigest::mutable_fieldname() {
  set_has_fieldname();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName)
  return fieldname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CustomFieldMarkerDigest::release_fieldname() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName)
  clear_has_fieldname();
  return fieldname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CustomFieldMarkerDigest::set_allocated_fieldname(::std::string* fieldname) {
  if (fieldname != NULL) {
    set_has_fieldname();
  } else {
    clear_has_fieldname();
  }
  fieldname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fieldname);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName)
}

// optional .ru.mail.go.webbase.blobs.MarkerDigest fieldValue = 2;
bool CustomFieldMarkerDigest::has_fieldvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CustomFieldMarkerDigest::set_has_fieldvalue() {
  _has_bits_[0] |= 0x00000002u;
}
void CustomFieldMarkerDigest::clear_has_fieldvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
void CustomFieldMarkerDigest::clear_fieldvalue() {
  if (fieldvalue_ != NULL) fieldvalue_->::ru::mail::go::webbase::blobs::MarkerDigest::Clear();
  clear_has_fieldvalue();
}
const ::ru::mail::go::webbase::blobs::MarkerDigest& CustomFieldMarkerDigest::fieldvalue() const {
  const ::ru::mail::go::webbase::blobs::MarkerDigest* p = fieldvalue_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldValue)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::MarkerDigest*>(
      &::ru::mail::go::webbase::blobs::_MarkerDigest_default_instance_);
}
::ru::mail::go::webbase::blobs::MarkerDigest* CustomFieldMarkerDigest::mutable_fieldvalue() {
  set_has_fieldvalue();
  if (fieldvalue_ == NULL) {
    fieldvalue_ = new ::ru::mail::go::webbase::blobs::MarkerDigest;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldValue)
  return fieldvalue_;
}
::ru::mail::go::webbase::blobs::MarkerDigest* CustomFieldMarkerDigest::release_fieldvalue() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldValue)
  clear_has_fieldvalue();
  ::ru::mail::go::webbase::blobs::MarkerDigest* temp = fieldvalue_;
  fieldvalue_ = NULL;
  return temp;
}
void CustomFieldMarkerDigest::set_allocated_fieldvalue(::ru::mail::go::webbase::blobs::MarkerDigest* fieldvalue) {
  delete fieldvalue_;
  fieldvalue_ = fieldvalue;
  if (fieldvalue) {
    set_has_fieldvalue();
  } else {
    clear_has_fieldvalue();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldValue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomFieldMarkerDigests::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomFieldMarkerDigests::CustomFieldMarkerDigests()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
}
CustomFieldMarkerDigests::CustomFieldMarkerDigests(const CustomFieldMarkerDigests& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
}

void CustomFieldMarkerDigests::SharedCtor() {
  _cached_size_ = 0;
}

CustomFieldMarkerDigests::~CustomFieldMarkerDigests() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
  SharedDtor();
}

void CustomFieldMarkerDigests::SharedDtor() {
}

void CustomFieldMarkerDigests::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomFieldMarkerDigests::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomFieldMarkerDigests& CustomFieldMarkerDigests::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomFieldMarkerDigests* CustomFieldMarkerDigests::New(::google::protobuf::Arena* arena) const {
  CustomFieldMarkerDigests* n = new CustomFieldMarkerDigests;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomFieldMarkerDigests::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CustomFieldMarkerDigests::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.CustomFieldMarkerDigest items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
  return false;
#undef DO_
}

void CustomFieldMarkerDigests::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.CustomFieldMarkerDigest items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
}

::google::protobuf::uint8* CustomFieldMarkerDigests::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.CustomFieldMarkerDigest items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
  return target;
}

size_t CustomFieldMarkerDigests::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.CustomFieldMarkerDigest items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomFieldMarkerDigests::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomFieldMarkerDigests* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomFieldMarkerDigests>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
    MergeFrom(*source);
  }
}

void CustomFieldMarkerDigests::MergeFrom(const CustomFieldMarkerDigests& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void CustomFieldMarkerDigests::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomFieldMarkerDigests::CopyFrom(const CustomFieldMarkerDigests& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomFieldMarkerDigests::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void CustomFieldMarkerDigests::Swap(CustomFieldMarkerDigests* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomFieldMarkerDigests::InternalSwap(CustomFieldMarkerDigests* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomFieldMarkerDigests::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomFieldMarkerDigests

// repeated .ru.mail.go.webbase.blobs.CustomFieldMarkerDigest items = 1;
int CustomFieldMarkerDigests::items_size() const {
  return items_.size();
}
void CustomFieldMarkerDigests::clear_items() {
  items_.Clear();
}
const ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigest& CustomFieldMarkerDigests::items(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests.items)
  return items_.Get(index);
}
::ru::mail::go::webbase::blobs::CustomFieldMarkerDigest* CustomFieldMarkerDigests::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests.items)
  return items_.Mutable(index);
}
::ru::mail::go::webbase::blobs::CustomFieldMarkerDigest* CustomFieldMarkerDigests::add_items() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigest >*
CustomFieldMarkerDigests::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigest >&
CustomFieldMarkerDigests::items() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerMarkerDigest::kMarkerIdFieldNumber;
const int LayerMarkerDigest::kValueHashesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayerMarkerDigest::LayerMarkerDigest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.LayerMarkerDigest)
}
LayerMarkerDigest::LayerMarkerDigest(const LayerMarkerDigest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      valuehashes_(from.valuehashes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  markerid_ = from.markerid_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.LayerMarkerDigest)
}

void LayerMarkerDigest::SharedCtor() {
  _cached_size_ = 0;
  markerid_ = 0;
}

LayerMarkerDigest::~LayerMarkerDigest() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.LayerMarkerDigest)
  SharedDtor();
}

void LayerMarkerDigest::SharedDtor() {
}

void LayerMarkerDigest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerMarkerDigest::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LayerMarkerDigest& LayerMarkerDigest::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

LayerMarkerDigest* LayerMarkerDigest::New(::google::protobuf::Arena* arena) const {
  LayerMarkerDigest* n = new LayerMarkerDigest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayerMarkerDigest::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.LayerMarkerDigest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  valuehashes_.Clear();
  markerid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LayerMarkerDigest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.LayerMarkerDigest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 markerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_markerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &markerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 valueHashes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_valuehashes())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_valuehashes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.LayerMarkerDigest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.LayerMarkerDigest)
  return false;
#undef DO_
}

void LayerMarkerDigest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.LayerMarkerDigest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 markerId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->markerid(), output);
  }

  // repeated int32 valueHashes = 2;
  for (int i = 0, n = this->valuehashes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->valuehashes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.LayerMarkerDigest)
}

::google::protobuf::uint8* LayerMarkerDigest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.LayerMarkerDigest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 markerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->markerid(), target);
  }

  // repeated int32 valueHashes = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->valuehashes_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.LayerMarkerDigest)
  return target;
}

size_t LayerMarkerDigest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.LayerMarkerDigest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 markerId = 1;
  if (has_markerid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->markerid());
  }
  // repeated int32 valueHashes = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->valuehashes_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->valuehashes_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerMarkerDigest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.LayerMarkerDigest)
  GOOGLE_DCHECK_NE(&from, this);
  const LayerMarkerDigest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LayerMarkerDigest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.LayerMarkerDigest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.LayerMarkerDigest)
    MergeFrom(*source);
  }
}

void LayerMarkerDigest::MergeFrom(const LayerMarkerDigest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.LayerMarkerDigest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  valuehashes_.MergeFrom(from.valuehashes_);
  if (from.has_markerid()) {
    set_markerid(from.markerid());
  }
}

void LayerMarkerDigest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.LayerMarkerDigest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerMarkerDigest::CopyFrom(const LayerMarkerDigest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.LayerMarkerDigest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerMarkerDigest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LayerMarkerDigest::Swap(LayerMarkerDigest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayerMarkerDigest::InternalSwap(LayerMarkerDigest* other) {
  using std::swap;
  valuehashes_.InternalSwap(&other->valuehashes_);
  swap(markerid_, other->markerid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LayerMarkerDigest::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayerMarkerDigest

// required int32 markerId = 1;
bool LayerMarkerDigest::has_markerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LayerMarkerDigest::set_has_markerid() {
  _has_bits_[0] |= 0x00000001u;
}
void LayerMarkerDigest::clear_has_markerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LayerMarkerDigest::clear_markerid() {
  markerid_ = 0;
  clear_has_markerid();
}
::google::protobuf::int32 LayerMarkerDigest::markerid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LayerMarkerDigest.markerId)
  return markerid_;
}
void LayerMarkerDigest::set_markerid(::google::protobuf::int32 value) {
  set_has_markerid();
  markerid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.LayerMarkerDigest.markerId)
}

// repeated int32 valueHashes = 2;
int LayerMarkerDigest::valuehashes_size() const {
  return valuehashes_.size();
}
void LayerMarkerDigest::clear_valuehashes() {
  valuehashes_.Clear();
}
::google::protobuf::int32 LayerMarkerDigest::valuehashes(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LayerMarkerDigest.valueHashes)
  return valuehashes_.Get(index);
}
void LayerMarkerDigest::set_valuehashes(int index, ::google::protobuf::int32 value) {
  valuehashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.LayerMarkerDigest.valueHashes)
}
void LayerMarkerDigest::add_valuehashes(::google::protobuf::int32 value) {
  valuehashes_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.LayerMarkerDigest.valueHashes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LayerMarkerDigest::valuehashes() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.LayerMarkerDigest.valueHashes)
  return valuehashes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LayerMarkerDigest::mutable_valuehashes() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.LayerMarkerDigest.valueHashes)
  return &valuehashes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconDocParserInfoDigest::kTitleFieldNumber;
const int SiliconDocParserInfoDigest::kDescriptionFieldNumber;
const int SiliconDocParserInfoDigest::kBodyFieldNumber;
const int SiliconDocParserInfoDigest::kMainImageUrlFieldNumber;
const int SiliconDocParserInfoDigest::kImageGalleryUrlsFieldNumber;
const int SiliconDocParserInfoDigest::kVideoUrlsFieldNumber;
const int SiliconDocParserInfoDigest::kCustomFieldsFieldNumber;
const int SiliconDocParserInfoDigest::kLayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconDocParserInfoDigest::SiliconDocParserInfoDigest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
}
SiliconDocParserInfoDigest::SiliconDocParserInfoDigest(const SiliconDocParserInfoDigest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      title_(from.title_),
      description_(from.description_),
      body_(from.body_),
      mainimageurl_(from.mainimageurl_),
      imagegalleryurls_(from.imagegalleryurls_),
      videourls_(from.videourls_),
      layer_(from.layer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_customfields()) {
    customfields_ = new ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests(*from.customfields_);
  } else {
    customfields_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
}

void SiliconDocParserInfoDigest::SharedCtor() {
  _cached_size_ = 0;
  customfields_ = NULL;
}

SiliconDocParserInfoDigest::~SiliconDocParserInfoDigest() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
  SharedDtor();
}

void SiliconDocParserInfoDigest::SharedDtor() {
  if (this != internal_default_instance()) delete customfields_;
}

void SiliconDocParserInfoDigest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconDocParserInfoDigest::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconDocParserInfoDigest& SiliconDocParserInfoDigest::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconDocParserInfoDigest* SiliconDocParserInfoDigest::New(::google::protobuf::Arena* arena) const {
  SiliconDocParserInfoDigest* n = new SiliconDocParserInfoDigest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconDocParserInfoDigest::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.Clear();
  description_.Clear();
  body_.Clear();
  mainimageurl_.Clear();
  imagegalleryurls_.Clear();
  videourls_.Clear();
  layer_.Clear();
  if (has_customfields()) {
    GOOGLE_DCHECK(customfields_ != NULL);
    customfields_->::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconDocParserInfoDigest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.MarkerDigest title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.MarkerDigest description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.MarkerDigest body = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.MarkerDigest mainImageUrl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mainimageurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.MarkerMultiDigest imageGalleryUrls = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imagegalleryurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.MarkerMultiDigest videoUrls = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_videourls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.CustomFieldMarkerDigests customFields = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customfields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.LayerMarkerDigest layer = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
  return false;
#undef DO_
}

void SiliconDocParserInfoDigest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.MarkerDigest title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->title_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->title(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.webbase.blobs.MarkerDigest description = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->description_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->description(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.webbase.blobs.MarkerDigest body = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->body_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->body(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.webbase.blobs.MarkerDigest mainImageUrl = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mainimageurl_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mainimageurl(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.webbase.blobs.MarkerMultiDigest imageGalleryUrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->imagegalleryurls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->imagegalleryurls(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.webbase.blobs.MarkerMultiDigest videoUrls = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->videourls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->videourls(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.CustomFieldMarkerDigests customFields = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->customfields_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.LayerMarkerDigest layer = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->layer_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->layer(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
}

::google::protobuf::uint8* SiliconDocParserInfoDigest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.MarkerDigest title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->title_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->title(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.MarkerDigest description = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->description_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->description(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.MarkerDigest body = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->body_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->body(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.MarkerDigest mainImageUrl = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mainimageurl_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->mainimageurl(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.MarkerMultiDigest imageGalleryUrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->imagegalleryurls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->imagegalleryurls(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.MarkerMultiDigest videoUrls = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->videourls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->videourls(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.CustomFieldMarkerDigests customFields = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->customfields_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.LayerMarkerDigest layer = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->layer_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->layer(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
  return target;
}

size_t SiliconDocParserInfoDigest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.MarkerDigest title = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->title_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.blobs.MarkerDigest description = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->description_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->description(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.blobs.MarkerDigest body = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->body_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.blobs.MarkerDigest mainImageUrl = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->mainimageurl_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mainimageurl(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.blobs.MarkerMultiDigest imageGalleryUrls = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->imagegalleryurls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imagegalleryurls(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.blobs.MarkerMultiDigest videoUrls = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->videourls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->videourls(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.blobs.LayerMarkerDigest layer = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->layer_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer(static_cast<int>(i)));
    }
  }

  // optional .ru.mail.go.webbase.blobs.CustomFieldMarkerDigests customFields = 7;
  if (has_customfields()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->customfields_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconDocParserInfoDigest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconDocParserInfoDigest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconDocParserInfoDigest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
    MergeFrom(*source);
  }
}

void SiliconDocParserInfoDigest::MergeFrom(const SiliconDocParserInfoDigest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  title_.MergeFrom(from.title_);
  description_.MergeFrom(from.description_);
  body_.MergeFrom(from.body_);
  mainimageurl_.MergeFrom(from.mainimageurl_);
  imagegalleryurls_.MergeFrom(from.imagegalleryurls_);
  videourls_.MergeFrom(from.videourls_);
  layer_.MergeFrom(from.layer_);
  if (from.has_customfields()) {
    mutable_customfields()->::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests::MergeFrom(from.customfields());
  }
}

void SiliconDocParserInfoDigest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconDocParserInfoDigest::CopyFrom(const SiliconDocParserInfoDigest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconDocParserInfoDigest::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->title())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->description())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->body())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->mainimageurl())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->imagegalleryurls())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->videourls())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->layer())) return false;
  if (has_customfields()) {
    if (!this->customfields_->IsInitialized()) return false;
  }
  return true;
}

void SiliconDocParserInfoDigest::Swap(SiliconDocParserInfoDigest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconDocParserInfoDigest::InternalSwap(SiliconDocParserInfoDigest* other) {
  using std::swap;
  title_.InternalSwap(&other->title_);
  description_.InternalSwap(&other->description_);
  body_.InternalSwap(&other->body_);
  mainimageurl_.InternalSwap(&other->mainimageurl_);
  imagegalleryurls_.InternalSwap(&other->imagegalleryurls_);
  videourls_.InternalSwap(&other->videourls_);
  layer_.InternalSwap(&other->layer_);
  swap(customfields_, other->customfields_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconDocParserInfoDigest::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconDocParserInfoDigest

// repeated .ru.mail.go.webbase.blobs.MarkerDigest title = 1;
int SiliconDocParserInfoDigest::title_size() const {
  return title_.size();
}
void SiliconDocParserInfoDigest::clear_title() {
  title_.Clear();
}
const ::ru::mail::go::webbase::blobs::MarkerDigest& SiliconDocParserInfoDigest::title(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.title)
  return title_.Get(index);
}
::ru::mail::go::webbase::blobs::MarkerDigest* SiliconDocParserInfoDigest::mutable_title(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.title)
  return title_.Mutable(index);
}
::ru::mail::go::webbase::blobs::MarkerDigest* SiliconDocParserInfoDigest::add_title() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.title)
  return title_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >*
SiliconDocParserInfoDigest::mutable_title() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.title)
  return &title_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >&
SiliconDocParserInfoDigest::title() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.title)
  return title_;
}

// repeated .ru.mail.go.webbase.blobs.MarkerDigest description = 2;
int SiliconDocParserInfoDigest::description_size() const {
  return description_.size();
}
void SiliconDocParserInfoDigest::clear_description() {
  description_.Clear();
}
const ::ru::mail::go::webbase::blobs::MarkerDigest& SiliconDocParserInfoDigest::description(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.description)
  return description_.Get(index);
}
::ru::mail::go::webbase::blobs::MarkerDigest* SiliconDocParserInfoDigest::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.description)
  return description_.Mutable(index);
}
::ru::mail::go::webbase::blobs::MarkerDigest* SiliconDocParserInfoDigest::add_description() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.description)
  return description_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >*
SiliconDocParserInfoDigest::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.description)
  return &description_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >&
SiliconDocParserInfoDigest::description() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.description)
  return description_;
}

// repeated .ru.mail.go.webbase.blobs.MarkerDigest body = 3;
int SiliconDocParserInfoDigest::body_size() const {
  return body_.size();
}
void SiliconDocParserInfoDigest::clear_body() {
  body_.Clear();
}
const ::ru::mail::go::webbase::blobs::MarkerDigest& SiliconDocParserInfoDigest::body(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.body)
  return body_.Get(index);
}
::ru::mail::go::webbase::blobs::MarkerDigest* SiliconDocParserInfoDigest::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.body)
  return body_.Mutable(index);
}
::ru::mail::go::webbase::blobs::MarkerDigest* SiliconDocParserInfoDigest::add_body() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.body)
  return body_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >*
SiliconDocParserInfoDigest::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.body)
  return &body_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >&
SiliconDocParserInfoDigest::body() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.body)
  return body_;
}

// repeated .ru.mail.go.webbase.blobs.MarkerDigest mainImageUrl = 4;
int SiliconDocParserInfoDigest::mainimageurl_size() const {
  return mainimageurl_.size();
}
void SiliconDocParserInfoDigest::clear_mainimageurl() {
  mainimageurl_.Clear();
}
const ::ru::mail::go::webbase::blobs::MarkerDigest& SiliconDocParserInfoDigest::mainimageurl(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.mainImageUrl)
  return mainimageurl_.Get(index);
}
::ru::mail::go::webbase::blobs::MarkerDigest* SiliconDocParserInfoDigest::mutable_mainimageurl(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.mainImageUrl)
  return mainimageurl_.Mutable(index);
}
::ru::mail::go::webbase::blobs::MarkerDigest* SiliconDocParserInfoDigest::add_mainimageurl() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.mainImageUrl)
  return mainimageurl_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >*
SiliconDocParserInfoDigest::mutable_mainimageurl() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.mainImageUrl)
  return &mainimageurl_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >&
SiliconDocParserInfoDigest::mainimageurl() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.mainImageUrl)
  return mainimageurl_;
}

// repeated .ru.mail.go.webbase.blobs.MarkerMultiDigest imageGalleryUrls = 5;
int SiliconDocParserInfoDigest::imagegalleryurls_size() const {
  return imagegalleryurls_.size();
}
void SiliconDocParserInfoDigest::clear_imagegalleryurls() {
  imagegalleryurls_.Clear();
}
const ::ru::mail::go::webbase::blobs::MarkerMultiDigest& SiliconDocParserInfoDigest::imagegalleryurls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.imageGalleryUrls)
  return imagegalleryurls_.Get(index);
}
::ru::mail::go::webbase::blobs::MarkerMultiDigest* SiliconDocParserInfoDigest::mutable_imagegalleryurls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.imageGalleryUrls)
  return imagegalleryurls_.Mutable(index);
}
::ru::mail::go::webbase::blobs::MarkerMultiDigest* SiliconDocParserInfoDigest::add_imagegalleryurls() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.imageGalleryUrls)
  return imagegalleryurls_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerMultiDigest >*
SiliconDocParserInfoDigest::mutable_imagegalleryurls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.imageGalleryUrls)
  return &imagegalleryurls_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerMultiDigest >&
SiliconDocParserInfoDigest::imagegalleryurls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.imageGalleryUrls)
  return imagegalleryurls_;
}

// repeated .ru.mail.go.webbase.blobs.MarkerMultiDigest videoUrls = 6;
int SiliconDocParserInfoDigest::videourls_size() const {
  return videourls_.size();
}
void SiliconDocParserInfoDigest::clear_videourls() {
  videourls_.Clear();
}
const ::ru::mail::go::webbase::blobs::MarkerMultiDigest& SiliconDocParserInfoDigest::videourls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.videoUrls)
  return videourls_.Get(index);
}
::ru::mail::go::webbase::blobs::MarkerMultiDigest* SiliconDocParserInfoDigest::mutable_videourls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.videoUrls)
  return videourls_.Mutable(index);
}
::ru::mail::go::webbase::blobs::MarkerMultiDigest* SiliconDocParserInfoDigest::add_videourls() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.videoUrls)
  return videourls_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerMultiDigest >*
SiliconDocParserInfoDigest::mutable_videourls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.videoUrls)
  return &videourls_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerMultiDigest >&
SiliconDocParserInfoDigest::videourls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.videoUrls)
  return videourls_;
}

// optional .ru.mail.go.webbase.blobs.CustomFieldMarkerDigests customFields = 7;
bool SiliconDocParserInfoDigest::has_customfields() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconDocParserInfoDigest::set_has_customfields() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconDocParserInfoDigest::clear_has_customfields() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconDocParserInfoDigest::clear_customfields() {
  if (customfields_ != NULL) customfields_->::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests::Clear();
  clear_has_customfields();
}
const ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests& SiliconDocParserInfoDigest::customfields() const {
  const ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests* p = customfields_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.customFields)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests*>(
      &::ru::mail::go::webbase::blobs::_CustomFieldMarkerDigests_default_instance_);
}
::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests* SiliconDocParserInfoDigest::mutable_customfields() {
  set_has_customfields();
  if (customfields_ == NULL) {
    customfields_ = new ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.customFields)
  return customfields_;
}
::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests* SiliconDocParserInfoDigest::release_customfields() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.customFields)
  clear_has_customfields();
  ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests* temp = customfields_;
  customfields_ = NULL;
  return temp;
}
void SiliconDocParserInfoDigest::set_allocated_customfields(::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests* customfields) {
  delete customfields_;
  customfields_ = customfields;
  if (customfields) {
    set_has_customfields();
  } else {
    clear_has_customfields();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.customFields)
}

// repeated .ru.mail.go.webbase.blobs.LayerMarkerDigest layer = 8;
int SiliconDocParserInfoDigest::layer_size() const {
  return layer_.size();
}
void SiliconDocParserInfoDigest::clear_layer() {
  layer_.Clear();
}
const ::ru::mail::go::webbase::blobs::LayerMarkerDigest& SiliconDocParserInfoDigest::layer(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.layer)
  return layer_.Get(index);
}
::ru::mail::go::webbase::blobs::LayerMarkerDigest* SiliconDocParserInfoDigest::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.layer)
  return layer_.Mutable(index);
}
::ru::mail::go::webbase::blobs::LayerMarkerDigest* SiliconDocParserInfoDigest::add_layer() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.layer)
  return layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::LayerMarkerDigest >*
SiliconDocParserInfoDigest::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.layer)
  return &layer_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::LayerMarkerDigest >&
SiliconDocParserInfoDigest::layer() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.layer)
  return layer_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValuePair::kKeyFieldNumber;
const int KeyValuePair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValuePair::KeyValuePair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.KeyValuePair)
}
KeyValuePair::KeyValuePair(const KeyValuePair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.KeyValuePair)
}

void KeyValuePair::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KeyValuePair::~KeyValuePair() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.KeyValuePair)
  SharedDtor();
}

void KeyValuePair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyValuePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValuePair::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyValuePair& KeyValuePair::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyValuePair* KeyValuePair::New(::google::protobuf::Arena* arena) const {
  KeyValuePair* n = new KeyValuePair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValuePair::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.KeyValuePair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeyValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.KeyValuePair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.KeyValuePair.Key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.KeyValuePair.Value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.KeyValuePair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.KeyValuePair)
  return false;
#undef DO_
}

void KeyValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.KeyValuePair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.KeyValuePair.Key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string Value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.KeyValuePair.Value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.KeyValuePair)
}

::google::protobuf::uint8* KeyValuePair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.KeyValuePair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.KeyValuePair.Key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string Value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.KeyValuePair.Value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.KeyValuePair)
  return target;
}

size_t KeyValuePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.KeyValuePair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValuePair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.KeyValuePair)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValuePair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValuePair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.KeyValuePair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.KeyValuePair)
    MergeFrom(*source);
  }
}

void KeyValuePair::MergeFrom(const KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.KeyValuePair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void KeyValuePair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.KeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValuePair::CopyFrom(const KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.KeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValuePair::IsInitialized() const {
  return true;
}

void KeyValuePair::Swap(KeyValuePair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValuePair::InternalSwap(KeyValuePair* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyValuePair::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValuePair

// optional string Key = 1;
bool KeyValuePair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeyValuePair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void KeyValuePair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeyValuePair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.KeyValuePair.Key)
  return key_.GetNoArena();
}
void KeyValuePair::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.KeyValuePair.Key)
}
#if LANG_CXX11
void KeyValuePair::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.KeyValuePair.Key)
}
#endif
void KeyValuePair::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.KeyValuePair.Key)
}
void KeyValuePair::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.KeyValuePair.Key)
}
::std::string* KeyValuePair::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.KeyValuePair.Key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.KeyValuePair.Key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyValuePair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.KeyValuePair.Key)
}

// optional string Value = 2;
bool KeyValuePair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeyValuePair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void KeyValuePair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeyValuePair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.KeyValuePair.Value)
  return value_.GetNoArena();
}
void KeyValuePair::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.KeyValuePair.Value)
}
#if LANG_CXX11
void KeyValuePair::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.KeyValuePair.Value)
}
#endif
void KeyValuePair::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.KeyValuePair.Value)
}
void KeyValuePair::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.KeyValuePair.Value)
}
::std::string* KeyValuePair::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.KeyValuePair.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.KeyValuePair.Value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyValuePair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.KeyValuePair.Value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProvidersParams::kKeyValuePairsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProvidersParams::ProvidersParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ProvidersParams)
}
ProvidersParams::ProvidersParams(const ProvidersParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keyvaluepairs_(from.keyvaluepairs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ProvidersParams)
}

void ProvidersParams::SharedCtor() {
  _cached_size_ = 0;
}

ProvidersParams::~ProvidersParams() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ProvidersParams)
  SharedDtor();
}

void ProvidersParams::SharedDtor() {
}

void ProvidersParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProvidersParams::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProvidersParams& ProvidersParams::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProvidersParams* ProvidersParams::New(::google::protobuf::Arena* arena) const {
  ProvidersParams* n = new ProvidersParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProvidersParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ProvidersParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyvaluepairs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProvidersParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ProvidersParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.KeyValuePair keyValuePairs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyvaluepairs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ProvidersParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ProvidersParams)
  return false;
#undef DO_
}

void ProvidersParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ProvidersParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.KeyValuePair keyValuePairs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keyvaluepairs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keyvaluepairs(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ProvidersParams)
}

::google::protobuf::uint8* ProvidersParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ProvidersParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.KeyValuePair keyValuePairs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keyvaluepairs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keyvaluepairs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ProvidersParams)
  return target;
}

size_t ProvidersParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ProvidersParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.KeyValuePair keyValuePairs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->keyvaluepairs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keyvaluepairs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProvidersParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ProvidersParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ProvidersParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProvidersParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ProvidersParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ProvidersParams)
    MergeFrom(*source);
  }
}

void ProvidersParams::MergeFrom(const ProvidersParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ProvidersParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keyvaluepairs_.MergeFrom(from.keyvaluepairs_);
}

void ProvidersParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ProvidersParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProvidersParams::CopyFrom(const ProvidersParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ProvidersParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProvidersParams::IsInitialized() const {
  return true;
}

void ProvidersParams::Swap(ProvidersParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProvidersParams::InternalSwap(ProvidersParams* other) {
  using std::swap;
  keyvaluepairs_.InternalSwap(&other->keyvaluepairs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProvidersParams::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProvidersParams

// repeated .ru.mail.go.webbase.blobs.KeyValuePair keyValuePairs = 1;
int ProvidersParams::keyvaluepairs_size() const {
  return keyvaluepairs_.size();
}
void ProvidersParams::clear_keyvaluepairs() {
  keyvaluepairs_.Clear();
}
const ::ru::mail::go::webbase::blobs::KeyValuePair& ProvidersParams::keyvaluepairs(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ProvidersParams.keyValuePairs)
  return keyvaluepairs_.Get(index);
}
::ru::mail::go::webbase::blobs::KeyValuePair* ProvidersParams::mutable_keyvaluepairs(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ProvidersParams.keyValuePairs)
  return keyvaluepairs_.Mutable(index);
}
::ru::mail::go::webbase::blobs::KeyValuePair* ProvidersParams::add_keyvaluepairs() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ProvidersParams.keyValuePairs)
  return keyvaluepairs_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::KeyValuePair >*
ProvidersParams::mutable_keyvaluepairs() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ProvidersParams.keyValuePairs)
  return &keyvaluepairs_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::KeyValuePair >&
ProvidersParams::keyvaluepairs() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ProvidersParams.keyValuePairs)
  return keyvaluepairs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomField::kNameFieldNumber;
const int CustomField::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomField::CustomField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.CustomField)
}
CustomField::CustomField(const CustomField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.CustomField)
}

void CustomField::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CustomField::~CustomField() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.CustomField)
  SharedDtor();
}

void CustomField::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CustomField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomField::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomField& CustomField::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomField* CustomField::New(::google::protobuf::Arena* arena) const {
  CustomField* n = new CustomField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomField::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.CustomField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CustomField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.CustomField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.CustomField.Name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.CustomField.Value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.CustomField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.CustomField)
  return false;
#undef DO_
}

void CustomField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.CustomField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CustomField.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string Value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CustomField.Value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.CustomField)
}

::google::protobuf::uint8* CustomField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.CustomField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CustomField.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string Value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CustomField.Value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.CustomField)
  return target;
}

size_t CustomField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.CustomField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string Name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // optional string Value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.CustomField)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.CustomField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.CustomField)
    MergeFrom(*source);
  }
}

void CustomField::MergeFrom(const CustomField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.CustomField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CustomField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.CustomField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomField::CopyFrom(const CustomField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.CustomField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CustomField::Swap(CustomField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomField::InternalSwap(CustomField* other) {
  using std::swap;
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomField::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomField

// required string Name = 1;
bool CustomField::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CustomField::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CustomField::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CustomField::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CustomField::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomField.Name)
  return name_.GetNoArena();
}
void CustomField::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CustomField.Name)
}
#if LANG_CXX11
void CustomField::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CustomField.Name)
}
#endif
void CustomField::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CustomField.Name)
}
void CustomField::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CustomField.Name)
}
::std::string* CustomField::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomField.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CustomField::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CustomField.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CustomField::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CustomField.Name)
}

// optional string Value = 2;
bool CustomField::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CustomField::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CustomField::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CustomField::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CustomField::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomField.Value)
  return value_.GetNoArena();
}
void CustomField::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CustomField.Value)
}
#if LANG_CXX11
void CustomField::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CustomField.Value)
}
#endif
void CustomField::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CustomField.Value)
}
void CustomField::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CustomField.Value)
}
::std::string* CustomField::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomField.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CustomField::release_value() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CustomField.Value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CustomField::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CustomField.Value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomFields::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomFields::CustomFields()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.CustomFields)
}
CustomFields::CustomFields(const CustomFields& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.CustomFields)
}

void CustomFields::SharedCtor() {
  _cached_size_ = 0;
}

CustomFields::~CustomFields() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.CustomFields)
  SharedDtor();
}

void CustomFields::SharedDtor() {
}

void CustomFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomFields::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomFields& CustomFields::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomFields* CustomFields::New(::google::protobuf::Arena* arena) const {
  CustomFields* n = new CustomFields;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomFields::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.CustomFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CustomFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.CustomFields)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.CustomField items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.CustomFields)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.CustomFields)
  return false;
#undef DO_
}

void CustomFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.CustomFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.CustomField items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.CustomFields)
}

::google::protobuf::uint8* CustomFields::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.CustomFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.CustomField items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.CustomFields)
  return target;
}

size_t CustomFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.CustomFields)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.CustomField items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomFields::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.CustomFields)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomFields* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomFields>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.CustomFields)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.CustomFields)
    MergeFrom(*source);
  }
}

void CustomFields::MergeFrom(const CustomFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.CustomFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void CustomFields::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.CustomFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomFields::CopyFrom(const CustomFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.CustomFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomFields::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void CustomFields::Swap(CustomFields* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomFields::InternalSwap(CustomFields* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomFields::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomFields

// repeated .ru.mail.go.webbase.blobs.CustomField items = 1;
int CustomFields::items_size() const {
  return items_.size();
}
void CustomFields::clear_items() {
  items_.Clear();
}
const ::ru::mail::go::webbase::blobs::CustomField& CustomFields::items(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomFields.items)
  return items_.Get(index);
}
::ru::mail::go::webbase::blobs::CustomField* CustomFields::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomFields.items)
  return items_.Mutable(index);
}
::ru::mail::go::webbase::blobs::CustomField* CustomFields::add_items() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.CustomFields.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CustomField >*
CustomFields::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.CustomFields.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CustomField >&
CustomFields::items() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.CustomFields.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconeNewsTagsData::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconeNewsTagsData::SiliconeNewsTagsData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
}
SiliconeNewsTagsData::SiliconeNewsTagsData(const SiliconeNewsTagsData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
}

void SiliconeNewsTagsData::SharedCtor() {
  _cached_size_ = 0;
}

SiliconeNewsTagsData::~SiliconeNewsTagsData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
  SharedDtor();
}

void SiliconeNewsTagsData::SharedDtor() {
}

void SiliconeNewsTagsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconeNewsTagsData::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconeNewsTagsData& SiliconeNewsTagsData::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconeNewsTagsData* SiliconeNewsTagsData::New(::google::protobuf::Arena* arena) const {
  SiliconeNewsTagsData* n = new SiliconeNewsTagsData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconeNewsTagsData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconeNewsTagsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.SiliconeNewsTagData tags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
  return false;
#undef DO_
}

void SiliconeNewsTagsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.SiliconeNewsTagData tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tags(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
}

::google::protobuf::uint8* SiliconeNewsTagsData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.SiliconeNewsTagData tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tags(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
  return target;
}

size_t SiliconeNewsTagsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.SiliconeNewsTagData tags = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconeNewsTagsData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconeNewsTagsData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconeNewsTagsData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
    MergeFrom(*source);
  }
}

void SiliconeNewsTagsData::MergeFrom(const SiliconeNewsTagsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
}

void SiliconeNewsTagsData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconeNewsTagsData::CopyFrom(const SiliconeNewsTagsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconeNewsTagsData::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->tags())) return false;
  return true;
}

void SiliconeNewsTagsData::Swap(SiliconeNewsTagsData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconeNewsTagsData::InternalSwap(SiliconeNewsTagsData* other) {
  using std::swap;
  tags_.InternalSwap(&other->tags_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconeNewsTagsData::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconeNewsTagsData

// repeated .ru.mail.go.webbase.blobs.SiliconeNewsTagData tags = 1;
int SiliconeNewsTagsData::tags_size() const {
  return tags_.size();
}
void SiliconeNewsTagsData::clear_tags() {
  tags_.Clear();
}
const ::ru::mail::go::webbase::blobs::SiliconeNewsTagData& SiliconeNewsTagsData::tags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeNewsTagsData.tags)
  return tags_.Get(index);
}
::ru::mail::go::webbase::blobs::SiliconeNewsTagData* SiliconeNewsTagsData::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeNewsTagsData.tags)
  return tags_.Mutable(index);
}
::ru::mail::go::webbase::blobs::SiliconeNewsTagData* SiliconeNewsTagsData::add_tags() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconeNewsTagsData.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeNewsTagData >*
SiliconeNewsTagsData::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconeNewsTagsData.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeNewsTagData >&
SiliconeNewsTagsData::tags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconeNewsTagsData.tags)
  return tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconeNewsTagData::kIdFieldNumber;
const int SiliconeNewsTagData::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconeNewsTagData::SiliconeNewsTagData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
}
SiliconeNewsTagData::SiliconeNewsTagData(const SiliconeNewsTagData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
}

void SiliconeNewsTagData::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

SiliconeNewsTagData::~SiliconeNewsTagData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
  SharedDtor();
}

void SiliconeNewsTagData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiliconeNewsTagData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconeNewsTagData::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconeNewsTagData& SiliconeNewsTagData::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconeNewsTagData* SiliconeNewsTagData::New(::google::protobuf::Arena* arena) const {
  SiliconeNewsTagData* n = new SiliconeNewsTagData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconeNewsTagData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconeNewsTagData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeNewsTagData.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
  return false;
#undef DO_
}

void SiliconeNewsTagData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeNewsTagData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
}

::google::protobuf::uint8* SiliconeNewsTagData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeNewsTagData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
  return target;
}

size_t SiliconeNewsTagData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  // optional string name = 2;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconeNewsTagData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconeNewsTagData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconeNewsTagData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
    MergeFrom(*source);
  }
}

void SiliconeNewsTagData::MergeFrom(const SiliconeNewsTagData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiliconeNewsTagData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconeNewsTagData::CopyFrom(const SiliconeNewsTagData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconeNewsTagData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void SiliconeNewsTagData::Swap(SiliconeNewsTagData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconeNewsTagData::InternalSwap(SiliconeNewsTagData* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconeNewsTagData::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconeNewsTagData

// required int32 id = 1;
bool SiliconeNewsTagData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiliconeNewsTagData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SiliconeNewsTagData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiliconeNewsTagData::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 SiliconeNewsTagData::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeNewsTagData.id)
  return id_;
}
void SiliconeNewsTagData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeNewsTagData.id)
}

// optional string name = 2;
bool SiliconeNewsTagData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconeNewsTagData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconeNewsTagData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconeNewsTagData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& SiliconeNewsTagData::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeNewsTagData.name)
  return name_.GetNoArena();
}
void SiliconeNewsTagData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeNewsTagData.name)
}
#if LANG_CXX11
void SiliconeNewsTagData::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeNewsTagData.name)
}
#endif
void SiliconeNewsTagData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeNewsTagData.name)
}
void SiliconeNewsTagData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeNewsTagData.name)
}
::std::string* SiliconeNewsTagData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeNewsTagData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeNewsTagData::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeNewsTagData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeNewsTagData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeNewsTagData.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconeNewsStoriesData::kStoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconeNewsStoriesData::SiliconeNewsStoriesData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
}
SiliconeNewsStoriesData::SiliconeNewsStoriesData(const SiliconeNewsStoriesData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stories_(from.stories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
}

void SiliconeNewsStoriesData::SharedCtor() {
  _cached_size_ = 0;
}

SiliconeNewsStoriesData::~SiliconeNewsStoriesData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
  SharedDtor();
}

void SiliconeNewsStoriesData::SharedDtor() {
}

void SiliconeNewsStoriesData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconeNewsStoriesData::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconeNewsStoriesData& SiliconeNewsStoriesData::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconeNewsStoriesData* SiliconeNewsStoriesData::New(::google::protobuf::Arena* arena) const {
  SiliconeNewsStoriesData* n = new SiliconeNewsStoriesData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconeNewsStoriesData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stories_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconeNewsStoriesData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.SiliconeNewsStoryData stories = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
  return false;
#undef DO_
}

void SiliconeNewsStoriesData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.SiliconeNewsStoryData stories = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stories_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stories(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
}

::google::protobuf::uint8* SiliconeNewsStoriesData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.SiliconeNewsStoryData stories = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stories_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->stories(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
  return target;
}

size_t SiliconeNewsStoriesData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.SiliconeNewsStoryData stories = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->stories_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stories(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconeNewsStoriesData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconeNewsStoriesData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconeNewsStoriesData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
    MergeFrom(*source);
  }
}

void SiliconeNewsStoriesData::MergeFrom(const SiliconeNewsStoriesData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stories_.MergeFrom(from.stories_);
}

void SiliconeNewsStoriesData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconeNewsStoriesData::CopyFrom(const SiliconeNewsStoriesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconeNewsStoriesData::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->stories())) return false;
  return true;
}

void SiliconeNewsStoriesData::Swap(SiliconeNewsStoriesData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconeNewsStoriesData::InternalSwap(SiliconeNewsStoriesData* other) {
  using std::swap;
  stories_.InternalSwap(&other->stories_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconeNewsStoriesData::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconeNewsStoriesData

// repeated .ru.mail.go.webbase.blobs.SiliconeNewsStoryData stories = 1;
int SiliconeNewsStoriesData::stories_size() const {
  return stories_.size();
}
void SiliconeNewsStoriesData::clear_stories() {
  stories_.Clear();
}
const ::ru::mail::go::webbase::blobs::SiliconeNewsStoryData& SiliconeNewsStoriesData::stories(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData.stories)
  return stories_.Get(index);
}
::ru::mail::go::webbase::blobs::SiliconeNewsStoryData* SiliconeNewsStoriesData::mutable_stories(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData.stories)
  return stories_.Mutable(index);
}
::ru::mail::go::webbase::blobs::SiliconeNewsStoryData* SiliconeNewsStoriesData::add_stories() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData.stories)
  return stories_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeNewsStoryData >*
SiliconeNewsStoriesData::mutable_stories() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData.stories)
  return &stories_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeNewsStoryData >&
SiliconeNewsStoriesData::stories() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData.stories)
  return stories_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconeNewsStoryData::kIdFieldNumber;
const int SiliconeNewsStoryData::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiliconeNewsStoryData::SiliconeNewsStoryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
}
SiliconeNewsStoryData::SiliconeNewsStoryData(const SiliconeNewsStoryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
}

void SiliconeNewsStoryData::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

SiliconeNewsStoryData::~SiliconeNewsStoryData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
  SharedDtor();
}

void SiliconeNewsStoryData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiliconeNewsStoryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiliconeNewsStoryData::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiliconeNewsStoryData& SiliconeNewsStoryData::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiliconeNewsStoryData* SiliconeNewsStoryData::New(::google::protobuf::Arena* arena) const {
  SiliconeNewsStoryData* n = new SiliconeNewsStoryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiliconeNewsStoryData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiliconeNewsStoryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
  return false;
#undef DO_
}

void SiliconeNewsStoryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
}

::google::protobuf::uint8* SiliconeNewsStoryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
  return target;
}

size_t SiliconeNewsStoryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  // optional string name = 2;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiliconeNewsStoryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
  GOOGLE_DCHECK_NE(&from, this);
  const SiliconeNewsStoryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiliconeNewsStoryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
    MergeFrom(*source);
  }
}

void SiliconeNewsStoryData::MergeFrom(const SiliconeNewsStoryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiliconeNewsStoryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiliconeNewsStoryData::CopyFrom(const SiliconeNewsStoryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiliconeNewsStoryData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void SiliconeNewsStoryData::Swap(SiliconeNewsStoryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiliconeNewsStoryData::InternalSwap(SiliconeNewsStoryData* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiliconeNewsStoryData::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiliconeNewsStoryData

// required int32 id = 1;
bool SiliconeNewsStoryData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiliconeNewsStoryData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SiliconeNewsStoryData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiliconeNewsStoryData::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 SiliconeNewsStoryData::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.id)
  return id_;
}
void SiliconeNewsStoryData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.id)
}

// optional string name = 2;
bool SiliconeNewsStoryData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiliconeNewsStoryData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SiliconeNewsStoryData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiliconeNewsStoryData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& SiliconeNewsStoryData::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name)
  return name_.GetNoArena();
}
void SiliconeNewsStoryData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name)
}
#if LANG_CXX11
void SiliconeNewsStoryData::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name)
}
#endif
void SiliconeNewsStoryData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name)
}
void SiliconeNewsStoryData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name)
}
::std::string* SiliconeNewsStoryData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SiliconeNewsStoryData::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SiliconeNewsStoryData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RisksFields::kEroScoreFieldNumber;
const int RisksFields::kPornoScoreFieldNumber;
const int RisksFields::kSafeContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RisksFields::RisksFields()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_silicon_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.RisksFields)
}
RisksFields::RisksFields(const RisksFields& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eroscore_, &from.eroscore_,
    static_cast<size_t>(reinterpret_cast<char*>(&safecontent_) -
    reinterpret_cast<char*>(&eroscore_)) + sizeof(safecontent_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.RisksFields)
}

void RisksFields::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&eroscore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safecontent_) -
      reinterpret_cast<char*>(&eroscore_)) + sizeof(safecontent_));
}

RisksFields::~RisksFields() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.RisksFields)
  SharedDtor();
}

void RisksFields::SharedDtor() {
}

void RisksFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RisksFields::descriptor() {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RisksFields& RisksFields::default_instance() {
  protobuf_silicon_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

RisksFields* RisksFields::New(::google::protobuf::Arena* arena) const {
  RisksFields* n = new RisksFields;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RisksFields::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.RisksFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&eroscore_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&safecontent_) -
        reinterpret_cast<char*>(&eroscore_)) + sizeof(safecontent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RisksFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.RisksFields)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float eroScore = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_eroscore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eroscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pornoScore = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_pornoscore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pornoscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float safeContent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_safecontent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &safecontent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.RisksFields)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.RisksFields)
  return false;
#undef DO_
}

void RisksFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.RisksFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float eroScore = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->eroscore(), output);
  }

  // optional float pornoScore = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pornoscore(), output);
  }

  // optional float safeContent = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->safecontent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.RisksFields)
}

::google::protobuf::uint8* RisksFields::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.RisksFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float eroScore = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->eroscore(), target);
  }

  // optional float pornoScore = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pornoscore(), target);
  }

  // optional float safeContent = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->safecontent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.RisksFields)
  return target;
}

size_t RisksFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.RisksFields)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float eroScore = 1;
    if (has_eroscore()) {
      total_size += 1 + 4;
    }

    // optional float pornoScore = 2;
    if (has_pornoscore()) {
      total_size += 1 + 4;
    }

    // optional float safeContent = 3;
    if (has_safecontent()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RisksFields::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.RisksFields)
  GOOGLE_DCHECK_NE(&from, this);
  const RisksFields* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RisksFields>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.RisksFields)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.RisksFields)
    MergeFrom(*source);
  }
}

void RisksFields::MergeFrom(const RisksFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.RisksFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      eroscore_ = from.eroscore_;
    }
    if (cached_has_bits & 0x00000002u) {
      pornoscore_ = from.pornoscore_;
    }
    if (cached_has_bits & 0x00000004u) {
      safecontent_ = from.safecontent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RisksFields::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.RisksFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RisksFields::CopyFrom(const RisksFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.RisksFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RisksFields::IsInitialized() const {
  return true;
}

void RisksFields::Swap(RisksFields* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RisksFields::InternalSwap(RisksFields* other) {
  using std::swap;
  swap(eroscore_, other->eroscore_);
  swap(pornoscore_, other->pornoscore_);
  swap(safecontent_, other->safecontent_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RisksFields::GetMetadata() const {
  protobuf_silicon_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_silicon_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RisksFields

// optional float eroScore = 1;
bool RisksFields::has_eroscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RisksFields::set_has_eroscore() {
  _has_bits_[0] |= 0x00000001u;
}
void RisksFields::clear_has_eroscore() {
  _has_bits_[0] &= ~0x00000001u;
}
void RisksFields::clear_eroscore() {
  eroscore_ = 0;
  clear_has_eroscore();
}
float RisksFields::eroscore() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RisksFields.eroScore)
  return eroscore_;
}
void RisksFields::set_eroscore(float value) {
  set_has_eroscore();
  eroscore_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RisksFields.eroScore)
}

// optional float pornoScore = 2;
bool RisksFields::has_pornoscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RisksFields::set_has_pornoscore() {
  _has_bits_[0] |= 0x00000002u;
}
void RisksFields::clear_has_pornoscore() {
  _has_bits_[0] &= ~0x00000002u;
}
void RisksFields::clear_pornoscore() {
  pornoscore_ = 0;
  clear_has_pornoscore();
}
float RisksFields::pornoscore() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RisksFields.pornoScore)
  return pornoscore_;
}
void RisksFields::set_pornoscore(float value) {
  set_has_pornoscore();
  pornoscore_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RisksFields.pornoScore)
}

// optional float safeContent = 3;
bool RisksFields::has_safecontent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RisksFields::set_has_safecontent() {
  _has_bits_[0] |= 0x00000004u;
}
void RisksFields::clear_has_safecontent() {
  _has_bits_[0] &= ~0x00000004u;
}
void RisksFields::clear_safecontent() {
  safecontent_ = 0;
  clear_has_safecontent();
}
float RisksFields::safecontent() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RisksFields.safeContent)
  return safecontent_;
}
void RisksFields::set_safecontent(float value) {
  set_has_safecontent();
  safecontent_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RisksFields.safeContent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
const ::std::string SiliconFetchedDoc_indexistoId_default("");
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconFetchedDoc::kIndexistoIdFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::SiliconFetchedDoc,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  SiliconFetchedDoc::indexistoId(kIndexistoIdFieldNumber, SiliconFetchedDoc_indexistoId_default);
const ::std::string SiliconFetchedDoc_page_source_default("");
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconFetchedDoc::kPageSourceFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::SiliconFetchedDoc,
    ::google::protobuf::internal::StringTypeTraits, 12, false >
  SiliconFetchedDoc::page_source(kPageSourceFieldNumber, SiliconFetchedDoc_page_source_default);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconFetchedDoc::kParsedDateFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::SiliconFetchedDoc,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
  SiliconFetchedDoc::parsedDate(kParsedDateFieldNumber, GOOGLE_LONGLONG(0));
const ::std::string SiliconFetchedDoc_routeKey_default("");
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconFetchedDoc::kRouteKeyFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::SiliconFetchedDoc,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  SiliconFetchedDoc::routeKey(kRouteKeyFieldNumber, SiliconFetchedDoc_routeKey_default);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconFetchedDoc::kCosmoSourceIdFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::SiliconFetchedDoc,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
  SiliconFetchedDoc::cosmoSourceId(kCosmoSourceIdFieldNumber, GOOGLE_LONGLONG(0));
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiliconFetchedDoc::kTopicIdFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::SiliconFetchedDoc,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
  SiliconFetchedDoc::topicId(kTopicIdFieldNumber, GOOGLE_LONGLONG(0));

// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
