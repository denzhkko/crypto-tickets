// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: silicon_data.proto

#ifndef PROTOBUF_silicon_5fdata_2eproto__INCLUDED
#define PROTOBUF_silicon_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "image_defs.pb.h"
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class CustomAdminFields;
class CustomAdminFieldsDefaultTypeInternal;
extern CustomAdminFieldsDefaultTypeInternal _CustomAdminFields_default_instance_;
class CustomField;
class CustomFieldDefaultTypeInternal;
extern CustomFieldDefaultTypeInternal _CustomField_default_instance_;
class CustomFieldMarkerDigest;
class CustomFieldMarkerDigestDefaultTypeInternal;
extern CustomFieldMarkerDigestDefaultTypeInternal _CustomFieldMarkerDigest_default_instance_;
class CustomFieldMarkerDigests;
class CustomFieldMarkerDigestsDefaultTypeInternal;
extern CustomFieldMarkerDigestsDefaultTypeInternal _CustomFieldMarkerDigests_default_instance_;
class CustomFields;
class CustomFieldsDefaultTypeInternal;
extern CustomFieldsDefaultTypeInternal _CustomFields_default_instance_;
class Gallery;
class GalleryDefaultTypeInternal;
extern GalleryDefaultTypeInternal _Gallery_default_instance_;
class GalleryImage;
class GalleryImageDefaultTypeInternal;
extern GalleryImageDefaultTypeInternal _GalleryImage_default_instance_;
class ImageProcessErrorList;
class ImageProcessErrorListDefaultTypeInternal;
extern ImageProcessErrorListDefaultTypeInternal _ImageProcessErrorList_default_instance_;
class KeyValuePair;
class KeyValuePairDefaultTypeInternal;
extern KeyValuePairDefaultTypeInternal _KeyValuePair_default_instance_;
class LayerMarkerDigest;
class LayerMarkerDigestDefaultTypeInternal;
extern LayerMarkerDigestDefaultTypeInternal _LayerMarkerDigest_default_instance_;
class MarkerDigest;
class MarkerDigestDefaultTypeInternal;
extern MarkerDigestDefaultTypeInternal _MarkerDigest_default_instance_;
class MarkerMultiDigest;
class MarkerMultiDigestDefaultTypeInternal;
extern MarkerMultiDigestDefaultTypeInternal _MarkerMultiDigest_default_instance_;
class PostAndSource;
class PostAndSourceDefaultTypeInternal;
extern PostAndSourceDefaultTypeInternal _PostAndSource_default_instance_;
class PostImages;
class PostImagesDefaultTypeInternal;
extern PostImagesDefaultTypeInternal _PostImages_default_instance_;
class PostParsingErrorList;
class PostParsingErrorListDefaultTypeInternal;
extern PostParsingErrorListDefaultTypeInternal _PostParsingErrorList_default_instance_;
class PostSiteSources;
class PostSiteSourcesDefaultTypeInternal;
extern PostSiteSourcesDefaultTypeInternal _PostSiteSources_default_instance_;
class PostsBySiteCmd;
class PostsBySiteCmdDefaultTypeInternal;
extern PostsBySiteCmdDefaultTypeInternal _PostsBySiteCmd_default_instance_;
class PostsBySourcesCmd;
class PostsBySourcesCmdDefaultTypeInternal;
extern PostsBySourcesCmdDefaultTypeInternal _PostsBySourcesCmd_default_instance_;
class ProvidersParams;
class ProvidersParamsDefaultTypeInternal;
extern ProvidersParamsDefaultTypeInternal _ProvidersParams_default_instance_;
class PulseVideo;
class PulseVideoDefaultTypeInternal;
extern PulseVideoDefaultTypeInternal _PulseVideo_default_instance_;
class PulseVideos;
class PulseVideosDefaultTypeInternal;
extern PulseVideosDefaultTypeInternal _PulseVideos_default_instance_;
class RisksFields;
class RisksFieldsDefaultTypeInternal;
extern RisksFieldsDefaultTypeInternal _RisksFields_default_instance_;
class ScrollToClickInfo;
class ScrollToClickInfoDefaultTypeInternal;
extern ScrollToClickInfoDefaultTypeInternal _ScrollToClickInfo_default_instance_;
class SiliconDocParserInfo;
class SiliconDocParserInfoDefaultTypeInternal;
extern SiliconDocParserInfoDefaultTypeInternal _SiliconDocParserInfo_default_instance_;
class SiliconDocParserInfoDigest;
class SiliconDocParserInfoDigestDefaultTypeInternal;
extern SiliconDocParserInfoDigestDefaultTypeInternal _SiliconDocParserInfoDigest_default_instance_;
class SiliconDocTaggerHashInfo;
class SiliconDocTaggerHashInfoDefaultTypeInternal;
extern SiliconDocTaggerHashInfoDefaultTypeInternal _SiliconDocTaggerHashInfo_default_instance_;
class SiliconDocTaggerInfo;
class SiliconDocTaggerInfoDefaultTypeInternal;
extern SiliconDocTaggerInfoDefaultTypeInternal _SiliconDocTaggerInfo_default_instance_;
class SiliconFetchUrl;
class SiliconFetchUrlDefaultTypeInternal;
extern SiliconFetchUrlDefaultTypeInternal _SiliconFetchUrl_default_instance_;
class SiliconFetchedDoc;
class SiliconFetchedDocDefaultTypeInternal;
extern SiliconFetchedDocDefaultTypeInternal _SiliconFetchedDoc_default_instance_;
class SiliconImage;
class SiliconImageDefaultTypeInternal;
extern SiliconImageDefaultTypeInternal _SiliconImage_default_instance_;
class SiliconSourceId;
class SiliconSourceIdDefaultTypeInternal;
extern SiliconSourceIdDefaultTypeInternal _SiliconSourceId_default_instance_;
class SiliconeAuthor;
class SiliconeAuthorDefaultTypeInternal;
extern SiliconeAuthorDefaultTypeInternal _SiliconeAuthor_default_instance_;
class SiliconeBodyPart;
class SiliconeBodyPartDefaultTypeInternal;
extern SiliconeBodyPartDefaultTypeInternal _SiliconeBodyPart_default_instance_;
class SiliconeCategory;
class SiliconeCategoryDefaultTypeInternal;
extern SiliconeCategoryDefaultTypeInternal _SiliconeCategory_default_instance_;
class SiliconeDocState;
class SiliconeDocStateDefaultTypeInternal;
extern SiliconeDocStateDefaultTypeInternal _SiliconeDocState_default_instance_;
class SiliconeImageGalleryRef;
class SiliconeImageGalleryRefDefaultTypeInternal;
extern SiliconeImageGalleryRefDefaultTypeInternal _SiliconeImageGalleryRef_default_instance_;
class SiliconeImagePostID;
class SiliconeImagePostIDDefaultTypeInternal;
extern SiliconeImagePostIDDefaultTypeInternal _SiliconeImagePostID_default_instance_;
class SiliconeNewsStoriesData;
class SiliconeNewsStoriesDataDefaultTypeInternal;
extern SiliconeNewsStoriesDataDefaultTypeInternal _SiliconeNewsStoriesData_default_instance_;
class SiliconeNewsStoryData;
class SiliconeNewsStoryDataDefaultTypeInternal;
extern SiliconeNewsStoryDataDefaultTypeInternal _SiliconeNewsStoryData_default_instance_;
class SiliconeNewsTagData;
class SiliconeNewsTagDataDefaultTypeInternal;
extern SiliconeNewsTagDataDefaultTypeInternal _SiliconeNewsTagData_default_instance_;
class SiliconeNewsTagsData;
class SiliconeNewsTagsDataDefaultTypeInternal;
extern SiliconeNewsTagsDataDefaultTypeInternal _SiliconeNewsTagsData_default_instance_;
class SiliconeParsedBody;
class SiliconeParsedBodyDefaultTypeInternal;
extern SiliconeParsedBodyDefaultTypeInternal _SiliconeParsedBody_default_instance_;
class SiliconeVideo;
class SiliconeVideoDefaultTypeInternal;
extern SiliconeVideoDefaultTypeInternal _SiliconeVideo_default_instance_;
class SiliconeVideoData;
class SiliconeVideoDataDefaultTypeInternal;
extern SiliconeVideoDataDefaultTypeInternal _SiliconeVideoData_default_instance_;
class SiliconeVideoVimeo;
class SiliconeVideoVimeoDefaultTypeInternal;
extern SiliconeVideoVimeoDefaultTypeInternal _SiliconeVideoVimeo_default_instance_;
class SiliconeVideoYoutube;
class SiliconeVideoYoutubeDefaultTypeInternal;
extern SiliconeVideoYoutubeDefaultTypeInternal _SiliconeVideoYoutube_default_instance_;
class SiliconeYoutubeVideoData;
class SiliconeYoutubeVideoDataDefaultTypeInternal;
extern SiliconeYoutubeVideoDataDefaultTypeInternal _SiliconeYoutubeVideoData_default_instance_;
class SourceParsingErrorList;
class SourceParsingErrorListDefaultTypeInternal;
extern SourceParsingErrorListDefaultTypeInternal _SourceParsingErrorList_default_instance_;
class TimeInterval;
class TimeIntervalDefaultTypeInternal;
extern TimeIntervalDefaultTypeInternal _TimeInterval_default_instance_;
class UserPixels;
class UserPixelsDefaultTypeInternal;
extern UserPixelsDefaultTypeInternal _UserPixels_default_instance_;
}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {

namespace protobuf_silicon_5fdata_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_silicon_5fdata_2eproto

enum SiliconFetchUrl_Type {
  SiliconFetchUrl_Type_SOURCE = 0,
  SiliconFetchUrl_Type_POST = 1,
  SiliconFetchUrl_Type_IMAGE = 2,
  SiliconFetchUrl_Type_MARKER = 3
};
bool SiliconFetchUrl_Type_IsValid(int value);
const SiliconFetchUrl_Type SiliconFetchUrl_Type_Type_MIN = SiliconFetchUrl_Type_SOURCE;
const SiliconFetchUrl_Type SiliconFetchUrl_Type_Type_MAX = SiliconFetchUrl_Type_MARKER;
const int SiliconFetchUrl_Type_Type_ARRAYSIZE = SiliconFetchUrl_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SiliconFetchUrl_Type_descriptor();
inline const ::std::string& SiliconFetchUrl_Type_Name(SiliconFetchUrl_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SiliconFetchUrl_Type_descriptor(), value);
}
inline bool SiliconFetchUrl_Type_Parse(
    const ::std::string& name, SiliconFetchUrl_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SiliconFetchUrl_Type>(
    SiliconFetchUrl_Type_descriptor(), name, value);
}
enum SiliconFetchUrl_SourceType {
  SiliconFetchUrl_SourceType_URL = 0,
  SiliconFetchUrl_SourceType_RSS = 1,
  SiliconFetchUrl_SourceType_API = 2
};
bool SiliconFetchUrl_SourceType_IsValid(int value);
const SiliconFetchUrl_SourceType SiliconFetchUrl_SourceType_SourceType_MIN = SiliconFetchUrl_SourceType_URL;
const SiliconFetchUrl_SourceType SiliconFetchUrl_SourceType_SourceType_MAX = SiliconFetchUrl_SourceType_API;
const int SiliconFetchUrl_SourceType_SourceType_ARRAYSIZE = SiliconFetchUrl_SourceType_SourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SiliconFetchUrl_SourceType_descriptor();
inline const ::std::string& SiliconFetchUrl_SourceType_Name(SiliconFetchUrl_SourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SiliconFetchUrl_SourceType_descriptor(), value);
}
inline bool SiliconFetchUrl_SourceType_Parse(
    const ::std::string& name, SiliconFetchUrl_SourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SiliconFetchUrl_SourceType>(
    SiliconFetchUrl_SourceType_descriptor(), name, value);
}
enum SiliconFetchUrl_MobileVersion {
  SiliconFetchUrl_MobileVersion_PREFIX = 0,
  SiliconFetchUrl_MobileVersion_AUTO = 1,
  SiliconFetchUrl_MobileVersion_NONE = 2
};
bool SiliconFetchUrl_MobileVersion_IsValid(int value);
const SiliconFetchUrl_MobileVersion SiliconFetchUrl_MobileVersion_MobileVersion_MIN = SiliconFetchUrl_MobileVersion_PREFIX;
const SiliconFetchUrl_MobileVersion SiliconFetchUrl_MobileVersion_MobileVersion_MAX = SiliconFetchUrl_MobileVersion_NONE;
const int SiliconFetchUrl_MobileVersion_MobileVersion_ARRAYSIZE = SiliconFetchUrl_MobileVersion_MobileVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* SiliconFetchUrl_MobileVersion_descriptor();
inline const ::std::string& SiliconFetchUrl_MobileVersion_Name(SiliconFetchUrl_MobileVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    SiliconFetchUrl_MobileVersion_descriptor(), value);
}
inline bool SiliconFetchUrl_MobileVersion_Parse(
    const ::std::string& name, SiliconFetchUrl_MobileVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SiliconFetchUrl_MobileVersion>(
    SiliconFetchUrl_MobileVersion_descriptor(), name, value);
}
enum SiliconeBodyPart_PartName {
  SiliconeBodyPart_PartName_HEADER1 = 0,
  SiliconeBodyPart_PartName_HEADER2 = 1,
  SiliconeBodyPart_PartName_HEADER3 = 2,
  SiliconeBodyPart_PartName_HEADER4 = 3,
  SiliconeBodyPart_PartName_HEADER5 = 4,
  SiliconeBodyPart_PartName_HEADER6 = 5,
  SiliconeBodyPart_PartName_PREFORMATTED = 6,
  SiliconeBodyPart_PartName_TEXT = 7,
  SiliconeBodyPart_PartName_BREAK = 8,
  SiliconeBodyPart_PartName_PARAGRAPH = 10,
  SiliconeBodyPart_PartName_LIST = 11,
  SiliconeBodyPart_PartName_LINK = 12,
  SiliconeBodyPart_PartName_BLOCKQUOTE = 13,
  SiliconeBodyPart_PartName_IMG = 20,
  SiliconeBodyPart_PartName_INSTAGRAM = 21,
  SiliconeBodyPart_PartName_VIDEO_YOUTUBE = 30,
  SiliconeBodyPart_PartName_VIDEO_VIMEO = 31,
  SiliconeBodyPart_PartName_VIDEO_VK = 32,
  SiliconeBodyPart_PartName_IFRAME = 33,
  SiliconeBodyPart_PartName_HTML = 34
};
bool SiliconeBodyPart_PartName_IsValid(int value);
const SiliconeBodyPart_PartName SiliconeBodyPart_PartName_PartName_MIN = SiliconeBodyPart_PartName_HEADER1;
const SiliconeBodyPart_PartName SiliconeBodyPart_PartName_PartName_MAX = SiliconeBodyPart_PartName_HTML;
const int SiliconeBodyPart_PartName_PartName_ARRAYSIZE = SiliconeBodyPart_PartName_PartName_MAX + 1;

const ::google::protobuf::EnumDescriptor* SiliconeBodyPart_PartName_descriptor();
inline const ::std::string& SiliconeBodyPart_PartName_Name(SiliconeBodyPart_PartName value) {
  return ::google::protobuf::internal::NameOfEnum(
    SiliconeBodyPart_PartName_descriptor(), value);
}
inline bool SiliconeBodyPart_PartName_Parse(
    const ::std::string& name, SiliconeBodyPart_PartName* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SiliconeBodyPart_PartName>(
    SiliconeBodyPart_PartName_descriptor(), name, value);
}
enum SiliconSourceMode {
  TEXT = 0,
  IMAGE = 1,
  VIDEO = 2,
  FULL_POST = 10
};
bool SiliconSourceMode_IsValid(int value);
const SiliconSourceMode SiliconSourceMode_MIN = TEXT;
const SiliconSourceMode SiliconSourceMode_MAX = FULL_POST;
const int SiliconSourceMode_ARRAYSIZE = SiliconSourceMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SiliconSourceMode_descriptor();
inline const ::std::string& SiliconSourceMode_Name(SiliconSourceMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SiliconSourceMode_descriptor(), value);
}
inline bool SiliconSourceMode_Parse(
    const ::std::string& name, SiliconSourceMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SiliconSourceMode>(
    SiliconSourceMode_descriptor(), name, value);
}
enum SiliconSourceProvider {
  MANUAL = 0,
  ADMGO = 1,
  INDEXISTO = 2,
  COSMO_NEWS = 3,
  ADMGO_COSMO = 4,
  OK_BOLT = 5,
  LIKEMORE_CABINET = 6,
  ADMGO_LENTA = 7,
  SOCIAL_VK_CAROUSEL = 8
};
bool SiliconSourceProvider_IsValid(int value);
const SiliconSourceProvider SiliconSourceProvider_MIN = MANUAL;
const SiliconSourceProvider SiliconSourceProvider_MAX = SOCIAL_VK_CAROUSEL;
const int SiliconSourceProvider_ARRAYSIZE = SiliconSourceProvider_MAX + 1;

const ::google::protobuf::EnumDescriptor* SiliconSourceProvider_descriptor();
inline const ::std::string& SiliconSourceProvider_Name(SiliconSourceProvider value) {
  return ::google::protobuf::internal::NameOfEnum(
    SiliconSourceProvider_descriptor(), value);
}
inline bool SiliconSourceProvider_Parse(
    const ::std::string& name, SiliconSourceProvider* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SiliconSourceProvider>(
    SiliconSourceProvider_descriptor(), name, value);
}
enum ImageType {
  PNG = 0,
  JPEG = 1,
  GIF = 2
};
bool ImageType_IsValid(int value);
const ImageType ImageType_MIN = PNG;
const ImageType ImageType_MAX = GIF;
const int ImageType_ARRAYSIZE = ImageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageType_descriptor();
inline const ::std::string& ImageType_Name(ImageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageType_descriptor(), value);
}
inline bool ImageType_Parse(
    const ::std::string& name, ImageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageType>(
    ImageType_descriptor(), name, value);
}
enum SourceParsingError {
  SOURCE_CONFIG_MISSING = 0,
  SOURCE_NO_CONTENT = 1,
  SOURCE_NO_POSTS = 2,
  SOURCE_CONFIG_ERROR = 3,
  SOURCE_PARSER_ERROR = 4,
  SOURCE_BAN_CONFIG_ERROR = 5,
  SOURCE_POST_URL_ERROR = 6,
  SITE_CONFIG_MISSING = 7
};
bool SourceParsingError_IsValid(int value);
const SourceParsingError SourceParsingError_MIN = SOURCE_CONFIG_MISSING;
const SourceParsingError SourceParsingError_MAX = SITE_CONFIG_MISSING;
const int SourceParsingError_ARRAYSIZE = SourceParsingError_MAX + 1;

const ::google::protobuf::EnumDescriptor* SourceParsingError_descriptor();
inline const ::std::string& SourceParsingError_Name(SourceParsingError value) {
  return ::google::protobuf::internal::NameOfEnum(
    SourceParsingError_descriptor(), value);
}
inline bool SourceParsingError_Parse(
    const ::std::string& name, SourceParsingError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SourceParsingError>(
    SourceParsingError_descriptor(), name, value);
}
enum PostParsingResult {
  POST_OK = 0,
  POST_NO_TEXT = 1,
  POST_NO_IMAGE = 2,
  POST_NOT_PARSED = 3
};
bool PostParsingResult_IsValid(int value);
const PostParsingResult PostParsingResult_MIN = POST_OK;
const PostParsingResult PostParsingResult_MAX = POST_NOT_PARSED;
const int PostParsingResult_ARRAYSIZE = PostParsingResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* PostParsingResult_descriptor();
inline const ::std::string& PostParsingResult_Name(PostParsingResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    PostParsingResult_descriptor(), value);
}
inline bool PostParsingResult_Parse(
    const ::std::string& name, PostParsingResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PostParsingResult>(
    PostParsingResult_descriptor(), name, value);
}
enum PostParsingError {
  POST_CONFIG_MISSING = 0,
  POST_TITLE_CONFIG_ERROR = 1,
  POST_DESCRIPTION_CONFIG_ERROR = 2,
  POST_READABILITY_CONFIG_ERROR = 3,
  POST_IMAGE_CONFIG_ERROR = 4,
  POST_NO_CONTENT = 5,
  POST_URL_ERROR = 6,
  POST_BOILERPIPE_ERROR = 7,
  POST_OG_IMAGE_NOT_FOUND = 8,
  POST_BOILERPIPE_IMAGE_ERROR = 9,
  POST_BOILERPIPE_IMAGE_NOT_FOUND = 10,
  POST_PARSED_HTML_MISSING = 11,
  POST_VK_PARSER_ERROR = 12,
  POST_IMAGE_GALLERY_CONFIG_ERROR = 13,
  POST_VIDEO_CONFIG_ERROR = 14,
  POST_LAYER_ERROR = 15,
  POST_HOST_MISMATCH = 16,
  POST_CUSTOM_FIELD_CONFIG_ERROR = 17,
  POST_TITLE_PARSING_ERROR = 18,
  POST_DESCRIPTION_PARSING_ERROR = 19,
  POST_MAIN_IMAGE_PARSING_ERROR = 20
};
bool PostParsingError_IsValid(int value);
const PostParsingError PostParsingError_MIN = POST_CONFIG_MISSING;
const PostParsingError PostParsingError_MAX = POST_MAIN_IMAGE_PARSING_ERROR;
const int PostParsingError_ARRAYSIZE = PostParsingError_MAX + 1;

const ::google::protobuf::EnumDescriptor* PostParsingError_descriptor();
inline const ::std::string& PostParsingError_Name(PostParsingError value) {
  return ::google::protobuf::internal::NameOfEnum(
    PostParsingError_descriptor(), value);
}
inline bool PostParsingError_Parse(
    const ::std::string& name, PostParsingError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PostParsingError>(
    PostParsingError_descriptor(), name, value);
}
enum ImageProcessResult {
  IMAGE_OK = 0,
  IMAGE_FAIL = 1,
  IMAGE_NOT_FETCHED = 2
};
bool ImageProcessResult_IsValid(int value);
const ImageProcessResult ImageProcessResult_MIN = IMAGE_OK;
const ImageProcessResult ImageProcessResult_MAX = IMAGE_NOT_FETCHED;
const int ImageProcessResult_ARRAYSIZE = ImageProcessResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageProcessResult_descriptor();
inline const ::std::string& ImageProcessResult_Name(ImageProcessResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageProcessResult_descriptor(), value);
}
inline bool ImageProcessResult_Parse(
    const ::std::string& name, ImageProcessResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageProcessResult>(
    ImageProcessResult_descriptor(), name, value);
}
enum ImageProcessError {
  IMAGE_RESIZE_ERROR = 0,
  IMAGE_THUMB_ERROR = 1,
  IMAGE_PREVIEW_EXPORT_ERROR = 2,
  IMAGE_EXPORT_FOR_POST_ERROR = 3,
  IMAGE_SIMHASH_ERROR = 4
};
bool ImageProcessError_IsValid(int value);
const ImageProcessError ImageProcessError_MIN = IMAGE_RESIZE_ERROR;
const ImageProcessError ImageProcessError_MAX = IMAGE_SIMHASH_ERROR;
const int ImageProcessError_ARRAYSIZE = ImageProcessError_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageProcessError_descriptor();
inline const ::std::string& ImageProcessError_Name(ImageProcessError value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageProcessError_descriptor(), value);
}
inline bool ImageProcessError_Parse(
    const ::std::string& name, ImageProcessError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageProcessError>(
    ImageProcessError_descriptor(), name, value);
}
enum SiliconeVideoType {
  YOUTUBE = 0,
  VIMEO = 1
};
bool SiliconeVideoType_IsValid(int value);
const SiliconeVideoType SiliconeVideoType_MIN = YOUTUBE;
const SiliconeVideoType SiliconeVideoType_MAX = VIMEO;
const int SiliconeVideoType_ARRAYSIZE = SiliconeVideoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SiliconeVideoType_descriptor();
inline const ::std::string& SiliconeVideoType_Name(SiliconeVideoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SiliconeVideoType_descriptor(), value);
}
inline bool SiliconeVideoType_Parse(
    const ::std::string& name, SiliconeVideoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SiliconeVideoType>(
    SiliconeVideoType_descriptor(), name, value);
}
// ===================================================================

class SiliconSourceId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconSourceId) */ {
 public:
  SiliconSourceId();
  virtual ~SiliconSourceId();

  SiliconSourceId(const SiliconSourceId& from);

  inline SiliconSourceId& operator=(const SiliconSourceId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconSourceId(SiliconSourceId&& from) noexcept
    : SiliconSourceId() {
    *this = ::std::move(from);
  }

  inline SiliconSourceId& operator=(SiliconSourceId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconSourceId& default_instance();

  static inline const SiliconSourceId* internal_default_instance() {
    return reinterpret_cast<const SiliconSourceId*>(
               &_SiliconSourceId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SiliconSourceId* other);
  friend void swap(SiliconSourceId& a, SiliconSourceId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconSourceId* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconSourceId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconSourceId& from);
  void MergeFrom(const SiliconSourceId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconSourceId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required .ru.mail.go.webbase.blobs.SiliconSourceProvider provider = 1;
  bool has_provider() const;
  void clear_provider();
  static const int kProviderFieldNumber = 1;
  ::ru::mail::go::webbase::blobs::SiliconSourceProvider provider() const;
  void set_provider(::ru::mail::go::webbase::blobs::SiliconSourceProvider value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconSourceId)
 private:
  void set_has_provider();
  void clear_has_provider();
  void set_has_id();
  void clear_has_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  int provider_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconFetchUrl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconFetchUrl) */ {
 public:
  SiliconFetchUrl();
  virtual ~SiliconFetchUrl();

  SiliconFetchUrl(const SiliconFetchUrl& from);

  inline SiliconFetchUrl& operator=(const SiliconFetchUrl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconFetchUrl(SiliconFetchUrl&& from) noexcept
    : SiliconFetchUrl() {
    *this = ::std::move(from);
  }

  inline SiliconFetchUrl& operator=(SiliconFetchUrl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconFetchUrl& default_instance();

  static inline const SiliconFetchUrl* internal_default_instance() {
    return reinterpret_cast<const SiliconFetchUrl*>(
               &_SiliconFetchUrl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SiliconFetchUrl* other);
  friend void swap(SiliconFetchUrl& a, SiliconFetchUrl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconFetchUrl* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconFetchUrl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconFetchUrl& from);
  void MergeFrom(const SiliconFetchUrl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconFetchUrl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SiliconFetchUrl_Type Type;
  static const Type SOURCE =
    SiliconFetchUrl_Type_SOURCE;
  static const Type POST =
    SiliconFetchUrl_Type_POST;
  static const Type IMAGE =
    SiliconFetchUrl_Type_IMAGE;
  static const Type MARKER =
    SiliconFetchUrl_Type_MARKER;
  static inline bool Type_IsValid(int value) {
    return SiliconFetchUrl_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SiliconFetchUrl_Type_Type_MIN;
  static const Type Type_MAX =
    SiliconFetchUrl_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SiliconFetchUrl_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SiliconFetchUrl_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SiliconFetchUrl_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SiliconFetchUrl_Type_Parse(name, value);
  }

  typedef SiliconFetchUrl_SourceType SourceType;
  static const SourceType URL =
    SiliconFetchUrl_SourceType_URL;
  static const SourceType RSS =
    SiliconFetchUrl_SourceType_RSS;
  static const SourceType API =
    SiliconFetchUrl_SourceType_API;
  static inline bool SourceType_IsValid(int value) {
    return SiliconFetchUrl_SourceType_IsValid(value);
  }
  static const SourceType SourceType_MIN =
    SiliconFetchUrl_SourceType_SourceType_MIN;
  static const SourceType SourceType_MAX =
    SiliconFetchUrl_SourceType_SourceType_MAX;
  static const int SourceType_ARRAYSIZE =
    SiliconFetchUrl_SourceType_SourceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SourceType_descriptor() {
    return SiliconFetchUrl_SourceType_descriptor();
  }
  static inline const ::std::string& SourceType_Name(SourceType value) {
    return SiliconFetchUrl_SourceType_Name(value);
  }
  static inline bool SourceType_Parse(const ::std::string& name,
      SourceType* value) {
    return SiliconFetchUrl_SourceType_Parse(name, value);
  }

  typedef SiliconFetchUrl_MobileVersion MobileVersion;
  static const MobileVersion PREFIX =
    SiliconFetchUrl_MobileVersion_PREFIX;
  static const MobileVersion AUTO =
    SiliconFetchUrl_MobileVersion_AUTO;
  static const MobileVersion NONE =
    SiliconFetchUrl_MobileVersion_NONE;
  static inline bool MobileVersion_IsValid(int value) {
    return SiliconFetchUrl_MobileVersion_IsValid(value);
  }
  static const MobileVersion MobileVersion_MIN =
    SiliconFetchUrl_MobileVersion_MobileVersion_MIN;
  static const MobileVersion MobileVersion_MAX =
    SiliconFetchUrl_MobileVersion_MobileVersion_MAX;
  static const int MobileVersion_ARRAYSIZE =
    SiliconFetchUrl_MobileVersion_MobileVersion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MobileVersion_descriptor() {
    return SiliconFetchUrl_MobileVersion_descriptor();
  }
  static inline const ::std::string& MobileVersion_Name(MobileVersion value) {
    return SiliconFetchUrl_MobileVersion_Name(value);
  }
  static inline bool MobileVersion_Parse(const ::std::string& name,
      MobileVersion* value) {
    return SiliconFetchUrl_MobileVersion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string postsWithImage = 4;
  int postswithimage_size() const;
  void clear_postswithimage();
  static const int kPostsWithImageFieldNumber = 4;
  const ::std::string& postswithimage(int index) const;
  ::std::string* mutable_postswithimage(int index);
  void set_postswithimage(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_postswithimage(int index, ::std::string&& value);
  #endif
  void set_postswithimage(int index, const char* value);
  void set_postswithimage(int index, const char* value, size_t size);
  ::std::string* add_postswithimage();
  void add_postswithimage(const ::std::string& value);
  #if LANG_CXX11
  void add_postswithimage(::std::string&& value);
  #endif
  void add_postswithimage(const char* value);
  void add_postswithimage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& postswithimage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_postswithimage();

  // repeated string sourceNames = 8;
  int sourcenames_size() const;
  void clear_sourcenames();
  static const int kSourceNamesFieldNumber = 8;
  const ::std::string& sourcenames(int index) const;
  ::std::string* mutable_sourcenames(int index);
  void set_sourcenames(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_sourcenames(int index, ::std::string&& value);
  #endif
  void set_sourcenames(int index, const char* value);
  void set_sourcenames(int index, const char* value, size_t size);
  ::std::string* add_sourcenames();
  void add_sourcenames(const ::std::string& value);
  #if LANG_CXX11
  void add_sourcenames(::std::string&& value);
  #endif
  void add_sourcenames(const char* value);
  void add_sourcenames(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sourcenames() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sourcenames();

  // repeated int64 categoryIds = 10;
  int categoryids_size() const;
  void clear_categoryids();
  static const int kCategoryIdsFieldNumber = 10;
  ::google::protobuf::int64 categoryids(int index) const;
  void set_categoryids(int index, ::google::protobuf::int64 value);
  void add_categoryids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      categoryids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_categoryids();

  // optional string publicUrl = 6;
  bool has_publicurl() const;
  void clear_publicurl();
  static const int kPublicUrlFieldNumber = 6;
  const ::std::string& publicurl() const;
  void set_publicurl(const ::std::string& value);
  #if LANG_CXX11
  void set_publicurl(::std::string&& value);
  #endif
  void set_publicurl(const char* value);
  void set_publicurl(const char* value, size_t size);
  ::std::string* mutable_publicurl();
  ::std::string* release_publicurl();
  void set_allocated_publicurl(::std::string* publicurl);

  // required .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 5;
  bool has_sourceid() const;
  void clear_sourceid();
  static const int kSourceIdFieldNumber = 5;
  const ::ru::mail::go::webbase::blobs::SiliconSourceId& sourceid() const;
  ::ru::mail::go::webbase::blobs::SiliconSourceId* mutable_sourceid();
  ::ru::mail::go::webbase::blobs::SiliconSourceId* release_sourceid();
  void set_allocated_sourceid(::ru::mail::go::webbase::blobs::SiliconSourceId* sourceid);

  // optional .ru.mail.go.webbase.blobs.SiliconDocTaggerInfo taggerInfo = 7;
  bool has_taggerinfo() const;
  void clear_taggerinfo();
  static const int kTaggerInfoFieldNumber = 7;
  const ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo& taggerinfo() const;
  ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* mutable_taggerinfo();
  ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* release_taggerinfo();
  void set_allocated_taggerinfo(::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* taggerinfo);

  // optional .ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest marker = 11;
  bool has_marker() const;
  void clear_marker();
  static const int kMarkerFieldNumber = 11;
  const ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest& marker() const;
  ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest* mutable_marker();
  ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest* release_marker();
  void set_allocated_marker(::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest* marker);

  // required .ru.mail.go.webbase.blobs.SiliconFetchUrl.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ru::mail::go::webbase::blobs::SiliconFetchUrl_Type type() const;
  void set_type(::ru::mail::go::webbase::blobs::SiliconFetchUrl_Type value);

  // required .ru.mail.go.webbase.blobs.SiliconFetchUrl.SourceType sourceType = 2;
  bool has_sourcetype() const;
  void clear_sourcetype();
  static const int kSourceTypeFieldNumber = 2;
  ::ru::mail::go::webbase::blobs::SiliconFetchUrl_SourceType sourcetype() const;
  void set_sourcetype(::ru::mail::go::webbase::blobs::SiliconFetchUrl_SourceType value);

  // optional int64 siteId = 9;
  bool has_siteid() const;
  void clear_siteid();
  static const int kSiteIdFieldNumber = 9;
  ::google::protobuf::int64 siteid() const;
  void set_siteid(::google::protobuf::int64 value);

  // optional int64 firstMeetSec = 12;
  bool has_firstmeetsec() const;
  void clear_firstmeetsec();
  static const int kFirstMeetSecFieldNumber = 12;
  ::google::protobuf::int64 firstmeetsec() const;
  void set_firstmeetsec(::google::protobuf::int64 value);

  // required .ru.mail.go.webbase.blobs.SiliconSourceMode mode = 3;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::ru::mail::go::webbase::blobs::SiliconSourceMode mode() const;
  void set_mode(::ru::mail::go::webbase::blobs::SiliconSourceMode value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconFetchUrl)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_sourcetype();
  void clear_has_sourcetype();
  void set_has_mode();
  void clear_has_mode();
  void set_has_sourceid();
  void clear_has_sourceid();
  void set_has_publicurl();
  void clear_has_publicurl();
  void set_has_taggerinfo();
  void clear_has_taggerinfo();
  void set_has_siteid();
  void clear_has_siteid();
  void set_has_marker();
  void clear_has_marker();
  void set_has_firstmeetsec();
  void clear_has_firstmeetsec();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> postswithimage_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sourcenames_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > categoryids_;
  ::google::protobuf::internal::ArenaStringPtr publicurl_;
  ::ru::mail::go::webbase::blobs::SiliconSourceId* sourceid_;
  ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* taggerinfo_;
  ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest* marker_;
  int type_;
  int sourcetype_;
  ::google::protobuf::int64 siteid_;
  ::google::protobuf::int64 firstmeetsec_;
  int mode_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconFetchedDoc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconFetchedDoc) */ {
 public:
  SiliconFetchedDoc();
  virtual ~SiliconFetchedDoc();

  SiliconFetchedDoc(const SiliconFetchedDoc& from);

  inline SiliconFetchedDoc& operator=(const SiliconFetchedDoc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconFetchedDoc(SiliconFetchedDoc&& from) noexcept
    : SiliconFetchedDoc() {
    *this = ::std::move(from);
  }

  inline SiliconFetchedDoc& operator=(SiliconFetchedDoc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconFetchedDoc& default_instance();

  static inline const SiliconFetchedDoc* internal_default_instance() {
    return reinterpret_cast<const SiliconFetchedDoc*>(
               &_SiliconFetchedDoc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SiliconFetchedDoc* other);
  friend void swap(SiliconFetchedDoc& a, SiliconFetchedDoc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconFetchedDoc* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconFetchedDoc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconFetchedDoc& from);
  void MergeFrom(const SiliconFetchedDoc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconFetchedDoc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sourceNames = 12;
  int sourcenames_size() const;
  void clear_sourcenames();
  static const int kSourceNamesFieldNumber = 12;
  const ::std::string& sourcenames(int index) const;
  ::std::string* mutable_sourcenames(int index);
  void set_sourcenames(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_sourcenames(int index, ::std::string&& value);
  #endif
  void set_sourcenames(int index, const char* value);
  void set_sourcenames(int index, const char* value, size_t size);
  ::std::string* add_sourcenames();
  void add_sourcenames(const ::std::string& value);
  #if LANG_CXX11
  void add_sourcenames(::std::string&& value);
  #endif
  void add_sourcenames(const char* value);
  void add_sourcenames(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sourcenames() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sourcenames();

  // repeated int64 categoryIds = 14;
  int categoryids_size() const;
  void clear_categoryids();
  static const int kCategoryIdsFieldNumber = 14;
  ::google::protobuf::int64 categoryids(int index) const;
  void set_categoryids(int index, ::google::protobuf::int64 value);
  void add_categoryids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      categoryids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_categoryids();

  // repeated string tags = 28;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 28;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string murl = 2;
  bool has_murl() const;
  void clear_murl();
  static const int kMurlFieldNumber = 2;
  const ::std::string& murl() const;
  void set_murl(const ::std::string& value);
  #if LANG_CXX11
  void set_murl(::std::string&& value);
  #endif
  void set_murl(const char* value);
  void set_murl(const char* value, size_t size);
  ::std::string* mutable_murl();
  ::std::string* release_murl();
  void set_allocated_murl(::std::string* murl);

  // optional string canonicalizedUrl = 11;
  bool has_canonicalizedurl() const;
  void clear_canonicalizedurl();
  static const int kCanonicalizedUrlFieldNumber = 11;
  const ::std::string& canonicalizedurl() const;
  void set_canonicalizedurl(const ::std::string& value);
  #if LANG_CXX11
  void set_canonicalizedurl(::std::string&& value);
  #endif
  void set_canonicalizedurl(const char* value);
  void set_canonicalizedurl(const char* value, size_t size);
  ::std::string* mutable_canonicalizedurl();
  ::std::string* release_canonicalizedurl();
  void set_allocated_canonicalizedurl(::std::string* canonicalizedurl);

  // optional bytes vkPost = 22;
  bool has_vkpost() const;
  void clear_vkpost();
  static const int kVkPostFieldNumber = 22;
  const ::std::string& vkpost() const;
  void set_vkpost(const ::std::string& value);
  #if LANG_CXX11
  void set_vkpost(::std::string&& value);
  #endif
  void set_vkpost(const char* value);
  void set_vkpost(const void* value, size_t size);
  ::std::string* mutable_vkpost();
  ::std::string* release_vkpost();
  void set_allocated_vkpost(::std::string* vkpost);

  // optional string jsonBlocks = 27;
  bool has_jsonblocks() const;
  void clear_jsonblocks();
  static const int kJsonBlocksFieldNumber = 27;
  const ::std::string& jsonblocks() const;
  void set_jsonblocks(const ::std::string& value);
  #if LANG_CXX11
  void set_jsonblocks(::std::string&& value);
  #endif
  void set_jsonblocks(const char* value);
  void set_jsonblocks(const char* value, size_t size);
  ::std::string* mutable_jsonblocks();
  ::std::string* release_jsonblocks();
  void set_allocated_jsonblocks(::std::string* jsonblocks);

  // optional string external_url = 30;
  bool has_external_url() const;
  void clear_external_url();
  static const int kExternalUrlFieldNumber = 30;
  const ::std::string& external_url() const;
  void set_external_url(const ::std::string& value);
  #if LANG_CXX11
  void set_external_url(::std::string&& value);
  #endif
  void set_external_url(const char* value);
  void set_external_url(const char* value, size_t size);
  ::std::string* mutable_external_url();
  ::std::string* release_external_url();
  void set_allocated_external_url(::std::string* external_url);

  // optional string original_url = 34;
  bool has_original_url() const;
  void clear_original_url();
  static const int kOriginalUrlFieldNumber = 34;
  const ::std::string& original_url() const;
  void set_original_url(const ::std::string& value);
  #if LANG_CXX11
  void set_original_url(::std::string&& value);
  #endif
  void set_original_url(const char* value);
  void set_original_url(const char* value, size_t size);
  ::std::string* mutable_original_url();
  ::std::string* release_original_url();
  void set_allocated_original_url(::std::string* original_url);

  // required .ru.mail.go.webbase.blobs.SiliconDocParserInfo parserInfo = 4;
  bool has_parserinfo() const;
  void clear_parserinfo();
  static const int kParserInfoFieldNumber = 4;
  const ::ru::mail::go::webbase::blobs::SiliconDocParserInfo& parserinfo() const;
  ::ru::mail::go::webbase::blobs::SiliconDocParserInfo* mutable_parserinfo();
  ::ru::mail::go::webbase::blobs::SiliconDocParserInfo* release_parserinfo();
  void set_allocated_parserinfo(::ru::mail::go::webbase::blobs::SiliconDocParserInfo* parserinfo);

  // required .ru.mail.go.webbase.blobs.SiliconDocTaggerInfo taggerInfo = 5;
  bool has_taggerinfo() const;
  void clear_taggerinfo();
  static const int kTaggerInfoFieldNumber = 5;
  const ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo& taggerinfo() const;
  ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* mutable_taggerinfo();
  ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* release_taggerinfo();
  void set_allocated_taggerinfo(::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* taggerinfo);

  // optional .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 7;
  bool has_sourceid() const;
  void clear_sourceid();
  static const int kSourceIdFieldNumber = 7;
  const ::ru::mail::go::webbase::blobs::SiliconSourceId& sourceid() const;
  ::ru::mail::go::webbase::blobs::SiliconSourceId* mutable_sourceid();
  ::ru::mail::go::webbase::blobs::SiliconSourceId* release_sourceid();
  void set_allocated_sourceid(::ru::mail::go::webbase::blobs::SiliconSourceId* sourceid);

  // optional .ru.mail.go.webbase.blobs.ProvidersParams providersParams = 18;
  bool has_providersparams() const;
  void clear_providersparams();
  static const int kProvidersParamsFieldNumber = 18;
  const ::ru::mail::go::webbase::blobs::ProvidersParams& providersparams() const;
  ::ru::mail::go::webbase::blobs::ProvidersParams* mutable_providersparams();
  ::ru::mail::go::webbase::blobs::ProvidersParams* release_providersparams();
  void set_allocated_providersparams(::ru::mail::go::webbase::blobs::ProvidersParams* providersparams);

  // optional .ru.mail.go.webbase.blobs.SiliconeNewsTagsData newsTags = 19;
  bool has_newstags() const;
  void clear_newstags();
  static const int kNewsTagsFieldNumber = 19;
  const ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData& newstags() const;
  ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData* mutable_newstags();
  ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData* release_newstags();
  void set_allocated_newstags(::ru::mail::go::webbase::blobs::SiliconeNewsTagsData* newstags);

  // optional .ru.mail.go.webbase.blobs.SiliconeNewsStoriesData newsStories = 20;
  bool has_newsstories() const;
  void clear_newsstories();
  static const int kNewsStoriesFieldNumber = 20;
  const ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData& newsstories() const;
  ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData* mutable_newsstories();
  ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData* release_newsstories();
  void set_allocated_newsstories(::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData* newsstories);

  // optional .ru.mail.go.webbase.blobs.ScrollToClickInfo scrollToClickInfo = 23;
  bool has_scrolltoclickinfo() const;
  void clear_scrolltoclickinfo();
  static const int kScrollToClickInfoFieldNumber = 23;
  const ::ru::mail::go::webbase::blobs::ScrollToClickInfo& scrolltoclickinfo() const;
  ::ru::mail::go::webbase::blobs::ScrollToClickInfo* mutable_scrolltoclickinfo();
  ::ru::mail::go::webbase::blobs::ScrollToClickInfo* release_scrolltoclickinfo();
  void set_allocated_scrolltoclickinfo(::ru::mail::go::webbase::blobs::ScrollToClickInfo* scrolltoclickinfo);

  // optional .ru.mail.go.webbase.blobs.UserPixels userPixels = 24;
  bool has_userpixels() const;
  void clear_userpixels();
  static const int kUserPixelsFieldNumber = 24;
  const ::ru::mail::go::webbase::blobs::UserPixels& userpixels() const;
  ::ru::mail::go::webbase::blobs::UserPixels* mutable_userpixels();
  ::ru::mail::go::webbase::blobs::UserPixels* release_userpixels();
  void set_allocated_userpixels(::ru::mail::go::webbase::blobs::UserPixels* userpixels);

  // optional .ru.mail.go.webbase.blobs.SiliconeDocState state = 25;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 25;
  const ::ru::mail::go::webbase::blobs::SiliconeDocState& state() const;
  ::ru::mail::go::webbase::blobs::SiliconeDocState* mutable_state();
  ::ru::mail::go::webbase::blobs::SiliconeDocState* release_state();
  void set_allocated_state(::ru::mail::go::webbase::blobs::SiliconeDocState* state);

  // optional .ru.mail.go.webbase.blobs.CustomAdminFields customAdminFields = 29;
  bool has_customadminfields() const;
  void clear_customadminfields();
  static const int kCustomAdminFieldsFieldNumber = 29;
  const ::ru::mail::go::webbase::blobs::CustomAdminFields& customadminfields() const;
  ::ru::mail::go::webbase::blobs::CustomAdminFields* mutable_customadminfields();
  ::ru::mail::go::webbase::blobs::CustomAdminFields* release_customadminfields();
  void set_allocated_customadminfields(::ru::mail::go::webbase::blobs::CustomAdminFields* customadminfields);

  // optional .ru.mail.go.webbase.blobs.RisksFields risksFields = 33;
  bool has_risksfields() const;
  void clear_risksfields();
  static const int kRisksFieldsFieldNumber = 33;
  const ::ru::mail::go::webbase::blobs::RisksFields& risksfields() const;
  ::ru::mail::go::webbase::blobs::RisksFields* mutable_risksfields();
  ::ru::mail::go::webbase::blobs::RisksFields* release_risksfields();
  void set_allocated_risksfields(::ru::mail::go::webbase::blobs::RisksFields* risksfields);

  // optional int64 fetchTimestamp = 6;
  bool has_fetchtimestamp() const;
  void clear_fetchtimestamp();
  static const int kFetchTimestampFieldNumber = 6;
  ::google::protobuf::int64 fetchtimestamp() const;
  void set_fetchtimestamp(::google::protobuf::int64 value);

  // optional int64 discoveryVersion = 8;
  bool has_discoveryversion() const;
  void clear_discoveryversion();
  static const int kDiscoveryVersionFieldNumber = 8;
  ::google::protobuf::int64 discoveryversion() const;
  void set_discoveryversion(::google::protobuf::int64 value);

  // required .ru.mail.go.webbase.blobs.SiliconSourceMode sourceMode = 3;
  bool has_sourcemode() const;
  void clear_sourcemode();
  static const int kSourceModeFieldNumber = 3;
  ::ru::mail::go::webbase::blobs::SiliconSourceMode sourcemode() const;
  void set_sourcemode(::ru::mail::go::webbase::blobs::SiliconSourceMode value);

  // optional uint32 regionId = 16;
  bool has_regionid() const;
  void clear_regionid();
  static const int kRegionIdFieldNumber = 16;
  ::google::protobuf::uint32 regionid() const;
  void set_regionid(::google::protobuf::uint32 value);

  // optional int64 publicationDate = 10;
  bool has_publicationdate() const;
  void clear_publicationdate();
  static const int kPublicationDateFieldNumber = 10;
  ::google::protobuf::int64 publicationdate() const;
  void set_publicationdate(::google::protobuf::int64 value);

  // optional int64 siteId = 13;
  bool has_siteid() const;
  void clear_siteid();
  static const int kSiteIdFieldNumber = 13;
  ::google::protobuf::int64 siteid() const;
  void set_siteid(::google::protobuf::int64 value);

  // optional int64 urlHash = 15;
  bool has_urlhash() const;
  void clear_urlhash();
  static const int kUrlHashFieldNumber = 15;
  ::google::protobuf::int64 urlhash() const;
  void set_urlhash(::google::protobuf::int64 value);

  // optional int64 firstMeetSec = 17;
  bool has_firstmeetsec() const;
  void clear_firstmeetsec();
  static const int kFirstMeetSecFieldNumber = 17;
  ::google::protobuf::int64 firstmeetsec() const;
  void set_firstmeetsec(::google::protobuf::int64 value);

  // optional bool isRemoved = 9;
  bool has_isremoved() const;
  void clear_isremoved();
  static const int kIsRemovedFieldNumber = 9;
  bool isremoved() const;
  void set_isremoved(bool value);

  // optional bool isDocStateUpdated = 26;
  bool has_isdocstateupdated() const;
  void clear_isdocstateupdated();
  static const int kIsDocStateUpdatedFieldNumber = 26;
  bool isdocstateupdated() const;
  void set_isdocstateupdated(bool value);

  // optional bool isAdminCustomDocUpdated = 31;
  bool has_isadmincustomdocupdated() const;
  void clear_isadmincustomdocupdated();
  static const int kIsAdminCustomDocUpdatedFieldNumber = 31;
  bool isadmincustomdocupdated() const;
  void set_isadmincustomdocupdated(bool value);

  // optional bool hasContents = 32;
  bool has_hascontents() const;
  void clear_hascontents();
  static const int kHasContentsFieldNumber = 32;
  bool hascontents() const;
  void set_hascontents(bool value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SiliconFetchedDoc)
  static const int kIndexistoIdFieldNumber = 1000;
  static ::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::SiliconFetchedDoc,
      ::google::protobuf::internal::StringTypeTraits, 9, false >
    indexistoId;
  static const int kPageSourceFieldNumber = 1001;
  static ::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::SiliconFetchedDoc,
      ::google::protobuf::internal::StringTypeTraits, 12, false >
    page_source;
  static const int kParsedDateFieldNumber = 1002;
  static ::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::SiliconFetchedDoc,
      ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
    parsedDate;
  static const int kRouteKeyFieldNumber = 1003;
  static ::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::SiliconFetchedDoc,
      ::google::protobuf::internal::StringTypeTraits, 9, false >
    routeKey;
  static const int kCosmoSourceIdFieldNumber = 1004;
  static ::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::SiliconFetchedDoc,
      ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
    cosmoSourceId;
  static const int kTopicIdFieldNumber = 1005;
  static ::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::SiliconFetchedDoc,
      ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
    topicId;
  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconFetchedDoc)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_murl();
  void clear_has_murl();
  void set_has_sourcemode();
  void clear_has_sourcemode();
  void set_has_parserinfo();
  void clear_has_parserinfo();
  void set_has_taggerinfo();
  void clear_has_taggerinfo();
  void set_has_fetchtimestamp();
  void clear_has_fetchtimestamp();
  void set_has_sourceid();
  void clear_has_sourceid();
  void set_has_discoveryversion();
  void clear_has_discoveryversion();
  void set_has_isremoved();
  void clear_has_isremoved();
  void set_has_publicationdate();
  void clear_has_publicationdate();
  void set_has_canonicalizedurl();
  void clear_has_canonicalizedurl();
  void set_has_siteid();
  void clear_has_siteid();
  void set_has_urlhash();
  void clear_has_urlhash();
  void set_has_regionid();
  void clear_has_regionid();
  void set_has_firstmeetsec();
  void clear_has_firstmeetsec();
  void set_has_providersparams();
  void clear_has_providersparams();
  void set_has_newstags();
  void clear_has_newstags();
  void set_has_newsstories();
  void clear_has_newsstories();
  void set_has_vkpost();
  void clear_has_vkpost();
  void set_has_scrolltoclickinfo();
  void clear_has_scrolltoclickinfo();
  void set_has_userpixels();
  void clear_has_userpixels();
  void set_has_state();
  void clear_has_state();
  void set_has_isdocstateupdated();
  void clear_has_isdocstateupdated();
  void set_has_jsonblocks();
  void clear_has_jsonblocks();
  void set_has_customadminfields();
  void clear_has_customadminfields();
  void set_has_external_url();
  void clear_has_external_url();
  void set_has_isadmincustomdocupdated();
  void clear_has_isadmincustomdocupdated();
  void set_has_hascontents();
  void clear_has_hascontents();
  void set_has_risksfields();
  void clear_has_risksfields();
  void set_has_original_url();
  void clear_has_original_url();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sourcenames_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > categoryids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr murl_;
  ::google::protobuf::internal::ArenaStringPtr canonicalizedurl_;
  ::google::protobuf::internal::ArenaStringPtr vkpost_;
  ::google::protobuf::internal::ArenaStringPtr jsonblocks_;
  ::google::protobuf::internal::ArenaStringPtr external_url_;
  ::google::protobuf::internal::ArenaStringPtr original_url_;
  ::ru::mail::go::webbase::blobs::SiliconDocParserInfo* parserinfo_;
  ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* taggerinfo_;
  ::ru::mail::go::webbase::blobs::SiliconSourceId* sourceid_;
  ::ru::mail::go::webbase::blobs::ProvidersParams* providersparams_;
  ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData* newstags_;
  ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData* newsstories_;
  ::ru::mail::go::webbase::blobs::ScrollToClickInfo* scrolltoclickinfo_;
  ::ru::mail::go::webbase::blobs::UserPixels* userpixels_;
  ::ru::mail::go::webbase::blobs::SiliconeDocState* state_;
  ::ru::mail::go::webbase::blobs::CustomAdminFields* customadminfields_;
  ::ru::mail::go::webbase::blobs::RisksFields* risksfields_;
  ::google::protobuf::int64 fetchtimestamp_;
  ::google::protobuf::int64 discoveryversion_;
  int sourcemode_;
  ::google::protobuf::uint32 regionid_;
  ::google::protobuf::int64 publicationdate_;
  ::google::protobuf::int64 siteid_;
  ::google::protobuf::int64 urlhash_;
  ::google::protobuf::int64 firstmeetsec_;
  bool isremoved_;
  bool isdocstateupdated_;
  bool isadmincustomdocupdated_;
  bool hascontents_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconDocParserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconDocParserInfo) */ {
 public:
  SiliconDocParserInfo();
  virtual ~SiliconDocParserInfo();

  SiliconDocParserInfo(const SiliconDocParserInfo& from);

  inline SiliconDocParserInfo& operator=(const SiliconDocParserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconDocParserInfo(SiliconDocParserInfo&& from) noexcept
    : SiliconDocParserInfo() {
    *this = ::std::move(from);
  }

  inline SiliconDocParserInfo& operator=(SiliconDocParserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconDocParserInfo& default_instance();

  static inline const SiliconDocParserInfo* internal_default_instance() {
    return reinterpret_cast<const SiliconDocParserInfo*>(
               &_SiliconDocParserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SiliconDocParserInfo* other);
  friend void swap(SiliconDocParserInfo& a, SiliconDocParserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconDocParserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconDocParserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconDocParserInfo& from);
  void MergeFrom(const SiliconDocParserInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconDocParserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.Gallery galleries = 17;
  int galleries_size() const;
  void clear_galleries();
  static const int kGalleriesFieldNumber = 17;
  const ::ru::mail::go::webbase::blobs::Gallery& galleries(int index) const;
  ::ru::mail::go::webbase::blobs::Gallery* mutable_galleries(int index);
  ::ru::mail::go::webbase::blobs::Gallery* add_galleries();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Gallery >*
      mutable_galleries();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Gallery >&
      galleries() const;

  // repeated string categories = 24;
  int categories_size() const;
  void clear_categories();
  static const int kCategoriesFieldNumber = 24;
  const ::std::string& categories(int index) const;
  ::std::string* mutable_categories(int index);
  void set_categories(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_categories(int index, ::std::string&& value);
  #endif
  void set_categories(int index, const char* value);
  void set_categories(int index, const char* value, size_t size);
  ::std::string* add_categories();
  void add_categories(const ::std::string& value);
  #if LANG_CXX11
  void add_categories(::std::string&& value);
  #endif
  void add_categories(const char* value);
  void add_categories(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& categories() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_categories();

  // repeated int32 doc_region_ids = 28;
  int doc_region_ids_size() const;
  void clear_doc_region_ids();
  static const int kDocRegionIdsFieldNumber = 28;
  ::google::protobuf::int32 doc_region_ids(int index) const;
  void set_doc_region_ids(int index, ::google::protobuf::int32 value);
  void add_doc_region_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      doc_region_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_doc_region_ids();

  // optional string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string body = 3;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 3;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // optional string video = 5;
  bool has_video() const;
  void clear_video();
  static const int kVideoFieldNumber = 5;
  const ::std::string& video() const;
  void set_video(const ::std::string& value);
  #if LANG_CXX11
  void set_video(::std::string&& value);
  #endif
  void set_video(const char* value);
  void set_video(const char* value, size_t size);
  ::std::string* mutable_video();
  ::std::string* release_video();
  void set_allocated_video(::std::string* video);

  // optional string descriptionRss = 6;
  bool has_descriptionrss() const;
  void clear_descriptionrss();
  static const int kDescriptionRssFieldNumber = 6;
  const ::std::string& descriptionrss() const;
  void set_descriptionrss(const ::std::string& value);
  #if LANG_CXX11
  void set_descriptionrss(::std::string&& value);
  #endif
  void set_descriptionrss(const char* value);
  void set_descriptionrss(const char* value, size_t size);
  ::std::string* mutable_descriptionrss();
  ::std::string* release_descriptionrss();
  void set_allocated_descriptionrss(::std::string* descriptionrss);

  // optional string layerBodyHtml = 11;
  bool has_layerbodyhtml() const;
  void clear_layerbodyhtml();
  static const int kLayerBodyHtmlFieldNumber = 11;
  const ::std::string& layerbodyhtml() const;
  void set_layerbodyhtml(const ::std::string& value);
  #if LANG_CXX11
  void set_layerbodyhtml(::std::string&& value);
  #endif
  void set_layerbodyhtml(const char* value);
  void set_layerbodyhtml(const char* value, size_t size);
  ::std::string* mutable_layerbodyhtml();
  ::std::string* release_layerbodyhtml();
  void set_allocated_layerbodyhtml(::std::string* layerbodyhtml);

  // optional string layer_header = 14;
  bool has_layer_header() const;
  void clear_layer_header();
  static const int kLayerHeaderFieldNumber = 14;
  const ::std::string& layer_header() const;
  void set_layer_header(const ::std::string& value);
  #if LANG_CXX11
  void set_layer_header(::std::string&& value);
  #endif
  void set_layer_header(const char* value);
  void set_layer_header(const char* value, size_t size);
  ::std::string* mutable_layer_header();
  ::std::string* release_layer_header();
  void set_allocated_layer_header(::std::string* layer_header);

  // optional string layer_footer = 15;
  bool has_layer_footer() const;
  void clear_layer_footer();
  static const int kLayerFooterFieldNumber = 15;
  const ::std::string& layer_footer() const;
  void set_layer_footer(const ::std::string& value);
  #if LANG_CXX11
  void set_layer_footer(::std::string&& value);
  #endif
  void set_layer_footer(const char* value);
  void set_layer_footer(const char* value, size_t size);
  ::std::string* mutable_layer_footer();
  ::std::string* release_layer_footer();
  void set_allocated_layer_footer(::std::string* layer_footer);

  // optional string amp_url = 16;
  bool has_amp_url() const;
  void clear_amp_url();
  static const int kAmpUrlFieldNumber = 16;
  const ::std::string& amp_url() const;
  void set_amp_url(const ::std::string& value);
  #if LANG_CXX11
  void set_amp_url(::std::string&& value);
  #endif
  void set_amp_url(const char* value);
  void set_amp_url(const char* value, size_t size);
  ::std::string* mutable_amp_url();
  ::std::string* release_amp_url();
  void set_allocated_amp_url(::std::string* amp_url);

  // optional string guid = 18;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 18;
  const ::std::string& guid() const;
  void set_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_guid(::std::string&& value);
  #endif
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  ::std::string* mutable_guid();
  ::std::string* release_guid();
  void set_allocated_guid(::std::string* guid);

  // optional string slug = 21;
  bool has_slug() const;
  void clear_slug();
  static const int kSlugFieldNumber = 21;
  const ::std::string& slug() const;
  void set_slug(const ::std::string& value);
  #if LANG_CXX11
  void set_slug(::std::string&& value);
  #endif
  void set_slug(const char* value);
  void set_slug(const char* value, size_t size);
  ::std::string* mutable_slug();
  ::std::string* release_slug();
  void set_allocated_slug(::std::string* slug);

  // optional string media_rating = 22;
  bool has_media_rating() const;
  void clear_media_rating();
  static const int kMediaRatingFieldNumber = 22;
  const ::std::string& media_rating() const;
  void set_media_rating(const ::std::string& value);
  #if LANG_CXX11
  void set_media_rating(::std::string&& value);
  #endif
  void set_media_rating(const char* value);
  void set_media_rating(const char* value, size_t size);
  ::std::string* mutable_media_rating();
  ::std::string* release_media_rating();
  void set_allocated_media_rating(::std::string* media_rating);

  // optional string pharma_product = 26;
  bool has_pharma_product() const;
  void clear_pharma_product();
  static const int kPharmaProductFieldNumber = 26;
  const ::std::string& pharma_product() const;
  void set_pharma_product(const ::std::string& value);
  #if LANG_CXX11
  void set_pharma_product(::std::string&& value);
  #endif
  void set_pharma_product(const char* value);
  void set_pharma_product(const char* value, size_t size);
  ::std::string* mutable_pharma_product();
  ::std::string* release_pharma_product();
  void set_allocated_pharma_product(::std::string* pharma_product);

  // required .ru.mail.go.webbase.blobs.PostImages images = 4;
  bool has_images() const;
  void clear_images();
  static const int kImagesFieldNumber = 4;
  const ::ru::mail::go::webbase::blobs::PostImages& images() const;
  ::ru::mail::go::webbase::blobs::PostImages* mutable_images();
  ::ru::mail::go::webbase::blobs::PostImages* release_images();
  void set_allocated_images(::ru::mail::go::webbase::blobs::PostImages* images);

  // optional .ru.mail.go.webbase.blobs.SiliconeParsedBody parsedBody = 7;
  bool has_parsedbody() const;
  void clear_parsedbody();
  static const int kParsedBodyFieldNumber = 7;
  const ::ru::mail::go::webbase::blobs::SiliconeParsedBody& parsedbody() const;
  ::ru::mail::go::webbase::blobs::SiliconeParsedBody* mutable_parsedbody();
  ::ru::mail::go::webbase::blobs::SiliconeParsedBody* release_parsedbody();
  void set_allocated_parsedbody(::ru::mail::go::webbase::blobs::SiliconeParsedBody* parsedbody);

  // optional .ru.mail.go.webbase.blobs.SiliconeAuthor author = 8;
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 8;
  const ::ru::mail::go::webbase::blobs::SiliconeAuthor& author() const;
  ::ru::mail::go::webbase::blobs::SiliconeAuthor* mutable_author();
  ::ru::mail::go::webbase::blobs::SiliconeAuthor* release_author();
  void set_allocated_author(::ru::mail::go::webbase::blobs::SiliconeAuthor* author);

  // optional .ru.mail.go.webbase.blobs.SiliconeCategory category = 9;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 9;
  const ::ru::mail::go::webbase::blobs::SiliconeCategory& category() const;
  ::ru::mail::go::webbase::blobs::SiliconeCategory* mutable_category();
  ::ru::mail::go::webbase::blobs::SiliconeCategory* release_category();
  void set_allocated_category(::ru::mail::go::webbase::blobs::SiliconeCategory* category);

  // optional .ru.mail.go.webbase.blobs.SiliconeVideoData videoData = 10;
  bool has_videodata() const;
  void clear_videodata();
  static const int kVideoDataFieldNumber = 10;
  const ::ru::mail::go::webbase::blobs::SiliconeVideoData& videodata() const;
  ::ru::mail::go::webbase::blobs::SiliconeVideoData* mutable_videodata();
  ::ru::mail::go::webbase::blobs::SiliconeVideoData* release_videodata();
  void set_allocated_videodata(::ru::mail::go::webbase::blobs::SiliconeVideoData* videodata);

  // optional .ru.mail.go.webbase.blobs.CustomFields customFields = 12;
  bool has_customfields() const;
  void clear_customfields();
  static const int kCustomFieldsFieldNumber = 12;
  const ::ru::mail::go::webbase::blobs::CustomFields& customfields() const;
  ::ru::mail::go::webbase::blobs::CustomFields* mutable_customfields();
  ::ru::mail::go::webbase::blobs::CustomFields* release_customfields();
  void set_allocated_customfields(::ru::mail::go::webbase::blobs::CustomFields* customfields);

  // optional .ru.mail.go.webbase.blobs.PulseVideos videos = 20;
  bool has_videos() const;
  void clear_videos();
  static const int kVideosFieldNumber = 20;
  const ::ru::mail::go::webbase::blobs::PulseVideos& videos() const;
  ::ru::mail::go::webbase::blobs::PulseVideos* mutable_videos();
  ::ru::mail::go::webbase::blobs::PulseVideos* release_videos();
  void set_allocated_videos(::ru::mail::go::webbase::blobs::PulseVideos* videos);

  // optional int32 layer_words_count = 13;
  bool has_layer_words_count() const;
  void clear_layer_words_count();
  static const int kLayerWordsCountFieldNumber = 13;
  ::google::protobuf::int32 layer_words_count() const;
  void set_layer_words_count(::google::protobuf::int32 value);

  // optional bool is_valid_fulltext = 19;
  bool has_is_valid_fulltext() const;
  void clear_is_valid_fulltext();
  static const int kIsValidFulltextFieldNumber = 19;
  bool is_valid_fulltext() const;
  void set_is_valid_fulltext(bool value);

  // optional bool has_relap_test = 27;
  bool has_has_relap_test() const;
  void clear_has_relap_test();
  static const int kHasRelapTestFieldNumber = 27;
  bool has_relap_test() const;
  void set_has_relap_test(bool value);

  // optional int64 ttl = 23;
  bool has_ttl() const;
  void clear_ttl();
  static const int kTtlFieldNumber = 23;
  ::google::protobuf::int64 ttl() const;
  void set_ttl(::google::protobuf::int64 value);

  // optional int64 layer_symbol_count = 25;
  bool has_layer_symbol_count() const;
  void clear_layer_symbol_count();
  static const int kLayerSymbolCountFieldNumber = 25;
  ::google::protobuf::int64 layer_symbol_count() const;
  void set_layer_symbol_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconDocParserInfo)
 private:
  void set_has_title();
  void clear_has_title();
  void set_has_description();
  void clear_has_description();
  void set_has_body();
  void clear_has_body();
  void set_has_images();
  void clear_has_images();
  void set_has_video();
  void clear_has_video();
  void set_has_descriptionrss();
  void clear_has_descriptionrss();
  void set_has_parsedbody();
  void clear_has_parsedbody();
  void set_has_author();
  void clear_has_author();
  void set_has_category();
  void clear_has_category();
  void set_has_videodata();
  void clear_has_videodata();
  void set_has_layerbodyhtml();
  void clear_has_layerbodyhtml();
  void set_has_customfields();
  void clear_has_customfields();
  void set_has_layer_words_count();
  void clear_has_layer_words_count();
  void set_has_layer_header();
  void clear_has_layer_header();
  void set_has_layer_footer();
  void clear_has_layer_footer();
  void set_has_amp_url();
  void clear_has_amp_url();
  void set_has_guid();
  void clear_has_guid();
  void set_has_is_valid_fulltext();
  void clear_has_is_valid_fulltext();
  void set_has_videos();
  void clear_has_videos();
  void set_has_slug();
  void clear_has_slug();
  void set_has_media_rating();
  void clear_has_media_rating();
  void set_has_ttl();
  void clear_has_ttl();
  void set_has_layer_symbol_count();
  void clear_has_layer_symbol_count();
  void set_has_pharma_product();
  void clear_has_pharma_product();
  void set_has_has_relap_test();
  void clear_has_has_relap_test();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Gallery > galleries_;
  ::google::protobuf::RepeatedPtrField< ::std::string> categories_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > doc_region_ids_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::internal::ArenaStringPtr video_;
  ::google::protobuf::internal::ArenaStringPtr descriptionrss_;
  ::google::protobuf::internal::ArenaStringPtr layerbodyhtml_;
  ::google::protobuf::internal::ArenaStringPtr layer_header_;
  ::google::protobuf::internal::ArenaStringPtr layer_footer_;
  ::google::protobuf::internal::ArenaStringPtr amp_url_;
  ::google::protobuf::internal::ArenaStringPtr guid_;
  ::google::protobuf::internal::ArenaStringPtr slug_;
  ::google::protobuf::internal::ArenaStringPtr media_rating_;
  ::google::protobuf::internal::ArenaStringPtr pharma_product_;
  ::ru::mail::go::webbase::blobs::PostImages* images_;
  ::ru::mail::go::webbase::blobs::SiliconeParsedBody* parsedbody_;
  ::ru::mail::go::webbase::blobs::SiliconeAuthor* author_;
  ::ru::mail::go::webbase::blobs::SiliconeCategory* category_;
  ::ru::mail::go::webbase::blobs::SiliconeVideoData* videodata_;
  ::ru::mail::go::webbase::blobs::CustomFields* customfields_;
  ::ru::mail::go::webbase::blobs::PulseVideos* videos_;
  ::google::protobuf::int32 layer_words_count_;
  bool is_valid_fulltext_;
  bool has_relap_test_;
  ::google::protobuf::int64 ttl_;
  ::google::protobuf::int64 layer_symbol_count_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PulseVideos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.PulseVideos) */ {
 public:
  PulseVideos();
  virtual ~PulseVideos();

  PulseVideos(const PulseVideos& from);

  inline PulseVideos& operator=(const PulseVideos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PulseVideos(PulseVideos&& from) noexcept
    : PulseVideos() {
    *this = ::std::move(from);
  }

  inline PulseVideos& operator=(PulseVideos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PulseVideos& default_instance();

  static inline const PulseVideos* internal_default_instance() {
    return reinterpret_cast<const PulseVideos*>(
               &_PulseVideos_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PulseVideos* other);
  friend void swap(PulseVideos& a, PulseVideos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PulseVideos* New() const PROTOBUF_FINAL { return New(NULL); }

  PulseVideos* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PulseVideos& from);
  void MergeFrom(const PulseVideos& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PulseVideos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ru.mail.go.webbase.blobs.PulseVideo mainVideo = 1;
  bool has_mainvideo() const;
  void clear_mainvideo();
  static const int kMainVideoFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::PulseVideo& mainvideo() const;
  ::ru::mail::go::webbase::blobs::PulseVideo* mutable_mainvideo();
  ::ru::mail::go::webbase::blobs::PulseVideo* release_mainvideo();
  void set_allocated_mainvideo(::ru::mail::go::webbase::blobs::PulseVideo* mainvideo);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.PulseVideos)
 private:
  void set_has_mainvideo();
  void clear_has_mainvideo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::webbase::blobs::PulseVideo* mainvideo_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PulseVideo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.PulseVideo) */ {
 public:
  PulseVideo();
  virtual ~PulseVideo();

  PulseVideo(const PulseVideo& from);

  inline PulseVideo& operator=(const PulseVideo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PulseVideo(PulseVideo&& from) noexcept
    : PulseVideo() {
    *this = ::std::move(from);
  }

  inline PulseVideo& operator=(PulseVideo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PulseVideo& default_instance();

  static inline const PulseVideo* internal_default_instance() {
    return reinterpret_cast<const PulseVideo*>(
               &_PulseVideo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PulseVideo* other);
  friend void swap(PulseVideo& a, PulseVideo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PulseVideo* New() const PROTOBUF_FINAL { return New(NULL); }

  PulseVideo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PulseVideo& from);
  void MergeFrom(const PulseVideo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PulseVideo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string video_url = 1;
  bool has_video_url() const;
  void clear_video_url();
  static const int kVideoUrlFieldNumber = 1;
  const ::std::string& video_url() const;
  void set_video_url(const ::std::string& value);
  #if LANG_CXX11
  void set_video_url(::std::string&& value);
  #endif
  void set_video_url(const char* value);
  void set_video_url(const char* value, size_t size);
  ::std::string* mutable_video_url();
  ::std::string* release_video_url();
  void set_allocated_video_url(::std::string* video_url);

  // optional int32 duration = 2;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.PulseVideo)
 private:
  void set_has_video_url();
  void clear_has_video_url();
  void set_has_duration();
  void clear_has_duration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr video_url_;
  ::google::protobuf::int32 duration_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconeAuthor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconeAuthor) */ {
 public:
  SiliconeAuthor();
  virtual ~SiliconeAuthor();

  SiliconeAuthor(const SiliconeAuthor& from);

  inline SiliconeAuthor& operator=(const SiliconeAuthor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconeAuthor(SiliconeAuthor&& from) noexcept
    : SiliconeAuthor() {
    *this = ::std::move(from);
  }

  inline SiliconeAuthor& operator=(SiliconeAuthor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconeAuthor& default_instance();

  static inline const SiliconeAuthor* internal_default_instance() {
    return reinterpret_cast<const SiliconeAuthor*>(
               &_SiliconeAuthor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SiliconeAuthor* other);
  friend void swap(SiliconeAuthor& a, SiliconeAuthor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconeAuthor* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconeAuthor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconeAuthor& from);
  void MergeFrom(const SiliconeAuthor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconeAuthor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconeAuthor)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_url();
  void clear_has_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconeCategory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconeCategory) */ {
 public:
  SiliconeCategory();
  virtual ~SiliconeCategory();

  SiliconeCategory(const SiliconeCategory& from);

  inline SiliconeCategory& operator=(const SiliconeCategory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconeCategory(SiliconeCategory&& from) noexcept
    : SiliconeCategory() {
    *this = ::std::move(from);
  }

  inline SiliconeCategory& operator=(SiliconeCategory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconeCategory& default_instance();

  static inline const SiliconeCategory* internal_default_instance() {
    return reinterpret_cast<const SiliconeCategory*>(
               &_SiliconeCategory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SiliconeCategory* other);
  friend void swap(SiliconeCategory& a, SiliconeCategory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconeCategory* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconeCategory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconeCategory& from);
  void MergeFrom(const SiliconeCategory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconeCategory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string category = 1;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 1;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // optional string sub_category = 2;
  bool has_sub_category() const;
  void clear_sub_category();
  static const int kSubCategoryFieldNumber = 2;
  const ::std::string& sub_category() const;
  void set_sub_category(const ::std::string& value);
  #if LANG_CXX11
  void set_sub_category(::std::string&& value);
  #endif
  void set_sub_category(const char* value);
  void set_sub_category(const char* value, size_t size);
  ::std::string* mutable_sub_category();
  ::std::string* release_sub_category();
  void set_allocated_sub_category(::std::string* sub_category);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconeCategory)
 private:
  void set_has_category();
  void clear_has_category();
  void set_has_sub_category();
  void clear_has_sub_category();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::google::protobuf::internal::ArenaStringPtr sub_category_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconeDocState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconeDocState) */ {
 public:
  SiliconeDocState();
  virtual ~SiliconeDocState();

  SiliconeDocState(const SiliconeDocState& from);

  inline SiliconeDocState& operator=(const SiliconeDocState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconeDocState(SiliconeDocState&& from) noexcept
    : SiliconeDocState() {
    *this = ::std::move(from);
  }

  inline SiliconeDocState& operator=(SiliconeDocState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconeDocState& default_instance();

  static inline const SiliconeDocState* internal_default_instance() {
    return reinterpret_cast<const SiliconeDocState*>(
               &_SiliconeDocState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SiliconeDocState* other);
  friend void swap(SiliconeDocState& a, SiliconeDocState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconeDocState* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconeDocState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconeDocState& from);
  void MergeFrom(const SiliconeDocState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconeDocState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool disabled = 1;
  bool has_disabled() const;
  void clear_disabled();
  static const int kDisabledFieldNumber = 1;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconeDocState)
 private:
  void set_has_disabled();
  void clear_has_disabled();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool disabled_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconeParsedBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconeParsedBody) */ {
 public:
  SiliconeParsedBody();
  virtual ~SiliconeParsedBody();

  SiliconeParsedBody(const SiliconeParsedBody& from);

  inline SiliconeParsedBody& operator=(const SiliconeParsedBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconeParsedBody(SiliconeParsedBody&& from) noexcept
    : SiliconeParsedBody() {
    *this = ::std::move(from);
  }

  inline SiliconeParsedBody& operator=(SiliconeParsedBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconeParsedBody& default_instance();

  static inline const SiliconeParsedBody* internal_default_instance() {
    return reinterpret_cast<const SiliconeParsedBody*>(
               &_SiliconeParsedBody_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SiliconeParsedBody* other);
  friend void swap(SiliconeParsedBody& a, SiliconeParsedBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconeParsedBody* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconeParsedBody* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconeParsedBody& from);
  void MergeFrom(const SiliconeParsedBody& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconeParsedBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.SiliconeBodyPart bodyPart = 1;
  int bodypart_size() const;
  void clear_bodypart();
  static const int kBodyPartFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::SiliconeBodyPart& bodypart(int index) const;
  ::ru::mail::go::webbase::blobs::SiliconeBodyPart* mutable_bodypart(int index);
  ::ru::mail::go::webbase::blobs::SiliconeBodyPart* add_bodypart();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeBodyPart >*
      mutable_bodypart();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeBodyPart >&
      bodypart() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconeParsedBody)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeBodyPart > bodypart_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconeBodyPart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconeBodyPart) */ {
 public:
  SiliconeBodyPart();
  virtual ~SiliconeBodyPart();

  SiliconeBodyPart(const SiliconeBodyPart& from);

  inline SiliconeBodyPart& operator=(const SiliconeBodyPart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconeBodyPart(SiliconeBodyPart&& from) noexcept
    : SiliconeBodyPart() {
    *this = ::std::move(from);
  }

  inline SiliconeBodyPart& operator=(SiliconeBodyPart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconeBodyPart& default_instance();

  static inline const SiliconeBodyPart* internal_default_instance() {
    return reinterpret_cast<const SiliconeBodyPart*>(
               &_SiliconeBodyPart_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SiliconeBodyPart* other);
  friend void swap(SiliconeBodyPart& a, SiliconeBodyPart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconeBodyPart* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconeBodyPart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconeBodyPart& from);
  void MergeFrom(const SiliconeBodyPart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconeBodyPart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SiliconeBodyPart_PartName PartName;
  static const PartName HEADER1 =
    SiliconeBodyPart_PartName_HEADER1;
  static const PartName HEADER2 =
    SiliconeBodyPart_PartName_HEADER2;
  static const PartName HEADER3 =
    SiliconeBodyPart_PartName_HEADER3;
  static const PartName HEADER4 =
    SiliconeBodyPart_PartName_HEADER4;
  static const PartName HEADER5 =
    SiliconeBodyPart_PartName_HEADER5;
  static const PartName HEADER6 =
    SiliconeBodyPart_PartName_HEADER6;
  static const PartName PREFORMATTED =
    SiliconeBodyPart_PartName_PREFORMATTED;
  static const PartName TEXT =
    SiliconeBodyPart_PartName_TEXT;
  static const PartName BREAK =
    SiliconeBodyPart_PartName_BREAK;
  static const PartName PARAGRAPH =
    SiliconeBodyPart_PartName_PARAGRAPH;
  static const PartName LIST =
    SiliconeBodyPart_PartName_LIST;
  static const PartName LINK =
    SiliconeBodyPart_PartName_LINK;
  static const PartName BLOCKQUOTE =
    SiliconeBodyPart_PartName_BLOCKQUOTE;
  static const PartName IMG =
    SiliconeBodyPart_PartName_IMG;
  static const PartName INSTAGRAM =
    SiliconeBodyPart_PartName_INSTAGRAM;
  static const PartName VIDEO_YOUTUBE =
    SiliconeBodyPart_PartName_VIDEO_YOUTUBE;
  static const PartName VIDEO_VIMEO =
    SiliconeBodyPart_PartName_VIDEO_VIMEO;
  static const PartName VIDEO_VK =
    SiliconeBodyPart_PartName_VIDEO_VK;
  static const PartName IFRAME =
    SiliconeBodyPart_PartName_IFRAME;
  static const PartName HTML =
    SiliconeBodyPart_PartName_HTML;
  static inline bool PartName_IsValid(int value) {
    return SiliconeBodyPart_PartName_IsValid(value);
  }
  static const PartName PartName_MIN =
    SiliconeBodyPart_PartName_PartName_MIN;
  static const PartName PartName_MAX =
    SiliconeBodyPart_PartName_PartName_MAX;
  static const int PartName_ARRAYSIZE =
    SiliconeBodyPart_PartName_PartName_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PartName_descriptor() {
    return SiliconeBodyPart_PartName_descriptor();
  }
  static inline const ::std::string& PartName_Name(PartName value) {
    return SiliconeBodyPart_PartName_Name(value);
  }
  static inline bool PartName_Parse(const ::std::string& name,
      PartName* value) {
    return SiliconeBodyPart_PartName_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string list = 8;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 8;
  const ::std::string& list(int index) const;
  ::std::string* mutable_list(int index);
  void set_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_list(int index, ::std::string&& value);
  #endif
  void set_list(int index, const char* value);
  void set_list(int index, const char* value, size_t size);
  ::std::string* add_list();
  void add_list(const ::std::string& value);
  #if LANG_CXX11
  void add_list(::std::string&& value);
  #endif
  void add_list(const char* value);
  void add_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_list();

  // optional string textHtml = 2;
  bool has_texthtml() const;
  void clear_texthtml();
  static const int kTextHtmlFieldNumber = 2;
  const ::std::string& texthtml() const;
  void set_texthtml(const ::std::string& value);
  #if LANG_CXX11
  void set_texthtml(::std::string&& value);
  #endif
  void set_texthtml(const char* value);
  void set_texthtml(const char* value, size_t size);
  ::std::string* mutable_texthtml();
  ::std::string* release_texthtml();
  void set_allocated_texthtml(::std::string* texthtml);

  // optional string imageHref = 5;
  bool has_imagehref() const;
  void clear_imagehref();
  static const int kImageHrefFieldNumber = 5;
  const ::std::string& imagehref() const;
  void set_imagehref(const ::std::string& value);
  #if LANG_CXX11
  void set_imagehref(::std::string&& value);
  #endif
  void set_imagehref(const char* value);
  void set_imagehref(const char* value, size_t size);
  ::std::string* mutable_imagehref();
  ::std::string* release_imagehref();
  void set_allocated_imagehref(::std::string* imagehref);

  // optional string objectId = 7;
  bool has_objectid() const;
  void clear_objectid();
  static const int kObjectIdFieldNumber = 7;
  const ::std::string& objectid() const;
  void set_objectid(const ::std::string& value);
  #if LANG_CXX11
  void set_objectid(::std::string&& value);
  #endif
  void set_objectid(const char* value);
  void set_objectid(const char* value, size_t size);
  ::std::string* mutable_objectid();
  ::std::string* release_objectid();
  void set_allocated_objectid(::std::string* objectid);

  // optional .ru.mail.go.webbase.blobs.SiliconImage image = 4;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 4;
  const ::ru::mail::go::webbase::blobs::SiliconImage& image() const;
  ::ru::mail::go::webbase::blobs::SiliconImage* mutable_image();
  ::ru::mail::go::webbase::blobs::SiliconImage* release_image();
  void set_allocated_image(::ru::mail::go::webbase::blobs::SiliconImage* image);

  // required .ru.mail.go.webbase.blobs.SiliconeBodyPart.PartName name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  ::ru::mail::go::webbase::blobs::SiliconeBodyPart_PartName name() const;
  void set_name(::ru::mail::go::webbase::blobs::SiliconeBodyPart_PartName value);

  // optional bool containsCode = 3;
  bool has_containscode() const;
  void clear_containscode();
  static const int kContainsCodeFieldNumber = 3;
  bool containscode() const;
  void set_containscode(bool value);

  // optional .ru.mail.go.webbase.blobs.ImageType imageType = 6;
  bool has_imagetype() const;
  void clear_imagetype();
  static const int kImageTypeFieldNumber = 6;
  ::ru::mail::go::webbase::blobs::ImageType imagetype() const;
  void set_imagetype(::ru::mail::go::webbase::blobs::ImageType value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconeBodyPart)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_texthtml();
  void clear_has_texthtml();
  void set_has_containscode();
  void clear_has_containscode();
  void set_has_image();
  void clear_has_image();
  void set_has_imagehref();
  void clear_has_imagehref();
  void set_has_imagetype();
  void clear_has_imagetype();
  void set_has_objectid();
  void clear_has_objectid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> list_;
  ::google::protobuf::internal::ArenaStringPtr texthtml_;
  ::google::protobuf::internal::ArenaStringPtr imagehref_;
  ::google::protobuf::internal::ArenaStringPtr objectid_;
  ::ru::mail::go::webbase::blobs::SiliconImage* image_;
  int name_;
  bool containscode_;
  int imagetype_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gallery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.Gallery) */ {
 public:
  Gallery();
  virtual ~Gallery();

  Gallery(const Gallery& from);

  inline Gallery& operator=(const Gallery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gallery(Gallery&& from) noexcept
    : Gallery() {
    *this = ::std::move(from);
  }

  inline Gallery& operator=(Gallery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gallery& default_instance();

  static inline const Gallery* internal_default_instance() {
    return reinterpret_cast<const Gallery*>(
               &_Gallery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Gallery* other);
  friend void swap(Gallery& a, Gallery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gallery* New() const PROTOBUF_FINAL { return New(NULL); }

  Gallery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gallery& from);
  void MergeFrom(const Gallery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gallery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.GalleryImage images = 2;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::GalleryImage& images(int index) const;
  ::ru::mail::go::webbase::blobs::GalleryImage* mutable_images(int index);
  ::ru::mail::go::webbase::blobs::GalleryImage* add_images();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::GalleryImage >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::GalleryImage >&
      images() const;

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.Gallery)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::GalleryImage > images_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GalleryImage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.GalleryImage) */ {
 public:
  GalleryImage();
  virtual ~GalleryImage();

  GalleryImage(const GalleryImage& from);

  inline GalleryImage& operator=(const GalleryImage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GalleryImage(GalleryImage&& from) noexcept
    : GalleryImage() {
    *this = ::std::move(from);
  }

  inline GalleryImage& operator=(GalleryImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GalleryImage& default_instance();

  static inline const GalleryImage* internal_default_instance() {
    return reinterpret_cast<const GalleryImage*>(
               &_GalleryImage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(GalleryImage* other);
  friend void swap(GalleryImage& a, GalleryImage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GalleryImage* New() const PROTOBUF_FINAL { return New(NULL); }

  GalleryImage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GalleryImage& from);
  void MergeFrom(const GalleryImage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GalleryImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string placeHolderUrl = 2;
  bool has_placeholderurl() const;
  void clear_placeholderurl();
  static const int kPlaceHolderUrlFieldNumber = 2;
  const ::std::string& placeholderurl() const;
  void set_placeholderurl(const ::std::string& value);
  #if LANG_CXX11
  void set_placeholderurl(::std::string&& value);
  #endif
  void set_placeholderurl(const char* value);
  void set_placeholderurl(const char* value, size_t size);
  ::std::string* mutable_placeholderurl();
  ::std::string* release_placeholderurl();
  void set_allocated_placeholderurl(::std::string* placeholderurl);

  // optional string description = 3;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // required .ru.mail.go.webbase.blobs.SiliconImage image = 1;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::SiliconImage& image() const;
  ::ru::mail::go::webbase::blobs::SiliconImage* mutable_image();
  ::ru::mail::go::webbase::blobs::SiliconImage* release_image();
  void set_allocated_image(::ru::mail::go::webbase::blobs::SiliconImage* image);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.GalleryImage)
 private:
  void set_has_image();
  void clear_has_image();
  void set_has_placeholderurl();
  void clear_has_placeholderurl();
  void set_has_description();
  void clear_has_description();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr placeholderurl_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::ru::mail::go::webbase::blobs::SiliconImage* image_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PostImages : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.PostImages) */ {
 public:
  PostImages();
  virtual ~PostImages();

  PostImages(const PostImages& from);

  inline PostImages& operator=(const PostImages& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PostImages(PostImages&& from) noexcept
    : PostImages() {
    *this = ::std::move(from);
  }

  inline PostImages& operator=(PostImages&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PostImages& default_instance();

  static inline const PostImages* internal_default_instance() {
    return reinterpret_cast<const PostImages*>(
               &_PostImages_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(PostImages* other);
  friend void swap(PostImages& a, PostImages& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PostImages* New() const PROTOBUF_FINAL { return New(NULL); }

  PostImages* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PostImages& from);
  void MergeFrom(const PostImages& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PostImages* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.SiliconImage images = 2;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::SiliconImage& images(int index) const;
  ::ru::mail::go::webbase::blobs::SiliconImage* mutable_images(int index);
  ::ru::mail::go::webbase::blobs::SiliconImage* add_images();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconImage >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconImage >&
      images() const;

  // repeated .ru.mail.go.webbase.blobs.SiliconImage layerImages = 4;
  int layerimages_size() const;
  void clear_layerimages();
  static const int kLayerImagesFieldNumber = 4;
  const ::ru::mail::go::webbase::blobs::SiliconImage& layerimages(int index) const;
  ::ru::mail::go::webbase::blobs::SiliconImage* mutable_layerimages(int index);
  ::ru::mail::go::webbase::blobs::SiliconImage* add_layerimages();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconImage >*
      mutable_layerimages();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconImage >&
      layerimages() const;

  // optional .ru.mail.go.webbase.blobs.SiliconImage mainImage = 1;
  bool has_mainimage() const;
  void clear_mainimage();
  static const int kMainImageFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::SiliconImage& mainimage() const;
  ::ru::mail::go::webbase::blobs::SiliconImage* mutable_mainimage();
  ::ru::mail::go::webbase::blobs::SiliconImage* release_mainimage();
  void set_allocated_mainimage(::ru::mail::go::webbase::blobs::SiliconImage* mainimage);

  // optional .ru.mail.go.webbase.blobs.SiliconImage okImage = 3;
  bool has_okimage() const;
  void clear_okimage();
  static const int kOkImageFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::SiliconImage& okimage() const;
  ::ru::mail::go::webbase::blobs::SiliconImage* mutable_okimage();
  ::ru::mail::go::webbase::blobs::SiliconImage* release_okimage();
  void set_allocated_okimage(::ru::mail::go::webbase::blobs::SiliconImage* okimage);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.PostImages)
 private:
  void set_has_mainimage();
  void clear_has_mainimage();
  void set_has_okimage();
  void clear_has_okimage();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconImage > images_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconImage > layerimages_;
  ::ru::mail::go::webbase::blobs::SiliconImage* mainimage_;
  ::ru::mail::go::webbase::blobs::SiliconImage* okimage_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconImage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconImage) */ {
 public:
  SiliconImage();
  virtual ~SiliconImage();

  SiliconImage(const SiliconImage& from);

  inline SiliconImage& operator=(const SiliconImage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconImage(SiliconImage&& from) noexcept
    : SiliconImage() {
    *this = ::std::move(from);
  }

  inline SiliconImage& operator=(SiliconImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconImage& default_instance();

  static inline const SiliconImage* internal_default_instance() {
    return reinterpret_cast<const SiliconImage*>(
               &_SiliconImage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(SiliconImage* other);
  friend void swap(SiliconImage& a, SiliconImage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconImage* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconImage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconImage& from);
  void MergeFrom(const SiliconImage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.SiliconeImagePostID postID = 7;
  int postid_size() const;
  void clear_postid();
  static const int kPostIDFieldNumber = 7;
  const ::ru::mail::go::webbase::blobs::SiliconeImagePostID& postid(int index) const;
  ::ru::mail::go::webbase::blobs::SiliconeImagePostID* mutable_postid(int index);
  ::ru::mail::go::webbase::blobs::SiliconeImagePostID* add_postid();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeImagePostID >*
      mutable_postid();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeImagePostID >&
      postid() const;

  // repeated string tags = 16;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 16;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // required string originalUrl = 1;
  bool has_originalurl() const;
  void clear_originalurl();
  static const int kOriginalUrlFieldNumber = 1;
  const ::std::string& originalurl() const;
  void set_originalurl(const ::std::string& value);
  #if LANG_CXX11
  void set_originalurl(::std::string&& value);
  #endif
  void set_originalurl(const char* value);
  void set_originalurl(const char* value, size_t size);
  ::std::string* mutable_originalurl();
  ::std::string* release_originalurl();
  void set_allocated_originalurl(::std::string* originalurl);

  // optional string previewUrl = 2;
  bool has_previewurl() const;
  void clear_previewurl();
  static const int kPreviewUrlFieldNumber = 2;
  const ::std::string& previewurl() const;
  void set_previewurl(const ::std::string& value);
  #if LANG_CXX11
  void set_previewurl(::std::string&& value);
  #endif
  void set_previewurl(const char* value);
  void set_previewurl(const char* value, size_t size);
  ::std::string* mutable_previewurl();
  ::std::string* release_previewurl();
  void set_allocated_previewurl(::std::string* previewurl);

  // optional string microbase = 8;
  bool has_microbase() const;
  void clear_microbase();
  static const int kMicrobaseFieldNumber = 8;
  const ::std::string& microbase() const;
  void set_microbase(const ::std::string& value);
  #if LANG_CXX11
  void set_microbase(::std::string&& value);
  #endif
  void set_microbase(const char* value);
  void set_microbase(const char* value, size_t size);
  ::std::string* mutable_microbase();
  ::std::string* release_microbase();
  void set_allocated_microbase(::std::string* microbase);

  // optional string caption = 9;
  bool has_caption() const;
  void clear_caption();
  static const int kCaptionFieldNumber = 9;
  const ::std::string& caption() const;
  void set_caption(const ::std::string& value);
  #if LANG_CXX11
  void set_caption(::std::string&& value);
  #endif
  void set_caption(const char* value);
  void set_caption(const char* value, size_t size);
  ::std::string* mutable_caption();
  ::std::string* release_caption();
  void set_allocated_caption(::std::string* caption);

  // optional string srchKey = 13;
  bool has_srchkey() const;
  void clear_srchkey();
  static const int kSrchKeyFieldNumber = 13;
  const ::std::string& srchkey() const;
  void set_srchkey(const ::std::string& value);
  #if LANG_CXX11
  void set_srchkey(::std::string&& value);
  #endif
  void set_srchkey(const char* value);
  void set_srchkey(const char* value, size_t size);
  ::std::string* mutable_srchkey();
  ::std::string* release_srchkey();
  void set_allocated_srchkey(::std::string* srchkey);

  // optional string img_url = 15;
  bool has_img_url() const;
  void clear_img_url();
  static const int kImgUrlFieldNumber = 15;
  const ::std::string& img_url() const;
  void set_img_url(const ::std::string& value);
  #if LANG_CXX11
  void set_img_url(::std::string&& value);
  #endif
  void set_img_url(const char* value);
  void set_img_url(const char* value, size_t size);
  ::std::string* mutable_img_url();
  ::std::string* release_img_url();
  void set_allocated_img_url(::std::string* img_url);

  // optional .ru.mail.go.webbase.parsing.img.Thumb imageContent = 6;
  bool has_imagecontent() const;
  void clear_imagecontent();
  static const int kImageContentFieldNumber = 6;
  const ::ru::mail::go::webbase::parsing::img::Thumb& imagecontent() const;
  ::ru::mail::go::webbase::parsing::img::Thumb* mutable_imagecontent();
  ::ru::mail::go::webbase::parsing::img::Thumb* release_imagecontent();
  void set_allocated_imagecontent(::ru::mail::go::webbase::parsing::img::Thumb* imagecontent);

  // optional uint64 simHash = 3;
  bool has_simhash() const;
  void clear_simhash();
  static const int kSimHashFieldNumber = 3;
  ::google::protobuf::uint64 simhash() const;
  void set_simhash(::google::protobuf::uint64 value);

  // optional uint32 width = 4;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 5;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint64 okImageId = 12;
  bool has_okimageid() const;
  void clear_okimageid();
  static const int kOkImageIdFieldNumber = 12;
  ::google::protobuf::uint64 okimageid() const;
  void set_okimageid(::google::protobuf::uint64 value);

  // optional .ru.mail.go.webbase.parsing.img.ImageFormat originalFormat = 11;
  bool has_originalformat() const;
  void clear_originalformat();
  static const int kOriginalFormatFieldNumber = 11;
  ::ru::mail::go::webbase::parsing::img::ImageFormat originalformat() const;
  void set_originalformat(::ru::mail::go::webbase::parsing::img::ImageFormat value);

  // optional bool fetchFailed = 10;
  bool has_fetchfailed() const;
  void clear_fetchfailed();
  static const int kFetchFailedFieldNumber = 10;
  bool fetchfailed() const;
  void set_fetchfailed(bool value);

  // optional bool supplied = 14;
  bool has_supplied() const;
  void clear_supplied();
  static const int kSuppliedFieldNumber = 14;
  bool supplied() const;
  void set_supplied(bool value);

  // optional bool saveFailed = 17;
  bool has_savefailed() const;
  void clear_savefailed();
  static const int kSaveFailedFieldNumber = 17;
  bool savefailed() const;
  void set_savefailed(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconImage)
 private:
  void set_has_originalurl();
  void clear_has_originalurl();
  void set_has_previewurl();
  void clear_has_previewurl();
  void set_has_simhash();
  void clear_has_simhash();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_imagecontent();
  void clear_has_imagecontent();
  void set_has_microbase();
  void clear_has_microbase();
  void set_has_caption();
  void clear_has_caption();
  void set_has_fetchfailed();
  void clear_has_fetchfailed();
  void set_has_originalformat();
  void clear_has_originalformat();
  void set_has_okimageid();
  void clear_has_okimageid();
  void set_has_srchkey();
  void clear_has_srchkey();
  void set_has_supplied();
  void clear_has_supplied();
  void set_has_img_url();
  void clear_has_img_url();
  void set_has_savefailed();
  void clear_has_savefailed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeImagePostID > postid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr originalurl_;
  ::google::protobuf::internal::ArenaStringPtr previewurl_;
  ::google::protobuf::internal::ArenaStringPtr microbase_;
  ::google::protobuf::internal::ArenaStringPtr caption_;
  ::google::protobuf::internal::ArenaStringPtr srchkey_;
  ::google::protobuf::internal::ArenaStringPtr img_url_;
  ::ru::mail::go::webbase::parsing::img::Thumb* imagecontent_;
  ::google::protobuf::uint64 simhash_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint64 okimageid_;
  int originalformat_;
  bool fetchfailed_;
  bool supplied_;
  bool savefailed_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconeImagePostID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconeImagePostID) */ {
 public:
  SiliconeImagePostID();
  virtual ~SiliconeImagePostID();

  SiliconeImagePostID(const SiliconeImagePostID& from);

  inline SiliconeImagePostID& operator=(const SiliconeImagePostID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconeImagePostID(SiliconeImagePostID&& from) noexcept
    : SiliconeImagePostID() {
    *this = ::std::move(from);
  }

  inline SiliconeImagePostID& operator=(SiliconeImagePostID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconeImagePostID& default_instance();

  static inline const SiliconeImagePostID* internal_default_instance() {
    return reinterpret_cast<const SiliconeImagePostID*>(
               &_SiliconeImagePostID_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(SiliconeImagePostID* other);
  friend void swap(SiliconeImagePostID& a, SiliconeImagePostID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconeImagePostID* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconeImagePostID* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconeImagePostID& from);
  void MergeFrom(const SiliconeImagePostID& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconeImagePostID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string postUrl = 1;
  bool has_posturl() const;
  void clear_posturl();
  static const int kPostUrlFieldNumber = 1;
  const ::std::string& posturl() const;
  void set_posturl(const ::std::string& value);
  #if LANG_CXX11
  void set_posturl(::std::string&& value);
  #endif
  void set_posturl(const char* value);
  void set_posturl(const char* value, size_t size);
  ::std::string* mutable_posturl();
  ::std::string* release_posturl();
  void set_allocated_posturl(::std::string* posturl);

  // required int32 ordinal = 2;
  bool has_ordinal() const;
  void clear_ordinal();
  static const int kOrdinalFieldNumber = 2;
  ::google::protobuf::int32 ordinal() const;
  void set_ordinal(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconeImagePostID)
 private:
  void set_has_posturl();
  void clear_has_posturl();
  void set_has_ordinal();
  void clear_has_ordinal();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr posturl_;
  ::google::protobuf::int32 ordinal_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconeImageGalleryRef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef) */ {
 public:
  SiliconeImageGalleryRef();
  virtual ~SiliconeImageGalleryRef();

  SiliconeImageGalleryRef(const SiliconeImageGalleryRef& from);

  inline SiliconeImageGalleryRef& operator=(const SiliconeImageGalleryRef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconeImageGalleryRef(SiliconeImageGalleryRef&& from) noexcept
    : SiliconeImageGalleryRef() {
    *this = ::std::move(from);
  }

  inline SiliconeImageGalleryRef& operator=(SiliconeImageGalleryRef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconeImageGalleryRef& default_instance();

  static inline const SiliconeImageGalleryRef* internal_default_instance() {
    return reinterpret_cast<const SiliconeImageGalleryRef*>(
               &_SiliconeImageGalleryRef_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(SiliconeImageGalleryRef* other);
  friend void swap(SiliconeImageGalleryRef& a, SiliconeImageGalleryRef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconeImageGalleryRef* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconeImageGalleryRef* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconeImageGalleryRef& from);
  void MergeFrom(const SiliconeImageGalleryRef& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconeImageGalleryRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string postUrl = 1;
  bool has_posturl() const;
  void clear_posturl();
  static const int kPostUrlFieldNumber = 1;
  const ::std::string& posturl() const;
  void set_posturl(const ::std::string& value);
  #if LANG_CXX11
  void set_posturl(::std::string&& value);
  #endif
  void set_posturl(const char* value);
  void set_posturl(const char* value, size_t size);
  ::std::string* mutable_posturl();
  ::std::string* release_posturl();
  void set_allocated_posturl(::std::string* posturl);

  // required string galleryName = 2;
  bool has_galleryname() const;
  void clear_galleryname();
  static const int kGalleryNameFieldNumber = 2;
  const ::std::string& galleryname() const;
  void set_galleryname(const ::std::string& value);
  #if LANG_CXX11
  void set_galleryname(::std::string&& value);
  #endif
  void set_galleryname(const char* value);
  void set_galleryname(const char* value, size_t size);
  ::std::string* mutable_galleryname();
  ::std::string* release_galleryname();
  void set_allocated_galleryname(::std::string* galleryname);

  // required int32 ordinal = 3;
  bool has_ordinal() const;
  void clear_ordinal();
  static const int kOrdinalFieldNumber = 3;
  ::google::protobuf::int32 ordinal() const;
  void set_ordinal(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef)
 private:
  void set_has_posturl();
  void clear_has_posturl();
  void set_has_galleryname();
  void clear_has_galleryname();
  void set_has_ordinal();
  void clear_has_ordinal();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr posturl_;
  ::google::protobuf::internal::ArenaStringPtr galleryname_;
  ::google::protobuf::int32 ordinal_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconDocTaggerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo) */ {
 public:
  SiliconDocTaggerInfo();
  virtual ~SiliconDocTaggerInfo();

  SiliconDocTaggerInfo(const SiliconDocTaggerInfo& from);

  inline SiliconDocTaggerInfo& operator=(const SiliconDocTaggerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconDocTaggerInfo(SiliconDocTaggerInfo&& from) noexcept
    : SiliconDocTaggerInfo() {
    *this = ::std::move(from);
  }

  inline SiliconDocTaggerInfo& operator=(SiliconDocTaggerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconDocTaggerInfo& default_instance();

  static inline const SiliconDocTaggerInfo* internal_default_instance() {
    return reinterpret_cast<const SiliconDocTaggerInfo*>(
               &_SiliconDocTaggerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(SiliconDocTaggerInfo* other);
  friend void swap(SiliconDocTaggerInfo& a, SiliconDocTaggerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconDocTaggerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconDocTaggerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconDocTaggerInfo& from);
  void MergeFrom(const SiliconDocTaggerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconDocTaggerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tag = 1;
  int tag_size() const;
  void clear_tag();
  static const int kTagFieldNumber = 1;
  const ::std::string& tag(int index) const;
  ::std::string* mutable_tag(int index);
  void set_tag(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tag(int index, ::std::string&& value);
  #endif
  void set_tag(int index, const char* value);
  void set_tag(int index, const char* value, size_t size);
  ::std::string* add_tag();
  void add_tag(const ::std::string& value);
  #if LANG_CXX11
  void add_tag(::std::string&& value);
  #endif
  void add_tag(const char* value);
  void add_tag(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tag() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tag();

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tag_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconDocTaggerHashInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo) */ {
 public:
  SiliconDocTaggerHashInfo();
  virtual ~SiliconDocTaggerHashInfo();

  SiliconDocTaggerHashInfo(const SiliconDocTaggerHashInfo& from);

  inline SiliconDocTaggerHashInfo& operator=(const SiliconDocTaggerHashInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconDocTaggerHashInfo(SiliconDocTaggerHashInfo&& from) noexcept
    : SiliconDocTaggerHashInfo() {
    *this = ::std::move(from);
  }

  inline SiliconDocTaggerHashInfo& operator=(SiliconDocTaggerHashInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconDocTaggerHashInfo& default_instance();

  static inline const SiliconDocTaggerHashInfo* internal_default_instance() {
    return reinterpret_cast<const SiliconDocTaggerHashInfo*>(
               &_SiliconDocTaggerHashInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(SiliconDocTaggerHashInfo* other);
  friend void swap(SiliconDocTaggerHashInfo& a, SiliconDocTaggerHashInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconDocTaggerHashInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconDocTaggerHashInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconDocTaggerHashInfo& from);
  void MergeFrom(const SiliconDocTaggerHashInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconDocTaggerHashInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 tagHashes = 1;
  int taghashes_size() const;
  void clear_taghashes();
  static const int kTagHashesFieldNumber = 1;
  ::google::protobuf::int64 taghashes(int index) const;
  void set_taghashes(int index, ::google::protobuf::int64 value);
  void add_taghashes(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      taghashes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_taghashes();

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > taghashes_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScrollToClickInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.ScrollToClickInfo) */ {
 public:
  ScrollToClickInfo();
  virtual ~ScrollToClickInfo();

  ScrollToClickInfo(const ScrollToClickInfo& from);

  inline ScrollToClickInfo& operator=(const ScrollToClickInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScrollToClickInfo(ScrollToClickInfo&& from) noexcept
    : ScrollToClickInfo() {
    *this = ::std::move(from);
  }

  inline ScrollToClickInfo& operator=(ScrollToClickInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScrollToClickInfo& default_instance();

  static inline const ScrollToClickInfo* internal_default_instance() {
    return reinterpret_cast<const ScrollToClickInfo*>(
               &_ScrollToClickInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(ScrollToClickInfo* other);
  friend void swap(ScrollToClickInfo& a, ScrollToClickInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScrollToClickInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ScrollToClickInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScrollToClickInfo& from);
  void MergeFrom(const ScrollToClickInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScrollToClickInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string target_url = 1;
  bool has_target_url() const;
  void clear_target_url();
  static const int kTargetUrlFieldNumber = 1;
  const ::std::string& target_url() const;
  void set_target_url(const ::std::string& value);
  #if LANG_CXX11
  void set_target_url(::std::string&& value);
  #endif
  void set_target_url(const char* value);
  void set_target_url(const char* value, size_t size);
  ::std::string* mutable_target_url();
  ::std::string* release_target_url();
  void set_allocated_target_url(::std::string* target_url);

  // optional string target_url_title = 2;
  bool has_target_url_title() const;
  void clear_target_url_title();
  static const int kTargetUrlTitleFieldNumber = 2;
  const ::std::string& target_url_title() const;
  void set_target_url_title(const ::std::string& value);
  #if LANG_CXX11
  void set_target_url_title(::std::string&& value);
  #endif
  void set_target_url_title(const char* value);
  void set_target_url_title(const char* value, size_t size);
  ::std::string* mutable_target_url_title();
  ::std::string* release_target_url_title();
  void set_allocated_target_url_title(::std::string* target_url_title);

  // optional string target_url_description = 3;
  bool has_target_url_description() const;
  void clear_target_url_description();
  static const int kTargetUrlDescriptionFieldNumber = 3;
  const ::std::string& target_url_description() const;
  void set_target_url_description(const ::std::string& value);
  #if LANG_CXX11
  void set_target_url_description(::std::string&& value);
  #endif
  void set_target_url_description(const char* value);
  void set_target_url_description(const char* value, size_t size);
  ::std::string* mutable_target_url_description();
  ::std::string* release_target_url_description();
  void set_allocated_target_url_description(::std::string* target_url_description);

  // optional string img_aerospike_url = 4;
  bool has_img_aerospike_url() const;
  void clear_img_aerospike_url();
  static const int kImgAerospikeUrlFieldNumber = 4;
  const ::std::string& img_aerospike_url() const;
  void set_img_aerospike_url(const ::std::string& value);
  #if LANG_CXX11
  void set_img_aerospike_url(::std::string&& value);
  #endif
  void set_img_aerospike_url(const char* value);
  void set_img_aerospike_url(const char* value, size_t size);
  ::std::string* mutable_img_aerospike_url();
  ::std::string* release_img_aerospike_url();
  void set_allocated_img_aerospike_url(::std::string* img_aerospike_url);

  // optional string mobile_img_aerospike_url = 5;
  bool has_mobile_img_aerospike_url() const;
  void clear_mobile_img_aerospike_url();
  static const int kMobileImgAerospikeUrlFieldNumber = 5;
  const ::std::string& mobile_img_aerospike_url() const;
  void set_mobile_img_aerospike_url(const ::std::string& value);
  #if LANG_CXX11
  void set_mobile_img_aerospike_url(::std::string&& value);
  #endif
  void set_mobile_img_aerospike_url(const char* value);
  void set_mobile_img_aerospike_url(const char* value, size_t size);
  ::std::string* mutable_mobile_img_aerospike_url();
  ::std::string* release_mobile_img_aerospike_url();
  void set_allocated_mobile_img_aerospike_url(::std::string* mobile_img_aerospike_url);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.ScrollToClickInfo)
 private:
  void set_has_target_url();
  void clear_has_target_url();
  void set_has_target_url_title();
  void clear_has_target_url_title();
  void set_has_target_url_description();
  void clear_has_target_url_description();
  void set_has_img_aerospike_url();
  void clear_has_img_aerospike_url();
  void set_has_mobile_img_aerospike_url();
  void clear_has_mobile_img_aerospike_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr target_url_;
  ::google::protobuf::internal::ArenaStringPtr target_url_title_;
  ::google::protobuf::internal::ArenaStringPtr target_url_description_;
  ::google::protobuf::internal::ArenaStringPtr img_aerospike_url_;
  ::google::protobuf::internal::ArenaStringPtr mobile_img_aerospike_url_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserPixels : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.UserPixels) */ {
 public:
  UserPixels();
  virtual ~UserPixels();

  UserPixels(const UserPixels& from);

  inline UserPixels& operator=(const UserPixels& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserPixels(UserPixels&& from) noexcept
    : UserPixels() {
    *this = ::std::move(from);
  }

  inline UserPixels& operator=(UserPixels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPixels& default_instance();

  static inline const UserPixels* internal_default_instance() {
    return reinterpret_cast<const UserPixels*>(
               &_UserPixels_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(UserPixels* other);
  friend void swap(UserPixels& a, UserPixels& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserPixels* New() const PROTOBUF_FINAL { return New(NULL); }

  UserPixels* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserPixels& from);
  void MergeFrom(const UserPixels& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserPixels* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string readup = 1;
  int readup_size() const;
  void clear_readup();
  static const int kReadupFieldNumber = 1;
  const ::std::string& readup(int index) const;
  ::std::string* mutable_readup(int index);
  void set_readup(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_readup(int index, ::std::string&& value);
  #endif
  void set_readup(int index, const char* value);
  void set_readup(int index, const char* value, size_t size);
  ::std::string* add_readup();
  void add_readup(const ::std::string& value);
  #if LANG_CXX11
  void add_readup(::std::string&& value);
  #endif
  void add_readup(const char* value);
  void add_readup(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& readup() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_readup();

  // repeated string redirect = 2;
  int redirect_size() const;
  void clear_redirect();
  static const int kRedirectFieldNumber = 2;
  const ::std::string& redirect(int index) const;
  ::std::string* mutable_redirect(int index);
  void set_redirect(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(int index, ::std::string&& value);
  #endif
  void set_redirect(int index, const char* value);
  void set_redirect(int index, const char* value, size_t size);
  ::std::string* add_redirect();
  void add_redirect(const ::std::string& value);
  #if LANG_CXX11
  void add_redirect(::std::string&& value);
  #endif
  void add_redirect(const char* value);
  void add_redirect(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& redirect() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_redirect();

  // repeated string show = 3;
  int show_size() const;
  void clear_show();
  static const int kShowFieldNumber = 3;
  const ::std::string& show(int index) const;
  ::std::string* mutable_show(int index);
  void set_show(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_show(int index, ::std::string&& value);
  #endif
  void set_show(int index, const char* value);
  void set_show(int index, const char* value, size_t size);
  ::std::string* add_show();
  void add_show(const ::std::string& value);
  #if LANG_CXX11
  void add_show(::std::string&& value);
  #endif
  void add_show(const char* value);
  void add_show(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& show() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_show();

  // repeated string click = 4;
  int click_size() const;
  void clear_click();
  static const int kClickFieldNumber = 4;
  const ::std::string& click(int index) const;
  ::std::string* mutable_click(int index);
  void set_click(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_click(int index, ::std::string&& value);
  #endif
  void set_click(int index, const char* value);
  void set_click(int index, const char* value, size_t size);
  ::std::string* add_click();
  void add_click(const ::std::string& value);
  #if LANG_CXX11
  void add_click(::std::string&& value);
  #endif
  void add_click(const char* value);
  void add_click(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& click() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_click();

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.UserPixels)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> readup_;
  ::google::protobuf::RepeatedPtrField< ::std::string> redirect_;
  ::google::protobuf::RepeatedPtrField< ::std::string> show_;
  ::google::protobuf::RepeatedPtrField< ::std::string> click_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CustomAdminFields : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.CustomAdminFields) */ {
 public:
  CustomAdminFields();
  virtual ~CustomAdminFields();

  CustomAdminFields(const CustomAdminFields& from);

  inline CustomAdminFields& operator=(const CustomAdminFields& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomAdminFields(CustomAdminFields&& from) noexcept
    : CustomAdminFields() {
    *this = ::std::move(from);
  }

  inline CustomAdminFields& operator=(CustomAdminFields&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomAdminFields& default_instance();

  static inline const CustomAdminFields* internal_default_instance() {
    return reinterpret_cast<const CustomAdminFields*>(
               &_CustomAdminFields_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(CustomAdminFields* other);
  friend void swap(CustomAdminFields& a, CustomAdminFields& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomAdminFields* New() const PROTOBUF_FINAL { return New(NULL); }

  CustomAdminFields* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CustomAdminFields& from);
  void MergeFrom(const CustomAdminFields& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CustomAdminFields* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string custom_title = 1;
  bool has_custom_title() const;
  void clear_custom_title();
  static const int kCustomTitleFieldNumber = 1;
  const ::std::string& custom_title() const;
  void set_custom_title(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_title(::std::string&& value);
  #endif
  void set_custom_title(const char* value);
  void set_custom_title(const char* value, size_t size);
  ::std::string* mutable_custom_title();
  ::std::string* release_custom_title();
  void set_allocated_custom_title(::std::string* custom_title);

  // optional .ru.mail.go.webbase.blobs.SiliconImage custom_main_image = 2;
  bool has_custom_main_image() const;
  void clear_custom_main_image();
  static const int kCustomMainImageFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::SiliconImage& custom_main_image() const;
  ::ru::mail::go::webbase::blobs::SiliconImage* mutable_custom_main_image();
  ::ru::mail::go::webbase::blobs::SiliconImage* release_custom_main_image();
  void set_allocated_custom_main_image(::ru::mail::go::webbase::blobs::SiliconImage* custom_main_image);

  // optional .ru.mail.go.webbase.blobs.SiliconImage vendor_image = 3;
  bool has_vendor_image() const;
  void clear_vendor_image();
  static const int kVendorImageFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::SiliconImage& vendor_image() const;
  ::ru::mail::go::webbase::blobs::SiliconImage* mutable_vendor_image();
  ::ru::mail::go::webbase::blobs::SiliconImage* release_vendor_image();
  void set_allocated_vendor_image(::ru::mail::go::webbase::blobs::SiliconImage* vendor_image);

  // optional bool is_for_realme = 4;
  bool has_is_for_realme() const;
  void clear_is_for_realme();
  static const int kIsForRealmeFieldNumber = 4;
  bool is_for_realme() const;
  void set_is_for_realme(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.CustomAdminFields)
 private:
  void set_has_custom_title();
  void clear_has_custom_title();
  void set_has_custom_main_image();
  void clear_has_custom_main_image();
  void set_has_vendor_image();
  void clear_has_vendor_image();
  void set_has_is_for_realme();
  void clear_has_is_for_realme();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr custom_title_;
  ::ru::mail::go::webbase::blobs::SiliconImage* custom_main_image_;
  ::ru::mail::go::webbase::blobs::SiliconImage* vendor_image_;
  bool is_for_realme_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceParsingErrorList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SourceParsingErrorList) */ {
 public:
  SourceParsingErrorList();
  virtual ~SourceParsingErrorList();

  SourceParsingErrorList(const SourceParsingErrorList& from);

  inline SourceParsingErrorList& operator=(const SourceParsingErrorList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceParsingErrorList(SourceParsingErrorList&& from) noexcept
    : SourceParsingErrorList() {
    *this = ::std::move(from);
  }

  inline SourceParsingErrorList& operator=(SourceParsingErrorList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceParsingErrorList& default_instance();

  static inline const SourceParsingErrorList* internal_default_instance() {
    return reinterpret_cast<const SourceParsingErrorList*>(
               &_SourceParsingErrorList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(SourceParsingErrorList* other);
  friend void swap(SourceParsingErrorList& a, SourceParsingErrorList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceParsingErrorList* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceParsingErrorList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceParsingErrorList& from);
  void MergeFrom(const SourceParsingErrorList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceParsingErrorList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.SourceParsingError errors = 1;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 1;
  ::ru::mail::go::webbase::blobs::SourceParsingError errors(int index) const;
  void set_errors(int index, ::ru::mail::go::webbase::blobs::SourceParsingError value);
  void add_errors(::ru::mail::go::webbase::blobs::SourceParsingError value);
  const ::google::protobuf::RepeatedField<int>& errors() const;
  ::google::protobuf::RepeatedField<int>* mutable_errors();

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SourceParsingErrorList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> errors_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PostParsingErrorList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.PostParsingErrorList) */ {
 public:
  PostParsingErrorList();
  virtual ~PostParsingErrorList();

  PostParsingErrorList(const PostParsingErrorList& from);

  inline PostParsingErrorList& operator=(const PostParsingErrorList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PostParsingErrorList(PostParsingErrorList&& from) noexcept
    : PostParsingErrorList() {
    *this = ::std::move(from);
  }

  inline PostParsingErrorList& operator=(PostParsingErrorList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PostParsingErrorList& default_instance();

  static inline const PostParsingErrorList* internal_default_instance() {
    return reinterpret_cast<const PostParsingErrorList*>(
               &_PostParsingErrorList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(PostParsingErrorList* other);
  friend void swap(PostParsingErrorList& a, PostParsingErrorList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PostParsingErrorList* New() const PROTOBUF_FINAL { return New(NULL); }

  PostParsingErrorList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PostParsingErrorList& from);
  void MergeFrom(const PostParsingErrorList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PostParsingErrorList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.PostParsingError errors = 1;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 1;
  ::ru::mail::go::webbase::blobs::PostParsingError errors(int index) const;
  void set_errors(int index, ::ru::mail::go::webbase::blobs::PostParsingError value);
  void add_errors(::ru::mail::go::webbase::blobs::PostParsingError value);
  const ::google::protobuf::RepeatedField<int>& errors() const;
  ::google::protobuf::RepeatedField<int>* mutable_errors();

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.PostParsingErrorList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> errors_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageProcessErrorList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.ImageProcessErrorList) */ {
 public:
  ImageProcessErrorList();
  virtual ~ImageProcessErrorList();

  ImageProcessErrorList(const ImageProcessErrorList& from);

  inline ImageProcessErrorList& operator=(const ImageProcessErrorList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageProcessErrorList(ImageProcessErrorList&& from) noexcept
    : ImageProcessErrorList() {
    *this = ::std::move(from);
  }

  inline ImageProcessErrorList& operator=(ImageProcessErrorList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageProcessErrorList& default_instance();

  static inline const ImageProcessErrorList* internal_default_instance() {
    return reinterpret_cast<const ImageProcessErrorList*>(
               &_ImageProcessErrorList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(ImageProcessErrorList* other);
  friend void swap(ImageProcessErrorList& a, ImageProcessErrorList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageProcessErrorList* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageProcessErrorList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageProcessErrorList& from);
  void MergeFrom(const ImageProcessErrorList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageProcessErrorList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.ImageProcessError errors = 1;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 1;
  ::ru::mail::go::webbase::blobs::ImageProcessError errors(int index) const;
  void set_errors(int index, ::ru::mail::go::webbase::blobs::ImageProcessError value);
  void add_errors(::ru::mail::go::webbase::blobs::ImageProcessError value);
  const ::google::protobuf::RepeatedField<int>& errors() const;
  ::google::protobuf::RepeatedField<int>* mutable_errors();

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.ImageProcessErrorList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> errors_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconeYoutubeVideoData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData) */ {
 public:
  SiliconeYoutubeVideoData();
  virtual ~SiliconeYoutubeVideoData();

  SiliconeYoutubeVideoData(const SiliconeYoutubeVideoData& from);

  inline SiliconeYoutubeVideoData& operator=(const SiliconeYoutubeVideoData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconeYoutubeVideoData(SiliconeYoutubeVideoData&& from) noexcept
    : SiliconeYoutubeVideoData() {
    *this = ::std::move(from);
  }

  inline SiliconeYoutubeVideoData& operator=(SiliconeYoutubeVideoData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconeYoutubeVideoData& default_instance();

  static inline const SiliconeYoutubeVideoData* internal_default_instance() {
    return reinterpret_cast<const SiliconeYoutubeVideoData*>(
               &_SiliconeYoutubeVideoData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(SiliconeYoutubeVideoData* other);
  friend void swap(SiliconeYoutubeVideoData& a, SiliconeYoutubeVideoData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconeYoutubeVideoData* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconeYoutubeVideoData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconeYoutubeVideoData& from);
  void MergeFrom(const SiliconeYoutubeVideoData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconeYoutubeVideoData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string videoID = 1;
  bool has_videoid() const;
  void clear_videoid();
  static const int kVideoIDFieldNumber = 1;
  const ::std::string& videoid() const;
  void set_videoid(const ::std::string& value);
  #if LANG_CXX11
  void set_videoid(::std::string&& value);
  #endif
  void set_videoid(const char* value);
  void set_videoid(const char* value, size_t size);
  ::std::string* mutable_videoid();
  ::std::string* release_videoid();
  void set_allocated_videoid(::std::string* videoid);

  // required string playerUrl = 2;
  bool has_playerurl() const;
  void clear_playerurl();
  static const int kPlayerUrlFieldNumber = 2;
  const ::std::string& playerurl() const;
  void set_playerurl(const ::std::string& value);
  #if LANG_CXX11
  void set_playerurl(::std::string&& value);
  #endif
  void set_playerurl(const char* value);
  void set_playerurl(const char* value, size_t size);
  ::std::string* mutable_playerurl();
  ::std::string* release_playerurl();
  void set_allocated_playerurl(::std::string* playerurl);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData)
 private:
  void set_has_videoid();
  void clear_has_videoid();
  void set_has_playerurl();
  void clear_has_playerurl();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr videoid_;
  ::google::protobuf::internal::ArenaStringPtr playerurl_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconeVideoYoutube : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconeVideoYoutube) */ {
 public:
  SiliconeVideoYoutube();
  virtual ~SiliconeVideoYoutube();

  SiliconeVideoYoutube(const SiliconeVideoYoutube& from);

  inline SiliconeVideoYoutube& operator=(const SiliconeVideoYoutube& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconeVideoYoutube(SiliconeVideoYoutube&& from) noexcept
    : SiliconeVideoYoutube() {
    *this = ::std::move(from);
  }

  inline SiliconeVideoYoutube& operator=(SiliconeVideoYoutube&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconeVideoYoutube& default_instance();

  static inline const SiliconeVideoYoutube* internal_default_instance() {
    return reinterpret_cast<const SiliconeVideoYoutube*>(
               &_SiliconeVideoYoutube_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(SiliconeVideoYoutube* other);
  friend void swap(SiliconeVideoYoutube& a, SiliconeVideoYoutube& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconeVideoYoutube* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconeVideoYoutube* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconeVideoYoutube& from);
  void MergeFrom(const SiliconeVideoYoutube& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconeVideoYoutube* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string playerUrl = 1;
  bool has_playerurl() const;
  void clear_playerurl();
  static const int kPlayerUrlFieldNumber = 1;
  const ::std::string& playerurl() const;
  void set_playerurl(const ::std::string& value);
  #if LANG_CXX11
  void set_playerurl(::std::string&& value);
  #endif
  void set_playerurl(const char* value);
  void set_playerurl(const char* value, size_t size);
  ::std::string* mutable_playerurl();
  ::std::string* release_playerurl();
  void set_allocated_playerurl(::std::string* playerurl);

  // required string videoID = 2;
  bool has_videoid() const;
  void clear_videoid();
  static const int kVideoIDFieldNumber = 2;
  const ::std::string& videoid() const;
  void set_videoid(const ::std::string& value);
  #if LANG_CXX11
  void set_videoid(::std::string&& value);
  #endif
  void set_videoid(const char* value);
  void set_videoid(const char* value, size_t size);
  ::std::string* mutable_videoid();
  ::std::string* release_videoid();
  void set_allocated_videoid(::std::string* videoid);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconeVideoYoutube)
 private:
  void set_has_playerurl();
  void clear_has_playerurl();
  void set_has_videoid();
  void clear_has_videoid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr playerurl_;
  ::google::protobuf::internal::ArenaStringPtr videoid_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconeVideoVimeo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconeVideoVimeo) */ {
 public:
  SiliconeVideoVimeo();
  virtual ~SiliconeVideoVimeo();

  SiliconeVideoVimeo(const SiliconeVideoVimeo& from);

  inline SiliconeVideoVimeo& operator=(const SiliconeVideoVimeo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconeVideoVimeo(SiliconeVideoVimeo&& from) noexcept
    : SiliconeVideoVimeo() {
    *this = ::std::move(from);
  }

  inline SiliconeVideoVimeo& operator=(SiliconeVideoVimeo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconeVideoVimeo& default_instance();

  static inline const SiliconeVideoVimeo* internal_default_instance() {
    return reinterpret_cast<const SiliconeVideoVimeo*>(
               &_SiliconeVideoVimeo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(SiliconeVideoVimeo* other);
  friend void swap(SiliconeVideoVimeo& a, SiliconeVideoVimeo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconeVideoVimeo* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconeVideoVimeo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconeVideoVimeo& from);
  void MergeFrom(const SiliconeVideoVimeo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconeVideoVimeo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string playerUrl = 1;
  bool has_playerurl() const;
  void clear_playerurl();
  static const int kPlayerUrlFieldNumber = 1;
  const ::std::string& playerurl() const;
  void set_playerurl(const ::std::string& value);
  #if LANG_CXX11
  void set_playerurl(::std::string&& value);
  #endif
  void set_playerurl(const char* value);
  void set_playerurl(const char* value, size_t size);
  ::std::string* mutable_playerurl();
  ::std::string* release_playerurl();
  void set_allocated_playerurl(::std::string* playerurl);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconeVideoVimeo)
 private:
  void set_has_playerurl();
  void clear_has_playerurl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr playerurl_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconeVideo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconeVideo) */ {
 public:
  SiliconeVideo();
  virtual ~SiliconeVideo();

  SiliconeVideo(const SiliconeVideo& from);

  inline SiliconeVideo& operator=(const SiliconeVideo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconeVideo(SiliconeVideo&& from) noexcept
    : SiliconeVideo() {
    *this = ::std::move(from);
  }

  inline SiliconeVideo& operator=(SiliconeVideo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconeVideo& default_instance();

  static inline const SiliconeVideo* internal_default_instance() {
    return reinterpret_cast<const SiliconeVideo*>(
               &_SiliconeVideo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(SiliconeVideo* other);
  friend void swap(SiliconeVideo& a, SiliconeVideo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconeVideo* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconeVideo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconeVideo& from);
  void MergeFrom(const SiliconeVideo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconeVideo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ru.mail.go.webbase.blobs.SiliconeVideoYoutube videoYoutube = 2;
  bool has_videoyoutube() const;
  void clear_videoyoutube();
  static const int kVideoYoutubeFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube& videoyoutube() const;
  ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube* mutable_videoyoutube();
  ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube* release_videoyoutube();
  void set_allocated_videoyoutube(::ru::mail::go::webbase::blobs::SiliconeVideoYoutube* videoyoutube);

  // optional .ru.mail.go.webbase.blobs.SiliconeVideoVimeo videoVimeo = 3;
  bool has_videovimeo() const;
  void clear_videovimeo();
  static const int kVideoVimeoFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo& videovimeo() const;
  ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo* mutable_videovimeo();
  ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo* release_videovimeo();
  void set_allocated_videovimeo(::ru::mail::go::webbase::blobs::SiliconeVideoVimeo* videovimeo);

  // required .ru.mail.go.webbase.blobs.SiliconeVideoType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ru::mail::go::webbase::blobs::SiliconeVideoType type() const;
  void set_type(::ru::mail::go::webbase::blobs::SiliconeVideoType value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconeVideo)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_videoyoutube();
  void clear_has_videoyoutube();
  void set_has_videovimeo();
  void clear_has_videovimeo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube* videoyoutube_;
  ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo* videovimeo_;
  int type_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconeVideoData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconeVideoData) */ {
 public:
  SiliconeVideoData();
  virtual ~SiliconeVideoData();

  SiliconeVideoData(const SiliconeVideoData& from);

  inline SiliconeVideoData& operator=(const SiliconeVideoData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconeVideoData(SiliconeVideoData&& from) noexcept
    : SiliconeVideoData() {
    *this = ::std::move(from);
  }

  inline SiliconeVideoData& operator=(SiliconeVideoData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconeVideoData& default_instance();

  static inline const SiliconeVideoData* internal_default_instance() {
    return reinterpret_cast<const SiliconeVideoData*>(
               &_SiliconeVideoData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(SiliconeVideoData* other);
  friend void swap(SiliconeVideoData& a, SiliconeVideoData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconeVideoData* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconeVideoData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconeVideoData& from);
  void MergeFrom(const SiliconeVideoData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconeVideoData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.SiliconeVideo videos = 2;
  int videos_size() const;
  void clear_videos();
  static const int kVideosFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::SiliconeVideo& videos(int index) const;
  ::ru::mail::go::webbase::blobs::SiliconeVideo* mutable_videos(int index);
  ::ru::mail::go::webbase::blobs::SiliconeVideo* add_videos();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeVideo >*
      mutable_videos();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeVideo >&
      videos() const;

  // optional .ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData youtubeData = 1;
  bool has_youtubedata() const;
  void clear_youtubedata();
  static const int kYoutubeDataFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData& youtubedata() const;
  ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData* mutable_youtubedata();
  ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData* release_youtubedata();
  void set_allocated_youtubedata(::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData* youtubedata);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconeVideoData)
 private:
  void set_has_youtubedata();
  void clear_has_youtubedata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeVideo > videos_;
  ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData* youtubedata_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PostsBySourcesCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.PostsBySourcesCmd) */ {
 public:
  PostsBySourcesCmd();
  virtual ~PostsBySourcesCmd();

  PostsBySourcesCmd(const PostsBySourcesCmd& from);

  inline PostsBySourcesCmd& operator=(const PostsBySourcesCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PostsBySourcesCmd(PostsBySourcesCmd&& from) noexcept
    : PostsBySourcesCmd() {
    *this = ::std::move(from);
  }

  inline PostsBySourcesCmd& operator=(PostsBySourcesCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PostsBySourcesCmd& default_instance();

  static inline const PostsBySourcesCmd* internal_default_instance() {
    return reinterpret_cast<const PostsBySourcesCmd*>(
               &_PostsBySourcesCmd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(PostsBySourcesCmd* other);
  friend void swap(PostsBySourcesCmd& a, PostsBySourcesCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PostsBySourcesCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  PostsBySourcesCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PostsBySourcesCmd& from);
  void MergeFrom(const PostsBySourcesCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PostsBySourcesCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.SiliconSourceId sourceIds = 1;
  int sourceids_size() const;
  void clear_sourceids();
  static const int kSourceIdsFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::SiliconSourceId& sourceids(int index) const;
  ::ru::mail::go::webbase::blobs::SiliconSourceId* mutable_sourceids(int index);
  ::ru::mail::go::webbase::blobs::SiliconSourceId* add_sourceids();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconSourceId >*
      mutable_sourceids();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconSourceId >&
      sourceids() const;

  // repeated string replyTopics = 2;
  int replytopics_size() const;
  void clear_replytopics();
  static const int kReplyTopicsFieldNumber = 2;
  const ::std::string& replytopics(int index) const;
  ::std::string* mutable_replytopics(int index);
  void set_replytopics(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_replytopics(int index, ::std::string&& value);
  #endif
  void set_replytopics(int index, const char* value);
  void set_replytopics(int index, const char* value, size_t size);
  ::std::string* add_replytopics();
  void add_replytopics(const ::std::string& value);
  #if LANG_CXX11
  void add_replytopics(::std::string&& value);
  #endif
  void add_replytopics(const char* value);
  void add_replytopics(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& replytopics() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_replytopics();

  // repeated .ru.mail.go.webbase.blobs.TimeInterval fetchTimeIntervals = 3;
  int fetchtimeintervals_size() const;
  void clear_fetchtimeintervals();
  static const int kFetchTimeIntervalsFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::TimeInterval& fetchtimeintervals(int index) const;
  ::ru::mail::go::webbase::blobs::TimeInterval* mutable_fetchtimeintervals(int index);
  ::ru::mail::go::webbase::blobs::TimeInterval* add_fetchtimeintervals();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TimeInterval >*
      mutable_fetchtimeintervals();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TimeInterval >&
      fetchtimeintervals() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.PostsBySourcesCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconSourceId > sourceids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> replytopics_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TimeInterval > fetchtimeintervals_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PostAndSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.PostAndSource) */ {
 public:
  PostAndSource();
  virtual ~PostAndSource();

  PostAndSource(const PostAndSource& from);

  inline PostAndSource& operator=(const PostAndSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PostAndSource(PostAndSource&& from) noexcept
    : PostAndSource() {
    *this = ::std::move(from);
  }

  inline PostAndSource& operator=(PostAndSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PostAndSource& default_instance();

  static inline const PostAndSource* internal_default_instance() {
    return reinterpret_cast<const PostAndSource*>(
               &_PostAndSource_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(PostAndSource* other);
  friend void swap(PostAndSource& a, PostAndSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PostAndSource* New() const PROTOBUF_FINAL { return New(NULL); }

  PostAndSource* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PostAndSource& from);
  void MergeFrom(const PostAndSource& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PostAndSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string postUrl = 1;
  bool has_posturl() const;
  void clear_posturl();
  static const int kPostUrlFieldNumber = 1;
  const ::std::string& posturl() const;
  void set_posturl(const ::std::string& value);
  #if LANG_CXX11
  void set_posturl(::std::string&& value);
  #endif
  void set_posturl(const char* value);
  void set_posturl(const char* value, size_t size);
  ::std::string* mutable_posturl();
  ::std::string* release_posturl();
  void set_allocated_posturl(::std::string* posturl);

  // required .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 2;
  bool has_sourceid() const;
  void clear_sourceid();
  static const int kSourceIdFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::SiliconSourceId& sourceid() const;
  ::ru::mail::go::webbase::blobs::SiliconSourceId* mutable_sourceid();
  ::ru::mail::go::webbase::blobs::SiliconSourceId* release_sourceid();
  void set_allocated_sourceid(::ru::mail::go::webbase::blobs::SiliconSourceId* sourceid);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.PostAndSource)
 private:
  void set_has_posturl();
  void clear_has_posturl();
  void set_has_sourceid();
  void clear_has_sourceid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr posturl_;
  ::ru::mail::go::webbase::blobs::SiliconSourceId* sourceid_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PostsBySiteCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.PostsBySiteCmd) */ {
 public:
  PostsBySiteCmd();
  virtual ~PostsBySiteCmd();

  PostsBySiteCmd(const PostsBySiteCmd& from);

  inline PostsBySiteCmd& operator=(const PostsBySiteCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PostsBySiteCmd(PostsBySiteCmd&& from) noexcept
    : PostsBySiteCmd() {
    *this = ::std::move(from);
  }

  inline PostsBySiteCmd& operator=(PostsBySiteCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PostsBySiteCmd& default_instance();

  static inline const PostsBySiteCmd* internal_default_instance() {
    return reinterpret_cast<const PostsBySiteCmd*>(
               &_PostsBySiteCmd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(PostsBySiteCmd* other);
  friend void swap(PostsBySiteCmd& a, PostsBySiteCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PostsBySiteCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  PostsBySiteCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PostsBySiteCmd& from);
  void MergeFrom(const PostsBySiteCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PostsBySiteCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 siteIds = 1;
  int siteids_size() const;
  void clear_siteids();
  static const int kSiteIdsFieldNumber = 1;
  ::google::protobuf::int64 siteids(int index) const;
  void set_siteids(int index, ::google::protobuf::int64 value);
  void add_siteids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      siteids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_siteids();

  // repeated string replyTopics = 2;
  int replytopics_size() const;
  void clear_replytopics();
  static const int kReplyTopicsFieldNumber = 2;
  const ::std::string& replytopics(int index) const;
  ::std::string* mutable_replytopics(int index);
  void set_replytopics(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_replytopics(int index, ::std::string&& value);
  #endif
  void set_replytopics(int index, const char* value);
  void set_replytopics(int index, const char* value, size_t size);
  ::std::string* add_replytopics();
  void add_replytopics(const ::std::string& value);
  #if LANG_CXX11
  void add_replytopics(::std::string&& value);
  #endif
  void add_replytopics(const char* value);
  void add_replytopics(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& replytopics() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_replytopics();

  // repeated .ru.mail.go.webbase.blobs.TimeInterval fetchTimeIntervals = 3;
  int fetchtimeintervals_size() const;
  void clear_fetchtimeintervals();
  static const int kFetchTimeIntervalsFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::TimeInterval& fetchtimeintervals(int index) const;
  ::ru::mail::go::webbase::blobs::TimeInterval* mutable_fetchtimeintervals(int index);
  ::ru::mail::go::webbase::blobs::TimeInterval* add_fetchtimeintervals();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TimeInterval >*
      mutable_fetchtimeintervals();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TimeInterval >&
      fetchtimeintervals() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.PostsBySiteCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > siteids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> replytopics_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TimeInterval > fetchtimeintervals_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimeInterval : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.TimeInterval) */ {
 public:
  TimeInterval();
  virtual ~TimeInterval();

  TimeInterval(const TimeInterval& from);

  inline TimeInterval& operator=(const TimeInterval& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeInterval(TimeInterval&& from) noexcept
    : TimeInterval() {
    *this = ::std::move(from);
  }

  inline TimeInterval& operator=(TimeInterval&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeInterval& default_instance();

  static inline const TimeInterval* internal_default_instance() {
    return reinterpret_cast<const TimeInterval*>(
               &_TimeInterval_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(TimeInterval* other);
  friend void swap(TimeInterval& a, TimeInterval& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeInterval* New() const PROTOBUF_FINAL { return New(NULL); }

  TimeInterval* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimeInterval& from);
  void MergeFrom(const TimeInterval& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimeInterval* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 startTsMs = 1;
  bool has_starttsms() const;
  void clear_starttsms();
  static const int kStartTsMsFieldNumber = 1;
  ::google::protobuf::uint64 starttsms() const;
  void set_starttsms(::google::protobuf::uint64 value);

  // optional uint64 stopTsMs = 2;
  bool has_stoptsms() const;
  void clear_stoptsms();
  static const int kStopTsMsFieldNumber = 2;
  ::google::protobuf::uint64 stoptsms() const;
  void set_stoptsms(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.TimeInterval)
 private:
  void set_has_starttsms();
  void clear_has_starttsms();
  void set_has_stoptsms();
  void clear_has_stoptsms();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 starttsms_;
  ::google::protobuf::uint64 stoptsms_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PostSiteSources : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.PostSiteSources) */ {
 public:
  PostSiteSources();
  virtual ~PostSiteSources();

  PostSiteSources(const PostSiteSources& from);

  inline PostSiteSources& operator=(const PostSiteSources& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PostSiteSources(PostSiteSources&& from) noexcept
    : PostSiteSources() {
    *this = ::std::move(from);
  }

  inline PostSiteSources& operator=(PostSiteSources&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PostSiteSources& default_instance();

  static inline const PostSiteSources* internal_default_instance() {
    return reinterpret_cast<const PostSiteSources*>(
               &_PostSiteSources_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(PostSiteSources* other);
  friend void swap(PostSiteSources& a, PostSiteSources& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PostSiteSources* New() const PROTOBUF_FINAL { return New(NULL); }

  PostSiteSources* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PostSiteSources& from);
  void MergeFrom(const PostSiteSources& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PostSiteSources* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 3;
  int sourceid_size() const;
  void clear_sourceid();
  static const int kSourceIdFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::SiliconSourceId& sourceid(int index) const;
  ::ru::mail::go::webbase::blobs::SiliconSourceId* mutable_sourceid(int index);
  ::ru::mail::go::webbase::blobs::SiliconSourceId* add_sourceid();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconSourceId >*
      mutable_sourceid();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconSourceId >&
      sourceid() const;

  // required string postUrl = 1;
  bool has_posturl() const;
  void clear_posturl();
  static const int kPostUrlFieldNumber = 1;
  const ::std::string& posturl() const;
  void set_posturl(const ::std::string& value);
  #if LANG_CXX11
  void set_posturl(::std::string&& value);
  #endif
  void set_posturl(const char* value);
  void set_posturl(const char* value, size_t size);
  ::std::string* mutable_posturl();
  ::std::string* release_posturl();
  void set_allocated_posturl(::std::string* posturl);

  // required int64 siteId = 2;
  bool has_siteid() const;
  void clear_siteid();
  static const int kSiteIdFieldNumber = 2;
  ::google::protobuf::int64 siteid() const;
  void set_siteid(::google::protobuf::int64 value);

  // optional int64 firstMeetSec = 4;
  bool has_firstmeetsec() const;
  void clear_firstmeetsec();
  static const int kFirstMeetSecFieldNumber = 4;
  ::google::protobuf::int64 firstmeetsec() const;
  void set_firstmeetsec(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.PostSiteSources)
 private:
  void set_has_posturl();
  void clear_has_posturl();
  void set_has_siteid();
  void clear_has_siteid();
  void set_has_firstmeetsec();
  void clear_has_firstmeetsec();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconSourceId > sourceid_;
  ::google::protobuf::internal::ArenaStringPtr posturl_;
  ::google::protobuf::int64 siteid_;
  ::google::protobuf::int64 firstmeetsec_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MarkerDigest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.MarkerDigest) */ {
 public:
  MarkerDigest();
  virtual ~MarkerDigest();

  MarkerDigest(const MarkerDigest& from);

  inline MarkerDigest& operator=(const MarkerDigest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarkerDigest(MarkerDigest&& from) noexcept
    : MarkerDigest() {
    *this = ::std::move(from);
  }

  inline MarkerDigest& operator=(MarkerDigest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarkerDigest& default_instance();

  static inline const MarkerDigest* internal_default_instance() {
    return reinterpret_cast<const MarkerDigest*>(
               &_MarkerDigest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(MarkerDigest* other);
  friend void swap(MarkerDigest& a, MarkerDigest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarkerDigest* New() const PROTOBUF_FINAL { return New(NULL); }

  MarkerDigest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MarkerDigest& from);
  void MergeFrom(const MarkerDigest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MarkerDigest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes valueHash = 2;
  bool has_valuehash() const;
  void clear_valuehash();
  static const int kValueHashFieldNumber = 2;
  const ::std::string& valuehash() const;
  void set_valuehash(const ::std::string& value);
  #if LANG_CXX11
  void set_valuehash(::std::string&& value);
  #endif
  void set_valuehash(const char* value);
  void set_valuehash(const void* value, size_t size);
  ::std::string* mutable_valuehash();
  ::std::string* release_valuehash();
  void set_allocated_valuehash(::std::string* valuehash);

  // required int32 markerId = 1;
  bool has_markerid() const;
  void clear_markerid();
  static const int kMarkerIdFieldNumber = 1;
  ::google::protobuf::int32 markerid() const;
  void set_markerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.MarkerDigest)
 private:
  void set_has_markerid();
  void clear_has_markerid();
  void set_has_valuehash();
  void clear_has_valuehash();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr valuehash_;
  ::google::protobuf::int32 markerid_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MarkerMultiDigest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.MarkerMultiDigest) */ {
 public:
  MarkerMultiDigest();
  virtual ~MarkerMultiDigest();

  MarkerMultiDigest(const MarkerMultiDigest& from);

  inline MarkerMultiDigest& operator=(const MarkerMultiDigest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarkerMultiDigest(MarkerMultiDigest&& from) noexcept
    : MarkerMultiDigest() {
    *this = ::std::move(from);
  }

  inline MarkerMultiDigest& operator=(MarkerMultiDigest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarkerMultiDigest& default_instance();

  static inline const MarkerMultiDigest* internal_default_instance() {
    return reinterpret_cast<const MarkerMultiDigest*>(
               &_MarkerMultiDigest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(MarkerMultiDigest* other);
  friend void swap(MarkerMultiDigest& a, MarkerMultiDigest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarkerMultiDigest* New() const PROTOBUF_FINAL { return New(NULL); }

  MarkerMultiDigest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MarkerMultiDigest& from);
  void MergeFrom(const MarkerMultiDigest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MarkerMultiDigest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes valueHashes = 2;
  int valuehashes_size() const;
  void clear_valuehashes();
  static const int kValueHashesFieldNumber = 2;
  const ::std::string& valuehashes(int index) const;
  ::std::string* mutable_valuehashes(int index);
  void set_valuehashes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_valuehashes(int index, ::std::string&& value);
  #endif
  void set_valuehashes(int index, const char* value);
  void set_valuehashes(int index, const void* value, size_t size);
  ::std::string* add_valuehashes();
  void add_valuehashes(const ::std::string& value);
  #if LANG_CXX11
  void add_valuehashes(::std::string&& value);
  #endif
  void add_valuehashes(const char* value);
  void add_valuehashes(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& valuehashes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_valuehashes();

  // required int32 markerId = 1;
  bool has_markerid() const;
  void clear_markerid();
  static const int kMarkerIdFieldNumber = 1;
  ::google::protobuf::int32 markerid() const;
  void set_markerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.MarkerMultiDigest)
 private:
  void set_has_markerid();
  void clear_has_markerid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> valuehashes_;
  ::google::protobuf::int32 markerid_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CustomFieldMarkerDigest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest) */ {
 public:
  CustomFieldMarkerDigest();
  virtual ~CustomFieldMarkerDigest();

  CustomFieldMarkerDigest(const CustomFieldMarkerDigest& from);

  inline CustomFieldMarkerDigest& operator=(const CustomFieldMarkerDigest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomFieldMarkerDigest(CustomFieldMarkerDigest&& from) noexcept
    : CustomFieldMarkerDigest() {
    *this = ::std::move(from);
  }

  inline CustomFieldMarkerDigest& operator=(CustomFieldMarkerDigest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomFieldMarkerDigest& default_instance();

  static inline const CustomFieldMarkerDigest* internal_default_instance() {
    return reinterpret_cast<const CustomFieldMarkerDigest*>(
               &_CustomFieldMarkerDigest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(CustomFieldMarkerDigest* other);
  friend void swap(CustomFieldMarkerDigest& a, CustomFieldMarkerDigest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomFieldMarkerDigest* New() const PROTOBUF_FINAL { return New(NULL); }

  CustomFieldMarkerDigest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CustomFieldMarkerDigest& from);
  void MergeFrom(const CustomFieldMarkerDigest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CustomFieldMarkerDigest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fieldName = 1;
  bool has_fieldname() const;
  void clear_fieldname();
  static const int kFieldNameFieldNumber = 1;
  const ::std::string& fieldname() const;
  void set_fieldname(const ::std::string& value);
  #if LANG_CXX11
  void set_fieldname(::std::string&& value);
  #endif
  void set_fieldname(const char* value);
  void set_fieldname(const char* value, size_t size);
  ::std::string* mutable_fieldname();
  ::std::string* release_fieldname();
  void set_allocated_fieldname(::std::string* fieldname);

  // optional .ru.mail.go.webbase.blobs.MarkerDigest fieldValue = 2;
  bool has_fieldvalue() const;
  void clear_fieldvalue();
  static const int kFieldValueFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::MarkerDigest& fieldvalue() const;
  ::ru::mail::go::webbase::blobs::MarkerDigest* mutable_fieldvalue();
  ::ru::mail::go::webbase::blobs::MarkerDigest* release_fieldvalue();
  void set_allocated_fieldvalue(::ru::mail::go::webbase::blobs::MarkerDigest* fieldvalue);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest)
 private:
  void set_has_fieldname();
  void clear_has_fieldname();
  void set_has_fieldvalue();
  void clear_has_fieldvalue();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fieldname_;
  ::ru::mail::go::webbase::blobs::MarkerDigest* fieldvalue_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CustomFieldMarkerDigests : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests) */ {
 public:
  CustomFieldMarkerDigests();
  virtual ~CustomFieldMarkerDigests();

  CustomFieldMarkerDigests(const CustomFieldMarkerDigests& from);

  inline CustomFieldMarkerDigests& operator=(const CustomFieldMarkerDigests& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomFieldMarkerDigests(CustomFieldMarkerDigests&& from) noexcept
    : CustomFieldMarkerDigests() {
    *this = ::std::move(from);
  }

  inline CustomFieldMarkerDigests& operator=(CustomFieldMarkerDigests&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomFieldMarkerDigests& default_instance();

  static inline const CustomFieldMarkerDigests* internal_default_instance() {
    return reinterpret_cast<const CustomFieldMarkerDigests*>(
               &_CustomFieldMarkerDigests_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(CustomFieldMarkerDigests* other);
  friend void swap(CustomFieldMarkerDigests& a, CustomFieldMarkerDigests& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomFieldMarkerDigests* New() const PROTOBUF_FINAL { return New(NULL); }

  CustomFieldMarkerDigests* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CustomFieldMarkerDigests& from);
  void MergeFrom(const CustomFieldMarkerDigests& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CustomFieldMarkerDigests* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.CustomFieldMarkerDigest items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigest& items(int index) const;
  ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigest* mutable_items(int index);
  ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigest* add_items();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigest >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigest >&
      items() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigest > items_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LayerMarkerDigest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.LayerMarkerDigest) */ {
 public:
  LayerMarkerDigest();
  virtual ~LayerMarkerDigest();

  LayerMarkerDigest(const LayerMarkerDigest& from);

  inline LayerMarkerDigest& operator=(const LayerMarkerDigest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LayerMarkerDigest(LayerMarkerDigest&& from) noexcept
    : LayerMarkerDigest() {
    *this = ::std::move(from);
  }

  inline LayerMarkerDigest& operator=(LayerMarkerDigest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerMarkerDigest& default_instance();

  static inline const LayerMarkerDigest* internal_default_instance() {
    return reinterpret_cast<const LayerMarkerDigest*>(
               &_LayerMarkerDigest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(LayerMarkerDigest* other);
  friend void swap(LayerMarkerDigest& a, LayerMarkerDigest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LayerMarkerDigest* New() const PROTOBUF_FINAL { return New(NULL); }

  LayerMarkerDigest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LayerMarkerDigest& from);
  void MergeFrom(const LayerMarkerDigest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LayerMarkerDigest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 valueHashes = 2;
  int valuehashes_size() const;
  void clear_valuehashes();
  static const int kValueHashesFieldNumber = 2;
  ::google::protobuf::int32 valuehashes(int index) const;
  void set_valuehashes(int index, ::google::protobuf::int32 value);
  void add_valuehashes(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      valuehashes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_valuehashes();

  // required int32 markerId = 1;
  bool has_markerid() const;
  void clear_markerid();
  static const int kMarkerIdFieldNumber = 1;
  ::google::protobuf::int32 markerid() const;
  void set_markerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.LayerMarkerDigest)
 private:
  void set_has_markerid();
  void clear_has_markerid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > valuehashes_;
  ::google::protobuf::int32 markerid_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconDocParserInfoDigest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest) */ {
 public:
  SiliconDocParserInfoDigest();
  virtual ~SiliconDocParserInfoDigest();

  SiliconDocParserInfoDigest(const SiliconDocParserInfoDigest& from);

  inline SiliconDocParserInfoDigest& operator=(const SiliconDocParserInfoDigest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconDocParserInfoDigest(SiliconDocParserInfoDigest&& from) noexcept
    : SiliconDocParserInfoDigest() {
    *this = ::std::move(from);
  }

  inline SiliconDocParserInfoDigest& operator=(SiliconDocParserInfoDigest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconDocParserInfoDigest& default_instance();

  static inline const SiliconDocParserInfoDigest* internal_default_instance() {
    return reinterpret_cast<const SiliconDocParserInfoDigest*>(
               &_SiliconDocParserInfoDigest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(SiliconDocParserInfoDigest* other);
  friend void swap(SiliconDocParserInfoDigest& a, SiliconDocParserInfoDigest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconDocParserInfoDigest* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconDocParserInfoDigest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconDocParserInfoDigest& from);
  void MergeFrom(const SiliconDocParserInfoDigest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconDocParserInfoDigest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.MarkerDigest title = 1;
  int title_size() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::MarkerDigest& title(int index) const;
  ::ru::mail::go::webbase::blobs::MarkerDigest* mutable_title(int index);
  ::ru::mail::go::webbase::blobs::MarkerDigest* add_title();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >*
      mutable_title();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >&
      title() const;

  // repeated .ru.mail.go.webbase.blobs.MarkerDigest description = 2;
  int description_size() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::MarkerDigest& description(int index) const;
  ::ru::mail::go::webbase::blobs::MarkerDigest* mutable_description(int index);
  ::ru::mail::go::webbase::blobs::MarkerDigest* add_description();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >*
      mutable_description();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >&
      description() const;

  // repeated .ru.mail.go.webbase.blobs.MarkerDigest body = 3;
  int body_size() const;
  void clear_body();
  static const int kBodyFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::MarkerDigest& body(int index) const;
  ::ru::mail::go::webbase::blobs::MarkerDigest* mutable_body(int index);
  ::ru::mail::go::webbase::blobs::MarkerDigest* add_body();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >*
      mutable_body();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >&
      body() const;

  // repeated .ru.mail.go.webbase.blobs.MarkerDigest mainImageUrl = 4;
  int mainimageurl_size() const;
  void clear_mainimageurl();
  static const int kMainImageUrlFieldNumber = 4;
  const ::ru::mail::go::webbase::blobs::MarkerDigest& mainimageurl(int index) const;
  ::ru::mail::go::webbase::blobs::MarkerDigest* mutable_mainimageurl(int index);
  ::ru::mail::go::webbase::blobs::MarkerDigest* add_mainimageurl();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >*
      mutable_mainimageurl();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >&
      mainimageurl() const;

  // repeated .ru.mail.go.webbase.blobs.MarkerMultiDigest imageGalleryUrls = 5;
  int imagegalleryurls_size() const;
  void clear_imagegalleryurls();
  static const int kImageGalleryUrlsFieldNumber = 5;
  const ::ru::mail::go::webbase::blobs::MarkerMultiDigest& imagegalleryurls(int index) const;
  ::ru::mail::go::webbase::blobs::MarkerMultiDigest* mutable_imagegalleryurls(int index);
  ::ru::mail::go::webbase::blobs::MarkerMultiDigest* add_imagegalleryurls();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerMultiDigest >*
      mutable_imagegalleryurls();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerMultiDigest >&
      imagegalleryurls() const;

  // repeated .ru.mail.go.webbase.blobs.MarkerMultiDigest videoUrls = 6;
  int videourls_size() const;
  void clear_videourls();
  static const int kVideoUrlsFieldNumber = 6;
  const ::ru::mail::go::webbase::blobs::MarkerMultiDigest& videourls(int index) const;
  ::ru::mail::go::webbase::blobs::MarkerMultiDigest* mutable_videourls(int index);
  ::ru::mail::go::webbase::blobs::MarkerMultiDigest* add_videourls();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerMultiDigest >*
      mutable_videourls();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerMultiDigest >&
      videourls() const;

  // repeated .ru.mail.go.webbase.blobs.LayerMarkerDigest layer = 8;
  int layer_size() const;
  void clear_layer();
  static const int kLayerFieldNumber = 8;
  const ::ru::mail::go::webbase::blobs::LayerMarkerDigest& layer(int index) const;
  ::ru::mail::go::webbase::blobs::LayerMarkerDigest* mutable_layer(int index);
  ::ru::mail::go::webbase::blobs::LayerMarkerDigest* add_layer();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::LayerMarkerDigest >*
      mutable_layer();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::LayerMarkerDigest >&
      layer() const;

  // optional .ru.mail.go.webbase.blobs.CustomFieldMarkerDigests customFields = 7;
  bool has_customfields() const;
  void clear_customfields();
  static const int kCustomFieldsFieldNumber = 7;
  const ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests& customfields() const;
  ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests* mutable_customfields();
  ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests* release_customfields();
  void set_allocated_customfields(::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests* customfields);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest)
 private:
  void set_has_customfields();
  void clear_has_customfields();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest > title_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest > description_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest > body_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest > mainimageurl_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerMultiDigest > imagegalleryurls_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerMultiDigest > videourls_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::LayerMarkerDigest > layer_;
  ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests* customfields_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeyValuePair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.KeyValuePair) */ {
 public:
  KeyValuePair();
  virtual ~KeyValuePair();

  KeyValuePair(const KeyValuePair& from);

  inline KeyValuePair& operator=(const KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyValuePair(KeyValuePair&& from) noexcept
    : KeyValuePair() {
    *this = ::std::move(from);
  }

  inline KeyValuePair& operator=(KeyValuePair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValuePair& default_instance();

  static inline const KeyValuePair* internal_default_instance() {
    return reinterpret_cast<const KeyValuePair*>(
               &_KeyValuePair_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(KeyValuePair* other);
  friend void swap(KeyValuePair& a, KeyValuePair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyValuePair* New() const PROTOBUF_FINAL { return New(NULL); }

  KeyValuePair* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KeyValuePair& from);
  void MergeFrom(const KeyValuePair& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KeyValuePair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string Value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.KeyValuePair)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProvidersParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.ProvidersParams) */ {
 public:
  ProvidersParams();
  virtual ~ProvidersParams();

  ProvidersParams(const ProvidersParams& from);

  inline ProvidersParams& operator=(const ProvidersParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProvidersParams(ProvidersParams&& from) noexcept
    : ProvidersParams() {
    *this = ::std::move(from);
  }

  inline ProvidersParams& operator=(ProvidersParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProvidersParams& default_instance();

  static inline const ProvidersParams* internal_default_instance() {
    return reinterpret_cast<const ProvidersParams*>(
               &_ProvidersParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(ProvidersParams* other);
  friend void swap(ProvidersParams& a, ProvidersParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProvidersParams* New() const PROTOBUF_FINAL { return New(NULL); }

  ProvidersParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProvidersParams& from);
  void MergeFrom(const ProvidersParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProvidersParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.KeyValuePair keyValuePairs = 1;
  int keyvaluepairs_size() const;
  void clear_keyvaluepairs();
  static const int kKeyValuePairsFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::KeyValuePair& keyvaluepairs(int index) const;
  ::ru::mail::go::webbase::blobs::KeyValuePair* mutable_keyvaluepairs(int index);
  ::ru::mail::go::webbase::blobs::KeyValuePair* add_keyvaluepairs();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::KeyValuePair >*
      mutable_keyvaluepairs();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::KeyValuePair >&
      keyvaluepairs() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.ProvidersParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::KeyValuePair > keyvaluepairs_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CustomField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.CustomField) */ {
 public:
  CustomField();
  virtual ~CustomField();

  CustomField(const CustomField& from);

  inline CustomField& operator=(const CustomField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomField(CustomField&& from) noexcept
    : CustomField() {
    *this = ::std::move(from);
  }

  inline CustomField& operator=(CustomField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomField& default_instance();

  static inline const CustomField* internal_default_instance() {
    return reinterpret_cast<const CustomField*>(
               &_CustomField_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(CustomField* other);
  friend void swap(CustomField& a, CustomField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomField* New() const PROTOBUF_FINAL { return New(NULL); }

  CustomField* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CustomField& from);
  void MergeFrom(const CustomField& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CustomField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string Value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.CustomField)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CustomFields : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.CustomFields) */ {
 public:
  CustomFields();
  virtual ~CustomFields();

  CustomFields(const CustomFields& from);

  inline CustomFields& operator=(const CustomFields& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomFields(CustomFields&& from) noexcept
    : CustomFields() {
    *this = ::std::move(from);
  }

  inline CustomFields& operator=(CustomFields&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomFields& default_instance();

  static inline const CustomFields* internal_default_instance() {
    return reinterpret_cast<const CustomFields*>(
               &_CustomFields_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(CustomFields* other);
  friend void swap(CustomFields& a, CustomFields& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomFields* New() const PROTOBUF_FINAL { return New(NULL); }

  CustomFields* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CustomFields& from);
  void MergeFrom(const CustomFields& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CustomFields* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.CustomField items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::CustomField& items(int index) const;
  ::ru::mail::go::webbase::blobs::CustomField* mutable_items(int index);
  ::ru::mail::go::webbase::blobs::CustomField* add_items();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CustomField >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CustomField >&
      items() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.CustomFields)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CustomField > items_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconeNewsTagsData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconeNewsTagsData) */ {
 public:
  SiliconeNewsTagsData();
  virtual ~SiliconeNewsTagsData();

  SiliconeNewsTagsData(const SiliconeNewsTagsData& from);

  inline SiliconeNewsTagsData& operator=(const SiliconeNewsTagsData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconeNewsTagsData(SiliconeNewsTagsData&& from) noexcept
    : SiliconeNewsTagsData() {
    *this = ::std::move(from);
  }

  inline SiliconeNewsTagsData& operator=(SiliconeNewsTagsData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconeNewsTagsData& default_instance();

  static inline const SiliconeNewsTagsData* internal_default_instance() {
    return reinterpret_cast<const SiliconeNewsTagsData*>(
               &_SiliconeNewsTagsData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(SiliconeNewsTagsData* other);
  friend void swap(SiliconeNewsTagsData& a, SiliconeNewsTagsData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconeNewsTagsData* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconeNewsTagsData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconeNewsTagsData& from);
  void MergeFrom(const SiliconeNewsTagsData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconeNewsTagsData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.SiliconeNewsTagData tags = 1;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::SiliconeNewsTagData& tags(int index) const;
  ::ru::mail::go::webbase::blobs::SiliconeNewsTagData* mutable_tags(int index);
  ::ru::mail::go::webbase::blobs::SiliconeNewsTagData* add_tags();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeNewsTagData >*
      mutable_tags();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeNewsTagData >&
      tags() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconeNewsTagsData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeNewsTagData > tags_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconeNewsTagData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconeNewsTagData) */ {
 public:
  SiliconeNewsTagData();
  virtual ~SiliconeNewsTagData();

  SiliconeNewsTagData(const SiliconeNewsTagData& from);

  inline SiliconeNewsTagData& operator=(const SiliconeNewsTagData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconeNewsTagData(SiliconeNewsTagData&& from) noexcept
    : SiliconeNewsTagData() {
    *this = ::std::move(from);
  }

  inline SiliconeNewsTagData& operator=(SiliconeNewsTagData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconeNewsTagData& default_instance();

  static inline const SiliconeNewsTagData* internal_default_instance() {
    return reinterpret_cast<const SiliconeNewsTagData*>(
               &_SiliconeNewsTagData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(SiliconeNewsTagData* other);
  friend void swap(SiliconeNewsTagData& a, SiliconeNewsTagData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconeNewsTagData* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconeNewsTagData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconeNewsTagData& from);
  void MergeFrom(const SiliconeNewsTagData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconeNewsTagData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconeNewsTagData)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconeNewsStoriesData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData) */ {
 public:
  SiliconeNewsStoriesData();
  virtual ~SiliconeNewsStoriesData();

  SiliconeNewsStoriesData(const SiliconeNewsStoriesData& from);

  inline SiliconeNewsStoriesData& operator=(const SiliconeNewsStoriesData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconeNewsStoriesData(SiliconeNewsStoriesData&& from) noexcept
    : SiliconeNewsStoriesData() {
    *this = ::std::move(from);
  }

  inline SiliconeNewsStoriesData& operator=(SiliconeNewsStoriesData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconeNewsStoriesData& default_instance();

  static inline const SiliconeNewsStoriesData* internal_default_instance() {
    return reinterpret_cast<const SiliconeNewsStoriesData*>(
               &_SiliconeNewsStoriesData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(SiliconeNewsStoriesData* other);
  friend void swap(SiliconeNewsStoriesData& a, SiliconeNewsStoriesData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconeNewsStoriesData* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconeNewsStoriesData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconeNewsStoriesData& from);
  void MergeFrom(const SiliconeNewsStoriesData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconeNewsStoriesData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.SiliconeNewsStoryData stories = 1;
  int stories_size() const;
  void clear_stories();
  static const int kStoriesFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::SiliconeNewsStoryData& stories(int index) const;
  ::ru::mail::go::webbase::blobs::SiliconeNewsStoryData* mutable_stories(int index);
  ::ru::mail::go::webbase::blobs::SiliconeNewsStoryData* add_stories();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeNewsStoryData >*
      mutable_stories();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeNewsStoryData >&
      stories() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeNewsStoryData > stories_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiliconeNewsStoryData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiliconeNewsStoryData) */ {
 public:
  SiliconeNewsStoryData();
  virtual ~SiliconeNewsStoryData();

  SiliconeNewsStoryData(const SiliconeNewsStoryData& from);

  inline SiliconeNewsStoryData& operator=(const SiliconeNewsStoryData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiliconeNewsStoryData(SiliconeNewsStoryData&& from) noexcept
    : SiliconeNewsStoryData() {
    *this = ::std::move(from);
  }

  inline SiliconeNewsStoryData& operator=(SiliconeNewsStoryData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiliconeNewsStoryData& default_instance();

  static inline const SiliconeNewsStoryData* internal_default_instance() {
    return reinterpret_cast<const SiliconeNewsStoryData*>(
               &_SiliconeNewsStoryData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(SiliconeNewsStoryData* other);
  friend void swap(SiliconeNewsStoryData& a, SiliconeNewsStoryData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiliconeNewsStoryData* New() const PROTOBUF_FINAL { return New(NULL); }

  SiliconeNewsStoryData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiliconeNewsStoryData& from);
  void MergeFrom(const SiliconeNewsStoryData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiliconeNewsStoryData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiliconeNewsStoryData)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RisksFields : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.RisksFields) */ {
 public:
  RisksFields();
  virtual ~RisksFields();

  RisksFields(const RisksFields& from);

  inline RisksFields& operator=(const RisksFields& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RisksFields(RisksFields&& from) noexcept
    : RisksFields() {
    *this = ::std::move(from);
  }

  inline RisksFields& operator=(RisksFields&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RisksFields& default_instance();

  static inline const RisksFields* internal_default_instance() {
    return reinterpret_cast<const RisksFields*>(
               &_RisksFields_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(RisksFields* other);
  friend void swap(RisksFields& a, RisksFields& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RisksFields* New() const PROTOBUF_FINAL { return New(NULL); }

  RisksFields* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RisksFields& from);
  void MergeFrom(const RisksFields& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RisksFields* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float eroScore = 1;
  bool has_eroscore() const;
  void clear_eroscore();
  static const int kEroScoreFieldNumber = 1;
  float eroscore() const;
  void set_eroscore(float value);

  // optional float pornoScore = 2;
  bool has_pornoscore() const;
  void clear_pornoscore();
  static const int kPornoScoreFieldNumber = 2;
  float pornoscore() const;
  void set_pornoscore(float value);

  // optional float safeContent = 3;
  bool has_safecontent() const;
  void clear_safecontent();
  static const int kSafeContentFieldNumber = 3;
  float safecontent() const;
  void set_safecontent(float value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.RisksFields)
 private:
  void set_has_eroscore();
  void clear_has_eroscore();
  void set_has_pornoscore();
  void clear_has_pornoscore();
  void set_has_safecontent();
  void clear_has_safecontent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float eroscore_;
  float pornoscore_;
  float safecontent_;
  friend struct protobuf_silicon_5fdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SiliconSourceId

// required .ru.mail.go.webbase.blobs.SiliconSourceProvider provider = 1;
inline bool SiliconSourceId::has_provider() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiliconSourceId::set_has_provider() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiliconSourceId::clear_has_provider() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiliconSourceId::clear_provider() {
  provider_ = 0;
  clear_has_provider();
}
inline ::ru::mail::go::webbase::blobs::SiliconSourceProvider SiliconSourceId::provider() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconSourceId.provider)
  return static_cast< ::ru::mail::go::webbase::blobs::SiliconSourceProvider >(provider_);
}
inline void SiliconSourceId::set_provider(::ru::mail::go::webbase::blobs::SiliconSourceProvider value) {
  assert(::ru::mail::go::webbase::blobs::SiliconSourceProvider_IsValid(value));
  set_has_provider();
  provider_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconSourceId.provider)
}

// required string id = 2;
inline bool SiliconSourceId::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconSourceId::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconSourceId::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconSourceId::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& SiliconSourceId::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconSourceId.id)
  return id_.GetNoArena();
}
inline void SiliconSourceId::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconSourceId.id)
}
#if LANG_CXX11
inline void SiliconSourceId::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconSourceId.id)
}
#endif
inline void SiliconSourceId::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconSourceId.id)
}
inline void SiliconSourceId::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconSourceId.id)
}
inline ::std::string* SiliconSourceId::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconSourceId.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconSourceId::release_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconSourceId.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconSourceId::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconSourceId.id)
}

// -------------------------------------------------------------------

// SiliconFetchUrl

// required .ru.mail.go.webbase.blobs.SiliconFetchUrl.Type type = 1;
inline bool SiliconFetchUrl::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SiliconFetchUrl::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SiliconFetchUrl::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SiliconFetchUrl::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::webbase::blobs::SiliconFetchUrl_Type SiliconFetchUrl::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.type)
  return static_cast< ::ru::mail::go::webbase::blobs::SiliconFetchUrl_Type >(type_);
}
inline void SiliconFetchUrl::set_type(::ru::mail::go::webbase::blobs::SiliconFetchUrl_Type value) {
  assert(::ru::mail::go::webbase::blobs::SiliconFetchUrl_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.type)
}

// required .ru.mail.go.webbase.blobs.SiliconFetchUrl.SourceType sourceType = 2;
inline bool SiliconFetchUrl::has_sourcetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SiliconFetchUrl::set_has_sourcetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SiliconFetchUrl::clear_has_sourcetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SiliconFetchUrl::clear_sourcetype() {
  sourcetype_ = 0;
  clear_has_sourcetype();
}
inline ::ru::mail::go::webbase::blobs::SiliconFetchUrl_SourceType SiliconFetchUrl::sourcetype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceType)
  return static_cast< ::ru::mail::go::webbase::blobs::SiliconFetchUrl_SourceType >(sourcetype_);
}
inline void SiliconFetchUrl::set_sourcetype(::ru::mail::go::webbase::blobs::SiliconFetchUrl_SourceType value) {
  assert(::ru::mail::go::webbase::blobs::SiliconFetchUrl_SourceType_IsValid(value));
  set_has_sourcetype();
  sourcetype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceType)
}

// required .ru.mail.go.webbase.blobs.SiliconSourceMode mode = 3;
inline bool SiliconFetchUrl::has_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SiliconFetchUrl::set_has_mode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SiliconFetchUrl::clear_has_mode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SiliconFetchUrl::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::ru::mail::go::webbase::blobs::SiliconSourceMode SiliconFetchUrl::mode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.mode)
  return static_cast< ::ru::mail::go::webbase::blobs::SiliconSourceMode >(mode_);
}
inline void SiliconFetchUrl::set_mode(::ru::mail::go::webbase::blobs::SiliconSourceMode value) {
  assert(::ru::mail::go::webbase::blobs::SiliconSourceMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.mode)
}

// repeated string postsWithImage = 4;
inline int SiliconFetchUrl::postswithimage_size() const {
  return postswithimage_.size();
}
inline void SiliconFetchUrl::clear_postswithimage() {
  postswithimage_.Clear();
}
inline const ::std::string& SiliconFetchUrl::postswithimage(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
  return postswithimage_.Get(index);
}
inline ::std::string* SiliconFetchUrl::mutable_postswithimage(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
  return postswithimage_.Mutable(index);
}
inline void SiliconFetchUrl::set_postswithimage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
  postswithimage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SiliconFetchUrl::set_postswithimage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
  postswithimage_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SiliconFetchUrl::set_postswithimage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  postswithimage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
}
inline void SiliconFetchUrl::set_postswithimage(int index, const char* value, size_t size) {
  postswithimage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
}
inline ::std::string* SiliconFetchUrl::add_postswithimage() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
  return postswithimage_.Add();
}
inline void SiliconFetchUrl::add_postswithimage(const ::std::string& value) {
  postswithimage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
}
#if LANG_CXX11
inline void SiliconFetchUrl::add_postswithimage(::std::string&& value) {
  postswithimage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
}
#endif
inline void SiliconFetchUrl::add_postswithimage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  postswithimage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
}
inline void SiliconFetchUrl::add_postswithimage(const char* value, size_t size) {
  postswithimage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SiliconFetchUrl::postswithimage() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
  return postswithimage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SiliconFetchUrl::mutable_postswithimage() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconFetchUrl.postsWithImage)
  return &postswithimage_;
}

// required .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 5;
inline bool SiliconFetchUrl::has_sourceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiliconFetchUrl::set_has_sourceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiliconFetchUrl::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiliconFetchUrl::clear_sourceid() {
  if (sourceid_ != NULL) sourceid_->::ru::mail::go::webbase::blobs::SiliconSourceId::Clear();
  clear_has_sourceid();
}
inline const ::ru::mail::go::webbase::blobs::SiliconSourceId& SiliconFetchUrl::sourceid() const {
  const ::ru::mail::go::webbase::blobs::SiliconSourceId* p = sourceid_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceId)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconSourceId*>(
      &::ru::mail::go::webbase::blobs::_SiliconSourceId_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconSourceId* SiliconFetchUrl::mutable_sourceid() {
  set_has_sourceid();
  if (sourceid_ == NULL) {
    sourceid_ = new ::ru::mail::go::webbase::blobs::SiliconSourceId;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceId)
  return sourceid_;
}
inline ::ru::mail::go::webbase::blobs::SiliconSourceId* SiliconFetchUrl::release_sourceid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceId)
  clear_has_sourceid();
  ::ru::mail::go::webbase::blobs::SiliconSourceId* temp = sourceid_;
  sourceid_ = NULL;
  return temp;
}
inline void SiliconFetchUrl::set_allocated_sourceid(::ru::mail::go::webbase::blobs::SiliconSourceId* sourceid) {
  delete sourceid_;
  sourceid_ = sourceid;
  if (sourceid) {
    set_has_sourceid();
  } else {
    clear_has_sourceid();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceId)
}

// optional string publicUrl = 6;
inline bool SiliconFetchUrl::has_publicurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconFetchUrl::set_has_publicurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconFetchUrl::clear_has_publicurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconFetchUrl::clear_publicurl() {
  publicurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publicurl();
}
inline const ::std::string& SiliconFetchUrl::publicurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl)
  return publicurl_.GetNoArena();
}
inline void SiliconFetchUrl::set_publicurl(const ::std::string& value) {
  set_has_publicurl();
  publicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl)
}
#if LANG_CXX11
inline void SiliconFetchUrl::set_publicurl(::std::string&& value) {
  set_has_publicurl();
  publicurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl)
}
#endif
inline void SiliconFetchUrl::set_publicurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_publicurl();
  publicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl)
}
inline void SiliconFetchUrl::set_publicurl(const char* value, size_t size) {
  set_has_publicurl();
  publicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl)
}
inline ::std::string* SiliconFetchUrl::mutable_publicurl() {
  set_has_publicurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl)
  return publicurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconFetchUrl::release_publicurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl)
  clear_has_publicurl();
  return publicurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconFetchUrl::set_allocated_publicurl(::std::string* publicurl) {
  if (publicurl != NULL) {
    set_has_publicurl();
  } else {
    clear_has_publicurl();
  }
  publicurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publicurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchUrl.publicUrl)
}

// optional .ru.mail.go.webbase.blobs.SiliconDocTaggerInfo taggerInfo = 7;
inline bool SiliconFetchUrl::has_taggerinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SiliconFetchUrl::set_has_taggerinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SiliconFetchUrl::clear_has_taggerinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SiliconFetchUrl::clear_taggerinfo() {
  if (taggerinfo_ != NULL) taggerinfo_->::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo::Clear();
  clear_has_taggerinfo();
}
inline const ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo& SiliconFetchUrl::taggerinfo() const {
  const ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* p = taggerinfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.taggerInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo*>(
      &::ru::mail::go::webbase::blobs::_SiliconDocTaggerInfo_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* SiliconFetchUrl::mutable_taggerinfo() {
  set_has_taggerinfo();
  if (taggerinfo_ == NULL) {
    taggerinfo_ = new ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchUrl.taggerInfo)
  return taggerinfo_;
}
inline ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* SiliconFetchUrl::release_taggerinfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchUrl.taggerInfo)
  clear_has_taggerinfo();
  ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* temp = taggerinfo_;
  taggerinfo_ = NULL;
  return temp;
}
inline void SiliconFetchUrl::set_allocated_taggerinfo(::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* taggerinfo) {
  delete taggerinfo_;
  taggerinfo_ = taggerinfo;
  if (taggerinfo) {
    set_has_taggerinfo();
  } else {
    clear_has_taggerinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchUrl.taggerInfo)
}

// repeated string sourceNames = 8;
inline int SiliconFetchUrl::sourcenames_size() const {
  return sourcenames_.size();
}
inline void SiliconFetchUrl::clear_sourcenames() {
  sourcenames_.Clear();
}
inline const ::std::string& SiliconFetchUrl::sourcenames(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
  return sourcenames_.Get(index);
}
inline ::std::string* SiliconFetchUrl::mutable_sourcenames(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
  return sourcenames_.Mutable(index);
}
inline void SiliconFetchUrl::set_sourcenames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
  sourcenames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SiliconFetchUrl::set_sourcenames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
  sourcenames_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SiliconFetchUrl::set_sourcenames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sourcenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
}
inline void SiliconFetchUrl::set_sourcenames(int index, const char* value, size_t size) {
  sourcenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
}
inline ::std::string* SiliconFetchUrl::add_sourcenames() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
  return sourcenames_.Add();
}
inline void SiliconFetchUrl::add_sourcenames(const ::std::string& value) {
  sourcenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
}
#if LANG_CXX11
inline void SiliconFetchUrl::add_sourcenames(::std::string&& value) {
  sourcenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
}
#endif
inline void SiliconFetchUrl::add_sourcenames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sourcenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
}
inline void SiliconFetchUrl::add_sourcenames(const char* value, size_t size) {
  sourcenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SiliconFetchUrl::sourcenames() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
  return sourcenames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SiliconFetchUrl::mutable_sourcenames() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconFetchUrl.sourceNames)
  return &sourcenames_;
}

// optional int64 siteId = 9;
inline bool SiliconFetchUrl::has_siteid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SiliconFetchUrl::set_has_siteid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SiliconFetchUrl::clear_has_siteid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SiliconFetchUrl::clear_siteid() {
  siteid_ = GOOGLE_LONGLONG(0);
  clear_has_siteid();
}
inline ::google::protobuf::int64 SiliconFetchUrl::siteid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.siteId)
  return siteid_;
}
inline void SiliconFetchUrl::set_siteid(::google::protobuf::int64 value) {
  set_has_siteid();
  siteid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.siteId)
}

// repeated int64 categoryIds = 10;
inline int SiliconFetchUrl::categoryids_size() const {
  return categoryids_.size();
}
inline void SiliconFetchUrl::clear_categoryids() {
  categoryids_.Clear();
}
inline ::google::protobuf::int64 SiliconFetchUrl::categoryids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.categoryIds)
  return categoryids_.Get(index);
}
inline void SiliconFetchUrl::set_categoryids(int index, ::google::protobuf::int64 value) {
  categoryids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.categoryIds)
}
inline void SiliconFetchUrl::add_categoryids(::google::protobuf::int64 value) {
  categoryids_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchUrl.categoryIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SiliconFetchUrl::categoryids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconFetchUrl.categoryIds)
  return categoryids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SiliconFetchUrl::mutable_categoryids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconFetchUrl.categoryIds)
  return &categoryids_;
}

// optional .ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest marker = 11;
inline bool SiliconFetchUrl::has_marker() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SiliconFetchUrl::set_has_marker() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SiliconFetchUrl::clear_has_marker() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SiliconFetchUrl::clear_marker() {
  if (marker_ != NULL) marker_->::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest::Clear();
  clear_has_marker();
}
inline const ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest& SiliconFetchUrl::marker() const {
  const ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest* p = marker_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.marker)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest*>(
      &::ru::mail::go::webbase::blobs::_SiliconDocParserInfoDigest_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest* SiliconFetchUrl::mutable_marker() {
  set_has_marker();
  if (marker_ == NULL) {
    marker_ = new ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchUrl.marker)
  return marker_;
}
inline ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest* SiliconFetchUrl::release_marker() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchUrl.marker)
  clear_has_marker();
  ::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest* temp = marker_;
  marker_ = NULL;
  return temp;
}
inline void SiliconFetchUrl::set_allocated_marker(::ru::mail::go::webbase::blobs::SiliconDocParserInfoDigest* marker) {
  delete marker_;
  marker_ = marker;
  if (marker) {
    set_has_marker();
  } else {
    clear_has_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchUrl.marker)
}

// optional int64 firstMeetSec = 12;
inline bool SiliconFetchUrl::has_firstmeetsec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SiliconFetchUrl::set_has_firstmeetsec() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SiliconFetchUrl::clear_has_firstmeetsec() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SiliconFetchUrl::clear_firstmeetsec() {
  firstmeetsec_ = GOOGLE_LONGLONG(0);
  clear_has_firstmeetsec();
}
inline ::google::protobuf::int64 SiliconFetchUrl::firstmeetsec() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchUrl.firstMeetSec)
  return firstmeetsec_;
}
inline void SiliconFetchUrl::set_firstmeetsec(::google::protobuf::int64 value) {
  set_has_firstmeetsec();
  firstmeetsec_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchUrl.firstMeetSec)
}

// -------------------------------------------------------------------

// SiliconFetchedDoc

// required string url = 1;
inline bool SiliconFetchedDoc::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconFetchedDoc::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconFetchedDoc::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconFetchedDoc::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& SiliconFetchedDoc::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.url)
  return url_.GetNoArena();
}
inline void SiliconFetchedDoc::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.url)
}
#if LANG_CXX11
inline void SiliconFetchedDoc::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconFetchedDoc.url)
}
#endif
inline void SiliconFetchedDoc::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.url)
}
inline void SiliconFetchedDoc::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.url)
}
inline ::std::string* SiliconFetchedDoc::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconFetchedDoc::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconFetchedDoc::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.url)
}

// optional string murl = 2;
inline bool SiliconFetchedDoc::has_murl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiliconFetchedDoc::set_has_murl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiliconFetchedDoc::clear_has_murl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiliconFetchedDoc::clear_murl() {
  murl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_murl();
}
inline const ::std::string& SiliconFetchedDoc::murl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl)
  return murl_.GetNoArena();
}
inline void SiliconFetchedDoc::set_murl(const ::std::string& value) {
  set_has_murl();
  murl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl)
}
#if LANG_CXX11
inline void SiliconFetchedDoc::set_murl(::std::string&& value) {
  set_has_murl();
  murl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl)
}
#endif
inline void SiliconFetchedDoc::set_murl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_murl();
  murl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl)
}
inline void SiliconFetchedDoc::set_murl(const char* value, size_t size) {
  set_has_murl();
  murl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl)
}
inline ::std::string* SiliconFetchedDoc::mutable_murl() {
  set_has_murl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl)
  return murl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconFetchedDoc::release_murl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl)
  clear_has_murl();
  return murl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconFetchedDoc::set_allocated_murl(::std::string* murl) {
  if (murl != NULL) {
    set_has_murl();
  } else {
    clear_has_murl();
  }
  murl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), murl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.murl)
}

// required .ru.mail.go.webbase.blobs.SiliconSourceMode sourceMode = 3;
inline bool SiliconFetchedDoc::has_sourcemode() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SiliconFetchedDoc::set_has_sourcemode() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SiliconFetchedDoc::clear_has_sourcemode() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SiliconFetchedDoc::clear_sourcemode() {
  sourcemode_ = 0;
  clear_has_sourcemode();
}
inline ::ru::mail::go::webbase::blobs::SiliconSourceMode SiliconFetchedDoc::sourcemode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceMode)
  return static_cast< ::ru::mail::go::webbase::blobs::SiliconSourceMode >(sourcemode_);
}
inline void SiliconFetchedDoc::set_sourcemode(::ru::mail::go::webbase::blobs::SiliconSourceMode value) {
  assert(::ru::mail::go::webbase::blobs::SiliconSourceMode_IsValid(value));
  set_has_sourcemode();
  sourcemode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceMode)
}

// required .ru.mail.go.webbase.blobs.SiliconDocParserInfo parserInfo = 4;
inline bool SiliconFetchedDoc::has_parserinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SiliconFetchedDoc::set_has_parserinfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SiliconFetchedDoc::clear_has_parserinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SiliconFetchedDoc::clear_parserinfo() {
  if (parserinfo_ != NULL) parserinfo_->::ru::mail::go::webbase::blobs::SiliconDocParserInfo::Clear();
  clear_has_parserinfo();
}
inline const ::ru::mail::go::webbase::blobs::SiliconDocParserInfo& SiliconFetchedDoc::parserinfo() const {
  const ::ru::mail::go::webbase::blobs::SiliconDocParserInfo* p = parserinfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.parserInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconDocParserInfo*>(
      &::ru::mail::go::webbase::blobs::_SiliconDocParserInfo_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconDocParserInfo* SiliconFetchedDoc::mutable_parserinfo() {
  set_has_parserinfo();
  if (parserinfo_ == NULL) {
    parserinfo_ = new ::ru::mail::go::webbase::blobs::SiliconDocParserInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.parserInfo)
  return parserinfo_;
}
inline ::ru::mail::go::webbase::blobs::SiliconDocParserInfo* SiliconFetchedDoc::release_parserinfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.parserInfo)
  clear_has_parserinfo();
  ::ru::mail::go::webbase::blobs::SiliconDocParserInfo* temp = parserinfo_;
  parserinfo_ = NULL;
  return temp;
}
inline void SiliconFetchedDoc::set_allocated_parserinfo(::ru::mail::go::webbase::blobs::SiliconDocParserInfo* parserinfo) {
  delete parserinfo_;
  parserinfo_ = parserinfo;
  if (parserinfo) {
    set_has_parserinfo();
  } else {
    clear_has_parserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.parserInfo)
}

// required .ru.mail.go.webbase.blobs.SiliconDocTaggerInfo taggerInfo = 5;
inline bool SiliconFetchedDoc::has_taggerinfo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SiliconFetchedDoc::set_has_taggerinfo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SiliconFetchedDoc::clear_has_taggerinfo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SiliconFetchedDoc::clear_taggerinfo() {
  if (taggerinfo_ != NULL) taggerinfo_->::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo::Clear();
  clear_has_taggerinfo();
}
inline const ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo& SiliconFetchedDoc::taggerinfo() const {
  const ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* p = taggerinfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.taggerInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo*>(
      &::ru::mail::go::webbase::blobs::_SiliconDocTaggerInfo_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* SiliconFetchedDoc::mutable_taggerinfo() {
  set_has_taggerinfo();
  if (taggerinfo_ == NULL) {
    taggerinfo_ = new ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.taggerInfo)
  return taggerinfo_;
}
inline ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* SiliconFetchedDoc::release_taggerinfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.taggerInfo)
  clear_has_taggerinfo();
  ::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* temp = taggerinfo_;
  taggerinfo_ = NULL;
  return temp;
}
inline void SiliconFetchedDoc::set_allocated_taggerinfo(::ru::mail::go::webbase::blobs::SiliconDocTaggerInfo* taggerinfo) {
  delete taggerinfo_;
  taggerinfo_ = taggerinfo;
  if (taggerinfo) {
    set_has_taggerinfo();
  } else {
    clear_has_taggerinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.taggerInfo)
}

// optional int64 fetchTimestamp = 6;
inline bool SiliconFetchedDoc::has_fetchtimestamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SiliconFetchedDoc::set_has_fetchtimestamp() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SiliconFetchedDoc::clear_has_fetchtimestamp() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SiliconFetchedDoc::clear_fetchtimestamp() {
  fetchtimestamp_ = GOOGLE_LONGLONG(0);
  clear_has_fetchtimestamp();
}
inline ::google::protobuf::int64 SiliconFetchedDoc::fetchtimestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.fetchTimestamp)
  return fetchtimestamp_;
}
inline void SiliconFetchedDoc::set_fetchtimestamp(::google::protobuf::int64 value) {
  set_has_fetchtimestamp();
  fetchtimestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.fetchTimestamp)
}

// optional .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 7;
inline bool SiliconFetchedDoc::has_sourceid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SiliconFetchedDoc::set_has_sourceid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SiliconFetchedDoc::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SiliconFetchedDoc::clear_sourceid() {
  if (sourceid_ != NULL) sourceid_->::ru::mail::go::webbase::blobs::SiliconSourceId::Clear();
  clear_has_sourceid();
}
inline const ::ru::mail::go::webbase::blobs::SiliconSourceId& SiliconFetchedDoc::sourceid() const {
  const ::ru::mail::go::webbase::blobs::SiliconSourceId* p = sourceid_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceId)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconSourceId*>(
      &::ru::mail::go::webbase::blobs::_SiliconSourceId_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconSourceId* SiliconFetchedDoc::mutable_sourceid() {
  set_has_sourceid();
  if (sourceid_ == NULL) {
    sourceid_ = new ::ru::mail::go::webbase::blobs::SiliconSourceId;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceId)
  return sourceid_;
}
inline ::ru::mail::go::webbase::blobs::SiliconSourceId* SiliconFetchedDoc::release_sourceid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceId)
  clear_has_sourceid();
  ::ru::mail::go::webbase::blobs::SiliconSourceId* temp = sourceid_;
  sourceid_ = NULL;
  return temp;
}
inline void SiliconFetchedDoc::set_allocated_sourceid(::ru::mail::go::webbase::blobs::SiliconSourceId* sourceid) {
  delete sourceid_;
  sourceid_ = sourceid;
  if (sourceid) {
    set_has_sourceid();
  } else {
    clear_has_sourceid();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceId)
}

// optional int64 discoveryVersion = 8;
inline bool SiliconFetchedDoc::has_discoveryversion() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SiliconFetchedDoc::set_has_discoveryversion() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SiliconFetchedDoc::clear_has_discoveryversion() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SiliconFetchedDoc::clear_discoveryversion() {
  discoveryversion_ = GOOGLE_LONGLONG(0);
  clear_has_discoveryversion();
}
inline ::google::protobuf::int64 SiliconFetchedDoc::discoveryversion() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.discoveryVersion)
  return discoveryversion_;
}
inline void SiliconFetchedDoc::set_discoveryversion(::google::protobuf::int64 value) {
  set_has_discoveryversion();
  discoveryversion_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.discoveryVersion)
}

// optional bool isRemoved = 9;
inline bool SiliconFetchedDoc::has_isremoved() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SiliconFetchedDoc::set_has_isremoved() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SiliconFetchedDoc::clear_has_isremoved() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SiliconFetchedDoc::clear_isremoved() {
  isremoved_ = false;
  clear_has_isremoved();
}
inline bool SiliconFetchedDoc::isremoved() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.isRemoved)
  return isremoved_;
}
inline void SiliconFetchedDoc::set_isremoved(bool value) {
  set_has_isremoved();
  isremoved_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.isRemoved)
}

// optional int64 publicationDate = 10;
inline bool SiliconFetchedDoc::has_publicationdate() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SiliconFetchedDoc::set_has_publicationdate() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SiliconFetchedDoc::clear_has_publicationdate() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SiliconFetchedDoc::clear_publicationdate() {
  publicationdate_ = GOOGLE_LONGLONG(0);
  clear_has_publicationdate();
}
inline ::google::protobuf::int64 SiliconFetchedDoc::publicationdate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.publicationDate)
  return publicationdate_;
}
inline void SiliconFetchedDoc::set_publicationdate(::google::protobuf::int64 value) {
  set_has_publicationdate();
  publicationdate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.publicationDate)
}

// optional string canonicalizedUrl = 11;
inline bool SiliconFetchedDoc::has_canonicalizedurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SiliconFetchedDoc::set_has_canonicalizedurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SiliconFetchedDoc::clear_has_canonicalizedurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SiliconFetchedDoc::clear_canonicalizedurl() {
  canonicalizedurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_canonicalizedurl();
}
inline const ::std::string& SiliconFetchedDoc::canonicalizedurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl)
  return canonicalizedurl_.GetNoArena();
}
inline void SiliconFetchedDoc::set_canonicalizedurl(const ::std::string& value) {
  set_has_canonicalizedurl();
  canonicalizedurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl)
}
#if LANG_CXX11
inline void SiliconFetchedDoc::set_canonicalizedurl(::std::string&& value) {
  set_has_canonicalizedurl();
  canonicalizedurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl)
}
#endif
inline void SiliconFetchedDoc::set_canonicalizedurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_canonicalizedurl();
  canonicalizedurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl)
}
inline void SiliconFetchedDoc::set_canonicalizedurl(const char* value, size_t size) {
  set_has_canonicalizedurl();
  canonicalizedurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl)
}
inline ::std::string* SiliconFetchedDoc::mutable_canonicalizedurl() {
  set_has_canonicalizedurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl)
  return canonicalizedurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconFetchedDoc::release_canonicalizedurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl)
  clear_has_canonicalizedurl();
  return canonicalizedurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconFetchedDoc::set_allocated_canonicalizedurl(::std::string* canonicalizedurl) {
  if (canonicalizedurl != NULL) {
    set_has_canonicalizedurl();
  } else {
    clear_has_canonicalizedurl();
  }
  canonicalizedurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canonicalizedurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.canonicalizedUrl)
}

// repeated string sourceNames = 12;
inline int SiliconFetchedDoc::sourcenames_size() const {
  return sourcenames_.size();
}
inline void SiliconFetchedDoc::clear_sourcenames() {
  sourcenames_.Clear();
}
inline const ::std::string& SiliconFetchedDoc::sourcenames(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
  return sourcenames_.Get(index);
}
inline ::std::string* SiliconFetchedDoc::mutable_sourcenames(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
  return sourcenames_.Mutable(index);
}
inline void SiliconFetchedDoc::set_sourcenames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
  sourcenames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SiliconFetchedDoc::set_sourcenames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
  sourcenames_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SiliconFetchedDoc::set_sourcenames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sourcenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
}
inline void SiliconFetchedDoc::set_sourcenames(int index, const char* value, size_t size) {
  sourcenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
}
inline ::std::string* SiliconFetchedDoc::add_sourcenames() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
  return sourcenames_.Add();
}
inline void SiliconFetchedDoc::add_sourcenames(const ::std::string& value) {
  sourcenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
}
#if LANG_CXX11
inline void SiliconFetchedDoc::add_sourcenames(::std::string&& value) {
  sourcenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
}
#endif
inline void SiliconFetchedDoc::add_sourcenames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sourcenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
}
inline void SiliconFetchedDoc::add_sourcenames(const char* value, size_t size) {
  sourcenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SiliconFetchedDoc::sourcenames() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
  return sourcenames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SiliconFetchedDoc::mutable_sourcenames() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconFetchedDoc.sourceNames)
  return &sourcenames_;
}

// optional int64 siteId = 13;
inline bool SiliconFetchedDoc::has_siteid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SiliconFetchedDoc::set_has_siteid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SiliconFetchedDoc::clear_has_siteid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SiliconFetchedDoc::clear_siteid() {
  siteid_ = GOOGLE_LONGLONG(0);
  clear_has_siteid();
}
inline ::google::protobuf::int64 SiliconFetchedDoc::siteid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.siteId)
  return siteid_;
}
inline void SiliconFetchedDoc::set_siteid(::google::protobuf::int64 value) {
  set_has_siteid();
  siteid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.siteId)
}

// repeated int64 categoryIds = 14;
inline int SiliconFetchedDoc::categoryids_size() const {
  return categoryids_.size();
}
inline void SiliconFetchedDoc::clear_categoryids() {
  categoryids_.Clear();
}
inline ::google::protobuf::int64 SiliconFetchedDoc::categoryids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.categoryIds)
  return categoryids_.Get(index);
}
inline void SiliconFetchedDoc::set_categoryids(int index, ::google::protobuf::int64 value) {
  categoryids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.categoryIds)
}
inline void SiliconFetchedDoc::add_categoryids(::google::protobuf::int64 value) {
  categoryids_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchedDoc.categoryIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SiliconFetchedDoc::categoryids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconFetchedDoc.categoryIds)
  return categoryids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SiliconFetchedDoc::mutable_categoryids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconFetchedDoc.categoryIds)
  return &categoryids_;
}

// optional int64 urlHash = 15;
inline bool SiliconFetchedDoc::has_urlhash() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SiliconFetchedDoc::set_has_urlhash() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SiliconFetchedDoc::clear_has_urlhash() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SiliconFetchedDoc::clear_urlhash() {
  urlhash_ = GOOGLE_LONGLONG(0);
  clear_has_urlhash();
}
inline ::google::protobuf::int64 SiliconFetchedDoc::urlhash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.urlHash)
  return urlhash_;
}
inline void SiliconFetchedDoc::set_urlhash(::google::protobuf::int64 value) {
  set_has_urlhash();
  urlhash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.urlHash)
}

// optional uint32 regionId = 16;
inline bool SiliconFetchedDoc::has_regionid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SiliconFetchedDoc::set_has_regionid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SiliconFetchedDoc::clear_has_regionid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SiliconFetchedDoc::clear_regionid() {
  regionid_ = 0u;
  clear_has_regionid();
}
inline ::google::protobuf::uint32 SiliconFetchedDoc::regionid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.regionId)
  return regionid_;
}
inline void SiliconFetchedDoc::set_regionid(::google::protobuf::uint32 value) {
  set_has_regionid();
  regionid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.regionId)
}

// optional int64 firstMeetSec = 17;
inline bool SiliconFetchedDoc::has_firstmeetsec() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SiliconFetchedDoc::set_has_firstmeetsec() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SiliconFetchedDoc::clear_has_firstmeetsec() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SiliconFetchedDoc::clear_firstmeetsec() {
  firstmeetsec_ = GOOGLE_LONGLONG(0);
  clear_has_firstmeetsec();
}
inline ::google::protobuf::int64 SiliconFetchedDoc::firstmeetsec() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.firstMeetSec)
  return firstmeetsec_;
}
inline void SiliconFetchedDoc::set_firstmeetsec(::google::protobuf::int64 value) {
  set_has_firstmeetsec();
  firstmeetsec_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.firstMeetSec)
}

// optional .ru.mail.go.webbase.blobs.ProvidersParams providersParams = 18;
inline bool SiliconFetchedDoc::has_providersparams() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SiliconFetchedDoc::set_has_providersparams() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SiliconFetchedDoc::clear_has_providersparams() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SiliconFetchedDoc::clear_providersparams() {
  if (providersparams_ != NULL) providersparams_->::ru::mail::go::webbase::blobs::ProvidersParams::Clear();
  clear_has_providersparams();
}
inline const ::ru::mail::go::webbase::blobs::ProvidersParams& SiliconFetchedDoc::providersparams() const {
  const ::ru::mail::go::webbase::blobs::ProvidersParams* p = providersparams_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.providersParams)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ProvidersParams*>(
      &::ru::mail::go::webbase::blobs::_ProvidersParams_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::ProvidersParams* SiliconFetchedDoc::mutable_providersparams() {
  set_has_providersparams();
  if (providersparams_ == NULL) {
    providersparams_ = new ::ru::mail::go::webbase::blobs::ProvidersParams;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.providersParams)
  return providersparams_;
}
inline ::ru::mail::go::webbase::blobs::ProvidersParams* SiliconFetchedDoc::release_providersparams() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.providersParams)
  clear_has_providersparams();
  ::ru::mail::go::webbase::blobs::ProvidersParams* temp = providersparams_;
  providersparams_ = NULL;
  return temp;
}
inline void SiliconFetchedDoc::set_allocated_providersparams(::ru::mail::go::webbase::blobs::ProvidersParams* providersparams) {
  delete providersparams_;
  providersparams_ = providersparams;
  if (providersparams) {
    set_has_providersparams();
  } else {
    clear_has_providersparams();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.providersParams)
}

// optional .ru.mail.go.webbase.blobs.SiliconeNewsTagsData newsTags = 19;
inline bool SiliconFetchedDoc::has_newstags() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SiliconFetchedDoc::set_has_newstags() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SiliconFetchedDoc::clear_has_newstags() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SiliconFetchedDoc::clear_newstags() {
  if (newstags_ != NULL) newstags_->::ru::mail::go::webbase::blobs::SiliconeNewsTagsData::Clear();
  clear_has_newstags();
}
inline const ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData& SiliconFetchedDoc::newstags() const {
  const ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData* p = newstags_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.newsTags)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData*>(
      &::ru::mail::go::webbase::blobs::_SiliconeNewsTagsData_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData* SiliconFetchedDoc::mutable_newstags() {
  set_has_newstags();
  if (newstags_ == NULL) {
    newstags_ = new ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.newsTags)
  return newstags_;
}
inline ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData* SiliconFetchedDoc::release_newstags() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.newsTags)
  clear_has_newstags();
  ::ru::mail::go::webbase::blobs::SiliconeNewsTagsData* temp = newstags_;
  newstags_ = NULL;
  return temp;
}
inline void SiliconFetchedDoc::set_allocated_newstags(::ru::mail::go::webbase::blobs::SiliconeNewsTagsData* newstags) {
  delete newstags_;
  newstags_ = newstags;
  if (newstags) {
    set_has_newstags();
  } else {
    clear_has_newstags();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.newsTags)
}

// optional .ru.mail.go.webbase.blobs.SiliconeNewsStoriesData newsStories = 20;
inline bool SiliconFetchedDoc::has_newsstories() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SiliconFetchedDoc::set_has_newsstories() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SiliconFetchedDoc::clear_has_newsstories() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SiliconFetchedDoc::clear_newsstories() {
  if (newsstories_ != NULL) newsstories_->::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData::Clear();
  clear_has_newsstories();
}
inline const ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData& SiliconFetchedDoc::newsstories() const {
  const ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData* p = newsstories_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.newsStories)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData*>(
      &::ru::mail::go::webbase::blobs::_SiliconeNewsStoriesData_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData* SiliconFetchedDoc::mutable_newsstories() {
  set_has_newsstories();
  if (newsstories_ == NULL) {
    newsstories_ = new ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.newsStories)
  return newsstories_;
}
inline ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData* SiliconFetchedDoc::release_newsstories() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.newsStories)
  clear_has_newsstories();
  ::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData* temp = newsstories_;
  newsstories_ = NULL;
  return temp;
}
inline void SiliconFetchedDoc::set_allocated_newsstories(::ru::mail::go::webbase::blobs::SiliconeNewsStoriesData* newsstories) {
  delete newsstories_;
  newsstories_ = newsstories;
  if (newsstories) {
    set_has_newsstories();
  } else {
    clear_has_newsstories();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.newsStories)
}

// optional bytes vkPost = 22;
inline bool SiliconFetchedDoc::has_vkpost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SiliconFetchedDoc::set_has_vkpost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SiliconFetchedDoc::clear_has_vkpost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SiliconFetchedDoc::clear_vkpost() {
  vkpost_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vkpost();
}
inline const ::std::string& SiliconFetchedDoc::vkpost() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.vkPost)
  return vkpost_.GetNoArena();
}
inline void SiliconFetchedDoc::set_vkpost(const ::std::string& value) {
  set_has_vkpost();
  vkpost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.vkPost)
}
#if LANG_CXX11
inline void SiliconFetchedDoc::set_vkpost(::std::string&& value) {
  set_has_vkpost();
  vkpost_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconFetchedDoc.vkPost)
}
#endif
inline void SiliconFetchedDoc::set_vkpost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vkpost();
  vkpost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.vkPost)
}
inline void SiliconFetchedDoc::set_vkpost(const void* value, size_t size) {
  set_has_vkpost();
  vkpost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.vkPost)
}
inline ::std::string* SiliconFetchedDoc::mutable_vkpost() {
  set_has_vkpost();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.vkPost)
  return vkpost_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconFetchedDoc::release_vkpost() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.vkPost)
  clear_has_vkpost();
  return vkpost_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconFetchedDoc::set_allocated_vkpost(::std::string* vkpost) {
  if (vkpost != NULL) {
    set_has_vkpost();
  } else {
    clear_has_vkpost();
  }
  vkpost_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vkpost);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.vkPost)
}

// optional .ru.mail.go.webbase.blobs.ScrollToClickInfo scrollToClickInfo = 23;
inline bool SiliconFetchedDoc::has_scrolltoclickinfo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SiliconFetchedDoc::set_has_scrolltoclickinfo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SiliconFetchedDoc::clear_has_scrolltoclickinfo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SiliconFetchedDoc::clear_scrolltoclickinfo() {
  if (scrolltoclickinfo_ != NULL) scrolltoclickinfo_->::ru::mail::go::webbase::blobs::ScrollToClickInfo::Clear();
  clear_has_scrolltoclickinfo();
}
inline const ::ru::mail::go::webbase::blobs::ScrollToClickInfo& SiliconFetchedDoc::scrolltoclickinfo() const {
  const ::ru::mail::go::webbase::blobs::ScrollToClickInfo* p = scrolltoclickinfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.scrollToClickInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ScrollToClickInfo*>(
      &::ru::mail::go::webbase::blobs::_ScrollToClickInfo_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::ScrollToClickInfo* SiliconFetchedDoc::mutable_scrolltoclickinfo() {
  set_has_scrolltoclickinfo();
  if (scrolltoclickinfo_ == NULL) {
    scrolltoclickinfo_ = new ::ru::mail::go::webbase::blobs::ScrollToClickInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.scrollToClickInfo)
  return scrolltoclickinfo_;
}
inline ::ru::mail::go::webbase::blobs::ScrollToClickInfo* SiliconFetchedDoc::release_scrolltoclickinfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.scrollToClickInfo)
  clear_has_scrolltoclickinfo();
  ::ru::mail::go::webbase::blobs::ScrollToClickInfo* temp = scrolltoclickinfo_;
  scrolltoclickinfo_ = NULL;
  return temp;
}
inline void SiliconFetchedDoc::set_allocated_scrolltoclickinfo(::ru::mail::go::webbase::blobs::ScrollToClickInfo* scrolltoclickinfo) {
  delete scrolltoclickinfo_;
  scrolltoclickinfo_ = scrolltoclickinfo;
  if (scrolltoclickinfo) {
    set_has_scrolltoclickinfo();
  } else {
    clear_has_scrolltoclickinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.scrollToClickInfo)
}

// optional .ru.mail.go.webbase.blobs.UserPixels userPixels = 24;
inline bool SiliconFetchedDoc::has_userpixels() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SiliconFetchedDoc::set_has_userpixels() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SiliconFetchedDoc::clear_has_userpixels() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SiliconFetchedDoc::clear_userpixels() {
  if (userpixels_ != NULL) userpixels_->::ru::mail::go::webbase::blobs::UserPixels::Clear();
  clear_has_userpixels();
}
inline const ::ru::mail::go::webbase::blobs::UserPixels& SiliconFetchedDoc::userpixels() const {
  const ::ru::mail::go::webbase::blobs::UserPixels* p = userpixels_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.userPixels)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UserPixels*>(
      &::ru::mail::go::webbase::blobs::_UserPixels_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::UserPixels* SiliconFetchedDoc::mutable_userpixels() {
  set_has_userpixels();
  if (userpixels_ == NULL) {
    userpixels_ = new ::ru::mail::go::webbase::blobs::UserPixels;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.userPixels)
  return userpixels_;
}
inline ::ru::mail::go::webbase::blobs::UserPixels* SiliconFetchedDoc::release_userpixels() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.userPixels)
  clear_has_userpixels();
  ::ru::mail::go::webbase::blobs::UserPixels* temp = userpixels_;
  userpixels_ = NULL;
  return temp;
}
inline void SiliconFetchedDoc::set_allocated_userpixels(::ru::mail::go::webbase::blobs::UserPixels* userpixels) {
  delete userpixels_;
  userpixels_ = userpixels;
  if (userpixels) {
    set_has_userpixels();
  } else {
    clear_has_userpixels();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.userPixels)
}

// optional .ru.mail.go.webbase.blobs.SiliconeDocState state = 25;
inline bool SiliconFetchedDoc::has_state() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SiliconFetchedDoc::set_has_state() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SiliconFetchedDoc::clear_has_state() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SiliconFetchedDoc::clear_state() {
  if (state_ != NULL) state_->::ru::mail::go::webbase::blobs::SiliconeDocState::Clear();
  clear_has_state();
}
inline const ::ru::mail::go::webbase::blobs::SiliconeDocState& SiliconFetchedDoc::state() const {
  const ::ru::mail::go::webbase::blobs::SiliconeDocState* p = state_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.state)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeDocState*>(
      &::ru::mail::go::webbase::blobs::_SiliconeDocState_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconeDocState* SiliconFetchedDoc::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::ru::mail::go::webbase::blobs::SiliconeDocState;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.state)
  return state_;
}
inline ::ru::mail::go::webbase::blobs::SiliconeDocState* SiliconFetchedDoc::release_state() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.state)
  clear_has_state();
  ::ru::mail::go::webbase::blobs::SiliconeDocState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void SiliconFetchedDoc::set_allocated_state(::ru::mail::go::webbase::blobs::SiliconeDocState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.state)
}

// optional bool isDocStateUpdated = 26;
inline bool SiliconFetchedDoc::has_isdocstateupdated() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SiliconFetchedDoc::set_has_isdocstateupdated() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SiliconFetchedDoc::clear_has_isdocstateupdated() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SiliconFetchedDoc::clear_isdocstateupdated() {
  isdocstateupdated_ = false;
  clear_has_isdocstateupdated();
}
inline bool SiliconFetchedDoc::isdocstateupdated() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.isDocStateUpdated)
  return isdocstateupdated_;
}
inline void SiliconFetchedDoc::set_isdocstateupdated(bool value) {
  set_has_isdocstateupdated();
  isdocstateupdated_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.isDocStateUpdated)
}

// optional string jsonBlocks = 27;
inline bool SiliconFetchedDoc::has_jsonblocks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SiliconFetchedDoc::set_has_jsonblocks() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SiliconFetchedDoc::clear_has_jsonblocks() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SiliconFetchedDoc::clear_jsonblocks() {
  jsonblocks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_jsonblocks();
}
inline const ::std::string& SiliconFetchedDoc::jsonblocks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks)
  return jsonblocks_.GetNoArena();
}
inline void SiliconFetchedDoc::set_jsonblocks(const ::std::string& value) {
  set_has_jsonblocks();
  jsonblocks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks)
}
#if LANG_CXX11
inline void SiliconFetchedDoc::set_jsonblocks(::std::string&& value) {
  set_has_jsonblocks();
  jsonblocks_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks)
}
#endif
inline void SiliconFetchedDoc::set_jsonblocks(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_jsonblocks();
  jsonblocks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks)
}
inline void SiliconFetchedDoc::set_jsonblocks(const char* value, size_t size) {
  set_has_jsonblocks();
  jsonblocks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks)
}
inline ::std::string* SiliconFetchedDoc::mutable_jsonblocks() {
  set_has_jsonblocks();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks)
  return jsonblocks_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconFetchedDoc::release_jsonblocks() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks)
  clear_has_jsonblocks();
  return jsonblocks_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconFetchedDoc::set_allocated_jsonblocks(::std::string* jsonblocks) {
  if (jsonblocks != NULL) {
    set_has_jsonblocks();
  } else {
    clear_has_jsonblocks();
  }
  jsonblocks_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jsonblocks);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.jsonBlocks)
}

// repeated string tags = 28;
inline int SiliconFetchedDoc::tags_size() const {
  return tags_.size();
}
inline void SiliconFetchedDoc::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& SiliconFetchedDoc::tags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
  return tags_.Get(index);
}
inline ::std::string* SiliconFetchedDoc::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
  return tags_.Mutable(index);
}
inline void SiliconFetchedDoc::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SiliconFetchedDoc::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SiliconFetchedDoc::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
}
inline void SiliconFetchedDoc::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
}
inline ::std::string* SiliconFetchedDoc::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
  return tags_.Add();
}
inline void SiliconFetchedDoc::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
}
#if LANG_CXX11
inline void SiliconFetchedDoc::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
}
#endif
inline void SiliconFetchedDoc::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
}
inline void SiliconFetchedDoc::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SiliconFetchedDoc::tags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SiliconFetchedDoc::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconFetchedDoc.tags)
  return &tags_;
}

// optional .ru.mail.go.webbase.blobs.CustomAdminFields customAdminFields = 29;
inline bool SiliconFetchedDoc::has_customadminfields() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SiliconFetchedDoc::set_has_customadminfields() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SiliconFetchedDoc::clear_has_customadminfields() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SiliconFetchedDoc::clear_customadminfields() {
  if (customadminfields_ != NULL) customadminfields_->::ru::mail::go::webbase::blobs::CustomAdminFields::Clear();
  clear_has_customadminfields();
}
inline const ::ru::mail::go::webbase::blobs::CustomAdminFields& SiliconFetchedDoc::customadminfields() const {
  const ::ru::mail::go::webbase::blobs::CustomAdminFields* p = customadminfields_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.customAdminFields)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::CustomAdminFields*>(
      &::ru::mail::go::webbase::blobs::_CustomAdminFields_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::CustomAdminFields* SiliconFetchedDoc::mutable_customadminfields() {
  set_has_customadminfields();
  if (customadminfields_ == NULL) {
    customadminfields_ = new ::ru::mail::go::webbase::blobs::CustomAdminFields;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.customAdminFields)
  return customadminfields_;
}
inline ::ru::mail::go::webbase::blobs::CustomAdminFields* SiliconFetchedDoc::release_customadminfields() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.customAdminFields)
  clear_has_customadminfields();
  ::ru::mail::go::webbase::blobs::CustomAdminFields* temp = customadminfields_;
  customadminfields_ = NULL;
  return temp;
}
inline void SiliconFetchedDoc::set_allocated_customadminfields(::ru::mail::go::webbase::blobs::CustomAdminFields* customadminfields) {
  delete customadminfields_;
  customadminfields_ = customadminfields;
  if (customadminfields) {
    set_has_customadminfields();
  } else {
    clear_has_customadminfields();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.customAdminFields)
}

// optional string external_url = 30;
inline bool SiliconFetchedDoc::has_external_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SiliconFetchedDoc::set_has_external_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SiliconFetchedDoc::clear_has_external_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SiliconFetchedDoc::clear_external_url() {
  external_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_external_url();
}
inline const ::std::string& SiliconFetchedDoc::external_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url)
  return external_url_.GetNoArena();
}
inline void SiliconFetchedDoc::set_external_url(const ::std::string& value) {
  set_has_external_url();
  external_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url)
}
#if LANG_CXX11
inline void SiliconFetchedDoc::set_external_url(::std::string&& value) {
  set_has_external_url();
  external_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url)
}
#endif
inline void SiliconFetchedDoc::set_external_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_external_url();
  external_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url)
}
inline void SiliconFetchedDoc::set_external_url(const char* value, size_t size) {
  set_has_external_url();
  external_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url)
}
inline ::std::string* SiliconFetchedDoc::mutable_external_url() {
  set_has_external_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url)
  return external_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconFetchedDoc::release_external_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url)
  clear_has_external_url();
  return external_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconFetchedDoc::set_allocated_external_url(::std::string* external_url) {
  if (external_url != NULL) {
    set_has_external_url();
  } else {
    clear_has_external_url();
  }
  external_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.external_url)
}

// optional bool isAdminCustomDocUpdated = 31;
inline bool SiliconFetchedDoc::has_isadmincustomdocupdated() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SiliconFetchedDoc::set_has_isadmincustomdocupdated() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SiliconFetchedDoc::clear_has_isadmincustomdocupdated() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SiliconFetchedDoc::clear_isadmincustomdocupdated() {
  isadmincustomdocupdated_ = false;
  clear_has_isadmincustomdocupdated();
}
inline bool SiliconFetchedDoc::isadmincustomdocupdated() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.isAdminCustomDocUpdated)
  return isadmincustomdocupdated_;
}
inline void SiliconFetchedDoc::set_isadmincustomdocupdated(bool value) {
  set_has_isadmincustomdocupdated();
  isadmincustomdocupdated_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.isAdminCustomDocUpdated)
}

// optional bool hasContents = 32;
inline bool SiliconFetchedDoc::has_hascontents() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SiliconFetchedDoc::set_has_hascontents() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SiliconFetchedDoc::clear_has_hascontents() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SiliconFetchedDoc::clear_hascontents() {
  hascontents_ = false;
  clear_has_hascontents();
}
inline bool SiliconFetchedDoc::hascontents() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.hasContents)
  return hascontents_;
}
inline void SiliconFetchedDoc::set_hascontents(bool value) {
  set_has_hascontents();
  hascontents_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.hasContents)
}

// optional .ru.mail.go.webbase.blobs.RisksFields risksFields = 33;
inline bool SiliconFetchedDoc::has_risksfields() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SiliconFetchedDoc::set_has_risksfields() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SiliconFetchedDoc::clear_has_risksfields() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SiliconFetchedDoc::clear_risksfields() {
  if (risksfields_ != NULL) risksfields_->::ru::mail::go::webbase::blobs::RisksFields::Clear();
  clear_has_risksfields();
}
inline const ::ru::mail::go::webbase::blobs::RisksFields& SiliconFetchedDoc::risksfields() const {
  const ::ru::mail::go::webbase::blobs::RisksFields* p = risksfields_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.risksFields)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::RisksFields*>(
      &::ru::mail::go::webbase::blobs::_RisksFields_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::RisksFields* SiliconFetchedDoc::mutable_risksfields() {
  set_has_risksfields();
  if (risksfields_ == NULL) {
    risksfields_ = new ::ru::mail::go::webbase::blobs::RisksFields;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.risksFields)
  return risksfields_;
}
inline ::ru::mail::go::webbase::blobs::RisksFields* SiliconFetchedDoc::release_risksfields() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.risksFields)
  clear_has_risksfields();
  ::ru::mail::go::webbase::blobs::RisksFields* temp = risksfields_;
  risksfields_ = NULL;
  return temp;
}
inline void SiliconFetchedDoc::set_allocated_risksfields(::ru::mail::go::webbase::blobs::RisksFields* risksfields) {
  delete risksfields_;
  risksfields_ = risksfields;
  if (risksfields) {
    set_has_risksfields();
  } else {
    clear_has_risksfields();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.risksFields)
}

// optional string original_url = 34;
inline bool SiliconFetchedDoc::has_original_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SiliconFetchedDoc::set_has_original_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SiliconFetchedDoc::clear_has_original_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SiliconFetchedDoc::clear_original_url() {
  original_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_original_url();
}
inline const ::std::string& SiliconFetchedDoc::original_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url)
  return original_url_.GetNoArena();
}
inline void SiliconFetchedDoc::set_original_url(const ::std::string& value) {
  set_has_original_url();
  original_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url)
}
#if LANG_CXX11
inline void SiliconFetchedDoc::set_original_url(::std::string&& value) {
  set_has_original_url();
  original_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url)
}
#endif
inline void SiliconFetchedDoc::set_original_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_original_url();
  original_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url)
}
inline void SiliconFetchedDoc::set_original_url(const char* value, size_t size) {
  set_has_original_url();
  original_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url)
}
inline ::std::string* SiliconFetchedDoc::mutable_original_url() {
  set_has_original_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url)
  return original_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconFetchedDoc::release_original_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url)
  clear_has_original_url();
  return original_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconFetchedDoc::set_allocated_original_url(::std::string* original_url) {
  if (original_url != NULL) {
    set_has_original_url();
  } else {
    clear_has_original_url();
  }
  original_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconFetchedDoc.original_url)
}

// -------------------------------------------------------------------

// SiliconDocParserInfo

// optional string title = 1;
inline bool SiliconDocParserInfo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconDocParserInfo::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconDocParserInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconDocParserInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& SiliconDocParserInfo::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.title)
  return title_.GetNoArena();
}
inline void SiliconDocParserInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.title)
}
#if LANG_CXX11
inline void SiliconDocParserInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.title)
}
#endif
inline void SiliconDocParserInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.title)
}
inline void SiliconDocParserInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.title)
}
inline ::std::string* SiliconDocParserInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconDocParserInfo::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconDocParserInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.title)
}

// optional string description = 2;
inline bool SiliconDocParserInfo::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiliconDocParserInfo::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiliconDocParserInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiliconDocParserInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& SiliconDocParserInfo::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.description)
  return description_.GetNoArena();
}
inline void SiliconDocParserInfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.description)
}
#if LANG_CXX11
inline void SiliconDocParserInfo::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.description)
}
#endif
inline void SiliconDocParserInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.description)
}
inline void SiliconDocParserInfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.description)
}
inline ::std::string* SiliconDocParserInfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconDocParserInfo::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconDocParserInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.description)
}

// optional string body = 3;
inline bool SiliconDocParserInfo::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SiliconDocParserInfo::set_has_body() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SiliconDocParserInfo::clear_has_body() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SiliconDocParserInfo::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
inline const ::std::string& SiliconDocParserInfo::body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.body)
  return body_.GetNoArena();
}
inline void SiliconDocParserInfo::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.body)
}
#if LANG_CXX11
inline void SiliconDocParserInfo::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.body)
}
#endif
inline void SiliconDocParserInfo::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.body)
}
inline void SiliconDocParserInfo::set_body(const char* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.body)
}
inline ::std::string* SiliconDocParserInfo::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconDocParserInfo::release_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconDocParserInfo::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.body)
}

// required .ru.mail.go.webbase.blobs.PostImages images = 4;
inline bool SiliconDocParserInfo::has_images() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SiliconDocParserInfo::set_has_images() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SiliconDocParserInfo::clear_has_images() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SiliconDocParserInfo::clear_images() {
  if (images_ != NULL) images_->::ru::mail::go::webbase::blobs::PostImages::Clear();
  clear_has_images();
}
inline const ::ru::mail::go::webbase::blobs::PostImages& SiliconDocParserInfo::images() const {
  const ::ru::mail::go::webbase::blobs::PostImages* p = images_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.images)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::PostImages*>(
      &::ru::mail::go::webbase::blobs::_PostImages_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::PostImages* SiliconDocParserInfo::mutable_images() {
  set_has_images();
  if (images_ == NULL) {
    images_ = new ::ru::mail::go::webbase::blobs::PostImages;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.images)
  return images_;
}
inline ::ru::mail::go::webbase::blobs::PostImages* SiliconDocParserInfo::release_images() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.images)
  clear_has_images();
  ::ru::mail::go::webbase::blobs::PostImages* temp = images_;
  images_ = NULL;
  return temp;
}
inline void SiliconDocParserInfo::set_allocated_images(::ru::mail::go::webbase::blobs::PostImages* images) {
  delete images_;
  images_ = images;
  if (images) {
    set_has_images();
  } else {
    clear_has_images();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.images)
}

// optional string video = 5;
inline bool SiliconDocParserInfo::has_video() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SiliconDocParserInfo::set_has_video() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SiliconDocParserInfo::clear_has_video() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SiliconDocParserInfo::clear_video() {
  video_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video();
}
inline const ::std::string& SiliconDocParserInfo::video() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.video)
  return video_.GetNoArena();
}
inline void SiliconDocParserInfo::set_video(const ::std::string& value) {
  set_has_video();
  video_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.video)
}
#if LANG_CXX11
inline void SiliconDocParserInfo::set_video(::std::string&& value) {
  set_has_video();
  video_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.video)
}
#endif
inline void SiliconDocParserInfo::set_video(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video();
  video_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.video)
}
inline void SiliconDocParserInfo::set_video(const char* value, size_t size) {
  set_has_video();
  video_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.video)
}
inline ::std::string* SiliconDocParserInfo::mutable_video() {
  set_has_video();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.video)
  return video_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconDocParserInfo::release_video() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.video)
  clear_has_video();
  return video_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconDocParserInfo::set_allocated_video(::std::string* video) {
  if (video != NULL) {
    set_has_video();
  } else {
    clear_has_video();
  }
  video_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.video)
}

// optional string descriptionRss = 6;
inline bool SiliconDocParserInfo::has_descriptionrss() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SiliconDocParserInfo::set_has_descriptionrss() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SiliconDocParserInfo::clear_has_descriptionrss() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SiliconDocParserInfo::clear_descriptionrss() {
  descriptionrss_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_descriptionrss();
}
inline const ::std::string& SiliconDocParserInfo::descriptionrss() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss)
  return descriptionrss_.GetNoArena();
}
inline void SiliconDocParserInfo::set_descriptionrss(const ::std::string& value) {
  set_has_descriptionrss();
  descriptionrss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss)
}
#if LANG_CXX11
inline void SiliconDocParserInfo::set_descriptionrss(::std::string&& value) {
  set_has_descriptionrss();
  descriptionrss_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss)
}
#endif
inline void SiliconDocParserInfo::set_descriptionrss(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_descriptionrss();
  descriptionrss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss)
}
inline void SiliconDocParserInfo::set_descriptionrss(const char* value, size_t size) {
  set_has_descriptionrss();
  descriptionrss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss)
}
inline ::std::string* SiliconDocParserInfo::mutable_descriptionrss() {
  set_has_descriptionrss();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss)
  return descriptionrss_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconDocParserInfo::release_descriptionrss() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss)
  clear_has_descriptionrss();
  return descriptionrss_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconDocParserInfo::set_allocated_descriptionrss(::std::string* descriptionrss) {
  if (descriptionrss != NULL) {
    set_has_descriptionrss();
  } else {
    clear_has_descriptionrss();
  }
  descriptionrss_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptionrss);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.descriptionRss)
}

// optional .ru.mail.go.webbase.blobs.SiliconeParsedBody parsedBody = 7;
inline bool SiliconDocParserInfo::has_parsedbody() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SiliconDocParserInfo::set_has_parsedbody() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SiliconDocParserInfo::clear_has_parsedbody() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SiliconDocParserInfo::clear_parsedbody() {
  if (parsedbody_ != NULL) parsedbody_->::ru::mail::go::webbase::blobs::SiliconeParsedBody::Clear();
  clear_has_parsedbody();
}
inline const ::ru::mail::go::webbase::blobs::SiliconeParsedBody& SiliconDocParserInfo::parsedbody() const {
  const ::ru::mail::go::webbase::blobs::SiliconeParsedBody* p = parsedbody_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.parsedBody)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeParsedBody*>(
      &::ru::mail::go::webbase::blobs::_SiliconeParsedBody_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconeParsedBody* SiliconDocParserInfo::mutable_parsedbody() {
  set_has_parsedbody();
  if (parsedbody_ == NULL) {
    parsedbody_ = new ::ru::mail::go::webbase::blobs::SiliconeParsedBody;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.parsedBody)
  return parsedbody_;
}
inline ::ru::mail::go::webbase::blobs::SiliconeParsedBody* SiliconDocParserInfo::release_parsedbody() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.parsedBody)
  clear_has_parsedbody();
  ::ru::mail::go::webbase::blobs::SiliconeParsedBody* temp = parsedbody_;
  parsedbody_ = NULL;
  return temp;
}
inline void SiliconDocParserInfo::set_allocated_parsedbody(::ru::mail::go::webbase::blobs::SiliconeParsedBody* parsedbody) {
  delete parsedbody_;
  parsedbody_ = parsedbody;
  if (parsedbody) {
    set_has_parsedbody();
  } else {
    clear_has_parsedbody();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.parsedBody)
}

// optional .ru.mail.go.webbase.blobs.SiliconeAuthor author = 8;
inline bool SiliconDocParserInfo::has_author() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SiliconDocParserInfo::set_has_author() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SiliconDocParserInfo::clear_has_author() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SiliconDocParserInfo::clear_author() {
  if (author_ != NULL) author_->::ru::mail::go::webbase::blobs::SiliconeAuthor::Clear();
  clear_has_author();
}
inline const ::ru::mail::go::webbase::blobs::SiliconeAuthor& SiliconDocParserInfo::author() const {
  const ::ru::mail::go::webbase::blobs::SiliconeAuthor* p = author_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.author)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeAuthor*>(
      &::ru::mail::go::webbase::blobs::_SiliconeAuthor_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconeAuthor* SiliconDocParserInfo::mutable_author() {
  set_has_author();
  if (author_ == NULL) {
    author_ = new ::ru::mail::go::webbase::blobs::SiliconeAuthor;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.author)
  return author_;
}
inline ::ru::mail::go::webbase::blobs::SiliconeAuthor* SiliconDocParserInfo::release_author() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.author)
  clear_has_author();
  ::ru::mail::go::webbase::blobs::SiliconeAuthor* temp = author_;
  author_ = NULL;
  return temp;
}
inline void SiliconDocParserInfo::set_allocated_author(::ru::mail::go::webbase::blobs::SiliconeAuthor* author) {
  delete author_;
  author_ = author;
  if (author) {
    set_has_author();
  } else {
    clear_has_author();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.author)
}

// optional .ru.mail.go.webbase.blobs.SiliconeCategory category = 9;
inline bool SiliconDocParserInfo::has_category() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SiliconDocParserInfo::set_has_category() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SiliconDocParserInfo::clear_has_category() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SiliconDocParserInfo::clear_category() {
  if (category_ != NULL) category_->::ru::mail::go::webbase::blobs::SiliconeCategory::Clear();
  clear_has_category();
}
inline const ::ru::mail::go::webbase::blobs::SiliconeCategory& SiliconDocParserInfo::category() const {
  const ::ru::mail::go::webbase::blobs::SiliconeCategory* p = category_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.category)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeCategory*>(
      &::ru::mail::go::webbase::blobs::_SiliconeCategory_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconeCategory* SiliconDocParserInfo::mutable_category() {
  set_has_category();
  if (category_ == NULL) {
    category_ = new ::ru::mail::go::webbase::blobs::SiliconeCategory;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.category)
  return category_;
}
inline ::ru::mail::go::webbase::blobs::SiliconeCategory* SiliconDocParserInfo::release_category() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.category)
  clear_has_category();
  ::ru::mail::go::webbase::blobs::SiliconeCategory* temp = category_;
  category_ = NULL;
  return temp;
}
inline void SiliconDocParserInfo::set_allocated_category(::ru::mail::go::webbase::blobs::SiliconeCategory* category) {
  delete category_;
  category_ = category;
  if (category) {
    set_has_category();
  } else {
    clear_has_category();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.category)
}

// optional .ru.mail.go.webbase.blobs.SiliconeVideoData videoData = 10;
inline bool SiliconDocParserInfo::has_videodata() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SiliconDocParserInfo::set_has_videodata() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SiliconDocParserInfo::clear_has_videodata() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SiliconDocParserInfo::clear_videodata() {
  if (videodata_ != NULL) videodata_->::ru::mail::go::webbase::blobs::SiliconeVideoData::Clear();
  clear_has_videodata();
}
inline const ::ru::mail::go::webbase::blobs::SiliconeVideoData& SiliconDocParserInfo::videodata() const {
  const ::ru::mail::go::webbase::blobs::SiliconeVideoData* p = videodata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.videoData)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeVideoData*>(
      &::ru::mail::go::webbase::blobs::_SiliconeVideoData_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconeVideoData* SiliconDocParserInfo::mutable_videodata() {
  set_has_videodata();
  if (videodata_ == NULL) {
    videodata_ = new ::ru::mail::go::webbase::blobs::SiliconeVideoData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.videoData)
  return videodata_;
}
inline ::ru::mail::go::webbase::blobs::SiliconeVideoData* SiliconDocParserInfo::release_videodata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.videoData)
  clear_has_videodata();
  ::ru::mail::go::webbase::blobs::SiliconeVideoData* temp = videodata_;
  videodata_ = NULL;
  return temp;
}
inline void SiliconDocParserInfo::set_allocated_videodata(::ru::mail::go::webbase::blobs::SiliconeVideoData* videodata) {
  delete videodata_;
  videodata_ = videodata;
  if (videodata) {
    set_has_videodata();
  } else {
    clear_has_videodata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.videoData)
}

// optional string layerBodyHtml = 11;
inline bool SiliconDocParserInfo::has_layerbodyhtml() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SiliconDocParserInfo::set_has_layerbodyhtml() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SiliconDocParserInfo::clear_has_layerbodyhtml() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SiliconDocParserInfo::clear_layerbodyhtml() {
  layerbodyhtml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layerbodyhtml();
}
inline const ::std::string& SiliconDocParserInfo::layerbodyhtml() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml)
  return layerbodyhtml_.GetNoArena();
}
inline void SiliconDocParserInfo::set_layerbodyhtml(const ::std::string& value) {
  set_has_layerbodyhtml();
  layerbodyhtml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml)
}
#if LANG_CXX11
inline void SiliconDocParserInfo::set_layerbodyhtml(::std::string&& value) {
  set_has_layerbodyhtml();
  layerbodyhtml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml)
}
#endif
inline void SiliconDocParserInfo::set_layerbodyhtml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_layerbodyhtml();
  layerbodyhtml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml)
}
inline void SiliconDocParserInfo::set_layerbodyhtml(const char* value, size_t size) {
  set_has_layerbodyhtml();
  layerbodyhtml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml)
}
inline ::std::string* SiliconDocParserInfo::mutable_layerbodyhtml() {
  set_has_layerbodyhtml();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml)
  return layerbodyhtml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconDocParserInfo::release_layerbodyhtml() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml)
  clear_has_layerbodyhtml();
  return layerbodyhtml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconDocParserInfo::set_allocated_layerbodyhtml(::std::string* layerbodyhtml) {
  if (layerbodyhtml != NULL) {
    set_has_layerbodyhtml();
  } else {
    clear_has_layerbodyhtml();
  }
  layerbodyhtml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layerbodyhtml);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layerBodyHtml)
}

// optional .ru.mail.go.webbase.blobs.CustomFields customFields = 12;
inline bool SiliconDocParserInfo::has_customfields() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SiliconDocParserInfo::set_has_customfields() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SiliconDocParserInfo::clear_has_customfields() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SiliconDocParserInfo::clear_customfields() {
  if (customfields_ != NULL) customfields_->::ru::mail::go::webbase::blobs::CustomFields::Clear();
  clear_has_customfields();
}
inline const ::ru::mail::go::webbase::blobs::CustomFields& SiliconDocParserInfo::customfields() const {
  const ::ru::mail::go::webbase::blobs::CustomFields* p = customfields_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.customFields)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::CustomFields*>(
      &::ru::mail::go::webbase::blobs::_CustomFields_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::CustomFields* SiliconDocParserInfo::mutable_customfields() {
  set_has_customfields();
  if (customfields_ == NULL) {
    customfields_ = new ::ru::mail::go::webbase::blobs::CustomFields;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.customFields)
  return customfields_;
}
inline ::ru::mail::go::webbase::blobs::CustomFields* SiliconDocParserInfo::release_customfields() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.customFields)
  clear_has_customfields();
  ::ru::mail::go::webbase::blobs::CustomFields* temp = customfields_;
  customfields_ = NULL;
  return temp;
}
inline void SiliconDocParserInfo::set_allocated_customfields(::ru::mail::go::webbase::blobs::CustomFields* customfields) {
  delete customfields_;
  customfields_ = customfields;
  if (customfields) {
    set_has_customfields();
  } else {
    clear_has_customfields();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.customFields)
}

// optional int32 layer_words_count = 13;
inline bool SiliconDocParserInfo::has_layer_words_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SiliconDocParserInfo::set_has_layer_words_count() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SiliconDocParserInfo::clear_has_layer_words_count() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SiliconDocParserInfo::clear_layer_words_count() {
  layer_words_count_ = 0;
  clear_has_layer_words_count();
}
inline ::google::protobuf::int32 SiliconDocParserInfo::layer_words_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_words_count)
  return layer_words_count_;
}
inline void SiliconDocParserInfo::set_layer_words_count(::google::protobuf::int32 value) {
  set_has_layer_words_count();
  layer_words_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_words_count)
}

// optional string layer_header = 14;
inline bool SiliconDocParserInfo::has_layer_header() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SiliconDocParserInfo::set_has_layer_header() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SiliconDocParserInfo::clear_has_layer_header() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SiliconDocParserInfo::clear_layer_header() {
  layer_header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer_header();
}
inline const ::std::string& SiliconDocParserInfo::layer_header() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header)
  return layer_header_.GetNoArena();
}
inline void SiliconDocParserInfo::set_layer_header(const ::std::string& value) {
  set_has_layer_header();
  layer_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header)
}
#if LANG_CXX11
inline void SiliconDocParserInfo::set_layer_header(::std::string&& value) {
  set_has_layer_header();
  layer_header_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header)
}
#endif
inline void SiliconDocParserInfo::set_layer_header(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_layer_header();
  layer_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header)
}
inline void SiliconDocParserInfo::set_layer_header(const char* value, size_t size) {
  set_has_layer_header();
  layer_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header)
}
inline ::std::string* SiliconDocParserInfo::mutable_layer_header() {
  set_has_layer_header();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header)
  return layer_header_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconDocParserInfo::release_layer_header() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header)
  clear_has_layer_header();
  return layer_header_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconDocParserInfo::set_allocated_layer_header(::std::string* layer_header) {
  if (layer_header != NULL) {
    set_has_layer_header();
  } else {
    clear_has_layer_header();
  }
  layer_header_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer_header);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_header)
}

// optional string layer_footer = 15;
inline bool SiliconDocParserInfo::has_layer_footer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SiliconDocParserInfo::set_has_layer_footer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SiliconDocParserInfo::clear_has_layer_footer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SiliconDocParserInfo::clear_layer_footer() {
  layer_footer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer_footer();
}
inline const ::std::string& SiliconDocParserInfo::layer_footer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer)
  return layer_footer_.GetNoArena();
}
inline void SiliconDocParserInfo::set_layer_footer(const ::std::string& value) {
  set_has_layer_footer();
  layer_footer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer)
}
#if LANG_CXX11
inline void SiliconDocParserInfo::set_layer_footer(::std::string&& value) {
  set_has_layer_footer();
  layer_footer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer)
}
#endif
inline void SiliconDocParserInfo::set_layer_footer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_layer_footer();
  layer_footer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer)
}
inline void SiliconDocParserInfo::set_layer_footer(const char* value, size_t size) {
  set_has_layer_footer();
  layer_footer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer)
}
inline ::std::string* SiliconDocParserInfo::mutable_layer_footer() {
  set_has_layer_footer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer)
  return layer_footer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconDocParserInfo::release_layer_footer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer)
  clear_has_layer_footer();
  return layer_footer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconDocParserInfo::set_allocated_layer_footer(::std::string* layer_footer) {
  if (layer_footer != NULL) {
    set_has_layer_footer();
  } else {
    clear_has_layer_footer();
  }
  layer_footer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer_footer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_footer)
}

// optional string amp_url = 16;
inline bool SiliconDocParserInfo::has_amp_url() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SiliconDocParserInfo::set_has_amp_url() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SiliconDocParserInfo::clear_has_amp_url() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SiliconDocParserInfo::clear_amp_url() {
  amp_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_amp_url();
}
inline const ::std::string& SiliconDocParserInfo::amp_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url)
  return amp_url_.GetNoArena();
}
inline void SiliconDocParserInfo::set_amp_url(const ::std::string& value) {
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url)
}
#if LANG_CXX11
inline void SiliconDocParserInfo::set_amp_url(::std::string&& value) {
  set_has_amp_url();
  amp_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url)
}
#endif
inline void SiliconDocParserInfo::set_amp_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url)
}
inline void SiliconDocParserInfo::set_amp_url(const char* value, size_t size) {
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url)
}
inline ::std::string* SiliconDocParserInfo::mutable_amp_url() {
  set_has_amp_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url)
  return amp_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconDocParserInfo::release_amp_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url)
  clear_has_amp_url();
  return amp_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconDocParserInfo::set_allocated_amp_url(::std::string* amp_url) {
  if (amp_url != NULL) {
    set_has_amp_url();
  } else {
    clear_has_amp_url();
  }
  amp_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amp_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.amp_url)
}

// repeated .ru.mail.go.webbase.blobs.Gallery galleries = 17;
inline int SiliconDocParserInfo::galleries_size() const {
  return galleries_.size();
}
inline void SiliconDocParserInfo::clear_galleries() {
  galleries_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::Gallery& SiliconDocParserInfo::galleries(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.galleries)
  return galleries_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::Gallery* SiliconDocParserInfo::mutable_galleries(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.galleries)
  return galleries_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::Gallery* SiliconDocParserInfo::add_galleries() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfo.galleries)
  return galleries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Gallery >*
SiliconDocParserInfo::mutable_galleries() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfo.galleries)
  return &galleries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Gallery >&
SiliconDocParserInfo::galleries() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfo.galleries)
  return galleries_;
}

// optional string guid = 18;
inline bool SiliconDocParserInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SiliconDocParserInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SiliconDocParserInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SiliconDocParserInfo::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guid();
}
inline const ::std::string& SiliconDocParserInfo::guid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid)
  return guid_.GetNoArena();
}
inline void SiliconDocParserInfo::set_guid(const ::std::string& value) {
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid)
}
#if LANG_CXX11
inline void SiliconDocParserInfo::set_guid(::std::string&& value) {
  set_has_guid();
  guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid)
}
#endif
inline void SiliconDocParserInfo::set_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid)
}
inline void SiliconDocParserInfo::set_guid(const char* value, size_t size) {
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid)
}
inline ::std::string* SiliconDocParserInfo::mutable_guid() {
  set_has_guid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconDocParserInfo::release_guid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid)
  clear_has_guid();
  return guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconDocParserInfo::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    set_has_guid();
  } else {
    clear_has_guid();
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.guid)
}

// optional bool is_valid_fulltext = 19;
inline bool SiliconDocParserInfo::has_is_valid_fulltext() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SiliconDocParserInfo::set_has_is_valid_fulltext() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SiliconDocParserInfo::clear_has_is_valid_fulltext() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SiliconDocParserInfo::clear_is_valid_fulltext() {
  is_valid_fulltext_ = false;
  clear_has_is_valid_fulltext();
}
inline bool SiliconDocParserInfo::is_valid_fulltext() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.is_valid_fulltext)
  return is_valid_fulltext_;
}
inline void SiliconDocParserInfo::set_is_valid_fulltext(bool value) {
  set_has_is_valid_fulltext();
  is_valid_fulltext_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.is_valid_fulltext)
}

// optional .ru.mail.go.webbase.blobs.PulseVideos videos = 20;
inline bool SiliconDocParserInfo::has_videos() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SiliconDocParserInfo::set_has_videos() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SiliconDocParserInfo::clear_has_videos() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SiliconDocParserInfo::clear_videos() {
  if (videos_ != NULL) videos_->::ru::mail::go::webbase::blobs::PulseVideos::Clear();
  clear_has_videos();
}
inline const ::ru::mail::go::webbase::blobs::PulseVideos& SiliconDocParserInfo::videos() const {
  const ::ru::mail::go::webbase::blobs::PulseVideos* p = videos_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.videos)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::PulseVideos*>(
      &::ru::mail::go::webbase::blobs::_PulseVideos_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::PulseVideos* SiliconDocParserInfo::mutable_videos() {
  set_has_videos();
  if (videos_ == NULL) {
    videos_ = new ::ru::mail::go::webbase::blobs::PulseVideos;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.videos)
  return videos_;
}
inline ::ru::mail::go::webbase::blobs::PulseVideos* SiliconDocParserInfo::release_videos() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.videos)
  clear_has_videos();
  ::ru::mail::go::webbase::blobs::PulseVideos* temp = videos_;
  videos_ = NULL;
  return temp;
}
inline void SiliconDocParserInfo::set_allocated_videos(::ru::mail::go::webbase::blobs::PulseVideos* videos) {
  delete videos_;
  videos_ = videos;
  if (videos) {
    set_has_videos();
  } else {
    clear_has_videos();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.videos)
}

// optional string slug = 21;
inline bool SiliconDocParserInfo::has_slug() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SiliconDocParserInfo::set_has_slug() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SiliconDocParserInfo::clear_has_slug() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SiliconDocParserInfo::clear_slug() {
  slug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_slug();
}
inline const ::std::string& SiliconDocParserInfo::slug() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug)
  return slug_.GetNoArena();
}
inline void SiliconDocParserInfo::set_slug(const ::std::string& value) {
  set_has_slug();
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug)
}
#if LANG_CXX11
inline void SiliconDocParserInfo::set_slug(::std::string&& value) {
  set_has_slug();
  slug_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug)
}
#endif
inline void SiliconDocParserInfo::set_slug(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_slug();
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug)
}
inline void SiliconDocParserInfo::set_slug(const char* value, size_t size) {
  set_has_slug();
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug)
}
inline ::std::string* SiliconDocParserInfo::mutable_slug() {
  set_has_slug();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug)
  return slug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconDocParserInfo::release_slug() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug)
  clear_has_slug();
  return slug_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconDocParserInfo::set_allocated_slug(::std::string* slug) {
  if (slug != NULL) {
    set_has_slug();
  } else {
    clear_has_slug();
  }
  slug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slug);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.slug)
}

// optional string media_rating = 22;
inline bool SiliconDocParserInfo::has_media_rating() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SiliconDocParserInfo::set_has_media_rating() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SiliconDocParserInfo::clear_has_media_rating() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SiliconDocParserInfo::clear_media_rating() {
  media_rating_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_media_rating();
}
inline const ::std::string& SiliconDocParserInfo::media_rating() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating)
  return media_rating_.GetNoArena();
}
inline void SiliconDocParserInfo::set_media_rating(const ::std::string& value) {
  set_has_media_rating();
  media_rating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating)
}
#if LANG_CXX11
inline void SiliconDocParserInfo::set_media_rating(::std::string&& value) {
  set_has_media_rating();
  media_rating_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating)
}
#endif
inline void SiliconDocParserInfo::set_media_rating(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_media_rating();
  media_rating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating)
}
inline void SiliconDocParserInfo::set_media_rating(const char* value, size_t size) {
  set_has_media_rating();
  media_rating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating)
}
inline ::std::string* SiliconDocParserInfo::mutable_media_rating() {
  set_has_media_rating();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating)
  return media_rating_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconDocParserInfo::release_media_rating() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating)
  clear_has_media_rating();
  return media_rating_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconDocParserInfo::set_allocated_media_rating(::std::string* media_rating) {
  if (media_rating != NULL) {
    set_has_media_rating();
  } else {
    clear_has_media_rating();
  }
  media_rating_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_rating);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.media_rating)
}

// optional int64 ttl = 23;
inline bool SiliconDocParserInfo::has_ttl() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SiliconDocParserInfo::set_has_ttl() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SiliconDocParserInfo::clear_has_ttl() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SiliconDocParserInfo::clear_ttl() {
  ttl_ = GOOGLE_LONGLONG(0);
  clear_has_ttl();
}
inline ::google::protobuf::int64 SiliconDocParserInfo::ttl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.ttl)
  return ttl_;
}
inline void SiliconDocParserInfo::set_ttl(::google::protobuf::int64 value) {
  set_has_ttl();
  ttl_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.ttl)
}

// repeated string categories = 24;
inline int SiliconDocParserInfo::categories_size() const {
  return categories_.size();
}
inline void SiliconDocParserInfo::clear_categories() {
  categories_.Clear();
}
inline const ::std::string& SiliconDocParserInfo::categories(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
  return categories_.Get(index);
}
inline ::std::string* SiliconDocParserInfo::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
  return categories_.Mutable(index);
}
inline void SiliconDocParserInfo::set_categories(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
  categories_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SiliconDocParserInfo::set_categories(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
  categories_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SiliconDocParserInfo::set_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
}
inline void SiliconDocParserInfo::set_categories(int index, const char* value, size_t size) {
  categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
}
inline ::std::string* SiliconDocParserInfo::add_categories() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
  return categories_.Add();
}
inline void SiliconDocParserInfo::add_categories(const ::std::string& value) {
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
}
#if LANG_CXX11
inline void SiliconDocParserInfo::add_categories(::std::string&& value) {
  categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
}
#endif
inline void SiliconDocParserInfo::add_categories(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
}
inline void SiliconDocParserInfo::add_categories(const char* value, size_t size) {
  categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SiliconDocParserInfo::categories() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
  return categories_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SiliconDocParserInfo::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfo.categories)
  return &categories_;
}

// optional int64 layer_symbol_count = 25;
inline bool SiliconDocParserInfo::has_layer_symbol_count() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SiliconDocParserInfo::set_has_layer_symbol_count() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SiliconDocParserInfo::clear_has_layer_symbol_count() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SiliconDocParserInfo::clear_layer_symbol_count() {
  layer_symbol_count_ = GOOGLE_LONGLONG(0);
  clear_has_layer_symbol_count();
}
inline ::google::protobuf::int64 SiliconDocParserInfo::layer_symbol_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_symbol_count)
  return layer_symbol_count_;
}
inline void SiliconDocParserInfo::set_layer_symbol_count(::google::protobuf::int64 value) {
  set_has_layer_symbol_count();
  layer_symbol_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.layer_symbol_count)
}

// optional string pharma_product = 26;
inline bool SiliconDocParserInfo::has_pharma_product() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SiliconDocParserInfo::set_has_pharma_product() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SiliconDocParserInfo::clear_has_pharma_product() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SiliconDocParserInfo::clear_pharma_product() {
  pharma_product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pharma_product();
}
inline const ::std::string& SiliconDocParserInfo::pharma_product() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product)
  return pharma_product_.GetNoArena();
}
inline void SiliconDocParserInfo::set_pharma_product(const ::std::string& value) {
  set_has_pharma_product();
  pharma_product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product)
}
#if LANG_CXX11
inline void SiliconDocParserInfo::set_pharma_product(::std::string&& value) {
  set_has_pharma_product();
  pharma_product_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product)
}
#endif
inline void SiliconDocParserInfo::set_pharma_product(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pharma_product();
  pharma_product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product)
}
inline void SiliconDocParserInfo::set_pharma_product(const char* value, size_t size) {
  set_has_pharma_product();
  pharma_product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product)
}
inline ::std::string* SiliconDocParserInfo::mutable_pharma_product() {
  set_has_pharma_product();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product)
  return pharma_product_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconDocParserInfo::release_pharma_product() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product)
  clear_has_pharma_product();
  return pharma_product_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconDocParserInfo::set_allocated_pharma_product(::std::string* pharma_product) {
  if (pharma_product != NULL) {
    set_has_pharma_product();
  } else {
    clear_has_pharma_product();
  }
  pharma_product_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pharma_product);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfo.pharma_product)
}

// optional bool has_relap_test = 27;
inline bool SiliconDocParserInfo::has_has_relap_test() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SiliconDocParserInfo::set_has_has_relap_test() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SiliconDocParserInfo::clear_has_has_relap_test() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SiliconDocParserInfo::clear_has_relap_test() {
  has_relap_test_ = false;
  clear_has_has_relap_test();
}
inline bool SiliconDocParserInfo::has_relap_test() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.has_relap_test)
  return has_relap_test_;
}
inline void SiliconDocParserInfo::set_has_relap_test(bool value) {
  set_has_has_relap_test();
  has_relap_test_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.has_relap_test)
}

// repeated int32 doc_region_ids = 28;
inline int SiliconDocParserInfo::doc_region_ids_size() const {
  return doc_region_ids_.size();
}
inline void SiliconDocParserInfo::clear_doc_region_ids() {
  doc_region_ids_.Clear();
}
inline ::google::protobuf::int32 SiliconDocParserInfo::doc_region_ids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfo.doc_region_ids)
  return doc_region_ids_.Get(index);
}
inline void SiliconDocParserInfo::set_doc_region_ids(int index, ::google::protobuf::int32 value) {
  doc_region_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocParserInfo.doc_region_ids)
}
inline void SiliconDocParserInfo::add_doc_region_ids(::google::protobuf::int32 value) {
  doc_region_ids_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfo.doc_region_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SiliconDocParserInfo::doc_region_ids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfo.doc_region_ids)
  return doc_region_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SiliconDocParserInfo::mutable_doc_region_ids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfo.doc_region_ids)
  return &doc_region_ids_;
}

// -------------------------------------------------------------------

// PulseVideos

// required .ru.mail.go.webbase.blobs.PulseVideo mainVideo = 1;
inline bool PulseVideos::has_mainvideo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PulseVideos::set_has_mainvideo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PulseVideos::clear_has_mainvideo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PulseVideos::clear_mainvideo() {
  if (mainvideo_ != NULL) mainvideo_->::ru::mail::go::webbase::blobs::PulseVideo::Clear();
  clear_has_mainvideo();
}
inline const ::ru::mail::go::webbase::blobs::PulseVideo& PulseVideos::mainvideo() const {
  const ::ru::mail::go::webbase::blobs::PulseVideo* p = mainvideo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PulseVideos.mainVideo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::PulseVideo*>(
      &::ru::mail::go::webbase::blobs::_PulseVideo_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::PulseVideo* PulseVideos::mutable_mainvideo() {
  set_has_mainvideo();
  if (mainvideo_ == NULL) {
    mainvideo_ = new ::ru::mail::go::webbase::blobs::PulseVideo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PulseVideos.mainVideo)
  return mainvideo_;
}
inline ::ru::mail::go::webbase::blobs::PulseVideo* PulseVideos::release_mainvideo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PulseVideos.mainVideo)
  clear_has_mainvideo();
  ::ru::mail::go::webbase::blobs::PulseVideo* temp = mainvideo_;
  mainvideo_ = NULL;
  return temp;
}
inline void PulseVideos::set_allocated_mainvideo(::ru::mail::go::webbase::blobs::PulseVideo* mainvideo) {
  delete mainvideo_;
  mainvideo_ = mainvideo;
  if (mainvideo) {
    set_has_mainvideo();
  } else {
    clear_has_mainvideo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PulseVideos.mainVideo)
}

// -------------------------------------------------------------------

// PulseVideo

// required string video_url = 1;
inline bool PulseVideo::has_video_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PulseVideo::set_has_video_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PulseVideo::clear_has_video_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PulseVideo::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_url();
}
inline const ::std::string& PulseVideo::video_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PulseVideo.video_url)
  return video_url_.GetNoArena();
}
inline void PulseVideo::set_video_url(const ::std::string& value) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PulseVideo.video_url)
}
#if LANG_CXX11
inline void PulseVideo::set_video_url(::std::string&& value) {
  set_has_video_url();
  video_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.PulseVideo.video_url)
}
#endif
inline void PulseVideo::set_video_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.PulseVideo.video_url)
}
inline void PulseVideo::set_video_url(const char* value, size_t size) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.PulseVideo.video_url)
}
inline ::std::string* PulseVideo::mutable_video_url() {
  set_has_video_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PulseVideo.video_url)
  return video_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PulseVideo::release_video_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PulseVideo.video_url)
  clear_has_video_url();
  return video_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PulseVideo::set_allocated_video_url(::std::string* video_url) {
  if (video_url != NULL) {
    set_has_video_url();
  } else {
    clear_has_video_url();
  }
  video_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PulseVideo.video_url)
}

// optional int32 duration = 2;
inline bool PulseVideo::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PulseVideo::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PulseVideo::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PulseVideo::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 PulseVideo::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PulseVideo.duration)
  return duration_;
}
inline void PulseVideo::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PulseVideo.duration)
}

// -------------------------------------------------------------------

// SiliconeAuthor

// optional string name = 1;
inline bool SiliconeAuthor::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconeAuthor::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconeAuthor::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconeAuthor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SiliconeAuthor::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeAuthor.name)
  return name_.GetNoArena();
}
inline void SiliconeAuthor::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeAuthor.name)
}
#if LANG_CXX11
inline void SiliconeAuthor::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeAuthor.name)
}
#endif
inline void SiliconeAuthor::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeAuthor.name)
}
inline void SiliconeAuthor::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeAuthor.name)
}
inline ::std::string* SiliconeAuthor::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeAuthor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeAuthor::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeAuthor.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeAuthor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeAuthor.name)
}

// optional string url = 2;
inline bool SiliconeAuthor::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiliconeAuthor::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiliconeAuthor::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiliconeAuthor::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& SiliconeAuthor::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeAuthor.url)
  return url_.GetNoArena();
}
inline void SiliconeAuthor::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeAuthor.url)
}
#if LANG_CXX11
inline void SiliconeAuthor::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeAuthor.url)
}
#endif
inline void SiliconeAuthor::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeAuthor.url)
}
inline void SiliconeAuthor::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeAuthor.url)
}
inline ::std::string* SiliconeAuthor::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeAuthor.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeAuthor::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeAuthor.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeAuthor::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeAuthor.url)
}

// -------------------------------------------------------------------

// SiliconeCategory

// optional string category = 1;
inline bool SiliconeCategory::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconeCategory::set_has_category() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconeCategory::clear_has_category() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconeCategory::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
inline const ::std::string& SiliconeCategory::category() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeCategory.category)
  return category_.GetNoArena();
}
inline void SiliconeCategory::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeCategory.category)
}
#if LANG_CXX11
inline void SiliconeCategory::set_category(::std::string&& value) {
  set_has_category();
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeCategory.category)
}
#endif
inline void SiliconeCategory::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeCategory.category)
}
inline void SiliconeCategory::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeCategory.category)
}
inline ::std::string* SiliconeCategory::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeCategory.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeCategory::release_category() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeCategory.category)
  clear_has_category();
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeCategory::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeCategory.category)
}

// optional string sub_category = 2;
inline bool SiliconeCategory::has_sub_category() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiliconeCategory::set_has_sub_category() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiliconeCategory::clear_has_sub_category() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiliconeCategory::clear_sub_category() {
  sub_category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sub_category();
}
inline const ::std::string& SiliconeCategory::sub_category() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeCategory.sub_category)
  return sub_category_.GetNoArena();
}
inline void SiliconeCategory::set_sub_category(const ::std::string& value) {
  set_has_sub_category();
  sub_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeCategory.sub_category)
}
#if LANG_CXX11
inline void SiliconeCategory::set_sub_category(::std::string&& value) {
  set_has_sub_category();
  sub_category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeCategory.sub_category)
}
#endif
inline void SiliconeCategory::set_sub_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sub_category();
  sub_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeCategory.sub_category)
}
inline void SiliconeCategory::set_sub_category(const char* value, size_t size) {
  set_has_sub_category();
  sub_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeCategory.sub_category)
}
inline ::std::string* SiliconeCategory::mutable_sub_category() {
  set_has_sub_category();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeCategory.sub_category)
  return sub_category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeCategory::release_sub_category() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeCategory.sub_category)
  clear_has_sub_category();
  return sub_category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeCategory::set_allocated_sub_category(::std::string* sub_category) {
  if (sub_category != NULL) {
    set_has_sub_category();
  } else {
    clear_has_sub_category();
  }
  sub_category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sub_category);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeCategory.sub_category)
}

// -------------------------------------------------------------------

// SiliconeDocState

// optional bool disabled = 1;
inline bool SiliconeDocState::has_disabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconeDocState::set_has_disabled() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconeDocState::clear_has_disabled() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconeDocState::clear_disabled() {
  disabled_ = false;
  clear_has_disabled();
}
inline bool SiliconeDocState::disabled() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeDocState.disabled)
  return disabled_;
}
inline void SiliconeDocState::set_disabled(bool value) {
  set_has_disabled();
  disabled_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeDocState.disabled)
}

// -------------------------------------------------------------------

// SiliconeParsedBody

// repeated .ru.mail.go.webbase.blobs.SiliconeBodyPart bodyPart = 1;
inline int SiliconeParsedBody::bodypart_size() const {
  return bodypart_.size();
}
inline void SiliconeParsedBody::clear_bodypart() {
  bodypart_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::SiliconeBodyPart& SiliconeParsedBody::bodypart(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeParsedBody.bodyPart)
  return bodypart_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconeBodyPart* SiliconeParsedBody::mutable_bodypart(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeParsedBody.bodyPart)
  return bodypart_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconeBodyPart* SiliconeParsedBody::add_bodypart() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconeParsedBody.bodyPart)
  return bodypart_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeBodyPart >*
SiliconeParsedBody::mutable_bodypart() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconeParsedBody.bodyPart)
  return &bodypart_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeBodyPart >&
SiliconeParsedBody::bodypart() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconeParsedBody.bodyPart)
  return bodypart_;
}

// -------------------------------------------------------------------

// SiliconeBodyPart

// required .ru.mail.go.webbase.blobs.SiliconeBodyPart.PartName name = 1;
inline bool SiliconeBodyPart::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SiliconeBodyPart::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SiliconeBodyPart::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SiliconeBodyPart::clear_name() {
  name_ = 0;
  clear_has_name();
}
inline ::ru::mail::go::webbase::blobs::SiliconeBodyPart_PartName SiliconeBodyPart::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeBodyPart.name)
  return static_cast< ::ru::mail::go::webbase::blobs::SiliconeBodyPart_PartName >(name_);
}
inline void SiliconeBodyPart::set_name(::ru::mail::go::webbase::blobs::SiliconeBodyPart_PartName value) {
  assert(::ru::mail::go::webbase::blobs::SiliconeBodyPart_PartName_IsValid(value));
  set_has_name();
  name_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeBodyPart.name)
}

// optional string textHtml = 2;
inline bool SiliconeBodyPart::has_texthtml() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconeBodyPart::set_has_texthtml() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconeBodyPart::clear_has_texthtml() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconeBodyPart::clear_texthtml() {
  texthtml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_texthtml();
}
inline const ::std::string& SiliconeBodyPart::texthtml() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml)
  return texthtml_.GetNoArena();
}
inline void SiliconeBodyPart::set_texthtml(const ::std::string& value) {
  set_has_texthtml();
  texthtml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml)
}
#if LANG_CXX11
inline void SiliconeBodyPart::set_texthtml(::std::string&& value) {
  set_has_texthtml();
  texthtml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml)
}
#endif
inline void SiliconeBodyPart::set_texthtml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_texthtml();
  texthtml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml)
}
inline void SiliconeBodyPart::set_texthtml(const char* value, size_t size) {
  set_has_texthtml();
  texthtml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml)
}
inline ::std::string* SiliconeBodyPart::mutable_texthtml() {
  set_has_texthtml();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml)
  return texthtml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeBodyPart::release_texthtml() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml)
  clear_has_texthtml();
  return texthtml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeBodyPart::set_allocated_texthtml(::std::string* texthtml) {
  if (texthtml != NULL) {
    set_has_texthtml();
  } else {
    clear_has_texthtml();
  }
  texthtml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), texthtml);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeBodyPart.textHtml)
}

// optional bool containsCode = 3;
inline bool SiliconeBodyPart::has_containscode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SiliconeBodyPart::set_has_containscode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SiliconeBodyPart::clear_has_containscode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SiliconeBodyPart::clear_containscode() {
  containscode_ = false;
  clear_has_containscode();
}
inline bool SiliconeBodyPart::containscode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeBodyPart.containsCode)
  return containscode_;
}
inline void SiliconeBodyPart::set_containscode(bool value) {
  set_has_containscode();
  containscode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeBodyPart.containsCode)
}

// optional .ru.mail.go.webbase.blobs.SiliconImage image = 4;
inline bool SiliconeBodyPart::has_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SiliconeBodyPart::set_has_image() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SiliconeBodyPart::clear_has_image() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SiliconeBodyPart::clear_image() {
  if (image_ != NULL) image_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
  clear_has_image();
}
inline const ::ru::mail::go::webbase::blobs::SiliconImage& SiliconeBodyPart::image() const {
  const ::ru::mail::go::webbase::blobs::SiliconImage* p = image_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeBodyPart.image)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconImage*>(
      &::ru::mail::go::webbase::blobs::_SiliconImage_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconImage* SiliconeBodyPart::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::ru::mail::go::webbase::blobs::SiliconImage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeBodyPart.image)
  return image_;
}
inline ::ru::mail::go::webbase::blobs::SiliconImage* SiliconeBodyPart::release_image() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeBodyPart.image)
  clear_has_image();
  ::ru::mail::go::webbase::blobs::SiliconImage* temp = image_;
  image_ = NULL;
  return temp;
}
inline void SiliconeBodyPart::set_allocated_image(::ru::mail::go::webbase::blobs::SiliconImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeBodyPart.image)
}

// optional string imageHref = 5;
inline bool SiliconeBodyPart::has_imagehref() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiliconeBodyPart::set_has_imagehref() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiliconeBodyPart::clear_has_imagehref() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiliconeBodyPart::clear_imagehref() {
  imagehref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imagehref();
}
inline const ::std::string& SiliconeBodyPart::imagehref() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref)
  return imagehref_.GetNoArena();
}
inline void SiliconeBodyPart::set_imagehref(const ::std::string& value) {
  set_has_imagehref();
  imagehref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref)
}
#if LANG_CXX11
inline void SiliconeBodyPart::set_imagehref(::std::string&& value) {
  set_has_imagehref();
  imagehref_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref)
}
#endif
inline void SiliconeBodyPart::set_imagehref(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imagehref();
  imagehref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref)
}
inline void SiliconeBodyPart::set_imagehref(const char* value, size_t size) {
  set_has_imagehref();
  imagehref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref)
}
inline ::std::string* SiliconeBodyPart::mutable_imagehref() {
  set_has_imagehref();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref)
  return imagehref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeBodyPart::release_imagehref() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref)
  clear_has_imagehref();
  return imagehref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeBodyPart::set_allocated_imagehref(::std::string* imagehref) {
  if (imagehref != NULL) {
    set_has_imagehref();
  } else {
    clear_has_imagehref();
  }
  imagehref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagehref);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageHref)
}

// optional .ru.mail.go.webbase.blobs.ImageType imageType = 6;
inline bool SiliconeBodyPart::has_imagetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SiliconeBodyPart::set_has_imagetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SiliconeBodyPart::clear_has_imagetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SiliconeBodyPart::clear_imagetype() {
  imagetype_ = 0;
  clear_has_imagetype();
}
inline ::ru::mail::go::webbase::blobs::ImageType SiliconeBodyPart::imagetype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageType)
  return static_cast< ::ru::mail::go::webbase::blobs::ImageType >(imagetype_);
}
inline void SiliconeBodyPart::set_imagetype(::ru::mail::go::webbase::blobs::ImageType value) {
  assert(::ru::mail::go::webbase::blobs::ImageType_IsValid(value));
  set_has_imagetype();
  imagetype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeBodyPart.imageType)
}

// optional string objectId = 7;
inline bool SiliconeBodyPart::has_objectid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SiliconeBodyPart::set_has_objectid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SiliconeBodyPart::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SiliconeBodyPart::clear_objectid() {
  objectid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_objectid();
}
inline const ::std::string& SiliconeBodyPart::objectid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId)
  return objectid_.GetNoArena();
}
inline void SiliconeBodyPart::set_objectid(const ::std::string& value) {
  set_has_objectid();
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId)
}
#if LANG_CXX11
inline void SiliconeBodyPart::set_objectid(::std::string&& value) {
  set_has_objectid();
  objectid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId)
}
#endif
inline void SiliconeBodyPart::set_objectid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_objectid();
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId)
}
inline void SiliconeBodyPart::set_objectid(const char* value, size_t size) {
  set_has_objectid();
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId)
}
inline ::std::string* SiliconeBodyPart::mutable_objectid() {
  set_has_objectid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId)
  return objectid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeBodyPart::release_objectid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId)
  clear_has_objectid();
  return objectid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeBodyPart::set_allocated_objectid(::std::string* objectid) {
  if (objectid != NULL) {
    set_has_objectid();
  } else {
    clear_has_objectid();
  }
  objectid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objectid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeBodyPart.objectId)
}

// repeated string list = 8;
inline int SiliconeBodyPart::list_size() const {
  return list_.size();
}
inline void SiliconeBodyPart::clear_list() {
  list_.Clear();
}
inline const ::std::string& SiliconeBodyPart::list(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
  return list_.Get(index);
}
inline ::std::string* SiliconeBodyPart::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
  return list_.Mutable(index);
}
inline void SiliconeBodyPart::set_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
  list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SiliconeBodyPart::set_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
  list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SiliconeBodyPart::set_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
}
inline void SiliconeBodyPart::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
}
inline ::std::string* SiliconeBodyPart::add_list() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
  return list_.Add();
}
inline void SiliconeBodyPart::add_list(const ::std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
}
#if LANG_CXX11
inline void SiliconeBodyPart::add_list(::std::string&& value) {
  list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
}
#endif
inline void SiliconeBodyPart::add_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
}
inline void SiliconeBodyPart::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SiliconeBodyPart::list() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SiliconeBodyPart::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconeBodyPart.list)
  return &list_;
}

// -------------------------------------------------------------------

// Gallery

// required string name = 1;
inline bool Gallery::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gallery::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gallery::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gallery::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Gallery::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Gallery.name)
  return name_.GetNoArena();
}
inline void Gallery::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Gallery.name)
}
#if LANG_CXX11
inline void Gallery::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Gallery.name)
}
#endif
inline void Gallery::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Gallery.name)
}
inline void Gallery::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Gallery.name)
}
inline ::std::string* Gallery::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Gallery.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Gallery::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Gallery.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Gallery::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Gallery.name)
}

// repeated .ru.mail.go.webbase.blobs.GalleryImage images = 2;
inline int Gallery::images_size() const {
  return images_.size();
}
inline void Gallery::clear_images() {
  images_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::GalleryImage& Gallery::images(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Gallery.images)
  return images_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::GalleryImage* Gallery::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Gallery.images)
  return images_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::GalleryImage* Gallery::add_images() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.Gallery.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::GalleryImage >*
Gallery::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.Gallery.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::GalleryImage >&
Gallery::images() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.Gallery.images)
  return images_;
}

// -------------------------------------------------------------------

// GalleryImage

// required .ru.mail.go.webbase.blobs.SiliconImage image = 1;
inline bool GalleryImage::has_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GalleryImage::set_has_image() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GalleryImage::clear_has_image() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GalleryImage::clear_image() {
  if (image_ != NULL) image_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
  clear_has_image();
}
inline const ::ru::mail::go::webbase::blobs::SiliconImage& GalleryImage::image() const {
  const ::ru::mail::go::webbase::blobs::SiliconImage* p = image_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.GalleryImage.image)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconImage*>(
      &::ru::mail::go::webbase::blobs::_SiliconImage_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconImage* GalleryImage::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::ru::mail::go::webbase::blobs::SiliconImage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.GalleryImage.image)
  return image_;
}
inline ::ru::mail::go::webbase::blobs::SiliconImage* GalleryImage::release_image() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.GalleryImage.image)
  clear_has_image();
  ::ru::mail::go::webbase::blobs::SiliconImage* temp = image_;
  image_ = NULL;
  return temp;
}
inline void GalleryImage::set_allocated_image(::ru::mail::go::webbase::blobs::SiliconImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.GalleryImage.image)
}

// required string placeHolderUrl = 2;
inline bool GalleryImage::has_placeholderurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GalleryImage::set_has_placeholderurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GalleryImage::clear_has_placeholderurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GalleryImage::clear_placeholderurl() {
  placeholderurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_placeholderurl();
}
inline const ::std::string& GalleryImage::placeholderurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl)
  return placeholderurl_.GetNoArena();
}
inline void GalleryImage::set_placeholderurl(const ::std::string& value) {
  set_has_placeholderurl();
  placeholderurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl)
}
#if LANG_CXX11
inline void GalleryImage::set_placeholderurl(::std::string&& value) {
  set_has_placeholderurl();
  placeholderurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl)
}
#endif
inline void GalleryImage::set_placeholderurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_placeholderurl();
  placeholderurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl)
}
inline void GalleryImage::set_placeholderurl(const char* value, size_t size) {
  set_has_placeholderurl();
  placeholderurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl)
}
inline ::std::string* GalleryImage::mutable_placeholderurl() {
  set_has_placeholderurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl)
  return placeholderurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GalleryImage::release_placeholderurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl)
  clear_has_placeholderurl();
  return placeholderurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GalleryImage::set_allocated_placeholderurl(::std::string* placeholderurl) {
  if (placeholderurl != NULL) {
    set_has_placeholderurl();
  } else {
    clear_has_placeholderurl();
  }
  placeholderurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), placeholderurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.GalleryImage.placeHolderUrl)
}

// optional string description = 3;
inline bool GalleryImage::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GalleryImage::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GalleryImage::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GalleryImage::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& GalleryImage::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.GalleryImage.description)
  return description_.GetNoArena();
}
inline void GalleryImage::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.GalleryImage.description)
}
#if LANG_CXX11
inline void GalleryImage::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.GalleryImage.description)
}
#endif
inline void GalleryImage::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.GalleryImage.description)
}
inline void GalleryImage::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.GalleryImage.description)
}
inline ::std::string* GalleryImage::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.GalleryImage.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GalleryImage::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.GalleryImage.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GalleryImage::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.GalleryImage.description)
}

// -------------------------------------------------------------------

// PostImages

// optional .ru.mail.go.webbase.blobs.SiliconImage mainImage = 1;
inline bool PostImages::has_mainimage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PostImages::set_has_mainimage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PostImages::clear_has_mainimage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PostImages::clear_mainimage() {
  if (mainimage_ != NULL) mainimage_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
  clear_has_mainimage();
}
inline const ::ru::mail::go::webbase::blobs::SiliconImage& PostImages::mainimage() const {
  const ::ru::mail::go::webbase::blobs::SiliconImage* p = mainimage_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostImages.mainImage)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconImage*>(
      &::ru::mail::go::webbase::blobs::_SiliconImage_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconImage* PostImages::mutable_mainimage() {
  set_has_mainimage();
  if (mainimage_ == NULL) {
    mainimage_ = new ::ru::mail::go::webbase::blobs::SiliconImage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostImages.mainImage)
  return mainimage_;
}
inline ::ru::mail::go::webbase::blobs::SiliconImage* PostImages::release_mainimage() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PostImages.mainImage)
  clear_has_mainimage();
  ::ru::mail::go::webbase::blobs::SiliconImage* temp = mainimage_;
  mainimage_ = NULL;
  return temp;
}
inline void PostImages::set_allocated_mainimage(::ru::mail::go::webbase::blobs::SiliconImage* mainimage) {
  delete mainimage_;
  mainimage_ = mainimage;
  if (mainimage) {
    set_has_mainimage();
  } else {
    clear_has_mainimage();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PostImages.mainImage)
}

// repeated .ru.mail.go.webbase.blobs.SiliconImage images = 2;
inline int PostImages::images_size() const {
  return images_.size();
}
inline void PostImages::clear_images() {
  images_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::SiliconImage& PostImages::images(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostImages.images)
  return images_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconImage* PostImages::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostImages.images)
  return images_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconImage* PostImages::add_images() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostImages.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconImage >*
PostImages::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostImages.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconImage >&
PostImages::images() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostImages.images)
  return images_;
}

// optional .ru.mail.go.webbase.blobs.SiliconImage okImage = 3;
inline bool PostImages::has_okimage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PostImages::set_has_okimage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PostImages::clear_has_okimage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PostImages::clear_okimage() {
  if (okimage_ != NULL) okimage_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
  clear_has_okimage();
}
inline const ::ru::mail::go::webbase::blobs::SiliconImage& PostImages::okimage() const {
  const ::ru::mail::go::webbase::blobs::SiliconImage* p = okimage_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostImages.okImage)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconImage*>(
      &::ru::mail::go::webbase::blobs::_SiliconImage_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconImage* PostImages::mutable_okimage() {
  set_has_okimage();
  if (okimage_ == NULL) {
    okimage_ = new ::ru::mail::go::webbase::blobs::SiliconImage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostImages.okImage)
  return okimage_;
}
inline ::ru::mail::go::webbase::blobs::SiliconImage* PostImages::release_okimage() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PostImages.okImage)
  clear_has_okimage();
  ::ru::mail::go::webbase::blobs::SiliconImage* temp = okimage_;
  okimage_ = NULL;
  return temp;
}
inline void PostImages::set_allocated_okimage(::ru::mail::go::webbase::blobs::SiliconImage* okimage) {
  delete okimage_;
  okimage_ = okimage;
  if (okimage) {
    set_has_okimage();
  } else {
    clear_has_okimage();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PostImages.okImage)
}

// repeated .ru.mail.go.webbase.blobs.SiliconImage layerImages = 4;
inline int PostImages::layerimages_size() const {
  return layerimages_.size();
}
inline void PostImages::clear_layerimages() {
  layerimages_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::SiliconImage& PostImages::layerimages(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostImages.layerImages)
  return layerimages_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconImage* PostImages::mutable_layerimages(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostImages.layerImages)
  return layerimages_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconImage* PostImages::add_layerimages() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostImages.layerImages)
  return layerimages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconImage >*
PostImages::mutable_layerimages() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostImages.layerImages)
  return &layerimages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconImage >&
PostImages::layerimages() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostImages.layerImages)
  return layerimages_;
}

// -------------------------------------------------------------------

// SiliconImage

// required string originalUrl = 1;
inline bool SiliconImage::has_originalurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconImage::set_has_originalurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconImage::clear_has_originalurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconImage::clear_originalurl() {
  originalurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_originalurl();
}
inline const ::std::string& SiliconImage::originalurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.originalUrl)
  return originalurl_.GetNoArena();
}
inline void SiliconImage::set_originalurl(const ::std::string& value) {
  set_has_originalurl();
  originalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.originalUrl)
}
#if LANG_CXX11
inline void SiliconImage::set_originalurl(::std::string&& value) {
  set_has_originalurl();
  originalurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconImage.originalUrl)
}
#endif
inline void SiliconImage::set_originalurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_originalurl();
  originalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconImage.originalUrl)
}
inline void SiliconImage::set_originalurl(const char* value, size_t size) {
  set_has_originalurl();
  originalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconImage.originalUrl)
}
inline ::std::string* SiliconImage::mutable_originalurl() {
  set_has_originalurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.originalUrl)
  return originalurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconImage::release_originalurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconImage.originalUrl)
  clear_has_originalurl();
  return originalurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconImage::set_allocated_originalurl(::std::string* originalurl) {
  if (originalurl != NULL) {
    set_has_originalurl();
  } else {
    clear_has_originalurl();
  }
  originalurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), originalurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconImage.originalUrl)
}

// optional string previewUrl = 2;
inline bool SiliconImage::has_previewurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiliconImage::set_has_previewurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiliconImage::clear_has_previewurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiliconImage::clear_previewurl() {
  previewurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_previewurl();
}
inline const ::std::string& SiliconImage::previewurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.previewUrl)
  return previewurl_.GetNoArena();
}
inline void SiliconImage::set_previewurl(const ::std::string& value) {
  set_has_previewurl();
  previewurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.previewUrl)
}
#if LANG_CXX11
inline void SiliconImage::set_previewurl(::std::string&& value) {
  set_has_previewurl();
  previewurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconImage.previewUrl)
}
#endif
inline void SiliconImage::set_previewurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_previewurl();
  previewurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconImage.previewUrl)
}
inline void SiliconImage::set_previewurl(const char* value, size_t size) {
  set_has_previewurl();
  previewurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconImage.previewUrl)
}
inline ::std::string* SiliconImage::mutable_previewurl() {
  set_has_previewurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.previewUrl)
  return previewurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconImage::release_previewurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconImage.previewUrl)
  clear_has_previewurl();
  return previewurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconImage::set_allocated_previewurl(::std::string* previewurl) {
  if (previewurl != NULL) {
    set_has_previewurl();
  } else {
    clear_has_previewurl();
  }
  previewurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previewurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconImage.previewUrl)
}

// optional uint64 simHash = 3;
inline bool SiliconImage::has_simhash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SiliconImage::set_has_simhash() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SiliconImage::clear_has_simhash() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SiliconImage::clear_simhash() {
  simhash_ = GOOGLE_ULONGLONG(0);
  clear_has_simhash();
}
inline ::google::protobuf::uint64 SiliconImage::simhash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.simHash)
  return simhash_;
}
inline void SiliconImage::set_simhash(::google::protobuf::uint64 value) {
  set_has_simhash();
  simhash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.simHash)
}

// optional uint32 width = 4;
inline bool SiliconImage::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SiliconImage::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SiliconImage::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SiliconImage::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 SiliconImage::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.width)
  return width_;
}
inline void SiliconImage::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.width)
}

// optional uint32 height = 5;
inline bool SiliconImage::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SiliconImage::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SiliconImage::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SiliconImage::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 SiliconImage::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.height)
  return height_;
}
inline void SiliconImage::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.height)
}

// optional .ru.mail.go.webbase.parsing.img.Thumb imageContent = 6;
inline bool SiliconImage::has_imagecontent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SiliconImage::set_has_imagecontent() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SiliconImage::clear_has_imagecontent() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SiliconImage::clear_imagecontent() {
  if (imagecontent_ != NULL) imagecontent_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
  clear_has_imagecontent();
}
inline const ::ru::mail::go::webbase::parsing::img::Thumb& SiliconImage::imagecontent() const {
  const ::ru::mail::go::webbase::parsing::img::Thumb* p = imagecontent_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.imageContent)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::Thumb*>(
      &::ru::mail::go::webbase::parsing::img::_Thumb_default_instance_);
}
inline ::ru::mail::go::webbase::parsing::img::Thumb* SiliconImage::mutable_imagecontent() {
  set_has_imagecontent();
  if (imagecontent_ == NULL) {
    imagecontent_ = new ::ru::mail::go::webbase::parsing::img::Thumb;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.imageContent)
  return imagecontent_;
}
inline ::ru::mail::go::webbase::parsing::img::Thumb* SiliconImage::release_imagecontent() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconImage.imageContent)
  clear_has_imagecontent();
  ::ru::mail::go::webbase::parsing::img::Thumb* temp = imagecontent_;
  imagecontent_ = NULL;
  return temp;
}
inline void SiliconImage::set_allocated_imagecontent(::ru::mail::go::webbase::parsing::img::Thumb* imagecontent) {
  delete imagecontent_;
  imagecontent_ = imagecontent;
  if (imagecontent) {
    set_has_imagecontent();
  } else {
    clear_has_imagecontent();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconImage.imageContent)
}

// repeated .ru.mail.go.webbase.blobs.SiliconeImagePostID postID = 7;
inline int SiliconImage::postid_size() const {
  return postid_.size();
}
inline void SiliconImage::clear_postid() {
  postid_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::SiliconeImagePostID& SiliconImage::postid(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.postID)
  return postid_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconeImagePostID* SiliconImage::mutable_postid(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.postID)
  return postid_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconeImagePostID* SiliconImage::add_postid() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconImage.postID)
  return postid_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeImagePostID >*
SiliconImage::mutable_postid() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconImage.postID)
  return &postid_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeImagePostID >&
SiliconImage::postid() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconImage.postID)
  return postid_;
}

// optional string microbase = 8;
inline bool SiliconImage::has_microbase() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SiliconImage::set_has_microbase() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SiliconImage::clear_has_microbase() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SiliconImage::clear_microbase() {
  microbase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_microbase();
}
inline const ::std::string& SiliconImage::microbase() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.microbase)
  return microbase_.GetNoArena();
}
inline void SiliconImage::set_microbase(const ::std::string& value) {
  set_has_microbase();
  microbase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.microbase)
}
#if LANG_CXX11
inline void SiliconImage::set_microbase(::std::string&& value) {
  set_has_microbase();
  microbase_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconImage.microbase)
}
#endif
inline void SiliconImage::set_microbase(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_microbase();
  microbase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconImage.microbase)
}
inline void SiliconImage::set_microbase(const char* value, size_t size) {
  set_has_microbase();
  microbase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconImage.microbase)
}
inline ::std::string* SiliconImage::mutable_microbase() {
  set_has_microbase();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.microbase)
  return microbase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconImage::release_microbase() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconImage.microbase)
  clear_has_microbase();
  return microbase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconImage::set_allocated_microbase(::std::string* microbase) {
  if (microbase != NULL) {
    set_has_microbase();
  } else {
    clear_has_microbase();
  }
  microbase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), microbase);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconImage.microbase)
}

// optional string caption = 9;
inline bool SiliconImage::has_caption() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SiliconImage::set_has_caption() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SiliconImage::clear_has_caption() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SiliconImage::clear_caption() {
  caption_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caption();
}
inline const ::std::string& SiliconImage::caption() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.caption)
  return caption_.GetNoArena();
}
inline void SiliconImage::set_caption(const ::std::string& value) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.caption)
}
#if LANG_CXX11
inline void SiliconImage::set_caption(::std::string&& value) {
  set_has_caption();
  caption_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconImage.caption)
}
#endif
inline void SiliconImage::set_caption(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconImage.caption)
}
inline void SiliconImage::set_caption(const char* value, size_t size) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconImage.caption)
}
inline ::std::string* SiliconImage::mutable_caption() {
  set_has_caption();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.caption)
  return caption_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconImage::release_caption() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconImage.caption)
  clear_has_caption();
  return caption_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconImage::set_allocated_caption(::std::string* caption) {
  if (caption != NULL) {
    set_has_caption();
  } else {
    clear_has_caption();
  }
  caption_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caption);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconImage.caption)
}

// optional bool fetchFailed = 10;
inline bool SiliconImage::has_fetchfailed() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SiliconImage::set_has_fetchfailed() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SiliconImage::clear_has_fetchfailed() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SiliconImage::clear_fetchfailed() {
  fetchfailed_ = false;
  clear_has_fetchfailed();
}
inline bool SiliconImage::fetchfailed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.fetchFailed)
  return fetchfailed_;
}
inline void SiliconImage::set_fetchfailed(bool value) {
  set_has_fetchfailed();
  fetchfailed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.fetchFailed)
}

// optional .ru.mail.go.webbase.parsing.img.ImageFormat originalFormat = 11;
inline bool SiliconImage::has_originalformat() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SiliconImage::set_has_originalformat() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SiliconImage::clear_has_originalformat() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SiliconImage::clear_originalformat() {
  originalformat_ = 0;
  clear_has_originalformat();
}
inline ::ru::mail::go::webbase::parsing::img::ImageFormat SiliconImage::originalformat() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.originalFormat)
  return static_cast< ::ru::mail::go::webbase::parsing::img::ImageFormat >(originalformat_);
}
inline void SiliconImage::set_originalformat(::ru::mail::go::webbase::parsing::img::ImageFormat value) {
  assert(::ru::mail::go::webbase::parsing::img::ImageFormat_IsValid(value));
  set_has_originalformat();
  originalformat_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.originalFormat)
}

// optional uint64 okImageId = 12;
inline bool SiliconImage::has_okimageid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SiliconImage::set_has_okimageid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SiliconImage::clear_has_okimageid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SiliconImage::clear_okimageid() {
  okimageid_ = GOOGLE_ULONGLONG(0);
  clear_has_okimageid();
}
inline ::google::protobuf::uint64 SiliconImage::okimageid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.okImageId)
  return okimageid_;
}
inline void SiliconImage::set_okimageid(::google::protobuf::uint64 value) {
  set_has_okimageid();
  okimageid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.okImageId)
}

// optional string srchKey = 13;
inline bool SiliconImage::has_srchkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SiliconImage::set_has_srchkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SiliconImage::clear_has_srchkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SiliconImage::clear_srchkey() {
  srchkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_srchkey();
}
inline const ::std::string& SiliconImage::srchkey() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.srchKey)
  return srchkey_.GetNoArena();
}
inline void SiliconImage::set_srchkey(const ::std::string& value) {
  set_has_srchkey();
  srchkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.srchKey)
}
#if LANG_CXX11
inline void SiliconImage::set_srchkey(::std::string&& value) {
  set_has_srchkey();
  srchkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconImage.srchKey)
}
#endif
inline void SiliconImage::set_srchkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_srchkey();
  srchkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconImage.srchKey)
}
inline void SiliconImage::set_srchkey(const char* value, size_t size) {
  set_has_srchkey();
  srchkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconImage.srchKey)
}
inline ::std::string* SiliconImage::mutable_srchkey() {
  set_has_srchkey();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.srchKey)
  return srchkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconImage::release_srchkey() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconImage.srchKey)
  clear_has_srchkey();
  return srchkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconImage::set_allocated_srchkey(::std::string* srchkey) {
  if (srchkey != NULL) {
    set_has_srchkey();
  } else {
    clear_has_srchkey();
  }
  srchkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srchkey);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconImage.srchKey)
}

// optional bool supplied = 14;
inline bool SiliconImage::has_supplied() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SiliconImage::set_has_supplied() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SiliconImage::clear_has_supplied() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SiliconImage::clear_supplied() {
  supplied_ = false;
  clear_has_supplied();
}
inline bool SiliconImage::supplied() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.supplied)
  return supplied_;
}
inline void SiliconImage::set_supplied(bool value) {
  set_has_supplied();
  supplied_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.supplied)
}

// optional string img_url = 15;
inline bool SiliconImage::has_img_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SiliconImage::set_has_img_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SiliconImage::clear_has_img_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SiliconImage::clear_img_url() {
  img_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_img_url();
}
inline const ::std::string& SiliconImage::img_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.img_url)
  return img_url_.GetNoArena();
}
inline void SiliconImage::set_img_url(const ::std::string& value) {
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.img_url)
}
#if LANG_CXX11
inline void SiliconImage::set_img_url(::std::string&& value) {
  set_has_img_url();
  img_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconImage.img_url)
}
#endif
inline void SiliconImage::set_img_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconImage.img_url)
}
inline void SiliconImage::set_img_url(const char* value, size_t size) {
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconImage.img_url)
}
inline ::std::string* SiliconImage::mutable_img_url() {
  set_has_img_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.img_url)
  return img_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconImage::release_img_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconImage.img_url)
  clear_has_img_url();
  return img_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconImage::set_allocated_img_url(::std::string* img_url) {
  if (img_url != NULL) {
    set_has_img_url();
  } else {
    clear_has_img_url();
  }
  img_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconImage.img_url)
}

// repeated string tags = 16;
inline int SiliconImage::tags_size() const {
  return tags_.size();
}
inline void SiliconImage::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& SiliconImage::tags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.tags)
  return tags_.Get(index);
}
inline ::std::string* SiliconImage::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconImage.tags)
  return tags_.Mutable(index);
}
inline void SiliconImage::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SiliconImage::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SiliconImage::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconImage.tags)
}
inline void SiliconImage::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconImage.tags)
}
inline ::std::string* SiliconImage::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SiliconImage.tags)
  return tags_.Add();
}
inline void SiliconImage::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconImage.tags)
}
#if LANG_CXX11
inline void SiliconImage::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconImage.tags)
}
#endif
inline void SiliconImage::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SiliconImage.tags)
}
inline void SiliconImage::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SiliconImage.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SiliconImage::tags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconImage.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SiliconImage::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconImage.tags)
  return &tags_;
}

// optional bool saveFailed = 17;
inline bool SiliconImage::has_savefailed() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SiliconImage::set_has_savefailed() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SiliconImage::clear_has_savefailed() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SiliconImage::clear_savefailed() {
  savefailed_ = false;
  clear_has_savefailed();
}
inline bool SiliconImage::savefailed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconImage.saveFailed)
  return savefailed_;
}
inline void SiliconImage::set_savefailed(bool value) {
  set_has_savefailed();
  savefailed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconImage.saveFailed)
}

// -------------------------------------------------------------------

// SiliconeImagePostID

// required string postUrl = 1;
inline bool SiliconeImagePostID::has_posturl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconeImagePostID::set_has_posturl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconeImagePostID::clear_has_posturl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconeImagePostID::clear_posturl() {
  posturl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posturl();
}
inline const ::std::string& SiliconeImagePostID::posturl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl)
  return posturl_.GetNoArena();
}
inline void SiliconeImagePostID::set_posturl(const ::std::string& value) {
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl)
}
#if LANG_CXX11
inline void SiliconeImagePostID::set_posturl(::std::string&& value) {
  set_has_posturl();
  posturl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl)
}
#endif
inline void SiliconeImagePostID::set_posturl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl)
}
inline void SiliconeImagePostID::set_posturl(const char* value, size_t size) {
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl)
}
inline ::std::string* SiliconeImagePostID::mutable_posturl() {
  set_has_posturl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl)
  return posturl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeImagePostID::release_posturl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl)
  clear_has_posturl();
  return posturl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeImagePostID::set_allocated_posturl(::std::string* posturl) {
  if (posturl != NULL) {
    set_has_posturl();
  } else {
    clear_has_posturl();
  }
  posturl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posturl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeImagePostID.postUrl)
}

// required int32 ordinal = 2;
inline bool SiliconeImagePostID::has_ordinal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiliconeImagePostID::set_has_ordinal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiliconeImagePostID::clear_has_ordinal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiliconeImagePostID::clear_ordinal() {
  ordinal_ = 0;
  clear_has_ordinal();
}
inline ::google::protobuf::int32 SiliconeImagePostID::ordinal() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeImagePostID.ordinal)
  return ordinal_;
}
inline void SiliconeImagePostID::set_ordinal(::google::protobuf::int32 value) {
  set_has_ordinal();
  ordinal_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeImagePostID.ordinal)
}

// -------------------------------------------------------------------

// SiliconeImageGalleryRef

// required string postUrl = 1;
inline bool SiliconeImageGalleryRef::has_posturl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconeImageGalleryRef::set_has_posturl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconeImageGalleryRef::clear_has_posturl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconeImageGalleryRef::clear_posturl() {
  posturl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posturl();
}
inline const ::std::string& SiliconeImageGalleryRef::posturl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl)
  return posturl_.GetNoArena();
}
inline void SiliconeImageGalleryRef::set_posturl(const ::std::string& value) {
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl)
}
#if LANG_CXX11
inline void SiliconeImageGalleryRef::set_posturl(::std::string&& value) {
  set_has_posturl();
  posturl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl)
}
#endif
inline void SiliconeImageGalleryRef::set_posturl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl)
}
inline void SiliconeImageGalleryRef::set_posturl(const char* value, size_t size) {
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl)
}
inline ::std::string* SiliconeImageGalleryRef::mutable_posturl() {
  set_has_posturl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl)
  return posturl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeImageGalleryRef::release_posturl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl)
  clear_has_posturl();
  return posturl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeImageGalleryRef::set_allocated_posturl(::std::string* posturl) {
  if (posturl != NULL) {
    set_has_posturl();
  } else {
    clear_has_posturl();
  }
  posturl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posturl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.postUrl)
}

// required string galleryName = 2;
inline bool SiliconeImageGalleryRef::has_galleryname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiliconeImageGalleryRef::set_has_galleryname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiliconeImageGalleryRef::clear_has_galleryname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiliconeImageGalleryRef::clear_galleryname() {
  galleryname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_galleryname();
}
inline const ::std::string& SiliconeImageGalleryRef::galleryname() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName)
  return galleryname_.GetNoArena();
}
inline void SiliconeImageGalleryRef::set_galleryname(const ::std::string& value) {
  set_has_galleryname();
  galleryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName)
}
#if LANG_CXX11
inline void SiliconeImageGalleryRef::set_galleryname(::std::string&& value) {
  set_has_galleryname();
  galleryname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName)
}
#endif
inline void SiliconeImageGalleryRef::set_galleryname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_galleryname();
  galleryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName)
}
inline void SiliconeImageGalleryRef::set_galleryname(const char* value, size_t size) {
  set_has_galleryname();
  galleryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName)
}
inline ::std::string* SiliconeImageGalleryRef::mutable_galleryname() {
  set_has_galleryname();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName)
  return galleryname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeImageGalleryRef::release_galleryname() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName)
  clear_has_galleryname();
  return galleryname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeImageGalleryRef::set_allocated_galleryname(::std::string* galleryname) {
  if (galleryname != NULL) {
    set_has_galleryname();
  } else {
    clear_has_galleryname();
  }
  galleryname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), galleryname);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.galleryName)
}

// required int32 ordinal = 3;
inline bool SiliconeImageGalleryRef::has_ordinal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SiliconeImageGalleryRef::set_has_ordinal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SiliconeImageGalleryRef::clear_has_ordinal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SiliconeImageGalleryRef::clear_ordinal() {
  ordinal_ = 0;
  clear_has_ordinal();
}
inline ::google::protobuf::int32 SiliconeImageGalleryRef::ordinal() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.ordinal)
  return ordinal_;
}
inline void SiliconeImageGalleryRef::set_ordinal(::google::protobuf::int32 value) {
  set_has_ordinal();
  ordinal_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeImageGalleryRef.ordinal)
}

// -------------------------------------------------------------------

// SiliconDocTaggerInfo

// repeated string tag = 1;
inline int SiliconDocTaggerInfo::tag_size() const {
  return tag_.size();
}
inline void SiliconDocTaggerInfo::clear_tag() {
  tag_.Clear();
}
inline const ::std::string& SiliconDocTaggerInfo::tag(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
  return tag_.Get(index);
}
inline ::std::string* SiliconDocTaggerInfo::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
  return tag_.Mutable(index);
}
inline void SiliconDocTaggerInfo::set_tag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
  tag_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SiliconDocTaggerInfo::set_tag(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
  tag_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SiliconDocTaggerInfo::set_tag(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
}
inline void SiliconDocTaggerInfo::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
}
inline ::std::string* SiliconDocTaggerInfo::add_tag() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
  return tag_.Add();
}
inline void SiliconDocTaggerInfo::add_tag(const ::std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
}
#if LANG_CXX11
inline void SiliconDocTaggerInfo::add_tag(::std::string&& value) {
  tag_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
}
#endif
inline void SiliconDocTaggerInfo::add_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
}
inline void SiliconDocTaggerInfo::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SiliconDocTaggerInfo::tag() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
  return tag_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SiliconDocTaggerInfo::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocTaggerInfo.tag)
  return &tag_;
}

// -------------------------------------------------------------------

// SiliconDocTaggerHashInfo

// repeated int64 tagHashes = 1;
inline int SiliconDocTaggerHashInfo::taghashes_size() const {
  return taghashes_.size();
}
inline void SiliconDocTaggerHashInfo::clear_taghashes() {
  taghashes_.Clear();
}
inline ::google::protobuf::int64 SiliconDocTaggerHashInfo::taghashes(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo.tagHashes)
  return taghashes_.Get(index);
}
inline void SiliconDocTaggerHashInfo::set_taghashes(int index, ::google::protobuf::int64 value) {
  taghashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo.tagHashes)
}
inline void SiliconDocTaggerHashInfo::add_taghashes(::google::protobuf::int64 value) {
  taghashes_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo.tagHashes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SiliconDocTaggerHashInfo::taghashes() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo.tagHashes)
  return taghashes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SiliconDocTaggerHashInfo::mutable_taghashes() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocTaggerHashInfo.tagHashes)
  return &taghashes_;
}

// -------------------------------------------------------------------

// ScrollToClickInfo

// optional string target_url = 1;
inline bool ScrollToClickInfo::has_target_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScrollToClickInfo::set_has_target_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScrollToClickInfo::clear_has_target_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScrollToClickInfo::clear_target_url() {
  target_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_url();
}
inline const ::std::string& ScrollToClickInfo::target_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url)
  return target_url_.GetNoArena();
}
inline void ScrollToClickInfo::set_target_url(const ::std::string& value) {
  set_has_target_url();
  target_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url)
}
#if LANG_CXX11
inline void ScrollToClickInfo::set_target_url(::std::string&& value) {
  set_has_target_url();
  target_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url)
}
#endif
inline void ScrollToClickInfo::set_target_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target_url();
  target_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url)
}
inline void ScrollToClickInfo::set_target_url(const char* value, size_t size) {
  set_has_target_url();
  target_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url)
}
inline ::std::string* ScrollToClickInfo::mutable_target_url() {
  set_has_target_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url)
  return target_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScrollToClickInfo::release_target_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url)
  clear_has_target_url();
  return target_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScrollToClickInfo::set_allocated_target_url(::std::string* target_url) {
  if (target_url != NULL) {
    set_has_target_url();
  } else {
    clear_has_target_url();
  }
  target_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url)
}

// optional string target_url_title = 2;
inline bool ScrollToClickInfo::has_target_url_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScrollToClickInfo::set_has_target_url_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScrollToClickInfo::clear_has_target_url_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScrollToClickInfo::clear_target_url_title() {
  target_url_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_url_title();
}
inline const ::std::string& ScrollToClickInfo::target_url_title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title)
  return target_url_title_.GetNoArena();
}
inline void ScrollToClickInfo::set_target_url_title(const ::std::string& value) {
  set_has_target_url_title();
  target_url_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title)
}
#if LANG_CXX11
inline void ScrollToClickInfo::set_target_url_title(::std::string&& value) {
  set_has_target_url_title();
  target_url_title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title)
}
#endif
inline void ScrollToClickInfo::set_target_url_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target_url_title();
  target_url_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title)
}
inline void ScrollToClickInfo::set_target_url_title(const char* value, size_t size) {
  set_has_target_url_title();
  target_url_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title)
}
inline ::std::string* ScrollToClickInfo::mutable_target_url_title() {
  set_has_target_url_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title)
  return target_url_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScrollToClickInfo::release_target_url_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title)
  clear_has_target_url_title();
  return target_url_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScrollToClickInfo::set_allocated_target_url_title(::std::string* target_url_title) {
  if (target_url_title != NULL) {
    set_has_target_url_title();
  } else {
    clear_has_target_url_title();
  }
  target_url_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_url_title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_title)
}

// optional string target_url_description = 3;
inline bool ScrollToClickInfo::has_target_url_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScrollToClickInfo::set_has_target_url_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScrollToClickInfo::clear_has_target_url_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScrollToClickInfo::clear_target_url_description() {
  target_url_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_url_description();
}
inline const ::std::string& ScrollToClickInfo::target_url_description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description)
  return target_url_description_.GetNoArena();
}
inline void ScrollToClickInfo::set_target_url_description(const ::std::string& value) {
  set_has_target_url_description();
  target_url_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description)
}
#if LANG_CXX11
inline void ScrollToClickInfo::set_target_url_description(::std::string&& value) {
  set_has_target_url_description();
  target_url_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description)
}
#endif
inline void ScrollToClickInfo::set_target_url_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target_url_description();
  target_url_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description)
}
inline void ScrollToClickInfo::set_target_url_description(const char* value, size_t size) {
  set_has_target_url_description();
  target_url_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description)
}
inline ::std::string* ScrollToClickInfo::mutable_target_url_description() {
  set_has_target_url_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description)
  return target_url_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScrollToClickInfo::release_target_url_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description)
  clear_has_target_url_description();
  return target_url_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScrollToClickInfo::set_allocated_target_url_description(::std::string* target_url_description) {
  if (target_url_description != NULL) {
    set_has_target_url_description();
  } else {
    clear_has_target_url_description();
  }
  target_url_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_url_description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ScrollToClickInfo.target_url_description)
}

// optional string img_aerospike_url = 4;
inline bool ScrollToClickInfo::has_img_aerospike_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScrollToClickInfo::set_has_img_aerospike_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScrollToClickInfo::clear_has_img_aerospike_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScrollToClickInfo::clear_img_aerospike_url() {
  img_aerospike_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_img_aerospike_url();
}
inline const ::std::string& ScrollToClickInfo::img_aerospike_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url)
  return img_aerospike_url_.GetNoArena();
}
inline void ScrollToClickInfo::set_img_aerospike_url(const ::std::string& value) {
  set_has_img_aerospike_url();
  img_aerospike_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url)
}
#if LANG_CXX11
inline void ScrollToClickInfo::set_img_aerospike_url(::std::string&& value) {
  set_has_img_aerospike_url();
  img_aerospike_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url)
}
#endif
inline void ScrollToClickInfo::set_img_aerospike_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_img_aerospike_url();
  img_aerospike_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url)
}
inline void ScrollToClickInfo::set_img_aerospike_url(const char* value, size_t size) {
  set_has_img_aerospike_url();
  img_aerospike_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url)
}
inline ::std::string* ScrollToClickInfo::mutable_img_aerospike_url() {
  set_has_img_aerospike_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url)
  return img_aerospike_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScrollToClickInfo::release_img_aerospike_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url)
  clear_has_img_aerospike_url();
  return img_aerospike_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScrollToClickInfo::set_allocated_img_aerospike_url(::std::string* img_aerospike_url) {
  if (img_aerospike_url != NULL) {
    set_has_img_aerospike_url();
  } else {
    clear_has_img_aerospike_url();
  }
  img_aerospike_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img_aerospike_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ScrollToClickInfo.img_aerospike_url)
}

// optional string mobile_img_aerospike_url = 5;
inline bool ScrollToClickInfo::has_mobile_img_aerospike_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScrollToClickInfo::set_has_mobile_img_aerospike_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScrollToClickInfo::clear_has_mobile_img_aerospike_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScrollToClickInfo::clear_mobile_img_aerospike_url() {
  mobile_img_aerospike_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobile_img_aerospike_url();
}
inline const ::std::string& ScrollToClickInfo::mobile_img_aerospike_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url)
  return mobile_img_aerospike_url_.GetNoArena();
}
inline void ScrollToClickInfo::set_mobile_img_aerospike_url(const ::std::string& value) {
  set_has_mobile_img_aerospike_url();
  mobile_img_aerospike_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url)
}
#if LANG_CXX11
inline void ScrollToClickInfo::set_mobile_img_aerospike_url(::std::string&& value) {
  set_has_mobile_img_aerospike_url();
  mobile_img_aerospike_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url)
}
#endif
inline void ScrollToClickInfo::set_mobile_img_aerospike_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobile_img_aerospike_url();
  mobile_img_aerospike_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url)
}
inline void ScrollToClickInfo::set_mobile_img_aerospike_url(const char* value, size_t size) {
  set_has_mobile_img_aerospike_url();
  mobile_img_aerospike_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url)
}
inline ::std::string* ScrollToClickInfo::mutable_mobile_img_aerospike_url() {
  set_has_mobile_img_aerospike_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url)
  return mobile_img_aerospike_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScrollToClickInfo::release_mobile_img_aerospike_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url)
  clear_has_mobile_img_aerospike_url();
  return mobile_img_aerospike_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScrollToClickInfo::set_allocated_mobile_img_aerospike_url(::std::string* mobile_img_aerospike_url) {
  if (mobile_img_aerospike_url != NULL) {
    set_has_mobile_img_aerospike_url();
  } else {
    clear_has_mobile_img_aerospike_url();
  }
  mobile_img_aerospike_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile_img_aerospike_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ScrollToClickInfo.mobile_img_aerospike_url)
}

// -------------------------------------------------------------------

// UserPixels

// repeated string readup = 1;
inline int UserPixels::readup_size() const {
  return readup_.size();
}
inline void UserPixels::clear_readup() {
  readup_.Clear();
}
inline const ::std::string& UserPixels::readup(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UserPixels.readup)
  return readup_.Get(index);
}
inline ::std::string* UserPixels::mutable_readup(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UserPixels.readup)
  return readup_.Mutable(index);
}
inline void UserPixels::set_readup(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UserPixels.readup)
  readup_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UserPixels::set_readup(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UserPixels.readup)
  readup_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UserPixels::set_readup(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  readup_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UserPixels.readup)
}
inline void UserPixels::set_readup(int index, const char* value, size_t size) {
  readup_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UserPixels.readup)
}
inline ::std::string* UserPixels::add_readup() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.UserPixels.readup)
  return readup_.Add();
}
inline void UserPixels::add_readup(const ::std::string& value) {
  readup_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UserPixels.readup)
}
#if LANG_CXX11
inline void UserPixels::add_readup(::std::string&& value) {
  readup_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UserPixels.readup)
}
#endif
inline void UserPixels::add_readup(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  readup_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.UserPixels.readup)
}
inline void UserPixels::add_readup(const char* value, size_t size) {
  readup_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.UserPixels.readup)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserPixels::readup() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.UserPixels.readup)
  return readup_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserPixels::mutable_readup() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.UserPixels.readup)
  return &readup_;
}

// repeated string redirect = 2;
inline int UserPixels::redirect_size() const {
  return redirect_.size();
}
inline void UserPixels::clear_redirect() {
  redirect_.Clear();
}
inline const ::std::string& UserPixels::redirect(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UserPixels.redirect)
  return redirect_.Get(index);
}
inline ::std::string* UserPixels::mutable_redirect(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UserPixels.redirect)
  return redirect_.Mutable(index);
}
inline void UserPixels::set_redirect(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UserPixels.redirect)
  redirect_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UserPixels::set_redirect(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UserPixels.redirect)
  redirect_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UserPixels::set_redirect(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirect_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UserPixels.redirect)
}
inline void UserPixels::set_redirect(int index, const char* value, size_t size) {
  redirect_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UserPixels.redirect)
}
inline ::std::string* UserPixels::add_redirect() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.UserPixels.redirect)
  return redirect_.Add();
}
inline void UserPixels::add_redirect(const ::std::string& value) {
  redirect_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UserPixels.redirect)
}
#if LANG_CXX11
inline void UserPixels::add_redirect(::std::string&& value) {
  redirect_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UserPixels.redirect)
}
#endif
inline void UserPixels::add_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirect_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.UserPixels.redirect)
}
inline void UserPixels::add_redirect(const char* value, size_t size) {
  redirect_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.UserPixels.redirect)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserPixels::redirect() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.UserPixels.redirect)
  return redirect_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserPixels::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.UserPixels.redirect)
  return &redirect_;
}

// repeated string show = 3;
inline int UserPixels::show_size() const {
  return show_.size();
}
inline void UserPixels::clear_show() {
  show_.Clear();
}
inline const ::std::string& UserPixels::show(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UserPixels.show)
  return show_.Get(index);
}
inline ::std::string* UserPixels::mutable_show(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UserPixels.show)
  return show_.Mutable(index);
}
inline void UserPixels::set_show(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UserPixels.show)
  show_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UserPixels::set_show(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UserPixels.show)
  show_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UserPixels::set_show(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  show_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UserPixels.show)
}
inline void UserPixels::set_show(int index, const char* value, size_t size) {
  show_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UserPixels.show)
}
inline ::std::string* UserPixels::add_show() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.UserPixels.show)
  return show_.Add();
}
inline void UserPixels::add_show(const ::std::string& value) {
  show_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UserPixels.show)
}
#if LANG_CXX11
inline void UserPixels::add_show(::std::string&& value) {
  show_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UserPixels.show)
}
#endif
inline void UserPixels::add_show(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  show_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.UserPixels.show)
}
inline void UserPixels::add_show(const char* value, size_t size) {
  show_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.UserPixels.show)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserPixels::show() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.UserPixels.show)
  return show_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserPixels::mutable_show() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.UserPixels.show)
  return &show_;
}

// repeated string click = 4;
inline int UserPixels::click_size() const {
  return click_.size();
}
inline void UserPixels::clear_click() {
  click_.Clear();
}
inline const ::std::string& UserPixels::click(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UserPixels.click)
  return click_.Get(index);
}
inline ::std::string* UserPixels::mutable_click(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UserPixels.click)
  return click_.Mutable(index);
}
inline void UserPixels::set_click(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UserPixels.click)
  click_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UserPixels::set_click(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UserPixels.click)
  click_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UserPixels::set_click(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  click_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UserPixels.click)
}
inline void UserPixels::set_click(int index, const char* value, size_t size) {
  click_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UserPixels.click)
}
inline ::std::string* UserPixels::add_click() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.UserPixels.click)
  return click_.Add();
}
inline void UserPixels::add_click(const ::std::string& value) {
  click_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UserPixels.click)
}
#if LANG_CXX11
inline void UserPixels::add_click(::std::string&& value) {
  click_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UserPixels.click)
}
#endif
inline void UserPixels::add_click(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  click_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.UserPixels.click)
}
inline void UserPixels::add_click(const char* value, size_t size) {
  click_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.UserPixels.click)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserPixels::click() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.UserPixels.click)
  return click_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserPixels::mutable_click() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.UserPixels.click)
  return &click_;
}

// -------------------------------------------------------------------

// CustomAdminFields

// optional string custom_title = 1;
inline bool CustomAdminFields::has_custom_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CustomAdminFields::set_has_custom_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CustomAdminFields::clear_has_custom_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CustomAdminFields::clear_custom_title() {
  custom_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_title();
}
inline const ::std::string& CustomAdminFields::custom_title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomAdminFields.custom_title)
  return custom_title_.GetNoArena();
}
inline void CustomAdminFields::set_custom_title(const ::std::string& value) {
  set_has_custom_title();
  custom_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CustomAdminFields.custom_title)
}
#if LANG_CXX11
inline void CustomAdminFields::set_custom_title(::std::string&& value) {
  set_has_custom_title();
  custom_title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CustomAdminFields.custom_title)
}
#endif
inline void CustomAdminFields::set_custom_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_custom_title();
  custom_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CustomAdminFields.custom_title)
}
inline void CustomAdminFields::set_custom_title(const char* value, size_t size) {
  set_has_custom_title();
  custom_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CustomAdminFields.custom_title)
}
inline ::std::string* CustomAdminFields::mutable_custom_title() {
  set_has_custom_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomAdminFields.custom_title)
  return custom_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomAdminFields::release_custom_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CustomAdminFields.custom_title)
  clear_has_custom_title();
  return custom_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomAdminFields::set_allocated_custom_title(::std::string* custom_title) {
  if (custom_title != NULL) {
    set_has_custom_title();
  } else {
    clear_has_custom_title();
  }
  custom_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CustomAdminFields.custom_title)
}

// optional .ru.mail.go.webbase.blobs.SiliconImage custom_main_image = 2;
inline bool CustomAdminFields::has_custom_main_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CustomAdminFields::set_has_custom_main_image() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CustomAdminFields::clear_has_custom_main_image() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CustomAdminFields::clear_custom_main_image() {
  if (custom_main_image_ != NULL) custom_main_image_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
  clear_has_custom_main_image();
}
inline const ::ru::mail::go::webbase::blobs::SiliconImage& CustomAdminFields::custom_main_image() const {
  const ::ru::mail::go::webbase::blobs::SiliconImage* p = custom_main_image_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomAdminFields.custom_main_image)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconImage*>(
      &::ru::mail::go::webbase::blobs::_SiliconImage_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconImage* CustomAdminFields::mutable_custom_main_image() {
  set_has_custom_main_image();
  if (custom_main_image_ == NULL) {
    custom_main_image_ = new ::ru::mail::go::webbase::blobs::SiliconImage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomAdminFields.custom_main_image)
  return custom_main_image_;
}
inline ::ru::mail::go::webbase::blobs::SiliconImage* CustomAdminFields::release_custom_main_image() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CustomAdminFields.custom_main_image)
  clear_has_custom_main_image();
  ::ru::mail::go::webbase::blobs::SiliconImage* temp = custom_main_image_;
  custom_main_image_ = NULL;
  return temp;
}
inline void CustomAdminFields::set_allocated_custom_main_image(::ru::mail::go::webbase::blobs::SiliconImage* custom_main_image) {
  delete custom_main_image_;
  custom_main_image_ = custom_main_image;
  if (custom_main_image) {
    set_has_custom_main_image();
  } else {
    clear_has_custom_main_image();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CustomAdminFields.custom_main_image)
}

// optional .ru.mail.go.webbase.blobs.SiliconImage vendor_image = 3;
inline bool CustomAdminFields::has_vendor_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CustomAdminFields::set_has_vendor_image() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CustomAdminFields::clear_has_vendor_image() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CustomAdminFields::clear_vendor_image() {
  if (vendor_image_ != NULL) vendor_image_->::ru::mail::go::webbase::blobs::SiliconImage::Clear();
  clear_has_vendor_image();
}
inline const ::ru::mail::go::webbase::blobs::SiliconImage& CustomAdminFields::vendor_image() const {
  const ::ru::mail::go::webbase::blobs::SiliconImage* p = vendor_image_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomAdminFields.vendor_image)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconImage*>(
      &::ru::mail::go::webbase::blobs::_SiliconImage_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconImage* CustomAdminFields::mutable_vendor_image() {
  set_has_vendor_image();
  if (vendor_image_ == NULL) {
    vendor_image_ = new ::ru::mail::go::webbase::blobs::SiliconImage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomAdminFields.vendor_image)
  return vendor_image_;
}
inline ::ru::mail::go::webbase::blobs::SiliconImage* CustomAdminFields::release_vendor_image() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CustomAdminFields.vendor_image)
  clear_has_vendor_image();
  ::ru::mail::go::webbase::blobs::SiliconImage* temp = vendor_image_;
  vendor_image_ = NULL;
  return temp;
}
inline void CustomAdminFields::set_allocated_vendor_image(::ru::mail::go::webbase::blobs::SiliconImage* vendor_image) {
  delete vendor_image_;
  vendor_image_ = vendor_image;
  if (vendor_image) {
    set_has_vendor_image();
  } else {
    clear_has_vendor_image();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CustomAdminFields.vendor_image)
}

// optional bool is_for_realme = 4;
inline bool CustomAdminFields::has_is_for_realme() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CustomAdminFields::set_has_is_for_realme() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CustomAdminFields::clear_has_is_for_realme() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CustomAdminFields::clear_is_for_realme() {
  is_for_realme_ = false;
  clear_has_is_for_realme();
}
inline bool CustomAdminFields::is_for_realme() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomAdminFields.is_for_realme)
  return is_for_realme_;
}
inline void CustomAdminFields::set_is_for_realme(bool value) {
  set_has_is_for_realme();
  is_for_realme_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CustomAdminFields.is_for_realme)
}

// -------------------------------------------------------------------

// SourceParsingErrorList

// repeated .ru.mail.go.webbase.blobs.SourceParsingError errors = 1;
inline int SourceParsingErrorList::errors_size() const {
  return errors_.size();
}
inline void SourceParsingErrorList::clear_errors() {
  errors_.Clear();
}
inline ::ru::mail::go::webbase::blobs::SourceParsingError SourceParsingErrorList::errors(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SourceParsingErrorList.errors)
  return static_cast< ::ru::mail::go::webbase::blobs::SourceParsingError >(errors_.Get(index));
}
inline void SourceParsingErrorList::set_errors(int index, ::ru::mail::go::webbase::blobs::SourceParsingError value) {
  assert(::ru::mail::go::webbase::blobs::SourceParsingError_IsValid(value));
  errors_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SourceParsingErrorList.errors)
}
inline void SourceParsingErrorList::add_errors(::ru::mail::go::webbase::blobs::SourceParsingError value) {
  assert(::ru::mail::go::webbase::blobs::SourceParsingError_IsValid(value));
  errors_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SourceParsingErrorList.errors)
}
inline const ::google::protobuf::RepeatedField<int>&
SourceParsingErrorList::errors() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SourceParsingErrorList.errors)
  return errors_;
}
inline ::google::protobuf::RepeatedField<int>*
SourceParsingErrorList::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SourceParsingErrorList.errors)
  return &errors_;
}

// -------------------------------------------------------------------

// PostParsingErrorList

// repeated .ru.mail.go.webbase.blobs.PostParsingError errors = 1;
inline int PostParsingErrorList::errors_size() const {
  return errors_.size();
}
inline void PostParsingErrorList::clear_errors() {
  errors_.Clear();
}
inline ::ru::mail::go::webbase::blobs::PostParsingError PostParsingErrorList::errors(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostParsingErrorList.errors)
  return static_cast< ::ru::mail::go::webbase::blobs::PostParsingError >(errors_.Get(index));
}
inline void PostParsingErrorList::set_errors(int index, ::ru::mail::go::webbase::blobs::PostParsingError value) {
  assert(::ru::mail::go::webbase::blobs::PostParsingError_IsValid(value));
  errors_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostParsingErrorList.errors)
}
inline void PostParsingErrorList::add_errors(::ru::mail::go::webbase::blobs::PostParsingError value) {
  assert(::ru::mail::go::webbase::blobs::PostParsingError_IsValid(value));
  errors_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostParsingErrorList.errors)
}
inline const ::google::protobuf::RepeatedField<int>&
PostParsingErrorList::errors() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostParsingErrorList.errors)
  return errors_;
}
inline ::google::protobuf::RepeatedField<int>*
PostParsingErrorList::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostParsingErrorList.errors)
  return &errors_;
}

// -------------------------------------------------------------------

// ImageProcessErrorList

// repeated .ru.mail.go.webbase.blobs.ImageProcessError errors = 1;
inline int ImageProcessErrorList::errors_size() const {
  return errors_.size();
}
inline void ImageProcessErrorList::clear_errors() {
  errors_.Clear();
}
inline ::ru::mail::go::webbase::blobs::ImageProcessError ImageProcessErrorList::errors(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProcessErrorList.errors)
  return static_cast< ::ru::mail::go::webbase::blobs::ImageProcessError >(errors_.Get(index));
}
inline void ImageProcessErrorList::set_errors(int index, ::ru::mail::go::webbase::blobs::ImageProcessError value) {
  assert(::ru::mail::go::webbase::blobs::ImageProcessError_IsValid(value));
  errors_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProcessErrorList.errors)
}
inline void ImageProcessErrorList::add_errors(::ru::mail::go::webbase::blobs::ImageProcessError value) {
  assert(::ru::mail::go::webbase::blobs::ImageProcessError_IsValid(value));
  errors_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ImageProcessErrorList.errors)
}
inline const ::google::protobuf::RepeatedField<int>&
ImageProcessErrorList::errors() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ImageProcessErrorList.errors)
  return errors_;
}
inline ::google::protobuf::RepeatedField<int>*
ImageProcessErrorList::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ImageProcessErrorList.errors)
  return &errors_;
}

// -------------------------------------------------------------------

// SiliconeYoutubeVideoData

// required string videoID = 1;
inline bool SiliconeYoutubeVideoData::has_videoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconeYoutubeVideoData::set_has_videoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconeYoutubeVideoData::clear_has_videoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconeYoutubeVideoData::clear_videoid() {
  videoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_videoid();
}
inline const ::std::string& SiliconeYoutubeVideoData::videoid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID)
  return videoid_.GetNoArena();
}
inline void SiliconeYoutubeVideoData::set_videoid(const ::std::string& value) {
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID)
}
#if LANG_CXX11
inline void SiliconeYoutubeVideoData::set_videoid(::std::string&& value) {
  set_has_videoid();
  videoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID)
}
#endif
inline void SiliconeYoutubeVideoData::set_videoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID)
}
inline void SiliconeYoutubeVideoData::set_videoid(const char* value, size_t size) {
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID)
}
inline ::std::string* SiliconeYoutubeVideoData::mutable_videoid() {
  set_has_videoid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID)
  return videoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeYoutubeVideoData::release_videoid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID)
  clear_has_videoid();
  return videoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeYoutubeVideoData::set_allocated_videoid(::std::string* videoid) {
  if (videoid != NULL) {
    set_has_videoid();
  } else {
    clear_has_videoid();
  }
  videoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videoid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.videoID)
}

// required string playerUrl = 2;
inline bool SiliconeYoutubeVideoData::has_playerurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiliconeYoutubeVideoData::set_has_playerurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiliconeYoutubeVideoData::clear_has_playerurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiliconeYoutubeVideoData::clear_playerurl() {
  playerurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerurl();
}
inline const ::std::string& SiliconeYoutubeVideoData::playerurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl)
  return playerurl_.GetNoArena();
}
inline void SiliconeYoutubeVideoData::set_playerurl(const ::std::string& value) {
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl)
}
#if LANG_CXX11
inline void SiliconeYoutubeVideoData::set_playerurl(::std::string&& value) {
  set_has_playerurl();
  playerurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl)
}
#endif
inline void SiliconeYoutubeVideoData::set_playerurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl)
}
inline void SiliconeYoutubeVideoData::set_playerurl(const char* value, size_t size) {
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl)
}
inline ::std::string* SiliconeYoutubeVideoData::mutable_playerurl() {
  set_has_playerurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl)
  return playerurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeYoutubeVideoData::release_playerurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl)
  clear_has_playerurl();
  return playerurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeYoutubeVideoData::set_allocated_playerurl(::std::string* playerurl) {
  if (playerurl != NULL) {
    set_has_playerurl();
  } else {
    clear_has_playerurl();
  }
  playerurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData.playerUrl)
}

// -------------------------------------------------------------------

// SiliconeVideoYoutube

// required string playerUrl = 1;
inline bool SiliconeVideoYoutube::has_playerurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconeVideoYoutube::set_has_playerurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconeVideoYoutube::clear_has_playerurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconeVideoYoutube::clear_playerurl() {
  playerurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerurl();
}
inline const ::std::string& SiliconeVideoYoutube::playerurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl)
  return playerurl_.GetNoArena();
}
inline void SiliconeVideoYoutube::set_playerurl(const ::std::string& value) {
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl)
}
#if LANG_CXX11
inline void SiliconeVideoYoutube::set_playerurl(::std::string&& value) {
  set_has_playerurl();
  playerurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl)
}
#endif
inline void SiliconeVideoYoutube::set_playerurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl)
}
inline void SiliconeVideoYoutube::set_playerurl(const char* value, size_t size) {
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl)
}
inline ::std::string* SiliconeVideoYoutube::mutable_playerurl() {
  set_has_playerurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl)
  return playerurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeVideoYoutube::release_playerurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl)
  clear_has_playerurl();
  return playerurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeVideoYoutube::set_allocated_playerurl(::std::string* playerurl) {
  if (playerurl != NULL) {
    set_has_playerurl();
  } else {
    clear_has_playerurl();
  }
  playerurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.playerUrl)
}

// required string videoID = 2;
inline bool SiliconeVideoYoutube::has_videoid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiliconeVideoYoutube::set_has_videoid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiliconeVideoYoutube::clear_has_videoid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiliconeVideoYoutube::clear_videoid() {
  videoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_videoid();
}
inline const ::std::string& SiliconeVideoYoutube::videoid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID)
  return videoid_.GetNoArena();
}
inline void SiliconeVideoYoutube::set_videoid(const ::std::string& value) {
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID)
}
#if LANG_CXX11
inline void SiliconeVideoYoutube::set_videoid(::std::string&& value) {
  set_has_videoid();
  videoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID)
}
#endif
inline void SiliconeVideoYoutube::set_videoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID)
}
inline void SiliconeVideoYoutube::set_videoid(const char* value, size_t size) {
  set_has_videoid();
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID)
}
inline ::std::string* SiliconeVideoYoutube::mutable_videoid() {
  set_has_videoid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID)
  return videoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeVideoYoutube::release_videoid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID)
  clear_has_videoid();
  return videoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeVideoYoutube::set_allocated_videoid(::std::string* videoid) {
  if (videoid != NULL) {
    set_has_videoid();
  } else {
    clear_has_videoid();
  }
  videoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videoid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeVideoYoutube.videoID)
}

// -------------------------------------------------------------------

// SiliconeVideoVimeo

// required string playerUrl = 1;
inline bool SiliconeVideoVimeo::has_playerurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconeVideoVimeo::set_has_playerurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconeVideoVimeo::clear_has_playerurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconeVideoVimeo::clear_playerurl() {
  playerurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerurl();
}
inline const ::std::string& SiliconeVideoVimeo::playerurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl)
  return playerurl_.GetNoArena();
}
inline void SiliconeVideoVimeo::set_playerurl(const ::std::string& value) {
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl)
}
#if LANG_CXX11
inline void SiliconeVideoVimeo::set_playerurl(::std::string&& value) {
  set_has_playerurl();
  playerurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl)
}
#endif
inline void SiliconeVideoVimeo::set_playerurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl)
}
inline void SiliconeVideoVimeo::set_playerurl(const char* value, size_t size) {
  set_has_playerurl();
  playerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl)
}
inline ::std::string* SiliconeVideoVimeo::mutable_playerurl() {
  set_has_playerurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl)
  return playerurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeVideoVimeo::release_playerurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl)
  clear_has_playerurl();
  return playerurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeVideoVimeo::set_allocated_playerurl(::std::string* playerurl) {
  if (playerurl != NULL) {
    set_has_playerurl();
  } else {
    clear_has_playerurl();
  }
  playerurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeVideoVimeo.playerUrl)
}

// -------------------------------------------------------------------

// SiliconeVideo

// required .ru.mail.go.webbase.blobs.SiliconeVideoType type = 1;
inline bool SiliconeVideo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SiliconeVideo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SiliconeVideo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SiliconeVideo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::webbase::blobs::SiliconeVideoType SiliconeVideo::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeVideo.type)
  return static_cast< ::ru::mail::go::webbase::blobs::SiliconeVideoType >(type_);
}
inline void SiliconeVideo::set_type(::ru::mail::go::webbase::blobs::SiliconeVideoType value) {
  assert(::ru::mail::go::webbase::blobs::SiliconeVideoType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeVideo.type)
}

// optional .ru.mail.go.webbase.blobs.SiliconeVideoYoutube videoYoutube = 2;
inline bool SiliconeVideo::has_videoyoutube() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconeVideo::set_has_videoyoutube() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconeVideo::clear_has_videoyoutube() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconeVideo::clear_videoyoutube() {
  if (videoyoutube_ != NULL) videoyoutube_->::ru::mail::go::webbase::blobs::SiliconeVideoYoutube::Clear();
  clear_has_videoyoutube();
}
inline const ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube& SiliconeVideo::videoyoutube() const {
  const ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube* p = videoyoutube_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeVideo.videoYoutube)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube*>(
      &::ru::mail::go::webbase::blobs::_SiliconeVideoYoutube_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube* SiliconeVideo::mutable_videoyoutube() {
  set_has_videoyoutube();
  if (videoyoutube_ == NULL) {
    videoyoutube_ = new ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeVideo.videoYoutube)
  return videoyoutube_;
}
inline ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube* SiliconeVideo::release_videoyoutube() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeVideo.videoYoutube)
  clear_has_videoyoutube();
  ::ru::mail::go::webbase::blobs::SiliconeVideoYoutube* temp = videoyoutube_;
  videoyoutube_ = NULL;
  return temp;
}
inline void SiliconeVideo::set_allocated_videoyoutube(::ru::mail::go::webbase::blobs::SiliconeVideoYoutube* videoyoutube) {
  delete videoyoutube_;
  videoyoutube_ = videoyoutube;
  if (videoyoutube) {
    set_has_videoyoutube();
  } else {
    clear_has_videoyoutube();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeVideo.videoYoutube)
}

// optional .ru.mail.go.webbase.blobs.SiliconeVideoVimeo videoVimeo = 3;
inline bool SiliconeVideo::has_videovimeo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiliconeVideo::set_has_videovimeo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiliconeVideo::clear_has_videovimeo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiliconeVideo::clear_videovimeo() {
  if (videovimeo_ != NULL) videovimeo_->::ru::mail::go::webbase::blobs::SiliconeVideoVimeo::Clear();
  clear_has_videovimeo();
}
inline const ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo& SiliconeVideo::videovimeo() const {
  const ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo* p = videovimeo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeVideo.videoVimeo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo*>(
      &::ru::mail::go::webbase::blobs::_SiliconeVideoVimeo_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo* SiliconeVideo::mutable_videovimeo() {
  set_has_videovimeo();
  if (videovimeo_ == NULL) {
    videovimeo_ = new ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeVideo.videoVimeo)
  return videovimeo_;
}
inline ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo* SiliconeVideo::release_videovimeo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeVideo.videoVimeo)
  clear_has_videovimeo();
  ::ru::mail::go::webbase::blobs::SiliconeVideoVimeo* temp = videovimeo_;
  videovimeo_ = NULL;
  return temp;
}
inline void SiliconeVideo::set_allocated_videovimeo(::ru::mail::go::webbase::blobs::SiliconeVideoVimeo* videovimeo) {
  delete videovimeo_;
  videovimeo_ = videovimeo;
  if (videovimeo) {
    set_has_videovimeo();
  } else {
    clear_has_videovimeo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeVideo.videoVimeo)
}

// -------------------------------------------------------------------

// SiliconeVideoData

// optional .ru.mail.go.webbase.blobs.SiliconeYoutubeVideoData youtubeData = 1;
inline bool SiliconeVideoData::has_youtubedata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconeVideoData::set_has_youtubedata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconeVideoData::clear_has_youtubedata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconeVideoData::clear_youtubedata() {
  if (youtubedata_ != NULL) youtubedata_->::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData::Clear();
  clear_has_youtubedata();
}
inline const ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData& SiliconeVideoData::youtubedata() const {
  const ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData* p = youtubedata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeVideoData.youtubeData)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData*>(
      &::ru::mail::go::webbase::blobs::_SiliconeYoutubeVideoData_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData* SiliconeVideoData::mutable_youtubedata() {
  set_has_youtubedata();
  if (youtubedata_ == NULL) {
    youtubedata_ = new ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeVideoData.youtubeData)
  return youtubedata_;
}
inline ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData* SiliconeVideoData::release_youtubedata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeVideoData.youtubeData)
  clear_has_youtubedata();
  ::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData* temp = youtubedata_;
  youtubedata_ = NULL;
  return temp;
}
inline void SiliconeVideoData::set_allocated_youtubedata(::ru::mail::go::webbase::blobs::SiliconeYoutubeVideoData* youtubedata) {
  delete youtubedata_;
  youtubedata_ = youtubedata;
  if (youtubedata) {
    set_has_youtubedata();
  } else {
    clear_has_youtubedata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeVideoData.youtubeData)
}

// repeated .ru.mail.go.webbase.blobs.SiliconeVideo videos = 2;
inline int SiliconeVideoData::videos_size() const {
  return videos_.size();
}
inline void SiliconeVideoData::clear_videos() {
  videos_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::SiliconeVideo& SiliconeVideoData::videos(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeVideoData.videos)
  return videos_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconeVideo* SiliconeVideoData::mutable_videos(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeVideoData.videos)
  return videos_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconeVideo* SiliconeVideoData::add_videos() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconeVideoData.videos)
  return videos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeVideo >*
SiliconeVideoData::mutable_videos() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconeVideoData.videos)
  return &videos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeVideo >&
SiliconeVideoData::videos() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconeVideoData.videos)
  return videos_;
}

// -------------------------------------------------------------------

// PostsBySourcesCmd

// repeated .ru.mail.go.webbase.blobs.SiliconSourceId sourceIds = 1;
inline int PostsBySourcesCmd::sourceids_size() const {
  return sourceids_.size();
}
inline void PostsBySourcesCmd::clear_sourceids() {
  sourceids_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::SiliconSourceId& PostsBySourcesCmd::sourceids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostsBySourcesCmd.sourceIds)
  return sourceids_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconSourceId* PostsBySourcesCmd::mutable_sourceids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostsBySourcesCmd.sourceIds)
  return sourceids_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconSourceId* PostsBySourcesCmd::add_sourceids() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostsBySourcesCmd.sourceIds)
  return sourceids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconSourceId >*
PostsBySourcesCmd::mutable_sourceids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostsBySourcesCmd.sourceIds)
  return &sourceids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconSourceId >&
PostsBySourcesCmd::sourceids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostsBySourcesCmd.sourceIds)
  return sourceids_;
}

// repeated string replyTopics = 2;
inline int PostsBySourcesCmd::replytopics_size() const {
  return replytopics_.size();
}
inline void PostsBySourcesCmd::clear_replytopics() {
  replytopics_.Clear();
}
inline const ::std::string& PostsBySourcesCmd::replytopics(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
  return replytopics_.Get(index);
}
inline ::std::string* PostsBySourcesCmd::mutable_replytopics(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
  return replytopics_.Mutable(index);
}
inline void PostsBySourcesCmd::set_replytopics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
  replytopics_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PostsBySourcesCmd::set_replytopics(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
  replytopics_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PostsBySourcesCmd::set_replytopics(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  replytopics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
}
inline void PostsBySourcesCmd::set_replytopics(int index, const char* value, size_t size) {
  replytopics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
}
inline ::std::string* PostsBySourcesCmd::add_replytopics() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
  return replytopics_.Add();
}
inline void PostsBySourcesCmd::add_replytopics(const ::std::string& value) {
  replytopics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
}
#if LANG_CXX11
inline void PostsBySourcesCmd::add_replytopics(::std::string&& value) {
  replytopics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
}
#endif
inline void PostsBySourcesCmd::add_replytopics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  replytopics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
}
inline void PostsBySourcesCmd::add_replytopics(const char* value, size_t size) {
  replytopics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PostsBySourcesCmd::replytopics() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
  return replytopics_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PostsBySourcesCmd::mutable_replytopics() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostsBySourcesCmd.replyTopics)
  return &replytopics_;
}

// repeated .ru.mail.go.webbase.blobs.TimeInterval fetchTimeIntervals = 3;
inline int PostsBySourcesCmd::fetchtimeintervals_size() const {
  return fetchtimeintervals_.size();
}
inline void PostsBySourcesCmd::clear_fetchtimeintervals() {
  fetchtimeintervals_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::TimeInterval& PostsBySourcesCmd::fetchtimeintervals(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostsBySourcesCmd.fetchTimeIntervals)
  return fetchtimeintervals_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::TimeInterval* PostsBySourcesCmd::mutable_fetchtimeintervals(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostsBySourcesCmd.fetchTimeIntervals)
  return fetchtimeintervals_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::TimeInterval* PostsBySourcesCmd::add_fetchtimeintervals() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostsBySourcesCmd.fetchTimeIntervals)
  return fetchtimeintervals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TimeInterval >*
PostsBySourcesCmd::mutable_fetchtimeintervals() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostsBySourcesCmd.fetchTimeIntervals)
  return &fetchtimeintervals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TimeInterval >&
PostsBySourcesCmd::fetchtimeintervals() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostsBySourcesCmd.fetchTimeIntervals)
  return fetchtimeintervals_;
}

// -------------------------------------------------------------------

// PostAndSource

// required string postUrl = 1;
inline bool PostAndSource::has_posturl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PostAndSource::set_has_posturl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PostAndSource::clear_has_posturl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PostAndSource::clear_posturl() {
  posturl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posturl();
}
inline const ::std::string& PostAndSource::posturl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostAndSource.postUrl)
  return posturl_.GetNoArena();
}
inline void PostAndSource::set_posturl(const ::std::string& value) {
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostAndSource.postUrl)
}
#if LANG_CXX11
inline void PostAndSource::set_posturl(::std::string&& value) {
  set_has_posturl();
  posturl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.PostAndSource.postUrl)
}
#endif
inline void PostAndSource::set_posturl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.PostAndSource.postUrl)
}
inline void PostAndSource::set_posturl(const char* value, size_t size) {
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.PostAndSource.postUrl)
}
inline ::std::string* PostAndSource::mutable_posturl() {
  set_has_posturl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostAndSource.postUrl)
  return posturl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostAndSource::release_posturl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PostAndSource.postUrl)
  clear_has_posturl();
  return posturl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostAndSource::set_allocated_posturl(::std::string* posturl) {
  if (posturl != NULL) {
    set_has_posturl();
  } else {
    clear_has_posturl();
  }
  posturl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posturl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PostAndSource.postUrl)
}

// required .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 2;
inline bool PostAndSource::has_sourceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PostAndSource::set_has_sourceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PostAndSource::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PostAndSource::clear_sourceid() {
  if (sourceid_ != NULL) sourceid_->::ru::mail::go::webbase::blobs::SiliconSourceId::Clear();
  clear_has_sourceid();
}
inline const ::ru::mail::go::webbase::blobs::SiliconSourceId& PostAndSource::sourceid() const {
  const ::ru::mail::go::webbase::blobs::SiliconSourceId* p = sourceid_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostAndSource.sourceId)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconSourceId*>(
      &::ru::mail::go::webbase::blobs::_SiliconSourceId_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiliconSourceId* PostAndSource::mutable_sourceid() {
  set_has_sourceid();
  if (sourceid_ == NULL) {
    sourceid_ = new ::ru::mail::go::webbase::blobs::SiliconSourceId;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostAndSource.sourceId)
  return sourceid_;
}
inline ::ru::mail::go::webbase::blobs::SiliconSourceId* PostAndSource::release_sourceid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PostAndSource.sourceId)
  clear_has_sourceid();
  ::ru::mail::go::webbase::blobs::SiliconSourceId* temp = sourceid_;
  sourceid_ = NULL;
  return temp;
}
inline void PostAndSource::set_allocated_sourceid(::ru::mail::go::webbase::blobs::SiliconSourceId* sourceid) {
  delete sourceid_;
  sourceid_ = sourceid;
  if (sourceid) {
    set_has_sourceid();
  } else {
    clear_has_sourceid();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PostAndSource.sourceId)
}

// -------------------------------------------------------------------

// PostsBySiteCmd

// repeated int64 siteIds = 1;
inline int PostsBySiteCmd::siteids_size() const {
  return siteids_.size();
}
inline void PostsBySiteCmd::clear_siteids() {
  siteids_.Clear();
}
inline ::google::protobuf::int64 PostsBySiteCmd::siteids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostsBySiteCmd.siteIds)
  return siteids_.Get(index);
}
inline void PostsBySiteCmd::set_siteids(int index, ::google::protobuf::int64 value) {
  siteids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostsBySiteCmd.siteIds)
}
inline void PostsBySiteCmd::add_siteids(::google::protobuf::int64 value) {
  siteids_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostsBySiteCmd.siteIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PostsBySiteCmd::siteids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostsBySiteCmd.siteIds)
  return siteids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PostsBySiteCmd::mutable_siteids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostsBySiteCmd.siteIds)
  return &siteids_;
}

// repeated string replyTopics = 2;
inline int PostsBySiteCmd::replytopics_size() const {
  return replytopics_.size();
}
inline void PostsBySiteCmd::clear_replytopics() {
  replytopics_.Clear();
}
inline const ::std::string& PostsBySiteCmd::replytopics(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
  return replytopics_.Get(index);
}
inline ::std::string* PostsBySiteCmd::mutable_replytopics(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
  return replytopics_.Mutable(index);
}
inline void PostsBySiteCmd::set_replytopics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
  replytopics_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PostsBySiteCmd::set_replytopics(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
  replytopics_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PostsBySiteCmd::set_replytopics(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  replytopics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
}
inline void PostsBySiteCmd::set_replytopics(int index, const char* value, size_t size) {
  replytopics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
}
inline ::std::string* PostsBySiteCmd::add_replytopics() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
  return replytopics_.Add();
}
inline void PostsBySiteCmd::add_replytopics(const ::std::string& value) {
  replytopics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
}
#if LANG_CXX11
inline void PostsBySiteCmd::add_replytopics(::std::string&& value) {
  replytopics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
}
#endif
inline void PostsBySiteCmd::add_replytopics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  replytopics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
}
inline void PostsBySiteCmd::add_replytopics(const char* value, size_t size) {
  replytopics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PostsBySiteCmd::replytopics() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
  return replytopics_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PostsBySiteCmd::mutable_replytopics() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostsBySiteCmd.replyTopics)
  return &replytopics_;
}

// repeated .ru.mail.go.webbase.blobs.TimeInterval fetchTimeIntervals = 3;
inline int PostsBySiteCmd::fetchtimeintervals_size() const {
  return fetchtimeintervals_.size();
}
inline void PostsBySiteCmd::clear_fetchtimeintervals() {
  fetchtimeintervals_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::TimeInterval& PostsBySiteCmd::fetchtimeintervals(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostsBySiteCmd.fetchTimeIntervals)
  return fetchtimeintervals_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::TimeInterval* PostsBySiteCmd::mutable_fetchtimeintervals(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostsBySiteCmd.fetchTimeIntervals)
  return fetchtimeintervals_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::TimeInterval* PostsBySiteCmd::add_fetchtimeintervals() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostsBySiteCmd.fetchTimeIntervals)
  return fetchtimeintervals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TimeInterval >*
PostsBySiteCmd::mutable_fetchtimeintervals() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostsBySiteCmd.fetchTimeIntervals)
  return &fetchtimeintervals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TimeInterval >&
PostsBySiteCmd::fetchtimeintervals() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostsBySiteCmd.fetchTimeIntervals)
  return fetchtimeintervals_;
}

// -------------------------------------------------------------------

// TimeInterval

// optional uint64 startTsMs = 1;
inline bool TimeInterval::has_starttsms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeInterval::set_has_starttsms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeInterval::clear_has_starttsms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeInterval::clear_starttsms() {
  starttsms_ = GOOGLE_ULONGLONG(0);
  clear_has_starttsms();
}
inline ::google::protobuf::uint64 TimeInterval::starttsms() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TimeInterval.startTsMs)
  return starttsms_;
}
inline void TimeInterval::set_starttsms(::google::protobuf::uint64 value) {
  set_has_starttsms();
  starttsms_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TimeInterval.startTsMs)
}

// optional uint64 stopTsMs = 2;
inline bool TimeInterval::has_stoptsms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeInterval::set_has_stoptsms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeInterval::clear_has_stoptsms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeInterval::clear_stoptsms() {
  stoptsms_ = GOOGLE_ULONGLONG(0);
  clear_has_stoptsms();
}
inline ::google::protobuf::uint64 TimeInterval::stoptsms() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TimeInterval.stopTsMs)
  return stoptsms_;
}
inline void TimeInterval::set_stoptsms(::google::protobuf::uint64 value) {
  set_has_stoptsms();
  stoptsms_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TimeInterval.stopTsMs)
}

// -------------------------------------------------------------------

// PostSiteSources

// required string postUrl = 1;
inline bool PostSiteSources::has_posturl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PostSiteSources::set_has_posturl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PostSiteSources::clear_has_posturl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PostSiteSources::clear_posturl() {
  posturl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posturl();
}
inline const ::std::string& PostSiteSources::posturl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostSiteSources.postUrl)
  return posturl_.GetNoArena();
}
inline void PostSiteSources::set_posturl(const ::std::string& value) {
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostSiteSources.postUrl)
}
#if LANG_CXX11
inline void PostSiteSources::set_posturl(::std::string&& value) {
  set_has_posturl();
  posturl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.PostSiteSources.postUrl)
}
#endif
inline void PostSiteSources::set_posturl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.PostSiteSources.postUrl)
}
inline void PostSiteSources::set_posturl(const char* value, size_t size) {
  set_has_posturl();
  posturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.PostSiteSources.postUrl)
}
inline ::std::string* PostSiteSources::mutable_posturl() {
  set_has_posturl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostSiteSources.postUrl)
  return posturl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostSiteSources::release_posturl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PostSiteSources.postUrl)
  clear_has_posturl();
  return posturl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostSiteSources::set_allocated_posturl(::std::string* posturl) {
  if (posturl != NULL) {
    set_has_posturl();
  } else {
    clear_has_posturl();
  }
  posturl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posturl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PostSiteSources.postUrl)
}

// required int64 siteId = 2;
inline bool PostSiteSources::has_siteid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PostSiteSources::set_has_siteid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PostSiteSources::clear_has_siteid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PostSiteSources::clear_siteid() {
  siteid_ = GOOGLE_LONGLONG(0);
  clear_has_siteid();
}
inline ::google::protobuf::int64 PostSiteSources::siteid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostSiteSources.siteId)
  return siteid_;
}
inline void PostSiteSources::set_siteid(::google::protobuf::int64 value) {
  set_has_siteid();
  siteid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostSiteSources.siteId)
}

// repeated .ru.mail.go.webbase.blobs.SiliconSourceId sourceId = 3;
inline int PostSiteSources::sourceid_size() const {
  return sourceid_.size();
}
inline void PostSiteSources::clear_sourceid() {
  sourceid_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::SiliconSourceId& PostSiteSources::sourceid(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostSiteSources.sourceId)
  return sourceid_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconSourceId* PostSiteSources::mutable_sourceid(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PostSiteSources.sourceId)
  return sourceid_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconSourceId* PostSiteSources::add_sourceid() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PostSiteSources.sourceId)
  return sourceid_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconSourceId >*
PostSiteSources::mutable_sourceid() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PostSiteSources.sourceId)
  return &sourceid_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconSourceId >&
PostSiteSources::sourceid() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PostSiteSources.sourceId)
  return sourceid_;
}

// optional int64 firstMeetSec = 4;
inline bool PostSiteSources::has_firstmeetsec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PostSiteSources::set_has_firstmeetsec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PostSiteSources::clear_has_firstmeetsec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PostSiteSources::clear_firstmeetsec() {
  firstmeetsec_ = GOOGLE_LONGLONG(0);
  clear_has_firstmeetsec();
}
inline ::google::protobuf::int64 PostSiteSources::firstmeetsec() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PostSiteSources.firstMeetSec)
  return firstmeetsec_;
}
inline void PostSiteSources::set_firstmeetsec(::google::protobuf::int64 value) {
  set_has_firstmeetsec();
  firstmeetsec_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PostSiteSources.firstMeetSec)
}

// -------------------------------------------------------------------

// MarkerDigest

// required int32 markerId = 1;
inline bool MarkerDigest::has_markerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarkerDigest::set_has_markerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarkerDigest::clear_has_markerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarkerDigest::clear_markerid() {
  markerid_ = 0;
  clear_has_markerid();
}
inline ::google::protobuf::int32 MarkerDigest::markerid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkerDigest.markerId)
  return markerid_;
}
inline void MarkerDigest::set_markerid(::google::protobuf::int32 value) {
  set_has_markerid();
  markerid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkerDigest.markerId)
}

// required bytes valueHash = 2;
inline bool MarkerDigest::has_valuehash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarkerDigest::set_has_valuehash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarkerDigest::clear_has_valuehash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarkerDigest::clear_valuehash() {
  valuehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_valuehash();
}
inline const ::std::string& MarkerDigest::valuehash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkerDigest.valueHash)
  return valuehash_.GetNoArena();
}
inline void MarkerDigest::set_valuehash(const ::std::string& value) {
  set_has_valuehash();
  valuehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkerDigest.valueHash)
}
#if LANG_CXX11
inline void MarkerDigest::set_valuehash(::std::string&& value) {
  set_has_valuehash();
  valuehash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MarkerDigest.valueHash)
}
#endif
inline void MarkerDigest::set_valuehash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_valuehash();
  valuehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MarkerDigest.valueHash)
}
inline void MarkerDigest::set_valuehash(const void* value, size_t size) {
  set_has_valuehash();
  valuehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MarkerDigest.valueHash)
}
inline ::std::string* MarkerDigest::mutable_valuehash() {
  set_has_valuehash();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MarkerDigest.valueHash)
  return valuehash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkerDigest::release_valuehash() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MarkerDigest.valueHash)
  clear_has_valuehash();
  return valuehash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkerDigest::set_allocated_valuehash(::std::string* valuehash) {
  if (valuehash != NULL) {
    set_has_valuehash();
  } else {
    clear_has_valuehash();
  }
  valuehash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), valuehash);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MarkerDigest.valueHash)
}

// -------------------------------------------------------------------

// MarkerMultiDigest

// required int32 markerId = 1;
inline bool MarkerMultiDigest::has_markerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarkerMultiDigest::set_has_markerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarkerMultiDigest::clear_has_markerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarkerMultiDigest::clear_markerid() {
  markerid_ = 0;
  clear_has_markerid();
}
inline ::google::protobuf::int32 MarkerMultiDigest::markerid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkerMultiDigest.markerId)
  return markerid_;
}
inline void MarkerMultiDigest::set_markerid(::google::protobuf::int32 value) {
  set_has_markerid();
  markerid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkerMultiDigest.markerId)
}

// repeated bytes valueHashes = 2;
inline int MarkerMultiDigest::valuehashes_size() const {
  return valuehashes_.size();
}
inline void MarkerMultiDigest::clear_valuehashes() {
  valuehashes_.Clear();
}
inline const ::std::string& MarkerMultiDigest::valuehashes(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
  return valuehashes_.Get(index);
}
inline ::std::string* MarkerMultiDigest::mutable_valuehashes(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
  return valuehashes_.Mutable(index);
}
inline void MarkerMultiDigest::set_valuehashes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
  valuehashes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MarkerMultiDigest::set_valuehashes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
  valuehashes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MarkerMultiDigest::set_valuehashes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valuehashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
}
inline void MarkerMultiDigest::set_valuehashes(int index, const void* value, size_t size) {
  valuehashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
}
inline ::std::string* MarkerMultiDigest::add_valuehashes() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
  return valuehashes_.Add();
}
inline void MarkerMultiDigest::add_valuehashes(const ::std::string& value) {
  valuehashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
}
#if LANG_CXX11
inline void MarkerMultiDigest::add_valuehashes(::std::string&& value) {
  valuehashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
}
#endif
inline void MarkerMultiDigest::add_valuehashes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valuehashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
}
inline void MarkerMultiDigest::add_valuehashes(const void* value, size_t size) {
  valuehashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MarkerMultiDigest::valuehashes() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
  return valuehashes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MarkerMultiDigest::mutable_valuehashes() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.MarkerMultiDigest.valueHashes)
  return &valuehashes_;
}

// -------------------------------------------------------------------

// CustomFieldMarkerDigest

// required string fieldName = 1;
inline bool CustomFieldMarkerDigest::has_fieldname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CustomFieldMarkerDigest::set_has_fieldname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CustomFieldMarkerDigest::clear_has_fieldname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CustomFieldMarkerDigest::clear_fieldname() {
  fieldname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fieldname();
}
inline const ::std::string& CustomFieldMarkerDigest::fieldname() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName)
  return fieldname_.GetNoArena();
}
inline void CustomFieldMarkerDigest::set_fieldname(const ::std::string& value) {
  set_has_fieldname();
  fieldname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName)
}
#if LANG_CXX11
inline void CustomFieldMarkerDigest::set_fieldname(::std::string&& value) {
  set_has_fieldname();
  fieldname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName)
}
#endif
inline void CustomFieldMarkerDigest::set_fieldname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fieldname();
  fieldname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName)
}
inline void CustomFieldMarkerDigest::set_fieldname(const char* value, size_t size) {
  set_has_fieldname();
  fieldname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName)
}
inline ::std::string* CustomFieldMarkerDigest::mutable_fieldname() {
  set_has_fieldname();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName)
  return fieldname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomFieldMarkerDigest::release_fieldname() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName)
  clear_has_fieldname();
  return fieldname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomFieldMarkerDigest::set_allocated_fieldname(::std::string* fieldname) {
  if (fieldname != NULL) {
    set_has_fieldname();
  } else {
    clear_has_fieldname();
  }
  fieldname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fieldname);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldName)
}

// optional .ru.mail.go.webbase.blobs.MarkerDigest fieldValue = 2;
inline bool CustomFieldMarkerDigest::has_fieldvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CustomFieldMarkerDigest::set_has_fieldvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CustomFieldMarkerDigest::clear_has_fieldvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CustomFieldMarkerDigest::clear_fieldvalue() {
  if (fieldvalue_ != NULL) fieldvalue_->::ru::mail::go::webbase::blobs::MarkerDigest::Clear();
  clear_has_fieldvalue();
}
inline const ::ru::mail::go::webbase::blobs::MarkerDigest& CustomFieldMarkerDigest::fieldvalue() const {
  const ::ru::mail::go::webbase::blobs::MarkerDigest* p = fieldvalue_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldValue)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::MarkerDigest*>(
      &::ru::mail::go::webbase::blobs::_MarkerDigest_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::MarkerDigest* CustomFieldMarkerDigest::mutable_fieldvalue() {
  set_has_fieldvalue();
  if (fieldvalue_ == NULL) {
    fieldvalue_ = new ::ru::mail::go::webbase::blobs::MarkerDigest;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldValue)
  return fieldvalue_;
}
inline ::ru::mail::go::webbase::blobs::MarkerDigest* CustomFieldMarkerDigest::release_fieldvalue() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldValue)
  clear_has_fieldvalue();
  ::ru::mail::go::webbase::blobs::MarkerDigest* temp = fieldvalue_;
  fieldvalue_ = NULL;
  return temp;
}
inline void CustomFieldMarkerDigest::set_allocated_fieldvalue(::ru::mail::go::webbase::blobs::MarkerDigest* fieldvalue) {
  delete fieldvalue_;
  fieldvalue_ = fieldvalue;
  if (fieldvalue) {
    set_has_fieldvalue();
  } else {
    clear_has_fieldvalue();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CustomFieldMarkerDigest.fieldValue)
}

// -------------------------------------------------------------------

// CustomFieldMarkerDigests

// repeated .ru.mail.go.webbase.blobs.CustomFieldMarkerDigest items = 1;
inline int CustomFieldMarkerDigests::items_size() const {
  return items_.size();
}
inline void CustomFieldMarkerDigests::clear_items() {
  items_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigest& CustomFieldMarkerDigests::items(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests.items)
  return items_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigest* CustomFieldMarkerDigests::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests.items)
  return items_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigest* CustomFieldMarkerDigests::add_items() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigest >*
CustomFieldMarkerDigests::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigest >&
CustomFieldMarkerDigests::items() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.CustomFieldMarkerDigests.items)
  return items_;
}

// -------------------------------------------------------------------

// LayerMarkerDigest

// required int32 markerId = 1;
inline bool LayerMarkerDigest::has_markerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerMarkerDigest::set_has_markerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerMarkerDigest::clear_has_markerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerMarkerDigest::clear_markerid() {
  markerid_ = 0;
  clear_has_markerid();
}
inline ::google::protobuf::int32 LayerMarkerDigest::markerid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LayerMarkerDigest.markerId)
  return markerid_;
}
inline void LayerMarkerDigest::set_markerid(::google::protobuf::int32 value) {
  set_has_markerid();
  markerid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.LayerMarkerDigest.markerId)
}

// repeated int32 valueHashes = 2;
inline int LayerMarkerDigest::valuehashes_size() const {
  return valuehashes_.size();
}
inline void LayerMarkerDigest::clear_valuehashes() {
  valuehashes_.Clear();
}
inline ::google::protobuf::int32 LayerMarkerDigest::valuehashes(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LayerMarkerDigest.valueHashes)
  return valuehashes_.Get(index);
}
inline void LayerMarkerDigest::set_valuehashes(int index, ::google::protobuf::int32 value) {
  valuehashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.LayerMarkerDigest.valueHashes)
}
inline void LayerMarkerDigest::add_valuehashes(::google::protobuf::int32 value) {
  valuehashes_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.LayerMarkerDigest.valueHashes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LayerMarkerDigest::valuehashes() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.LayerMarkerDigest.valueHashes)
  return valuehashes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LayerMarkerDigest::mutable_valuehashes() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.LayerMarkerDigest.valueHashes)
  return &valuehashes_;
}

// -------------------------------------------------------------------

// SiliconDocParserInfoDigest

// repeated .ru.mail.go.webbase.blobs.MarkerDigest title = 1;
inline int SiliconDocParserInfoDigest::title_size() const {
  return title_.size();
}
inline void SiliconDocParserInfoDigest::clear_title() {
  title_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::MarkerDigest& SiliconDocParserInfoDigest::title(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.title)
  return title_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::MarkerDigest* SiliconDocParserInfoDigest::mutable_title(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.title)
  return title_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::MarkerDigest* SiliconDocParserInfoDigest::add_title() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.title)
  return title_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >*
SiliconDocParserInfoDigest::mutable_title() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.title)
  return &title_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >&
SiliconDocParserInfoDigest::title() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.title)
  return title_;
}

// repeated .ru.mail.go.webbase.blobs.MarkerDigest description = 2;
inline int SiliconDocParserInfoDigest::description_size() const {
  return description_.size();
}
inline void SiliconDocParserInfoDigest::clear_description() {
  description_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::MarkerDigest& SiliconDocParserInfoDigest::description(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.description)
  return description_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::MarkerDigest* SiliconDocParserInfoDigest::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.description)
  return description_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::MarkerDigest* SiliconDocParserInfoDigest::add_description() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.description)
  return description_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >*
SiliconDocParserInfoDigest::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.description)
  return &description_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >&
SiliconDocParserInfoDigest::description() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.description)
  return description_;
}

// repeated .ru.mail.go.webbase.blobs.MarkerDigest body = 3;
inline int SiliconDocParserInfoDigest::body_size() const {
  return body_.size();
}
inline void SiliconDocParserInfoDigest::clear_body() {
  body_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::MarkerDigest& SiliconDocParserInfoDigest::body(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.body)
  return body_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::MarkerDigest* SiliconDocParserInfoDigest::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.body)
  return body_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::MarkerDigest* SiliconDocParserInfoDigest::add_body() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.body)
  return body_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >*
SiliconDocParserInfoDigest::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.body)
  return &body_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >&
SiliconDocParserInfoDigest::body() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.body)
  return body_;
}

// repeated .ru.mail.go.webbase.blobs.MarkerDigest mainImageUrl = 4;
inline int SiliconDocParserInfoDigest::mainimageurl_size() const {
  return mainimageurl_.size();
}
inline void SiliconDocParserInfoDigest::clear_mainimageurl() {
  mainimageurl_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::MarkerDigest& SiliconDocParserInfoDigest::mainimageurl(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.mainImageUrl)
  return mainimageurl_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::MarkerDigest* SiliconDocParserInfoDigest::mutable_mainimageurl(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.mainImageUrl)
  return mainimageurl_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::MarkerDigest* SiliconDocParserInfoDigest::add_mainimageurl() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.mainImageUrl)
  return mainimageurl_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >*
SiliconDocParserInfoDigest::mutable_mainimageurl() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.mainImageUrl)
  return &mainimageurl_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerDigest >&
SiliconDocParserInfoDigest::mainimageurl() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.mainImageUrl)
  return mainimageurl_;
}

// repeated .ru.mail.go.webbase.blobs.MarkerMultiDigest imageGalleryUrls = 5;
inline int SiliconDocParserInfoDigest::imagegalleryurls_size() const {
  return imagegalleryurls_.size();
}
inline void SiliconDocParserInfoDigest::clear_imagegalleryurls() {
  imagegalleryurls_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::MarkerMultiDigest& SiliconDocParserInfoDigest::imagegalleryurls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.imageGalleryUrls)
  return imagegalleryurls_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::MarkerMultiDigest* SiliconDocParserInfoDigest::mutable_imagegalleryurls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.imageGalleryUrls)
  return imagegalleryurls_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::MarkerMultiDigest* SiliconDocParserInfoDigest::add_imagegalleryurls() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.imageGalleryUrls)
  return imagegalleryurls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerMultiDigest >*
SiliconDocParserInfoDigest::mutable_imagegalleryurls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.imageGalleryUrls)
  return &imagegalleryurls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerMultiDigest >&
SiliconDocParserInfoDigest::imagegalleryurls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.imageGalleryUrls)
  return imagegalleryurls_;
}

// repeated .ru.mail.go.webbase.blobs.MarkerMultiDigest videoUrls = 6;
inline int SiliconDocParserInfoDigest::videourls_size() const {
  return videourls_.size();
}
inline void SiliconDocParserInfoDigest::clear_videourls() {
  videourls_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::MarkerMultiDigest& SiliconDocParserInfoDigest::videourls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.videoUrls)
  return videourls_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::MarkerMultiDigest* SiliconDocParserInfoDigest::mutable_videourls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.videoUrls)
  return videourls_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::MarkerMultiDigest* SiliconDocParserInfoDigest::add_videourls() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.videoUrls)
  return videourls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerMultiDigest >*
SiliconDocParserInfoDigest::mutable_videourls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.videoUrls)
  return &videourls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MarkerMultiDigest >&
SiliconDocParserInfoDigest::videourls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.videoUrls)
  return videourls_;
}

// optional .ru.mail.go.webbase.blobs.CustomFieldMarkerDigests customFields = 7;
inline bool SiliconDocParserInfoDigest::has_customfields() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconDocParserInfoDigest::set_has_customfields() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconDocParserInfoDigest::clear_has_customfields() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconDocParserInfoDigest::clear_customfields() {
  if (customfields_ != NULL) customfields_->::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests::Clear();
  clear_has_customfields();
}
inline const ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests& SiliconDocParserInfoDigest::customfields() const {
  const ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests* p = customfields_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.customFields)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests*>(
      &::ru::mail::go::webbase::blobs::_CustomFieldMarkerDigests_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests* SiliconDocParserInfoDigest::mutable_customfields() {
  set_has_customfields();
  if (customfields_ == NULL) {
    customfields_ = new ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.customFields)
  return customfields_;
}
inline ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests* SiliconDocParserInfoDigest::release_customfields() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.customFields)
  clear_has_customfields();
  ::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests* temp = customfields_;
  customfields_ = NULL;
  return temp;
}
inline void SiliconDocParserInfoDigest::set_allocated_customfields(::ru::mail::go::webbase::blobs::CustomFieldMarkerDigests* customfields) {
  delete customfields_;
  customfields_ = customfields;
  if (customfields) {
    set_has_customfields();
  } else {
    clear_has_customfields();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.customFields)
}

// repeated .ru.mail.go.webbase.blobs.LayerMarkerDigest layer = 8;
inline int SiliconDocParserInfoDigest::layer_size() const {
  return layer_.size();
}
inline void SiliconDocParserInfoDigest::clear_layer() {
  layer_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::LayerMarkerDigest& SiliconDocParserInfoDigest::layer(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.layer)
  return layer_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::LayerMarkerDigest* SiliconDocParserInfoDigest::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.layer)
  return layer_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::LayerMarkerDigest* SiliconDocParserInfoDigest::add_layer() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.layer)
  return layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::LayerMarkerDigest >*
SiliconDocParserInfoDigest::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.layer)
  return &layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::LayerMarkerDigest >&
SiliconDocParserInfoDigest::layer() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconDocParserInfoDigest.layer)
  return layer_;
}

// -------------------------------------------------------------------

// KeyValuePair

// optional string Key = 1;
inline bool KeyValuePair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValuePair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValuePair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValuePair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.KeyValuePair.Key)
  return key_.GetNoArena();
}
inline void KeyValuePair::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.KeyValuePair.Key)
}
#if LANG_CXX11
inline void KeyValuePair::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.KeyValuePair.Key)
}
#endif
inline void KeyValuePair::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.KeyValuePair.Key)
}
inline void KeyValuePair::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.KeyValuePair.Key)
}
inline ::std::string* KeyValuePair::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.KeyValuePair.Key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.KeyValuePair.Key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValuePair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.KeyValuePair.Key)
}

// optional string Value = 2;
inline bool KeyValuePair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValuePair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyValuePair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyValuePair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.KeyValuePair.Value)
  return value_.GetNoArena();
}
inline void KeyValuePair::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.KeyValuePair.Value)
}
#if LANG_CXX11
inline void KeyValuePair::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.KeyValuePair.Value)
}
#endif
inline void KeyValuePair::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.KeyValuePair.Value)
}
inline void KeyValuePair::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.KeyValuePair.Value)
}
inline ::std::string* KeyValuePair::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.KeyValuePair.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.KeyValuePair.Value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValuePair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.KeyValuePair.Value)
}

// -------------------------------------------------------------------

// ProvidersParams

// repeated .ru.mail.go.webbase.blobs.KeyValuePair keyValuePairs = 1;
inline int ProvidersParams::keyvaluepairs_size() const {
  return keyvaluepairs_.size();
}
inline void ProvidersParams::clear_keyvaluepairs() {
  keyvaluepairs_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::KeyValuePair& ProvidersParams::keyvaluepairs(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ProvidersParams.keyValuePairs)
  return keyvaluepairs_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::KeyValuePair* ProvidersParams::mutable_keyvaluepairs(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ProvidersParams.keyValuePairs)
  return keyvaluepairs_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::KeyValuePair* ProvidersParams::add_keyvaluepairs() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ProvidersParams.keyValuePairs)
  return keyvaluepairs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::KeyValuePair >*
ProvidersParams::mutable_keyvaluepairs() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ProvidersParams.keyValuePairs)
  return &keyvaluepairs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::KeyValuePair >&
ProvidersParams::keyvaluepairs() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ProvidersParams.keyValuePairs)
  return keyvaluepairs_;
}

// -------------------------------------------------------------------

// CustomField

// required string Name = 1;
inline bool CustomField::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CustomField::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CustomField::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CustomField::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CustomField::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomField.Name)
  return name_.GetNoArena();
}
inline void CustomField::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CustomField.Name)
}
#if LANG_CXX11
inline void CustomField::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CustomField.Name)
}
#endif
inline void CustomField::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CustomField.Name)
}
inline void CustomField::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CustomField.Name)
}
inline ::std::string* CustomField::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomField.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomField::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CustomField.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomField::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CustomField.Name)
}

// optional string Value = 2;
inline bool CustomField::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CustomField::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CustomField::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CustomField::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& CustomField::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomField.Value)
  return value_.GetNoArena();
}
inline void CustomField::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CustomField.Value)
}
#if LANG_CXX11
inline void CustomField::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CustomField.Value)
}
#endif
inline void CustomField::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CustomField.Value)
}
inline void CustomField::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CustomField.Value)
}
inline ::std::string* CustomField::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomField.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomField::release_value() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CustomField.Value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomField::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CustomField.Value)
}

// -------------------------------------------------------------------

// CustomFields

// repeated .ru.mail.go.webbase.blobs.CustomField items = 1;
inline int CustomFields::items_size() const {
  return items_.size();
}
inline void CustomFields::clear_items() {
  items_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::CustomField& CustomFields::items(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomFields.items)
  return items_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::CustomField* CustomFields::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomFields.items)
  return items_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::CustomField* CustomFields::add_items() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.CustomFields.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CustomField >*
CustomFields::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.CustomFields.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CustomField >&
CustomFields::items() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.CustomFields.items)
  return items_;
}

// -------------------------------------------------------------------

// SiliconeNewsTagsData

// repeated .ru.mail.go.webbase.blobs.SiliconeNewsTagData tags = 1;
inline int SiliconeNewsTagsData::tags_size() const {
  return tags_.size();
}
inline void SiliconeNewsTagsData::clear_tags() {
  tags_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::SiliconeNewsTagData& SiliconeNewsTagsData::tags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeNewsTagsData.tags)
  return tags_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconeNewsTagData* SiliconeNewsTagsData::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeNewsTagsData.tags)
  return tags_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconeNewsTagData* SiliconeNewsTagsData::add_tags() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconeNewsTagsData.tags)
  return tags_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeNewsTagData >*
SiliconeNewsTagsData::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconeNewsTagsData.tags)
  return &tags_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeNewsTagData >&
SiliconeNewsTagsData::tags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconeNewsTagsData.tags)
  return tags_;
}

// -------------------------------------------------------------------

// SiliconeNewsTagData

// required int32 id = 1;
inline bool SiliconeNewsTagData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiliconeNewsTagData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiliconeNewsTagData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiliconeNewsTagData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SiliconeNewsTagData::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeNewsTagData.id)
  return id_;
}
inline void SiliconeNewsTagData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeNewsTagData.id)
}

// optional string name = 2;
inline bool SiliconeNewsTagData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconeNewsTagData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconeNewsTagData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconeNewsTagData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SiliconeNewsTagData::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeNewsTagData.name)
  return name_.GetNoArena();
}
inline void SiliconeNewsTagData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeNewsTagData.name)
}
#if LANG_CXX11
inline void SiliconeNewsTagData::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeNewsTagData.name)
}
#endif
inline void SiliconeNewsTagData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeNewsTagData.name)
}
inline void SiliconeNewsTagData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeNewsTagData.name)
}
inline ::std::string* SiliconeNewsTagData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeNewsTagData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeNewsTagData::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeNewsTagData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeNewsTagData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeNewsTagData.name)
}

// -------------------------------------------------------------------

// SiliconeNewsStoriesData

// repeated .ru.mail.go.webbase.blobs.SiliconeNewsStoryData stories = 1;
inline int SiliconeNewsStoriesData::stories_size() const {
  return stories_.size();
}
inline void SiliconeNewsStoriesData::clear_stories() {
  stories_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::SiliconeNewsStoryData& SiliconeNewsStoriesData::stories(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData.stories)
  return stories_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconeNewsStoryData* SiliconeNewsStoriesData::mutable_stories(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData.stories)
  return stories_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::SiliconeNewsStoryData* SiliconeNewsStoriesData::add_stories() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData.stories)
  return stories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeNewsStoryData >*
SiliconeNewsStoriesData::mutable_stories() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData.stories)
  return &stories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiliconeNewsStoryData >&
SiliconeNewsStoriesData::stories() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiliconeNewsStoriesData.stories)
  return stories_;
}

// -------------------------------------------------------------------

// SiliconeNewsStoryData

// required int32 id = 1;
inline bool SiliconeNewsStoryData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiliconeNewsStoryData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiliconeNewsStoryData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiliconeNewsStoryData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SiliconeNewsStoryData::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.id)
  return id_;
}
inline void SiliconeNewsStoryData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.id)
}

// optional string name = 2;
inline bool SiliconeNewsStoryData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiliconeNewsStoryData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiliconeNewsStoryData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiliconeNewsStoryData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SiliconeNewsStoryData::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name)
  return name_.GetNoArena();
}
inline void SiliconeNewsStoryData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name)
}
#if LANG_CXX11
inline void SiliconeNewsStoryData::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name)
}
#endif
inline void SiliconeNewsStoryData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name)
}
inline void SiliconeNewsStoryData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name)
}
inline ::std::string* SiliconeNewsStoryData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiliconeNewsStoryData::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiliconeNewsStoryData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SiliconeNewsStoryData.name)
}

// -------------------------------------------------------------------

// RisksFields

// optional float eroScore = 1;
inline bool RisksFields::has_eroscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RisksFields::set_has_eroscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RisksFields::clear_has_eroscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RisksFields::clear_eroscore() {
  eroscore_ = 0;
  clear_has_eroscore();
}
inline float RisksFields::eroscore() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RisksFields.eroScore)
  return eroscore_;
}
inline void RisksFields::set_eroscore(float value) {
  set_has_eroscore();
  eroscore_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RisksFields.eroScore)
}

// optional float pornoScore = 2;
inline bool RisksFields::has_pornoscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RisksFields::set_has_pornoscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RisksFields::clear_has_pornoscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RisksFields::clear_pornoscore() {
  pornoscore_ = 0;
  clear_has_pornoscore();
}
inline float RisksFields::pornoscore() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RisksFields.pornoScore)
  return pornoscore_;
}
inline void RisksFields::set_pornoscore(float value) {
  set_has_pornoscore();
  pornoscore_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RisksFields.pornoScore)
}

// optional float safeContent = 3;
inline bool RisksFields::has_safecontent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RisksFields::set_has_safecontent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RisksFields::clear_has_safecontent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RisksFields::clear_safecontent() {
  safecontent_ = 0;
  clear_has_safecontent();
}
inline float RisksFields::safecontent() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RisksFields.safeContent)
  return safecontent_;
}
inline void RisksFields::set_safecontent(float value) {
  set_has_safecontent();
  safecontent_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RisksFields.safeContent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::SiliconFetchUrl_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::SiliconFetchUrl_Type>() {
  return ::ru::mail::go::webbase::blobs::SiliconFetchUrl_Type_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::SiliconFetchUrl_SourceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::SiliconFetchUrl_SourceType>() {
  return ::ru::mail::go::webbase::blobs::SiliconFetchUrl_SourceType_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::SiliconFetchUrl_MobileVersion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::SiliconFetchUrl_MobileVersion>() {
  return ::ru::mail::go::webbase::blobs::SiliconFetchUrl_MobileVersion_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::SiliconeBodyPart_PartName> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::SiliconeBodyPart_PartName>() {
  return ::ru::mail::go::webbase::blobs::SiliconeBodyPart_PartName_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::SiliconSourceMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::SiliconSourceMode>() {
  return ::ru::mail::go::webbase::blobs::SiliconSourceMode_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::SiliconSourceProvider> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::SiliconSourceProvider>() {
  return ::ru::mail::go::webbase::blobs::SiliconSourceProvider_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::ImageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::ImageType>() {
  return ::ru::mail::go::webbase::blobs::ImageType_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::SourceParsingError> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::SourceParsingError>() {
  return ::ru::mail::go::webbase::blobs::SourceParsingError_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::PostParsingResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::PostParsingResult>() {
  return ::ru::mail::go::webbase::blobs::PostParsingResult_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::PostParsingError> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::PostParsingError>() {
  return ::ru::mail::go::webbase::blobs::PostParsingError_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::ImageProcessResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::ImageProcessResult>() {
  return ::ru::mail::go::webbase::blobs::ImageProcessResult_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::ImageProcessError> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::ImageProcessError>() {
  return ::ru::mail::go::webbase::blobs::ImageProcessError_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::SiliconeVideoType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::SiliconeVideoType>() {
  return ::ru::mail::go::webbase::blobs::SiliconeVideoType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_silicon_5fdata_2eproto__INCLUDED
