// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sputnik_logs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sputnik_logs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace SputnikRanker {
class TransitionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transition>
     _instance;
} _Transition_default_instance_;
class BodyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Body>
     _instance;
} _Body_default_instance_;
class TransitionExtendedDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransitionExtended>
     _instance;
} _TransitionExtended_default_instance_;
class HitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Hit>
     _instance;
} _Hit_default_instance_;
class RedirectDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Redirect>
     _instance;
} _Redirect_default_instance_;
class Qlinks_QlinkDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Qlinks_Qlink>
     _instance;
} _Qlinks_Qlink_default_instance_;
class QlinksDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Qlinks>
     _instance;
} _Qlinks_default_instance_;
class SessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Session>
     _instance;
} _Session_default_instance_;
class ImageBodyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageBody>
     _instance;
} _ImageBody_default_instance_;
class VideoBodyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoBody>
     _instance;
} _VideoBody_default_instance_;
class BrowseRankDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BrowseRankData>
     _instance;
} _BrowseRankData_default_instance_;
class UserRankUidDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserRankUid>
     _instance;
} _UserRankUid_default_instance_;
class UserRankValuesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserRankValues>
     _instance;
} _UserRankValues_default_instance_;
class UserRankDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserRankData>
     _instance;
} _UserRankData_default_instance_;
class ForumedSegmentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ForumedSegment>
     _instance;
} _ForumedSegment_default_instance_;
class ForumedSekiteiDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ForumedSekitei>
     _instance;
} _ForumedSekitei_default_instance_;
class SessionSpcDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SessionSpc>
     _instance;
} _SessionSpc_default_instance_;
class RedirectArrayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RedirectArray>
     _instance;
} _RedirectArray_default_instance_;
class SnippetDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Snippet>
     _instance;
} _Snippet_default_instance_;
class SnippetSessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SnippetSession>
     _instance;
} _SnippetSession_default_instance_;
class FreshUrlDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FreshUrl>
     _instance;
} _FreshUrl_default_instance_;
class NewsInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NewsInfo>
     _instance;
} _NewsInfo_default_instance_;

namespace protobuf_sputnik_5flogs_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[22];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, referrer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, loadtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, hacked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, serpinfo_),
  6,
  0,
  1,
  2,
  3,
  7,
  8,
  4,
  9,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, urls_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionExtended, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionExtended, transition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionExtended, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionExtended, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionExtended, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionExtended, query_),
  3,
  0,
  1,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, loadtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, hacked_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Redirect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Redirect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Redirect, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Redirect, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Redirect, fromstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Redirect, tostatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Redirect, type_),
  0,
  1,
  3,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qlinks_Qlink, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qlinks_Qlink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qlinks_Qlink, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qlinks_Qlink, geo_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qlinks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qlinks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qlinks, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qlinks, fromstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qlinks, qlink_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qlinks, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qlinks, type_),
  0,
  2,
  ~0u,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, regions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, redirect_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageBody, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageBody, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageBody, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageBody, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageBody, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageBody, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageBody, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageBody, query_),
  4,
  0,
  1,
  2,
  6,
  5,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoBody, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoBody, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoBody, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoBody, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoBody, uid_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRankData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRankData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRankData, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRankData, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRankData, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRankData, dwelltime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRankData, loadtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRankData, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRankData, numberofsessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRankData, numberofloads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRankData, positioncoef_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRankData, timecoef_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRankData, browserank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRankData, filteredbrowserank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRankData, pagesinsite_),
  0,
  12,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankUid, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankUid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankUid, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankUid, repeat_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankValues, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankValues, filtermask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankValues, uid_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankData, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankData, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankData, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankData, numberofusers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankData, values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankData, hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRankData, original_urls_),
  0,
  5,
  2,
  3,
  1,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForumedSegment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForumedSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForumedSegment, pattern_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForumedSegment, isforum_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForumedSekitei, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForumedSekitei, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForumedSekitei, segments_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionSpc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionSpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionSpc, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionSpc, rawquery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionSpc, proposedquery_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedirectArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedirectArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedirectArray, redirects_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snippet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snippet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snippet, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snippet, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snippet, snippet_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnippetSession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnippetSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnippetSession, snippets_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshUrl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshUrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshUrl, url_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsInfo, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsInfo, reg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsInfo, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsInfo, show_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsInfo, show_news_mixin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsInfo, show_fresh_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsInfo, fresh_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsInfo, total_fresh_urls_),
  0,
  2,
  1,
  3,
  4,
  5,
  ~0u,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(Transition)},
  { 25, 31, sizeof(Body)},
  { 32, 42, sizeof(TransitionExtended)},
  { 47, 56, sizeof(Hit)},
  { 60, 70, sizeof(Redirect)},
  { 75, 82, sizeof(Qlinks_Qlink)},
  { 84, 94, sizeof(Qlinks)},
  { 99, 109, sizeof(Session)},
  { 114, 126, sizeof(ImageBody)},
  { 133, 142, sizeof(VideoBody)},
  { 146, 164, sizeof(BrowseRankData)},
  { 177, 184, sizeof(UserRankUid)},
  { 186, 193, sizeof(UserRankValues)},
  { 195, 207, sizeof(UserRankData)},
  { 214, 221, sizeof(ForumedSegment)},
  { 223, 229, sizeof(ForumedSekitei)},
  { 230, 238, sizeof(SessionSpc)},
  { 241, 247, sizeof(RedirectArray)},
  { 248, 256, sizeof(Snippet)},
  { 259, 265, sizeof(SnippetSession)},
  { 266, 272, sizeof(FreshUrl)},
  { 273, 286, sizeof(NewsInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Body_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransitionExtended_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Hit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Redirect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Qlinks_Qlink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Qlinks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Session_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageBody_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoBody_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BrowseRankData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserRankUid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserRankValues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserRankData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForumedSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForumedSekitei_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SessionSpc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RedirectArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Snippet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnippetSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FreshUrl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NewsInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sputnik_logs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 22);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Transition_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transition_default_instance_);_Body_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Body_default_instance_);_TransitionExtended_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransitionExtended_default_instance_);_Hit_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Hit_default_instance_);_Redirect_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Redirect_default_instance_);_Qlinks_Qlink_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Qlinks_Qlink_default_instance_);_Qlinks_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Qlinks_default_instance_);_Session_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Session_default_instance_);_ImageBody_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageBody_default_instance_);_VideoBody_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoBody_default_instance_);_BrowseRankData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BrowseRankData_default_instance_);_UserRankUid_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserRankUid_default_instance_);_UserRankValues_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserRankValues_default_instance_);_UserRankData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserRankData_default_instance_);_ForumedSegment_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ForumedSegment_default_instance_);_ForumedSekitei_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ForumedSekitei_default_instance_);_SessionSpc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SessionSpc_default_instance_);_RedirectArray_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RedirectArray_default_instance_);_Snippet_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Snippet_default_instance_);_SnippetSession_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SnippetSession_default_instance_);_FreshUrl_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FreshUrl_default_instance_);_NewsInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NewsInfo_default_instance_);_TransitionExtended_default_instance_._instance.get_mutable()->transition_ = const_cast< ::ru::mail::go::webbase::SputnikRanker::Transition*>(
      ::ru::mail::go::webbase::SputnikRanker::Transition::internal_default_instance());
  _TransitionExtended_default_instance_._instance.get_mutable()->body_ = const_cast< ::ru::mail::go::webbase::SputnikRanker::Body*>(
      ::ru::mail::go::webbase::SputnikRanker::Body::internal_default_instance());
  _UserRankData_default_instance_._instance.get_mutable()->values_ = const_cast< ::ru::mail::go::webbase::SputnikRanker::UserRankValues*>(
      ::ru::mail::go::webbase::SputnikRanker::UserRankValues::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022sputnik_logs.proto\022 ru.mail.go.webbase"
      ".SputnikRanker\"\246\001\n\nTransition\022\014\n\004time\030\001 "
      "\002(\004\022\020\n\010referrer\030\002 \002(\t\022\013\n\003url\030\003 \002(\t\022\014\n\004bo"
      "dy\030\004 \001(\014\022\n\n\002ip\030\005 \001(\t\022\020\n\010loadTime\030\006 \001(\004\022\016"
      "\n\006hacked\030\007 \001(\010\022\r\n\005title\030\010 \001(\t\022\016\n\006status\030"
      "\t \001(\r\022\020\n\010serpInfo\030\n \001(\t\"\024\n\004Body\022\014\n\004urls\030"
      "\001 \003(\t\"\267\001\n\022TransitionExtended\022@\n\ntransiti"
      "on\030\001 \002(\0132,.ru.mail.go.webbase.SputnikRan"
      "ker.Transition\022\013\n\003uid\030\002 \002(\t\022\r\n\005email\030\003 \002"
      "(\t\0224\n\004body\030\004 \001(\0132&.ru.mail.go.webbase.Sp"
      "utnikRanker.Body\022\r\n\005query\030\005 \001(\t\"B\n\003Hit\022\014"
      "\n\004time\030\001 \002(\004\022\013\n\003url\030\002 \002(\t\022\020\n\010loadTime\030\003 "
      "\001(\004\022\016\n\006hacked\030\004 \001(\010\"\210\003\n\010Redirect\022\014\n\004from"
      "\030\001 \002(\t\022\n\n\002to\030\002 \002(\t\022Q\n\nfromStatus\030\003 \001(\01624"
      ".ru.mail.go.webbase.SputnikRanker.Redire"
      "ct.UrlStatus:\007Unknown\022O\n\010toStatus\030\004 \001(\0162"
      "4.ru.mail.go.webbase.SputnikRanker.Redir"
      "ect.UrlStatus:\007Unknown\022E\n\004type\030\005 \001(\0162/.r"
      "u.mail.go.webbase.SputnikRanker.Redirect"
      ".Type:\006NoInfo\"5\n\tUrlStatus\022\013\n\007InIndex\020\000\022"
      "\016\n\nNotInIndex\020\001\022\013\n\007Unknown\020\002\"@\n\004Type\022\016\n\n"
      "Redirected\020\000\022\r\n\tCanonical\020\001\022\r\n\tDuplicate"
      "\020\002\022\n\n\006NoInfo\020\003\"\217\002\n\006Qlinks\022\014\n\004from\030\001 \002(\t\022"
      "H\n\nfromStatus\030\002 \002(\01624.ru.mail.go.webbase"
      ".SputnikRanker.Redirect.UrlStatus\022=\n\005qli"
      "nk\030\003 \003(\0132..ru.mail.go.webbase.SputnikRan"
      "ker.Qlinks.Qlink\022\n\n\002to\030\004 \002(\t\022=\n\004type\030\005 \002"
      "(\0162/.ru.mail.go.webbase.SputnikRanker.Re"
      "direct.Type\032#\n\005Qlink\022\r\n\005query\030\001 \002(\t\022\013\n\003g"
      "eo\030\002 \002(\005\"\250\001\n\007Session\022\013\n\003uid\030\001 \002(\t\0223\n\004hit"
      "s\030\002 \003(\0132%.ru.mail.go.webbase.SputnikRank"
      "er.Hit\022\014\n\004time\030\003 \001(\004\022\017\n\007regions\030\004 \003(\r\022<\n"
      "\010redirect\030\005 \003(\0132*.ru.mail.go.webbase.Spu"
      "tnikRanker.Redirect\"\341\001\n\tImageBody\022\014\n\004tim"
      "e\030\001 \002(\004\022\013\n\003url\030\002 \002(\t\022\014\n\004body\030\003 \002(\014\022\013\n\003ui"
      "d\030\004 \001(\t\022M\n\006source\030\005 \001(\01622.ru.mail.go.web"
      "base.SputnikRanker.ImageBody.Source:\tTel"
      "emetry\022\016\n\006weight\030\006 \001(\r\022\r\n\005query\030\007 \001(\t\"0\n"
      "\006Source\022\013\n\007Unknown\020\000\022\r\n\tTelemetry\020\001\022\n\n\006K"
      "vakin\020\002\"A\n\tVideoBody\022\014\n\004time\030\001 \002(\004\022\013\n\003ur"
      "l\030\002 \002(\t\022\014\n\004body\030\003 \002(\014\022\013\n\003uid\030\004 \001(\t\"\220\002\n\016B"
      "rowseRankData\022\013\n\003url\030\001 \002(\t\022\016\n\006region\030\002 \002"
      "(\r\022\014\n\004time\030\003 \001(\004\022\021\n\tdwellTime\030\004 \001(\001\022\020\n\010l"
      "oadTime\030\005 \001(\001\022\020\n\010position\030\006 \001(\001\022\030\n\020numbe"
      "rOfSessions\030\007 \001(\001\022\025\n\rnumberOfLoads\030\010 \001(\001"
      "\022\024\n\014positionCoef\030\t \001(\001\022\020\n\010timeCoef\030\n \001(\001"
      "\022\022\n\nbrowseRank\030\013 \001(\001\022\032\n\022filteredBrowseRa"
      "nk\030\014 \001(\001\022\023\n\013pagesInSite\030\r \001(\001\"*\n\013UserRan"
      "kUid\022\013\n\003uid\030\001 \002(\t\022\016\n\006repeat\030\002 \002(\001\"`\n\016Use"
      "rRankValues\022\022\n\nfilterMask\030\001 \002(\004\022:\n\003uid\030\002"
      " \003(\0132-.ru.mail.go.webbase.SputnikRanker."
      "UserRankUid\"\267\001\n\014UserRankData\022\013\n\003url\030\001 \002("
      "\t\022\016\n\006region\030\002 \002(\r\022\014\n\004time\030\003 \001(\004\022\025\n\rnumbe"
      "rOfUsers\030\004 \001(\001\022@\n\006values\030\005 \001(\01320.ru.mail"
      ".go.webbase.SputnikRanker.UserRankValues"
      "\022\014\n\004hits\030\006 \001(\004\022\025\n\roriginal_urls\030\007 \003(\t\"2\n"
      "\016ForumedSegment\022\017\n\007pattern\030\001 \002(\t\022\017\n\007isFo"
      "rum\030\002 \002(\010\"T\n\016ForumedSekitei\022B\n\010segments\030"
      "\001 \003(\01320.ru.mail.go.webbase.SputnikRanker"
      ".ForumedSegment\"\247\001\n\nSessionSpc\022\?\n\004type\030\001"
      " \002(\01621.ru.mail.go.webbase.SputnikRanker."
      "SessionSpc.Type\022\020\n\010rawQuery\030\002 \002(\t\022\025\n\rpro"
      "posedQuery\030\003 \001(\t\"/\n\004Type\022\010\n\004None\020\000\022\010\n\004Au"
      "to\020\001\022\010\n\004Sugg\020\002\022\t\n\005Split\020\003\"N\n\rRedirectArr"
      "ay\022=\n\tredirects\030\001 \003(\0132*.ru.mail.go.webba"
      "se.SputnikRanker.Redirect\"6\n\007Snippet\022\013\n\003"
      "url\030\001 \002(\t\022\r\n\005title\030\002 \001(\t\022\017\n\007snippet\030\003 \001("
      "\t\"M\n\016SnippetSession\022;\n\010snippets\030\001 \003(\0132)."
      "ru.mail.go.webbase.SputnikRanker.Snippet"
      "\"\027\n\010FreshUrl\022\013\n\003url\030\001 \002(\t\"\323\001\n\010NewsInfo\022\r"
      "\n\005query\030\001 \002(\t\022\013\n\003reg\030\002 \002(\r\022\021\n\ttimestamp\030"
      "\003 \002(\004\022\014\n\004show\030\004 \002(\r\022\027\n\017show_news_mixin\030\005"
      " \002(\r\022\027\n\017show_fresh_urls\030\006 \002(\r\022>\n\nfresh_u"
      "rls\030\007 \003(\0132*.ru.mail.go.webbase.SputnikRa"
      "nker.FreshUrl\022\030\n\020total_fresh_urls\030\010 \001(\rB"
      "\020B\016TransitionData"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3017);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sputnik_logs.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sputnik_5flogs_2eproto

const ::google::protobuf::EnumDescriptor* Redirect_UrlStatus_descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_enum_descriptors[0];
}
bool Redirect_UrlStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Redirect_UrlStatus Redirect::InIndex;
const Redirect_UrlStatus Redirect::NotInIndex;
const Redirect_UrlStatus Redirect::Unknown;
const Redirect_UrlStatus Redirect::UrlStatus_MIN;
const Redirect_UrlStatus Redirect::UrlStatus_MAX;
const int Redirect::UrlStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Redirect_Type_descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_enum_descriptors[1];
}
bool Redirect_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Redirect_Type Redirect::Redirected;
const Redirect_Type Redirect::Canonical;
const Redirect_Type Redirect::Duplicate;
const Redirect_Type Redirect::NoInfo;
const Redirect_Type Redirect::Type_MIN;
const Redirect_Type Redirect::Type_MAX;
const int Redirect::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ImageBody_Source_descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_enum_descriptors[2];
}
bool ImageBody_Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImageBody_Source ImageBody::Unknown;
const ImageBody_Source ImageBody::Telemetry;
const ImageBody_Source ImageBody::Kvakin;
const ImageBody_Source ImageBody::Source_MIN;
const ImageBody_Source ImageBody::Source_MAX;
const int ImageBody::Source_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SessionSpc_Type_descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_enum_descriptors[3];
}
bool SessionSpc_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SessionSpc_Type SessionSpc::None;
const SessionSpc_Type SessionSpc::Auto;
const SessionSpc_Type SessionSpc::Sugg;
const SessionSpc_Type SessionSpc::Split;
const SessionSpc_Type SessionSpc::Type_MIN;
const SessionSpc_Type SessionSpc::Type_MAX;
const int SessionSpc::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transition::kTimeFieldNumber;
const int Transition::kReferrerFieldNumber;
const int Transition::kUrlFieldNumber;
const int Transition::kBodyFieldNumber;
const int Transition::kIpFieldNumber;
const int Transition::kLoadTimeFieldNumber;
const int Transition::kHackedFieldNumber;
const int Transition::kTitleFieldNumber;
const int Transition::kStatusFieldNumber;
const int Transition::kSerpInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transition::Transition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.Transition)
}
Transition::Transition(const Transition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  referrer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_referrer()) {
    referrer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referrer_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  serpinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serpinfo()) {
    serpinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serpinfo_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&time_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.Transition)
}

void Transition::SharedCtor() {
  _cached_size_ = 0;
  referrer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serpinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&time_)) + sizeof(status_));
}

Transition::~Transition() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.Transition)
  SharedDtor();
}

void Transition::SharedDtor() {
  referrer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serpinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transition::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transition& Transition::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transition* Transition::New(::google::protobuf::Arena* arena) const {
  Transition* n = new Transition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transition::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.Transition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!referrer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*referrer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*body_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!serpinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serpinfo_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&loadtime_) -
        reinterpret_cast<char*>(&time_)) + sizeof(loadtime_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&hacked_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&hacked_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.Transition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string referrer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referrer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->referrer().data(), static_cast<int>(this->referrer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.Transition.referrer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.Transition.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes body = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.Transition.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 loadTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_loadtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &loadtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hacked = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_hacked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hacked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.Transition.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serpInfo = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serpinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serpinfo().data(), static_cast<int>(this->serpinfo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.Transition.serpInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.Transition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.Transition)
  return false;
#undef DO_
}

void Transition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.Transition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // required string referrer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referrer().data(), static_cast<int>(this->referrer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Transition.referrer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->referrer(), output);
  }

  // required string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Transition.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional bytes body = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->body(), output);
  }

  // optional string ip = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Transition.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ip(), output);
  }

  // optional uint64 loadTime = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->loadtime(), output);
  }

  // optional bool hacked = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->hacked(), output);
  }

  // optional string title = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Transition.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->title(), output);
  }

  // optional uint32 status = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->status(), output);
  }

  // optional string serpInfo = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serpinfo().data(), static_cast<int>(this->serpinfo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Transition.serpInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->serpinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.Transition)
}

::google::protobuf::uint8* Transition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.Transition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // required string referrer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referrer().data(), static_cast<int>(this->referrer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Transition.referrer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->referrer(), target);
  }

  // required string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Transition.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional bytes body = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->body(), target);
  }

  // optional string ip = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Transition.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // optional uint64 loadTime = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->loadtime(), target);
  }

  // optional bool hacked = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->hacked(), target);
  }

  // optional string title = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Transition.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->title(), target);
  }

  // optional uint32 status = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->status(), target);
  }

  // optional string serpInfo = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serpinfo().data(), static_cast<int>(this->serpinfo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Transition.serpInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->serpinfo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.Transition)
  return target;
}

size_t Transition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.SputnikRanker.Transition)
  size_t total_size = 0;

  if (has_referrer()) {
    // required string referrer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->referrer());
  }

  if (has_url()) {
    // required string url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_time()) {
    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t Transition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.Transition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000043) ^ 0x00000043) == 0) {  // All required fields are present.
    // required string referrer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->referrer());

    // required string url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 60u) {
    // optional bytes body = 4;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string title = 8;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string serpInfo = 10;
    if (has_serpinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serpinfo());
    }

  }
  // optional uint64 loadTime = 6;
  if (has_loadtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->loadtime());
  }

  if (_has_bits_[8 / 32] & 768u) {
    // optional bool hacked = 7;
    if (has_hacked()) {
      total_size += 1 + 1;
    }

    // optional uint32 status = 9;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.Transition)
  GOOGLE_DCHECK_NE(&from, this);
  const Transition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.Transition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.Transition)
    MergeFrom(*source);
  }
}

void Transition::MergeFrom(const Transition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.Transition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_referrer();
      referrer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referrer_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_serpinfo();
      serpinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serpinfo_);
    }
    if (cached_has_bits & 0x00000040u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000080u) {
      loadtime_ = from.loadtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      hacked_ = from.hacked_;
    }
    if (cached_has_bits & 0x00000200u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.Transition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transition::CopyFrom(const Transition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.Transition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000043) != 0x00000043) return false;
  return true;
}

void Transition::Swap(Transition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transition::InternalSwap(Transition* other) {
  using std::swap;
  referrer_.Swap(&other->referrer_);
  url_.Swap(&other->url_);
  body_.Swap(&other->body_);
  ip_.Swap(&other->ip_);
  title_.Swap(&other->title_);
  serpinfo_.Swap(&other->serpinfo_);
  swap(time_, other->time_);
  swap(loadtime_, other->loadtime_);
  swap(hacked_, other->hacked_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transition::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transition

// required uint64 time = 1;
bool Transition::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Transition::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
void Transition::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void Transition::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 Transition::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.time)
  return time_;
}
void Transition::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.time)
}

// required string referrer = 2;
bool Transition::has_referrer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transition::set_has_referrer() {
  _has_bits_[0] |= 0x00000001u;
}
void Transition::clear_has_referrer() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transition::clear_referrer() {
  referrer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_referrer();
}
const ::std::string& Transition::referrer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.referrer)
  return referrer_.GetNoArena();
}
void Transition::set_referrer(const ::std::string& value) {
  set_has_referrer();
  referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.referrer)
}
#if LANG_CXX11
void Transition::set_referrer(::std::string&& value) {
  set_has_referrer();
  referrer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Transition.referrer)
}
#endif
void Transition::set_referrer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_referrer();
  referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Transition.referrer)
}
void Transition::set_referrer(const char* value, size_t size) {
  set_has_referrer();
  referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Transition.referrer)
}
::std::string* Transition::mutable_referrer() {
  set_has_referrer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Transition.referrer)
  return referrer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transition::release_referrer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Transition.referrer)
  clear_has_referrer();
  return referrer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transition::set_allocated_referrer(::std::string* referrer) {
  if (referrer != NULL) {
    set_has_referrer();
  } else {
    clear_has_referrer();
  }
  referrer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referrer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Transition.referrer)
}

// required string url = 3;
bool Transition::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transition::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void Transition::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transition::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& Transition::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.url)
  return url_.GetNoArena();
}
void Transition::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.url)
}
#if LANG_CXX11
void Transition::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Transition.url)
}
#endif
void Transition::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Transition.url)
}
void Transition::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Transition.url)
}
::std::string* Transition::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Transition.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transition::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Transition.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transition::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Transition.url)
}

// optional bytes body = 4;
bool Transition::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transition::set_has_body() {
  _has_bits_[0] |= 0x00000004u;
}
void Transition::clear_has_body() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transition::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
const ::std::string& Transition::body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.body)
  return body_.GetNoArena();
}
void Transition::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.body)
}
#if LANG_CXX11
void Transition::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Transition.body)
}
#endif
void Transition::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Transition.body)
}
void Transition::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Transition.body)
}
::std::string* Transition::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Transition.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transition::release_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Transition.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transition::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Transition.body)
}

// optional string ip = 5;
bool Transition::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Transition::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
void Transition::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
void Transition::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& Transition::ip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.ip)
  return ip_.GetNoArena();
}
void Transition::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.ip)
}
#if LANG_CXX11
void Transition::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Transition.ip)
}
#endif
void Transition::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Transition.ip)
}
void Transition::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Transition.ip)
}
::std::string* Transition::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Transition.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transition::release_ip() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Transition.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transition::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Transition.ip)
}

// optional uint64 loadTime = 6;
bool Transition::has_loadtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Transition::set_has_loadtime() {
  _has_bits_[0] |= 0x00000080u;
}
void Transition::clear_has_loadtime() {
  _has_bits_[0] &= ~0x00000080u;
}
void Transition::clear_loadtime() {
  loadtime_ = GOOGLE_ULONGLONG(0);
  clear_has_loadtime();
}
::google::protobuf::uint64 Transition::loadtime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.loadTime)
  return loadtime_;
}
void Transition::set_loadtime(::google::protobuf::uint64 value) {
  set_has_loadtime();
  loadtime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.loadTime)
}

// optional bool hacked = 7;
bool Transition::has_hacked() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Transition::set_has_hacked() {
  _has_bits_[0] |= 0x00000100u;
}
void Transition::clear_has_hacked() {
  _has_bits_[0] &= ~0x00000100u;
}
void Transition::clear_hacked() {
  hacked_ = false;
  clear_has_hacked();
}
bool Transition::hacked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.hacked)
  return hacked_;
}
void Transition::set_hacked(bool value) {
  set_has_hacked();
  hacked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.hacked)
}

// optional string title = 8;
bool Transition::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Transition::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
void Transition::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
void Transition::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& Transition::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.title)
  return title_.GetNoArena();
}
void Transition::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.title)
}
#if LANG_CXX11
void Transition::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Transition.title)
}
#endif
void Transition::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Transition.title)
}
void Transition::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Transition.title)
}
::std::string* Transition::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Transition.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transition::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Transition.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transition::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Transition.title)
}

// optional uint32 status = 9;
bool Transition::has_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Transition::set_has_status() {
  _has_bits_[0] |= 0x00000200u;
}
void Transition::clear_has_status() {
  _has_bits_[0] &= ~0x00000200u;
}
void Transition::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 Transition::status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.status)
  return status_;
}
void Transition::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.status)
}

// optional string serpInfo = 10;
bool Transition::has_serpinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Transition::set_has_serpinfo() {
  _has_bits_[0] |= 0x00000020u;
}
void Transition::clear_has_serpinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
void Transition::clear_serpinfo() {
  serpinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serpinfo();
}
const ::std::string& Transition::serpinfo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.serpInfo)
  return serpinfo_.GetNoArena();
}
void Transition::set_serpinfo(const ::std::string& value) {
  set_has_serpinfo();
  serpinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.serpInfo)
}
#if LANG_CXX11
void Transition::set_serpinfo(::std::string&& value) {
  set_has_serpinfo();
  serpinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Transition.serpInfo)
}
#endif
void Transition::set_serpinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serpinfo();
  serpinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Transition.serpInfo)
}
void Transition::set_serpinfo(const char* value, size_t size) {
  set_has_serpinfo();
  serpinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Transition.serpInfo)
}
::std::string* Transition::mutable_serpinfo() {
  set_has_serpinfo();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Transition.serpInfo)
  return serpinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transition::release_serpinfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Transition.serpInfo)
  clear_has_serpinfo();
  return serpinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transition::set_allocated_serpinfo(::std::string* serpinfo) {
  if (serpinfo != NULL) {
    set_has_serpinfo();
  } else {
    clear_has_serpinfo();
  }
  serpinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serpinfo);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Transition.serpInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Body::kUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Body::Body()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.Body)
}
Body::Body(const Body& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.Body)
}

void Body::SharedCtor() {
  _cached_size_ = 0;
}

Body::~Body() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.Body)
  SharedDtor();
}

void Body::SharedDtor() {
}

void Body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Body::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Body& Body::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Body* Body::New(::google::protobuf::Arena* arena) const {
  Body* n = new Body;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Body::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.Body)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.Body)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string urls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urls(this->urls_size() - 1).data(),
            static_cast<int>(this->urls(this->urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.Body.urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.Body)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.Body)
  return false;
#undef DO_
}

void Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.Body)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Body.urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->urls(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.Body)
}

::google::protobuf::uint8* Body::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.Body)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Body.urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->urls(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.Body)
  return target;
}

size_t Body::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.Body)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string urls = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->urls_size());
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->urls(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Body::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.Body)
  GOOGLE_DCHECK_NE(&from, this);
  const Body* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Body>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.Body)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.Body)
    MergeFrom(*source);
  }
}

void Body::MergeFrom(const Body& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.Body)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
}

void Body::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Body::CopyFrom(const Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Body::IsInitialized() const {
  return true;
}

void Body::Swap(Body* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Body::InternalSwap(Body* other) {
  using std::swap;
  urls_.InternalSwap(&other->urls_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Body::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Body

// repeated string urls = 1;
int Body::urls_size() const {
  return urls_.size();
}
void Body::clear_urls() {
  urls_.Clear();
}
const ::std::string& Body::urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Body.urls)
  return urls_.Get(index);
}
::std::string* Body::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Body.urls)
  return urls_.Mutable(index);
}
void Body::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Body.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Body::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Body.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
void Body::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Body.urls)
}
void Body::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Body.urls)
}
::std::string* Body::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.SputnikRanker.Body.urls)
  return urls_.Add();
}
void Body::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.Body.urls)
}
#if LANG_CXX11
void Body::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.Body.urls)
}
#endif
void Body::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.SputnikRanker.Body.urls)
}
void Body::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.SputnikRanker.Body.urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Body::urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.Body.urls)
  return urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Body::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.Body.urls)
  return &urls_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransitionExtended::kTransitionFieldNumber;
const int TransitionExtended::kUidFieldNumber;
const int TransitionExtended::kEmailFieldNumber;
const int TransitionExtended::kBodyFieldNumber;
const int TransitionExtended::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransitionExtended::TransitionExtended()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
}
TransitionExtended::TransitionExtended(const TransitionExtended& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uid()) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email()) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.has_transition()) {
    transition_ = new ::ru::mail::go::webbase::SputnikRanker::Transition(*from.transition_);
  } else {
    transition_ = NULL;
  }
  if (from.has_body()) {
    body_ = new ::ru::mail::go::webbase::SputnikRanker::Body(*from.body_);
  } else {
    body_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
}

void TransitionExtended::SharedCtor() {
  _cached_size_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&body_) -
      reinterpret_cast<char*>(&transition_)) + sizeof(body_));
}

TransitionExtended::~TransitionExtended() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
  SharedDtor();
}

void TransitionExtended::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transition_;
  if (this != internal_default_instance()) delete body_;
}

void TransitionExtended::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransitionExtended::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransitionExtended& TransitionExtended::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransitionExtended* TransitionExtended::New(::google::protobuf::Arena* arena) const {
  TransitionExtended* n = new TransitionExtended;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransitionExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!uid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!email_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*email_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(transition_ != NULL);
      transition_->::ru::mail::go::webbase::SputnikRanker::Transition::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(body_ != NULL);
      body_->::ru::mail::go::webbase::SputnikRanker::Body::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransitionExtended::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.SputnikRanker.Transition transition = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), static_cast<int>(this->uid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string email = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), static_cast<int>(this->email().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.TransitionExtended.email");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.SputnikRanker.Body body = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.TransitionExtended.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
  return false;
#undef DO_
}

void TransitionExtended::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.SputnikRanker.Transition transition = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transition_, output);
  }

  // required string uid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // required string email = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.TransitionExtended.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email(), output);
  }

  // optional .ru.mail.go.webbase.SputnikRanker.Body body = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->body_, output);
  }

  // optional string query = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.TransitionExtended.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
}

::google::protobuf::uint8* TransitionExtended::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.SputnikRanker.Transition transition = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->transition_, deterministic, target);
  }

  // required string uid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }

  // required string email = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.TransitionExtended.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  // optional .ru.mail.go.webbase.SputnikRanker.Body body = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->body_, deterministic, target);
  }

  // optional string query = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.TransitionExtended.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
  return target;
}

size_t TransitionExtended::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
  size_t total_size = 0;

  if (has_uid()) {
    // required string uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  if (has_email()) {
    // required string email = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  if (has_transition()) {
    // required .ru.mail.go.webbase.SputnikRanker.Transition transition = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transition_);
  }

  return total_size;
}
size_t TransitionExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());

    // required string email = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());

    // required .ru.mail.go.webbase.SputnikRanker.Transition transition = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transition_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string query = 5;
  if (has_query()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  // optional .ru.mail.go.webbase.SputnikRanker.Body body = 4;
  if (has_body()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->body_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransitionExtended::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const TransitionExtended* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransitionExtended>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
    MergeFrom(*source);
  }
}

void TransitionExtended::MergeFrom(const TransitionExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uid();
      uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_transition()->::ru::mail::go::webbase::SputnikRanker::Transition::MergeFrom(from.transition());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_body()->::ru::mail::go::webbase::SputnikRanker::Body::MergeFrom(from.body());
    }
  }
}

void TransitionExtended::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransitionExtended::CopyFrom(const TransitionExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitionExtended::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  if (has_transition()) {
    if (!this->transition_->IsInitialized()) return false;
  }
  return true;
}

void TransitionExtended::Swap(TransitionExtended* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransitionExtended::InternalSwap(TransitionExtended* other) {
  using std::swap;
  uid_.Swap(&other->uid_);
  email_.Swap(&other->email_);
  query_.Swap(&other->query_);
  swap(transition_, other->transition_);
  swap(body_, other->body_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransitionExtended::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransitionExtended

// required .ru.mail.go.webbase.SputnikRanker.Transition transition = 1;
bool TransitionExtended::has_transition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransitionExtended::set_has_transition() {
  _has_bits_[0] |= 0x00000008u;
}
void TransitionExtended::clear_has_transition() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransitionExtended::clear_transition() {
  if (transition_ != NULL) transition_->::ru::mail::go::webbase::SputnikRanker::Transition::Clear();
  clear_has_transition();
}
const ::ru::mail::go::webbase::SputnikRanker::Transition& TransitionExtended::transition() const {
  const ::ru::mail::go::webbase::SputnikRanker::Transition* p = transition_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.TransitionExtended.transition)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::SputnikRanker::Transition*>(
      &::ru::mail::go::webbase::SputnikRanker::_Transition_default_instance_);
}
::ru::mail::go::webbase::SputnikRanker::Transition* TransitionExtended::mutable_transition() {
  set_has_transition();
  if (transition_ == NULL) {
    transition_ = new ::ru::mail::go::webbase::SputnikRanker::Transition;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.TransitionExtended.transition)
  return transition_;
}
::ru::mail::go::webbase::SputnikRanker::Transition* TransitionExtended::release_transition() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.TransitionExtended.transition)
  clear_has_transition();
  ::ru::mail::go::webbase::SputnikRanker::Transition* temp = transition_;
  transition_ = NULL;
  return temp;
}
void TransitionExtended::set_allocated_transition(::ru::mail::go::webbase::SputnikRanker::Transition* transition) {
  delete transition_;
  transition_ = transition;
  if (transition) {
    set_has_transition();
  } else {
    clear_has_transition();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.TransitionExtended.transition)
}

// required string uid = 2;
bool TransitionExtended::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransitionExtended::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void TransitionExtended::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransitionExtended::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
const ::std::string& TransitionExtended::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid)
  return uid_.GetNoArena();
}
void TransitionExtended::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid)
}
#if LANG_CXX11
void TransitionExtended::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid)
}
#endif
void TransitionExtended::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid)
}
void TransitionExtended::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid)
}
::std::string* TransitionExtended::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransitionExtended::release_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransitionExtended::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid)
}

// required string email = 3;
bool TransitionExtended::has_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransitionExtended::set_has_email() {
  _has_bits_[0] |= 0x00000002u;
}
void TransitionExtended::clear_has_email() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransitionExtended::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
const ::std::string& TransitionExtended::email() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.TransitionExtended.email)
  return email_.GetNoArena();
}
void TransitionExtended::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.TransitionExtended.email)
}
#if LANG_CXX11
void TransitionExtended::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.TransitionExtended.email)
}
#endif
void TransitionExtended::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.TransitionExtended.email)
}
void TransitionExtended::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.TransitionExtended.email)
}
::std::string* TransitionExtended::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.TransitionExtended.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransitionExtended::release_email() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.TransitionExtended.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransitionExtended::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.TransitionExtended.email)
}

// optional .ru.mail.go.webbase.SputnikRanker.Body body = 4;
bool TransitionExtended::has_body() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransitionExtended::set_has_body() {
  _has_bits_[0] |= 0x00000010u;
}
void TransitionExtended::clear_has_body() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransitionExtended::clear_body() {
  if (body_ != NULL) body_->::ru::mail::go::webbase::SputnikRanker::Body::Clear();
  clear_has_body();
}
const ::ru::mail::go::webbase::SputnikRanker::Body& TransitionExtended::body() const {
  const ::ru::mail::go::webbase::SputnikRanker::Body* p = body_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.TransitionExtended.body)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::SputnikRanker::Body*>(
      &::ru::mail::go::webbase::SputnikRanker::_Body_default_instance_);
}
::ru::mail::go::webbase::SputnikRanker::Body* TransitionExtended::mutable_body() {
  set_has_body();
  if (body_ == NULL) {
    body_ = new ::ru::mail::go::webbase::SputnikRanker::Body;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.TransitionExtended.body)
  return body_;
}
::ru::mail::go::webbase::SputnikRanker::Body* TransitionExtended::release_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.TransitionExtended.body)
  clear_has_body();
  ::ru::mail::go::webbase::SputnikRanker::Body* temp = body_;
  body_ = NULL;
  return temp;
}
void TransitionExtended::set_allocated_body(::ru::mail::go::webbase::SputnikRanker::Body* body) {
  delete body_;
  body_ = body;
  if (body) {
    set_has_body();
  } else {
    clear_has_body();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.TransitionExtended.body)
}

// optional string query = 5;
bool TransitionExtended::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransitionExtended::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
void TransitionExtended::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransitionExtended::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& TransitionExtended::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.TransitionExtended.query)
  return query_.GetNoArena();
}
void TransitionExtended::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.TransitionExtended.query)
}
#if LANG_CXX11
void TransitionExtended::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.TransitionExtended.query)
}
#endif
void TransitionExtended::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.TransitionExtended.query)
}
void TransitionExtended::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.TransitionExtended.query)
}
::std::string* TransitionExtended::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.TransitionExtended.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransitionExtended::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.TransitionExtended.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransitionExtended::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.TransitionExtended.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Hit::kTimeFieldNumber;
const int Hit::kUrlFieldNumber;
const int Hit::kLoadTimeFieldNumber;
const int Hit::kHackedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Hit::Hit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.Hit)
}
Hit::Hit(const Hit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&hacked_) -
    reinterpret_cast<char*>(&time_)) + sizeof(hacked_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.Hit)
}

void Hit::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hacked_) -
      reinterpret_cast<char*>(&time_)) + sizeof(hacked_));
}

Hit::~Hit() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.Hit)
  SharedDtor();
}

void Hit::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Hit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hit::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Hit& Hit::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Hit* Hit::New(::google::protobuf::Arena* arena) const {
  Hit* n = new Hit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Hit::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.Hit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hacked_) -
        reinterpret_cast<char*>(&time_)) + sizeof(hacked_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Hit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.Hit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.Hit.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 loadTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_loadtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &loadtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hacked = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_hacked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hacked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.Hit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.Hit)
  return false;
#undef DO_
}

void Hit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.Hit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Hit.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional uint64 loadTime = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->loadtime(), output);
  }

  // optional bool hacked = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hacked(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.Hit)
}

::google::protobuf::uint8* Hit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.Hit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Hit.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional uint64 loadTime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->loadtime(), target);
  }

  // optional bool hacked = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hacked(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.Hit)
  return target;
}

size_t Hit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.SputnikRanker.Hit)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_time()) {
    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t Hit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.Hit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional uint64 loadTime = 3;
    if (has_loadtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->loadtime());
    }

    // optional bool hacked = 4;
    if (has_hacked()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.Hit)
  GOOGLE_DCHECK_NE(&from, this);
  const Hit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Hit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.Hit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.Hit)
    MergeFrom(*source);
  }
}

void Hit::MergeFrom(const Hit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.Hit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000004u) {
      loadtime_ = from.loadtime_;
    }
    if (cached_has_bits & 0x00000008u) {
      hacked_ = from.hacked_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Hit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.Hit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hit::CopyFrom(const Hit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.Hit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Hit::Swap(Hit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Hit::InternalSwap(Hit* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(time_, other->time_);
  swap(loadtime_, other->loadtime_);
  swap(hacked_, other->hacked_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Hit::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Hit

// required uint64 time = 1;
bool Hit::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Hit::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void Hit::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void Hit::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 Hit::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Hit.time)
  return time_;
}
void Hit::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Hit.time)
}

// required string url = 2;
bool Hit::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Hit::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void Hit::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void Hit::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& Hit::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Hit.url)
  return url_.GetNoArena();
}
void Hit::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Hit.url)
}
#if LANG_CXX11
void Hit::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Hit.url)
}
#endif
void Hit::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Hit.url)
}
void Hit::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Hit.url)
}
::std::string* Hit::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Hit.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Hit::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Hit.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Hit::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Hit.url)
}

// optional uint64 loadTime = 3;
bool Hit::has_loadtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Hit::set_has_loadtime() {
  _has_bits_[0] |= 0x00000004u;
}
void Hit::clear_has_loadtime() {
  _has_bits_[0] &= ~0x00000004u;
}
void Hit::clear_loadtime() {
  loadtime_ = GOOGLE_ULONGLONG(0);
  clear_has_loadtime();
}
::google::protobuf::uint64 Hit::loadtime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Hit.loadTime)
  return loadtime_;
}
void Hit::set_loadtime(::google::protobuf::uint64 value) {
  set_has_loadtime();
  loadtime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Hit.loadTime)
}

// optional bool hacked = 4;
bool Hit::has_hacked() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Hit::set_has_hacked() {
  _has_bits_[0] |= 0x00000008u;
}
void Hit::clear_has_hacked() {
  _has_bits_[0] &= ~0x00000008u;
}
void Hit::clear_hacked() {
  hacked_ = false;
  clear_has_hacked();
}
bool Hit::hacked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Hit.hacked)
  return hacked_;
}
void Hit::set_hacked(bool value) {
  set_has_hacked();
  hacked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Hit.hacked)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Redirect::kFromFieldNumber;
const int Redirect::kToFieldNumber;
const int Redirect::kFromStatusFieldNumber;
const int Redirect::kToStatusFieldNumber;
const int Redirect::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Redirect::Redirect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.Redirect)
}
Redirect::Redirect(const Redirect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from()) {
    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to()) {
    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&tostatus_) -
    reinterpret_cast<char*>(&type_)) + sizeof(tostatus_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.Redirect)
}

void Redirect::SharedCtor() {
  _cached_size_ = 0;
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 3;
  fromstatus_ = 2;
  tostatus_ = 2;
}

Redirect::~Redirect() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.Redirect)
  SharedDtor();
}

void Redirect::SharedDtor() {
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Redirect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Redirect::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Redirect& Redirect::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Redirect* Redirect::New(::google::protobuf::Arena* arena) const {
  Redirect* n = new Redirect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Redirect::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.Redirect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!from_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!to_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*to_.UnsafeRawStringPointer())->clear();
    }
    type_ = 3;
    fromstatus_ = 2;
    tostatus_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Redirect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.Redirect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from().data(), static_cast<int>(this->from().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.Redirect.from");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to().data(), static_cast<int>(this->to().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.Redirect.to");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus fromStatus = 3 [default = Unknown];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus_IsValid(value)) {
            set_fromstatus(static_cast< ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus toStatus = 4 [default = Unknown];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus_IsValid(value)) {
            set_tostatus(static_cast< ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.SputnikRanker.Redirect.Type type = 5 [default = NoInfo];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::SputnikRanker::Redirect_Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::SputnikRanker::Redirect_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.Redirect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.Redirect)
  return false;
#undef DO_
}

void Redirect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.Redirect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), static_cast<int>(this->from().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Redirect.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from(), output);
  }

  // required string to = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), static_cast<int>(this->to().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Redirect.to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->to(), output);
  }

  // optional .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus fromStatus = 3 [default = Unknown];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->fromstatus(), output);
  }

  // optional .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus toStatus = 4 [default = Unknown];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->tostatus(), output);
  }

  // optional .ru.mail.go.webbase.SputnikRanker.Redirect.Type type = 5 [default = NoInfo];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.Redirect)
}

::google::protobuf::uint8* Redirect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.Redirect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), static_cast<int>(this->from().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Redirect.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from(), target);
  }

  // required string to = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), static_cast<int>(this->to().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Redirect.to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to(), target);
  }

  // optional .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus fromStatus = 3 [default = Unknown];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->fromstatus(), target);
  }

  // optional .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus toStatus = 4 [default = Unknown];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->tostatus(), target);
  }

  // optional .ru.mail.go.webbase.SputnikRanker.Redirect.Type type = 5 [default = NoInfo];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.Redirect)
  return target;
}

size_t Redirect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.SputnikRanker.Redirect)
  size_t total_size = 0;

  if (has_from()) {
    // required string from = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }

  if (has_to()) {
    // required string to = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());
  }

  return total_size;
}
size_t Redirect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.Redirect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string from = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());

    // required string to = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 28u) {
    // optional .ru.mail.go.webbase.SputnikRanker.Redirect.Type type = 5 [default = NoInfo];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus fromStatus = 3 [default = Unknown];
    if (has_fromstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fromstatus());
    }

    // optional .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus toStatus = 4 [default = Unknown];
    if (has_tostatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tostatus());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Redirect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.Redirect)
  GOOGLE_DCHECK_NE(&from, this);
  const Redirect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Redirect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.Redirect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.Redirect)
    MergeFrom(*source);
  }
}

void Redirect::MergeFrom(const Redirect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.Redirect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from();
      from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to();
      to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      fromstatus_ = from.fromstatus_;
    }
    if (cached_has_bits & 0x00000010u) {
      tostatus_ = from.tostatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Redirect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.Redirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Redirect::CopyFrom(const Redirect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.Redirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Redirect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Redirect::Swap(Redirect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Redirect::InternalSwap(Redirect* other) {
  using std::swap;
  from_.Swap(&other->from_);
  to_.Swap(&other->to_);
  swap(type_, other->type_);
  swap(fromstatus_, other->fromstatus_);
  swap(tostatus_, other->tostatus_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Redirect::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Redirect

// required string from = 1;
bool Redirect::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Redirect::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
void Redirect::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
void Redirect::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from();
}
const ::std::string& Redirect::from() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Redirect.from)
  return from_.GetNoArena();
}
void Redirect::set_from(const ::std::string& value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Redirect.from)
}
#if LANG_CXX11
void Redirect::set_from(::std::string&& value) {
  set_has_from();
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Redirect.from)
}
#endif
void Redirect::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Redirect.from)
}
void Redirect::set_from(const char* value, size_t size) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Redirect.from)
}
::std::string* Redirect::mutable_from() {
  set_has_from();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Redirect.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Redirect::release_from() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Redirect.from)
  clear_has_from();
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Redirect::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    set_has_from();
  } else {
    clear_has_from();
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Redirect.from)
}

// required string to = 2;
bool Redirect::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Redirect::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
void Redirect::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
void Redirect::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to();
}
const ::std::string& Redirect::to() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Redirect.to)
  return to_.GetNoArena();
}
void Redirect::set_to(const ::std::string& value) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Redirect.to)
}
#if LANG_CXX11
void Redirect::set_to(::std::string&& value) {
  set_has_to();
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Redirect.to)
}
#endif
void Redirect::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Redirect.to)
}
void Redirect::set_to(const char* value, size_t size) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Redirect.to)
}
::std::string* Redirect::mutable_to() {
  set_has_to();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Redirect.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Redirect::release_to() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Redirect.to)
  clear_has_to();
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Redirect::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    set_has_to();
  } else {
    clear_has_to();
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Redirect.to)
}

// optional .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus fromStatus = 3 [default = Unknown];
bool Redirect::has_fromstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Redirect::set_has_fromstatus() {
  _has_bits_[0] |= 0x00000008u;
}
void Redirect::clear_has_fromstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
void Redirect::clear_fromstatus() {
  fromstatus_ = 2;
  clear_has_fromstatus();
}
::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus Redirect::fromstatus() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Redirect.fromStatus)
  return static_cast< ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus >(fromstatus_);
}
void Redirect::set_fromstatus(::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus value) {
  assert(::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus_IsValid(value));
  set_has_fromstatus();
  fromstatus_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Redirect.fromStatus)
}

// optional .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus toStatus = 4 [default = Unknown];
bool Redirect::has_tostatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Redirect::set_has_tostatus() {
  _has_bits_[0] |= 0x00000010u;
}
void Redirect::clear_has_tostatus() {
  _has_bits_[0] &= ~0x00000010u;
}
void Redirect::clear_tostatus() {
  tostatus_ = 2;
  clear_has_tostatus();
}
::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus Redirect::tostatus() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Redirect.toStatus)
  return static_cast< ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus >(tostatus_);
}
void Redirect::set_tostatus(::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus value) {
  assert(::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus_IsValid(value));
  set_has_tostatus();
  tostatus_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Redirect.toStatus)
}

// optional .ru.mail.go.webbase.SputnikRanker.Redirect.Type type = 5 [default = NoInfo];
bool Redirect::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Redirect::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Redirect::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Redirect::clear_type() {
  type_ = 3;
  clear_has_type();
}
::ru::mail::go::webbase::SputnikRanker::Redirect_Type Redirect::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Redirect.type)
  return static_cast< ::ru::mail::go::webbase::SputnikRanker::Redirect_Type >(type_);
}
void Redirect::set_type(::ru::mail::go::webbase::SputnikRanker::Redirect_Type value) {
  assert(::ru::mail::go::webbase::SputnikRanker::Redirect_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Redirect.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qlinks_Qlink::kQueryFieldNumber;
const int Qlinks_Qlink::kGeoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qlinks_Qlink::Qlinks_Qlink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
}
Qlinks_Qlink::Qlinks_Qlink(const Qlinks_Qlink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  geo_ = from.geo_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
}

void Qlinks_Qlink::SharedCtor() {
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_ = 0;
}

Qlinks_Qlink::~Qlinks_Qlink() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
  SharedDtor();
}

void Qlinks_Qlink::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Qlinks_Qlink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qlinks_Qlink::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qlinks_Qlink& Qlinks_Qlink::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Qlinks_Qlink* Qlinks_Qlink::New(::google::protobuf::Arena* arena) const {
  Qlinks_Qlink* n = new Qlinks_Qlink;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qlinks_Qlink::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_query()) {
    GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*query_.UnsafeRawStringPointer())->clear();
  }
  geo_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Qlinks_Qlink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 geo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_geo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &geo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
  return false;
#undef DO_
}

void Qlinks_Qlink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // required int32 geo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->geo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
}

::google::protobuf::uint8* Qlinks_Qlink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // required int32 geo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->geo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
  return target;
}

size_t Qlinks_Qlink::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
  size_t total_size = 0;

  if (has_query()) {
    // required string query = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  if (has_geo()) {
    // required int32 geo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->geo());
  }

  return total_size;
}
size_t Qlinks_Qlink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string query = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());

    // required int32 geo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->geo());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qlinks_Qlink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
  GOOGLE_DCHECK_NE(&from, this);
  const Qlinks_Qlink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qlinks_Qlink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
    MergeFrom(*source);
  }
}

void Qlinks_Qlink::MergeFrom(const Qlinks_Qlink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      geo_ = from.geo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Qlinks_Qlink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qlinks_Qlink::CopyFrom(const Qlinks_Qlink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qlinks_Qlink::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Qlinks_Qlink::Swap(Qlinks_Qlink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qlinks_Qlink::InternalSwap(Qlinks_Qlink* other) {
  using std::swap;
  query_.Swap(&other->query_);
  swap(geo_, other->geo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qlinks_Qlink::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Qlinks_Qlink

// required string query = 1;
bool Qlinks_Qlink::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Qlinks_Qlink::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void Qlinks_Qlink::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void Qlinks_Qlink::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& Qlinks_Qlink::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query)
  return query_.GetNoArena();
}
void Qlinks_Qlink::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query)
}
#if LANG_CXX11
void Qlinks_Qlink::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query)
}
#endif
void Qlinks_Qlink::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query)
}
void Qlinks_Qlink::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query)
}
::std::string* Qlinks_Qlink::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Qlinks_Qlink::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Qlinks_Qlink::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query)
}

// required int32 geo = 2;
bool Qlinks_Qlink::has_geo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Qlinks_Qlink::set_has_geo() {
  _has_bits_[0] |= 0x00000002u;
}
void Qlinks_Qlink::clear_has_geo() {
  _has_bits_[0] &= ~0x00000002u;
}
void Qlinks_Qlink::clear_geo() {
  geo_ = 0;
  clear_has_geo();
}
::google::protobuf::int32 Qlinks_Qlink::geo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.geo)
  return geo_;
}
void Qlinks_Qlink::set_geo(::google::protobuf::int32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.geo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qlinks::kFromFieldNumber;
const int Qlinks::kFromStatusFieldNumber;
const int Qlinks::kQlinkFieldNumber;
const int Qlinks::kToFieldNumber;
const int Qlinks::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qlinks::Qlinks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.Qlinks)
}
Qlinks::Qlinks(const Qlinks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      qlink_(from.qlink_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from()) {
    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to()) {
    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  ::memcpy(&fromstatus_, &from.fromstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&fromstatus_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.Qlinks)
}

void Qlinks::SharedCtor() {
  _cached_size_ = 0;
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fromstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&fromstatus_)) + sizeof(type_));
}

Qlinks::~Qlinks() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.Qlinks)
  SharedDtor();
}

void Qlinks::SharedDtor() {
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Qlinks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qlinks::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qlinks& Qlinks::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Qlinks* Qlinks::New(::google::protobuf::Arena* arena) const {
  Qlinks* n = new Qlinks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qlinks::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.Qlinks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qlink_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!from_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!to_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*to_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&fromstatus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&fromstatus_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Qlinks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.Qlinks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from().data(), static_cast<int>(this->from().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.Qlinks.from");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus fromStatus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus_IsValid(value)) {
            set_fromstatus(static_cast< ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink qlink = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qlink()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string to = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to().data(), static_cast<int>(this->to().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.Qlinks.to");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.SputnikRanker.Redirect.Type type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::SputnikRanker::Redirect_Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::SputnikRanker::Redirect_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.Qlinks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.Qlinks)
  return false;
#undef DO_
}

void Qlinks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.Qlinks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), static_cast<int>(this->from().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Qlinks.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from(), output);
  }

  // required .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus fromStatus = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->fromstatus(), output);
  }

  // repeated .ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink qlink = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qlink_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->qlink(static_cast<int>(i)), output);
  }

  // required string to = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), static_cast<int>(this->to().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Qlinks.to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to(), output);
  }

  // required .ru.mail.go.webbase.SputnikRanker.Redirect.Type type = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.Qlinks)
}

::google::protobuf::uint8* Qlinks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.Qlinks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), static_cast<int>(this->from().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Qlinks.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from(), target);
  }

  // required .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus fromStatus = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->fromstatus(), target);
  }

  // repeated .ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink qlink = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qlink_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->qlink(static_cast<int>(i)), deterministic, target);
  }

  // required string to = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), static_cast<int>(this->to().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Qlinks.to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to(), target);
  }

  // required .ru.mail.go.webbase.SputnikRanker.Redirect.Type type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.Qlinks)
  return target;
}

size_t Qlinks::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.SputnikRanker.Qlinks)
  size_t total_size = 0;

  if (has_from()) {
    // required string from = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }

  if (has_to()) {
    // required string to = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());
  }

  if (has_fromstatus()) {
    // required .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus fromStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fromstatus());
  }

  if (has_type()) {
    // required .ru.mail.go.webbase.SputnikRanker.Redirect.Type type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t Qlinks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.Qlinks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string from = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());

    // required string to = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());

    // required .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus fromStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fromstatus());

    // required .ru.mail.go.webbase.SputnikRanker.Redirect.Type type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink qlink = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->qlink_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qlink(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qlinks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.Qlinks)
  GOOGLE_DCHECK_NE(&from, this);
  const Qlinks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qlinks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.Qlinks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.Qlinks)
    MergeFrom(*source);
  }
}

void Qlinks::MergeFrom(const Qlinks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.Qlinks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qlink_.MergeFrom(from.qlink_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from();
      from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to();
      to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
    }
    if (cached_has_bits & 0x00000004u) {
      fromstatus_ = from.fromstatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Qlinks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.Qlinks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qlinks::CopyFrom(const Qlinks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.Qlinks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qlinks::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->qlink())) return false;
  return true;
}

void Qlinks::Swap(Qlinks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qlinks::InternalSwap(Qlinks* other) {
  using std::swap;
  qlink_.InternalSwap(&other->qlink_);
  from_.Swap(&other->from_);
  to_.Swap(&other->to_);
  swap(fromstatus_, other->fromstatus_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qlinks::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Qlinks

// required string from = 1;
bool Qlinks::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Qlinks::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
void Qlinks::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
void Qlinks::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from();
}
const ::std::string& Qlinks::from() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Qlinks.from)
  return from_.GetNoArena();
}
void Qlinks::set_from(const ::std::string& value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Qlinks.from)
}
#if LANG_CXX11
void Qlinks::set_from(::std::string&& value) {
  set_has_from();
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Qlinks.from)
}
#endif
void Qlinks::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Qlinks.from)
}
void Qlinks::set_from(const char* value, size_t size) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Qlinks.from)
}
::std::string* Qlinks::mutable_from() {
  set_has_from();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Qlinks.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Qlinks::release_from() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Qlinks.from)
  clear_has_from();
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Qlinks::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    set_has_from();
  } else {
    clear_has_from();
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Qlinks.from)
}

// required .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus fromStatus = 2;
bool Qlinks::has_fromstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Qlinks::set_has_fromstatus() {
  _has_bits_[0] |= 0x00000004u;
}
void Qlinks::clear_has_fromstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
void Qlinks::clear_fromstatus() {
  fromstatus_ = 0;
  clear_has_fromstatus();
}
::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus Qlinks::fromstatus() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Qlinks.fromStatus)
  return static_cast< ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus >(fromstatus_);
}
void Qlinks::set_fromstatus(::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus value) {
  assert(::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus_IsValid(value));
  set_has_fromstatus();
  fromstatus_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Qlinks.fromStatus)
}

// repeated .ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink qlink = 3;
int Qlinks::qlink_size() const {
  return qlink_.size();
}
void Qlinks::clear_qlink() {
  qlink_.Clear();
}
const ::ru::mail::go::webbase::SputnikRanker::Qlinks_Qlink& Qlinks::qlink(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Qlinks.qlink)
  return qlink_.Get(index);
}
::ru::mail::go::webbase::SputnikRanker::Qlinks_Qlink* Qlinks::mutable_qlink(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Qlinks.qlink)
  return qlink_.Mutable(index);
}
::ru::mail::go::webbase::SputnikRanker::Qlinks_Qlink* Qlinks::add_qlink() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.Qlinks.qlink)
  return qlink_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Qlinks_Qlink >*
Qlinks::mutable_qlink() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.Qlinks.qlink)
  return &qlink_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Qlinks_Qlink >&
Qlinks::qlink() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.Qlinks.qlink)
  return qlink_;
}

// required string to = 4;
bool Qlinks::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Qlinks::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
void Qlinks::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
void Qlinks::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to();
}
const ::std::string& Qlinks::to() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Qlinks.to)
  return to_.GetNoArena();
}
void Qlinks::set_to(const ::std::string& value) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Qlinks.to)
}
#if LANG_CXX11
void Qlinks::set_to(::std::string&& value) {
  set_has_to();
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Qlinks.to)
}
#endif
void Qlinks::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Qlinks.to)
}
void Qlinks::set_to(const char* value, size_t size) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Qlinks.to)
}
::std::string* Qlinks::mutable_to() {
  set_has_to();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Qlinks.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Qlinks::release_to() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Qlinks.to)
  clear_has_to();
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Qlinks::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    set_has_to();
  } else {
    clear_has_to();
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Qlinks.to)
}

// required .ru.mail.go.webbase.SputnikRanker.Redirect.Type type = 5;
bool Qlinks::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Qlinks::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Qlinks::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Qlinks::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::SputnikRanker::Redirect_Type Qlinks::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Qlinks.type)
  return static_cast< ::ru::mail::go::webbase::SputnikRanker::Redirect_Type >(type_);
}
void Qlinks::set_type(::ru::mail::go::webbase::SputnikRanker::Redirect_Type value) {
  assert(::ru::mail::go::webbase::SputnikRanker::Redirect_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Qlinks.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Session::kUidFieldNumber;
const int Session::kHitsFieldNumber;
const int Session::kTimeFieldNumber;
const int Session::kRegionsFieldNumber;
const int Session::kRedirectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Session::Session()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.Session)
}
Session::Session(const Session& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      hits_(from.hits_),
      regions_(from.regions_),
      redirect_(from.redirect_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uid()) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.Session)
}

void Session::SharedCtor() {
  _cached_size_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.Session)
  SharedDtor();
}

void Session::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Session::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Session& Session::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Session* Session::New(::google::protobuf::Arena* arena) const {
  Session* n = new Session;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_.Clear();
  regions_.Clear();
  redirect_.Clear();
  if (has_uid()) {
    GOOGLE_DCHECK(!uid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*uid_.UnsafeRawStringPointer())->clear();
  }
  time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.Session)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), static_cast<int>(this->uid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.Session.uid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.SputnikRanker.Hit hits = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 regions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_regions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_regions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirect = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_redirect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.Session)
  return false;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Session.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // repeated .ru.mail.go.webbase.SputnikRanker.Hit hits = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hits(static_cast<int>(i)), output);
  }

  // optional uint64 time = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // repeated uint32 regions = 4;
  for (int i = 0, n = this->regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->regions(i), output);
  }

  // repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirect = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->redirect_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->redirect(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.Session)
}

::google::protobuf::uint8* Session::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Session.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // repeated .ru.mail.go.webbase.SputnikRanker.Hit hits = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->hits(static_cast<int>(i)), deterministic, target);
  }

  // optional uint64 time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // repeated uint32 regions = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->regions_, target);

  // repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirect = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->redirect_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->redirect(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.Session)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string uid = 1;
  if (has_uid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }
  // repeated .ru.mail.go.webbase.SputnikRanker.Hit hits = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->hits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hits(static_cast<int>(i)));
    }
  }

  // repeated uint32 regions = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->regions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->regions_size());
    total_size += data_size;
  }

  // repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirect = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->redirect_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redirect(static_cast<int>(i)));
    }
  }

  // optional uint64 time = 3;
  if (has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Session::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.Session)
  GOOGLE_DCHECK_NE(&from, this);
  const Session* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Session>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.Session)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.Session)
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hits_.MergeFrom(from.hits_);
  regions_.MergeFrom(from.regions_);
  redirect_.MergeFrom(from.redirect_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uid();
      uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Session::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->hits())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->redirect())) return false;
  return true;
}

void Session::Swap(Session* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Session::InternalSwap(Session* other) {
  using std::swap;
  hits_.InternalSwap(&other->hits_);
  regions_.InternalSwap(&other->regions_);
  redirect_.InternalSwap(&other->redirect_);
  uid_.Swap(&other->uid_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Session::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Session

// required string uid = 1;
bool Session::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Session::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void Session::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Session::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
const ::std::string& Session::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Session.uid)
  return uid_.GetNoArena();
}
void Session::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Session.uid)
}
#if LANG_CXX11
void Session::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Session.uid)
}
#endif
void Session::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Session.uid)
}
void Session::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Session.uid)
}
::std::string* Session::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Session.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Session.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Session.uid)
}

// repeated .ru.mail.go.webbase.SputnikRanker.Hit hits = 2;
int Session::hits_size() const {
  return hits_.size();
}
void Session::clear_hits() {
  hits_.Clear();
}
const ::ru::mail::go::webbase::SputnikRanker::Hit& Session::hits(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Session.hits)
  return hits_.Get(index);
}
::ru::mail::go::webbase::SputnikRanker::Hit* Session::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Session.hits)
  return hits_.Mutable(index);
}
::ru::mail::go::webbase::SputnikRanker::Hit* Session::add_hits() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.Session.hits)
  return hits_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Hit >*
Session::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.Session.hits)
  return &hits_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Hit >&
Session::hits() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.Session.hits)
  return hits_;
}

// optional uint64 time = 3;
bool Session::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Session::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void Session::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void Session::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 Session::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Session.time)
  return time_;
}
void Session::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Session.time)
}

// repeated uint32 regions = 4;
int Session::regions_size() const {
  return regions_.size();
}
void Session::clear_regions() {
  regions_.Clear();
}
::google::protobuf::uint32 Session::regions(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Session.regions)
  return regions_.Get(index);
}
void Session::set_regions(int index, ::google::protobuf::uint32 value) {
  regions_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Session.regions)
}
void Session::add_regions(::google::protobuf::uint32 value) {
  regions_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.Session.regions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Session::regions() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.Session.regions)
  return regions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Session::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.Session.regions)
  return &regions_;
}

// repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirect = 5;
int Session::redirect_size() const {
  return redirect_.size();
}
void Session::clear_redirect() {
  redirect_.Clear();
}
const ::ru::mail::go::webbase::SputnikRanker::Redirect& Session::redirect(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Session.redirect)
  return redirect_.Get(index);
}
::ru::mail::go::webbase::SputnikRanker::Redirect* Session::mutable_redirect(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Session.redirect)
  return redirect_.Mutable(index);
}
::ru::mail::go::webbase::SputnikRanker::Redirect* Session::add_redirect() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.Session.redirect)
  return redirect_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Redirect >*
Session::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.Session.redirect)
  return &redirect_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Redirect >&
Session::redirect() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.Session.redirect)
  return redirect_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageBody::kTimeFieldNumber;
const int ImageBody::kUrlFieldNumber;
const int ImageBody::kBodyFieldNumber;
const int ImageBody::kUidFieldNumber;
const int ImageBody::kSourceFieldNumber;
const int ImageBody::kWeightFieldNumber;
const int ImageBody::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageBody::ImageBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.ImageBody)
}
ImageBody::ImageBody(const ImageBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uid()) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&time_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.ImageBody)
}

void ImageBody::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&time_)) + sizeof(weight_));
  source_ = 1;
}

ImageBody::~ImageBody() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.ImageBody)
  SharedDtor();
}

void ImageBody::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageBody::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageBody& ImageBody::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageBody* ImageBody::New(::google::protobuf::Arena* arena) const {
  ImageBody* n = new ImageBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageBody::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.ImageBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*body_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!uid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_) -
        reinterpret_cast<char*>(&time_)) + sizeof(weight_));
    source_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.ImageBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.ImageBody.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes body = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string uid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), static_cast<int>(this->uid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.ImageBody.uid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.SputnikRanker.ImageBody.Source source = 5 [default = Telemetry];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::SputnikRanker::ImageBody_Source_IsValid(value)) {
            set_source(static_cast< ::ru::mail::go::webbase::SputnikRanker::ImageBody_Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weight = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.ImageBody.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.ImageBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.ImageBody)
  return false;
#undef DO_
}

void ImageBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.ImageBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.ImageBody.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // required bytes body = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->body(), output);
  }

  // optional string uid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.ImageBody.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uid(), output);
  }

  // optional .ru.mail.go.webbase.SputnikRanker.ImageBody.Source source = 5 [default = Telemetry];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->source(), output);
  }

  // optional uint32 weight = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->weight(), output);
  }

  // optional string query = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.ImageBody.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.ImageBody)
}

::google::protobuf::uint8* ImageBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.ImageBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.ImageBody.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // required bytes body = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }

  // optional string uid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.ImageBody.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uid(), target);
  }

  // optional .ru.mail.go.webbase.SputnikRanker.ImageBody.Source source = 5 [default = Telemetry];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->source(), target);
  }

  // optional uint32 weight = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->weight(), target);
  }

  // optional string query = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.ImageBody.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.ImageBody)
  return target;
}

size_t ImageBody::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.SputnikRanker.ImageBody)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_body()) {
    // required bytes body = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  if (has_time()) {
    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t ImageBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.ImageBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required bytes body = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());

    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional string uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string query = 7;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

  }
  if (_has_bits_[0 / 32] & 96u) {
    // optional uint32 weight = 6;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

    // optional .ru.mail.go.webbase.SputnikRanker.ImageBody.Source source = 5 [default = Telemetry];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.ImageBody)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.ImageBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.ImageBody)
    MergeFrom(*source);
  }
}

void ImageBody::MergeFrom(const ImageBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.ImageBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_uid();
      uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000010u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000020u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.ImageBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageBody::CopyFrom(const ImageBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.ImageBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  return true;
}

void ImageBody::Swap(ImageBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageBody::InternalSwap(ImageBody* other) {
  using std::swap;
  url_.Swap(&other->url_);
  body_.Swap(&other->body_);
  uid_.Swap(&other->uid_);
  query_.Swap(&other->query_);
  swap(time_, other->time_);
  swap(weight_, other->weight_);
  swap(source_, other->source_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageBody::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageBody

// required uint64 time = 1;
bool ImageBody::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageBody::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageBody::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageBody::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 ImageBody::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ImageBody.time)
  return time_;
}
void ImageBody::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ImageBody.time)
}

// required string url = 2;
bool ImageBody::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageBody::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageBody::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageBody::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ImageBody::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ImageBody.url)
  return url_.GetNoArena();
}
void ImageBody::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ImageBody.url)
}
#if LANG_CXX11
void ImageBody::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.ImageBody.url)
}
#endif
void ImageBody::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.ImageBody.url)
}
void ImageBody::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.ImageBody.url)
}
::std::string* ImageBody::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.ImageBody.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageBody::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.ImageBody.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageBody::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.ImageBody.url)
}

// required bytes body = 3;
bool ImageBody::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageBody::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageBody::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageBody::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
const ::std::string& ImageBody::body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ImageBody.body)
  return body_.GetNoArena();
}
void ImageBody::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ImageBody.body)
}
#if LANG_CXX11
void ImageBody::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.ImageBody.body)
}
#endif
void ImageBody::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.ImageBody.body)
}
void ImageBody::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.ImageBody.body)
}
::std::string* ImageBody::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.ImageBody.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageBody::release_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.ImageBody.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageBody::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.ImageBody.body)
}

// optional string uid = 4;
bool ImageBody::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageBody::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageBody::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageBody::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
const ::std::string& ImageBody::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ImageBody.uid)
  return uid_.GetNoArena();
}
void ImageBody::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ImageBody.uid)
}
#if LANG_CXX11
void ImageBody::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.ImageBody.uid)
}
#endif
void ImageBody::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.ImageBody.uid)
}
void ImageBody::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.ImageBody.uid)
}
::std::string* ImageBody::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.ImageBody.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageBody::release_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.ImageBody.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageBody::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.ImageBody.uid)
}

// optional .ru.mail.go.webbase.SputnikRanker.ImageBody.Source source = 5 [default = Telemetry];
bool ImageBody::has_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImageBody::set_has_source() {
  _has_bits_[0] |= 0x00000040u;
}
void ImageBody::clear_has_source() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImageBody::clear_source() {
  source_ = 1;
  clear_has_source();
}
::ru::mail::go::webbase::SputnikRanker::ImageBody_Source ImageBody::source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ImageBody.source)
  return static_cast< ::ru::mail::go::webbase::SputnikRanker::ImageBody_Source >(source_);
}
void ImageBody::set_source(::ru::mail::go::webbase::SputnikRanker::ImageBody_Source value) {
  assert(::ru::mail::go::webbase::SputnikRanker::ImageBody_Source_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ImageBody.source)
}

// optional uint32 weight = 6;
bool ImageBody::has_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageBody::set_has_weight() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageBody::clear_has_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageBody::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
::google::protobuf::uint32 ImageBody::weight() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ImageBody.weight)
  return weight_;
}
void ImageBody::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ImageBody.weight)
}

// optional string query = 7;
bool ImageBody::has_query() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageBody::set_has_query() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageBody::clear_has_query() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageBody::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& ImageBody::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ImageBody.query)
  return query_.GetNoArena();
}
void ImageBody::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ImageBody.query)
}
#if LANG_CXX11
void ImageBody::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.ImageBody.query)
}
#endif
void ImageBody::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.ImageBody.query)
}
void ImageBody::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.ImageBody.query)
}
::std::string* ImageBody::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.ImageBody.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageBody::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.ImageBody.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageBody::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.ImageBody.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoBody::kTimeFieldNumber;
const int VideoBody::kUrlFieldNumber;
const int VideoBody::kBodyFieldNumber;
const int VideoBody::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoBody::VideoBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.VideoBody)
}
VideoBody::VideoBody(const VideoBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uid()) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.VideoBody)
}

void VideoBody::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
}

VideoBody::~VideoBody() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.VideoBody)
  SharedDtor();
}

void VideoBody::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoBody::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoBody& VideoBody::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoBody* VideoBody::New(::google::protobuf::Arena* arena) const {
  VideoBody* n = new VideoBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoBody::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.VideoBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*body_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!uid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uid_.UnsafeRawStringPointer())->clear();
    }
  }
  time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.VideoBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.VideoBody.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes body = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string uid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), static_cast<int>(this->uid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.VideoBody.uid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.VideoBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.VideoBody)
  return false;
#undef DO_
}

void VideoBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.VideoBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.VideoBody.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // required bytes body = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->body(), output);
  }

  // optional string uid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.VideoBody.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.VideoBody)
}

::google::protobuf::uint8* VideoBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.VideoBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.VideoBody.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // required bytes body = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }

  // optional string uid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.VideoBody.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.VideoBody)
  return target;
}

size_t VideoBody::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.SputnikRanker.VideoBody)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_body()) {
    // required bytes body = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  if (has_time()) {
    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t VideoBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.VideoBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required bytes body = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());

    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string uid = 4;
  if (has_uid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.VideoBody)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.VideoBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.VideoBody)
    MergeFrom(*source);
  }
}

void VideoBody::MergeFrom(const VideoBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.VideoBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_uid();
      uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.VideoBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoBody::CopyFrom(const VideoBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.VideoBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void VideoBody::Swap(VideoBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoBody::InternalSwap(VideoBody* other) {
  using std::swap;
  url_.Swap(&other->url_);
  body_.Swap(&other->body_);
  uid_.Swap(&other->uid_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoBody::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoBody

// required uint64 time = 1;
bool VideoBody::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VideoBody::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
void VideoBody::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void VideoBody::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 VideoBody::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.VideoBody.time)
  return time_;
}
void VideoBody::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.VideoBody.time)
}

// required string url = 2;
bool VideoBody::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoBody::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoBody::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoBody::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& VideoBody::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.VideoBody.url)
  return url_.GetNoArena();
}
void VideoBody::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.VideoBody.url)
}
#if LANG_CXX11
void VideoBody::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.VideoBody.url)
}
#endif
void VideoBody::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.VideoBody.url)
}
void VideoBody::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.VideoBody.url)
}
::std::string* VideoBody::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.VideoBody.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoBody::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.VideoBody.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoBody::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.VideoBody.url)
}

// required bytes body = 3;
bool VideoBody::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VideoBody::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
void VideoBody::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
void VideoBody::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
const ::std::string& VideoBody::body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.VideoBody.body)
  return body_.GetNoArena();
}
void VideoBody::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.VideoBody.body)
}
#if LANG_CXX11
void VideoBody::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.VideoBody.body)
}
#endif
void VideoBody::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.VideoBody.body)
}
void VideoBody::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.VideoBody.body)
}
::std::string* VideoBody::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.VideoBody.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoBody::release_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.VideoBody.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoBody::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.VideoBody.body)
}

// optional string uid = 4;
bool VideoBody::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VideoBody::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
void VideoBody::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
void VideoBody::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
const ::std::string& VideoBody::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.VideoBody.uid)
  return uid_.GetNoArena();
}
void VideoBody::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.VideoBody.uid)
}
#if LANG_CXX11
void VideoBody::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.VideoBody.uid)
}
#endif
void VideoBody::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.VideoBody.uid)
}
void VideoBody::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.VideoBody.uid)
}
::std::string* VideoBody::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.VideoBody.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoBody::release_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.VideoBody.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoBody::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.VideoBody.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrowseRankData::kUrlFieldNumber;
const int BrowseRankData::kRegionFieldNumber;
const int BrowseRankData::kTimeFieldNumber;
const int BrowseRankData::kDwellTimeFieldNumber;
const int BrowseRankData::kLoadTimeFieldNumber;
const int BrowseRankData::kPositionFieldNumber;
const int BrowseRankData::kNumberOfSessionsFieldNumber;
const int BrowseRankData::kNumberOfLoadsFieldNumber;
const int BrowseRankData::kPositionCoefFieldNumber;
const int BrowseRankData::kTimeCoefFieldNumber;
const int BrowseRankData::kBrowseRankFieldNumber;
const int BrowseRankData::kFilteredBrowseRankFieldNumber;
const int BrowseRankData::kPagesInSiteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrowseRankData::BrowseRankData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
}
BrowseRankData::BrowseRankData(const BrowseRankData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_) -
    reinterpret_cast<char*>(&time_)) + sizeof(region_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
}

void BrowseRankData::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_) -
      reinterpret_cast<char*>(&time_)) + sizeof(region_));
}

BrowseRankData::~BrowseRankData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
  SharedDtor();
}

void BrowseRankData::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BrowseRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrowseRankData::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrowseRankData& BrowseRankData::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrowseRankData* BrowseRankData::New(::google::protobuf::Arena* arena) const {
  BrowseRankData* n = new BrowseRankData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrowseRankData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&positioncoef_) -
        reinterpret_cast<char*>(&time_)) + sizeof(positioncoef_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&timecoef_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&region_) -
        reinterpret_cast<char*>(&timecoef_)) + sizeof(region_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BrowseRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.BrowseRankData.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 region = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dwellTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_dwelltime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwelltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double loadTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_loadtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loadtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double numberOfSessions = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_numberofsessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &numberofsessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double numberOfLoads = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_numberofloads();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &numberofloads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double positionCoef = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_positioncoef();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positioncoef_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timeCoef = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_timecoef();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timecoef_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double browseRank = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_browserank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &browserank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double filteredBrowseRank = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_filteredbrowserank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &filteredbrowserank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pagesInSite = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_pagesinsite();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pagesinsite_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
  return false;
#undef DO_
}

void BrowseRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.BrowseRankData.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required uint32 region = 2;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->region(), output);
  }

  // optional uint64 time = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional double dwellTime = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->dwelltime(), output);
  }

  // optional double loadTime = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->loadtime(), output);
  }

  // optional double position = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->position(), output);
  }

  // optional double numberOfSessions = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->numberofsessions(), output);
  }

  // optional double numberOfLoads = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->numberofloads(), output);
  }

  // optional double positionCoef = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->positioncoef(), output);
  }

  // optional double timeCoef = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->timecoef(), output);
  }

  // optional double browseRank = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->browserank(), output);
  }

  // optional double filteredBrowseRank = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->filteredbrowserank(), output);
  }

  // optional double pagesInSite = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->pagesinsite(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
}

::google::protobuf::uint8* BrowseRankData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.BrowseRankData.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required uint32 region = 2;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->region(), target);
  }

  // optional uint64 time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional double dwellTime = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->dwelltime(), target);
  }

  // optional double loadTime = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->loadtime(), target);
  }

  // optional double position = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->position(), target);
  }

  // optional double numberOfSessions = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->numberofsessions(), target);
  }

  // optional double numberOfLoads = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->numberofloads(), target);
  }

  // optional double positionCoef = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->positioncoef(), target);
  }

  // optional double timeCoef = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->timecoef(), target);
  }

  // optional double browseRank = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->browserank(), target);
  }

  // optional double filteredBrowseRank = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->filteredbrowserank(), target);
  }

  // optional double pagesInSite = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->pagesinsite(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
  return target;
}

size_t BrowseRankData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_region()) {
    // required uint32 region = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region());
  }

  return total_size;
}
size_t BrowseRankData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001001) ^ 0x00001001) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required uint32 region = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional double dwellTime = 4;
    if (has_dwelltime()) {
      total_size += 1 + 8;
    }

    // optional double loadTime = 5;
    if (has_loadtime()) {
      total_size += 1 + 8;
    }

    // optional double position = 6;
    if (has_position()) {
      total_size += 1 + 8;
    }

    // optional double numberOfSessions = 7;
    if (has_numberofsessions()) {
      total_size += 1 + 8;
    }

    // optional double numberOfLoads = 8;
    if (has_numberofloads()) {
      total_size += 1 + 8;
    }

    // optional double positionCoef = 9;
    if (has_positioncoef()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double timeCoef = 10;
    if (has_timecoef()) {
      total_size += 1 + 8;
    }

    // optional double browseRank = 11;
    if (has_browserank()) {
      total_size += 1 + 8;
    }

    // optional double filteredBrowseRank = 12;
    if (has_filteredbrowserank()) {
      total_size += 1 + 8;
    }

    // optional double pagesInSite = 13;
    if (has_pagesinsite()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrowseRankData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
  GOOGLE_DCHECK_NE(&from, this);
  const BrowseRankData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrowseRankData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
    MergeFrom(*source);
  }
}

void BrowseRankData::MergeFrom(const BrowseRankData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000004u) {
      dwelltime_ = from.dwelltime_;
    }
    if (cached_has_bits & 0x00000008u) {
      loadtime_ = from.loadtime_;
    }
    if (cached_has_bits & 0x00000010u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000020u) {
      numberofsessions_ = from.numberofsessions_;
    }
    if (cached_has_bits & 0x00000040u) {
      numberofloads_ = from.numberofloads_;
    }
    if (cached_has_bits & 0x00000080u) {
      positioncoef_ = from.positioncoef_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      timecoef_ = from.timecoef_;
    }
    if (cached_has_bits & 0x00000200u) {
      browserank_ = from.browserank_;
    }
    if (cached_has_bits & 0x00000400u) {
      filteredbrowserank_ = from.filteredbrowserank_;
    }
    if (cached_has_bits & 0x00000800u) {
      pagesinsite_ = from.pagesinsite_;
    }
    if (cached_has_bits & 0x00001000u) {
      region_ = from.region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BrowseRankData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrowseRankData::CopyFrom(const BrowseRankData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowseRankData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001001) != 0x00001001) return false;
  return true;
}

void BrowseRankData::Swap(BrowseRankData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrowseRankData::InternalSwap(BrowseRankData* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(time_, other->time_);
  swap(dwelltime_, other->dwelltime_);
  swap(loadtime_, other->loadtime_);
  swap(position_, other->position_);
  swap(numberofsessions_, other->numberofsessions_);
  swap(numberofloads_, other->numberofloads_);
  swap(positioncoef_, other->positioncoef_);
  swap(timecoef_, other->timecoef_);
  swap(browserank_, other->browserank_);
  swap(filteredbrowserank_, other->filteredbrowserank_);
  swap(pagesinsite_, other->pagesinsite_);
  swap(region_, other->region_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrowseRankData::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrowseRankData

// required string url = 1;
bool BrowseRankData::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BrowseRankData::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void BrowseRankData::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void BrowseRankData::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& BrowseRankData::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.url)
  return url_.GetNoArena();
}
void BrowseRankData::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.url)
}
#if LANG_CXX11
void BrowseRankData::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.BrowseRankData.url)
}
#endif
void BrowseRankData::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.BrowseRankData.url)
}
void BrowseRankData::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.BrowseRankData.url)
}
::std::string* BrowseRankData::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.BrowseRankData.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BrowseRankData::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.BrowseRankData.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BrowseRankData::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.BrowseRankData.url)
}

// required uint32 region = 2;
bool BrowseRankData::has_region() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BrowseRankData::set_has_region() {
  _has_bits_[0] |= 0x00001000u;
}
void BrowseRankData::clear_has_region() {
  _has_bits_[0] &= ~0x00001000u;
}
void BrowseRankData::clear_region() {
  region_ = 0u;
  clear_has_region();
}
::google::protobuf::uint32 BrowseRankData::region() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.region)
  return region_;
}
void BrowseRankData::set_region(::google::protobuf::uint32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.region)
}

// optional uint64 time = 3;
bool BrowseRankData::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BrowseRankData::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void BrowseRankData::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void BrowseRankData::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 BrowseRankData::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.time)
  return time_;
}
void BrowseRankData::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.time)
}

// optional double dwellTime = 4;
bool BrowseRankData::has_dwelltime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BrowseRankData::set_has_dwelltime() {
  _has_bits_[0] |= 0x00000004u;
}
void BrowseRankData::clear_has_dwelltime() {
  _has_bits_[0] &= ~0x00000004u;
}
void BrowseRankData::clear_dwelltime() {
  dwelltime_ = 0;
  clear_has_dwelltime();
}
double BrowseRankData::dwelltime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.dwellTime)
  return dwelltime_;
}
void BrowseRankData::set_dwelltime(double value) {
  set_has_dwelltime();
  dwelltime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.dwellTime)
}

// optional double loadTime = 5;
bool BrowseRankData::has_loadtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BrowseRankData::set_has_loadtime() {
  _has_bits_[0] |= 0x00000008u;
}
void BrowseRankData::clear_has_loadtime() {
  _has_bits_[0] &= ~0x00000008u;
}
void BrowseRankData::clear_loadtime() {
  loadtime_ = 0;
  clear_has_loadtime();
}
double BrowseRankData::loadtime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.loadTime)
  return loadtime_;
}
void BrowseRankData::set_loadtime(double value) {
  set_has_loadtime();
  loadtime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.loadTime)
}

// optional double position = 6;
bool BrowseRankData::has_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BrowseRankData::set_has_position() {
  _has_bits_[0] |= 0x00000010u;
}
void BrowseRankData::clear_has_position() {
  _has_bits_[0] &= ~0x00000010u;
}
void BrowseRankData::clear_position() {
  position_ = 0;
  clear_has_position();
}
double BrowseRankData::position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.position)
  return position_;
}
void BrowseRankData::set_position(double value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.position)
}

// optional double numberOfSessions = 7;
bool BrowseRankData::has_numberofsessions() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BrowseRankData::set_has_numberofsessions() {
  _has_bits_[0] |= 0x00000020u;
}
void BrowseRankData::clear_has_numberofsessions() {
  _has_bits_[0] &= ~0x00000020u;
}
void BrowseRankData::clear_numberofsessions() {
  numberofsessions_ = 0;
  clear_has_numberofsessions();
}
double BrowseRankData::numberofsessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.numberOfSessions)
  return numberofsessions_;
}
void BrowseRankData::set_numberofsessions(double value) {
  set_has_numberofsessions();
  numberofsessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.numberOfSessions)
}

// optional double numberOfLoads = 8;
bool BrowseRankData::has_numberofloads() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BrowseRankData::set_has_numberofloads() {
  _has_bits_[0] |= 0x00000040u;
}
void BrowseRankData::clear_has_numberofloads() {
  _has_bits_[0] &= ~0x00000040u;
}
void BrowseRankData::clear_numberofloads() {
  numberofloads_ = 0;
  clear_has_numberofloads();
}
double BrowseRankData::numberofloads() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.numberOfLoads)
  return numberofloads_;
}
void BrowseRankData::set_numberofloads(double value) {
  set_has_numberofloads();
  numberofloads_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.numberOfLoads)
}

// optional double positionCoef = 9;
bool BrowseRankData::has_positioncoef() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BrowseRankData::set_has_positioncoef() {
  _has_bits_[0] |= 0x00000080u;
}
void BrowseRankData::clear_has_positioncoef() {
  _has_bits_[0] &= ~0x00000080u;
}
void BrowseRankData::clear_positioncoef() {
  positioncoef_ = 0;
  clear_has_positioncoef();
}
double BrowseRankData::positioncoef() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.positionCoef)
  return positioncoef_;
}
void BrowseRankData::set_positioncoef(double value) {
  set_has_positioncoef();
  positioncoef_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.positionCoef)
}

// optional double timeCoef = 10;
bool BrowseRankData::has_timecoef() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BrowseRankData::set_has_timecoef() {
  _has_bits_[0] |= 0x00000100u;
}
void BrowseRankData::clear_has_timecoef() {
  _has_bits_[0] &= ~0x00000100u;
}
void BrowseRankData::clear_timecoef() {
  timecoef_ = 0;
  clear_has_timecoef();
}
double BrowseRankData::timecoef() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.timeCoef)
  return timecoef_;
}
void BrowseRankData::set_timecoef(double value) {
  set_has_timecoef();
  timecoef_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.timeCoef)
}

// optional double browseRank = 11;
bool BrowseRankData::has_browserank() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BrowseRankData::set_has_browserank() {
  _has_bits_[0] |= 0x00000200u;
}
void BrowseRankData::clear_has_browserank() {
  _has_bits_[0] &= ~0x00000200u;
}
void BrowseRankData::clear_browserank() {
  browserank_ = 0;
  clear_has_browserank();
}
double BrowseRankData::browserank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.browseRank)
  return browserank_;
}
void BrowseRankData::set_browserank(double value) {
  set_has_browserank();
  browserank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.browseRank)
}

// optional double filteredBrowseRank = 12;
bool BrowseRankData::has_filteredbrowserank() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BrowseRankData::set_has_filteredbrowserank() {
  _has_bits_[0] |= 0x00000400u;
}
void BrowseRankData::clear_has_filteredbrowserank() {
  _has_bits_[0] &= ~0x00000400u;
}
void BrowseRankData::clear_filteredbrowserank() {
  filteredbrowserank_ = 0;
  clear_has_filteredbrowserank();
}
double BrowseRankData::filteredbrowserank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.filteredBrowseRank)
  return filteredbrowserank_;
}
void BrowseRankData::set_filteredbrowserank(double value) {
  set_has_filteredbrowserank();
  filteredbrowserank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.filteredBrowseRank)
}

// optional double pagesInSite = 13;
bool BrowseRankData::has_pagesinsite() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BrowseRankData::set_has_pagesinsite() {
  _has_bits_[0] |= 0x00000800u;
}
void BrowseRankData::clear_has_pagesinsite() {
  _has_bits_[0] &= ~0x00000800u;
}
void BrowseRankData::clear_pagesinsite() {
  pagesinsite_ = 0;
  clear_has_pagesinsite();
}
double BrowseRankData::pagesinsite() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.pagesInSite)
  return pagesinsite_;
}
void BrowseRankData::set_pagesinsite(double value) {
  set_has_pagesinsite();
  pagesinsite_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.pagesInSite)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserRankUid::kUidFieldNumber;
const int UserRankUid::kRepeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRankUid::UserRankUid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.UserRankUid)
}
UserRankUid::UserRankUid(const UserRankUid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uid()) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  repeat_ = from.repeat_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.UserRankUid)
}

void UserRankUid::SharedCtor() {
  _cached_size_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repeat_ = 0;
}

UserRankUid::~UserRankUid() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.UserRankUid)
  SharedDtor();
}

void UserRankUid::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserRankUid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRankUid::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserRankUid& UserRankUid::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserRankUid* UserRankUid::New(::google::protobuf::Arena* arena) const {
  UserRankUid* n = new UserRankUid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserRankUid::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.UserRankUid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_uid()) {
    GOOGLE_DCHECK(!uid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*uid_.UnsafeRawStringPointer())->clear();
  }
  repeat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserRankUid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.UserRankUid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), static_cast<int>(this->uid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.UserRankUid.uid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double repeat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_repeat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &repeat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.UserRankUid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.UserRankUid)
  return false;
#undef DO_
}

void UserRankUid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.UserRankUid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.UserRankUid.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // required double repeat = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->repeat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.UserRankUid)
}

::google::protobuf::uint8* UserRankUid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.UserRankUid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.UserRankUid.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // required double repeat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->repeat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.UserRankUid)
  return target;
}

size_t UserRankUid::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.SputnikRanker.UserRankUid)
  size_t total_size = 0;

  if (has_uid()) {
    // required string uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  if (has_repeat()) {
    // required double repeat = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t UserRankUid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.UserRankUid)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());

    // required double repeat = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRankUid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.UserRankUid)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRankUid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserRankUid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.UserRankUid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.UserRankUid)
    MergeFrom(*source);
  }
}

void UserRankUid::MergeFrom(const UserRankUid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.UserRankUid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uid();
      uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
    }
    if (cached_has_bits & 0x00000002u) {
      repeat_ = from.repeat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserRankUid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.UserRankUid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRankUid::CopyFrom(const UserRankUid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.UserRankUid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRankUid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UserRankUid::Swap(UserRankUid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserRankUid::InternalSwap(UserRankUid* other) {
  using std::swap;
  uid_.Swap(&other->uid_);
  swap(repeat_, other->repeat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserRankUid::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserRankUid

// required string uid = 1;
bool UserRankUid::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserRankUid::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void UserRankUid::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserRankUid::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
const ::std::string& UserRankUid::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankUid.uid)
  return uid_.GetNoArena();
}
void UserRankUid::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankUid.uid)
}
#if LANG_CXX11
void UserRankUid::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.UserRankUid.uid)
}
#endif
void UserRankUid::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.UserRankUid.uid)
}
void UserRankUid::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.UserRankUid.uid)
}
::std::string* UserRankUid::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.UserRankUid.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserRankUid::release_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.UserRankUid.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserRankUid::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.UserRankUid.uid)
}

// required double repeat = 2;
bool UserRankUid::has_repeat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserRankUid::set_has_repeat() {
  _has_bits_[0] |= 0x00000002u;
}
void UserRankUid::clear_has_repeat() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserRankUid::clear_repeat() {
  repeat_ = 0;
  clear_has_repeat();
}
double UserRankUid::repeat() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankUid.repeat)
  return repeat_;
}
void UserRankUid::set_repeat(double value) {
  set_has_repeat();
  repeat_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankUid.repeat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserRankValues::kFilterMaskFieldNumber;
const int UserRankValues::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRankValues::UserRankValues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.UserRankValues)
}
UserRankValues::UserRankValues(const UserRankValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      uid_(from.uid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filtermask_ = from.filtermask_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.UserRankValues)
}

void UserRankValues::SharedCtor() {
  _cached_size_ = 0;
  filtermask_ = GOOGLE_ULONGLONG(0);
}

UserRankValues::~UserRankValues() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.UserRankValues)
  SharedDtor();
}

void UserRankValues::SharedDtor() {
}

void UserRankValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRankValues::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserRankValues& UserRankValues::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserRankValues* UserRankValues::New(::google::protobuf::Arena* arena) const {
  UserRankValues* n = new UserRankValues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserRankValues::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.UserRankValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.Clear();
  filtermask_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserRankValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.UserRankValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 filterMask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_filtermask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filtermask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.SputnikRanker.UserRankUid uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.UserRankValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.UserRankValues)
  return false;
#undef DO_
}

void UserRankValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.UserRankValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 filterMask = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->filtermask(), output);
  }

  // repeated .ru.mail.go.webbase.SputnikRanker.UserRankUid uid = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uid_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.UserRankValues)
}

::google::protobuf::uint8* UserRankValues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.UserRankValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 filterMask = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->filtermask(), target);
  }

  // repeated .ru.mail.go.webbase.SputnikRanker.UserRankUid uid = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uid_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->uid(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.UserRankValues)
  return target;
}

size_t UserRankValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.UserRankValues)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 filterMask = 1;
  if (has_filtermask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->filtermask());
  }
  // repeated .ru.mail.go.webbase.SputnikRanker.UserRankUid uid = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->uid_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRankValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.UserRankValues)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRankValues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserRankValues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.UserRankValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.UserRankValues)
    MergeFrom(*source);
  }
}

void UserRankValues::MergeFrom(const UserRankValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.UserRankValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_.MergeFrom(from.uid_);
  if (from.has_filtermask()) {
    set_filtermask(from.filtermask());
  }
}

void UserRankValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.UserRankValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRankValues::CopyFrom(const UserRankValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.UserRankValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRankValues::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->uid())) return false;
  return true;
}

void UserRankValues::Swap(UserRankValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserRankValues::InternalSwap(UserRankValues* other) {
  using std::swap;
  uid_.InternalSwap(&other->uid_);
  swap(filtermask_, other->filtermask_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserRankValues::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserRankValues

// required uint64 filterMask = 1;
bool UserRankValues::has_filtermask() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserRankValues::set_has_filtermask() {
  _has_bits_[0] |= 0x00000001u;
}
void UserRankValues::clear_has_filtermask() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserRankValues::clear_filtermask() {
  filtermask_ = GOOGLE_ULONGLONG(0);
  clear_has_filtermask();
}
::google::protobuf::uint64 UserRankValues::filtermask() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankValues.filterMask)
  return filtermask_;
}
void UserRankValues::set_filtermask(::google::protobuf::uint64 value) {
  set_has_filtermask();
  filtermask_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankValues.filterMask)
}

// repeated .ru.mail.go.webbase.SputnikRanker.UserRankUid uid = 2;
int UserRankValues::uid_size() const {
  return uid_.size();
}
void UserRankValues::clear_uid() {
  uid_.Clear();
}
const ::ru::mail::go::webbase::SputnikRanker::UserRankUid& UserRankValues::uid(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankValues.uid)
  return uid_.Get(index);
}
::ru::mail::go::webbase::SputnikRanker::UserRankUid* UserRankValues::mutable_uid(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.UserRankValues.uid)
  return uid_.Mutable(index);
}
::ru::mail::go::webbase::SputnikRanker::UserRankUid* UserRankValues::add_uid() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.UserRankValues.uid)
  return uid_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::UserRankUid >*
UserRankValues::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.UserRankValues.uid)
  return &uid_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::UserRankUid >&
UserRankValues::uid() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.UserRankValues.uid)
  return uid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserRankData::kUrlFieldNumber;
const int UserRankData::kRegionFieldNumber;
const int UserRankData::kTimeFieldNumber;
const int UserRankData::kNumberOfUsersFieldNumber;
const int UserRankData::kValuesFieldNumber;
const int UserRankData::kHitsFieldNumber;
const int UserRankData::kOriginalUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRankData::UserRankData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.UserRankData)
}
UserRankData::UserRankData(const UserRankData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      original_urls_(from.original_urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_values()) {
    values_ = new ::ru::mail::go::webbase::SputnikRanker::UserRankValues(*from.values_);
  } else {
    values_ = NULL;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_) -
    reinterpret_cast<char*>(&time_)) + sizeof(region_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.UserRankData)
}

void UserRankData::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&values_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_) -
      reinterpret_cast<char*>(&values_)) + sizeof(region_));
}

UserRankData::~UserRankData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.UserRankData)
  SharedDtor();
}

void UserRankData::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete values_;
}

void UserRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRankData::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserRankData& UserRankData::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserRankData* UserRankData::New(::google::protobuf::Arena* arena) const {
  UserRankData* n = new UserRankData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserRankData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.UserRankData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  original_urls_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(values_ != NULL);
      values_->::ru::mail::go::webbase::SputnikRanker::UserRankValues::Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&region_) -
        reinterpret_cast<char*>(&time_)) + sizeof(region_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.UserRankData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.UserRankData.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 region = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double numberOfUsers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_numberofusers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &numberofusers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.SputnikRanker.UserRankValues values = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 hits = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string original_urls = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_original_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->original_urls(this->original_urls_size() - 1).data(),
            static_cast<int>(this->original_urls(this->original_urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.UserRankData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.UserRankData)
  return false;
#undef DO_
}

void UserRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.UserRankData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.UserRankData.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required uint32 region = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->region(), output);
  }

  // optional uint64 time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional double numberOfUsers = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->numberofusers(), output);
  }

  // optional .ru.mail.go.webbase.SputnikRanker.UserRankValues values = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->values_, output);
  }

  // optional uint64 hits = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->hits(), output);
  }

  // repeated string original_urls = 7;
  for (int i = 0, n = this->original_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->original_urls(i).data(), static_cast<int>(this->original_urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->original_urls(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.UserRankData)
}

::google::protobuf::uint8* UserRankData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.UserRankData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.UserRankData.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required uint32 region = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->region(), target);
  }

  // optional uint64 time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional double numberOfUsers = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->numberofusers(), target);
  }

  // optional .ru.mail.go.webbase.SputnikRanker.UserRankValues values = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->values_, deterministic, target);
  }

  // optional uint64 hits = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->hits(), target);
  }

  // repeated string original_urls = 7;
  for (int i = 0, n = this->original_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->original_urls(i).data(), static_cast<int>(this->original_urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->original_urls(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.UserRankData)
  return target;
}

size_t UserRankData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.SputnikRanker.UserRankData)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_region()) {
    // required uint32 region = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region());
  }

  return total_size;
}
size_t UserRankData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.UserRankData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000021) ^ 0x00000021) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required uint32 region = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string original_urls = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->original_urls_size());
  for (int i = 0, n = this->original_urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->original_urls(i));
  }

  if (_has_bits_[0 / 32] & 30u) {
    // optional .ru.mail.go.webbase.SputnikRanker.UserRankValues values = 5;
    if (has_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->values_);
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional double numberOfUsers = 4;
    if (has_numberofusers()) {
      total_size += 1 + 8;
    }

    // optional uint64 hits = 6;
    if (has_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hits());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRankData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.UserRankData)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRankData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserRankData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.UserRankData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.UserRankData)
    MergeFrom(*source);
  }
}

void UserRankData::MergeFrom(const UserRankData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.UserRankData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  original_urls_.MergeFrom(from.original_urls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_values()->::ru::mail::go::webbase::SputnikRanker::UserRankValues::MergeFrom(from.values());
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      numberofusers_ = from.numberofusers_;
    }
    if (cached_has_bits & 0x00000010u) {
      hits_ = from.hits_;
    }
    if (cached_has_bits & 0x00000020u) {
      region_ = from.region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserRankData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.UserRankData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRankData::CopyFrom(const UserRankData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.UserRankData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRankData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;
  if (has_values()) {
    if (!this->values_->IsInitialized()) return false;
  }
  return true;
}

void UserRankData::Swap(UserRankData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserRankData::InternalSwap(UserRankData* other) {
  using std::swap;
  original_urls_.InternalSwap(&other->original_urls_);
  url_.Swap(&other->url_);
  swap(values_, other->values_);
  swap(time_, other->time_);
  swap(numberofusers_, other->numberofusers_);
  swap(hits_, other->hits_);
  swap(region_, other->region_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserRankData::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserRankData

// required string url = 1;
bool UserRankData::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserRankData::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void UserRankData::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserRankData::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& UserRankData::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankData.url)
  return url_.GetNoArena();
}
void UserRankData::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankData.url)
}
#if LANG_CXX11
void UserRankData::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.UserRankData.url)
}
#endif
void UserRankData::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.UserRankData.url)
}
void UserRankData::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.UserRankData.url)
}
::std::string* UserRankData::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.UserRankData.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserRankData::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.UserRankData.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserRankData::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.UserRankData.url)
}

// required uint32 region = 2;
bool UserRankData::has_region() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserRankData::set_has_region() {
  _has_bits_[0] |= 0x00000020u;
}
void UserRankData::clear_has_region() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserRankData::clear_region() {
  region_ = 0u;
  clear_has_region();
}
::google::protobuf::uint32 UserRankData::region() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankData.region)
  return region_;
}
void UserRankData::set_region(::google::protobuf::uint32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankData.region)
}

// optional uint64 time = 3;
bool UserRankData::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserRankData::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void UserRankData::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserRankData::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 UserRankData::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankData.time)
  return time_;
}
void UserRankData::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankData.time)
}

// optional double numberOfUsers = 4;
bool UserRankData::has_numberofusers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserRankData::set_has_numberofusers() {
  _has_bits_[0] |= 0x00000008u;
}
void UserRankData::clear_has_numberofusers() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserRankData::clear_numberofusers() {
  numberofusers_ = 0;
  clear_has_numberofusers();
}
double UserRankData::numberofusers() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankData.numberOfUsers)
  return numberofusers_;
}
void UserRankData::set_numberofusers(double value) {
  set_has_numberofusers();
  numberofusers_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankData.numberOfUsers)
}

// optional .ru.mail.go.webbase.SputnikRanker.UserRankValues values = 5;
bool UserRankData::has_values() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserRankData::set_has_values() {
  _has_bits_[0] |= 0x00000002u;
}
void UserRankData::clear_has_values() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserRankData::clear_values() {
  if (values_ != NULL) values_->::ru::mail::go::webbase::SputnikRanker::UserRankValues::Clear();
  clear_has_values();
}
const ::ru::mail::go::webbase::SputnikRanker::UserRankValues& UserRankData::values() const {
  const ::ru::mail::go::webbase::SputnikRanker::UserRankValues* p = values_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankData.values)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::SputnikRanker::UserRankValues*>(
      &::ru::mail::go::webbase::SputnikRanker::_UserRankValues_default_instance_);
}
::ru::mail::go::webbase::SputnikRanker::UserRankValues* UserRankData::mutable_values() {
  set_has_values();
  if (values_ == NULL) {
    values_ = new ::ru::mail::go::webbase::SputnikRanker::UserRankValues;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.UserRankData.values)
  return values_;
}
::ru::mail::go::webbase::SputnikRanker::UserRankValues* UserRankData::release_values() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.UserRankData.values)
  clear_has_values();
  ::ru::mail::go::webbase::SputnikRanker::UserRankValues* temp = values_;
  values_ = NULL;
  return temp;
}
void UserRankData::set_allocated_values(::ru::mail::go::webbase::SputnikRanker::UserRankValues* values) {
  delete values_;
  values_ = values;
  if (values) {
    set_has_values();
  } else {
    clear_has_values();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.UserRankData.values)
}

// optional uint64 hits = 6;
bool UserRankData::has_hits() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserRankData::set_has_hits() {
  _has_bits_[0] |= 0x00000010u;
}
void UserRankData::clear_has_hits() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserRankData::clear_hits() {
  hits_ = GOOGLE_ULONGLONG(0);
  clear_has_hits();
}
::google::protobuf::uint64 UserRankData::hits() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankData.hits)
  return hits_;
}
void UserRankData::set_hits(::google::protobuf::uint64 value) {
  set_has_hits();
  hits_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankData.hits)
}

// repeated string original_urls = 7;
int UserRankData::original_urls_size() const {
  return original_urls_.size();
}
void UserRankData::clear_original_urls() {
  original_urls_.Clear();
}
const ::std::string& UserRankData::original_urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
  return original_urls_.Get(index);
}
::std::string* UserRankData::mutable_original_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
  return original_urls_.Mutable(index);
}
void UserRankData::set_original_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
  original_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void UserRankData::set_original_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
  original_urls_.Mutable(index)->assign(std::move(value));
}
#endif
void UserRankData::set_original_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  original_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
}
void UserRankData::set_original_urls(int index, const char* value, size_t size) {
  original_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
}
::std::string* UserRankData::add_original_urls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
  return original_urls_.Add();
}
void UserRankData::add_original_urls(const ::std::string& value) {
  original_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
}
#if LANG_CXX11
void UserRankData::add_original_urls(::std::string&& value) {
  original_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
}
#endif
void UserRankData::add_original_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  original_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
}
void UserRankData::add_original_urls(const char* value, size_t size) {
  original_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserRankData::original_urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
  return original_urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
UserRankData::mutable_original_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
  return &original_urls_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForumedSegment::kPatternFieldNumber;
const int ForumedSegment::kIsForumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForumedSegment::ForumedSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
}
ForumedSegment::ForumedSegment(const ForumedSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pattern()) {
    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  isforum_ = from.isforum_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
}

void ForumedSegment::SharedCtor() {
  _cached_size_ = 0;
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isforum_ = false;
}

ForumedSegment::~ForumedSegment() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
  SharedDtor();
}

void ForumedSegment::SharedDtor() {
  pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ForumedSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForumedSegment::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ForumedSegment& ForumedSegment::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForumedSegment* ForumedSegment::New(::google::protobuf::Arena* arena) const {
  ForumedSegment* n = new ForumedSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForumedSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_pattern()) {
    GOOGLE_DCHECK(!pattern_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*pattern_.UnsafeRawStringPointer())->clear();
  }
  isforum_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ForumedSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pattern = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), static_cast<int>(this->pattern().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isForum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_isforum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isforum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
  return false;
#undef DO_
}

void ForumedSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string pattern = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), static_cast<int>(this->pattern().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pattern(), output);
  }

  // required bool isForum = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isforum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
}

::google::protobuf::uint8* ForumedSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string pattern = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), static_cast<int>(this->pattern().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pattern(), target);
  }

  // required bool isForum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isforum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
  return target;
}

size_t ForumedSegment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
  size_t total_size = 0;

  if (has_pattern()) {
    // required string pattern = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pattern());
  }

  if (has_isforum()) {
    // required bool isForum = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ForumedSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string pattern = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pattern());

    // required bool isForum = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForumedSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const ForumedSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForumedSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
    MergeFrom(*source);
  }
}

void ForumedSegment::MergeFrom(const ForumedSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pattern();
      pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
    }
    if (cached_has_bits & 0x00000002u) {
      isforum_ = from.isforum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ForumedSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForumedSegment::CopyFrom(const ForumedSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForumedSegment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ForumedSegment::Swap(ForumedSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForumedSegment::InternalSwap(ForumedSegment* other) {
  using std::swap;
  pattern_.Swap(&other->pattern_);
  swap(isforum_, other->isforum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForumedSegment::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForumedSegment

// required string pattern = 1;
bool ForumedSegment::has_pattern() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ForumedSegment::set_has_pattern() {
  _has_bits_[0] |= 0x00000001u;
}
void ForumedSegment::clear_has_pattern() {
  _has_bits_[0] &= ~0x00000001u;
}
void ForumedSegment::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pattern();
}
const ::std::string& ForumedSegment::pattern() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern)
  return pattern_.GetNoArena();
}
void ForumedSegment::set_pattern(const ::std::string& value) {
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern)
}
#if LANG_CXX11
void ForumedSegment::set_pattern(::std::string&& value) {
  set_has_pattern();
  pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern)
}
#endif
void ForumedSegment::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern)
}
void ForumedSegment::set_pattern(const char* value, size_t size) {
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern)
}
::std::string* ForumedSegment::mutable_pattern() {
  set_has_pattern();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForumedSegment::release_pattern() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern)
  clear_has_pattern();
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForumedSegment::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    set_has_pattern();
  } else {
    clear_has_pattern();
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern)
}

// required bool isForum = 2;
bool ForumedSegment::has_isforum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ForumedSegment::set_has_isforum() {
  _has_bits_[0] |= 0x00000002u;
}
void ForumedSegment::clear_has_isforum() {
  _has_bits_[0] &= ~0x00000002u;
}
void ForumedSegment::clear_isforum() {
  isforum_ = false;
  clear_has_isforum();
}
bool ForumedSegment::isforum() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ForumedSegment.isForum)
  return isforum_;
}
void ForumedSegment::set_isforum(bool value) {
  set_has_isforum();
  isforum_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ForumedSegment.isForum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForumedSekitei::kSegmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForumedSekitei::ForumedSekitei()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
}
ForumedSekitei::ForumedSekitei(const ForumedSekitei& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
}

void ForumedSekitei::SharedCtor() {
  _cached_size_ = 0;
}

ForumedSekitei::~ForumedSekitei() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
  SharedDtor();
}

void ForumedSekitei::SharedDtor() {
}

void ForumedSekitei::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForumedSekitei::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ForumedSekitei& ForumedSekitei::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForumedSekitei* ForumedSekitei::New(::google::protobuf::Arena* arena) const {
  ForumedSekitei* n = new ForumedSekitei;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForumedSekitei::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ForumedSekitei::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.SputnikRanker.ForumedSegment segments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
  return false;
#undef DO_
}

void ForumedSekitei::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.SputnikRanker.ForumedSegment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segments(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
}

::google::protobuf::uint8* ForumedSekitei::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.SputnikRanker.ForumedSegment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->segments(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
  return target;
}

size_t ForumedSekitei::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.SputnikRanker.ForumedSegment segments = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->segments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segments(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForumedSekitei::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
  GOOGLE_DCHECK_NE(&from, this);
  const ForumedSekitei* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForumedSekitei>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
    MergeFrom(*source);
  }
}

void ForumedSekitei::MergeFrom(const ForumedSekitei& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
}

void ForumedSekitei::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForumedSekitei::CopyFrom(const ForumedSekitei& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForumedSekitei::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->segments())) return false;
  return true;
}

void ForumedSekitei::Swap(ForumedSekitei* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForumedSekitei::InternalSwap(ForumedSekitei* other) {
  using std::swap;
  segments_.InternalSwap(&other->segments_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForumedSekitei::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForumedSekitei

// repeated .ru.mail.go.webbase.SputnikRanker.ForumedSegment segments = 1;
int ForumedSekitei::segments_size() const {
  return segments_.size();
}
void ForumedSekitei::clear_segments() {
  segments_.Clear();
}
const ::ru::mail::go::webbase::SputnikRanker::ForumedSegment& ForumedSekitei::segments(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ForumedSekitei.segments)
  return segments_.Get(index);
}
::ru::mail::go::webbase::SputnikRanker::ForumedSegment* ForumedSekitei::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.ForumedSekitei.segments)
  return segments_.Mutable(index);
}
::ru::mail::go::webbase::SputnikRanker::ForumedSegment* ForumedSekitei::add_segments() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.ForumedSekitei.segments)
  return segments_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::ForumedSegment >*
ForumedSekitei::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.ForumedSekitei.segments)
  return &segments_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::ForumedSegment >&
ForumedSekitei::segments() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.ForumedSekitei.segments)
  return segments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionSpc::kTypeFieldNumber;
const int SessionSpc::kRawQueryFieldNumber;
const int SessionSpc::kProposedQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionSpc::SessionSpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.SessionSpc)
}
SessionSpc::SessionSpc(const SessionSpc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rawquery_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rawquery()) {
    rawquery_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rawquery_);
  }
  proposedquery_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proposedquery()) {
    proposedquery_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposedquery_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.SessionSpc)
}

void SessionSpc::SharedCtor() {
  _cached_size_ = 0;
  rawquery_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposedquery_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

SessionSpc::~SessionSpc() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.SessionSpc)
  SharedDtor();
}

void SessionSpc::SharedDtor() {
  rawquery_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposedquery_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SessionSpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionSpc::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionSpc& SessionSpc::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionSpc* SessionSpc::New(::google::protobuf::Arena* arena) const {
  SessionSpc* n = new SessionSpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionSpc::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.SessionSpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!rawquery_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rawquery_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!proposedquery_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*proposedquery_.UnsafeRawStringPointer())->clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionSpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.SessionSpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.SputnikRanker.SessionSpc.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string rawQuery = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rawquery()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rawquery().data(), static_cast<int>(this->rawquery().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string proposedQuery = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proposedquery()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proposedquery().data(), static_cast<int>(this->proposedquery().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.SessionSpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.SessionSpc)
  return false;
#undef DO_
}

void SessionSpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.SessionSpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.SputnikRanker.SessionSpc.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string rawQuery = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rawquery().data(), static_cast<int>(this->rawquery().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rawquery(), output);
  }

  // optional string proposedQuery = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proposedquery().data(), static_cast<int>(this->proposedquery().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->proposedquery(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.SessionSpc)
}

::google::protobuf::uint8* SessionSpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.SessionSpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.SputnikRanker.SessionSpc.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string rawQuery = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rawquery().data(), static_cast<int>(this->rawquery().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rawquery(), target);
  }

  // optional string proposedQuery = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proposedquery().data(), static_cast<int>(this->proposedquery().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->proposedquery(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.SessionSpc)
  return target;
}

size_t SessionSpc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.SputnikRanker.SessionSpc)
  size_t total_size = 0;

  if (has_rawquery()) {
    // required string rawQuery = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rawquery());
  }

  if (has_type()) {
    // required .ru.mail.go.webbase.SputnikRanker.SessionSpc.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t SessionSpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.SessionSpc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string rawQuery = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rawquery());

    // required .ru.mail.go.webbase.SputnikRanker.SessionSpc.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string proposedQuery = 3;
  if (has_proposedquery()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proposedquery());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionSpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.SessionSpc)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionSpc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionSpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.SessionSpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.SessionSpc)
    MergeFrom(*source);
  }
}

void SessionSpc::MergeFrom(const SessionSpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.SessionSpc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rawquery();
      rawquery_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rawquery_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_proposedquery();
      proposedquery_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposedquery_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SessionSpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.SessionSpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionSpc::CopyFrom(const SessionSpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.SessionSpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionSpc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void SessionSpc::Swap(SessionSpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionSpc::InternalSwap(SessionSpc* other) {
  using std::swap;
  rawquery_.Swap(&other->rawquery_);
  proposedquery_.Swap(&other->proposedquery_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionSpc::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionSpc

// required .ru.mail.go.webbase.SputnikRanker.SessionSpc.Type type = 1;
bool SessionSpc::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SessionSpc::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void SessionSpc::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void SessionSpc::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type SessionSpc::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.SessionSpc.type)
  return static_cast< ::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type >(type_);
}
void SessionSpc::set_type(::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type value) {
  assert(::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.SessionSpc.type)
}

// required string rawQuery = 2;
bool SessionSpc::has_rawquery() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionSpc::set_has_rawquery() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionSpc::clear_has_rawquery() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionSpc::clear_rawquery() {
  rawquery_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rawquery();
}
const ::std::string& SessionSpc::rawquery() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery)
  return rawquery_.GetNoArena();
}
void SessionSpc::set_rawquery(const ::std::string& value) {
  set_has_rawquery();
  rawquery_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery)
}
#if LANG_CXX11
void SessionSpc::set_rawquery(::std::string&& value) {
  set_has_rawquery();
  rawquery_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery)
}
#endif
void SessionSpc::set_rawquery(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rawquery();
  rawquery_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery)
}
void SessionSpc::set_rawquery(const char* value, size_t size) {
  set_has_rawquery();
  rawquery_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery)
}
::std::string* SessionSpc::mutable_rawquery() {
  set_has_rawquery();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery)
  return rawquery_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionSpc::release_rawquery() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery)
  clear_has_rawquery();
  return rawquery_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionSpc::set_allocated_rawquery(::std::string* rawquery) {
  if (rawquery != NULL) {
    set_has_rawquery();
  } else {
    clear_has_rawquery();
  }
  rawquery_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rawquery);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery)
}

// optional string proposedQuery = 3;
bool SessionSpc::has_proposedquery() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionSpc::set_has_proposedquery() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionSpc::clear_has_proposedquery() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionSpc::clear_proposedquery() {
  proposedquery_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proposedquery();
}
const ::std::string& SessionSpc::proposedquery() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery)
  return proposedquery_.GetNoArena();
}
void SessionSpc::set_proposedquery(const ::std::string& value) {
  set_has_proposedquery();
  proposedquery_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery)
}
#if LANG_CXX11
void SessionSpc::set_proposedquery(::std::string&& value) {
  set_has_proposedquery();
  proposedquery_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery)
}
#endif
void SessionSpc::set_proposedquery(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proposedquery();
  proposedquery_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery)
}
void SessionSpc::set_proposedquery(const char* value, size_t size) {
  set_has_proposedquery();
  proposedquery_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery)
}
::std::string* SessionSpc::mutable_proposedquery() {
  set_has_proposedquery();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery)
  return proposedquery_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionSpc::release_proposedquery() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery)
  clear_has_proposedquery();
  return proposedquery_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionSpc::set_allocated_proposedquery(::std::string* proposedquery) {
  if (proposedquery != NULL) {
    set_has_proposedquery();
  } else {
    clear_has_proposedquery();
  }
  proposedquery_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proposedquery);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedirectArray::kRedirectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedirectArray::RedirectArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.RedirectArray)
}
RedirectArray::RedirectArray(const RedirectArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      redirects_(from.redirects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.RedirectArray)
}

void RedirectArray::SharedCtor() {
  _cached_size_ = 0;
}

RedirectArray::~RedirectArray() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.RedirectArray)
  SharedDtor();
}

void RedirectArray::SharedDtor() {
}

void RedirectArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedirectArray::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedirectArray& RedirectArray::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

RedirectArray* RedirectArray::New(::google::protobuf::Arena* arena) const {
  RedirectArray* n = new RedirectArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedirectArray::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.RedirectArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  redirects_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RedirectArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.RedirectArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirects = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_redirects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.RedirectArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.RedirectArray)
  return false;
#undef DO_
}

void RedirectArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.RedirectArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->redirects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->redirects(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.RedirectArray)
}

::google::protobuf::uint8* RedirectArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.RedirectArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->redirects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->redirects(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.RedirectArray)
  return target;
}

size_t RedirectArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.RedirectArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirects = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->redirects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redirects(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedirectArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.RedirectArray)
  GOOGLE_DCHECK_NE(&from, this);
  const RedirectArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedirectArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.RedirectArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.RedirectArray)
    MergeFrom(*source);
  }
}

void RedirectArray::MergeFrom(const RedirectArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.RedirectArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  redirects_.MergeFrom(from.redirects_);
}

void RedirectArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.RedirectArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedirectArray::CopyFrom(const RedirectArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.RedirectArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectArray::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->redirects())) return false;
  return true;
}

void RedirectArray::Swap(RedirectArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedirectArray::InternalSwap(RedirectArray* other) {
  using std::swap;
  redirects_.InternalSwap(&other->redirects_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedirectArray::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedirectArray

// repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirects = 1;
int RedirectArray::redirects_size() const {
  return redirects_.size();
}
void RedirectArray::clear_redirects() {
  redirects_.Clear();
}
const ::ru::mail::go::webbase::SputnikRanker::Redirect& RedirectArray::redirects(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.RedirectArray.redirects)
  return redirects_.Get(index);
}
::ru::mail::go::webbase::SputnikRanker::Redirect* RedirectArray::mutable_redirects(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.RedirectArray.redirects)
  return redirects_.Mutable(index);
}
::ru::mail::go::webbase::SputnikRanker::Redirect* RedirectArray::add_redirects() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.RedirectArray.redirects)
  return redirects_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Redirect >*
RedirectArray::mutable_redirects() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.RedirectArray.redirects)
  return &redirects_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Redirect >&
RedirectArray::redirects() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.RedirectArray.redirects)
  return redirects_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Snippet::kUrlFieldNumber;
const int Snippet::kTitleFieldNumber;
const int Snippet::kSnippetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Snippet::Snippet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.Snippet)
}
Snippet::Snippet(const Snippet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_snippet()) {
    snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snippet_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.Snippet)
}

void Snippet::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Snippet::~Snippet() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.Snippet)
  SharedDtor();
}

void Snippet::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snippet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Snippet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Snippet::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Snippet& Snippet::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Snippet* Snippet::New(::google::protobuf::Arena* arena) const {
  Snippet* n = new Snippet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Snippet::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.Snippet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!snippet_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*snippet_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Snippet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.Snippet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.Snippet.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.Snippet.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string snippet = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snippet().data(), static_cast<int>(this->snippet().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.Snippet.snippet");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.Snippet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.Snippet)
  return false;
#undef DO_
}

void Snippet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.Snippet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Snippet.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Snippet.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string snippet = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snippet().data(), static_cast<int>(this->snippet().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Snippet.snippet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->snippet(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.Snippet)
}

::google::protobuf::uint8* Snippet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.Snippet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Snippet.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Snippet.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string snippet = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snippet().data(), static_cast<int>(this->snippet().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.Snippet.snippet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->snippet(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.Snippet)
  return target;
}

size_t Snippet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.Snippet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string snippet = 3;
    if (has_snippet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snippet());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Snippet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.Snippet)
  GOOGLE_DCHECK_NE(&from, this);
  const Snippet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Snippet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.Snippet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.Snippet)
    MergeFrom(*source);
  }
}

void Snippet::MergeFrom(const Snippet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.Snippet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_snippet();
      snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snippet_);
    }
  }
}

void Snippet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.Snippet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snippet::CopyFrom(const Snippet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.Snippet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Snippet::Swap(Snippet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Snippet::InternalSwap(Snippet* other) {
  using std::swap;
  url_.Swap(&other->url_);
  title_.Swap(&other->title_);
  snippet_.Swap(&other->snippet_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Snippet::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Snippet

// required string url = 1;
bool Snippet::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Snippet::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void Snippet::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void Snippet::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& Snippet::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Snippet.url)
  return url_.GetNoArena();
}
void Snippet::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Snippet.url)
}
#if LANG_CXX11
void Snippet::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Snippet.url)
}
#endif
void Snippet::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Snippet.url)
}
void Snippet::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Snippet.url)
}
::std::string* Snippet::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Snippet.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Snippet::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Snippet.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Snippet::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Snippet.url)
}

// optional string title = 2;
bool Snippet::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Snippet::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void Snippet::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void Snippet::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& Snippet::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Snippet.title)
  return title_.GetNoArena();
}
void Snippet::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Snippet.title)
}
#if LANG_CXX11
void Snippet::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Snippet.title)
}
#endif
void Snippet::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Snippet.title)
}
void Snippet::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Snippet.title)
}
::std::string* Snippet::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Snippet.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Snippet::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Snippet.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Snippet::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Snippet.title)
}

// optional string snippet = 3;
bool Snippet::has_snippet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Snippet::set_has_snippet() {
  _has_bits_[0] |= 0x00000004u;
}
void Snippet::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000004u;
}
void Snippet::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snippet();
}
const ::std::string& Snippet::snippet() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Snippet.snippet)
  return snippet_.GetNoArena();
}
void Snippet::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Snippet.snippet)
}
#if LANG_CXX11
void Snippet::set_snippet(::std::string&& value) {
  set_has_snippet();
  snippet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Snippet.snippet)
}
#endif
void Snippet::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Snippet.snippet)
}
void Snippet::set_snippet(const char* value, size_t size) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Snippet.snippet)
}
::std::string* Snippet::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Snippet.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Snippet::release_snippet() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Snippet.snippet)
  clear_has_snippet();
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Snippet::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Snippet.snippet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnippetSession::kSnippetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnippetSession::SnippetSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.SnippetSession)
}
SnippetSession::SnippetSession(const SnippetSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      snippets_(from.snippets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.SnippetSession)
}

void SnippetSession::SharedCtor() {
  _cached_size_ = 0;
}

SnippetSession::~SnippetSession() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.SnippetSession)
  SharedDtor();
}

void SnippetSession::SharedDtor() {
}

void SnippetSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnippetSession::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnippetSession& SnippetSession::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnippetSession* SnippetSession::New(::google::protobuf::Arena* arena) const {
  SnippetSession* n = new SnippetSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnippetSession::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.SnippetSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snippets_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnippetSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.SnippetSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.SputnikRanker.Snippet snippets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_snippets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.SnippetSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.SnippetSession)
  return false;
#undef DO_
}

void SnippetSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.SnippetSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.SputnikRanker.Snippet snippets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snippets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->snippets(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.SnippetSession)
}

::google::protobuf::uint8* SnippetSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.SnippetSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.SputnikRanker.Snippet snippets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snippets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->snippets(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.SnippetSession)
  return target;
}

size_t SnippetSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.SnippetSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.SputnikRanker.Snippet snippets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->snippets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snippets(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnippetSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.SnippetSession)
  GOOGLE_DCHECK_NE(&from, this);
  const SnippetSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnippetSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.SnippetSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.SnippetSession)
    MergeFrom(*source);
  }
}

void SnippetSession::MergeFrom(const SnippetSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.SnippetSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  snippets_.MergeFrom(from.snippets_);
}

void SnippetSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.SnippetSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnippetSession::CopyFrom(const SnippetSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.SnippetSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetSession::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->snippets())) return false;
  return true;
}

void SnippetSession::Swap(SnippetSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnippetSession::InternalSwap(SnippetSession* other) {
  using std::swap;
  snippets_.InternalSwap(&other->snippets_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnippetSession::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnippetSession

// repeated .ru.mail.go.webbase.SputnikRanker.Snippet snippets = 1;
int SnippetSession::snippets_size() const {
  return snippets_.size();
}
void SnippetSession::clear_snippets() {
  snippets_.Clear();
}
const ::ru::mail::go::webbase::SputnikRanker::Snippet& SnippetSession::snippets(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.SnippetSession.snippets)
  return snippets_.Get(index);
}
::ru::mail::go::webbase::SputnikRanker::Snippet* SnippetSession::mutable_snippets(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.SnippetSession.snippets)
  return snippets_.Mutable(index);
}
::ru::mail::go::webbase::SputnikRanker::Snippet* SnippetSession::add_snippets() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.SnippetSession.snippets)
  return snippets_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Snippet >*
SnippetSession::mutable_snippets() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.SnippetSession.snippets)
  return &snippets_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Snippet >&
SnippetSession::snippets() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.SnippetSession.snippets)
  return snippets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FreshUrl::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FreshUrl::FreshUrl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.FreshUrl)
}
FreshUrl::FreshUrl(const FreshUrl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.FreshUrl)
}

void FreshUrl::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FreshUrl::~FreshUrl() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.FreshUrl)
  SharedDtor();
}

void FreshUrl::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FreshUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreshUrl::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FreshUrl& FreshUrl::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

FreshUrl* FreshUrl::New(::google::protobuf::Arena* arena) const {
  FreshUrl* n = new FreshUrl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FreshUrl::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.FreshUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FreshUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.FreshUrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.FreshUrl.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.FreshUrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.FreshUrl)
  return false;
#undef DO_
}

void FreshUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.FreshUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.FreshUrl.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.FreshUrl)
}

::google::protobuf::uint8* FreshUrl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.FreshUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.FreshUrl.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.FreshUrl)
  return target;
}

size_t FreshUrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.FreshUrl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreshUrl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.FreshUrl)
  GOOGLE_DCHECK_NE(&from, this);
  const FreshUrl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FreshUrl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.FreshUrl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.FreshUrl)
    MergeFrom(*source);
  }
}

void FreshUrl::MergeFrom(const FreshUrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.FreshUrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_url()) {
    set_has_url();
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void FreshUrl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.FreshUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreshUrl::CopyFrom(const FreshUrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.FreshUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreshUrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FreshUrl::Swap(FreshUrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FreshUrl::InternalSwap(FreshUrl* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FreshUrl::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FreshUrl

// required string url = 1;
bool FreshUrl::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FreshUrl::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void FreshUrl::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void FreshUrl::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& FreshUrl::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.FreshUrl.url)
  return url_.GetNoArena();
}
void FreshUrl::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.FreshUrl.url)
}
#if LANG_CXX11
void FreshUrl::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.FreshUrl.url)
}
#endif
void FreshUrl::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.FreshUrl.url)
}
void FreshUrl::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.FreshUrl.url)
}
::std::string* FreshUrl::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.FreshUrl.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FreshUrl::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.FreshUrl.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FreshUrl::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.FreshUrl.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewsInfo::kQueryFieldNumber;
const int NewsInfo::kRegFieldNumber;
const int NewsInfo::kTimestampFieldNumber;
const int NewsInfo::kShowFieldNumber;
const int NewsInfo::kShowNewsMixinFieldNumber;
const int NewsInfo::kShowFreshUrlsFieldNumber;
const int NewsInfo::kFreshUrlsFieldNumber;
const int NewsInfo::kTotalFreshUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewsInfo::NewsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sputnik_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.SputnikRanker.NewsInfo)
}
NewsInfo::NewsInfo(const NewsInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fresh_urls_(from.fresh_urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_fresh_urls_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(total_fresh_urls_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.SputnikRanker.NewsInfo)
}

void NewsInfo::SharedCtor() {
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_fresh_urls_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(total_fresh_urls_));
}

NewsInfo::~NewsInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.SputnikRanker.NewsInfo)
  SharedDtor();
}

void NewsInfo::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NewsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewsInfo::descriptor() {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewsInfo& NewsInfo::default_instance() {
  protobuf_sputnik_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

NewsInfo* NewsInfo::New(::google::protobuf::Arena* arena) const {
  NewsInfo* n = new NewsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.SputnikRanker.NewsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fresh_urls_.Clear();
  if (has_query()) {
    GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*query_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 126u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_fresh_urls_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(total_fresh_urls_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.SputnikRanker.NewsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.SputnikRanker.NewsInfo.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 reg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_reg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 show = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_show();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 show_news_mixin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_show_news_mixin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_news_mixin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 show_fresh_urls = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_show_fresh_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_fresh_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.SputnikRanker.FreshUrl fresh_urls = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fresh_urls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_fresh_urls = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_total_fresh_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_fresh_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.SputnikRanker.NewsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.SputnikRanker.NewsInfo)
  return false;
#undef DO_
}

void NewsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.SputnikRanker.NewsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.NewsInfo.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // required uint32 reg = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg(), output);
  }

  // required uint64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // required uint32 show = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->show(), output);
  }

  // required uint32 show_news_mixin = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->show_news_mixin(), output);
  }

  // required uint32 show_fresh_urls = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->show_fresh_urls(), output);
  }

  // repeated .ru.mail.go.webbase.SputnikRanker.FreshUrl fresh_urls = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fresh_urls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fresh_urls(static_cast<int>(i)), output);
  }

  // optional uint32 total_fresh_urls = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->total_fresh_urls(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.SputnikRanker.NewsInfo)
}

::google::protobuf::uint8* NewsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.SputnikRanker.NewsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.SputnikRanker.NewsInfo.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // required uint32 reg = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg(), target);
  }

  // required uint64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // required uint32 show = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->show(), target);
  }

  // required uint32 show_news_mixin = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->show_news_mixin(), target);
  }

  // required uint32 show_fresh_urls = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->show_fresh_urls(), target);
  }

  // repeated .ru.mail.go.webbase.SputnikRanker.FreshUrl fresh_urls = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fresh_urls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->fresh_urls(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 total_fresh_urls = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->total_fresh_urls(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.SputnikRanker.NewsInfo)
  return target;
}

size_t NewsInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.SputnikRanker.NewsInfo)
  size_t total_size = 0;

  if (has_query()) {
    // required string query = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  if (has_timestamp()) {
    // required uint64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  if (has_reg()) {
    // required uint32 reg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reg());
  }

  if (has_show()) {
    // required uint32 show = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->show());
  }

  if (has_show_news_mixin()) {
    // required uint32 show_news_mixin = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->show_news_mixin());
  }

  if (has_show_fresh_urls()) {
    // required uint32 show_fresh_urls = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->show_fresh_urls());
  }

  return total_size;
}
size_t NewsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.SputnikRanker.NewsInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string query = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());

    // required uint64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

    // required uint32 reg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reg());

    // required uint32 show = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->show());

    // required uint32 show_news_mixin = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->show_news_mixin());

    // required uint32 show_fresh_urls = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->show_fresh_urls());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.webbase.SputnikRanker.FreshUrl fresh_urls = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->fresh_urls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fresh_urls(static_cast<int>(i)));
    }
  }

  // optional uint32 total_fresh_urls = 8;
  if (has_total_fresh_urls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_fresh_urls());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.SputnikRanker.NewsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NewsInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.SputnikRanker.NewsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.SputnikRanker.NewsInfo)
    MergeFrom(*source);
  }
}

void NewsInfo::MergeFrom(const NewsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.SputnikRanker.NewsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fresh_urls_.MergeFrom(from.fresh_urls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      reg_ = from.reg_;
    }
    if (cached_has_bits & 0x00000008u) {
      show_ = from.show_;
    }
    if (cached_has_bits & 0x00000010u) {
      show_news_mixin_ = from.show_news_mixin_;
    }
    if (cached_has_bits & 0x00000020u) {
      show_fresh_urls_ = from.show_fresh_urls_;
    }
    if (cached_has_bits & 0x00000040u) {
      total_fresh_urls_ = from.total_fresh_urls_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NewsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.SputnikRanker.NewsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewsInfo::CopyFrom(const NewsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.SputnikRanker.NewsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fresh_urls())) return false;
  return true;
}

void NewsInfo::Swap(NewsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewsInfo::InternalSwap(NewsInfo* other) {
  using std::swap;
  fresh_urls_.InternalSwap(&other->fresh_urls_);
  query_.Swap(&other->query_);
  swap(timestamp_, other->timestamp_);
  swap(reg_, other->reg_);
  swap(show_, other->show_);
  swap(show_news_mixin_, other->show_news_mixin_);
  swap(show_fresh_urls_, other->show_fresh_urls_);
  swap(total_fresh_urls_, other->total_fresh_urls_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewsInfo::GetMetadata() const {
  protobuf_sputnik_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sputnik_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewsInfo

// required string query = 1;
bool NewsInfo::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewsInfo::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void NewsInfo::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewsInfo::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& NewsInfo::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.NewsInfo.query)
  return query_.GetNoArena();
}
void NewsInfo::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.NewsInfo.query)
}
#if LANG_CXX11
void NewsInfo::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.NewsInfo.query)
}
#endif
void NewsInfo::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.NewsInfo.query)
}
void NewsInfo::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.NewsInfo.query)
}
::std::string* NewsInfo::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.NewsInfo.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewsInfo::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.NewsInfo.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewsInfo::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.NewsInfo.query)
}

// required uint32 reg = 2;
bool NewsInfo::has_reg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewsInfo::set_has_reg() {
  _has_bits_[0] |= 0x00000004u;
}
void NewsInfo::clear_has_reg() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewsInfo::clear_reg() {
  reg_ = 0u;
  clear_has_reg();
}
::google::protobuf::uint32 NewsInfo::reg() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.NewsInfo.reg)
  return reg_;
}
void NewsInfo::set_reg(::google::protobuf::uint32 value) {
  set_has_reg();
  reg_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.NewsInfo.reg)
}

// required uint64 timestamp = 3;
bool NewsInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewsInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void NewsInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewsInfo::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 NewsInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.NewsInfo.timestamp)
  return timestamp_;
}
void NewsInfo::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.NewsInfo.timestamp)
}

// required uint32 show = 4;
bool NewsInfo::has_show() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NewsInfo::set_has_show() {
  _has_bits_[0] |= 0x00000008u;
}
void NewsInfo::clear_has_show() {
  _has_bits_[0] &= ~0x00000008u;
}
void NewsInfo::clear_show() {
  show_ = 0u;
  clear_has_show();
}
::google::protobuf::uint32 NewsInfo::show() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.NewsInfo.show)
  return show_;
}
void NewsInfo::set_show(::google::protobuf::uint32 value) {
  set_has_show();
  show_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.NewsInfo.show)
}

// required uint32 show_news_mixin = 5;
bool NewsInfo::has_show_news_mixin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NewsInfo::set_has_show_news_mixin() {
  _has_bits_[0] |= 0x00000010u;
}
void NewsInfo::clear_has_show_news_mixin() {
  _has_bits_[0] &= ~0x00000010u;
}
void NewsInfo::clear_show_news_mixin() {
  show_news_mixin_ = 0u;
  clear_has_show_news_mixin();
}
::google::protobuf::uint32 NewsInfo::show_news_mixin() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.NewsInfo.show_news_mixin)
  return show_news_mixin_;
}
void NewsInfo::set_show_news_mixin(::google::protobuf::uint32 value) {
  set_has_show_news_mixin();
  show_news_mixin_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.NewsInfo.show_news_mixin)
}

// required uint32 show_fresh_urls = 6;
bool NewsInfo::has_show_fresh_urls() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NewsInfo::set_has_show_fresh_urls() {
  _has_bits_[0] |= 0x00000020u;
}
void NewsInfo::clear_has_show_fresh_urls() {
  _has_bits_[0] &= ~0x00000020u;
}
void NewsInfo::clear_show_fresh_urls() {
  show_fresh_urls_ = 0u;
  clear_has_show_fresh_urls();
}
::google::protobuf::uint32 NewsInfo::show_fresh_urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.NewsInfo.show_fresh_urls)
  return show_fresh_urls_;
}
void NewsInfo::set_show_fresh_urls(::google::protobuf::uint32 value) {
  set_has_show_fresh_urls();
  show_fresh_urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.NewsInfo.show_fresh_urls)
}

// repeated .ru.mail.go.webbase.SputnikRanker.FreshUrl fresh_urls = 7;
int NewsInfo::fresh_urls_size() const {
  return fresh_urls_.size();
}
void NewsInfo::clear_fresh_urls() {
  fresh_urls_.Clear();
}
const ::ru::mail::go::webbase::SputnikRanker::FreshUrl& NewsInfo::fresh_urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.NewsInfo.fresh_urls)
  return fresh_urls_.Get(index);
}
::ru::mail::go::webbase::SputnikRanker::FreshUrl* NewsInfo::mutable_fresh_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.NewsInfo.fresh_urls)
  return fresh_urls_.Mutable(index);
}
::ru::mail::go::webbase::SputnikRanker::FreshUrl* NewsInfo::add_fresh_urls() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.NewsInfo.fresh_urls)
  return fresh_urls_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::FreshUrl >*
NewsInfo::mutable_fresh_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.NewsInfo.fresh_urls)
  return &fresh_urls_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::FreshUrl >&
NewsInfo::fresh_urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.NewsInfo.fresh_urls)
  return fresh_urls_;
}

// optional uint32 total_fresh_urls = 8;
bool NewsInfo::has_total_fresh_urls() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NewsInfo::set_has_total_fresh_urls() {
  _has_bits_[0] |= 0x00000040u;
}
void NewsInfo::clear_has_total_fresh_urls() {
  _has_bits_[0] &= ~0x00000040u;
}
void NewsInfo::clear_total_fresh_urls() {
  total_fresh_urls_ = 0u;
  clear_has_total_fresh_urls();
}
::google::protobuf::uint32 NewsInfo::total_fresh_urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.NewsInfo.total_fresh_urls)
  return total_fresh_urls_;
}
void NewsInfo::set_total_fresh_urls(::google::protobuf::uint32 value) {
  set_has_total_fresh_urls();
  total_fresh_urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.NewsInfo.total_fresh_urls)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SputnikRanker
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
