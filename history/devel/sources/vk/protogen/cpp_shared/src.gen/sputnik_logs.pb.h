// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sputnik_logs.proto

#ifndef PROTOBUF_sputnik_5flogs_2eproto__INCLUDED
#define PROTOBUF_sputnik_5flogs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace SputnikRanker {
class Body;
class BodyDefaultTypeInternal;
extern BodyDefaultTypeInternal _Body_default_instance_;
class BrowseRankData;
class BrowseRankDataDefaultTypeInternal;
extern BrowseRankDataDefaultTypeInternal _BrowseRankData_default_instance_;
class ForumedSegment;
class ForumedSegmentDefaultTypeInternal;
extern ForumedSegmentDefaultTypeInternal _ForumedSegment_default_instance_;
class ForumedSekitei;
class ForumedSekiteiDefaultTypeInternal;
extern ForumedSekiteiDefaultTypeInternal _ForumedSekitei_default_instance_;
class FreshUrl;
class FreshUrlDefaultTypeInternal;
extern FreshUrlDefaultTypeInternal _FreshUrl_default_instance_;
class Hit;
class HitDefaultTypeInternal;
extern HitDefaultTypeInternal _Hit_default_instance_;
class ImageBody;
class ImageBodyDefaultTypeInternal;
extern ImageBodyDefaultTypeInternal _ImageBody_default_instance_;
class NewsInfo;
class NewsInfoDefaultTypeInternal;
extern NewsInfoDefaultTypeInternal _NewsInfo_default_instance_;
class Qlinks;
class QlinksDefaultTypeInternal;
extern QlinksDefaultTypeInternal _Qlinks_default_instance_;
class Qlinks_Qlink;
class Qlinks_QlinkDefaultTypeInternal;
extern Qlinks_QlinkDefaultTypeInternal _Qlinks_Qlink_default_instance_;
class Redirect;
class RedirectDefaultTypeInternal;
extern RedirectDefaultTypeInternal _Redirect_default_instance_;
class RedirectArray;
class RedirectArrayDefaultTypeInternal;
extern RedirectArrayDefaultTypeInternal _RedirectArray_default_instance_;
class Session;
class SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SessionSpc;
class SessionSpcDefaultTypeInternal;
extern SessionSpcDefaultTypeInternal _SessionSpc_default_instance_;
class Snippet;
class SnippetDefaultTypeInternal;
extern SnippetDefaultTypeInternal _Snippet_default_instance_;
class SnippetSession;
class SnippetSessionDefaultTypeInternal;
extern SnippetSessionDefaultTypeInternal _SnippetSession_default_instance_;
class Transition;
class TransitionDefaultTypeInternal;
extern TransitionDefaultTypeInternal _Transition_default_instance_;
class TransitionExtended;
class TransitionExtendedDefaultTypeInternal;
extern TransitionExtendedDefaultTypeInternal _TransitionExtended_default_instance_;
class UserRankData;
class UserRankDataDefaultTypeInternal;
extern UserRankDataDefaultTypeInternal _UserRankData_default_instance_;
class UserRankUid;
class UserRankUidDefaultTypeInternal;
extern UserRankUidDefaultTypeInternal _UserRankUid_default_instance_;
class UserRankValues;
class UserRankValuesDefaultTypeInternal;
extern UserRankValuesDefaultTypeInternal _UserRankValues_default_instance_;
class VideoBody;
class VideoBodyDefaultTypeInternal;
extern VideoBodyDefaultTypeInternal _VideoBody_default_instance_;
}  // namespace SputnikRanker
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace SputnikRanker {

namespace protobuf_sputnik_5flogs_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_sputnik_5flogs_2eproto

enum Redirect_UrlStatus {
  Redirect_UrlStatus_InIndex = 0,
  Redirect_UrlStatus_NotInIndex = 1,
  Redirect_UrlStatus_Unknown = 2
};
bool Redirect_UrlStatus_IsValid(int value);
const Redirect_UrlStatus Redirect_UrlStatus_UrlStatus_MIN = Redirect_UrlStatus_InIndex;
const Redirect_UrlStatus Redirect_UrlStatus_UrlStatus_MAX = Redirect_UrlStatus_Unknown;
const int Redirect_UrlStatus_UrlStatus_ARRAYSIZE = Redirect_UrlStatus_UrlStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* Redirect_UrlStatus_descriptor();
inline const ::std::string& Redirect_UrlStatus_Name(Redirect_UrlStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    Redirect_UrlStatus_descriptor(), value);
}
inline bool Redirect_UrlStatus_Parse(
    const ::std::string& name, Redirect_UrlStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Redirect_UrlStatus>(
    Redirect_UrlStatus_descriptor(), name, value);
}
enum Redirect_Type {
  Redirect_Type_Redirected = 0,
  Redirect_Type_Canonical = 1,
  Redirect_Type_Duplicate = 2,
  Redirect_Type_NoInfo = 3
};
bool Redirect_Type_IsValid(int value);
const Redirect_Type Redirect_Type_Type_MIN = Redirect_Type_Redirected;
const Redirect_Type Redirect_Type_Type_MAX = Redirect_Type_NoInfo;
const int Redirect_Type_Type_ARRAYSIZE = Redirect_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Redirect_Type_descriptor();
inline const ::std::string& Redirect_Type_Name(Redirect_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Redirect_Type_descriptor(), value);
}
inline bool Redirect_Type_Parse(
    const ::std::string& name, Redirect_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Redirect_Type>(
    Redirect_Type_descriptor(), name, value);
}
enum ImageBody_Source {
  ImageBody_Source_Unknown = 0,
  ImageBody_Source_Telemetry = 1,
  ImageBody_Source_Kvakin = 2
};
bool ImageBody_Source_IsValid(int value);
const ImageBody_Source ImageBody_Source_Source_MIN = ImageBody_Source_Unknown;
const ImageBody_Source ImageBody_Source_Source_MAX = ImageBody_Source_Kvakin;
const int ImageBody_Source_Source_ARRAYSIZE = ImageBody_Source_Source_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageBody_Source_descriptor();
inline const ::std::string& ImageBody_Source_Name(ImageBody_Source value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageBody_Source_descriptor(), value);
}
inline bool ImageBody_Source_Parse(
    const ::std::string& name, ImageBody_Source* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageBody_Source>(
    ImageBody_Source_descriptor(), name, value);
}
enum SessionSpc_Type {
  SessionSpc_Type_None = 0,
  SessionSpc_Type_Auto = 1,
  SessionSpc_Type_Sugg = 2,
  SessionSpc_Type_Split = 3
};
bool SessionSpc_Type_IsValid(int value);
const SessionSpc_Type SessionSpc_Type_Type_MIN = SessionSpc_Type_None;
const SessionSpc_Type SessionSpc_Type_Type_MAX = SessionSpc_Type_Split;
const int SessionSpc_Type_Type_ARRAYSIZE = SessionSpc_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SessionSpc_Type_descriptor();
inline const ::std::string& SessionSpc_Type_Name(SessionSpc_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SessionSpc_Type_descriptor(), value);
}
inline bool SessionSpc_Type_Parse(
    const ::std::string& name, SessionSpc_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SessionSpc_Type>(
    SessionSpc_Type_descriptor(), name, value);
}
// ===================================================================

class Transition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.Transition) */ {
 public:
  Transition();
  virtual ~Transition();

  Transition(const Transition& from);

  inline Transition& operator=(const Transition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transition(Transition&& from) noexcept
    : Transition() {
    *this = ::std::move(from);
  }

  inline Transition& operator=(Transition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transition& default_instance();

  static inline const Transition* internal_default_instance() {
    return reinterpret_cast<const Transition*>(
               &_Transition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Transition* other);
  friend void swap(Transition& a, Transition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transition* New() const PROTOBUF_FINAL { return New(NULL); }

  Transition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transition& from);
  void MergeFrom(const Transition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string referrer = 2;
  bool has_referrer() const;
  void clear_referrer();
  static const int kReferrerFieldNumber = 2;
  const ::std::string& referrer() const;
  void set_referrer(const ::std::string& value);
  #if LANG_CXX11
  void set_referrer(::std::string&& value);
  #endif
  void set_referrer(const char* value);
  void set_referrer(const char* value, size_t size);
  ::std::string* mutable_referrer();
  ::std::string* release_referrer();
  void set_allocated_referrer(::std::string* referrer);

  // required string url = 3;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional bytes body = 4;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // optional string ip = 5;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 5;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional string title = 8;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 8;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string serpInfo = 10;
  bool has_serpinfo() const;
  void clear_serpinfo();
  static const int kSerpInfoFieldNumber = 10;
  const ::std::string& serpinfo() const;
  void set_serpinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_serpinfo(::std::string&& value);
  #endif
  void set_serpinfo(const char* value);
  void set_serpinfo(const char* value, size_t size);
  ::std::string* mutable_serpinfo();
  ::std::string* release_serpinfo();
  void set_allocated_serpinfo(::std::string* serpinfo);

  // required uint64 time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional uint64 loadTime = 6;
  bool has_loadtime() const;
  void clear_loadtime();
  static const int kLoadTimeFieldNumber = 6;
  ::google::protobuf::uint64 loadtime() const;
  void set_loadtime(::google::protobuf::uint64 value);

  // optional bool hacked = 7;
  bool has_hacked() const;
  void clear_hacked();
  static const int kHackedFieldNumber = 7;
  bool hacked() const;
  void set_hacked(bool value);

  // optional uint32 status = 9;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 9;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.Transition)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_referrer();
  void clear_has_referrer();
  void set_has_url();
  void clear_has_url();
  void set_has_body();
  void clear_has_body();
  void set_has_ip();
  void clear_has_ip();
  void set_has_loadtime();
  void clear_has_loadtime();
  void set_has_hacked();
  void clear_has_hacked();
  void set_has_title();
  void clear_has_title();
  void set_has_status();
  void clear_has_status();
  void set_has_serpinfo();
  void clear_has_serpinfo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr referrer_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr serpinfo_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint64 loadtime_;
  bool hacked_;
  ::google::protobuf::uint32 status_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Body : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.Body) */ {
 public:
  Body();
  virtual ~Body();

  Body(const Body& from);

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Body(Body&& from) noexcept
    : Body() {
    *this = ::std::move(from);
  }

  inline Body& operator=(Body&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Body& default_instance();

  static inline const Body* internal_default_instance() {
    return reinterpret_cast<const Body*>(
               &_Body_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Body* other);
  friend void swap(Body& a, Body& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Body* New() const PROTOBUF_FINAL { return New(NULL); }

  Body* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Body& from);
  void MergeFrom(const Body& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Body* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string urls = 1;
  int urls_size() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 1;
  const ::std::string& urls(int index) const;
  ::std::string* mutable_urls(int index);
  void set_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_urls(int index, ::std::string&& value);
  #endif
  void set_urls(int index, const char* value);
  void set_urls(int index, const char* value, size_t size);
  ::std::string* add_urls();
  void add_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_urls(::std::string&& value);
  #endif
  void add_urls(const char* value);
  void add_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_urls();

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.Body)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> urls_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransitionExtended : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.TransitionExtended) */ {
 public:
  TransitionExtended();
  virtual ~TransitionExtended();

  TransitionExtended(const TransitionExtended& from);

  inline TransitionExtended& operator=(const TransitionExtended& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransitionExtended(TransitionExtended&& from) noexcept
    : TransitionExtended() {
    *this = ::std::move(from);
  }

  inline TransitionExtended& operator=(TransitionExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransitionExtended& default_instance();

  static inline const TransitionExtended* internal_default_instance() {
    return reinterpret_cast<const TransitionExtended*>(
               &_TransitionExtended_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TransitionExtended* other);
  friend void swap(TransitionExtended& a, TransitionExtended& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransitionExtended* New() const PROTOBUF_FINAL { return New(NULL); }

  TransitionExtended* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransitionExtended& from);
  void MergeFrom(const TransitionExtended& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransitionExtended* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uid = 2;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 2;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // required string email = 3;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional string query = 5;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 5;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // required .ru.mail.go.webbase.SputnikRanker.Transition transition = 1;
  bool has_transition() const;
  void clear_transition();
  static const int kTransitionFieldNumber = 1;
  const ::ru::mail::go::webbase::SputnikRanker::Transition& transition() const;
  ::ru::mail::go::webbase::SputnikRanker::Transition* mutable_transition();
  ::ru::mail::go::webbase::SputnikRanker::Transition* release_transition();
  void set_allocated_transition(::ru::mail::go::webbase::SputnikRanker::Transition* transition);

  // optional .ru.mail.go.webbase.SputnikRanker.Body body = 4;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const ::ru::mail::go::webbase::SputnikRanker::Body& body() const;
  ::ru::mail::go::webbase::SputnikRanker::Body* mutable_body();
  ::ru::mail::go::webbase::SputnikRanker::Body* release_body();
  void set_allocated_body(::ru::mail::go::webbase::SputnikRanker::Body* body);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.TransitionExtended)
 private:
  void set_has_transition();
  void clear_has_transition();
  void set_has_uid();
  void clear_has_uid();
  void set_has_email();
  void clear_has_email();
  void set_has_body();
  void clear_has_body();
  void set_has_query();
  void clear_has_query();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::ru::mail::go::webbase::SputnikRanker::Transition* transition_;
  ::ru::mail::go::webbase::SputnikRanker::Body* body_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Hit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.Hit) */ {
 public:
  Hit();
  virtual ~Hit();

  Hit(const Hit& from);

  inline Hit& operator=(const Hit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Hit(Hit&& from) noexcept
    : Hit() {
    *this = ::std::move(from);
  }

  inline Hit& operator=(Hit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Hit& default_instance();

  static inline const Hit* internal_default_instance() {
    return reinterpret_cast<const Hit*>(
               &_Hit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Hit* other);
  friend void swap(Hit& a, Hit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hit* New() const PROTOBUF_FINAL { return New(NULL); }

  Hit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Hit& from);
  void MergeFrom(const Hit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Hit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required uint64 time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional uint64 loadTime = 3;
  bool has_loadtime() const;
  void clear_loadtime();
  static const int kLoadTimeFieldNumber = 3;
  ::google::protobuf::uint64 loadtime() const;
  void set_loadtime(::google::protobuf::uint64 value);

  // optional bool hacked = 4;
  bool has_hacked() const;
  void clear_hacked();
  static const int kHackedFieldNumber = 4;
  bool hacked() const;
  void set_hacked(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.Hit)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_url();
  void clear_has_url();
  void set_has_loadtime();
  void clear_has_loadtime();
  void set_has_hacked();
  void clear_has_hacked();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint64 loadtime_;
  bool hacked_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Redirect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.Redirect) */ {
 public:
  Redirect();
  virtual ~Redirect();

  Redirect(const Redirect& from);

  inline Redirect& operator=(const Redirect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Redirect(Redirect&& from) noexcept
    : Redirect() {
    *this = ::std::move(from);
  }

  inline Redirect& operator=(Redirect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Redirect& default_instance();

  static inline const Redirect* internal_default_instance() {
    return reinterpret_cast<const Redirect*>(
               &_Redirect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Redirect* other);
  friend void swap(Redirect& a, Redirect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Redirect* New() const PROTOBUF_FINAL { return New(NULL); }

  Redirect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Redirect& from);
  void MergeFrom(const Redirect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Redirect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Redirect_UrlStatus UrlStatus;
  static const UrlStatus InIndex =
    Redirect_UrlStatus_InIndex;
  static const UrlStatus NotInIndex =
    Redirect_UrlStatus_NotInIndex;
  static const UrlStatus Unknown =
    Redirect_UrlStatus_Unknown;
  static inline bool UrlStatus_IsValid(int value) {
    return Redirect_UrlStatus_IsValid(value);
  }
  static const UrlStatus UrlStatus_MIN =
    Redirect_UrlStatus_UrlStatus_MIN;
  static const UrlStatus UrlStatus_MAX =
    Redirect_UrlStatus_UrlStatus_MAX;
  static const int UrlStatus_ARRAYSIZE =
    Redirect_UrlStatus_UrlStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UrlStatus_descriptor() {
    return Redirect_UrlStatus_descriptor();
  }
  static inline const ::std::string& UrlStatus_Name(UrlStatus value) {
    return Redirect_UrlStatus_Name(value);
  }
  static inline bool UrlStatus_Parse(const ::std::string& name,
      UrlStatus* value) {
    return Redirect_UrlStatus_Parse(name, value);
  }

  typedef Redirect_Type Type;
  static const Type Redirected =
    Redirect_Type_Redirected;
  static const Type Canonical =
    Redirect_Type_Canonical;
  static const Type Duplicate =
    Redirect_Type_Duplicate;
  static const Type NoInfo =
    Redirect_Type_NoInfo;
  static inline bool Type_IsValid(int value) {
    return Redirect_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Redirect_Type_Type_MIN;
  static const Type Type_MAX =
    Redirect_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Redirect_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Redirect_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Redirect_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Redirect_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // required string to = 2;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional .ru.mail.go.webbase.SputnikRanker.Redirect.Type type = 5 [default = NoInfo];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::ru::mail::go::webbase::SputnikRanker::Redirect_Type type() const;
  void set_type(::ru::mail::go::webbase::SputnikRanker::Redirect_Type value);

  // optional .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus fromStatus = 3 [default = Unknown];
  bool has_fromstatus() const;
  void clear_fromstatus();
  static const int kFromStatusFieldNumber = 3;
  ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus fromstatus() const;
  void set_fromstatus(::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus value);

  // optional .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus toStatus = 4 [default = Unknown];
  bool has_tostatus() const;
  void clear_tostatus();
  static const int kToStatusFieldNumber = 4;
  ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus tostatus() const;
  void set_tostatus(::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.Redirect)
 private:
  void set_has_from();
  void clear_has_from();
  void set_has_to();
  void clear_has_to();
  void set_has_fromstatus();
  void clear_has_fromstatus();
  void set_has_tostatus();
  void clear_has_tostatus();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  int type_;
  int fromstatus_;
  int tostatus_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Qlinks_Qlink : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink) */ {
 public:
  Qlinks_Qlink();
  virtual ~Qlinks_Qlink();

  Qlinks_Qlink(const Qlinks_Qlink& from);

  inline Qlinks_Qlink& operator=(const Qlinks_Qlink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qlinks_Qlink(Qlinks_Qlink&& from) noexcept
    : Qlinks_Qlink() {
    *this = ::std::move(from);
  }

  inline Qlinks_Qlink& operator=(Qlinks_Qlink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Qlinks_Qlink& default_instance();

  static inline const Qlinks_Qlink* internal_default_instance() {
    return reinterpret_cast<const Qlinks_Qlink*>(
               &_Qlinks_Qlink_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Qlinks_Qlink* other);
  friend void swap(Qlinks_Qlink& a, Qlinks_Qlink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qlinks_Qlink* New() const PROTOBUF_FINAL { return New(NULL); }

  Qlinks_Qlink* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qlinks_Qlink& from);
  void MergeFrom(const Qlinks_Qlink& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qlinks_Qlink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string query = 1;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // required int32 geo = 2;
  bool has_geo() const;
  void clear_geo();
  static const int kGeoFieldNumber = 2;
  ::google::protobuf::int32 geo() const;
  void set_geo(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink)
 private:
  void set_has_query();
  void clear_has_query();
  void set_has_geo();
  void clear_has_geo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::int32 geo_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Qlinks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.Qlinks) */ {
 public:
  Qlinks();
  virtual ~Qlinks();

  Qlinks(const Qlinks& from);

  inline Qlinks& operator=(const Qlinks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qlinks(Qlinks&& from) noexcept
    : Qlinks() {
    *this = ::std::move(from);
  }

  inline Qlinks& operator=(Qlinks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Qlinks& default_instance();

  static inline const Qlinks* internal_default_instance() {
    return reinterpret_cast<const Qlinks*>(
               &_Qlinks_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Qlinks* other);
  friend void swap(Qlinks& a, Qlinks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qlinks* New() const PROTOBUF_FINAL { return New(NULL); }

  Qlinks* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qlinks& from);
  void MergeFrom(const Qlinks& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qlinks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qlinks_Qlink Qlink;

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink qlink = 3;
  int qlink_size() const;
  void clear_qlink();
  static const int kQlinkFieldNumber = 3;
  const ::ru::mail::go::webbase::SputnikRanker::Qlinks_Qlink& qlink(int index) const;
  ::ru::mail::go::webbase::SputnikRanker::Qlinks_Qlink* mutable_qlink(int index);
  ::ru::mail::go::webbase::SputnikRanker::Qlinks_Qlink* add_qlink();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Qlinks_Qlink >*
      mutable_qlink();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Qlinks_Qlink >&
      qlink() const;

  // required string from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // required string to = 4;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 4;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // required .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus fromStatus = 2;
  bool has_fromstatus() const;
  void clear_fromstatus();
  static const int kFromStatusFieldNumber = 2;
  ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus fromstatus() const;
  void set_fromstatus(::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus value);

  // required .ru.mail.go.webbase.SputnikRanker.Redirect.Type type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::ru::mail::go::webbase::SputnikRanker::Redirect_Type type() const;
  void set_type(::ru::mail::go::webbase::SputnikRanker::Redirect_Type value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.Qlinks)
 private:
  void set_has_from();
  void clear_has_from();
  void set_has_fromstatus();
  void clear_has_fromstatus();
  void set_has_to();
  void clear_has_to();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Qlinks_Qlink > qlink_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  int fromstatus_;
  int type_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Session : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.Session) */ {
 public:
  Session();
  virtual ~Session();

  Session(const Session& from);

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(Session&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Session& default_instance();

  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Session* other);
  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const PROTOBUF_FINAL { return New(NULL); }

  Session* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Session* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.SputnikRanker.Hit hits = 2;
  int hits_size() const;
  void clear_hits();
  static const int kHitsFieldNumber = 2;
  const ::ru::mail::go::webbase::SputnikRanker::Hit& hits(int index) const;
  ::ru::mail::go::webbase::SputnikRanker::Hit* mutable_hits(int index);
  ::ru::mail::go::webbase::SputnikRanker::Hit* add_hits();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Hit >*
      mutable_hits();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Hit >&
      hits() const;

  // repeated uint32 regions = 4;
  int regions_size() const;
  void clear_regions();
  static const int kRegionsFieldNumber = 4;
  ::google::protobuf::uint32 regions(int index) const;
  void set_regions(int index, ::google::protobuf::uint32 value);
  void add_regions(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      regions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_regions();

  // repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirect = 5;
  int redirect_size() const;
  void clear_redirect();
  static const int kRedirectFieldNumber = 5;
  const ::ru::mail::go::webbase::SputnikRanker::Redirect& redirect(int index) const;
  ::ru::mail::go::webbase::SputnikRanker::Redirect* mutable_redirect(int index);
  ::ru::mail::go::webbase::SputnikRanker::Redirect* add_redirect();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Redirect >*
      mutable_redirect();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Redirect >&
      redirect() const;

  // required string uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // optional uint64 time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.Session)
 private:
  void set_has_uid();
  void clear_has_uid();
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Hit > hits_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > regions_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Redirect > redirect_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::uint64 time_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.ImageBody) */ {
 public:
  ImageBody();
  virtual ~ImageBody();

  ImageBody(const ImageBody& from);

  inline ImageBody& operator=(const ImageBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageBody(ImageBody&& from) noexcept
    : ImageBody() {
    *this = ::std::move(from);
  }

  inline ImageBody& operator=(ImageBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageBody& default_instance();

  static inline const ImageBody* internal_default_instance() {
    return reinterpret_cast<const ImageBody*>(
               &_ImageBody_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ImageBody* other);
  friend void swap(ImageBody& a, ImageBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageBody* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageBody* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageBody& from);
  void MergeFrom(const ImageBody& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ImageBody_Source Source;
  static const Source Unknown =
    ImageBody_Source_Unknown;
  static const Source Telemetry =
    ImageBody_Source_Telemetry;
  static const Source Kvakin =
    ImageBody_Source_Kvakin;
  static inline bool Source_IsValid(int value) {
    return ImageBody_Source_IsValid(value);
  }
  static const Source Source_MIN =
    ImageBody_Source_Source_MIN;
  static const Source Source_MAX =
    ImageBody_Source_Source_MAX;
  static const int Source_ARRAYSIZE =
    ImageBody_Source_Source_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Source_descriptor() {
    return ImageBody_Source_descriptor();
  }
  static inline const ::std::string& Source_Name(Source value) {
    return ImageBody_Source_Name(value);
  }
  static inline bool Source_Parse(const ::std::string& name,
      Source* value) {
    return ImageBody_Source_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required bytes body = 3;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 3;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // optional string uid = 4;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 4;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // optional string query = 7;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 7;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // required uint64 time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional uint32 weight = 6;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 6;
  ::google::protobuf::uint32 weight() const;
  void set_weight(::google::protobuf::uint32 value);

  // optional .ru.mail.go.webbase.SputnikRanker.ImageBody.Source source = 5 [default = Telemetry];
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 5;
  ::ru::mail::go::webbase::SputnikRanker::ImageBody_Source source() const;
  void set_source(::ru::mail::go::webbase::SputnikRanker::ImageBody_Source value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.ImageBody)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_url();
  void clear_has_url();
  void set_has_body();
  void clear_has_body();
  void set_has_uid();
  void clear_has_uid();
  void set_has_source();
  void clear_has_source();
  void set_has_weight();
  void clear_has_weight();
  void set_has_query();
  void clear_has_query();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 weight_;
  int source_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.VideoBody) */ {
 public:
  VideoBody();
  virtual ~VideoBody();

  VideoBody(const VideoBody& from);

  inline VideoBody& operator=(const VideoBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoBody(VideoBody&& from) noexcept
    : VideoBody() {
    *this = ::std::move(from);
  }

  inline VideoBody& operator=(VideoBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoBody& default_instance();

  static inline const VideoBody* internal_default_instance() {
    return reinterpret_cast<const VideoBody*>(
               &_VideoBody_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(VideoBody* other);
  friend void swap(VideoBody& a, VideoBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoBody* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoBody* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoBody& from);
  void MergeFrom(const VideoBody& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required bytes body = 3;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 3;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // optional string uid = 4;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 4;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // required uint64 time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.VideoBody)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_url();
  void clear_has_url();
  void set_has_body();
  void clear_has_body();
  void set_has_uid();
  void clear_has_uid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::uint64 time_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrowseRankData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.BrowseRankData) */ {
 public:
  BrowseRankData();
  virtual ~BrowseRankData();

  BrowseRankData(const BrowseRankData& from);

  inline BrowseRankData& operator=(const BrowseRankData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrowseRankData(BrowseRankData&& from) noexcept
    : BrowseRankData() {
    *this = ::std::move(from);
  }

  inline BrowseRankData& operator=(BrowseRankData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BrowseRankData& default_instance();

  static inline const BrowseRankData* internal_default_instance() {
    return reinterpret_cast<const BrowseRankData*>(
               &_BrowseRankData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(BrowseRankData* other);
  friend void swap(BrowseRankData& a, BrowseRankData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrowseRankData* New() const PROTOBUF_FINAL { return New(NULL); }

  BrowseRankData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrowseRankData& from);
  void MergeFrom(const BrowseRankData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrowseRankData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional uint64 time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional double dwellTime = 4;
  bool has_dwelltime() const;
  void clear_dwelltime();
  static const int kDwellTimeFieldNumber = 4;
  double dwelltime() const;
  void set_dwelltime(double value);

  // optional double loadTime = 5;
  bool has_loadtime() const;
  void clear_loadtime();
  static const int kLoadTimeFieldNumber = 5;
  double loadtime() const;
  void set_loadtime(double value);

  // optional double position = 6;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 6;
  double position() const;
  void set_position(double value);

  // optional double numberOfSessions = 7;
  bool has_numberofsessions() const;
  void clear_numberofsessions();
  static const int kNumberOfSessionsFieldNumber = 7;
  double numberofsessions() const;
  void set_numberofsessions(double value);

  // optional double numberOfLoads = 8;
  bool has_numberofloads() const;
  void clear_numberofloads();
  static const int kNumberOfLoadsFieldNumber = 8;
  double numberofloads() const;
  void set_numberofloads(double value);

  // optional double positionCoef = 9;
  bool has_positioncoef() const;
  void clear_positioncoef();
  static const int kPositionCoefFieldNumber = 9;
  double positioncoef() const;
  void set_positioncoef(double value);

  // optional double timeCoef = 10;
  bool has_timecoef() const;
  void clear_timecoef();
  static const int kTimeCoefFieldNumber = 10;
  double timecoef() const;
  void set_timecoef(double value);

  // optional double browseRank = 11;
  bool has_browserank() const;
  void clear_browserank();
  static const int kBrowseRankFieldNumber = 11;
  double browserank() const;
  void set_browserank(double value);

  // optional double filteredBrowseRank = 12;
  bool has_filteredbrowserank() const;
  void clear_filteredbrowserank();
  static const int kFilteredBrowseRankFieldNumber = 12;
  double filteredbrowserank() const;
  void set_filteredbrowserank(double value);

  // optional double pagesInSite = 13;
  bool has_pagesinsite() const;
  void clear_pagesinsite();
  static const int kPagesInSiteFieldNumber = 13;
  double pagesinsite() const;
  void set_pagesinsite(double value);

  // required uint32 region = 2;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 2;
  ::google::protobuf::uint32 region() const;
  void set_region(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.BrowseRankData)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_region();
  void clear_has_region();
  void set_has_time();
  void clear_has_time();
  void set_has_dwelltime();
  void clear_has_dwelltime();
  void set_has_loadtime();
  void clear_has_loadtime();
  void set_has_position();
  void clear_has_position();
  void set_has_numberofsessions();
  void clear_has_numberofsessions();
  void set_has_numberofloads();
  void clear_has_numberofloads();
  void set_has_positioncoef();
  void clear_has_positioncoef();
  void set_has_timecoef();
  void clear_has_timecoef();
  void set_has_browserank();
  void clear_has_browserank();
  void set_has_filteredbrowserank();
  void clear_has_filteredbrowserank();
  void set_has_pagesinsite();
  void clear_has_pagesinsite();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint64 time_;
  double dwelltime_;
  double loadtime_;
  double position_;
  double numberofsessions_;
  double numberofloads_;
  double positioncoef_;
  double timecoef_;
  double browserank_;
  double filteredbrowserank_;
  double pagesinsite_;
  ::google::protobuf::uint32 region_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserRankUid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.UserRankUid) */ {
 public:
  UserRankUid();
  virtual ~UserRankUid();

  UserRankUid(const UserRankUid& from);

  inline UserRankUid& operator=(const UserRankUid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRankUid(UserRankUid&& from) noexcept
    : UserRankUid() {
    *this = ::std::move(from);
  }

  inline UserRankUid& operator=(UserRankUid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRankUid& default_instance();

  static inline const UserRankUid* internal_default_instance() {
    return reinterpret_cast<const UserRankUid*>(
               &_UserRankUid_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(UserRankUid* other);
  friend void swap(UserRankUid& a, UserRankUid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRankUid* New() const PROTOBUF_FINAL { return New(NULL); }

  UserRankUid* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserRankUid& from);
  void MergeFrom(const UserRankUid& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserRankUid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // required double repeat = 2;
  bool has_repeat() const;
  void clear_repeat();
  static const int kRepeatFieldNumber = 2;
  double repeat() const;
  void set_repeat(double value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.UserRankUid)
 private:
  void set_has_uid();
  void clear_has_uid();
  void set_has_repeat();
  void clear_has_repeat();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  double repeat_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserRankValues : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.UserRankValues) */ {
 public:
  UserRankValues();
  virtual ~UserRankValues();

  UserRankValues(const UserRankValues& from);

  inline UserRankValues& operator=(const UserRankValues& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRankValues(UserRankValues&& from) noexcept
    : UserRankValues() {
    *this = ::std::move(from);
  }

  inline UserRankValues& operator=(UserRankValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRankValues& default_instance();

  static inline const UserRankValues* internal_default_instance() {
    return reinterpret_cast<const UserRankValues*>(
               &_UserRankValues_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(UserRankValues* other);
  friend void swap(UserRankValues& a, UserRankValues& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRankValues* New() const PROTOBUF_FINAL { return New(NULL); }

  UserRankValues* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserRankValues& from);
  void MergeFrom(const UserRankValues& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserRankValues* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.SputnikRanker.UserRankUid uid = 2;
  int uid_size() const;
  void clear_uid();
  static const int kUidFieldNumber = 2;
  const ::ru::mail::go::webbase::SputnikRanker::UserRankUid& uid(int index) const;
  ::ru::mail::go::webbase::SputnikRanker::UserRankUid* mutable_uid(int index);
  ::ru::mail::go::webbase::SputnikRanker::UserRankUid* add_uid();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::UserRankUid >*
      mutable_uid();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::UserRankUid >&
      uid() const;

  // required uint64 filterMask = 1;
  bool has_filtermask() const;
  void clear_filtermask();
  static const int kFilterMaskFieldNumber = 1;
  ::google::protobuf::uint64 filtermask() const;
  void set_filtermask(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.UserRankValues)
 private:
  void set_has_filtermask();
  void clear_has_filtermask();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::UserRankUid > uid_;
  ::google::protobuf::uint64 filtermask_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserRankData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.UserRankData) */ {
 public:
  UserRankData();
  virtual ~UserRankData();

  UserRankData(const UserRankData& from);

  inline UserRankData& operator=(const UserRankData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRankData(UserRankData&& from) noexcept
    : UserRankData() {
    *this = ::std::move(from);
  }

  inline UserRankData& operator=(UserRankData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRankData& default_instance();

  static inline const UserRankData* internal_default_instance() {
    return reinterpret_cast<const UserRankData*>(
               &_UserRankData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(UserRankData* other);
  friend void swap(UserRankData& a, UserRankData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRankData* New() const PROTOBUF_FINAL { return New(NULL); }

  UserRankData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserRankData& from);
  void MergeFrom(const UserRankData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserRankData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string original_urls = 7;
  int original_urls_size() const;
  void clear_original_urls();
  static const int kOriginalUrlsFieldNumber = 7;
  const ::std::string& original_urls(int index) const;
  ::std::string* mutable_original_urls(int index);
  void set_original_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_original_urls(int index, ::std::string&& value);
  #endif
  void set_original_urls(int index, const char* value);
  void set_original_urls(int index, const char* value, size_t size);
  ::std::string* add_original_urls();
  void add_original_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_original_urls(::std::string&& value);
  #endif
  void add_original_urls(const char* value);
  void add_original_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& original_urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_original_urls();

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional .ru.mail.go.webbase.SputnikRanker.UserRankValues values = 5;
  bool has_values() const;
  void clear_values();
  static const int kValuesFieldNumber = 5;
  const ::ru::mail::go::webbase::SputnikRanker::UserRankValues& values() const;
  ::ru::mail::go::webbase::SputnikRanker::UserRankValues* mutable_values();
  ::ru::mail::go::webbase::SputnikRanker::UserRankValues* release_values();
  void set_allocated_values(::ru::mail::go::webbase::SputnikRanker::UserRankValues* values);

  // optional uint64 time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional double numberOfUsers = 4;
  bool has_numberofusers() const;
  void clear_numberofusers();
  static const int kNumberOfUsersFieldNumber = 4;
  double numberofusers() const;
  void set_numberofusers(double value);

  // optional uint64 hits = 6;
  bool has_hits() const;
  void clear_hits();
  static const int kHitsFieldNumber = 6;
  ::google::protobuf::uint64 hits() const;
  void set_hits(::google::protobuf::uint64 value);

  // required uint32 region = 2;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 2;
  ::google::protobuf::uint32 region() const;
  void set_region(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.UserRankData)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_region();
  void clear_has_region();
  void set_has_time();
  void clear_has_time();
  void set_has_numberofusers();
  void clear_has_numberofusers();
  void set_has_values();
  void clear_has_values();
  void set_has_hits();
  void clear_has_hits();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> original_urls_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::ru::mail::go::webbase::SputnikRanker::UserRankValues* values_;
  ::google::protobuf::uint64 time_;
  double numberofusers_;
  ::google::protobuf::uint64 hits_;
  ::google::protobuf::uint32 region_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForumedSegment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.ForumedSegment) */ {
 public:
  ForumedSegment();
  virtual ~ForumedSegment();

  ForumedSegment(const ForumedSegment& from);

  inline ForumedSegment& operator=(const ForumedSegment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForumedSegment(ForumedSegment&& from) noexcept
    : ForumedSegment() {
    *this = ::std::move(from);
  }

  inline ForumedSegment& operator=(ForumedSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForumedSegment& default_instance();

  static inline const ForumedSegment* internal_default_instance() {
    return reinterpret_cast<const ForumedSegment*>(
               &_ForumedSegment_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(ForumedSegment* other);
  friend void swap(ForumedSegment& a, ForumedSegment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForumedSegment* New() const PROTOBUF_FINAL { return New(NULL); }

  ForumedSegment* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ForumedSegment& from);
  void MergeFrom(const ForumedSegment& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ForumedSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pattern = 1;
  bool has_pattern() const;
  void clear_pattern();
  static const int kPatternFieldNumber = 1;
  const ::std::string& pattern() const;
  void set_pattern(const ::std::string& value);
  #if LANG_CXX11
  void set_pattern(::std::string&& value);
  #endif
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  ::std::string* mutable_pattern();
  ::std::string* release_pattern();
  void set_allocated_pattern(::std::string* pattern);

  // required bool isForum = 2;
  bool has_isforum() const;
  void clear_isforum();
  static const int kIsForumFieldNumber = 2;
  bool isforum() const;
  void set_isforum(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.ForumedSegment)
 private:
  void set_has_pattern();
  void clear_has_pattern();
  void set_has_isforum();
  void clear_has_isforum();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pattern_;
  bool isforum_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForumedSekitei : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.ForumedSekitei) */ {
 public:
  ForumedSekitei();
  virtual ~ForumedSekitei();

  ForumedSekitei(const ForumedSekitei& from);

  inline ForumedSekitei& operator=(const ForumedSekitei& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForumedSekitei(ForumedSekitei&& from) noexcept
    : ForumedSekitei() {
    *this = ::std::move(from);
  }

  inline ForumedSekitei& operator=(ForumedSekitei&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForumedSekitei& default_instance();

  static inline const ForumedSekitei* internal_default_instance() {
    return reinterpret_cast<const ForumedSekitei*>(
               &_ForumedSekitei_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(ForumedSekitei* other);
  friend void swap(ForumedSekitei& a, ForumedSekitei& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForumedSekitei* New() const PROTOBUF_FINAL { return New(NULL); }

  ForumedSekitei* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ForumedSekitei& from);
  void MergeFrom(const ForumedSekitei& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ForumedSekitei* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.SputnikRanker.ForumedSegment segments = 1;
  int segments_size() const;
  void clear_segments();
  static const int kSegmentsFieldNumber = 1;
  const ::ru::mail::go::webbase::SputnikRanker::ForumedSegment& segments(int index) const;
  ::ru::mail::go::webbase::SputnikRanker::ForumedSegment* mutable_segments(int index);
  ::ru::mail::go::webbase::SputnikRanker::ForumedSegment* add_segments();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::ForumedSegment >*
      mutable_segments();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::ForumedSegment >&
      segments() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.ForumedSekitei)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::ForumedSegment > segments_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SessionSpc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.SessionSpc) */ {
 public:
  SessionSpc();
  virtual ~SessionSpc();

  SessionSpc(const SessionSpc& from);

  inline SessionSpc& operator=(const SessionSpc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionSpc(SessionSpc&& from) noexcept
    : SessionSpc() {
    *this = ::std::move(from);
  }

  inline SessionSpc& operator=(SessionSpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionSpc& default_instance();

  static inline const SessionSpc* internal_default_instance() {
    return reinterpret_cast<const SessionSpc*>(
               &_SessionSpc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(SessionSpc* other);
  friend void swap(SessionSpc& a, SessionSpc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionSpc* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionSpc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionSpc& from);
  void MergeFrom(const SessionSpc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionSpc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SessionSpc_Type Type;
  static const Type None =
    SessionSpc_Type_None;
  static const Type Auto =
    SessionSpc_Type_Auto;
  static const Type Sugg =
    SessionSpc_Type_Sugg;
  static const Type Split =
    SessionSpc_Type_Split;
  static inline bool Type_IsValid(int value) {
    return SessionSpc_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SessionSpc_Type_Type_MIN;
  static const Type Type_MAX =
    SessionSpc_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SessionSpc_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SessionSpc_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SessionSpc_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SessionSpc_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string rawQuery = 2;
  bool has_rawquery() const;
  void clear_rawquery();
  static const int kRawQueryFieldNumber = 2;
  const ::std::string& rawquery() const;
  void set_rawquery(const ::std::string& value);
  #if LANG_CXX11
  void set_rawquery(::std::string&& value);
  #endif
  void set_rawquery(const char* value);
  void set_rawquery(const char* value, size_t size);
  ::std::string* mutable_rawquery();
  ::std::string* release_rawquery();
  void set_allocated_rawquery(::std::string* rawquery);

  // optional string proposedQuery = 3;
  bool has_proposedquery() const;
  void clear_proposedquery();
  static const int kProposedQueryFieldNumber = 3;
  const ::std::string& proposedquery() const;
  void set_proposedquery(const ::std::string& value);
  #if LANG_CXX11
  void set_proposedquery(::std::string&& value);
  #endif
  void set_proposedquery(const char* value);
  void set_proposedquery(const char* value, size_t size);
  ::std::string* mutable_proposedquery();
  ::std::string* release_proposedquery();
  void set_allocated_proposedquery(::std::string* proposedquery);

  // required .ru.mail.go.webbase.SputnikRanker.SessionSpc.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type type() const;
  void set_type(::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.SessionSpc)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_rawquery();
  void clear_has_rawquery();
  void set_has_proposedquery();
  void clear_has_proposedquery();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr rawquery_;
  ::google::protobuf::internal::ArenaStringPtr proposedquery_;
  int type_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RedirectArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.RedirectArray) */ {
 public:
  RedirectArray();
  virtual ~RedirectArray();

  RedirectArray(const RedirectArray& from);

  inline RedirectArray& operator=(const RedirectArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedirectArray(RedirectArray&& from) noexcept
    : RedirectArray() {
    *this = ::std::move(from);
  }

  inline RedirectArray& operator=(RedirectArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedirectArray& default_instance();

  static inline const RedirectArray* internal_default_instance() {
    return reinterpret_cast<const RedirectArray*>(
               &_RedirectArray_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(RedirectArray* other);
  friend void swap(RedirectArray& a, RedirectArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedirectArray* New() const PROTOBUF_FINAL { return New(NULL); }

  RedirectArray* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RedirectArray& from);
  void MergeFrom(const RedirectArray& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RedirectArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirects = 1;
  int redirects_size() const;
  void clear_redirects();
  static const int kRedirectsFieldNumber = 1;
  const ::ru::mail::go::webbase::SputnikRanker::Redirect& redirects(int index) const;
  ::ru::mail::go::webbase::SputnikRanker::Redirect* mutable_redirects(int index);
  ::ru::mail::go::webbase::SputnikRanker::Redirect* add_redirects();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Redirect >*
      mutable_redirects();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Redirect >&
      redirects() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.RedirectArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Redirect > redirects_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Snippet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.Snippet) */ {
 public:
  Snippet();
  virtual ~Snippet();

  Snippet(const Snippet& from);

  inline Snippet& operator=(const Snippet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Snippet(Snippet&& from) noexcept
    : Snippet() {
    *this = ::std::move(from);
  }

  inline Snippet& operator=(Snippet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Snippet& default_instance();

  static inline const Snippet* internal_default_instance() {
    return reinterpret_cast<const Snippet*>(
               &_Snippet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(Snippet* other);
  friend void swap(Snippet& a, Snippet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Snippet* New() const PROTOBUF_FINAL { return New(NULL); }

  Snippet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Snippet& from);
  void MergeFrom(const Snippet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Snippet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string snippet = 3;
  bool has_snippet() const;
  void clear_snippet();
  static const int kSnippetFieldNumber = 3;
  const ::std::string& snippet() const;
  void set_snippet(const ::std::string& value);
  #if LANG_CXX11
  void set_snippet(::std::string&& value);
  #endif
  void set_snippet(const char* value);
  void set_snippet(const char* value, size_t size);
  ::std::string* mutable_snippet();
  ::std::string* release_snippet();
  void set_allocated_snippet(::std::string* snippet);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.Snippet)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_title();
  void clear_has_title();
  void set_has_snippet();
  void clear_has_snippet();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr snippet_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SnippetSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.SnippetSession) */ {
 public:
  SnippetSession();
  virtual ~SnippetSession();

  SnippetSession(const SnippetSession& from);

  inline SnippetSession& operator=(const SnippetSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnippetSession(SnippetSession&& from) noexcept
    : SnippetSession() {
    *this = ::std::move(from);
  }

  inline SnippetSession& operator=(SnippetSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnippetSession& default_instance();

  static inline const SnippetSession* internal_default_instance() {
    return reinterpret_cast<const SnippetSession*>(
               &_SnippetSession_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(SnippetSession* other);
  friend void swap(SnippetSession& a, SnippetSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnippetSession* New() const PROTOBUF_FINAL { return New(NULL); }

  SnippetSession* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SnippetSession& from);
  void MergeFrom(const SnippetSession& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SnippetSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.SputnikRanker.Snippet snippets = 1;
  int snippets_size() const;
  void clear_snippets();
  static const int kSnippetsFieldNumber = 1;
  const ::ru::mail::go::webbase::SputnikRanker::Snippet& snippets(int index) const;
  ::ru::mail::go::webbase::SputnikRanker::Snippet* mutable_snippets(int index);
  ::ru::mail::go::webbase::SputnikRanker::Snippet* add_snippets();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Snippet >*
      mutable_snippets();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Snippet >&
      snippets() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.SnippetSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Snippet > snippets_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FreshUrl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.FreshUrl) */ {
 public:
  FreshUrl();
  virtual ~FreshUrl();

  FreshUrl(const FreshUrl& from);

  inline FreshUrl& operator=(const FreshUrl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FreshUrl(FreshUrl&& from) noexcept
    : FreshUrl() {
    *this = ::std::move(from);
  }

  inline FreshUrl& operator=(FreshUrl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FreshUrl& default_instance();

  static inline const FreshUrl* internal_default_instance() {
    return reinterpret_cast<const FreshUrl*>(
               &_FreshUrl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(FreshUrl* other);
  friend void swap(FreshUrl& a, FreshUrl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FreshUrl* New() const PROTOBUF_FINAL { return New(NULL); }

  FreshUrl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FreshUrl& from);
  void MergeFrom(const FreshUrl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FreshUrl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.FreshUrl)
 private:
  void set_has_url();
  void clear_has_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewsInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.SputnikRanker.NewsInfo) */ {
 public:
  NewsInfo();
  virtual ~NewsInfo();

  NewsInfo(const NewsInfo& from);

  inline NewsInfo& operator=(const NewsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewsInfo(NewsInfo&& from) noexcept
    : NewsInfo() {
    *this = ::std::move(from);
  }

  inline NewsInfo& operator=(NewsInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewsInfo& default_instance();

  static inline const NewsInfo* internal_default_instance() {
    return reinterpret_cast<const NewsInfo*>(
               &_NewsInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(NewsInfo* other);
  friend void swap(NewsInfo& a, NewsInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewsInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  NewsInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewsInfo& from);
  void MergeFrom(const NewsInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewsInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.SputnikRanker.FreshUrl fresh_urls = 7;
  int fresh_urls_size() const;
  void clear_fresh_urls();
  static const int kFreshUrlsFieldNumber = 7;
  const ::ru::mail::go::webbase::SputnikRanker::FreshUrl& fresh_urls(int index) const;
  ::ru::mail::go::webbase::SputnikRanker::FreshUrl* mutable_fresh_urls(int index);
  ::ru::mail::go::webbase::SputnikRanker::FreshUrl* add_fresh_urls();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::FreshUrl >*
      mutable_fresh_urls();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::FreshUrl >&
      fresh_urls() const;

  // required string query = 1;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // required uint64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // required uint32 reg = 2;
  bool has_reg() const;
  void clear_reg();
  static const int kRegFieldNumber = 2;
  ::google::protobuf::uint32 reg() const;
  void set_reg(::google::protobuf::uint32 value);

  // required uint32 show = 4;
  bool has_show() const;
  void clear_show();
  static const int kShowFieldNumber = 4;
  ::google::protobuf::uint32 show() const;
  void set_show(::google::protobuf::uint32 value);

  // required uint32 show_news_mixin = 5;
  bool has_show_news_mixin() const;
  void clear_show_news_mixin();
  static const int kShowNewsMixinFieldNumber = 5;
  ::google::protobuf::uint32 show_news_mixin() const;
  void set_show_news_mixin(::google::protobuf::uint32 value);

  // required uint32 show_fresh_urls = 6;
  bool has_show_fresh_urls() const;
  void clear_show_fresh_urls();
  static const int kShowFreshUrlsFieldNumber = 6;
  ::google::protobuf::uint32 show_fresh_urls() const;
  void set_show_fresh_urls(::google::protobuf::uint32 value);

  // optional uint32 total_fresh_urls = 8;
  bool has_total_fresh_urls() const;
  void clear_total_fresh_urls();
  static const int kTotalFreshUrlsFieldNumber = 8;
  ::google::protobuf::uint32 total_fresh_urls() const;
  void set_total_fresh_urls(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.SputnikRanker.NewsInfo)
 private:
  void set_has_query();
  void clear_has_query();
  void set_has_reg();
  void clear_has_reg();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_show();
  void clear_has_show();
  void set_has_show_news_mixin();
  void clear_has_show_news_mixin();
  void set_has_show_fresh_urls();
  void clear_has_show_fresh_urls();
  void set_has_total_fresh_urls();
  void clear_has_total_fresh_urls();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::FreshUrl > fresh_urls_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 reg_;
  ::google::protobuf::uint32 show_;
  ::google::protobuf::uint32 show_news_mixin_;
  ::google::protobuf::uint32 show_fresh_urls_;
  ::google::protobuf::uint32 total_fresh_urls_;
  friend struct protobuf_sputnik_5flogs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transition

// required uint64 time = 1;
inline bool Transition::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Transition::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Transition::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Transition::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Transition::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.time)
  return time_;
}
inline void Transition::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.time)
}

// required string referrer = 2;
inline bool Transition::has_referrer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transition::set_has_referrer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transition::clear_has_referrer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transition::clear_referrer() {
  referrer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_referrer();
}
inline const ::std::string& Transition::referrer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.referrer)
  return referrer_.GetNoArena();
}
inline void Transition::set_referrer(const ::std::string& value) {
  set_has_referrer();
  referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.referrer)
}
#if LANG_CXX11
inline void Transition::set_referrer(::std::string&& value) {
  set_has_referrer();
  referrer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Transition.referrer)
}
#endif
inline void Transition::set_referrer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_referrer();
  referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Transition.referrer)
}
inline void Transition::set_referrer(const char* value, size_t size) {
  set_has_referrer();
  referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Transition.referrer)
}
inline ::std::string* Transition::mutable_referrer() {
  set_has_referrer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Transition.referrer)
  return referrer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transition::release_referrer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Transition.referrer)
  clear_has_referrer();
  return referrer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transition::set_allocated_referrer(::std::string* referrer) {
  if (referrer != NULL) {
    set_has_referrer();
  } else {
    clear_has_referrer();
  }
  referrer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referrer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Transition.referrer)
}

// required string url = 3;
inline bool Transition::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transition::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transition::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transition::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& Transition::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.url)
  return url_.GetNoArena();
}
inline void Transition::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.url)
}
#if LANG_CXX11
inline void Transition::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Transition.url)
}
#endif
inline void Transition::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Transition.url)
}
inline void Transition::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Transition.url)
}
inline ::std::string* Transition::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Transition.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transition::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Transition.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transition::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Transition.url)
}

// optional bytes body = 4;
inline bool Transition::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transition::set_has_body() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transition::clear_has_body() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transition::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
inline const ::std::string& Transition::body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.body)
  return body_.GetNoArena();
}
inline void Transition::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.body)
}
#if LANG_CXX11
inline void Transition::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Transition.body)
}
#endif
inline void Transition::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Transition.body)
}
inline void Transition::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Transition.body)
}
inline ::std::string* Transition::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Transition.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transition::release_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Transition.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transition::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Transition.body)
}

// optional string ip = 5;
inline bool Transition::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transition::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transition::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transition::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& Transition::ip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.ip)
  return ip_.GetNoArena();
}
inline void Transition::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.ip)
}
#if LANG_CXX11
inline void Transition::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Transition.ip)
}
#endif
inline void Transition::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Transition.ip)
}
inline void Transition::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Transition.ip)
}
inline ::std::string* Transition::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Transition.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transition::release_ip() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Transition.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transition::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Transition.ip)
}

// optional uint64 loadTime = 6;
inline bool Transition::has_loadtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Transition::set_has_loadtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Transition::clear_has_loadtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Transition::clear_loadtime() {
  loadtime_ = GOOGLE_ULONGLONG(0);
  clear_has_loadtime();
}
inline ::google::protobuf::uint64 Transition::loadtime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.loadTime)
  return loadtime_;
}
inline void Transition::set_loadtime(::google::protobuf::uint64 value) {
  set_has_loadtime();
  loadtime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.loadTime)
}

// optional bool hacked = 7;
inline bool Transition::has_hacked() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Transition::set_has_hacked() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Transition::clear_has_hacked() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Transition::clear_hacked() {
  hacked_ = false;
  clear_has_hacked();
}
inline bool Transition::hacked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.hacked)
  return hacked_;
}
inline void Transition::set_hacked(bool value) {
  set_has_hacked();
  hacked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.hacked)
}

// optional string title = 8;
inline bool Transition::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transition::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Transition::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Transition::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Transition::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.title)
  return title_.GetNoArena();
}
inline void Transition::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.title)
}
#if LANG_CXX11
inline void Transition::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Transition.title)
}
#endif
inline void Transition::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Transition.title)
}
inline void Transition::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Transition.title)
}
inline ::std::string* Transition::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Transition.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transition::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Transition.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transition::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Transition.title)
}

// optional uint32 status = 9;
inline bool Transition::has_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Transition::set_has_status() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Transition::clear_has_status() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Transition::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 Transition::status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.status)
  return status_;
}
inline void Transition::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.status)
}

// optional string serpInfo = 10;
inline bool Transition::has_serpinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Transition::set_has_serpinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Transition::clear_has_serpinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Transition::clear_serpinfo() {
  serpinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serpinfo();
}
inline const ::std::string& Transition::serpinfo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Transition.serpInfo)
  return serpinfo_.GetNoArena();
}
inline void Transition::set_serpinfo(const ::std::string& value) {
  set_has_serpinfo();
  serpinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Transition.serpInfo)
}
#if LANG_CXX11
inline void Transition::set_serpinfo(::std::string&& value) {
  set_has_serpinfo();
  serpinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Transition.serpInfo)
}
#endif
inline void Transition::set_serpinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serpinfo();
  serpinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Transition.serpInfo)
}
inline void Transition::set_serpinfo(const char* value, size_t size) {
  set_has_serpinfo();
  serpinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Transition.serpInfo)
}
inline ::std::string* Transition::mutable_serpinfo() {
  set_has_serpinfo();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Transition.serpInfo)
  return serpinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transition::release_serpinfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Transition.serpInfo)
  clear_has_serpinfo();
  return serpinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transition::set_allocated_serpinfo(::std::string* serpinfo) {
  if (serpinfo != NULL) {
    set_has_serpinfo();
  } else {
    clear_has_serpinfo();
  }
  serpinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serpinfo);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Transition.serpInfo)
}

// -------------------------------------------------------------------

// Body

// repeated string urls = 1;
inline int Body::urls_size() const {
  return urls_.size();
}
inline void Body::clear_urls() {
  urls_.Clear();
}
inline const ::std::string& Body::urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Body.urls)
  return urls_.Get(index);
}
inline ::std::string* Body::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Body.urls)
  return urls_.Mutable(index);
}
inline void Body::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Body.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Body::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Body.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Body::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Body.urls)
}
inline void Body::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Body.urls)
}
inline ::std::string* Body::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.SputnikRanker.Body.urls)
  return urls_.Add();
}
inline void Body::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.Body.urls)
}
#if LANG_CXX11
inline void Body::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.Body.urls)
}
#endif
inline void Body::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.SputnikRanker.Body.urls)
}
inline void Body::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.SputnikRanker.Body.urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Body::urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.Body.urls)
  return urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Body::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.Body.urls)
  return &urls_;
}

// -------------------------------------------------------------------

// TransitionExtended

// required .ru.mail.go.webbase.SputnikRanker.Transition transition = 1;
inline bool TransitionExtended::has_transition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransitionExtended::set_has_transition() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransitionExtended::clear_has_transition() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransitionExtended::clear_transition() {
  if (transition_ != NULL) transition_->::ru::mail::go::webbase::SputnikRanker::Transition::Clear();
  clear_has_transition();
}
inline const ::ru::mail::go::webbase::SputnikRanker::Transition& TransitionExtended::transition() const {
  const ::ru::mail::go::webbase::SputnikRanker::Transition* p = transition_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.TransitionExtended.transition)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::SputnikRanker::Transition*>(
      &::ru::mail::go::webbase::SputnikRanker::_Transition_default_instance_);
}
inline ::ru::mail::go::webbase::SputnikRanker::Transition* TransitionExtended::mutable_transition() {
  set_has_transition();
  if (transition_ == NULL) {
    transition_ = new ::ru::mail::go::webbase::SputnikRanker::Transition;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.TransitionExtended.transition)
  return transition_;
}
inline ::ru::mail::go::webbase::SputnikRanker::Transition* TransitionExtended::release_transition() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.TransitionExtended.transition)
  clear_has_transition();
  ::ru::mail::go::webbase::SputnikRanker::Transition* temp = transition_;
  transition_ = NULL;
  return temp;
}
inline void TransitionExtended::set_allocated_transition(::ru::mail::go::webbase::SputnikRanker::Transition* transition) {
  delete transition_;
  transition_ = transition;
  if (transition) {
    set_has_transition();
  } else {
    clear_has_transition();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.TransitionExtended.transition)
}

// required string uid = 2;
inline bool TransitionExtended::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransitionExtended::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransitionExtended::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransitionExtended::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
inline const ::std::string& TransitionExtended::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid)
  return uid_.GetNoArena();
}
inline void TransitionExtended::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid)
}
#if LANG_CXX11
inline void TransitionExtended::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid)
}
#endif
inline void TransitionExtended::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid)
}
inline void TransitionExtended::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid)
}
inline ::std::string* TransitionExtended::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitionExtended::release_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransitionExtended::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.TransitionExtended.uid)
}

// required string email = 3;
inline bool TransitionExtended::has_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransitionExtended::set_has_email() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransitionExtended::clear_has_email() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransitionExtended::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& TransitionExtended::email() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.TransitionExtended.email)
  return email_.GetNoArena();
}
inline void TransitionExtended::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.TransitionExtended.email)
}
#if LANG_CXX11
inline void TransitionExtended::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.TransitionExtended.email)
}
#endif
inline void TransitionExtended::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.TransitionExtended.email)
}
inline void TransitionExtended::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.TransitionExtended.email)
}
inline ::std::string* TransitionExtended::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.TransitionExtended.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitionExtended::release_email() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.TransitionExtended.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransitionExtended::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.TransitionExtended.email)
}

// optional .ru.mail.go.webbase.SputnikRanker.Body body = 4;
inline bool TransitionExtended::has_body() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransitionExtended::set_has_body() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransitionExtended::clear_has_body() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransitionExtended::clear_body() {
  if (body_ != NULL) body_->::ru::mail::go::webbase::SputnikRanker::Body::Clear();
  clear_has_body();
}
inline const ::ru::mail::go::webbase::SputnikRanker::Body& TransitionExtended::body() const {
  const ::ru::mail::go::webbase::SputnikRanker::Body* p = body_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.TransitionExtended.body)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::SputnikRanker::Body*>(
      &::ru::mail::go::webbase::SputnikRanker::_Body_default_instance_);
}
inline ::ru::mail::go::webbase::SputnikRanker::Body* TransitionExtended::mutable_body() {
  set_has_body();
  if (body_ == NULL) {
    body_ = new ::ru::mail::go::webbase::SputnikRanker::Body;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.TransitionExtended.body)
  return body_;
}
inline ::ru::mail::go::webbase::SputnikRanker::Body* TransitionExtended::release_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.TransitionExtended.body)
  clear_has_body();
  ::ru::mail::go::webbase::SputnikRanker::Body* temp = body_;
  body_ = NULL;
  return temp;
}
inline void TransitionExtended::set_allocated_body(::ru::mail::go::webbase::SputnikRanker::Body* body) {
  delete body_;
  body_ = body;
  if (body) {
    set_has_body();
  } else {
    clear_has_body();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.TransitionExtended.body)
}

// optional string query = 5;
inline bool TransitionExtended::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransitionExtended::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransitionExtended::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransitionExtended::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& TransitionExtended::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.TransitionExtended.query)
  return query_.GetNoArena();
}
inline void TransitionExtended::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.TransitionExtended.query)
}
#if LANG_CXX11
inline void TransitionExtended::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.TransitionExtended.query)
}
#endif
inline void TransitionExtended::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.TransitionExtended.query)
}
inline void TransitionExtended::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.TransitionExtended.query)
}
inline ::std::string* TransitionExtended::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.TransitionExtended.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitionExtended::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.TransitionExtended.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransitionExtended::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.TransitionExtended.query)
}

// -------------------------------------------------------------------

// Hit

// required uint64 time = 1;
inline bool Hit::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Hit::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Hit::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Hit::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Hit::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Hit.time)
  return time_;
}
inline void Hit::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Hit.time)
}

// required string url = 2;
inline bool Hit::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Hit::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Hit::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Hit::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& Hit::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Hit.url)
  return url_.GetNoArena();
}
inline void Hit::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Hit.url)
}
#if LANG_CXX11
inline void Hit::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Hit.url)
}
#endif
inline void Hit::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Hit.url)
}
inline void Hit::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Hit.url)
}
inline ::std::string* Hit::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Hit.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Hit::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Hit.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hit::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Hit.url)
}

// optional uint64 loadTime = 3;
inline bool Hit::has_loadtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Hit::set_has_loadtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Hit::clear_has_loadtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Hit::clear_loadtime() {
  loadtime_ = GOOGLE_ULONGLONG(0);
  clear_has_loadtime();
}
inline ::google::protobuf::uint64 Hit::loadtime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Hit.loadTime)
  return loadtime_;
}
inline void Hit::set_loadtime(::google::protobuf::uint64 value) {
  set_has_loadtime();
  loadtime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Hit.loadTime)
}

// optional bool hacked = 4;
inline bool Hit::has_hacked() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Hit::set_has_hacked() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Hit::clear_has_hacked() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Hit::clear_hacked() {
  hacked_ = false;
  clear_has_hacked();
}
inline bool Hit::hacked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Hit.hacked)
  return hacked_;
}
inline void Hit::set_hacked(bool value) {
  set_has_hacked();
  hacked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Hit.hacked)
}

// -------------------------------------------------------------------

// Redirect

// required string from = 1;
inline bool Redirect::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Redirect::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Redirect::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Redirect::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from();
}
inline const ::std::string& Redirect::from() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Redirect.from)
  return from_.GetNoArena();
}
inline void Redirect::set_from(const ::std::string& value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Redirect.from)
}
#if LANG_CXX11
inline void Redirect::set_from(::std::string&& value) {
  set_has_from();
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Redirect.from)
}
#endif
inline void Redirect::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Redirect.from)
}
inline void Redirect::set_from(const char* value, size_t size) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Redirect.from)
}
inline ::std::string* Redirect::mutable_from() {
  set_has_from();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Redirect.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Redirect::release_from() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Redirect.from)
  clear_has_from();
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Redirect::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    set_has_from();
  } else {
    clear_has_from();
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Redirect.from)
}

// required string to = 2;
inline bool Redirect::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Redirect::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Redirect::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Redirect::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to();
}
inline const ::std::string& Redirect::to() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Redirect.to)
  return to_.GetNoArena();
}
inline void Redirect::set_to(const ::std::string& value) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Redirect.to)
}
#if LANG_CXX11
inline void Redirect::set_to(::std::string&& value) {
  set_has_to();
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Redirect.to)
}
#endif
inline void Redirect::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Redirect.to)
}
inline void Redirect::set_to(const char* value, size_t size) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Redirect.to)
}
inline ::std::string* Redirect::mutable_to() {
  set_has_to();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Redirect.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Redirect::release_to() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Redirect.to)
  clear_has_to();
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Redirect::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    set_has_to();
  } else {
    clear_has_to();
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Redirect.to)
}

// optional .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus fromStatus = 3 [default = Unknown];
inline bool Redirect::has_fromstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Redirect::set_has_fromstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Redirect::clear_has_fromstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Redirect::clear_fromstatus() {
  fromstatus_ = 2;
  clear_has_fromstatus();
}
inline ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus Redirect::fromstatus() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Redirect.fromStatus)
  return static_cast< ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus >(fromstatus_);
}
inline void Redirect::set_fromstatus(::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus value) {
  assert(::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus_IsValid(value));
  set_has_fromstatus();
  fromstatus_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Redirect.fromStatus)
}

// optional .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus toStatus = 4 [default = Unknown];
inline bool Redirect::has_tostatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Redirect::set_has_tostatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Redirect::clear_has_tostatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Redirect::clear_tostatus() {
  tostatus_ = 2;
  clear_has_tostatus();
}
inline ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus Redirect::tostatus() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Redirect.toStatus)
  return static_cast< ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus >(tostatus_);
}
inline void Redirect::set_tostatus(::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus value) {
  assert(::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus_IsValid(value));
  set_has_tostatus();
  tostatus_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Redirect.toStatus)
}

// optional .ru.mail.go.webbase.SputnikRanker.Redirect.Type type = 5 [default = NoInfo];
inline bool Redirect::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Redirect::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Redirect::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Redirect::clear_type() {
  type_ = 3;
  clear_has_type();
}
inline ::ru::mail::go::webbase::SputnikRanker::Redirect_Type Redirect::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Redirect.type)
  return static_cast< ::ru::mail::go::webbase::SputnikRanker::Redirect_Type >(type_);
}
inline void Redirect::set_type(::ru::mail::go::webbase::SputnikRanker::Redirect_Type value) {
  assert(::ru::mail::go::webbase::SputnikRanker::Redirect_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Redirect.type)
}

// -------------------------------------------------------------------

// Qlinks_Qlink

// required string query = 1;
inline bool Qlinks_Qlink::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Qlinks_Qlink::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Qlinks_Qlink::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Qlinks_Qlink::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& Qlinks_Qlink::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query)
  return query_.GetNoArena();
}
inline void Qlinks_Qlink::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query)
}
#if LANG_CXX11
inline void Qlinks_Qlink::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query)
}
#endif
inline void Qlinks_Qlink::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query)
}
inline void Qlinks_Qlink::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query)
}
inline ::std::string* Qlinks_Qlink::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qlinks_Qlink::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qlinks_Qlink::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.query)
}

// required int32 geo = 2;
inline bool Qlinks_Qlink::has_geo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Qlinks_Qlink::set_has_geo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Qlinks_Qlink::clear_has_geo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Qlinks_Qlink::clear_geo() {
  geo_ = 0;
  clear_has_geo();
}
inline ::google::protobuf::int32 Qlinks_Qlink::geo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.geo)
  return geo_;
}
inline void Qlinks_Qlink::set_geo(::google::protobuf::int32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink.geo)
}

// -------------------------------------------------------------------

// Qlinks

// required string from = 1;
inline bool Qlinks::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Qlinks::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Qlinks::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Qlinks::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from();
}
inline const ::std::string& Qlinks::from() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Qlinks.from)
  return from_.GetNoArena();
}
inline void Qlinks::set_from(const ::std::string& value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Qlinks.from)
}
#if LANG_CXX11
inline void Qlinks::set_from(::std::string&& value) {
  set_has_from();
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Qlinks.from)
}
#endif
inline void Qlinks::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Qlinks.from)
}
inline void Qlinks::set_from(const char* value, size_t size) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Qlinks.from)
}
inline ::std::string* Qlinks::mutable_from() {
  set_has_from();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Qlinks.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qlinks::release_from() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Qlinks.from)
  clear_has_from();
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qlinks::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    set_has_from();
  } else {
    clear_has_from();
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Qlinks.from)
}

// required .ru.mail.go.webbase.SputnikRanker.Redirect.UrlStatus fromStatus = 2;
inline bool Qlinks::has_fromstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Qlinks::set_has_fromstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Qlinks::clear_has_fromstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Qlinks::clear_fromstatus() {
  fromstatus_ = 0;
  clear_has_fromstatus();
}
inline ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus Qlinks::fromstatus() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Qlinks.fromStatus)
  return static_cast< ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus >(fromstatus_);
}
inline void Qlinks::set_fromstatus(::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus value) {
  assert(::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus_IsValid(value));
  set_has_fromstatus();
  fromstatus_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Qlinks.fromStatus)
}

// repeated .ru.mail.go.webbase.SputnikRanker.Qlinks.Qlink qlink = 3;
inline int Qlinks::qlink_size() const {
  return qlink_.size();
}
inline void Qlinks::clear_qlink() {
  qlink_.Clear();
}
inline const ::ru::mail::go::webbase::SputnikRanker::Qlinks_Qlink& Qlinks::qlink(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Qlinks.qlink)
  return qlink_.Get(index);
}
inline ::ru::mail::go::webbase::SputnikRanker::Qlinks_Qlink* Qlinks::mutable_qlink(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Qlinks.qlink)
  return qlink_.Mutable(index);
}
inline ::ru::mail::go::webbase::SputnikRanker::Qlinks_Qlink* Qlinks::add_qlink() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.Qlinks.qlink)
  return qlink_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Qlinks_Qlink >*
Qlinks::mutable_qlink() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.Qlinks.qlink)
  return &qlink_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Qlinks_Qlink >&
Qlinks::qlink() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.Qlinks.qlink)
  return qlink_;
}

// required string to = 4;
inline bool Qlinks::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Qlinks::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Qlinks::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Qlinks::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to();
}
inline const ::std::string& Qlinks::to() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Qlinks.to)
  return to_.GetNoArena();
}
inline void Qlinks::set_to(const ::std::string& value) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Qlinks.to)
}
#if LANG_CXX11
inline void Qlinks::set_to(::std::string&& value) {
  set_has_to();
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Qlinks.to)
}
#endif
inline void Qlinks::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Qlinks.to)
}
inline void Qlinks::set_to(const char* value, size_t size) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Qlinks.to)
}
inline ::std::string* Qlinks::mutable_to() {
  set_has_to();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Qlinks.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qlinks::release_to() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Qlinks.to)
  clear_has_to();
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qlinks::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    set_has_to();
  } else {
    clear_has_to();
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Qlinks.to)
}

// required .ru.mail.go.webbase.SputnikRanker.Redirect.Type type = 5;
inline bool Qlinks::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Qlinks::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Qlinks::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Qlinks::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::webbase::SputnikRanker::Redirect_Type Qlinks::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Qlinks.type)
  return static_cast< ::ru::mail::go::webbase::SputnikRanker::Redirect_Type >(type_);
}
inline void Qlinks::set_type(::ru::mail::go::webbase::SputnikRanker::Redirect_Type value) {
  assert(::ru::mail::go::webbase::SputnikRanker::Redirect_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Qlinks.type)
}

// -------------------------------------------------------------------

// Session

// required string uid = 1;
inline bool Session::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Session::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Session::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Session::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
inline const ::std::string& Session::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Session.uid)
  return uid_.GetNoArena();
}
inline void Session::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Session.uid)
}
#if LANG_CXX11
inline void Session::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Session.uid)
}
#endif
inline void Session::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Session.uid)
}
inline void Session::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Session.uid)
}
inline ::std::string* Session::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Session.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Session.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Session.uid)
}

// repeated .ru.mail.go.webbase.SputnikRanker.Hit hits = 2;
inline int Session::hits_size() const {
  return hits_.size();
}
inline void Session::clear_hits() {
  hits_.Clear();
}
inline const ::ru::mail::go::webbase::SputnikRanker::Hit& Session::hits(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Session.hits)
  return hits_.Get(index);
}
inline ::ru::mail::go::webbase::SputnikRanker::Hit* Session::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Session.hits)
  return hits_.Mutable(index);
}
inline ::ru::mail::go::webbase::SputnikRanker::Hit* Session::add_hits() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.Session.hits)
  return hits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Hit >*
Session::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.Session.hits)
  return &hits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Hit >&
Session::hits() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.Session.hits)
  return hits_;
}

// optional uint64 time = 3;
inline bool Session::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Session::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Session::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Session::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Session::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Session.time)
  return time_;
}
inline void Session::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Session.time)
}

// repeated uint32 regions = 4;
inline int Session::regions_size() const {
  return regions_.size();
}
inline void Session::clear_regions() {
  regions_.Clear();
}
inline ::google::protobuf::uint32 Session::regions(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Session.regions)
  return regions_.Get(index);
}
inline void Session::set_regions(int index, ::google::protobuf::uint32 value) {
  regions_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Session.regions)
}
inline void Session::add_regions(::google::protobuf::uint32 value) {
  regions_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.Session.regions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Session::regions() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.Session.regions)
  return regions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Session::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.Session.regions)
  return &regions_;
}

// repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirect = 5;
inline int Session::redirect_size() const {
  return redirect_.size();
}
inline void Session::clear_redirect() {
  redirect_.Clear();
}
inline const ::ru::mail::go::webbase::SputnikRanker::Redirect& Session::redirect(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Session.redirect)
  return redirect_.Get(index);
}
inline ::ru::mail::go::webbase::SputnikRanker::Redirect* Session::mutable_redirect(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Session.redirect)
  return redirect_.Mutable(index);
}
inline ::ru::mail::go::webbase::SputnikRanker::Redirect* Session::add_redirect() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.Session.redirect)
  return redirect_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Redirect >*
Session::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.Session.redirect)
  return &redirect_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Redirect >&
Session::redirect() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.Session.redirect)
  return redirect_;
}

// -------------------------------------------------------------------

// ImageBody

// required uint64 time = 1;
inline bool ImageBody::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageBody::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageBody::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageBody::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 ImageBody::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ImageBody.time)
  return time_;
}
inline void ImageBody::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ImageBody.time)
}

// required string url = 2;
inline bool ImageBody::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageBody::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageBody::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageBody::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& ImageBody::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ImageBody.url)
  return url_.GetNoArena();
}
inline void ImageBody::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ImageBody.url)
}
#if LANG_CXX11
inline void ImageBody::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.ImageBody.url)
}
#endif
inline void ImageBody::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.ImageBody.url)
}
inline void ImageBody::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.ImageBody.url)
}
inline ::std::string* ImageBody::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.ImageBody.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageBody::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.ImageBody.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageBody::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.ImageBody.url)
}

// required bytes body = 3;
inline bool ImageBody::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageBody::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageBody::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageBody::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
inline const ::std::string& ImageBody::body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ImageBody.body)
  return body_.GetNoArena();
}
inline void ImageBody::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ImageBody.body)
}
#if LANG_CXX11
inline void ImageBody::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.ImageBody.body)
}
#endif
inline void ImageBody::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.ImageBody.body)
}
inline void ImageBody::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.ImageBody.body)
}
inline ::std::string* ImageBody::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.ImageBody.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageBody::release_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.ImageBody.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageBody::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.ImageBody.body)
}

// optional string uid = 4;
inline bool ImageBody::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageBody::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageBody::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageBody::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
inline const ::std::string& ImageBody::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ImageBody.uid)
  return uid_.GetNoArena();
}
inline void ImageBody::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ImageBody.uid)
}
#if LANG_CXX11
inline void ImageBody::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.ImageBody.uid)
}
#endif
inline void ImageBody::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.ImageBody.uid)
}
inline void ImageBody::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.ImageBody.uid)
}
inline ::std::string* ImageBody::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.ImageBody.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageBody::release_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.ImageBody.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageBody::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.ImageBody.uid)
}

// optional .ru.mail.go.webbase.SputnikRanker.ImageBody.Source source = 5 [default = Telemetry];
inline bool ImageBody::has_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageBody::set_has_source() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageBody::clear_has_source() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageBody::clear_source() {
  source_ = 1;
  clear_has_source();
}
inline ::ru::mail::go::webbase::SputnikRanker::ImageBody_Source ImageBody::source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ImageBody.source)
  return static_cast< ::ru::mail::go::webbase::SputnikRanker::ImageBody_Source >(source_);
}
inline void ImageBody::set_source(::ru::mail::go::webbase::SputnikRanker::ImageBody_Source value) {
  assert(::ru::mail::go::webbase::SputnikRanker::ImageBody_Source_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ImageBody.source)
}

// optional uint32 weight = 6;
inline bool ImageBody::has_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageBody::set_has_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageBody::clear_has_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageBody::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 ImageBody::weight() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ImageBody.weight)
  return weight_;
}
inline void ImageBody::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ImageBody.weight)
}

// optional string query = 7;
inline bool ImageBody::has_query() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageBody::set_has_query() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageBody::clear_has_query() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageBody::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& ImageBody::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ImageBody.query)
  return query_.GetNoArena();
}
inline void ImageBody::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ImageBody.query)
}
#if LANG_CXX11
inline void ImageBody::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.ImageBody.query)
}
#endif
inline void ImageBody::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.ImageBody.query)
}
inline void ImageBody::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.ImageBody.query)
}
inline ::std::string* ImageBody::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.ImageBody.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageBody::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.ImageBody.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageBody::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.ImageBody.query)
}

// -------------------------------------------------------------------

// VideoBody

// required uint64 time = 1;
inline bool VideoBody::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoBody::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoBody::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoBody::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 VideoBody::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.VideoBody.time)
  return time_;
}
inline void VideoBody::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.VideoBody.time)
}

// required string url = 2;
inline bool VideoBody::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoBody::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoBody::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoBody::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& VideoBody::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.VideoBody.url)
  return url_.GetNoArena();
}
inline void VideoBody::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.VideoBody.url)
}
#if LANG_CXX11
inline void VideoBody::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.VideoBody.url)
}
#endif
inline void VideoBody::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.VideoBody.url)
}
inline void VideoBody::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.VideoBody.url)
}
inline ::std::string* VideoBody::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.VideoBody.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoBody::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.VideoBody.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoBody::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.VideoBody.url)
}

// required bytes body = 3;
inline bool VideoBody::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoBody::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoBody::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoBody::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
inline const ::std::string& VideoBody::body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.VideoBody.body)
  return body_.GetNoArena();
}
inline void VideoBody::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.VideoBody.body)
}
#if LANG_CXX11
inline void VideoBody::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.VideoBody.body)
}
#endif
inline void VideoBody::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.VideoBody.body)
}
inline void VideoBody::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.VideoBody.body)
}
inline ::std::string* VideoBody::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.VideoBody.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoBody::release_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.VideoBody.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoBody::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.VideoBody.body)
}

// optional string uid = 4;
inline bool VideoBody::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoBody::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoBody::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoBody::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
inline const ::std::string& VideoBody::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.VideoBody.uid)
  return uid_.GetNoArena();
}
inline void VideoBody::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.VideoBody.uid)
}
#if LANG_CXX11
inline void VideoBody::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.VideoBody.uid)
}
#endif
inline void VideoBody::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.VideoBody.uid)
}
inline void VideoBody::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.VideoBody.uid)
}
inline ::std::string* VideoBody::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.VideoBody.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoBody::release_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.VideoBody.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoBody::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.VideoBody.uid)
}

// -------------------------------------------------------------------

// BrowseRankData

// required string url = 1;
inline bool BrowseRankData::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrowseRankData::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BrowseRankData::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BrowseRankData::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& BrowseRankData::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.url)
  return url_.GetNoArena();
}
inline void BrowseRankData::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.url)
}
#if LANG_CXX11
inline void BrowseRankData::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.BrowseRankData.url)
}
#endif
inline void BrowseRankData::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.BrowseRankData.url)
}
inline void BrowseRankData::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.BrowseRankData.url)
}
inline ::std::string* BrowseRankData::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.BrowseRankData.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrowseRankData::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.BrowseRankData.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrowseRankData::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.BrowseRankData.url)
}

// required uint32 region = 2;
inline bool BrowseRankData::has_region() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BrowseRankData::set_has_region() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BrowseRankData::clear_has_region() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BrowseRankData::clear_region() {
  region_ = 0u;
  clear_has_region();
}
inline ::google::protobuf::uint32 BrowseRankData::region() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.region)
  return region_;
}
inline void BrowseRankData::set_region(::google::protobuf::uint32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.region)
}

// optional uint64 time = 3;
inline bool BrowseRankData::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BrowseRankData::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BrowseRankData::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BrowseRankData::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 BrowseRankData::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.time)
  return time_;
}
inline void BrowseRankData::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.time)
}

// optional double dwellTime = 4;
inline bool BrowseRankData::has_dwelltime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BrowseRankData::set_has_dwelltime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BrowseRankData::clear_has_dwelltime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BrowseRankData::clear_dwelltime() {
  dwelltime_ = 0;
  clear_has_dwelltime();
}
inline double BrowseRankData::dwelltime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.dwellTime)
  return dwelltime_;
}
inline void BrowseRankData::set_dwelltime(double value) {
  set_has_dwelltime();
  dwelltime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.dwellTime)
}

// optional double loadTime = 5;
inline bool BrowseRankData::has_loadtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BrowseRankData::set_has_loadtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BrowseRankData::clear_has_loadtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BrowseRankData::clear_loadtime() {
  loadtime_ = 0;
  clear_has_loadtime();
}
inline double BrowseRankData::loadtime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.loadTime)
  return loadtime_;
}
inline void BrowseRankData::set_loadtime(double value) {
  set_has_loadtime();
  loadtime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.loadTime)
}

// optional double position = 6;
inline bool BrowseRankData::has_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BrowseRankData::set_has_position() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BrowseRankData::clear_has_position() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BrowseRankData::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline double BrowseRankData::position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.position)
  return position_;
}
inline void BrowseRankData::set_position(double value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.position)
}

// optional double numberOfSessions = 7;
inline bool BrowseRankData::has_numberofsessions() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BrowseRankData::set_has_numberofsessions() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BrowseRankData::clear_has_numberofsessions() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BrowseRankData::clear_numberofsessions() {
  numberofsessions_ = 0;
  clear_has_numberofsessions();
}
inline double BrowseRankData::numberofsessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.numberOfSessions)
  return numberofsessions_;
}
inline void BrowseRankData::set_numberofsessions(double value) {
  set_has_numberofsessions();
  numberofsessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.numberOfSessions)
}

// optional double numberOfLoads = 8;
inline bool BrowseRankData::has_numberofloads() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BrowseRankData::set_has_numberofloads() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BrowseRankData::clear_has_numberofloads() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BrowseRankData::clear_numberofloads() {
  numberofloads_ = 0;
  clear_has_numberofloads();
}
inline double BrowseRankData::numberofloads() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.numberOfLoads)
  return numberofloads_;
}
inline void BrowseRankData::set_numberofloads(double value) {
  set_has_numberofloads();
  numberofloads_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.numberOfLoads)
}

// optional double positionCoef = 9;
inline bool BrowseRankData::has_positioncoef() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BrowseRankData::set_has_positioncoef() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BrowseRankData::clear_has_positioncoef() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BrowseRankData::clear_positioncoef() {
  positioncoef_ = 0;
  clear_has_positioncoef();
}
inline double BrowseRankData::positioncoef() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.positionCoef)
  return positioncoef_;
}
inline void BrowseRankData::set_positioncoef(double value) {
  set_has_positioncoef();
  positioncoef_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.positionCoef)
}

// optional double timeCoef = 10;
inline bool BrowseRankData::has_timecoef() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BrowseRankData::set_has_timecoef() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BrowseRankData::clear_has_timecoef() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BrowseRankData::clear_timecoef() {
  timecoef_ = 0;
  clear_has_timecoef();
}
inline double BrowseRankData::timecoef() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.timeCoef)
  return timecoef_;
}
inline void BrowseRankData::set_timecoef(double value) {
  set_has_timecoef();
  timecoef_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.timeCoef)
}

// optional double browseRank = 11;
inline bool BrowseRankData::has_browserank() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BrowseRankData::set_has_browserank() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BrowseRankData::clear_has_browserank() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BrowseRankData::clear_browserank() {
  browserank_ = 0;
  clear_has_browserank();
}
inline double BrowseRankData::browserank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.browseRank)
  return browserank_;
}
inline void BrowseRankData::set_browserank(double value) {
  set_has_browserank();
  browserank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.browseRank)
}

// optional double filteredBrowseRank = 12;
inline bool BrowseRankData::has_filteredbrowserank() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BrowseRankData::set_has_filteredbrowserank() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BrowseRankData::clear_has_filteredbrowserank() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BrowseRankData::clear_filteredbrowserank() {
  filteredbrowserank_ = 0;
  clear_has_filteredbrowserank();
}
inline double BrowseRankData::filteredbrowserank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.filteredBrowseRank)
  return filteredbrowserank_;
}
inline void BrowseRankData::set_filteredbrowserank(double value) {
  set_has_filteredbrowserank();
  filteredbrowserank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.filteredBrowseRank)
}

// optional double pagesInSite = 13;
inline bool BrowseRankData::has_pagesinsite() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BrowseRankData::set_has_pagesinsite() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BrowseRankData::clear_has_pagesinsite() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BrowseRankData::clear_pagesinsite() {
  pagesinsite_ = 0;
  clear_has_pagesinsite();
}
inline double BrowseRankData::pagesinsite() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.BrowseRankData.pagesInSite)
  return pagesinsite_;
}
inline void BrowseRankData::set_pagesinsite(double value) {
  set_has_pagesinsite();
  pagesinsite_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.BrowseRankData.pagesInSite)
}

// -------------------------------------------------------------------

// UserRankUid

// required string uid = 1;
inline bool UserRankUid::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRankUid::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRankUid::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRankUid::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
inline const ::std::string& UserRankUid::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankUid.uid)
  return uid_.GetNoArena();
}
inline void UserRankUid::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankUid.uid)
}
#if LANG_CXX11
inline void UserRankUid::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.UserRankUid.uid)
}
#endif
inline void UserRankUid::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.UserRankUid.uid)
}
inline void UserRankUid::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.UserRankUid.uid)
}
inline ::std::string* UserRankUid::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.UserRankUid.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRankUid::release_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.UserRankUid.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRankUid::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.UserRankUid.uid)
}

// required double repeat = 2;
inline bool UserRankUid::has_repeat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRankUid::set_has_repeat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRankUid::clear_has_repeat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRankUid::clear_repeat() {
  repeat_ = 0;
  clear_has_repeat();
}
inline double UserRankUid::repeat() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankUid.repeat)
  return repeat_;
}
inline void UserRankUid::set_repeat(double value) {
  set_has_repeat();
  repeat_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankUid.repeat)
}

// -------------------------------------------------------------------

// UserRankValues

// required uint64 filterMask = 1;
inline bool UserRankValues::has_filtermask() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRankValues::set_has_filtermask() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRankValues::clear_has_filtermask() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRankValues::clear_filtermask() {
  filtermask_ = GOOGLE_ULONGLONG(0);
  clear_has_filtermask();
}
inline ::google::protobuf::uint64 UserRankValues::filtermask() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankValues.filterMask)
  return filtermask_;
}
inline void UserRankValues::set_filtermask(::google::protobuf::uint64 value) {
  set_has_filtermask();
  filtermask_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankValues.filterMask)
}

// repeated .ru.mail.go.webbase.SputnikRanker.UserRankUid uid = 2;
inline int UserRankValues::uid_size() const {
  return uid_.size();
}
inline void UserRankValues::clear_uid() {
  uid_.Clear();
}
inline const ::ru::mail::go::webbase::SputnikRanker::UserRankUid& UserRankValues::uid(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankValues.uid)
  return uid_.Get(index);
}
inline ::ru::mail::go::webbase::SputnikRanker::UserRankUid* UserRankValues::mutable_uid(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.UserRankValues.uid)
  return uid_.Mutable(index);
}
inline ::ru::mail::go::webbase::SputnikRanker::UserRankUid* UserRankValues::add_uid() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.UserRankValues.uid)
  return uid_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::UserRankUid >*
UserRankValues::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.UserRankValues.uid)
  return &uid_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::UserRankUid >&
UserRankValues::uid() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.UserRankValues.uid)
  return uid_;
}

// -------------------------------------------------------------------

// UserRankData

// required string url = 1;
inline bool UserRankData::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRankData::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRankData::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRankData::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& UserRankData::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankData.url)
  return url_.GetNoArena();
}
inline void UserRankData::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankData.url)
}
#if LANG_CXX11
inline void UserRankData::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.UserRankData.url)
}
#endif
inline void UserRankData::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.UserRankData.url)
}
inline void UserRankData::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.UserRankData.url)
}
inline ::std::string* UserRankData::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.UserRankData.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRankData::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.UserRankData.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRankData::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.UserRankData.url)
}

// required uint32 region = 2;
inline bool UserRankData::has_region() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserRankData::set_has_region() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserRankData::clear_has_region() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserRankData::clear_region() {
  region_ = 0u;
  clear_has_region();
}
inline ::google::protobuf::uint32 UserRankData::region() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankData.region)
  return region_;
}
inline void UserRankData::set_region(::google::protobuf::uint32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankData.region)
}

// optional uint64 time = 3;
inline bool UserRankData::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRankData::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRankData::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRankData::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 UserRankData::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankData.time)
  return time_;
}
inline void UserRankData::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankData.time)
}

// optional double numberOfUsers = 4;
inline bool UserRankData::has_numberofusers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserRankData::set_has_numberofusers() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserRankData::clear_has_numberofusers() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserRankData::clear_numberofusers() {
  numberofusers_ = 0;
  clear_has_numberofusers();
}
inline double UserRankData::numberofusers() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankData.numberOfUsers)
  return numberofusers_;
}
inline void UserRankData::set_numberofusers(double value) {
  set_has_numberofusers();
  numberofusers_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankData.numberOfUsers)
}

// optional .ru.mail.go.webbase.SputnikRanker.UserRankValues values = 5;
inline bool UserRankData::has_values() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRankData::set_has_values() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRankData::clear_has_values() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRankData::clear_values() {
  if (values_ != NULL) values_->::ru::mail::go::webbase::SputnikRanker::UserRankValues::Clear();
  clear_has_values();
}
inline const ::ru::mail::go::webbase::SputnikRanker::UserRankValues& UserRankData::values() const {
  const ::ru::mail::go::webbase::SputnikRanker::UserRankValues* p = values_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankData.values)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::SputnikRanker::UserRankValues*>(
      &::ru::mail::go::webbase::SputnikRanker::_UserRankValues_default_instance_);
}
inline ::ru::mail::go::webbase::SputnikRanker::UserRankValues* UserRankData::mutable_values() {
  set_has_values();
  if (values_ == NULL) {
    values_ = new ::ru::mail::go::webbase::SputnikRanker::UserRankValues;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.UserRankData.values)
  return values_;
}
inline ::ru::mail::go::webbase::SputnikRanker::UserRankValues* UserRankData::release_values() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.UserRankData.values)
  clear_has_values();
  ::ru::mail::go::webbase::SputnikRanker::UserRankValues* temp = values_;
  values_ = NULL;
  return temp;
}
inline void UserRankData::set_allocated_values(::ru::mail::go::webbase::SputnikRanker::UserRankValues* values) {
  delete values_;
  values_ = values;
  if (values) {
    set_has_values();
  } else {
    clear_has_values();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.UserRankData.values)
}

// optional uint64 hits = 6;
inline bool UserRankData::has_hits() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserRankData::set_has_hits() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserRankData::clear_has_hits() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserRankData::clear_hits() {
  hits_ = GOOGLE_ULONGLONG(0);
  clear_has_hits();
}
inline ::google::protobuf::uint64 UserRankData::hits() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankData.hits)
  return hits_;
}
inline void UserRankData::set_hits(::google::protobuf::uint64 value) {
  set_has_hits();
  hits_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankData.hits)
}

// repeated string original_urls = 7;
inline int UserRankData::original_urls_size() const {
  return original_urls_.size();
}
inline void UserRankData::clear_original_urls() {
  original_urls_.Clear();
}
inline const ::std::string& UserRankData::original_urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
  return original_urls_.Get(index);
}
inline ::std::string* UserRankData::mutable_original_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
  return original_urls_.Mutable(index);
}
inline void UserRankData::set_original_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
  original_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UserRankData::set_original_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
  original_urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UserRankData::set_original_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  original_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
}
inline void UserRankData::set_original_urls(int index, const char* value, size_t size) {
  original_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
}
inline ::std::string* UserRankData::add_original_urls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
  return original_urls_.Add();
}
inline void UserRankData::add_original_urls(const ::std::string& value) {
  original_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
}
#if LANG_CXX11
inline void UserRankData::add_original_urls(::std::string&& value) {
  original_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
}
#endif
inline void UserRankData::add_original_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  original_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
}
inline void UserRankData::add_original_urls(const char* value, size_t size) {
  original_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserRankData::original_urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
  return original_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserRankData::mutable_original_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.UserRankData.original_urls)
  return &original_urls_;
}

// -------------------------------------------------------------------

// ForumedSegment

// required string pattern = 1;
inline bool ForumedSegment::has_pattern() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForumedSegment::set_has_pattern() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForumedSegment::clear_has_pattern() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForumedSegment::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pattern();
}
inline const ::std::string& ForumedSegment::pattern() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern)
  return pattern_.GetNoArena();
}
inline void ForumedSegment::set_pattern(const ::std::string& value) {
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern)
}
#if LANG_CXX11
inline void ForumedSegment::set_pattern(::std::string&& value) {
  set_has_pattern();
  pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern)
}
#endif
inline void ForumedSegment::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern)
}
inline void ForumedSegment::set_pattern(const char* value, size_t size) {
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern)
}
inline ::std::string* ForumedSegment::mutable_pattern() {
  set_has_pattern();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForumedSegment::release_pattern() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern)
  clear_has_pattern();
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ForumedSegment::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    set_has_pattern();
  } else {
    clear_has_pattern();
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.ForumedSegment.pattern)
}

// required bool isForum = 2;
inline bool ForumedSegment::has_isforum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForumedSegment::set_has_isforum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForumedSegment::clear_has_isforum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForumedSegment::clear_isforum() {
  isforum_ = false;
  clear_has_isforum();
}
inline bool ForumedSegment::isforum() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ForumedSegment.isForum)
  return isforum_;
}
inline void ForumedSegment::set_isforum(bool value) {
  set_has_isforum();
  isforum_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.ForumedSegment.isForum)
}

// -------------------------------------------------------------------

// ForumedSekitei

// repeated .ru.mail.go.webbase.SputnikRanker.ForumedSegment segments = 1;
inline int ForumedSekitei::segments_size() const {
  return segments_.size();
}
inline void ForumedSekitei::clear_segments() {
  segments_.Clear();
}
inline const ::ru::mail::go::webbase::SputnikRanker::ForumedSegment& ForumedSekitei::segments(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.ForumedSekitei.segments)
  return segments_.Get(index);
}
inline ::ru::mail::go::webbase::SputnikRanker::ForumedSegment* ForumedSekitei::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.ForumedSekitei.segments)
  return segments_.Mutable(index);
}
inline ::ru::mail::go::webbase::SputnikRanker::ForumedSegment* ForumedSekitei::add_segments() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.ForumedSekitei.segments)
  return segments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::ForumedSegment >*
ForumedSekitei::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.ForumedSekitei.segments)
  return &segments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::ForumedSegment >&
ForumedSekitei::segments() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.ForumedSekitei.segments)
  return segments_;
}

// -------------------------------------------------------------------

// SessionSpc

// required .ru.mail.go.webbase.SputnikRanker.SessionSpc.Type type = 1;
inline bool SessionSpc::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionSpc::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionSpc::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionSpc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type SessionSpc::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.SessionSpc.type)
  return static_cast< ::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type >(type_);
}
inline void SessionSpc::set_type(::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type value) {
  assert(::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.SessionSpc.type)
}

// required string rawQuery = 2;
inline bool SessionSpc::has_rawquery() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionSpc::set_has_rawquery() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionSpc::clear_has_rawquery() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionSpc::clear_rawquery() {
  rawquery_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rawquery();
}
inline const ::std::string& SessionSpc::rawquery() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery)
  return rawquery_.GetNoArena();
}
inline void SessionSpc::set_rawquery(const ::std::string& value) {
  set_has_rawquery();
  rawquery_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery)
}
#if LANG_CXX11
inline void SessionSpc::set_rawquery(::std::string&& value) {
  set_has_rawquery();
  rawquery_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery)
}
#endif
inline void SessionSpc::set_rawquery(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rawquery();
  rawquery_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery)
}
inline void SessionSpc::set_rawquery(const char* value, size_t size) {
  set_has_rawquery();
  rawquery_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery)
}
inline ::std::string* SessionSpc::mutable_rawquery() {
  set_has_rawquery();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery)
  return rawquery_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionSpc::release_rawquery() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery)
  clear_has_rawquery();
  return rawquery_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionSpc::set_allocated_rawquery(::std::string* rawquery) {
  if (rawquery != NULL) {
    set_has_rawquery();
  } else {
    clear_has_rawquery();
  }
  rawquery_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rawquery);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.SessionSpc.rawQuery)
}

// optional string proposedQuery = 3;
inline bool SessionSpc::has_proposedquery() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionSpc::set_has_proposedquery() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionSpc::clear_has_proposedquery() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionSpc::clear_proposedquery() {
  proposedquery_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proposedquery();
}
inline const ::std::string& SessionSpc::proposedquery() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery)
  return proposedquery_.GetNoArena();
}
inline void SessionSpc::set_proposedquery(const ::std::string& value) {
  set_has_proposedquery();
  proposedquery_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery)
}
#if LANG_CXX11
inline void SessionSpc::set_proposedquery(::std::string&& value) {
  set_has_proposedquery();
  proposedquery_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery)
}
#endif
inline void SessionSpc::set_proposedquery(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proposedquery();
  proposedquery_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery)
}
inline void SessionSpc::set_proposedquery(const char* value, size_t size) {
  set_has_proposedquery();
  proposedquery_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery)
}
inline ::std::string* SessionSpc::mutable_proposedquery() {
  set_has_proposedquery();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery)
  return proposedquery_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionSpc::release_proposedquery() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery)
  clear_has_proposedquery();
  return proposedquery_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionSpc::set_allocated_proposedquery(::std::string* proposedquery) {
  if (proposedquery != NULL) {
    set_has_proposedquery();
  } else {
    clear_has_proposedquery();
  }
  proposedquery_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proposedquery);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.SessionSpc.proposedQuery)
}

// -------------------------------------------------------------------

// RedirectArray

// repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirects = 1;
inline int RedirectArray::redirects_size() const {
  return redirects_.size();
}
inline void RedirectArray::clear_redirects() {
  redirects_.Clear();
}
inline const ::ru::mail::go::webbase::SputnikRanker::Redirect& RedirectArray::redirects(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.RedirectArray.redirects)
  return redirects_.Get(index);
}
inline ::ru::mail::go::webbase::SputnikRanker::Redirect* RedirectArray::mutable_redirects(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.RedirectArray.redirects)
  return redirects_.Mutable(index);
}
inline ::ru::mail::go::webbase::SputnikRanker::Redirect* RedirectArray::add_redirects() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.RedirectArray.redirects)
  return redirects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Redirect >*
RedirectArray::mutable_redirects() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.RedirectArray.redirects)
  return &redirects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Redirect >&
RedirectArray::redirects() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.RedirectArray.redirects)
  return redirects_;
}

// -------------------------------------------------------------------

// Snippet

// required string url = 1;
inline bool Snippet::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Snippet::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Snippet::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Snippet::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& Snippet::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Snippet.url)
  return url_.GetNoArena();
}
inline void Snippet::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Snippet.url)
}
#if LANG_CXX11
inline void Snippet::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Snippet.url)
}
#endif
inline void Snippet::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Snippet.url)
}
inline void Snippet::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Snippet.url)
}
inline ::std::string* Snippet::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Snippet.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Snippet::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Snippet.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Snippet::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Snippet.url)
}

// optional string title = 2;
inline bool Snippet::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Snippet::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Snippet::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Snippet::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Snippet::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Snippet.title)
  return title_.GetNoArena();
}
inline void Snippet::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Snippet.title)
}
#if LANG_CXX11
inline void Snippet::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Snippet.title)
}
#endif
inline void Snippet::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Snippet.title)
}
inline void Snippet::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Snippet.title)
}
inline ::std::string* Snippet::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Snippet.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Snippet::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Snippet.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Snippet::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Snippet.title)
}

// optional string snippet = 3;
inline bool Snippet::has_snippet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Snippet::set_has_snippet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Snippet::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Snippet::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snippet();
}
inline const ::std::string& Snippet::snippet() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.Snippet.snippet)
  return snippet_.GetNoArena();
}
inline void Snippet::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.Snippet.snippet)
}
#if LANG_CXX11
inline void Snippet::set_snippet(::std::string&& value) {
  set_has_snippet();
  snippet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.Snippet.snippet)
}
#endif
inline void Snippet::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.Snippet.snippet)
}
inline void Snippet::set_snippet(const char* value, size_t size) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.Snippet.snippet)
}
inline ::std::string* Snippet::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.Snippet.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Snippet::release_snippet() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.Snippet.snippet)
  clear_has_snippet();
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Snippet::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.Snippet.snippet)
}

// -------------------------------------------------------------------

// SnippetSession

// repeated .ru.mail.go.webbase.SputnikRanker.Snippet snippets = 1;
inline int SnippetSession::snippets_size() const {
  return snippets_.size();
}
inline void SnippetSession::clear_snippets() {
  snippets_.Clear();
}
inline const ::ru::mail::go::webbase::SputnikRanker::Snippet& SnippetSession::snippets(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.SnippetSession.snippets)
  return snippets_.Get(index);
}
inline ::ru::mail::go::webbase::SputnikRanker::Snippet* SnippetSession::mutable_snippets(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.SnippetSession.snippets)
  return snippets_.Mutable(index);
}
inline ::ru::mail::go::webbase::SputnikRanker::Snippet* SnippetSession::add_snippets() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.SnippetSession.snippets)
  return snippets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Snippet >*
SnippetSession::mutable_snippets() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.SnippetSession.snippets)
  return &snippets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Snippet >&
SnippetSession::snippets() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.SnippetSession.snippets)
  return snippets_;
}

// -------------------------------------------------------------------

// FreshUrl

// required string url = 1;
inline bool FreshUrl::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FreshUrl::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FreshUrl::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FreshUrl::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& FreshUrl::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.FreshUrl.url)
  return url_.GetNoArena();
}
inline void FreshUrl::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.FreshUrl.url)
}
#if LANG_CXX11
inline void FreshUrl::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.FreshUrl.url)
}
#endif
inline void FreshUrl::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.FreshUrl.url)
}
inline void FreshUrl::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.FreshUrl.url)
}
inline ::std::string* FreshUrl::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.FreshUrl.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FreshUrl::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.FreshUrl.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FreshUrl::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.FreshUrl.url)
}

// -------------------------------------------------------------------

// NewsInfo

// required string query = 1;
inline bool NewsInfo::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewsInfo::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewsInfo::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewsInfo::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& NewsInfo::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.NewsInfo.query)
  return query_.GetNoArena();
}
inline void NewsInfo::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.NewsInfo.query)
}
#if LANG_CXX11
inline void NewsInfo::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.SputnikRanker.NewsInfo.query)
}
#endif
inline void NewsInfo::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.SputnikRanker.NewsInfo.query)
}
inline void NewsInfo::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.SputnikRanker.NewsInfo.query)
}
inline ::std::string* NewsInfo::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.NewsInfo.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewsInfo::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.SputnikRanker.NewsInfo.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewsInfo::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.SputnikRanker.NewsInfo.query)
}

// required uint32 reg = 2;
inline bool NewsInfo::has_reg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewsInfo::set_has_reg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewsInfo::clear_has_reg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewsInfo::clear_reg() {
  reg_ = 0u;
  clear_has_reg();
}
inline ::google::protobuf::uint32 NewsInfo::reg() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.NewsInfo.reg)
  return reg_;
}
inline void NewsInfo::set_reg(::google::protobuf::uint32 value) {
  set_has_reg();
  reg_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.NewsInfo.reg)
}

// required uint64 timestamp = 3;
inline bool NewsInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewsInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewsInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewsInfo::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 NewsInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.NewsInfo.timestamp)
  return timestamp_;
}
inline void NewsInfo::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.NewsInfo.timestamp)
}

// required uint32 show = 4;
inline bool NewsInfo::has_show() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewsInfo::set_has_show() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewsInfo::clear_has_show() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewsInfo::clear_show() {
  show_ = 0u;
  clear_has_show();
}
inline ::google::protobuf::uint32 NewsInfo::show() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.NewsInfo.show)
  return show_;
}
inline void NewsInfo::set_show(::google::protobuf::uint32 value) {
  set_has_show();
  show_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.NewsInfo.show)
}

// required uint32 show_news_mixin = 5;
inline bool NewsInfo::has_show_news_mixin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewsInfo::set_has_show_news_mixin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewsInfo::clear_has_show_news_mixin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewsInfo::clear_show_news_mixin() {
  show_news_mixin_ = 0u;
  clear_has_show_news_mixin();
}
inline ::google::protobuf::uint32 NewsInfo::show_news_mixin() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.NewsInfo.show_news_mixin)
  return show_news_mixin_;
}
inline void NewsInfo::set_show_news_mixin(::google::protobuf::uint32 value) {
  set_has_show_news_mixin();
  show_news_mixin_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.NewsInfo.show_news_mixin)
}

// required uint32 show_fresh_urls = 6;
inline bool NewsInfo::has_show_fresh_urls() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewsInfo::set_has_show_fresh_urls() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NewsInfo::clear_has_show_fresh_urls() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NewsInfo::clear_show_fresh_urls() {
  show_fresh_urls_ = 0u;
  clear_has_show_fresh_urls();
}
inline ::google::protobuf::uint32 NewsInfo::show_fresh_urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.NewsInfo.show_fresh_urls)
  return show_fresh_urls_;
}
inline void NewsInfo::set_show_fresh_urls(::google::protobuf::uint32 value) {
  set_has_show_fresh_urls();
  show_fresh_urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.NewsInfo.show_fresh_urls)
}

// repeated .ru.mail.go.webbase.SputnikRanker.FreshUrl fresh_urls = 7;
inline int NewsInfo::fresh_urls_size() const {
  return fresh_urls_.size();
}
inline void NewsInfo::clear_fresh_urls() {
  fresh_urls_.Clear();
}
inline const ::ru::mail::go::webbase::SputnikRanker::FreshUrl& NewsInfo::fresh_urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.NewsInfo.fresh_urls)
  return fresh_urls_.Get(index);
}
inline ::ru::mail::go::webbase::SputnikRanker::FreshUrl* NewsInfo::mutable_fresh_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.SputnikRanker.NewsInfo.fresh_urls)
  return fresh_urls_.Mutable(index);
}
inline ::ru::mail::go::webbase::SputnikRanker::FreshUrl* NewsInfo::add_fresh_urls() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.SputnikRanker.NewsInfo.fresh_urls)
  return fresh_urls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::FreshUrl >*
NewsInfo::mutable_fresh_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.SputnikRanker.NewsInfo.fresh_urls)
  return &fresh_urls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::FreshUrl >&
NewsInfo::fresh_urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.SputnikRanker.NewsInfo.fresh_urls)
  return fresh_urls_;
}

// optional uint32 total_fresh_urls = 8;
inline bool NewsInfo::has_total_fresh_urls() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NewsInfo::set_has_total_fresh_urls() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NewsInfo::clear_has_total_fresh_urls() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NewsInfo::clear_total_fresh_urls() {
  total_fresh_urls_ = 0u;
  clear_has_total_fresh_urls();
}
inline ::google::protobuf::uint32 NewsInfo::total_fresh_urls() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.SputnikRanker.NewsInfo.total_fresh_urls)
  return total_fresh_urls_;
}
inline void NewsInfo::set_total_fresh_urls(::google::protobuf::uint32 value) {
  set_has_total_fresh_urls();
  total_fresh_urls_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.SputnikRanker.NewsInfo.total_fresh_urls)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace SputnikRanker
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus>() {
  return ::ru::mail::go::webbase::SputnikRanker::Redirect_UrlStatus_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::SputnikRanker::Redirect_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::SputnikRanker::Redirect_Type>() {
  return ::ru::mail::go::webbase::SputnikRanker::Redirect_Type_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::SputnikRanker::ImageBody_Source> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::SputnikRanker::ImageBody_Source>() {
  return ::ru::mail::go::webbase::SputnikRanker::ImageBody_Source_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type>() {
  return ::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sputnik_5flogs_2eproto__INCLUDED
