// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stage0_cache.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stage0_cache.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class BackendIdDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BackendId>
     _instance;
} _BackendId_default_instance_;
class click_rankDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<click_rank>
     _instance;
} _click_rank_default_instance_;
class serp_quality_featuresDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<serp_quality_features>
     _instance;
} _serp_quality_features_default_instance_;
class stage0DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<stage0>
     _instance;
} _stage0_default_instance_;
class resultHdrDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<resultHdr>
     _instance;
} _resultHdr_default_instance_;
class DocInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocInfo>
     _instance;
} _DocInfo_default_instance_;
class Stage0InfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Stage0Info>
     _instance;
} _Stage0Info_default_instance_;

namespace protobuf_stage0_5fcache_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendId, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendId, backend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendId, replica_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(click_rank, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(click_rank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(click_rank, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(click_rank, attractive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(click_rank, satisfaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(click_rank, sessions_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serp_quality_features, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serp_quality_features, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serp_quality_features, pair_passages_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serp_quality_features, text_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serp_quality_features, sq_model_rank_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, docid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, crc1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, crc2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, crc3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, snip_hl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, rank_trace_feat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, special_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, required_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, is_navig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, parsed_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, domain_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, is_mergable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, cr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, sfq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, crc5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, doc_trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, could_be_a_group_leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, full_domain_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, features_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage0, req_pos_mergable_),
  6,
  5,
  7,
  8,
  9,
  0,
  1,
  10,
  11,
  13,
  14,
  12,
  15,
  3,
  4,
  18,
  2,
  16,
  17,
  19,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, error_mesage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, ndocs_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, ndocs_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, m3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, m4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, m5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, last_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, max_docs_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, sm_through_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, searcher_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, microbases_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, version_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, experiment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, experiment_interleaving_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, experiment_essr_source_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, trait_holder_and_webstat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, domain_group_ooo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultHdr, backends_quality_),
  8,
  0,
  9,
  12,
  10,
  11,
  14,
  13,
  15,
  1,
  2,
  3,
  16,
  17,
  4,
  5,
  6,
  18,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocInfo, backend_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocInfo, hdr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocInfo, docs_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage0Info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage0Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage0Info, docs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage0Info, backends_list_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage0Info, sm_revision_hash_),
  ~0u,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(BackendId)},
  { 9, 18, sizeof(click_rank)},
  { 22, 30, sizeof(serp_quality_features)},
  { 33, 59, sizeof(stage0)},
  { 80, 104, sizeof(resultHdr)},
  { 123, 131, sizeof(DocInfo)},
  { 134, 142, sizeof(Stage0Info)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackendId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_click_rank_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_serp_quality_features_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_stage0_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_resultHdr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Stage0Info_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "stage0_cache.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::gogo::sr::protobuf_search_5fresult_2eproto::InitDefaults();
  ::backends_quality::pb::protobuf_backends_5fquality_2eproto::InitDefaults();
  _BackendId_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BackendId_default_instance_);_click_rank_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_click_rank_default_instance_);_serp_quality_features_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_serp_quality_features_default_instance_);_stage0_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_stage0_default_instance_);_resultHdr_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_resultHdr_default_instance_);_DocInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocInfo_default_instance_);_Stage0Info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Stage0Info_default_instance_);_stage0_default_instance_._instance.get_mutable()->cr_ = const_cast< ::click_rank*>(
      ::click_rank::internal_default_instance());
  _stage0_default_instance_._instance.get_mutable()->sfq_ = const_cast< ::serp_quality_features*>(
      ::serp_quality_features::internal_default_instance());
  _resultHdr_default_instance_._instance.get_mutable()->backends_quality_ = const_cast< ::backends_quality::pb::BackendsQuality*>(
      ::backends_quality::pb::BackendsQuality::internal_default_instance());
  _DocInfo_default_instance_._instance.get_mutable()->backend_id_ = const_cast< ::BackendId*>(
      ::BackendId::internal_default_instance());
  _DocInfo_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::resultHdr*>(
      ::resultHdr::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022stage0_cache.proto\032\023search_result.prot"
      "o\032\026backends_quality.proto\"-\n\tBackendId\022\017"
      "\n\007backend\030\001 \002(\021\022\017\n\007replica\030\002 \002(\r\"V\n\nclic"
      "k_rank\022\014\n\004rank\030\001 \002(\001\022\022\n\nattractive\030\002 \002(\001"
      "\022\024\n\014satisfaction\030\003 \002(\001\022\020\n\010sessions\030\004 \002(\001"
      "\"]\n\025serp_quality_features\022\032\n\022pair_passag"
      "es_rank\030\001 \002(\002\022\021\n\ttext_rank\030\002 \002(\002\022\025\n\rsq_m"
      "odel_rank\030\003 \001(\002\"\347\003\n\006stage0\022\r\n\005docid\030\001 \002("
      "\r\022\016\n\006weight\030\002 \002(\001\022\014\n\004crc1\030\003 \002(\r\022\014\n\004crc2\030"
      "\004 \002(\r\022\014\n\004crc3\030\005 \002(\r\022\017\n\007snip_hl\030\006 \002(\t\022\027\n\017"
      "rank_trace_feat\030\007 \002(\t\022\023\n\013special_crc\030\010 \001"
      "(\004\022\031\n\021required_position\030\t \001(\r\022\020\n\010is_navi"
      "g\030\n \002(\010\022\026\n\016parsed_content\030\013 \002(\010\0220\n\014domai"
      "n_group\030\014 \002(\0162\032.gogo.sr.domain_group_typ"
      "e\022\023\n\013is_mergable\030\r \002(\010\022\027\n\002cr\030\016 \002(\0132\013.cli"
      "ck_rank\022#\n\003sfq\030\017 \002(\0132\026.serp_quality_feat"
      "ures\022\014\n\004crc5\030\020 \001(\004\022\021\n\tdoc_trace\030\021 \002(\t\022\037\n"
      "\027could_be_a_group_leader\030\022 \001(\010\022\030\n\020full_d"
      "omain_hash\030\023 \001(\007\022\025\n\rfeatures_hash\030\024 \001(\r\022"
      "\030\n\020req_pos_mergable\030\025 \001(\010\"\341\003\n\tresultHdr\022"
      "\r\n\005error\030\001 \002(\r\022\024\n\014error_mesage\030\002 \002(\t\022\024\n\014"
      "ndocs_groups\030\003 \002(\r\022\023\n\013ndocs_total\030\004 \002(\r\022"
      "\n\n\002m3\030\005 \002(\004\022\n\n\002m4\030\006 \002(\004\022\n\n\002m5\030\007 \002(\004\022\022\n\nl"
      "ast_index\030\010 \002(\r\022\026\n\016max_docs_count\030\t \002(\r\022"
      "\022\n\nsm_through\030\n \002(\t\022\030\n\020searcher_version\030"
      "\013 \002(\t\022\022\n\nmicrobases\030\014 \002(\t\022\024\n\014version_has"
      "h\030\r \002(\r\022\025\n\rexperiment_id\030\016 \002(\r\022$\n\034experi"
      "ment_interleaving_type\030\017 \002(\t\022#\n\033experime"
      "nt_essr_source_type\030\020 \002(\t\022 \n\030trait_holde"
      "r_and_webstat\030\021 \002(\014\022\030\n\020domain_group_ooo\030"
      "\022 \001(\010\022>\n\020backends_quality\030\023 \001(\0132$.backen"
      "ds_quality.pb.BackendsQuality\"Y\n\007DocInfo"
      "\022\036\n\nbackend_id\030\001 \002(\0132\n.BackendId\022\027\n\003hdr\030"
      "\002 \002(\0132\n.resultHdr\022\025\n\004docs\030\003 \003(\0132\007.stage0"
      "\"Z\n\nStage0Info\022\026\n\004docs\030\001 \003(\0132\010.DocInfo\022\032"
      "\n\022backends_list_hash\030\002 \001(\r\022\030\n\020sm_revisio"
      "n_hash\030\003 \001(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1452);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stage0_cache.proto", &protobuf_RegisterTypes);
  ::gogo::sr::protobuf_search_5fresult_2eproto::AddDescriptors();
  ::backends_quality::pb::protobuf_backends_5fquality_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_stage0_5fcache_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackendId::kBackendFieldNumber;
const int BackendId::kReplicaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackendId::BackendId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stage0_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:BackendId)
}
BackendId::BackendId(const BackendId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&backend_, &from.backend_,
    static_cast<size_t>(reinterpret_cast<char*>(&replica_) -
    reinterpret_cast<char*>(&backend_)) + sizeof(replica_));
  // @@protoc_insertion_point(copy_constructor:BackendId)
}

void BackendId::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&backend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replica_) -
      reinterpret_cast<char*>(&backend_)) + sizeof(replica_));
}

BackendId::~BackendId() {
  // @@protoc_insertion_point(destructor:BackendId)
  SharedDtor();
}

void BackendId::SharedDtor() {
}

void BackendId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackendId::descriptor() {
  protobuf_stage0_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stage0_5fcache_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackendId& BackendId::default_instance() {
  protobuf_stage0_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackendId* BackendId::New(::google::protobuf::Arena* arena) const {
  BackendId* n = new BackendId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackendId::Clear() {
// @@protoc_insertion_point(message_clear_start:BackendId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&backend_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replica_) -
        reinterpret_cast<char*>(&backend_)) + sizeof(replica_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackendId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BackendId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 backend = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_backend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &backend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 replica = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_replica();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replica_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BackendId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BackendId)
  return false;
#undef DO_
}

void BackendId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BackendId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 backend = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->backend(), output);
  }

  // required uint32 replica = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->replica(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BackendId)
}

::google::protobuf::uint8* BackendId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BackendId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 backend = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->backend(), target);
  }

  // required uint32 replica = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->replica(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BackendId)
  return target;
}

size_t BackendId::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:BackendId)
  size_t total_size = 0;

  if (has_backend()) {
    // required sint32 backend = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->backend());
  }

  if (has_replica()) {
    // required uint32 replica = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->replica());
  }

  return total_size;
}
size_t BackendId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BackendId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required sint32 backend = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->backend());

    // required uint32 replica = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->replica());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackendId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BackendId)
  GOOGLE_DCHECK_NE(&from, this);
  const BackendId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackendId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BackendId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BackendId)
    MergeFrom(*source);
  }
}

void BackendId::MergeFrom(const BackendId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BackendId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      backend_ = from.backend_;
    }
    if (cached_has_bits & 0x00000002u) {
      replica_ = from.replica_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackendId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BackendId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackendId::CopyFrom(const BackendId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BackendId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackendId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void BackendId::Swap(BackendId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackendId::InternalSwap(BackendId* other) {
  using std::swap;
  swap(backend_, other->backend_);
  swap(replica_, other->replica_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackendId::GetMetadata() const {
  protobuf_stage0_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stage0_5fcache_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackendId

// required sint32 backend = 1;
bool BackendId::has_backend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BackendId::set_has_backend() {
  _has_bits_[0] |= 0x00000001u;
}
void BackendId::clear_has_backend() {
  _has_bits_[0] &= ~0x00000001u;
}
void BackendId::clear_backend() {
  backend_ = 0;
  clear_has_backend();
}
::google::protobuf::int32 BackendId::backend() const {
  // @@protoc_insertion_point(field_get:BackendId.backend)
  return backend_;
}
void BackendId::set_backend(::google::protobuf::int32 value) {
  set_has_backend();
  backend_ = value;
  // @@protoc_insertion_point(field_set:BackendId.backend)
}

// required uint32 replica = 2;
bool BackendId::has_replica() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BackendId::set_has_replica() {
  _has_bits_[0] |= 0x00000002u;
}
void BackendId::clear_has_replica() {
  _has_bits_[0] &= ~0x00000002u;
}
void BackendId::clear_replica() {
  replica_ = 0u;
  clear_has_replica();
}
::google::protobuf::uint32 BackendId::replica() const {
  // @@protoc_insertion_point(field_get:BackendId.replica)
  return replica_;
}
void BackendId::set_replica(::google::protobuf::uint32 value) {
  set_has_replica();
  replica_ = value;
  // @@protoc_insertion_point(field_set:BackendId.replica)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int click_rank::kRankFieldNumber;
const int click_rank::kAttractiveFieldNumber;
const int click_rank::kSatisfactionFieldNumber;
const int click_rank::kSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

click_rank::click_rank()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stage0_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:click_rank)
}
click_rank::click_rank(const click_rank& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&sessions_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(sessions_));
  // @@protoc_insertion_point(copy_constructor:click_rank)
}

void click_rank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessions_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(sessions_));
}

click_rank::~click_rank() {
  // @@protoc_insertion_point(destructor:click_rank)
  SharedDtor();
}

void click_rank::SharedDtor() {
}

void click_rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* click_rank::descriptor() {
  protobuf_stage0_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stage0_5fcache_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const click_rank& click_rank::default_instance() {
  protobuf_stage0_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

click_rank* click_rank::New(::google::protobuf::Arena* arena) const {
  click_rank* n = new click_rank;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void click_rank::Clear() {
// @@protoc_insertion_point(message_clear_start:click_rank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sessions_) -
        reinterpret_cast<char*>(&rank_)) + sizeof(sessions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool click_rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:click_rank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double rank = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double attractive = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_attractive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attractive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double satisfaction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_satisfaction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &satisfaction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double sessions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:click_rank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:click_rank)
  return false;
#undef DO_
}

void click_rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:click_rank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double rank = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->rank(), output);
  }

  // required double attractive = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->attractive(), output);
  }

  // required double satisfaction = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->satisfaction(), output);
  }

  // required double sessions = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sessions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:click_rank)
}

::google::protobuf::uint8* click_rank::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:click_rank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double rank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->rank(), target);
  }

  // required double attractive = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->attractive(), target);
  }

  // required double satisfaction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->satisfaction(), target);
  }

  // required double sessions = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sessions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:click_rank)
  return target;
}

size_t click_rank::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:click_rank)
  size_t total_size = 0;

  if (has_rank()) {
    // required double rank = 1;
    total_size += 1 + 8;
  }

  if (has_attractive()) {
    // required double attractive = 2;
    total_size += 1 + 8;
  }

  if (has_satisfaction()) {
    // required double satisfaction = 3;
    total_size += 1 + 8;
  }

  if (has_sessions()) {
    // required double sessions = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t click_rank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:click_rank)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double rank = 1;
    total_size += 1 + 8;

    // required double attractive = 2;
    total_size += 1 + 8;

    // required double satisfaction = 3;
    total_size += 1 + 8;

    // required double sessions = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void click_rank::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:click_rank)
  GOOGLE_DCHECK_NE(&from, this);
  const click_rank* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const click_rank>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:click_rank)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:click_rank)
    MergeFrom(*source);
  }
}

void click_rank::MergeFrom(const click_rank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:click_rank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000002u) {
      attractive_ = from.attractive_;
    }
    if (cached_has_bits & 0x00000004u) {
      satisfaction_ = from.satisfaction_;
    }
    if (cached_has_bits & 0x00000008u) {
      sessions_ = from.sessions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void click_rank::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:click_rank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void click_rank::CopyFrom(const click_rank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:click_rank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool click_rank::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void click_rank::Swap(click_rank* other) {
  if (other == this) return;
  InternalSwap(other);
}
void click_rank::InternalSwap(click_rank* other) {
  using std::swap;
  swap(rank_, other->rank_);
  swap(attractive_, other->attractive_);
  swap(satisfaction_, other->satisfaction_);
  swap(sessions_, other->sessions_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata click_rank::GetMetadata() const {
  protobuf_stage0_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stage0_5fcache_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// click_rank

// required double rank = 1;
bool click_rank::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void click_rank::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
void click_rank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
void click_rank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
double click_rank::rank() const {
  // @@protoc_insertion_point(field_get:click_rank.rank)
  return rank_;
}
void click_rank::set_rank(double value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:click_rank.rank)
}

// required double attractive = 2;
bool click_rank::has_attractive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void click_rank::set_has_attractive() {
  _has_bits_[0] |= 0x00000002u;
}
void click_rank::clear_has_attractive() {
  _has_bits_[0] &= ~0x00000002u;
}
void click_rank::clear_attractive() {
  attractive_ = 0;
  clear_has_attractive();
}
double click_rank::attractive() const {
  // @@protoc_insertion_point(field_get:click_rank.attractive)
  return attractive_;
}
void click_rank::set_attractive(double value) {
  set_has_attractive();
  attractive_ = value;
  // @@protoc_insertion_point(field_set:click_rank.attractive)
}

// required double satisfaction = 3;
bool click_rank::has_satisfaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void click_rank::set_has_satisfaction() {
  _has_bits_[0] |= 0x00000004u;
}
void click_rank::clear_has_satisfaction() {
  _has_bits_[0] &= ~0x00000004u;
}
void click_rank::clear_satisfaction() {
  satisfaction_ = 0;
  clear_has_satisfaction();
}
double click_rank::satisfaction() const {
  // @@protoc_insertion_point(field_get:click_rank.satisfaction)
  return satisfaction_;
}
void click_rank::set_satisfaction(double value) {
  set_has_satisfaction();
  satisfaction_ = value;
  // @@protoc_insertion_point(field_set:click_rank.satisfaction)
}

// required double sessions = 4;
bool click_rank::has_sessions() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void click_rank::set_has_sessions() {
  _has_bits_[0] |= 0x00000008u;
}
void click_rank::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000008u;
}
void click_rank::clear_sessions() {
  sessions_ = 0;
  clear_has_sessions();
}
double click_rank::sessions() const {
  // @@protoc_insertion_point(field_get:click_rank.sessions)
  return sessions_;
}
void click_rank::set_sessions(double value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:click_rank.sessions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int serp_quality_features::kPairPassagesRankFieldNumber;
const int serp_quality_features::kTextRankFieldNumber;
const int serp_quality_features::kSqModelRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

serp_quality_features::serp_quality_features()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stage0_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:serp_quality_features)
}
serp_quality_features::serp_quality_features(const serp_quality_features& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pair_passages_rank_, &from.pair_passages_rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&sq_model_rank_) -
    reinterpret_cast<char*>(&pair_passages_rank_)) + sizeof(sq_model_rank_));
  // @@protoc_insertion_point(copy_constructor:serp_quality_features)
}

void serp_quality_features::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pair_passages_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sq_model_rank_) -
      reinterpret_cast<char*>(&pair_passages_rank_)) + sizeof(sq_model_rank_));
}

serp_quality_features::~serp_quality_features() {
  // @@protoc_insertion_point(destructor:serp_quality_features)
  SharedDtor();
}

void serp_quality_features::SharedDtor() {
}

void serp_quality_features::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* serp_quality_features::descriptor() {
  protobuf_stage0_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stage0_5fcache_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const serp_quality_features& serp_quality_features::default_instance() {
  protobuf_stage0_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

serp_quality_features* serp_quality_features::New(::google::protobuf::Arena* arena) const {
  serp_quality_features* n = new serp_quality_features;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void serp_quality_features::Clear() {
// @@protoc_insertion_point(message_clear_start:serp_quality_features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&pair_passages_rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sq_model_rank_) -
        reinterpret_cast<char*>(&pair_passages_rank_)) + sizeof(sq_model_rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool serp_quality_features::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serp_quality_features)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float pair_passages_rank = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_pair_passages_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pair_passages_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float text_rank = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_text_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &text_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sq_model_rank = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_sq_model_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sq_model_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serp_quality_features)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serp_quality_features)
  return false;
#undef DO_
}

void serp_quality_features::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serp_quality_features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float pair_passages_rank = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pair_passages_rank(), output);
  }

  // required float text_rank = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->text_rank(), output);
  }

  // optional float sq_model_rank = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sq_model_rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serp_quality_features)
}

::google::protobuf::uint8* serp_quality_features::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serp_quality_features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float pair_passages_rank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pair_passages_rank(), target);
  }

  // required float text_rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->text_rank(), target);
  }

  // optional float sq_model_rank = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sq_model_rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serp_quality_features)
  return target;
}

size_t serp_quality_features::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:serp_quality_features)
  size_t total_size = 0;

  if (has_pair_passages_rank()) {
    // required float pair_passages_rank = 1;
    total_size += 1 + 4;
  }

  if (has_text_rank()) {
    // required float text_rank = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t serp_quality_features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serp_quality_features)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float pair_passages_rank = 1;
    total_size += 1 + 4;

    // required float text_rank = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional float sq_model_rank = 3;
  if (has_sq_model_rank()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void serp_quality_features::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serp_quality_features)
  GOOGLE_DCHECK_NE(&from, this);
  const serp_quality_features* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const serp_quality_features>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serp_quality_features)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serp_quality_features)
    MergeFrom(*source);
  }
}

void serp_quality_features::MergeFrom(const serp_quality_features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serp_quality_features)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      pair_passages_rank_ = from.pair_passages_rank_;
    }
    if (cached_has_bits & 0x00000002u) {
      text_rank_ = from.text_rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      sq_model_rank_ = from.sq_model_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void serp_quality_features::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serp_quality_features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serp_quality_features::CopyFrom(const serp_quality_features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serp_quality_features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serp_quality_features::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void serp_quality_features::Swap(serp_quality_features* other) {
  if (other == this) return;
  InternalSwap(other);
}
void serp_quality_features::InternalSwap(serp_quality_features* other) {
  using std::swap;
  swap(pair_passages_rank_, other->pair_passages_rank_);
  swap(text_rank_, other->text_rank_);
  swap(sq_model_rank_, other->sq_model_rank_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata serp_quality_features::GetMetadata() const {
  protobuf_stage0_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stage0_5fcache_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// serp_quality_features

// required float pair_passages_rank = 1;
bool serp_quality_features::has_pair_passages_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void serp_quality_features::set_has_pair_passages_rank() {
  _has_bits_[0] |= 0x00000001u;
}
void serp_quality_features::clear_has_pair_passages_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
void serp_quality_features::clear_pair_passages_rank() {
  pair_passages_rank_ = 0;
  clear_has_pair_passages_rank();
}
float serp_quality_features::pair_passages_rank() const {
  // @@protoc_insertion_point(field_get:serp_quality_features.pair_passages_rank)
  return pair_passages_rank_;
}
void serp_quality_features::set_pair_passages_rank(float value) {
  set_has_pair_passages_rank();
  pair_passages_rank_ = value;
  // @@protoc_insertion_point(field_set:serp_quality_features.pair_passages_rank)
}

// required float text_rank = 2;
bool serp_quality_features::has_text_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void serp_quality_features::set_has_text_rank() {
  _has_bits_[0] |= 0x00000002u;
}
void serp_quality_features::clear_has_text_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
void serp_quality_features::clear_text_rank() {
  text_rank_ = 0;
  clear_has_text_rank();
}
float serp_quality_features::text_rank() const {
  // @@protoc_insertion_point(field_get:serp_quality_features.text_rank)
  return text_rank_;
}
void serp_quality_features::set_text_rank(float value) {
  set_has_text_rank();
  text_rank_ = value;
  // @@protoc_insertion_point(field_set:serp_quality_features.text_rank)
}

// optional float sq_model_rank = 3;
bool serp_quality_features::has_sq_model_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void serp_quality_features::set_has_sq_model_rank() {
  _has_bits_[0] |= 0x00000004u;
}
void serp_quality_features::clear_has_sq_model_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
void serp_quality_features::clear_sq_model_rank() {
  sq_model_rank_ = 0;
  clear_has_sq_model_rank();
}
float serp_quality_features::sq_model_rank() const {
  // @@protoc_insertion_point(field_get:serp_quality_features.sq_model_rank)
  return sq_model_rank_;
}
void serp_quality_features::set_sq_model_rank(float value) {
  set_has_sq_model_rank();
  sq_model_rank_ = value;
  // @@protoc_insertion_point(field_set:serp_quality_features.sq_model_rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int stage0::kDocidFieldNumber;
const int stage0::kWeightFieldNumber;
const int stage0::kCrc1FieldNumber;
const int stage0::kCrc2FieldNumber;
const int stage0::kCrc3FieldNumber;
const int stage0::kSnipHlFieldNumber;
const int stage0::kRankTraceFeatFieldNumber;
const int stage0::kSpecialCrcFieldNumber;
const int stage0::kRequiredPositionFieldNumber;
const int stage0::kIsNavigFieldNumber;
const int stage0::kParsedContentFieldNumber;
const int stage0::kDomainGroupFieldNumber;
const int stage0::kIsMergableFieldNumber;
const int stage0::kCrFieldNumber;
const int stage0::kSfqFieldNumber;
const int stage0::kCrc5FieldNumber;
const int stage0::kDocTraceFieldNumber;
const int stage0::kCouldBeAGroupLeaderFieldNumber;
const int stage0::kFullDomainHashFieldNumber;
const int stage0::kFeaturesHashFieldNumber;
const int stage0::kReqPosMergableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

stage0::stage0()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stage0_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stage0)
}
stage0::stage0(const stage0& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snip_hl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_snip_hl()) {
    snip_hl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snip_hl_);
  }
  rank_trace_feat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rank_trace_feat()) {
    rank_trace_feat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rank_trace_feat_);
  }
  doc_trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_doc_trace()) {
    doc_trace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_trace_);
  }
  if (from.has_cr()) {
    cr_ = new ::click_rank(*from.cr_);
  } else {
    cr_ = NULL;
  }
  if (from.has_sfq()) {
    sfq_ = new ::serp_quality_features(*from.sfq_);
  } else {
    sfq_ = NULL;
  }
  ::memcpy(&weight_, &from.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_pos_mergable_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(req_pos_mergable_));
  // @@protoc_insertion_point(copy_constructor:stage0)
}

void stage0::SharedCtor() {
  _cached_size_ = 0;
  snip_hl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rank_trace_feat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_pos_mergable_) -
      reinterpret_cast<char*>(&cr_)) + sizeof(req_pos_mergable_));
}

stage0::~stage0() {
  // @@protoc_insertion_point(destructor:stage0)
  SharedDtor();
}

void stage0::SharedDtor() {
  snip_hl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rank_trace_feat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_trace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cr_;
  if (this != internal_default_instance()) delete sfq_;
}

void stage0::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stage0::descriptor() {
  protobuf_stage0_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stage0_5fcache_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const stage0& stage0::default_instance() {
  protobuf_stage0_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

stage0* stage0::New(::google::protobuf::Arena* arena) const {
  stage0* n = new stage0;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void stage0::Clear() {
// @@protoc_insertion_point(message_clear_start:stage0)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!snip_hl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*snip_hl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!rank_trace_feat_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rank_trace_feat_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!doc_trace_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*doc_trace_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cr_ != NULL);
      cr_->::click_rank::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sfq_ != NULL);
      sfq_->::serp_quality_features::Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crc1_) -
        reinterpret_cast<char*>(&weight_)) + sizeof(crc1_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&crc2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_mergable_) -
        reinterpret_cast<char*>(&crc2_)) + sizeof(is_mergable_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&could_be_a_group_leader_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&req_pos_mergable_) -
        reinterpret_cast<char*>(&could_be_a_group_leader_)) + sizeof(req_pos_mergable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool stage0::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stage0)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 docid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_docid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &docid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 crc1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_crc1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 crc2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_crc2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 crc3 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_crc3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string snip_hl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snip_hl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snip_hl().data(), static_cast<int>(this->snip_hl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stage0.snip_hl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string rank_trace_feat = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rank_trace_feat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rank_trace_feat().data(), static_cast<int>(this->rank_trace_feat().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stage0.rank_trace_feat");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 special_crc = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_special_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &special_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 required_position = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_required_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &required_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_navig = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_is_navig();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_navig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool parsed_content = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_parsed_content();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parsed_content_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gogo.sr.domain_group_type domain_group = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::sr::domain_group_type_IsValid(value)) {
            set_domain_group(static_cast< ::gogo::sr::domain_group_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_mergable = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_is_mergable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_mergable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .click_rank cr = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .serp_quality_features sfq = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sfq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 crc5 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_crc5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &crc5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string doc_trace = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_trace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->doc_trace().data(), static_cast<int>(this->doc_trace().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stage0.doc_trace");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool could_be_a_group_leader = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_could_be_a_group_leader();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &could_be_a_group_leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 full_domain_hash = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_full_domain_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &full_domain_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 features_hash = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_features_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &features_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool req_pos_mergable = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_req_pos_mergable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &req_pos_mergable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stage0)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stage0)
  return false;
#undef DO_
}

void stage0::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stage0)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 docid = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->docid(), output);
  }

  // required double weight = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->weight(), output);
  }

  // required uint32 crc1 = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crc1(), output);
  }

  // required uint32 crc2 = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crc2(), output);
  }

  // required uint32 crc3 = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crc3(), output);
  }

  // required string snip_hl = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snip_hl().data(), static_cast<int>(this->snip_hl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage0.snip_hl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->snip_hl(), output);
  }

  // required string rank_trace_feat = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rank_trace_feat().data(), static_cast<int>(this->rank_trace_feat().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage0.rank_trace_feat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->rank_trace_feat(), output);
  }

  // optional uint64 special_crc = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->special_crc(), output);
  }

  // optional uint32 required_position = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->required_position(), output);
  }

  // required bool is_navig = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_navig(), output);
  }

  // required bool parsed_content = 11;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->parsed_content(), output);
  }

  // required .gogo.sr.domain_group_type domain_group = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->domain_group(), output);
  }

  // required bool is_mergable = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_mergable(), output);
  }

  // required .click_rank cr = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->cr_, output);
  }

  // required .serp_quality_features sfq = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->sfq_, output);
  }

  // optional uint64 crc5 = 16;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->crc5(), output);
  }

  // required string doc_trace = 17;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->doc_trace().data(), static_cast<int>(this->doc_trace().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage0.doc_trace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->doc_trace(), output);
  }

  // optional bool could_be_a_group_leader = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->could_be_a_group_leader(), output);
  }

  // optional fixed32 full_domain_hash = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(19, this->full_domain_hash(), output);
  }

  // optional uint32 features_hash = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->features_hash(), output);
  }

  // optional bool req_pos_mergable = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->req_pos_mergable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stage0)
}

::google::protobuf::uint8* stage0::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stage0)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 docid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->docid(), target);
  }

  // required double weight = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->weight(), target);
  }

  // required uint32 crc1 = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crc1(), target);
  }

  // required uint32 crc2 = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crc2(), target);
  }

  // required uint32 crc3 = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crc3(), target);
  }

  // required string snip_hl = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snip_hl().data(), static_cast<int>(this->snip_hl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage0.snip_hl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->snip_hl(), target);
  }

  // required string rank_trace_feat = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rank_trace_feat().data(), static_cast<int>(this->rank_trace_feat().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage0.rank_trace_feat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rank_trace_feat(), target);
  }

  // optional uint64 special_crc = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->special_crc(), target);
  }

  // optional uint32 required_position = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->required_position(), target);
  }

  // required bool is_navig = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_navig(), target);
  }

  // required bool parsed_content = 11;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->parsed_content(), target);
  }

  // required .gogo.sr.domain_group_type domain_group = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->domain_group(), target);
  }

  // required bool is_mergable = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_mergable(), target);
  }

  // required .click_rank cr = 14;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->cr_, deterministic, target);
  }

  // required .serp_quality_features sfq = 15;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->sfq_, deterministic, target);
  }

  // optional uint64 crc5 = 16;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->crc5(), target);
  }

  // required string doc_trace = 17;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->doc_trace().data(), static_cast<int>(this->doc_trace().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage0.doc_trace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->doc_trace(), target);
  }

  // optional bool could_be_a_group_leader = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->could_be_a_group_leader(), target);
  }

  // optional fixed32 full_domain_hash = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(19, this->full_domain_hash(), target);
  }

  // optional uint32 features_hash = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->features_hash(), target);
  }

  // optional bool req_pos_mergable = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->req_pos_mergable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stage0)
  return target;
}

size_t stage0::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:stage0)
  size_t total_size = 0;

  if (has_snip_hl()) {
    // required string snip_hl = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snip_hl());
  }

  if (has_rank_trace_feat()) {
    // required string rank_trace_feat = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rank_trace_feat());
  }

  if (has_doc_trace()) {
    // required string doc_trace = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->doc_trace());
  }

  if (has_cr()) {
    // required .click_rank cr = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cr_);
  }

  if (has_sfq()) {
    // required .serp_quality_features sfq = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sfq_);
  }

  if (has_weight()) {
    // required double weight = 2;
    total_size += 1 + 8;
  }

  if (has_docid()) {
    // required uint32 docid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->docid());
  }

  if (has_crc1()) {
    // required uint32 crc1 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->crc1());
  }

  if (has_crc2()) {
    // required uint32 crc2 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->crc2());
  }

  if (has_crc3()) {
    // required uint32 crc3 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->crc3());
  }

  if (has_domain_group()) {
    // required .gogo.sr.domain_group_type domain_group = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->domain_group());
  }

  if (has_is_navig()) {
    // required bool is_navig = 10;
    total_size += 1 + 1;
  }

  if (has_parsed_content()) {
    // required bool parsed_content = 11;
    total_size += 1 + 1;
  }

  if (has_is_mergable()) {
    // required bool is_mergable = 13;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t stage0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stage0)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000f3ff) ^ 0x0000f3ff) == 0) {  // All required fields are present.
    // required string snip_hl = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snip_hl());

    // required string rank_trace_feat = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rank_trace_feat());

    // required string doc_trace = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->doc_trace());

    // required .click_rank cr = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cr_);

    // required .serp_quality_features sfq = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sfq_);

    // required double weight = 2;
    total_size += 1 + 8;

    // required uint32 docid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->docid());

    // required uint32 crc1 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->crc1());

    // required uint32 crc2 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->crc2());

    // required uint32 crc3 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->crc3());

    // required .gogo.sr.domain_group_type domain_group = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->domain_group());

    // required bool is_navig = 10;
    total_size += 1 + 1;

    // required bool parsed_content = 11;
    total_size += 1 + 1;

    // required bool is_mergable = 13;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[8 / 32] & 3072u) {
    // optional uint64 special_crc = 8;
    if (has_special_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->special_crc());
    }

    // optional uint32 required_position = 9;
    if (has_required_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->required_position());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional bool could_be_a_group_leader = 18;
    if (has_could_be_a_group_leader()) {
      total_size += 2 + 1;
    }

    // optional fixed32 full_domain_hash = 19;
    if (has_full_domain_hash()) {
      total_size += 2 + 4;
    }

    // optional uint64 crc5 = 16;
    if (has_crc5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->crc5());
    }

    // optional uint32 features_hash = 20;
    if (has_features_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->features_hash());
    }

    // optional bool req_pos_mergable = 21;
    if (has_req_pos_mergable()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stage0::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stage0)
  GOOGLE_DCHECK_NE(&from, this);
  const stage0* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const stage0>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stage0)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stage0)
    MergeFrom(*source);
  }
}

void stage0::MergeFrom(const stage0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stage0)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_snip_hl();
      snip_hl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snip_hl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_rank_trace_feat();
      rank_trace_feat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rank_trace_feat_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_doc_trace();
      doc_trace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_trace_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_cr()->::click_rank::MergeFrom(from.cr());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_sfq()->::serp_quality_features::MergeFrom(from.sfq());
    }
    if (cached_has_bits & 0x00000020u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      docid_ = from.docid_;
    }
    if (cached_has_bits & 0x00000080u) {
      crc1_ = from.crc1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      crc2_ = from.crc2_;
    }
    if (cached_has_bits & 0x00000200u) {
      crc3_ = from.crc3_;
    }
    if (cached_has_bits & 0x00000400u) {
      special_crc_ = from.special_crc_;
    }
    if (cached_has_bits & 0x00000800u) {
      required_position_ = from.required_position_;
    }
    if (cached_has_bits & 0x00001000u) {
      domain_group_ = from.domain_group_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_navig_ = from.is_navig_;
    }
    if (cached_has_bits & 0x00004000u) {
      parsed_content_ = from.parsed_content_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_mergable_ = from.is_mergable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      could_be_a_group_leader_ = from.could_be_a_group_leader_;
    }
    if (cached_has_bits & 0x00020000u) {
      full_domain_hash_ = from.full_domain_hash_;
    }
    if (cached_has_bits & 0x00040000u) {
      crc5_ = from.crc5_;
    }
    if (cached_has_bits & 0x00080000u) {
      features_hash_ = from.features_hash_;
    }
    if (cached_has_bits & 0x00100000u) {
      req_pos_mergable_ = from.req_pos_mergable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void stage0::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stage0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stage0::CopyFrom(const stage0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stage0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stage0::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000f3ff) != 0x0000f3ff) return false;
  if (has_cr()) {
    if (!this->cr_->IsInitialized()) return false;
  }
  if (has_sfq()) {
    if (!this->sfq_->IsInitialized()) return false;
  }
  return true;
}

void stage0::Swap(stage0* other) {
  if (other == this) return;
  InternalSwap(other);
}
void stage0::InternalSwap(stage0* other) {
  using std::swap;
  snip_hl_.Swap(&other->snip_hl_);
  rank_trace_feat_.Swap(&other->rank_trace_feat_);
  doc_trace_.Swap(&other->doc_trace_);
  swap(cr_, other->cr_);
  swap(sfq_, other->sfq_);
  swap(weight_, other->weight_);
  swap(docid_, other->docid_);
  swap(crc1_, other->crc1_);
  swap(crc2_, other->crc2_);
  swap(crc3_, other->crc3_);
  swap(special_crc_, other->special_crc_);
  swap(required_position_, other->required_position_);
  swap(domain_group_, other->domain_group_);
  swap(is_navig_, other->is_navig_);
  swap(parsed_content_, other->parsed_content_);
  swap(is_mergable_, other->is_mergable_);
  swap(could_be_a_group_leader_, other->could_be_a_group_leader_);
  swap(full_domain_hash_, other->full_domain_hash_);
  swap(crc5_, other->crc5_);
  swap(features_hash_, other->features_hash_);
  swap(req_pos_mergable_, other->req_pos_mergable_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata stage0::GetMetadata() const {
  protobuf_stage0_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stage0_5fcache_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// stage0

// required uint32 docid = 1;
bool stage0::has_docid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void stage0::set_has_docid() {
  _has_bits_[0] |= 0x00000040u;
}
void stage0::clear_has_docid() {
  _has_bits_[0] &= ~0x00000040u;
}
void stage0::clear_docid() {
  docid_ = 0u;
  clear_has_docid();
}
::google::protobuf::uint32 stage0::docid() const {
  // @@protoc_insertion_point(field_get:stage0.docid)
  return docid_;
}
void stage0::set_docid(::google::protobuf::uint32 value) {
  set_has_docid();
  docid_ = value;
  // @@protoc_insertion_point(field_set:stage0.docid)
}

// required double weight = 2;
bool stage0::has_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void stage0::set_has_weight() {
  _has_bits_[0] |= 0x00000020u;
}
void stage0::clear_has_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
void stage0::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
double stage0::weight() const {
  // @@protoc_insertion_point(field_get:stage0.weight)
  return weight_;
}
void stage0::set_weight(double value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:stage0.weight)
}

// required uint32 crc1 = 3;
bool stage0::has_crc1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void stage0::set_has_crc1() {
  _has_bits_[0] |= 0x00000080u;
}
void stage0::clear_has_crc1() {
  _has_bits_[0] &= ~0x00000080u;
}
void stage0::clear_crc1() {
  crc1_ = 0u;
  clear_has_crc1();
}
::google::protobuf::uint32 stage0::crc1() const {
  // @@protoc_insertion_point(field_get:stage0.crc1)
  return crc1_;
}
void stage0::set_crc1(::google::protobuf::uint32 value) {
  set_has_crc1();
  crc1_ = value;
  // @@protoc_insertion_point(field_set:stage0.crc1)
}

// required uint32 crc2 = 4;
bool stage0::has_crc2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void stage0::set_has_crc2() {
  _has_bits_[0] |= 0x00000100u;
}
void stage0::clear_has_crc2() {
  _has_bits_[0] &= ~0x00000100u;
}
void stage0::clear_crc2() {
  crc2_ = 0u;
  clear_has_crc2();
}
::google::protobuf::uint32 stage0::crc2() const {
  // @@protoc_insertion_point(field_get:stage0.crc2)
  return crc2_;
}
void stage0::set_crc2(::google::protobuf::uint32 value) {
  set_has_crc2();
  crc2_ = value;
  // @@protoc_insertion_point(field_set:stage0.crc2)
}

// required uint32 crc3 = 5;
bool stage0::has_crc3() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void stage0::set_has_crc3() {
  _has_bits_[0] |= 0x00000200u;
}
void stage0::clear_has_crc3() {
  _has_bits_[0] &= ~0x00000200u;
}
void stage0::clear_crc3() {
  crc3_ = 0u;
  clear_has_crc3();
}
::google::protobuf::uint32 stage0::crc3() const {
  // @@protoc_insertion_point(field_get:stage0.crc3)
  return crc3_;
}
void stage0::set_crc3(::google::protobuf::uint32 value) {
  set_has_crc3();
  crc3_ = value;
  // @@protoc_insertion_point(field_set:stage0.crc3)
}

// required string snip_hl = 6;
bool stage0::has_snip_hl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void stage0::set_has_snip_hl() {
  _has_bits_[0] |= 0x00000001u;
}
void stage0::clear_has_snip_hl() {
  _has_bits_[0] &= ~0x00000001u;
}
void stage0::clear_snip_hl() {
  snip_hl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snip_hl();
}
const ::std::string& stage0::snip_hl() const {
  // @@protoc_insertion_point(field_get:stage0.snip_hl)
  return snip_hl_.GetNoArena();
}
void stage0::set_snip_hl(const ::std::string& value) {
  set_has_snip_hl();
  snip_hl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stage0.snip_hl)
}
#if LANG_CXX11
void stage0::set_snip_hl(::std::string&& value) {
  set_has_snip_hl();
  snip_hl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stage0.snip_hl)
}
#endif
void stage0::set_snip_hl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snip_hl();
  snip_hl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stage0.snip_hl)
}
void stage0::set_snip_hl(const char* value, size_t size) {
  set_has_snip_hl();
  snip_hl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stage0.snip_hl)
}
::std::string* stage0::mutable_snip_hl() {
  set_has_snip_hl();
  // @@protoc_insertion_point(field_mutable:stage0.snip_hl)
  return snip_hl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* stage0::release_snip_hl() {
  // @@protoc_insertion_point(field_release:stage0.snip_hl)
  clear_has_snip_hl();
  return snip_hl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void stage0::set_allocated_snip_hl(::std::string* snip_hl) {
  if (snip_hl != NULL) {
    set_has_snip_hl();
  } else {
    clear_has_snip_hl();
  }
  snip_hl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snip_hl);
  // @@protoc_insertion_point(field_set_allocated:stage0.snip_hl)
}

// required string rank_trace_feat = 7;
bool stage0::has_rank_trace_feat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void stage0::set_has_rank_trace_feat() {
  _has_bits_[0] |= 0x00000002u;
}
void stage0::clear_has_rank_trace_feat() {
  _has_bits_[0] &= ~0x00000002u;
}
void stage0::clear_rank_trace_feat() {
  rank_trace_feat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rank_trace_feat();
}
const ::std::string& stage0::rank_trace_feat() const {
  // @@protoc_insertion_point(field_get:stage0.rank_trace_feat)
  return rank_trace_feat_.GetNoArena();
}
void stage0::set_rank_trace_feat(const ::std::string& value) {
  set_has_rank_trace_feat();
  rank_trace_feat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stage0.rank_trace_feat)
}
#if LANG_CXX11
void stage0::set_rank_trace_feat(::std::string&& value) {
  set_has_rank_trace_feat();
  rank_trace_feat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stage0.rank_trace_feat)
}
#endif
void stage0::set_rank_trace_feat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rank_trace_feat();
  rank_trace_feat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stage0.rank_trace_feat)
}
void stage0::set_rank_trace_feat(const char* value, size_t size) {
  set_has_rank_trace_feat();
  rank_trace_feat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stage0.rank_trace_feat)
}
::std::string* stage0::mutable_rank_trace_feat() {
  set_has_rank_trace_feat();
  // @@protoc_insertion_point(field_mutable:stage0.rank_trace_feat)
  return rank_trace_feat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* stage0::release_rank_trace_feat() {
  // @@protoc_insertion_point(field_release:stage0.rank_trace_feat)
  clear_has_rank_trace_feat();
  return rank_trace_feat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void stage0::set_allocated_rank_trace_feat(::std::string* rank_trace_feat) {
  if (rank_trace_feat != NULL) {
    set_has_rank_trace_feat();
  } else {
    clear_has_rank_trace_feat();
  }
  rank_trace_feat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rank_trace_feat);
  // @@protoc_insertion_point(field_set_allocated:stage0.rank_trace_feat)
}

// optional uint64 special_crc = 8;
bool stage0::has_special_crc() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void stage0::set_has_special_crc() {
  _has_bits_[0] |= 0x00000400u;
}
void stage0::clear_has_special_crc() {
  _has_bits_[0] &= ~0x00000400u;
}
void stage0::clear_special_crc() {
  special_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_special_crc();
}
::google::protobuf::uint64 stage0::special_crc() const {
  // @@protoc_insertion_point(field_get:stage0.special_crc)
  return special_crc_;
}
void stage0::set_special_crc(::google::protobuf::uint64 value) {
  set_has_special_crc();
  special_crc_ = value;
  // @@protoc_insertion_point(field_set:stage0.special_crc)
}

// optional uint32 required_position = 9;
bool stage0::has_required_position() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void stage0::set_has_required_position() {
  _has_bits_[0] |= 0x00000800u;
}
void stage0::clear_has_required_position() {
  _has_bits_[0] &= ~0x00000800u;
}
void stage0::clear_required_position() {
  required_position_ = 0u;
  clear_has_required_position();
}
::google::protobuf::uint32 stage0::required_position() const {
  // @@protoc_insertion_point(field_get:stage0.required_position)
  return required_position_;
}
void stage0::set_required_position(::google::protobuf::uint32 value) {
  set_has_required_position();
  required_position_ = value;
  // @@protoc_insertion_point(field_set:stage0.required_position)
}

// required bool is_navig = 10;
bool stage0::has_is_navig() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void stage0::set_has_is_navig() {
  _has_bits_[0] |= 0x00002000u;
}
void stage0::clear_has_is_navig() {
  _has_bits_[0] &= ~0x00002000u;
}
void stage0::clear_is_navig() {
  is_navig_ = false;
  clear_has_is_navig();
}
bool stage0::is_navig() const {
  // @@protoc_insertion_point(field_get:stage0.is_navig)
  return is_navig_;
}
void stage0::set_is_navig(bool value) {
  set_has_is_navig();
  is_navig_ = value;
  // @@protoc_insertion_point(field_set:stage0.is_navig)
}

// required bool parsed_content = 11;
bool stage0::has_parsed_content() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void stage0::set_has_parsed_content() {
  _has_bits_[0] |= 0x00004000u;
}
void stage0::clear_has_parsed_content() {
  _has_bits_[0] &= ~0x00004000u;
}
void stage0::clear_parsed_content() {
  parsed_content_ = false;
  clear_has_parsed_content();
}
bool stage0::parsed_content() const {
  // @@protoc_insertion_point(field_get:stage0.parsed_content)
  return parsed_content_;
}
void stage0::set_parsed_content(bool value) {
  set_has_parsed_content();
  parsed_content_ = value;
  // @@protoc_insertion_point(field_set:stage0.parsed_content)
}

// required .gogo.sr.domain_group_type domain_group = 12;
bool stage0::has_domain_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void stage0::set_has_domain_group() {
  _has_bits_[0] |= 0x00001000u;
}
void stage0::clear_has_domain_group() {
  _has_bits_[0] &= ~0x00001000u;
}
void stage0::clear_domain_group() {
  domain_group_ = 0;
  clear_has_domain_group();
}
::gogo::sr::domain_group_type stage0::domain_group() const {
  // @@protoc_insertion_point(field_get:stage0.domain_group)
  return static_cast< ::gogo::sr::domain_group_type >(domain_group_);
}
void stage0::set_domain_group(::gogo::sr::domain_group_type value) {
  assert(::gogo::sr::domain_group_type_IsValid(value));
  set_has_domain_group();
  domain_group_ = value;
  // @@protoc_insertion_point(field_set:stage0.domain_group)
}

// required bool is_mergable = 13;
bool stage0::has_is_mergable() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void stage0::set_has_is_mergable() {
  _has_bits_[0] |= 0x00008000u;
}
void stage0::clear_has_is_mergable() {
  _has_bits_[0] &= ~0x00008000u;
}
void stage0::clear_is_mergable() {
  is_mergable_ = false;
  clear_has_is_mergable();
}
bool stage0::is_mergable() const {
  // @@protoc_insertion_point(field_get:stage0.is_mergable)
  return is_mergable_;
}
void stage0::set_is_mergable(bool value) {
  set_has_is_mergable();
  is_mergable_ = value;
  // @@protoc_insertion_point(field_set:stage0.is_mergable)
}

// required .click_rank cr = 14;
bool stage0::has_cr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void stage0::set_has_cr() {
  _has_bits_[0] |= 0x00000008u;
}
void stage0::clear_has_cr() {
  _has_bits_[0] &= ~0x00000008u;
}
void stage0::clear_cr() {
  if (cr_ != NULL) cr_->::click_rank::Clear();
  clear_has_cr();
}
const ::click_rank& stage0::cr() const {
  const ::click_rank* p = cr_;
  // @@protoc_insertion_point(field_get:stage0.cr)
  return p != NULL ? *p : *reinterpret_cast<const ::click_rank*>(
      &::_click_rank_default_instance_);
}
::click_rank* stage0::mutable_cr() {
  set_has_cr();
  if (cr_ == NULL) {
    cr_ = new ::click_rank;
  }
  // @@protoc_insertion_point(field_mutable:stage0.cr)
  return cr_;
}
::click_rank* stage0::release_cr() {
  // @@protoc_insertion_point(field_release:stage0.cr)
  clear_has_cr();
  ::click_rank* temp = cr_;
  cr_ = NULL;
  return temp;
}
void stage0::set_allocated_cr(::click_rank* cr) {
  delete cr_;
  cr_ = cr;
  if (cr) {
    set_has_cr();
  } else {
    clear_has_cr();
  }
  // @@protoc_insertion_point(field_set_allocated:stage0.cr)
}

// required .serp_quality_features sfq = 15;
bool stage0::has_sfq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void stage0::set_has_sfq() {
  _has_bits_[0] |= 0x00000010u;
}
void stage0::clear_has_sfq() {
  _has_bits_[0] &= ~0x00000010u;
}
void stage0::clear_sfq() {
  if (sfq_ != NULL) sfq_->::serp_quality_features::Clear();
  clear_has_sfq();
}
const ::serp_quality_features& stage0::sfq() const {
  const ::serp_quality_features* p = sfq_;
  // @@protoc_insertion_point(field_get:stage0.sfq)
  return p != NULL ? *p : *reinterpret_cast<const ::serp_quality_features*>(
      &::_serp_quality_features_default_instance_);
}
::serp_quality_features* stage0::mutable_sfq() {
  set_has_sfq();
  if (sfq_ == NULL) {
    sfq_ = new ::serp_quality_features;
  }
  // @@protoc_insertion_point(field_mutable:stage0.sfq)
  return sfq_;
}
::serp_quality_features* stage0::release_sfq() {
  // @@protoc_insertion_point(field_release:stage0.sfq)
  clear_has_sfq();
  ::serp_quality_features* temp = sfq_;
  sfq_ = NULL;
  return temp;
}
void stage0::set_allocated_sfq(::serp_quality_features* sfq) {
  delete sfq_;
  sfq_ = sfq;
  if (sfq) {
    set_has_sfq();
  } else {
    clear_has_sfq();
  }
  // @@protoc_insertion_point(field_set_allocated:stage0.sfq)
}

// optional uint64 crc5 = 16;
bool stage0::has_crc5() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void stage0::set_has_crc5() {
  _has_bits_[0] |= 0x00040000u;
}
void stage0::clear_has_crc5() {
  _has_bits_[0] &= ~0x00040000u;
}
void stage0::clear_crc5() {
  crc5_ = GOOGLE_ULONGLONG(0);
  clear_has_crc5();
}
::google::protobuf::uint64 stage0::crc5() const {
  // @@protoc_insertion_point(field_get:stage0.crc5)
  return crc5_;
}
void stage0::set_crc5(::google::protobuf::uint64 value) {
  set_has_crc5();
  crc5_ = value;
  // @@protoc_insertion_point(field_set:stage0.crc5)
}

// required string doc_trace = 17;
bool stage0::has_doc_trace() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void stage0::set_has_doc_trace() {
  _has_bits_[0] |= 0x00000004u;
}
void stage0::clear_has_doc_trace() {
  _has_bits_[0] &= ~0x00000004u;
}
void stage0::clear_doc_trace() {
  doc_trace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc_trace();
}
const ::std::string& stage0::doc_trace() const {
  // @@protoc_insertion_point(field_get:stage0.doc_trace)
  return doc_trace_.GetNoArena();
}
void stage0::set_doc_trace(const ::std::string& value) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stage0.doc_trace)
}
#if LANG_CXX11
void stage0::set_doc_trace(::std::string&& value) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stage0.doc_trace)
}
#endif
void stage0::set_doc_trace(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stage0.doc_trace)
}
void stage0::set_doc_trace(const char* value, size_t size) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stage0.doc_trace)
}
::std::string* stage0::mutable_doc_trace() {
  set_has_doc_trace();
  // @@protoc_insertion_point(field_mutable:stage0.doc_trace)
  return doc_trace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* stage0::release_doc_trace() {
  // @@protoc_insertion_point(field_release:stage0.doc_trace)
  clear_has_doc_trace();
  return doc_trace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void stage0::set_allocated_doc_trace(::std::string* doc_trace) {
  if (doc_trace != NULL) {
    set_has_doc_trace();
  } else {
    clear_has_doc_trace();
  }
  doc_trace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_trace);
  // @@protoc_insertion_point(field_set_allocated:stage0.doc_trace)
}

// optional bool could_be_a_group_leader = 18;
bool stage0::has_could_be_a_group_leader() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void stage0::set_has_could_be_a_group_leader() {
  _has_bits_[0] |= 0x00010000u;
}
void stage0::clear_has_could_be_a_group_leader() {
  _has_bits_[0] &= ~0x00010000u;
}
void stage0::clear_could_be_a_group_leader() {
  could_be_a_group_leader_ = false;
  clear_has_could_be_a_group_leader();
}
bool stage0::could_be_a_group_leader() const {
  // @@protoc_insertion_point(field_get:stage0.could_be_a_group_leader)
  return could_be_a_group_leader_;
}
void stage0::set_could_be_a_group_leader(bool value) {
  set_has_could_be_a_group_leader();
  could_be_a_group_leader_ = value;
  // @@protoc_insertion_point(field_set:stage0.could_be_a_group_leader)
}

// optional fixed32 full_domain_hash = 19;
bool stage0::has_full_domain_hash() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void stage0::set_has_full_domain_hash() {
  _has_bits_[0] |= 0x00020000u;
}
void stage0::clear_has_full_domain_hash() {
  _has_bits_[0] &= ~0x00020000u;
}
void stage0::clear_full_domain_hash() {
  full_domain_hash_ = 0u;
  clear_has_full_domain_hash();
}
::google::protobuf::uint32 stage0::full_domain_hash() const {
  // @@protoc_insertion_point(field_get:stage0.full_domain_hash)
  return full_domain_hash_;
}
void stage0::set_full_domain_hash(::google::protobuf::uint32 value) {
  set_has_full_domain_hash();
  full_domain_hash_ = value;
  // @@protoc_insertion_point(field_set:stage0.full_domain_hash)
}

// optional uint32 features_hash = 20;
bool stage0::has_features_hash() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void stage0::set_has_features_hash() {
  _has_bits_[0] |= 0x00080000u;
}
void stage0::clear_has_features_hash() {
  _has_bits_[0] &= ~0x00080000u;
}
void stage0::clear_features_hash() {
  features_hash_ = 0u;
  clear_has_features_hash();
}
::google::protobuf::uint32 stage0::features_hash() const {
  // @@protoc_insertion_point(field_get:stage0.features_hash)
  return features_hash_;
}
void stage0::set_features_hash(::google::protobuf::uint32 value) {
  set_has_features_hash();
  features_hash_ = value;
  // @@protoc_insertion_point(field_set:stage0.features_hash)
}

// optional bool req_pos_mergable = 21;
bool stage0::has_req_pos_mergable() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void stage0::set_has_req_pos_mergable() {
  _has_bits_[0] |= 0x00100000u;
}
void stage0::clear_has_req_pos_mergable() {
  _has_bits_[0] &= ~0x00100000u;
}
void stage0::clear_req_pos_mergable() {
  req_pos_mergable_ = false;
  clear_has_req_pos_mergable();
}
bool stage0::req_pos_mergable() const {
  // @@protoc_insertion_point(field_get:stage0.req_pos_mergable)
  return req_pos_mergable_;
}
void stage0::set_req_pos_mergable(bool value) {
  set_has_req_pos_mergable();
  req_pos_mergable_ = value;
  // @@protoc_insertion_point(field_set:stage0.req_pos_mergable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int resultHdr::kErrorFieldNumber;
const int resultHdr::kErrorMesageFieldNumber;
const int resultHdr::kNdocsGroupsFieldNumber;
const int resultHdr::kNdocsTotalFieldNumber;
const int resultHdr::kM3FieldNumber;
const int resultHdr::kM4FieldNumber;
const int resultHdr::kM5FieldNumber;
const int resultHdr::kLastIndexFieldNumber;
const int resultHdr::kMaxDocsCountFieldNumber;
const int resultHdr::kSmThroughFieldNumber;
const int resultHdr::kSearcherVersionFieldNumber;
const int resultHdr::kMicrobasesFieldNumber;
const int resultHdr::kVersionHashFieldNumber;
const int resultHdr::kExperimentIdFieldNumber;
const int resultHdr::kExperimentInterleavingTypeFieldNumber;
const int resultHdr::kExperimentEssrSourceTypeFieldNumber;
const int resultHdr::kTraitHolderAndWebstatFieldNumber;
const int resultHdr::kDomainGroupOooFieldNumber;
const int resultHdr::kBackendsQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

resultHdr::resultHdr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stage0_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:resultHdr)
}
resultHdr::resultHdr(const resultHdr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_mesage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_mesage()) {
    error_mesage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_mesage_);
  }
  sm_through_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sm_through()) {
    sm_through_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sm_through_);
  }
  searcher_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_searcher_version()) {
    searcher_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searcher_version_);
  }
  microbases_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_microbases()) {
    microbases_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.microbases_);
  }
  experiment_interleaving_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_experiment_interleaving_type()) {
    experiment_interleaving_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.experiment_interleaving_type_);
  }
  experiment_essr_source_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_experiment_essr_source_type()) {
    experiment_essr_source_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.experiment_essr_source_type_);
  }
  trait_holder_and_webstat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trait_holder_and_webstat()) {
    trait_holder_and_webstat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trait_holder_and_webstat_);
  }
  if (from.has_backends_quality()) {
    backends_quality_ = new ::backends_quality::pb::BackendsQuality(*from.backends_quality_);
  } else {
    backends_quality_ = NULL;
  }
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&domain_group_ooo_) -
    reinterpret_cast<char*>(&error_)) + sizeof(domain_group_ooo_));
  // @@protoc_insertion_point(copy_constructor:resultHdr)
}

void resultHdr::SharedCtor() {
  _cached_size_ = 0;
  error_mesage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sm_through_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searcher_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  microbases_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  experiment_interleaving_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  experiment_essr_source_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trait_holder_and_webstat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&backends_quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&domain_group_ooo_) -
      reinterpret_cast<char*>(&backends_quality_)) + sizeof(domain_group_ooo_));
}

resultHdr::~resultHdr() {
  // @@protoc_insertion_point(destructor:resultHdr)
  SharedDtor();
}

void resultHdr::SharedDtor() {
  error_mesage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sm_through_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searcher_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  microbases_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  experiment_interleaving_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  experiment_essr_source_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trait_holder_and_webstat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete backends_quality_;
}

void resultHdr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* resultHdr::descriptor() {
  protobuf_stage0_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stage0_5fcache_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const resultHdr& resultHdr::default_instance() {
  protobuf_stage0_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

resultHdr* resultHdr::New(::google::protobuf::Arena* arena) const {
  resultHdr* n = new resultHdr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void resultHdr::Clear() {
// @@protoc_insertion_point(message_clear_start:resultHdr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!error_mesage_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*error_mesage_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!sm_through_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sm_through_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!searcher_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*searcher_version_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!microbases_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*microbases_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!experiment_interleaving_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*experiment_interleaving_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!experiment_essr_source_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*experiment_essr_source_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!trait_holder_and_webstat_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*trait_holder_and_webstat_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(backends_quality_ != NULL);
      backends_quality_->::backends_quality::pb::BackendsQuality::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_docs_count_) -
        reinterpret_cast<char*>(&error_)) + sizeof(max_docs_count_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&version_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&domain_group_ooo_) -
        reinterpret_cast<char*>(&version_hash_)) + sizeof(domain_group_ooo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool resultHdr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:resultHdr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string error_mesage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_mesage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_mesage().data(), static_cast<int>(this->error_mesage().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resultHdr.error_mesage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ndocs_groups = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ndocs_groups();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndocs_groups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ndocs_total = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ndocs_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndocs_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 m3 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_m3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 m4 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_m4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 m5 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_m5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 last_index = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_last_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 max_docs_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_max_docs_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_docs_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string sm_through = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sm_through()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sm_through().data(), static_cast<int>(this->sm_through().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resultHdr.sm_through");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string searcher_version = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searcher_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searcher_version().data(), static_cast<int>(this->searcher_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resultHdr.searcher_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string microbases = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_microbases()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->microbases().data(), static_cast<int>(this->microbases().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resultHdr.microbases");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 version_hash = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_version_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 experiment_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_experiment_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experiment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string experiment_interleaving_type = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_experiment_interleaving_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->experiment_interleaving_type().data(), static_cast<int>(this->experiment_interleaving_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resultHdr.experiment_interleaving_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string experiment_essr_source_type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_experiment_essr_source_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->experiment_essr_source_type().data(), static_cast<int>(this->experiment_essr_source_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resultHdr.experiment_essr_source_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes trait_holder_and_webstat = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trait_holder_and_webstat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool domain_group_ooo = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_domain_group_ooo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &domain_group_ooo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .backends_quality.pb.BackendsQuality backends_quality = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backends_quality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:resultHdr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:resultHdr)
  return false;
#undef DO_
}

void resultHdr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:resultHdr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 error = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  // required string error_mesage = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_mesage().data(), static_cast<int>(this->error_mesage().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultHdr.error_mesage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_mesage(), output);
  }

  // required uint32 ndocs_groups = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ndocs_groups(), output);
  }

  // required uint32 ndocs_total = 4;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ndocs_total(), output);
  }

  // required uint64 m3 = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->m3(), output);
  }

  // required uint64 m4 = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->m4(), output);
  }

  // required uint64 m5 = 7;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->m5(), output);
  }

  // required uint32 last_index = 8;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_index(), output);
  }

  // required uint32 max_docs_count = 9;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->max_docs_count(), output);
  }

  // required string sm_through = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sm_through().data(), static_cast<int>(this->sm_through().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultHdr.sm_through");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->sm_through(), output);
  }

  // required string searcher_version = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searcher_version().data(), static_cast<int>(this->searcher_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultHdr.searcher_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->searcher_version(), output);
  }

  // required string microbases = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->microbases().data(), static_cast<int>(this->microbases().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultHdr.microbases");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->microbases(), output);
  }

  // required uint32 version_hash = 13;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->version_hash(), output);
  }

  // required uint32 experiment_id = 14;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->experiment_id(), output);
  }

  // required string experiment_interleaving_type = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->experiment_interleaving_type().data(), static_cast<int>(this->experiment_interleaving_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultHdr.experiment_interleaving_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->experiment_interleaving_type(), output);
  }

  // required string experiment_essr_source_type = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->experiment_essr_source_type().data(), static_cast<int>(this->experiment_essr_source_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultHdr.experiment_essr_source_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->experiment_essr_source_type(), output);
  }

  // required bytes trait_holder_and_webstat = 17;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->trait_holder_and_webstat(), output);
  }

  // optional bool domain_group_ooo = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->domain_group_ooo(), output);
  }

  // optional .backends_quality.pb.BackendsQuality backends_quality = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->backends_quality_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:resultHdr)
}

::google::protobuf::uint8* resultHdr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:resultHdr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 error = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  // required string error_mesage = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_mesage().data(), static_cast<int>(this->error_mesage().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultHdr.error_mesage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_mesage(), target);
  }

  // required uint32 ndocs_groups = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ndocs_groups(), target);
  }

  // required uint32 ndocs_total = 4;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ndocs_total(), target);
  }

  // required uint64 m3 = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->m3(), target);
  }

  // required uint64 m4 = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->m4(), target);
  }

  // required uint64 m5 = 7;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->m5(), target);
  }

  // required uint32 last_index = 8;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_index(), target);
  }

  // required uint32 max_docs_count = 9;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->max_docs_count(), target);
  }

  // required string sm_through = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sm_through().data(), static_cast<int>(this->sm_through().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultHdr.sm_through");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->sm_through(), target);
  }

  // required string searcher_version = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searcher_version().data(), static_cast<int>(this->searcher_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultHdr.searcher_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->searcher_version(), target);
  }

  // required string microbases = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->microbases().data(), static_cast<int>(this->microbases().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultHdr.microbases");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->microbases(), target);
  }

  // required uint32 version_hash = 13;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->version_hash(), target);
  }

  // required uint32 experiment_id = 14;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->experiment_id(), target);
  }

  // required string experiment_interleaving_type = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->experiment_interleaving_type().data(), static_cast<int>(this->experiment_interleaving_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultHdr.experiment_interleaving_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->experiment_interleaving_type(), target);
  }

  // required string experiment_essr_source_type = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->experiment_essr_source_type().data(), static_cast<int>(this->experiment_essr_source_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultHdr.experiment_essr_source_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->experiment_essr_source_type(), target);
  }

  // required bytes trait_holder_and_webstat = 17;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->trait_holder_and_webstat(), target);
  }

  // optional bool domain_group_ooo = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->domain_group_ooo(), target);
  }

  // optional .backends_quality.pb.BackendsQuality backends_quality = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->backends_quality_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resultHdr)
  return target;
}

size_t resultHdr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:resultHdr)
  size_t total_size = 0;

  if (has_error_mesage()) {
    // required string error_mesage = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_mesage());
  }

  if (has_sm_through()) {
    // required string sm_through = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sm_through());
  }

  if (has_searcher_version()) {
    // required string searcher_version = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->searcher_version());
  }

  if (has_microbases()) {
    // required string microbases = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->microbases());
  }

  if (has_experiment_interleaving_type()) {
    // required string experiment_interleaving_type = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->experiment_interleaving_type());
  }

  if (has_experiment_essr_source_type()) {
    // required string experiment_essr_source_type = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->experiment_essr_source_type());
  }

  if (has_trait_holder_and_webstat()) {
    // required bytes trait_holder_and_webstat = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trait_holder_and_webstat());
  }

  if (has_error()) {
    // required uint32 error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  if (has_ndocs_groups()) {
    // required uint32 ndocs_groups = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ndocs_groups());
  }

  if (has_m3()) {
    // required uint64 m3 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->m3());
  }

  if (has_m4()) {
    // required uint64 m4 = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->m4());
  }

  if (has_ndocs_total()) {
    // required uint32 ndocs_total = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ndocs_total());
  }

  if (has_last_index()) {
    // required uint32 last_index = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_index());
  }

  if (has_m5()) {
    // required uint64 m5 = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->m5());
  }

  if (has_max_docs_count()) {
    // required uint32 max_docs_count = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_docs_count());
  }

  if (has_version_hash()) {
    // required uint32 version_hash = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version_hash());
  }

  if (has_experiment_id()) {
    // required uint32 experiment_id = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->experiment_id());
  }

  return total_size;
}
size_t resultHdr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resultHdr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0003ff7f) ^ 0x0003ff7f) == 0) {  // All required fields are present.
    // required string error_mesage = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_mesage());

    // required string sm_through = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sm_through());

    // required string searcher_version = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->searcher_version());

    // required string microbases = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->microbases());

    // required string experiment_interleaving_type = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->experiment_interleaving_type());

    // required string experiment_essr_source_type = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->experiment_essr_source_type());

    // required bytes trait_holder_and_webstat = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trait_holder_and_webstat());

    // required uint32 error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());

    // required uint32 ndocs_groups = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ndocs_groups());

    // required uint64 m3 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->m3());

    // required uint64 m4 = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->m4());

    // required uint32 ndocs_total = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ndocs_total());

    // required uint32 last_index = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_index());

    // required uint64 m5 = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->m5());

    // required uint32 max_docs_count = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_docs_count());

    // required uint32 version_hash = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version_hash());

    // required uint32 experiment_id = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->experiment_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .backends_quality.pb.BackendsQuality backends_quality = 19;
  if (has_backends_quality()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->backends_quality_);
  }

  // optional bool domain_group_ooo = 18;
  if (has_domain_group_ooo()) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void resultHdr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resultHdr)
  GOOGLE_DCHECK_NE(&from, this);
  const resultHdr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const resultHdr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resultHdr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resultHdr)
    MergeFrom(*source);
  }
}

void resultHdr::MergeFrom(const resultHdr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resultHdr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_mesage();
      error_mesage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_mesage_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sm_through();
      sm_through_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sm_through_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_searcher_version();
      searcher_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searcher_version_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_microbases();
      microbases_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.microbases_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_experiment_interleaving_type();
      experiment_interleaving_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.experiment_interleaving_type_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_experiment_essr_source_type();
      experiment_essr_source_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.experiment_essr_source_type_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_trait_holder_and_webstat();
      trait_holder_and_webstat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trait_holder_and_webstat_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_backends_quality()->::backends_quality::pb::BackendsQuality::MergeFrom(from.backends_quality());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000200u) {
      ndocs_groups_ = from.ndocs_groups_;
    }
    if (cached_has_bits & 0x00000400u) {
      m3_ = from.m3_;
    }
    if (cached_has_bits & 0x00000800u) {
      m4_ = from.m4_;
    }
    if (cached_has_bits & 0x00001000u) {
      ndocs_total_ = from.ndocs_total_;
    }
    if (cached_has_bits & 0x00002000u) {
      last_index_ = from.last_index_;
    }
    if (cached_has_bits & 0x00004000u) {
      m5_ = from.m5_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_docs_count_ = from.max_docs_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      version_hash_ = from.version_hash_;
    }
    if (cached_has_bits & 0x00020000u) {
      experiment_id_ = from.experiment_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      domain_group_ooo_ = from.domain_group_ooo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void resultHdr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resultHdr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void resultHdr::CopyFrom(const resultHdr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resultHdr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool resultHdr::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ff7f) != 0x0003ff7f) return false;
  return true;
}

void resultHdr::Swap(resultHdr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void resultHdr::InternalSwap(resultHdr* other) {
  using std::swap;
  error_mesage_.Swap(&other->error_mesage_);
  sm_through_.Swap(&other->sm_through_);
  searcher_version_.Swap(&other->searcher_version_);
  microbases_.Swap(&other->microbases_);
  experiment_interleaving_type_.Swap(&other->experiment_interleaving_type_);
  experiment_essr_source_type_.Swap(&other->experiment_essr_source_type_);
  trait_holder_and_webstat_.Swap(&other->trait_holder_and_webstat_);
  swap(backends_quality_, other->backends_quality_);
  swap(error_, other->error_);
  swap(ndocs_groups_, other->ndocs_groups_);
  swap(m3_, other->m3_);
  swap(m4_, other->m4_);
  swap(ndocs_total_, other->ndocs_total_);
  swap(last_index_, other->last_index_);
  swap(m5_, other->m5_);
  swap(max_docs_count_, other->max_docs_count_);
  swap(version_hash_, other->version_hash_);
  swap(experiment_id_, other->experiment_id_);
  swap(domain_group_ooo_, other->domain_group_ooo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata resultHdr::GetMetadata() const {
  protobuf_stage0_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stage0_5fcache_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// resultHdr

// required uint32 error = 1;
bool resultHdr::has_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void resultHdr::set_has_error() {
  _has_bits_[0] |= 0x00000100u;
}
void resultHdr::clear_has_error() {
  _has_bits_[0] &= ~0x00000100u;
}
void resultHdr::clear_error() {
  error_ = 0u;
  clear_has_error();
}
::google::protobuf::uint32 resultHdr::error() const {
  // @@protoc_insertion_point(field_get:resultHdr.error)
  return error_;
}
void resultHdr::set_error(::google::protobuf::uint32 value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.error)
}

// required string error_mesage = 2;
bool resultHdr::has_error_mesage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void resultHdr::set_has_error_mesage() {
  _has_bits_[0] |= 0x00000001u;
}
void resultHdr::clear_has_error_mesage() {
  _has_bits_[0] &= ~0x00000001u;
}
void resultHdr::clear_error_mesage() {
  error_mesage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_mesage();
}
const ::std::string& resultHdr::error_mesage() const {
  // @@protoc_insertion_point(field_get:resultHdr.error_mesage)
  return error_mesage_.GetNoArena();
}
void resultHdr::set_error_mesage(const ::std::string& value) {
  set_has_error_mesage();
  error_mesage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resultHdr.error_mesage)
}
#if LANG_CXX11
void resultHdr::set_error_mesage(::std::string&& value) {
  set_has_error_mesage();
  error_mesage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resultHdr.error_mesage)
}
#endif
void resultHdr::set_error_mesage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_mesage();
  error_mesage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resultHdr.error_mesage)
}
void resultHdr::set_error_mesage(const char* value, size_t size) {
  set_has_error_mesage();
  error_mesage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resultHdr.error_mesage)
}
::std::string* resultHdr::mutable_error_mesage() {
  set_has_error_mesage();
  // @@protoc_insertion_point(field_mutable:resultHdr.error_mesage)
  return error_mesage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* resultHdr::release_error_mesage() {
  // @@protoc_insertion_point(field_release:resultHdr.error_mesage)
  clear_has_error_mesage();
  return error_mesage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void resultHdr::set_allocated_error_mesage(::std::string* error_mesage) {
  if (error_mesage != NULL) {
    set_has_error_mesage();
  } else {
    clear_has_error_mesage();
  }
  error_mesage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_mesage);
  // @@protoc_insertion_point(field_set_allocated:resultHdr.error_mesage)
}

// required uint32 ndocs_groups = 3;
bool resultHdr::has_ndocs_groups() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void resultHdr::set_has_ndocs_groups() {
  _has_bits_[0] |= 0x00000200u;
}
void resultHdr::clear_has_ndocs_groups() {
  _has_bits_[0] &= ~0x00000200u;
}
void resultHdr::clear_ndocs_groups() {
  ndocs_groups_ = 0u;
  clear_has_ndocs_groups();
}
::google::protobuf::uint32 resultHdr::ndocs_groups() const {
  // @@protoc_insertion_point(field_get:resultHdr.ndocs_groups)
  return ndocs_groups_;
}
void resultHdr::set_ndocs_groups(::google::protobuf::uint32 value) {
  set_has_ndocs_groups();
  ndocs_groups_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.ndocs_groups)
}

// required uint32 ndocs_total = 4;
bool resultHdr::has_ndocs_total() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void resultHdr::set_has_ndocs_total() {
  _has_bits_[0] |= 0x00001000u;
}
void resultHdr::clear_has_ndocs_total() {
  _has_bits_[0] &= ~0x00001000u;
}
void resultHdr::clear_ndocs_total() {
  ndocs_total_ = 0u;
  clear_has_ndocs_total();
}
::google::protobuf::uint32 resultHdr::ndocs_total() const {
  // @@protoc_insertion_point(field_get:resultHdr.ndocs_total)
  return ndocs_total_;
}
void resultHdr::set_ndocs_total(::google::protobuf::uint32 value) {
  set_has_ndocs_total();
  ndocs_total_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.ndocs_total)
}

// required uint64 m3 = 5;
bool resultHdr::has_m3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void resultHdr::set_has_m3() {
  _has_bits_[0] |= 0x00000400u;
}
void resultHdr::clear_has_m3() {
  _has_bits_[0] &= ~0x00000400u;
}
void resultHdr::clear_m3() {
  m3_ = GOOGLE_ULONGLONG(0);
  clear_has_m3();
}
::google::protobuf::uint64 resultHdr::m3() const {
  // @@protoc_insertion_point(field_get:resultHdr.m3)
  return m3_;
}
void resultHdr::set_m3(::google::protobuf::uint64 value) {
  set_has_m3();
  m3_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.m3)
}

// required uint64 m4 = 6;
bool resultHdr::has_m4() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void resultHdr::set_has_m4() {
  _has_bits_[0] |= 0x00000800u;
}
void resultHdr::clear_has_m4() {
  _has_bits_[0] &= ~0x00000800u;
}
void resultHdr::clear_m4() {
  m4_ = GOOGLE_ULONGLONG(0);
  clear_has_m4();
}
::google::protobuf::uint64 resultHdr::m4() const {
  // @@protoc_insertion_point(field_get:resultHdr.m4)
  return m4_;
}
void resultHdr::set_m4(::google::protobuf::uint64 value) {
  set_has_m4();
  m4_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.m4)
}

// required uint64 m5 = 7;
bool resultHdr::has_m5() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void resultHdr::set_has_m5() {
  _has_bits_[0] |= 0x00004000u;
}
void resultHdr::clear_has_m5() {
  _has_bits_[0] &= ~0x00004000u;
}
void resultHdr::clear_m5() {
  m5_ = GOOGLE_ULONGLONG(0);
  clear_has_m5();
}
::google::protobuf::uint64 resultHdr::m5() const {
  // @@protoc_insertion_point(field_get:resultHdr.m5)
  return m5_;
}
void resultHdr::set_m5(::google::protobuf::uint64 value) {
  set_has_m5();
  m5_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.m5)
}

// required uint32 last_index = 8;
bool resultHdr::has_last_index() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void resultHdr::set_has_last_index() {
  _has_bits_[0] |= 0x00002000u;
}
void resultHdr::clear_has_last_index() {
  _has_bits_[0] &= ~0x00002000u;
}
void resultHdr::clear_last_index() {
  last_index_ = 0u;
  clear_has_last_index();
}
::google::protobuf::uint32 resultHdr::last_index() const {
  // @@protoc_insertion_point(field_get:resultHdr.last_index)
  return last_index_;
}
void resultHdr::set_last_index(::google::protobuf::uint32 value) {
  set_has_last_index();
  last_index_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.last_index)
}

// required uint32 max_docs_count = 9;
bool resultHdr::has_max_docs_count() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void resultHdr::set_has_max_docs_count() {
  _has_bits_[0] |= 0x00008000u;
}
void resultHdr::clear_has_max_docs_count() {
  _has_bits_[0] &= ~0x00008000u;
}
void resultHdr::clear_max_docs_count() {
  max_docs_count_ = 0u;
  clear_has_max_docs_count();
}
::google::protobuf::uint32 resultHdr::max_docs_count() const {
  // @@protoc_insertion_point(field_get:resultHdr.max_docs_count)
  return max_docs_count_;
}
void resultHdr::set_max_docs_count(::google::protobuf::uint32 value) {
  set_has_max_docs_count();
  max_docs_count_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.max_docs_count)
}

// required string sm_through = 10;
bool resultHdr::has_sm_through() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void resultHdr::set_has_sm_through() {
  _has_bits_[0] |= 0x00000002u;
}
void resultHdr::clear_has_sm_through() {
  _has_bits_[0] &= ~0x00000002u;
}
void resultHdr::clear_sm_through() {
  sm_through_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sm_through();
}
const ::std::string& resultHdr::sm_through() const {
  // @@protoc_insertion_point(field_get:resultHdr.sm_through)
  return sm_through_.GetNoArena();
}
void resultHdr::set_sm_through(const ::std::string& value) {
  set_has_sm_through();
  sm_through_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resultHdr.sm_through)
}
#if LANG_CXX11
void resultHdr::set_sm_through(::std::string&& value) {
  set_has_sm_through();
  sm_through_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resultHdr.sm_through)
}
#endif
void resultHdr::set_sm_through(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sm_through();
  sm_through_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resultHdr.sm_through)
}
void resultHdr::set_sm_through(const char* value, size_t size) {
  set_has_sm_through();
  sm_through_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resultHdr.sm_through)
}
::std::string* resultHdr::mutable_sm_through() {
  set_has_sm_through();
  // @@protoc_insertion_point(field_mutable:resultHdr.sm_through)
  return sm_through_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* resultHdr::release_sm_through() {
  // @@protoc_insertion_point(field_release:resultHdr.sm_through)
  clear_has_sm_through();
  return sm_through_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void resultHdr::set_allocated_sm_through(::std::string* sm_through) {
  if (sm_through != NULL) {
    set_has_sm_through();
  } else {
    clear_has_sm_through();
  }
  sm_through_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sm_through);
  // @@protoc_insertion_point(field_set_allocated:resultHdr.sm_through)
}

// required string searcher_version = 11;
bool resultHdr::has_searcher_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void resultHdr::set_has_searcher_version() {
  _has_bits_[0] |= 0x00000004u;
}
void resultHdr::clear_has_searcher_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void resultHdr::clear_searcher_version() {
  searcher_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_searcher_version();
}
const ::std::string& resultHdr::searcher_version() const {
  // @@protoc_insertion_point(field_get:resultHdr.searcher_version)
  return searcher_version_.GetNoArena();
}
void resultHdr::set_searcher_version(const ::std::string& value) {
  set_has_searcher_version();
  searcher_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resultHdr.searcher_version)
}
#if LANG_CXX11
void resultHdr::set_searcher_version(::std::string&& value) {
  set_has_searcher_version();
  searcher_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resultHdr.searcher_version)
}
#endif
void resultHdr::set_searcher_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_searcher_version();
  searcher_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resultHdr.searcher_version)
}
void resultHdr::set_searcher_version(const char* value, size_t size) {
  set_has_searcher_version();
  searcher_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resultHdr.searcher_version)
}
::std::string* resultHdr::mutable_searcher_version() {
  set_has_searcher_version();
  // @@protoc_insertion_point(field_mutable:resultHdr.searcher_version)
  return searcher_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* resultHdr::release_searcher_version() {
  // @@protoc_insertion_point(field_release:resultHdr.searcher_version)
  clear_has_searcher_version();
  return searcher_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void resultHdr::set_allocated_searcher_version(::std::string* searcher_version) {
  if (searcher_version != NULL) {
    set_has_searcher_version();
  } else {
    clear_has_searcher_version();
  }
  searcher_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), searcher_version);
  // @@protoc_insertion_point(field_set_allocated:resultHdr.searcher_version)
}

// required string microbases = 12;
bool resultHdr::has_microbases() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void resultHdr::set_has_microbases() {
  _has_bits_[0] |= 0x00000008u;
}
void resultHdr::clear_has_microbases() {
  _has_bits_[0] &= ~0x00000008u;
}
void resultHdr::clear_microbases() {
  microbases_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_microbases();
}
const ::std::string& resultHdr::microbases() const {
  // @@protoc_insertion_point(field_get:resultHdr.microbases)
  return microbases_.GetNoArena();
}
void resultHdr::set_microbases(const ::std::string& value) {
  set_has_microbases();
  microbases_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resultHdr.microbases)
}
#if LANG_CXX11
void resultHdr::set_microbases(::std::string&& value) {
  set_has_microbases();
  microbases_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resultHdr.microbases)
}
#endif
void resultHdr::set_microbases(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_microbases();
  microbases_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resultHdr.microbases)
}
void resultHdr::set_microbases(const char* value, size_t size) {
  set_has_microbases();
  microbases_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resultHdr.microbases)
}
::std::string* resultHdr::mutable_microbases() {
  set_has_microbases();
  // @@protoc_insertion_point(field_mutable:resultHdr.microbases)
  return microbases_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* resultHdr::release_microbases() {
  // @@protoc_insertion_point(field_release:resultHdr.microbases)
  clear_has_microbases();
  return microbases_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void resultHdr::set_allocated_microbases(::std::string* microbases) {
  if (microbases != NULL) {
    set_has_microbases();
  } else {
    clear_has_microbases();
  }
  microbases_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), microbases);
  // @@protoc_insertion_point(field_set_allocated:resultHdr.microbases)
}

// required uint32 version_hash = 13;
bool resultHdr::has_version_hash() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void resultHdr::set_has_version_hash() {
  _has_bits_[0] |= 0x00010000u;
}
void resultHdr::clear_has_version_hash() {
  _has_bits_[0] &= ~0x00010000u;
}
void resultHdr::clear_version_hash() {
  version_hash_ = 0u;
  clear_has_version_hash();
}
::google::protobuf::uint32 resultHdr::version_hash() const {
  // @@protoc_insertion_point(field_get:resultHdr.version_hash)
  return version_hash_;
}
void resultHdr::set_version_hash(::google::protobuf::uint32 value) {
  set_has_version_hash();
  version_hash_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.version_hash)
}

// required uint32 experiment_id = 14;
bool resultHdr::has_experiment_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void resultHdr::set_has_experiment_id() {
  _has_bits_[0] |= 0x00020000u;
}
void resultHdr::clear_has_experiment_id() {
  _has_bits_[0] &= ~0x00020000u;
}
void resultHdr::clear_experiment_id() {
  experiment_id_ = 0u;
  clear_has_experiment_id();
}
::google::protobuf::uint32 resultHdr::experiment_id() const {
  // @@protoc_insertion_point(field_get:resultHdr.experiment_id)
  return experiment_id_;
}
void resultHdr::set_experiment_id(::google::protobuf::uint32 value) {
  set_has_experiment_id();
  experiment_id_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.experiment_id)
}

// required string experiment_interleaving_type = 15;
bool resultHdr::has_experiment_interleaving_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void resultHdr::set_has_experiment_interleaving_type() {
  _has_bits_[0] |= 0x00000010u;
}
void resultHdr::clear_has_experiment_interleaving_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void resultHdr::clear_experiment_interleaving_type() {
  experiment_interleaving_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_experiment_interleaving_type();
}
const ::std::string& resultHdr::experiment_interleaving_type() const {
  // @@protoc_insertion_point(field_get:resultHdr.experiment_interleaving_type)
  return experiment_interleaving_type_.GetNoArena();
}
void resultHdr::set_experiment_interleaving_type(const ::std::string& value) {
  set_has_experiment_interleaving_type();
  experiment_interleaving_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resultHdr.experiment_interleaving_type)
}
#if LANG_CXX11
void resultHdr::set_experiment_interleaving_type(::std::string&& value) {
  set_has_experiment_interleaving_type();
  experiment_interleaving_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resultHdr.experiment_interleaving_type)
}
#endif
void resultHdr::set_experiment_interleaving_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_experiment_interleaving_type();
  experiment_interleaving_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resultHdr.experiment_interleaving_type)
}
void resultHdr::set_experiment_interleaving_type(const char* value, size_t size) {
  set_has_experiment_interleaving_type();
  experiment_interleaving_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resultHdr.experiment_interleaving_type)
}
::std::string* resultHdr::mutable_experiment_interleaving_type() {
  set_has_experiment_interleaving_type();
  // @@protoc_insertion_point(field_mutable:resultHdr.experiment_interleaving_type)
  return experiment_interleaving_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* resultHdr::release_experiment_interleaving_type() {
  // @@protoc_insertion_point(field_release:resultHdr.experiment_interleaving_type)
  clear_has_experiment_interleaving_type();
  return experiment_interleaving_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void resultHdr::set_allocated_experiment_interleaving_type(::std::string* experiment_interleaving_type) {
  if (experiment_interleaving_type != NULL) {
    set_has_experiment_interleaving_type();
  } else {
    clear_has_experiment_interleaving_type();
  }
  experiment_interleaving_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), experiment_interleaving_type);
  // @@protoc_insertion_point(field_set_allocated:resultHdr.experiment_interleaving_type)
}

// required string experiment_essr_source_type = 16;
bool resultHdr::has_experiment_essr_source_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void resultHdr::set_has_experiment_essr_source_type() {
  _has_bits_[0] |= 0x00000020u;
}
void resultHdr::clear_has_experiment_essr_source_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void resultHdr::clear_experiment_essr_source_type() {
  experiment_essr_source_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_experiment_essr_source_type();
}
const ::std::string& resultHdr::experiment_essr_source_type() const {
  // @@protoc_insertion_point(field_get:resultHdr.experiment_essr_source_type)
  return experiment_essr_source_type_.GetNoArena();
}
void resultHdr::set_experiment_essr_source_type(const ::std::string& value) {
  set_has_experiment_essr_source_type();
  experiment_essr_source_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resultHdr.experiment_essr_source_type)
}
#if LANG_CXX11
void resultHdr::set_experiment_essr_source_type(::std::string&& value) {
  set_has_experiment_essr_source_type();
  experiment_essr_source_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resultHdr.experiment_essr_source_type)
}
#endif
void resultHdr::set_experiment_essr_source_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_experiment_essr_source_type();
  experiment_essr_source_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resultHdr.experiment_essr_source_type)
}
void resultHdr::set_experiment_essr_source_type(const char* value, size_t size) {
  set_has_experiment_essr_source_type();
  experiment_essr_source_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resultHdr.experiment_essr_source_type)
}
::std::string* resultHdr::mutable_experiment_essr_source_type() {
  set_has_experiment_essr_source_type();
  // @@protoc_insertion_point(field_mutable:resultHdr.experiment_essr_source_type)
  return experiment_essr_source_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* resultHdr::release_experiment_essr_source_type() {
  // @@protoc_insertion_point(field_release:resultHdr.experiment_essr_source_type)
  clear_has_experiment_essr_source_type();
  return experiment_essr_source_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void resultHdr::set_allocated_experiment_essr_source_type(::std::string* experiment_essr_source_type) {
  if (experiment_essr_source_type != NULL) {
    set_has_experiment_essr_source_type();
  } else {
    clear_has_experiment_essr_source_type();
  }
  experiment_essr_source_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), experiment_essr_source_type);
  // @@protoc_insertion_point(field_set_allocated:resultHdr.experiment_essr_source_type)
}

// required bytes trait_holder_and_webstat = 17;
bool resultHdr::has_trait_holder_and_webstat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void resultHdr::set_has_trait_holder_and_webstat() {
  _has_bits_[0] |= 0x00000040u;
}
void resultHdr::clear_has_trait_holder_and_webstat() {
  _has_bits_[0] &= ~0x00000040u;
}
void resultHdr::clear_trait_holder_and_webstat() {
  trait_holder_and_webstat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trait_holder_and_webstat();
}
const ::std::string& resultHdr::trait_holder_and_webstat() const {
  // @@protoc_insertion_point(field_get:resultHdr.trait_holder_and_webstat)
  return trait_holder_and_webstat_.GetNoArena();
}
void resultHdr::set_trait_holder_and_webstat(const ::std::string& value) {
  set_has_trait_holder_and_webstat();
  trait_holder_and_webstat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resultHdr.trait_holder_and_webstat)
}
#if LANG_CXX11
void resultHdr::set_trait_holder_and_webstat(::std::string&& value) {
  set_has_trait_holder_and_webstat();
  trait_holder_and_webstat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resultHdr.trait_holder_and_webstat)
}
#endif
void resultHdr::set_trait_holder_and_webstat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trait_holder_and_webstat();
  trait_holder_and_webstat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resultHdr.trait_holder_and_webstat)
}
void resultHdr::set_trait_holder_and_webstat(const void* value, size_t size) {
  set_has_trait_holder_and_webstat();
  trait_holder_and_webstat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resultHdr.trait_holder_and_webstat)
}
::std::string* resultHdr::mutable_trait_holder_and_webstat() {
  set_has_trait_holder_and_webstat();
  // @@protoc_insertion_point(field_mutable:resultHdr.trait_holder_and_webstat)
  return trait_holder_and_webstat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* resultHdr::release_trait_holder_and_webstat() {
  // @@protoc_insertion_point(field_release:resultHdr.trait_holder_and_webstat)
  clear_has_trait_holder_and_webstat();
  return trait_holder_and_webstat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void resultHdr::set_allocated_trait_holder_and_webstat(::std::string* trait_holder_and_webstat) {
  if (trait_holder_and_webstat != NULL) {
    set_has_trait_holder_and_webstat();
  } else {
    clear_has_trait_holder_and_webstat();
  }
  trait_holder_and_webstat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trait_holder_and_webstat);
  // @@protoc_insertion_point(field_set_allocated:resultHdr.trait_holder_and_webstat)
}

// optional bool domain_group_ooo = 18;
bool resultHdr::has_domain_group_ooo() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void resultHdr::set_has_domain_group_ooo() {
  _has_bits_[0] |= 0x00040000u;
}
void resultHdr::clear_has_domain_group_ooo() {
  _has_bits_[0] &= ~0x00040000u;
}
void resultHdr::clear_domain_group_ooo() {
  domain_group_ooo_ = false;
  clear_has_domain_group_ooo();
}
bool resultHdr::domain_group_ooo() const {
  // @@protoc_insertion_point(field_get:resultHdr.domain_group_ooo)
  return domain_group_ooo_;
}
void resultHdr::set_domain_group_ooo(bool value) {
  set_has_domain_group_ooo();
  domain_group_ooo_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.domain_group_ooo)
}

// optional .backends_quality.pb.BackendsQuality backends_quality = 19;
bool resultHdr::has_backends_quality() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void resultHdr::set_has_backends_quality() {
  _has_bits_[0] |= 0x00000080u;
}
void resultHdr::clear_has_backends_quality() {
  _has_bits_[0] &= ~0x00000080u;
}
void resultHdr::clear_backends_quality() {
  if (backends_quality_ != NULL) backends_quality_->::backends_quality::pb::BackendsQuality::Clear();
  clear_has_backends_quality();
}
const ::backends_quality::pb::BackendsQuality& resultHdr::backends_quality() const {
  const ::backends_quality::pb::BackendsQuality* p = backends_quality_;
  // @@protoc_insertion_point(field_get:resultHdr.backends_quality)
  return p != NULL ? *p : *reinterpret_cast<const ::backends_quality::pb::BackendsQuality*>(
      &::backends_quality::pb::_BackendsQuality_default_instance_);
}
::backends_quality::pb::BackendsQuality* resultHdr::mutable_backends_quality() {
  set_has_backends_quality();
  if (backends_quality_ == NULL) {
    backends_quality_ = new ::backends_quality::pb::BackendsQuality;
  }
  // @@protoc_insertion_point(field_mutable:resultHdr.backends_quality)
  return backends_quality_;
}
::backends_quality::pb::BackendsQuality* resultHdr::release_backends_quality() {
  // @@protoc_insertion_point(field_release:resultHdr.backends_quality)
  clear_has_backends_quality();
  ::backends_quality::pb::BackendsQuality* temp = backends_quality_;
  backends_quality_ = NULL;
  return temp;
}
void resultHdr::set_allocated_backends_quality(::backends_quality::pb::BackendsQuality* backends_quality) {
  delete backends_quality_;
  backends_quality_ = backends_quality;
  if (backends_quality) {
    set_has_backends_quality();
  } else {
    clear_has_backends_quality();
  }
  // @@protoc_insertion_point(field_set_allocated:resultHdr.backends_quality)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocInfo::kBackendIdFieldNumber;
const int DocInfo::kHdrFieldNumber;
const int DocInfo::kDocsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocInfo::DocInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stage0_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DocInfo)
}
DocInfo::DocInfo(const DocInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      docs_(from.docs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_backend_id()) {
    backend_id_ = new ::BackendId(*from.backend_id_);
  } else {
    backend_id_ = NULL;
  }
  if (from.has_hdr()) {
    hdr_ = new ::resultHdr(*from.hdr_);
  } else {
    hdr_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:DocInfo)
}

void DocInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&backend_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hdr_) -
      reinterpret_cast<char*>(&backend_id_)) + sizeof(hdr_));
}

DocInfo::~DocInfo() {
  // @@protoc_insertion_point(destructor:DocInfo)
  SharedDtor();
}

void DocInfo::SharedDtor() {
  if (this != internal_default_instance()) delete backend_id_;
  if (this != internal_default_instance()) delete hdr_;
}

void DocInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocInfo::descriptor() {
  protobuf_stage0_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stage0_5fcache_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocInfo& DocInfo::default_instance() {
  protobuf_stage0_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocInfo* DocInfo::New(::google::protobuf::Arena* arena) const {
  DocInfo* n = new DocInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DocInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  docs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(backend_id_ != NULL);
      backend_id_->::BackendId::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(hdr_ != NULL);
      hdr_->::resultHdr::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DocInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BackendId backend_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backend_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .resultHdr hdr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .stage0 docs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_docs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DocInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DocInfo)
  return false;
#undef DO_
}

void DocInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DocInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .BackendId backend_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->backend_id_, output);
  }

  // required .resultHdr hdr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->hdr_, output);
  }

  // repeated .stage0 docs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->docs(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DocInfo)
}

::google::protobuf::uint8* DocInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DocInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .BackendId backend_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->backend_id_, deterministic, target);
  }

  // required .resultHdr hdr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->hdr_, deterministic, target);
  }

  // repeated .stage0 docs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->docs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DocInfo)
  return target;
}

size_t DocInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DocInfo)
  size_t total_size = 0;

  if (has_backend_id()) {
    // required .BackendId backend_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->backend_id_);
  }

  if (has_hdr()) {
    // required .resultHdr hdr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hdr_);
  }

  return total_size;
}
size_t DocInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DocInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .BackendId backend_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->backend_id_);

    // required .resultHdr hdr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hdr_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .stage0 docs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->docs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->docs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DocInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DocInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DocInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DocInfo)
    MergeFrom(*source);
  }
}

void DocInfo::MergeFrom(const DocInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DocInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  docs_.MergeFrom(from.docs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_backend_id()->::BackendId::MergeFrom(from.backend_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_hdr()->::resultHdr::MergeFrom(from.hdr());
    }
  }
}

void DocInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DocInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocInfo::CopyFrom(const DocInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DocInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->docs())) return false;
  if (has_backend_id()) {
    if (!this->backend_id_->IsInitialized()) return false;
  }
  if (has_hdr()) {
    if (!this->hdr_->IsInitialized()) return false;
  }
  return true;
}

void DocInfo::Swap(DocInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocInfo::InternalSwap(DocInfo* other) {
  using std::swap;
  docs_.InternalSwap(&other->docs_);
  swap(backend_id_, other->backend_id_);
  swap(hdr_, other->hdr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocInfo::GetMetadata() const {
  protobuf_stage0_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stage0_5fcache_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocInfo

// required .BackendId backend_id = 1;
bool DocInfo::has_backend_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocInfo::set_has_backend_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DocInfo::clear_has_backend_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocInfo::clear_backend_id() {
  if (backend_id_ != NULL) backend_id_->::BackendId::Clear();
  clear_has_backend_id();
}
const ::BackendId& DocInfo::backend_id() const {
  const ::BackendId* p = backend_id_;
  // @@protoc_insertion_point(field_get:DocInfo.backend_id)
  return p != NULL ? *p : *reinterpret_cast<const ::BackendId*>(
      &::_BackendId_default_instance_);
}
::BackendId* DocInfo::mutable_backend_id() {
  set_has_backend_id();
  if (backend_id_ == NULL) {
    backend_id_ = new ::BackendId;
  }
  // @@protoc_insertion_point(field_mutable:DocInfo.backend_id)
  return backend_id_;
}
::BackendId* DocInfo::release_backend_id() {
  // @@protoc_insertion_point(field_release:DocInfo.backend_id)
  clear_has_backend_id();
  ::BackendId* temp = backend_id_;
  backend_id_ = NULL;
  return temp;
}
void DocInfo::set_allocated_backend_id(::BackendId* backend_id) {
  delete backend_id_;
  backend_id_ = backend_id;
  if (backend_id) {
    set_has_backend_id();
  } else {
    clear_has_backend_id();
  }
  // @@protoc_insertion_point(field_set_allocated:DocInfo.backend_id)
}

// required .resultHdr hdr = 2;
bool DocInfo::has_hdr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocInfo::set_has_hdr() {
  _has_bits_[0] |= 0x00000002u;
}
void DocInfo::clear_has_hdr() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocInfo::clear_hdr() {
  if (hdr_ != NULL) hdr_->::resultHdr::Clear();
  clear_has_hdr();
}
const ::resultHdr& DocInfo::hdr() const {
  const ::resultHdr* p = hdr_;
  // @@protoc_insertion_point(field_get:DocInfo.hdr)
  return p != NULL ? *p : *reinterpret_cast<const ::resultHdr*>(
      &::_resultHdr_default_instance_);
}
::resultHdr* DocInfo::mutable_hdr() {
  set_has_hdr();
  if (hdr_ == NULL) {
    hdr_ = new ::resultHdr;
  }
  // @@protoc_insertion_point(field_mutable:DocInfo.hdr)
  return hdr_;
}
::resultHdr* DocInfo::release_hdr() {
  // @@protoc_insertion_point(field_release:DocInfo.hdr)
  clear_has_hdr();
  ::resultHdr* temp = hdr_;
  hdr_ = NULL;
  return temp;
}
void DocInfo::set_allocated_hdr(::resultHdr* hdr) {
  delete hdr_;
  hdr_ = hdr;
  if (hdr) {
    set_has_hdr();
  } else {
    clear_has_hdr();
  }
  // @@protoc_insertion_point(field_set_allocated:DocInfo.hdr)
}

// repeated .stage0 docs = 3;
int DocInfo::docs_size() const {
  return docs_.size();
}
void DocInfo::clear_docs() {
  docs_.Clear();
}
const ::stage0& DocInfo::docs(int index) const {
  // @@protoc_insertion_point(field_get:DocInfo.docs)
  return docs_.Get(index);
}
::stage0* DocInfo::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:DocInfo.docs)
  return docs_.Mutable(index);
}
::stage0* DocInfo::add_docs() {
  // @@protoc_insertion_point(field_add:DocInfo.docs)
  return docs_.Add();
}
::google::protobuf::RepeatedPtrField< ::stage0 >*
DocInfo::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:DocInfo.docs)
  return &docs_;
}
const ::google::protobuf::RepeatedPtrField< ::stage0 >&
DocInfo::docs() const {
  // @@protoc_insertion_point(field_list:DocInfo.docs)
  return docs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stage0Info::kDocsFieldNumber;
const int Stage0Info::kBackendsListHashFieldNumber;
const int Stage0Info::kSmRevisionHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stage0Info::Stage0Info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stage0_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Stage0Info)
}
Stage0Info::Stage0Info(const Stage0Info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      docs_(from.docs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&backends_list_hash_, &from.backends_list_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&sm_revision_hash_) -
    reinterpret_cast<char*>(&backends_list_hash_)) + sizeof(sm_revision_hash_));
  // @@protoc_insertion_point(copy_constructor:Stage0Info)
}

void Stage0Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&backends_list_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sm_revision_hash_) -
      reinterpret_cast<char*>(&backends_list_hash_)) + sizeof(sm_revision_hash_));
}

Stage0Info::~Stage0Info() {
  // @@protoc_insertion_point(destructor:Stage0Info)
  SharedDtor();
}

void Stage0Info::SharedDtor() {
}

void Stage0Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stage0Info::descriptor() {
  protobuf_stage0_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stage0_5fcache_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stage0Info& Stage0Info::default_instance() {
  protobuf_stage0_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

Stage0Info* Stage0Info::New(::google::protobuf::Arena* arena) const {
  Stage0Info* n = new Stage0Info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stage0Info::Clear() {
// @@protoc_insertion_point(message_clear_start:Stage0Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  docs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&backends_list_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sm_revision_hash_) -
        reinterpret_cast<char*>(&backends_list_hash_)) + sizeof(sm_revision_hash_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stage0Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Stage0Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DocInfo docs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_docs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 backends_list_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_backends_list_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backends_list_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sm_revision_hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_sm_revision_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sm_revision_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Stage0Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Stage0Info)
  return false;
#undef DO_
}

void Stage0Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Stage0Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DocInfo docs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->docs(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 backends_list_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->backends_list_hash(), output);
  }

  // optional uint32 sm_revision_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sm_revision_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Stage0Info)
}

::google::protobuf::uint8* Stage0Info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Stage0Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DocInfo docs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->docs(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 backends_list_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->backends_list_hash(), target);
  }

  // optional uint32 sm_revision_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sm_revision_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Stage0Info)
  return target;
}

size_t Stage0Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Stage0Info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .DocInfo docs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->docs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->docs(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 backends_list_hash = 2;
    if (has_backends_list_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->backends_list_hash());
    }

    // optional uint32 sm_revision_hash = 3;
    if (has_sm_revision_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sm_revision_hash());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stage0Info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Stage0Info)
  GOOGLE_DCHECK_NE(&from, this);
  const Stage0Info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stage0Info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Stage0Info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Stage0Info)
    MergeFrom(*source);
  }
}

void Stage0Info::MergeFrom(const Stage0Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Stage0Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  docs_.MergeFrom(from.docs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      backends_list_hash_ = from.backends_list_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      sm_revision_hash_ = from.sm_revision_hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stage0Info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Stage0Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stage0Info::CopyFrom(const Stage0Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Stage0Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stage0Info::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->docs())) return false;
  return true;
}

void Stage0Info::Swap(Stage0Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stage0Info::InternalSwap(Stage0Info* other) {
  using std::swap;
  docs_.InternalSwap(&other->docs_);
  swap(backends_list_hash_, other->backends_list_hash_);
  swap(sm_revision_hash_, other->sm_revision_hash_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stage0Info::GetMetadata() const {
  protobuf_stage0_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stage0_5fcache_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stage0Info

// repeated .DocInfo docs = 1;
int Stage0Info::docs_size() const {
  return docs_.size();
}
void Stage0Info::clear_docs() {
  docs_.Clear();
}
const ::DocInfo& Stage0Info::docs(int index) const {
  // @@protoc_insertion_point(field_get:Stage0Info.docs)
  return docs_.Get(index);
}
::DocInfo* Stage0Info::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:Stage0Info.docs)
  return docs_.Mutable(index);
}
::DocInfo* Stage0Info::add_docs() {
  // @@protoc_insertion_point(field_add:Stage0Info.docs)
  return docs_.Add();
}
::google::protobuf::RepeatedPtrField< ::DocInfo >*
Stage0Info::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:Stage0Info.docs)
  return &docs_;
}
const ::google::protobuf::RepeatedPtrField< ::DocInfo >&
Stage0Info::docs() const {
  // @@protoc_insertion_point(field_list:Stage0Info.docs)
  return docs_;
}

// optional uint32 backends_list_hash = 2;
bool Stage0Info::has_backends_list_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Stage0Info::set_has_backends_list_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void Stage0Info::clear_has_backends_list_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void Stage0Info::clear_backends_list_hash() {
  backends_list_hash_ = 0u;
  clear_has_backends_list_hash();
}
::google::protobuf::uint32 Stage0Info::backends_list_hash() const {
  // @@protoc_insertion_point(field_get:Stage0Info.backends_list_hash)
  return backends_list_hash_;
}
void Stage0Info::set_backends_list_hash(::google::protobuf::uint32 value) {
  set_has_backends_list_hash();
  backends_list_hash_ = value;
  // @@protoc_insertion_point(field_set:Stage0Info.backends_list_hash)
}

// optional uint32 sm_revision_hash = 3;
bool Stage0Info::has_sm_revision_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Stage0Info::set_has_sm_revision_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void Stage0Info::clear_has_sm_revision_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void Stage0Info::clear_sm_revision_hash() {
  sm_revision_hash_ = 0u;
  clear_has_sm_revision_hash();
}
::google::protobuf::uint32 Stage0Info::sm_revision_hash() const {
  // @@protoc_insertion_point(field_get:Stage0Info.sm_revision_hash)
  return sm_revision_hash_;
}
void Stage0Info::set_sm_revision_hash(::google::protobuf::uint32 value) {
  set_has_sm_revision_hash();
  sm_revision_hash_ = value;
  // @@protoc_insertion_point(field_set:Stage0Info.sm_revision_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
