// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subj_schema.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "subj_schema.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class ThingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Thing>
     _instance;
} _Thing_default_instance_;
class RatingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Rating>
     _instance;
} _Rating_default_instance_;
class AggregateRatingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AggregateRating>
     _instance;
} _AggregateRating_default_instance_;
class UrlArrayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UrlArray>
     _instance;
} _UrlArray_default_instance_;
class StringArrayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StringArray>
     _instance;
} _StringArray_default_instance_;
class ThumbArrayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ThumbArray>
     _instance;
} _ThumbArray_default_instance_;
class CreativeWorkDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreativeWork>
     _instance;
} _CreativeWork_default_instance_;
class PersonDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Person>
     _instance;
} _Person_default_instance_;
class PersonArrayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PersonArray>
     _instance;
} _PersonArray_default_instance_;
class MovieDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Movie>
     _instance;
} _Movie_default_instance_;
class MovieArrayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MovieArray>
     _instance;
} _MovieArray_default_instance_;
class TVEpisodeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TVEpisode>
     _instance;
} _TVEpisode_default_instance_;
class TVEpisodeArrayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TVEpisodeArray>
     _instance;
} _TVEpisodeArray_default_instance_;
class TVSeasonDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TVSeason>
     _instance;
} _TVSeason_default_instance_;
class TVSeasonArrayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TVSeasonArray>
     _instance;
} _TVSeasonArray_default_instance_;
class TVSeriesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TVSeries>
     _instance;
} _TVSeries_default_instance_;
class ParsedSubjectDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ParsedSubject>
     _instance;
} _ParsedSubject_default_instance_;

namespace protobuf_subj_5fschema_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thing, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thing, description_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rating, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rating, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rating, ratingvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rating, bestrating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rating, worstrating_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregateRating, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregateRating, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregateRating, rating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregateRating, ratingcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregateRating, reviewcount_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlArray, urls_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringArray, values_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbArray, thumbs_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreativeWork, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreativeWork, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreativeWork, thing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreativeWork, headline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreativeWork, alternativeheadline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreativeWork, datepublished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreativeWork, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreativeWork, rating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreativeWork, genres_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreativeWork, thumbnailurls_),
  4,
  0,
  1,
  2,
  3,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, thing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, altname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, givenname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, familyname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, additionalname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, gender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, birthdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, deathdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, thumbnailurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, imagesurls_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonArray, persons_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Movie, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Movie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Movie, work_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Movie, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Movie, countries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Movie, actors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Movie, directors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Movie, persons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Movie, screenwriters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Movie, imagesurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Movie, stillsurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Movie, trailerurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Movie, officialurls_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArray, movies_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVEpisode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVEpisode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVEpisode, work_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVEpisode, startdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVEpisode, episodenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVEpisode, partofseason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVEpisode, partoftvseries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVEpisode, imagesurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVEpisode, stillsurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVEpisode, trailerurls_),
  1,
  0,
  5,
  6,
  7,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVEpisodeArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVEpisodeArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVEpisodeArray, episodes_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeason, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeason, work_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeason, seasonnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeason, startdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeason, enddate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeason, partoftvseries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeason, numberofepisodes_),
  2,
  3,
  0,
  1,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeasonArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeasonArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeasonArray, seasons_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeries, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeries, work_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeries, startdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeries, enddate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeries, numberofepisodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeries, actors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeries, directors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeries, persons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeries, screenwriters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeries, imagesurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeries, stillsurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeries, trailerurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TVSeries, officialurls_),
  2,
  0,
  1,
  11,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedSubject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedSubject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedSubject, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedSubject, thing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedSubject, person_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedSubject, movie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedSubject, tvepisode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedSubject, tvseason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedSubject, telecast_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(Thing)},
  { 9, 17, sizeof(Rating)},
  { 20, 28, sizeof(AggregateRating)},
  { 31, 37, sizeof(UrlArray)},
  { 38, 44, sizeof(StringArray)},
  { 45, 51, sizeof(ThumbArray)},
  { 52, 65, sizeof(CreativeWork)},
  { 73, 88, sizeof(Person)},
  { 98, 104, sizeof(PersonArray)},
  { 105, 121, sizeof(Movie)},
  { 132, 138, sizeof(MovieArray)},
  { 139, 152, sizeof(TVEpisode)},
  { 160, 166, sizeof(TVEpisodeArray)},
  { 167, 178, sizeof(TVSeason)},
  { 184, 190, sizeof(TVSeasonArray)},
  { 191, 208, sizeof(TVSeries)},
  { 220, 232, sizeof(ParsedSubject)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Thing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Rating_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AggregateRating_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UrlArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StringArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ThumbArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreativeWork_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Person_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PersonArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Movie_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MovieArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TVEpisode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TVEpisodeArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TVSeason_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TVSeasonArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TVSeries_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParsedSubject_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "subj_schema.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::parsing::img::protobuf_image_5fdefs_2eproto::InitDefaults();
  _Thing_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Thing_default_instance_);_Rating_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Rating_default_instance_);_AggregateRating_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AggregateRating_default_instance_);_UrlArray_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UrlArray_default_instance_);_StringArray_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StringArray_default_instance_);_ThumbArray_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ThumbArray_default_instance_);_CreativeWork_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreativeWork_default_instance_);_Person_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Person_default_instance_);_PersonArray_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PersonArray_default_instance_);_Movie_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Movie_default_instance_);_MovieArray_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MovieArray_default_instance_);_TVEpisode_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TVEpisode_default_instance_);_TVEpisodeArray_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TVEpisodeArray_default_instance_);_TVSeason_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TVSeason_default_instance_);_TVSeasonArray_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TVSeasonArray_default_instance_);_TVSeries_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TVSeries_default_instance_);_ParsedSubject_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ParsedSubject_default_instance_);_AggregateRating_default_instance_._instance.get_mutable()->rating_ = const_cast< ::ru::mail::go::webbase::blobs::Rating*>(
      ::ru::mail::go::webbase::blobs::Rating::internal_default_instance());
  _CreativeWork_default_instance_._instance.get_mutable()->thing_ = const_cast< ::ru::mail::go::webbase::blobs::Thing*>(
      ::ru::mail::go::webbase::blobs::Thing::internal_default_instance());
  _CreativeWork_default_instance_._instance.get_mutable()->rating_ = const_cast< ::ru::mail::go::webbase::blobs::Rating*>(
      ::ru::mail::go::webbase::blobs::Rating::internal_default_instance());
  _CreativeWork_default_instance_._instance.get_mutable()->genres_ = const_cast< ::ru::mail::go::webbase::blobs::StringArray*>(
      ::ru::mail::go::webbase::blobs::StringArray::internal_default_instance());
  _CreativeWork_default_instance_._instance.get_mutable()->thumbnailurls_ = const_cast< ::ru::mail::go::webbase::blobs::UrlArray*>(
      ::ru::mail::go::webbase::blobs::UrlArray::internal_default_instance());
  _Person_default_instance_._instance.get_mutable()->thing_ = const_cast< ::ru::mail::go::webbase::blobs::Thing*>(
      ::ru::mail::go::webbase::blobs::Thing::internal_default_instance());
  _Person_default_instance_._instance.get_mutable()->thumbnailurls_ = const_cast< ::ru::mail::go::webbase::blobs::UrlArray*>(
      ::ru::mail::go::webbase::blobs::UrlArray::internal_default_instance());
  _Person_default_instance_._instance.get_mutable()->imagesurls_ = const_cast< ::ru::mail::go::webbase::blobs::UrlArray*>(
      ::ru::mail::go::webbase::blobs::UrlArray::internal_default_instance());
  _Movie_default_instance_._instance.get_mutable()->work_ = const_cast< ::ru::mail::go::webbase::blobs::CreativeWork*>(
      ::ru::mail::go::webbase::blobs::CreativeWork::internal_default_instance());
  _Movie_default_instance_._instance.get_mutable()->countries_ = const_cast< ::ru::mail::go::webbase::blobs::StringArray*>(
      ::ru::mail::go::webbase::blobs::StringArray::internal_default_instance());
  _Movie_default_instance_._instance.get_mutable()->actors_ = const_cast< ::ru::mail::go::webbase::blobs::StringArray*>(
      ::ru::mail::go::webbase::blobs::StringArray::internal_default_instance());
  _Movie_default_instance_._instance.get_mutable()->directors_ = const_cast< ::ru::mail::go::webbase::blobs::StringArray*>(
      ::ru::mail::go::webbase::blobs::StringArray::internal_default_instance());
  _Movie_default_instance_._instance.get_mutable()->persons_ = const_cast< ::ru::mail::go::webbase::blobs::StringArray*>(
      ::ru::mail::go::webbase::blobs::StringArray::internal_default_instance());
  _Movie_default_instance_._instance.get_mutable()->screenwriters_ = const_cast< ::ru::mail::go::webbase::blobs::StringArray*>(
      ::ru::mail::go::webbase::blobs::StringArray::internal_default_instance());
  _Movie_default_instance_._instance.get_mutable()->imagesurls_ = const_cast< ::ru::mail::go::webbase::blobs::UrlArray*>(
      ::ru::mail::go::webbase::blobs::UrlArray::internal_default_instance());
  _Movie_default_instance_._instance.get_mutable()->stillsurls_ = const_cast< ::ru::mail::go::webbase::blobs::UrlArray*>(
      ::ru::mail::go::webbase::blobs::UrlArray::internal_default_instance());
  _Movie_default_instance_._instance.get_mutable()->trailerurls_ = const_cast< ::ru::mail::go::webbase::blobs::UrlArray*>(
      ::ru::mail::go::webbase::blobs::UrlArray::internal_default_instance());
  _Movie_default_instance_._instance.get_mutable()->officialurls_ = const_cast< ::ru::mail::go::webbase::blobs::UrlArray*>(
      ::ru::mail::go::webbase::blobs::UrlArray::internal_default_instance());
  _TVEpisode_default_instance_._instance.get_mutable()->work_ = const_cast< ::ru::mail::go::webbase::blobs::CreativeWork*>(
      ::ru::mail::go::webbase::blobs::CreativeWork::internal_default_instance());
  _TVEpisode_default_instance_._instance.get_mutable()->imagesurls_ = const_cast< ::ru::mail::go::webbase::blobs::UrlArray*>(
      ::ru::mail::go::webbase::blobs::UrlArray::internal_default_instance());
  _TVEpisode_default_instance_._instance.get_mutable()->stillsurls_ = const_cast< ::ru::mail::go::webbase::blobs::UrlArray*>(
      ::ru::mail::go::webbase::blobs::UrlArray::internal_default_instance());
  _TVEpisode_default_instance_._instance.get_mutable()->trailerurls_ = const_cast< ::ru::mail::go::webbase::blobs::UrlArray*>(
      ::ru::mail::go::webbase::blobs::UrlArray::internal_default_instance());
  _TVSeason_default_instance_._instance.get_mutable()->work_ = const_cast< ::ru::mail::go::webbase::blobs::CreativeWork*>(
      ::ru::mail::go::webbase::blobs::CreativeWork::internal_default_instance());
  _TVSeries_default_instance_._instance.get_mutable()->work_ = const_cast< ::ru::mail::go::webbase::blobs::CreativeWork*>(
      ::ru::mail::go::webbase::blobs::CreativeWork::internal_default_instance());
  _TVSeries_default_instance_._instance.get_mutable()->actors_ = const_cast< ::ru::mail::go::webbase::blobs::StringArray*>(
      ::ru::mail::go::webbase::blobs::StringArray::internal_default_instance());
  _TVSeries_default_instance_._instance.get_mutable()->directors_ = const_cast< ::ru::mail::go::webbase::blobs::StringArray*>(
      ::ru::mail::go::webbase::blobs::StringArray::internal_default_instance());
  _TVSeries_default_instance_._instance.get_mutable()->persons_ = const_cast< ::ru::mail::go::webbase::blobs::StringArray*>(
      ::ru::mail::go::webbase::blobs::StringArray::internal_default_instance());
  _TVSeries_default_instance_._instance.get_mutable()->screenwriters_ = const_cast< ::ru::mail::go::webbase::blobs::StringArray*>(
      ::ru::mail::go::webbase::blobs::StringArray::internal_default_instance());
  _TVSeries_default_instance_._instance.get_mutable()->imagesurls_ = const_cast< ::ru::mail::go::webbase::blobs::UrlArray*>(
      ::ru::mail::go::webbase::blobs::UrlArray::internal_default_instance());
  _TVSeries_default_instance_._instance.get_mutable()->stillsurls_ = const_cast< ::ru::mail::go::webbase::blobs::UrlArray*>(
      ::ru::mail::go::webbase::blobs::UrlArray::internal_default_instance());
  _TVSeries_default_instance_._instance.get_mutable()->trailerurls_ = const_cast< ::ru::mail::go::webbase::blobs::UrlArray*>(
      ::ru::mail::go::webbase::blobs::UrlArray::internal_default_instance());
  _TVSeries_default_instance_._instance.get_mutable()->officialurls_ = const_cast< ::ru::mail::go::webbase::blobs::UrlArray*>(
      ::ru::mail::go::webbase::blobs::UrlArray::internal_default_instance());
  _ParsedSubject_default_instance_._instance.get_mutable()->thing_ = const_cast< ::ru::mail::go::webbase::blobs::Thing*>(
      ::ru::mail::go::webbase::blobs::Thing::internal_default_instance());
  _ParsedSubject_default_instance_._instance.get_mutable()->person_ = const_cast< ::ru::mail::go::webbase::blobs::Person*>(
      ::ru::mail::go::webbase::blobs::Person::internal_default_instance());
  _ParsedSubject_default_instance_._instance.get_mutable()->movie_ = const_cast< ::ru::mail::go::webbase::blobs::Movie*>(
      ::ru::mail::go::webbase::blobs::Movie::internal_default_instance());
  _ParsedSubject_default_instance_._instance.get_mutable()->tvepisode_ = const_cast< ::ru::mail::go::webbase::blobs::TVEpisode*>(
      ::ru::mail::go::webbase::blobs::TVEpisode::internal_default_instance());
  _ParsedSubject_default_instance_._instance.get_mutable()->tvseason_ = const_cast< ::ru::mail::go::webbase::blobs::TVSeason*>(
      ::ru::mail::go::webbase::blobs::TVSeason::internal_default_instance());
  _ParsedSubject_default_instance_._instance.get_mutable()->telecast_ = const_cast< ::ru::mail::go::webbase::blobs::TVSeries*>(
      ::ru::mail::go::webbase::blobs::TVSeries::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021subj_schema.proto\022\030ru.mail.go.webbase."
      "blobs\032\020image_defs.proto\")\n\005Thing\022\013\n\003url\030"
      "\001 \001(\t\022\023\n\013description\030\002 \001(\t\"F\n\006Rating\022\023\n\013"
      "ratingValue\030\001 \002(\t\022\022\n\nbestRating\030\002 \001(\t\022\023\n"
      "\013worstRating\030\003 \001(\t\"m\n\017AggregateRating\0220\n"
      "\006rating\030\001 \001(\0132 .ru.mail.go.webbase.blobs"
      ".Rating\022\023\n\013ratingCount\030\002 \002(\r\022\023\n\013reviewCo"
      "unt\030\003 \001(\r\"\030\n\010UrlArray\022\014\n\004urls\030\001 \003(\t\"\035\n\013S"
      "tringArray\022\016\n\006values\030\001 \003(\t\"C\n\nThumbArray"
      "\0225\n\006thumbs\030\001 \003(\0132%.ru.mail.go.webbase.pa"
      "rsing.img.Thumb\"\266\002\n\014CreativeWork\022.\n\005thin"
      "g\030\001 \001(\0132\037.ru.mail.go.webbase.blobs.Thing"
      "\022\020\n\010headline\030\002 \001(\t\022\033\n\023alternativeHeadlin"
      "e\030\003 \001(\t\022\025\n\rdatePublished\030\004 \001(\t\022\014\n\004year\030\005"
      " \001(\t\0220\n\006rating\030\006 \001(\0132 .ru.mail.go.webbas"
      "e.blobs.Rating\0225\n\006genres\030\007 \001(\0132%.ru.mail"
      ".go.webbase.blobs.StringArray\0229\n\rthumbna"
      "ilUrls\030\010 \001(\0132\".ru.mail.go.webbase.blobs."
      "UrlArray\"\261\002\n\006Person\022.\n\005thing\030\001 \001(\0132\037.ru."
      "mail.go.webbase.blobs.Thing\022\017\n\007altName\030\002"
      " \001(\t\022\021\n\tgivenName\030\003 \002(\t\022\022\n\nfamilyName\030\004 "
      "\001(\t\022\026\n\016additionalName\030\005 \001(\t\022\016\n\006gender\030\006 "
      "\001(\t\022\021\n\tbirthDate\030\007 \001(\t\022\021\n\tdeathDate\030\010 \001("
      "\t\0229\n\rthumbnailUrls\030\t \001(\0132\".ru.mail.go.we"
      "bbase.blobs.UrlArray\0226\n\nimagesUrls\030\024 \001(\013"
      "2\".ru.mail.go.webbase.blobs.UrlArray\"@\n\013"
      "PersonArray\0221\n\007persons\030\001 \003(\0132 .ru.mail.g"
      "o.webbase.blobs.Person\"\323\004\n\005Movie\0224\n\004work"
      "\030\001 \001(\0132&.ru.mail.go.webbase.blobs.Creati"
      "veWork\022\020\n\010duration\030\002 \001(\t\0228\n\tcountries\030\003 "
      "\001(\0132%.ru.mail.go.webbase.blobs.StringArr"
      "ay\0225\n\006actors\030\004 \001(\0132%.ru.mail.go.webbase."
      "blobs.StringArray\0228\n\tdirectors\030\005 \001(\0132%.r"
      "u.mail.go.webbase.blobs.StringArray\0226\n\007p"
      "ersons\030\006 \001(\0132%.ru.mail.go.webbase.blobs."
      "StringArray\022<\n\rscreenwriters\030\007 \001(\0132%.ru."
      "mail.go.webbase.blobs.StringArray\0226\n\nima"
      "gesUrls\030\024 \001(\0132\".ru.mail.go.webbase.blobs"
      ".UrlArray\0226\n\nstillsUrls\030\025 \001(\0132\".ru.mail."
      "go.webbase.blobs.UrlArray\0227\n\013trailerUrls"
      "\030\026 \001(\0132\".ru.mail.go.webbase.blobs.UrlArr"
      "ay\0228\n\014officialUrls\030\027 \001(\0132\".ru.mail.go.we"
      "bbase.blobs.UrlArray\"=\n\nMovieArray\022/\n\006mo"
      "vies\030\001 \003(\0132\037.ru.mail.go.webbase.blobs.Mo"
      "vie\"\302\002\n\tTVEpisode\0224\n\004work\030\001 \001(\0132&.ru.mai"
      "l.go.webbase.blobs.CreativeWork\022\021\n\tstart"
      "Date\030\002 \001(\t\022\025\n\repisodeNumber\030\003 \001(\r\022\024\n\014par"
      "tOfSeason\030\004 \001(\r\022\026\n\016partOfTVSeries\030\005 \001(\r\022"
      "6\n\nimagesUrls\030\024 \001(\0132\".ru.mail.go.webbase"
      ".blobs.UrlArray\0226\n\nstillsUrls\030\025 \001(\0132\".ru"
      ".mail.go.webbase.blobs.UrlArray\0227\n\013trail"
      "erUrls\030\026 \001(\0132\".ru.mail.go.webbase.blobs."
      "UrlArray\"G\n\016TVEpisodeArray\0225\n\010episodes\030\001"
      " \003(\0132#.ru.mail.go.webbase.blobs.TVEpisod"
      "e\"\254\001\n\010TVSeason\0224\n\004work\030\001 \001(\0132&.ru.mail.g"
      "o.webbase.blobs.CreativeWork\022\024\n\014seasonNu"
      "mber\030\002 \002(\r\022\021\n\tstartDate\030\003 \001(\t\022\017\n\007endDate"
      "\030\004 \001(\t\022\026\n\016partOfTVSeries\030\005 \001(\r\022\030\n\020number"
      "OfEpisodes\030\006 \001(\r\"D\n\rTVSeasonArray\0223\n\007sea"
      "sons\030\001 \003(\0132\".ru.mail.go.webbase.blobs.TV"
      "Season\"\310\004\n\010TVSeries\0224\n\004work\030\001 \001(\0132&.ru.m"
      "ail.go.webbase.blobs.CreativeWork\022\021\n\tsta"
      "rtDate\030\002 \001(\t\022\017\n\007endDate\030\003 \001(\t\022\030\n\020numberO"
      "fEpisodes\030\004 \001(\r\0225\n\006actors\030\005 \001(\0132%.ru.mai"
      "l.go.webbase.blobs.StringArray\0228\n\tdirect"
      "ors\030\006 \001(\0132%.ru.mail.go.webbase.blobs.Str"
      "ingArray\0226\n\007persons\030\007 \001(\0132%.ru.mail.go.w"
      "ebbase.blobs.StringArray\022<\n\rscreenwriter"
      "s\030\010 \001(\0132%.ru.mail.go.webbase.blobs.Strin"
      "gArray\0226\n\nimagesUrls\030\024 \001(\0132\".ru.mail.go."
      "webbase.blobs.UrlArray\0226\n\nstillsUrls\030\025 \001"
      "(\0132\".ru.mail.go.webbase.blobs.UrlArray\0227"
      "\n\013trailerUrls\030\026 \001(\0132\".ru.mail.go.webbase"
      ".blobs.UrlArray\0228\n\014officialUrls\030\027 \001(\0132\"."
      "ru.mail.go.webbase.blobs.UrlArray\"\326\003\n\rPa"
      "rsedSubject\022:\n\004type\030\001 \002(\0162,.ru.mail.go.w"
      "ebbase.blobs.ParsedSubject.Type\022.\n\005thing"
      "\030\002 \001(\0132\037.ru.mail.go.webbase.blobs.Thing\022"
      "0\n\006person\030\003 \001(\0132 .ru.mail.go.webbase.blo"
      "bs.Person\022.\n\005movie\030\004 \001(\0132\037.ru.mail.go.we"
      "bbase.blobs.Movie\0226\n\ttvepisode\030\005 \001(\0132#.r"
      "u.mail.go.webbase.blobs.TVEpisode\0224\n\010tvs"
      "eason\030\006 \001(\0132\".ru.mail.go.webbase.blobs.T"
      "VSeason\0224\n\010telecast\030\007 \001(\0132\".ru.mail.go.w"
      "ebbase.blobs.TVSeries\"S\n\004Type\022\t\n\005Thing\020\002"
      "\022\n\n\006Person\020\003\022\t\n\005Movie\020\004\022\r\n\tTVEpisode\020\005\022\014"
      "\n\010TVSeason\020\006\022\014\n\010Telecast\020\007B\014B\nSubjSchema"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3480);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "subj_schema.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::parsing::img::protobuf_image_5fdefs_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_subj_5fschema_2eproto

const ::google::protobuf::EnumDescriptor* ParsedSubject_Type_descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_enum_descriptors[0];
}
bool ParsedSubject_Type_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ParsedSubject_Type ParsedSubject::Thing;
const ParsedSubject_Type ParsedSubject::Person;
const ParsedSubject_Type ParsedSubject::Movie;
const ParsedSubject_Type ParsedSubject::TVEpisode;
const ParsedSubject_Type ParsedSubject::TVSeason;
const ParsedSubject_Type ParsedSubject::Telecast;
const ParsedSubject_Type ParsedSubject::Type_MIN;
const ParsedSubject_Type ParsedSubject::Type_MAX;
const int ParsedSubject::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Thing::kUrlFieldNumber;
const int Thing::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Thing::Thing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.Thing)
}
Thing::Thing(const Thing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.Thing)
}

void Thing::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Thing::~Thing() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.Thing)
  SharedDtor();
}

void Thing::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Thing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Thing::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Thing& Thing::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

Thing* Thing::New(::google::protobuf::Arena* arena) const {
  Thing* n = new Thing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Thing::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.Thing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Thing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.Thing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Thing.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Thing.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.Thing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.Thing)
  return false;
#undef DO_
}

void Thing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.Thing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Thing.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Thing.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.Thing)
}

::google::protobuf::uint8* Thing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.Thing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Thing.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Thing.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.Thing)
  return target;
}

size_t Thing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.Thing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Thing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.Thing)
  GOOGLE_DCHECK_NE(&from, this);
  const Thing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Thing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.Thing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.Thing)
    MergeFrom(*source);
  }
}

void Thing::MergeFrom(const Thing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.Thing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
  }
}

void Thing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.Thing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Thing::CopyFrom(const Thing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.Thing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Thing::IsInitialized() const {
  return true;
}

void Thing::Swap(Thing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Thing::InternalSwap(Thing* other) {
  using std::swap;
  url_.Swap(&other->url_);
  description_.Swap(&other->description_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Thing::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Thing

// optional string url = 1;
bool Thing::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Thing::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void Thing::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void Thing::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& Thing::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Thing.url)
  return url_.GetNoArena();
}
void Thing::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Thing.url)
}
#if LANG_CXX11
void Thing::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Thing.url)
}
#endif
void Thing::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Thing.url)
}
void Thing::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Thing.url)
}
::std::string* Thing::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Thing.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Thing::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Thing.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Thing::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Thing.url)
}

// optional string description = 2;
bool Thing::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Thing::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void Thing::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void Thing::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& Thing::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Thing.description)
  return description_.GetNoArena();
}
void Thing::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Thing.description)
}
#if LANG_CXX11
void Thing::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Thing.description)
}
#endif
void Thing::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Thing.description)
}
void Thing::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Thing.description)
}
::std::string* Thing::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Thing.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Thing::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Thing.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Thing::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Thing.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rating::kRatingValueFieldNumber;
const int Rating::kBestRatingFieldNumber;
const int Rating::kWorstRatingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rating::Rating()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.Rating)
}
Rating::Rating(const Rating& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ratingvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ratingvalue()) {
    ratingvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ratingvalue_);
  }
  bestrating_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bestrating()) {
    bestrating_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bestrating_);
  }
  worstrating_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_worstrating()) {
    worstrating_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worstrating_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.Rating)
}

void Rating::SharedCtor() {
  _cached_size_ = 0;
  ratingvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bestrating_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worstrating_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Rating::~Rating() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.Rating)
  SharedDtor();
}

void Rating::SharedDtor() {
  ratingvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bestrating_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worstrating_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Rating::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rating::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rating& Rating::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

Rating* Rating::New(::google::protobuf::Arena* arena) const {
  Rating* n = new Rating;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rating::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.Rating)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!ratingvalue_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ratingvalue_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!bestrating_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bestrating_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!worstrating_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*worstrating_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Rating::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.Rating)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ratingValue = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ratingvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ratingvalue().data(), static_cast<int>(this->ratingvalue().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Rating.ratingValue");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bestRating = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bestrating()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bestrating().data(), static_cast<int>(this->bestrating().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Rating.bestRating");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string worstRating = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_worstrating()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->worstrating().data(), static_cast<int>(this->worstrating().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Rating.worstRating");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.Rating)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.Rating)
  return false;
#undef DO_
}

void Rating::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.Rating)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ratingValue = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ratingvalue().data(), static_cast<int>(this->ratingvalue().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Rating.ratingValue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ratingvalue(), output);
  }

  // optional string bestRating = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bestrating().data(), static_cast<int>(this->bestrating().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Rating.bestRating");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bestrating(), output);
  }

  // optional string worstRating = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->worstrating().data(), static_cast<int>(this->worstrating().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Rating.worstRating");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->worstrating(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.Rating)
}

::google::protobuf::uint8* Rating::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.Rating)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ratingValue = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ratingvalue().data(), static_cast<int>(this->ratingvalue().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Rating.ratingValue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ratingvalue(), target);
  }

  // optional string bestRating = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bestrating().data(), static_cast<int>(this->bestrating().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Rating.bestRating");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bestrating(), target);
  }

  // optional string worstRating = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->worstrating().data(), static_cast<int>(this->worstrating().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Rating.worstRating");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->worstrating(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.Rating)
  return target;
}

size_t Rating::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.Rating)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string ratingValue = 1;
  if (has_ratingvalue()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ratingvalue());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string bestRating = 2;
    if (has_bestrating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bestrating());
    }

    // optional string worstRating = 3;
    if (has_worstrating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->worstrating());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rating::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.Rating)
  GOOGLE_DCHECK_NE(&from, this);
  const Rating* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rating>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.Rating)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.Rating)
    MergeFrom(*source);
  }
}

void Rating::MergeFrom(const Rating& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.Rating)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ratingvalue();
      ratingvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ratingvalue_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bestrating();
      bestrating_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bestrating_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_worstrating();
      worstrating_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worstrating_);
    }
  }
}

void Rating::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.Rating)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rating::CopyFrom(const Rating& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.Rating)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rating::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Rating::Swap(Rating* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rating::InternalSwap(Rating* other) {
  using std::swap;
  ratingvalue_.Swap(&other->ratingvalue_);
  bestrating_.Swap(&other->bestrating_);
  worstrating_.Swap(&other->worstrating_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rating::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rating

// required string ratingValue = 1;
bool Rating::has_ratingvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Rating::set_has_ratingvalue() {
  _has_bits_[0] |= 0x00000001u;
}
void Rating::clear_has_ratingvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
void Rating::clear_ratingvalue() {
  ratingvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ratingvalue();
}
const ::std::string& Rating::ratingvalue() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Rating.ratingValue)
  return ratingvalue_.GetNoArena();
}
void Rating::set_ratingvalue(const ::std::string& value) {
  set_has_ratingvalue();
  ratingvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Rating.ratingValue)
}
#if LANG_CXX11
void Rating::set_ratingvalue(::std::string&& value) {
  set_has_ratingvalue();
  ratingvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Rating.ratingValue)
}
#endif
void Rating::set_ratingvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ratingvalue();
  ratingvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Rating.ratingValue)
}
void Rating::set_ratingvalue(const char* value, size_t size) {
  set_has_ratingvalue();
  ratingvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Rating.ratingValue)
}
::std::string* Rating::mutable_ratingvalue() {
  set_has_ratingvalue();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Rating.ratingValue)
  return ratingvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Rating::release_ratingvalue() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Rating.ratingValue)
  clear_has_ratingvalue();
  return ratingvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Rating::set_allocated_ratingvalue(::std::string* ratingvalue) {
  if (ratingvalue != NULL) {
    set_has_ratingvalue();
  } else {
    clear_has_ratingvalue();
  }
  ratingvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ratingvalue);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Rating.ratingValue)
}

// optional string bestRating = 2;
bool Rating::has_bestrating() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Rating::set_has_bestrating() {
  _has_bits_[0] |= 0x00000002u;
}
void Rating::clear_has_bestrating() {
  _has_bits_[0] &= ~0x00000002u;
}
void Rating::clear_bestrating() {
  bestrating_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bestrating();
}
const ::std::string& Rating::bestrating() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Rating.bestRating)
  return bestrating_.GetNoArena();
}
void Rating::set_bestrating(const ::std::string& value) {
  set_has_bestrating();
  bestrating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Rating.bestRating)
}
#if LANG_CXX11
void Rating::set_bestrating(::std::string&& value) {
  set_has_bestrating();
  bestrating_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Rating.bestRating)
}
#endif
void Rating::set_bestrating(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bestrating();
  bestrating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Rating.bestRating)
}
void Rating::set_bestrating(const char* value, size_t size) {
  set_has_bestrating();
  bestrating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Rating.bestRating)
}
::std::string* Rating::mutable_bestrating() {
  set_has_bestrating();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Rating.bestRating)
  return bestrating_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Rating::release_bestrating() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Rating.bestRating)
  clear_has_bestrating();
  return bestrating_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Rating::set_allocated_bestrating(::std::string* bestrating) {
  if (bestrating != NULL) {
    set_has_bestrating();
  } else {
    clear_has_bestrating();
  }
  bestrating_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bestrating);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Rating.bestRating)
}

// optional string worstRating = 3;
bool Rating::has_worstrating() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Rating::set_has_worstrating() {
  _has_bits_[0] |= 0x00000004u;
}
void Rating::clear_has_worstrating() {
  _has_bits_[0] &= ~0x00000004u;
}
void Rating::clear_worstrating() {
  worstrating_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_worstrating();
}
const ::std::string& Rating::worstrating() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Rating.worstRating)
  return worstrating_.GetNoArena();
}
void Rating::set_worstrating(const ::std::string& value) {
  set_has_worstrating();
  worstrating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Rating.worstRating)
}
#if LANG_CXX11
void Rating::set_worstrating(::std::string&& value) {
  set_has_worstrating();
  worstrating_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Rating.worstRating)
}
#endif
void Rating::set_worstrating(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_worstrating();
  worstrating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Rating.worstRating)
}
void Rating::set_worstrating(const char* value, size_t size) {
  set_has_worstrating();
  worstrating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Rating.worstRating)
}
::std::string* Rating::mutable_worstrating() {
  set_has_worstrating();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Rating.worstRating)
  return worstrating_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Rating::release_worstrating() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Rating.worstRating)
  clear_has_worstrating();
  return worstrating_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Rating::set_allocated_worstrating(::std::string* worstrating) {
  if (worstrating != NULL) {
    set_has_worstrating();
  } else {
    clear_has_worstrating();
  }
  worstrating_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worstrating);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Rating.worstRating)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AggregateRating::kRatingFieldNumber;
const int AggregateRating::kRatingCountFieldNumber;
const int AggregateRating::kReviewCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AggregateRating::AggregateRating()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.AggregateRating)
}
AggregateRating::AggregateRating(const AggregateRating& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rating()) {
    rating_ = new ::ru::mail::go::webbase::blobs::Rating(*from.rating_);
  } else {
    rating_ = NULL;
  }
  ::memcpy(&ratingcount_, &from.ratingcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&reviewcount_) -
    reinterpret_cast<char*>(&ratingcount_)) + sizeof(reviewcount_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.AggregateRating)
}

void AggregateRating::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rating_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reviewcount_) -
      reinterpret_cast<char*>(&rating_)) + sizeof(reviewcount_));
}

AggregateRating::~AggregateRating() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.AggregateRating)
  SharedDtor();
}

void AggregateRating::SharedDtor() {
  if (this != internal_default_instance()) delete rating_;
}

void AggregateRating::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AggregateRating::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AggregateRating& AggregateRating::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

AggregateRating* AggregateRating::New(::google::protobuf::Arena* arena) const {
  AggregateRating* n = new AggregateRating;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AggregateRating::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.AggregateRating)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_rating()) {
    GOOGLE_DCHECK(rating_ != NULL);
    rating_->::ru::mail::go::webbase::blobs::Rating::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&ratingcount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reviewcount_) -
        reinterpret_cast<char*>(&ratingcount_)) + sizeof(reviewcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AggregateRating::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.AggregateRating)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.Rating rating = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rating()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ratingCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ratingcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ratingcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reviewCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_reviewcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reviewcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.AggregateRating)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.AggregateRating)
  return false;
#undef DO_
}

void AggregateRating::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.AggregateRating)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.Rating rating = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rating_, output);
  }

  // required uint32 ratingCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ratingcount(), output);
  }

  // optional uint32 reviewCount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reviewcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.AggregateRating)
}

::google::protobuf::uint8* AggregateRating::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.AggregateRating)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.Rating rating = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->rating_, deterministic, target);
  }

  // required uint32 ratingCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ratingcount(), target);
  }

  // optional uint32 reviewCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reviewcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.AggregateRating)
  return target;
}

size_t AggregateRating::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.AggregateRating)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 ratingCount = 2;
  if (has_ratingcount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ratingcount());
  }
  // optional .ru.mail.go.webbase.blobs.Rating rating = 1;
  if (has_rating()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rating_);
  }

  // optional uint32 reviewCount = 3;
  if (has_reviewcount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reviewcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AggregateRating::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.AggregateRating)
  GOOGLE_DCHECK_NE(&from, this);
  const AggregateRating* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AggregateRating>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.AggregateRating)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.AggregateRating)
    MergeFrom(*source);
  }
}

void AggregateRating::MergeFrom(const AggregateRating& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.AggregateRating)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_rating()->::ru::mail::go::webbase::blobs::Rating::MergeFrom(from.rating());
    }
    if (cached_has_bits & 0x00000002u) {
      ratingcount_ = from.ratingcount_;
    }
    if (cached_has_bits & 0x00000004u) {
      reviewcount_ = from.reviewcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AggregateRating::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.AggregateRating)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregateRating::CopyFrom(const AggregateRating& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.AggregateRating)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRating::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_rating()) {
    if (!this->rating_->IsInitialized()) return false;
  }
  return true;
}

void AggregateRating::Swap(AggregateRating* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AggregateRating::InternalSwap(AggregateRating* other) {
  using std::swap;
  swap(rating_, other->rating_);
  swap(ratingcount_, other->ratingcount_);
  swap(reviewcount_, other->reviewcount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AggregateRating::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AggregateRating

// optional .ru.mail.go.webbase.blobs.Rating rating = 1;
bool AggregateRating::has_rating() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AggregateRating::set_has_rating() {
  _has_bits_[0] |= 0x00000001u;
}
void AggregateRating::clear_has_rating() {
  _has_bits_[0] &= ~0x00000001u;
}
void AggregateRating::clear_rating() {
  if (rating_ != NULL) rating_->::ru::mail::go::webbase::blobs::Rating::Clear();
  clear_has_rating();
}
const ::ru::mail::go::webbase::blobs::Rating& AggregateRating::rating() const {
  const ::ru::mail::go::webbase::blobs::Rating* p = rating_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AggregateRating.rating)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::Rating*>(
      &::ru::mail::go::webbase::blobs::_Rating_default_instance_);
}
::ru::mail::go::webbase::blobs::Rating* AggregateRating::mutable_rating() {
  set_has_rating();
  if (rating_ == NULL) {
    rating_ = new ::ru::mail::go::webbase::blobs::Rating;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AggregateRating.rating)
  return rating_;
}
::ru::mail::go::webbase::blobs::Rating* AggregateRating::release_rating() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AggregateRating.rating)
  clear_has_rating();
  ::ru::mail::go::webbase::blobs::Rating* temp = rating_;
  rating_ = NULL;
  return temp;
}
void AggregateRating::set_allocated_rating(::ru::mail::go::webbase::blobs::Rating* rating) {
  delete rating_;
  rating_ = rating;
  if (rating) {
    set_has_rating();
  } else {
    clear_has_rating();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AggregateRating.rating)
}

// required uint32 ratingCount = 2;
bool AggregateRating::has_ratingcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AggregateRating::set_has_ratingcount() {
  _has_bits_[0] |= 0x00000002u;
}
void AggregateRating::clear_has_ratingcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void AggregateRating::clear_ratingcount() {
  ratingcount_ = 0u;
  clear_has_ratingcount();
}
::google::protobuf::uint32 AggregateRating::ratingcount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AggregateRating.ratingCount)
  return ratingcount_;
}
void AggregateRating::set_ratingcount(::google::protobuf::uint32 value) {
  set_has_ratingcount();
  ratingcount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AggregateRating.ratingCount)
}

// optional uint32 reviewCount = 3;
bool AggregateRating::has_reviewcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AggregateRating::set_has_reviewcount() {
  _has_bits_[0] |= 0x00000004u;
}
void AggregateRating::clear_has_reviewcount() {
  _has_bits_[0] &= ~0x00000004u;
}
void AggregateRating::clear_reviewcount() {
  reviewcount_ = 0u;
  clear_has_reviewcount();
}
::google::protobuf::uint32 AggregateRating::reviewcount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AggregateRating.reviewCount)
  return reviewcount_;
}
void AggregateRating::set_reviewcount(::google::protobuf::uint32 value) {
  set_has_reviewcount();
  reviewcount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AggregateRating.reviewCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UrlArray::kUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UrlArray::UrlArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.UrlArray)
}
UrlArray::UrlArray(const UrlArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.UrlArray)
}

void UrlArray::SharedCtor() {
  _cached_size_ = 0;
}

UrlArray::~UrlArray() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.UrlArray)
  SharedDtor();
}

void UrlArray::SharedDtor() {
}

void UrlArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UrlArray::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UrlArray& UrlArray::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

UrlArray* UrlArray::New(::google::protobuf::Arena* arena) const {
  UrlArray* n = new UrlArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UrlArray::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.UrlArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UrlArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.UrlArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string urls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urls(this->urls_size() - 1).data(),
            static_cast<int>(this->urls(this->urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UrlArray.urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.UrlArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.UrlArray)
  return false;
#undef DO_
}

void UrlArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.UrlArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlArray.urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->urls(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.UrlArray)
}

::google::protobuf::uint8* UrlArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.UrlArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlArray.urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->urls(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.UrlArray)
  return target;
}

size_t UrlArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.UrlArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string urls = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->urls_size());
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->urls(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UrlArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.UrlArray)
  GOOGLE_DCHECK_NE(&from, this);
  const UrlArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UrlArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.UrlArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.UrlArray)
    MergeFrom(*source);
  }
}

void UrlArray::MergeFrom(const UrlArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.UrlArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
}

void UrlArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.UrlArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrlArray::CopyFrom(const UrlArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.UrlArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlArray::IsInitialized() const {
  return true;
}

void UrlArray::Swap(UrlArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UrlArray::InternalSwap(UrlArray* other) {
  using std::swap;
  urls_.InternalSwap(&other->urls_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UrlArray::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UrlArray

// repeated string urls = 1;
int UrlArray::urls_size() const {
  return urls_.size();
}
void UrlArray::clear_urls() {
  urls_.Clear();
}
const ::std::string& UrlArray::urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlArray.urls)
  return urls_.Get(index);
}
::std::string* UrlArray::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlArray.urls)
  return urls_.Mutable(index);
}
void UrlArray::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlArray.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void UrlArray::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlArray.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
void UrlArray::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UrlArray.urls)
}
void UrlArray::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UrlArray.urls)
}
::std::string* UrlArray::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.UrlArray.urls)
  return urls_.Add();
}
void UrlArray::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UrlArray.urls)
}
#if LANG_CXX11
void UrlArray::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UrlArray.urls)
}
#endif
void UrlArray::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.UrlArray.urls)
}
void UrlArray::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.UrlArray.urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
UrlArray::urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.UrlArray.urls)
  return urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
UrlArray::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.UrlArray.urls)
  return &urls_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringArray::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringArray::StringArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.StringArray)
}
StringArray::StringArray(const StringArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.StringArray)
}

void StringArray::SharedCtor() {
  _cached_size_ = 0;
}

StringArray::~StringArray() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.StringArray)
  SharedDtor();
}

void StringArray::SharedDtor() {
}

void StringArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringArray::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StringArray& StringArray::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

StringArray* StringArray::New(::google::protobuf::Arena* arena) const {
  StringArray* n = new StringArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringArray::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.StringArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StringArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.StringArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->values(this->values_size() - 1).data(),
            static_cast<int>(this->values(this->values_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.StringArray.values");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.StringArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.StringArray)
  return false;
#undef DO_
}

void StringArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.StringArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->values(i).data(), static_cast<int>(this->values(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.StringArray.values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.StringArray)
}

::google::protobuf::uint8* StringArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.StringArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->values(i).data(), static_cast<int>(this->values(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.StringArray.values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.StringArray)
  return target;
}

size_t StringArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.StringArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string values = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  for (int i = 0, n = this->values_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.StringArray)
  GOOGLE_DCHECK_NE(&from, this);
  const StringArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StringArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.StringArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.StringArray)
    MergeFrom(*source);
  }
}

void StringArray::MergeFrom(const StringArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.StringArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void StringArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.StringArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringArray::CopyFrom(const StringArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.StringArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringArray::IsInitialized() const {
  return true;
}

void StringArray::Swap(StringArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringArray::InternalSwap(StringArray* other) {
  using std::swap;
  values_.InternalSwap(&other->values_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringArray::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringArray

// repeated string values = 1;
int StringArray::values_size() const {
  return values_.size();
}
void StringArray::clear_values() {
  values_.Clear();
}
const ::std::string& StringArray::values(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.StringArray.values)
  return values_.Get(index);
}
::std::string* StringArray::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.StringArray.values)
  return values_.Mutable(index);
}
void StringArray::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.StringArray.values)
  values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void StringArray::set_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.StringArray.values)
  values_.Mutable(index)->assign(std::move(value));
}
#endif
void StringArray::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.StringArray.values)
}
void StringArray::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.StringArray.values)
}
::std::string* StringArray::add_values() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.StringArray.values)
  return values_.Add();
}
void StringArray::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.StringArray.values)
}
#if LANG_CXX11
void StringArray::add_values(::std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.StringArray.values)
}
#endif
void StringArray::add_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.StringArray.values)
}
void StringArray::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.StringArray.values)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringArray::values() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.StringArray.values)
  return values_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
StringArray::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.StringArray.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThumbArray::kThumbsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThumbArray::ThumbArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ThumbArray)
}
ThumbArray::ThumbArray(const ThumbArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      thumbs_(from.thumbs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ThumbArray)
}

void ThumbArray::SharedCtor() {
  _cached_size_ = 0;
}

ThumbArray::~ThumbArray() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ThumbArray)
  SharedDtor();
}

void ThumbArray::SharedDtor() {
}

void ThumbArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThumbArray::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ThumbArray& ThumbArray::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

ThumbArray* ThumbArray::New(::google::protobuf::Arena* arena) const {
  ThumbArray* n = new ThumbArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ThumbArray::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ThumbArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thumbs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ThumbArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ThumbArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.parsing.img.Thumb thumbs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thumbs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ThumbArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ThumbArray)
  return false;
#undef DO_
}

void ThumbArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ThumbArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.parsing.img.Thumb thumbs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thumbs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->thumbs(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ThumbArray)
}

::google::protobuf::uint8* ThumbArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ThumbArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.parsing.img.Thumb thumbs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thumbs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->thumbs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ThumbArray)
  return target;
}

size_t ThumbArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ThumbArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.parsing.img.Thumb thumbs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->thumbs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thumbs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThumbArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ThumbArray)
  GOOGLE_DCHECK_NE(&from, this);
  const ThumbArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ThumbArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ThumbArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ThumbArray)
    MergeFrom(*source);
  }
}

void ThumbArray::MergeFrom(const ThumbArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ThumbArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  thumbs_.MergeFrom(from.thumbs_);
}

void ThumbArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ThumbArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThumbArray::CopyFrom(const ThumbArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ThumbArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThumbArray::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->thumbs())) return false;
  return true;
}

void ThumbArray::Swap(ThumbArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThumbArray::InternalSwap(ThumbArray* other) {
  using std::swap;
  thumbs_.InternalSwap(&other->thumbs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThumbArray::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThumbArray

// repeated .ru.mail.go.webbase.parsing.img.Thumb thumbs = 1;
int ThumbArray::thumbs_size() const {
  return thumbs_.size();
}
void ThumbArray::clear_thumbs() {
  thumbs_.Clear();
}
const ::ru::mail::go::webbase::parsing::img::Thumb& ThumbArray::thumbs(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ThumbArray.thumbs)
  return thumbs_.Get(index);
}
::ru::mail::go::webbase::parsing::img::Thumb* ThumbArray::mutable_thumbs(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ThumbArray.thumbs)
  return thumbs_.Mutable(index);
}
::ru::mail::go::webbase::parsing::img::Thumb* ThumbArray::add_thumbs() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ThumbArray.thumbs)
  return thumbs_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::parsing::img::Thumb >*
ThumbArray::mutable_thumbs() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ThumbArray.thumbs)
  return &thumbs_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::parsing::img::Thumb >&
ThumbArray::thumbs() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ThumbArray.thumbs)
  return thumbs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreativeWork::kThingFieldNumber;
const int CreativeWork::kHeadlineFieldNumber;
const int CreativeWork::kAlternativeHeadlineFieldNumber;
const int CreativeWork::kDatePublishedFieldNumber;
const int CreativeWork::kYearFieldNumber;
const int CreativeWork::kRatingFieldNumber;
const int CreativeWork::kGenresFieldNumber;
const int CreativeWork::kThumbnailUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreativeWork::CreativeWork()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.CreativeWork)
}
CreativeWork::CreativeWork(const CreativeWork& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_headline()) {
    headline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headline_);
  }
  alternativeheadline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alternativeheadline()) {
    alternativeheadline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alternativeheadline_);
  }
  datepublished_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_datepublished()) {
    datepublished_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datepublished_);
  }
  year_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_year()) {
    year_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.year_);
  }
  if (from.has_thing()) {
    thing_ = new ::ru::mail::go::webbase::blobs::Thing(*from.thing_);
  } else {
    thing_ = NULL;
  }
  if (from.has_rating()) {
    rating_ = new ::ru::mail::go::webbase::blobs::Rating(*from.rating_);
  } else {
    rating_ = NULL;
  }
  if (from.has_genres()) {
    genres_ = new ::ru::mail::go::webbase::blobs::StringArray(*from.genres_);
  } else {
    genres_ = NULL;
  }
  if (from.has_thumbnailurls()) {
    thumbnailurls_ = new ::ru::mail::go::webbase::blobs::UrlArray(*from.thumbnailurls_);
  } else {
    thumbnailurls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.CreativeWork)
}

void CreativeWork::SharedCtor() {
  _cached_size_ = 0;
  headline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alternativeheadline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datepublished_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  year_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&thing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thumbnailurls_) -
      reinterpret_cast<char*>(&thing_)) + sizeof(thumbnailurls_));
}

CreativeWork::~CreativeWork() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.CreativeWork)
  SharedDtor();
}

void CreativeWork::SharedDtor() {
  headline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alternativeheadline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datepublished_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  year_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete thing_;
  if (this != internal_default_instance()) delete rating_;
  if (this != internal_default_instance()) delete genres_;
  if (this != internal_default_instance()) delete thumbnailurls_;
}

void CreativeWork::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreativeWork::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreativeWork& CreativeWork::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreativeWork* CreativeWork::New(::google::protobuf::Arena* arena) const {
  CreativeWork* n = new CreativeWork;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreativeWork::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.CreativeWork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!headline_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*headline_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!alternativeheadline_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alternativeheadline_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!datepublished_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*datepublished_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!year_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*year_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(thing_ != NULL);
      thing_->::ru::mail::go::webbase::blobs::Thing::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rating_ != NULL);
      rating_->::ru::mail::go::webbase::blobs::Rating::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(genres_ != NULL);
      genres_->::ru::mail::go::webbase::blobs::StringArray::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(thumbnailurls_ != NULL);
      thumbnailurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreativeWork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.CreativeWork)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.Thing thing = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string headline = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headline().data(), static_cast<int>(this->headline().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.CreativeWork.headline");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string alternativeHeadline = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alternativeheadline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alternativeheadline().data(), static_cast<int>(this->alternativeheadline().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.CreativeWork.alternativeHeadline");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string datePublished = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datepublished()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->datepublished().data(), static_cast<int>(this->datepublished().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.CreativeWork.datePublished");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string year = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_year()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->year().data(), static_cast<int>(this->year().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.CreativeWork.year");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Rating rating = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rating()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.StringArray genres = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_genres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UrlArray thumbnailUrls = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thumbnailurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.CreativeWork)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.CreativeWork)
  return false;
#undef DO_
}

void CreativeWork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.CreativeWork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.Thing thing = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->thing_, output);
  }

  // optional string headline = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headline().data(), static_cast<int>(this->headline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CreativeWork.headline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->headline(), output);
  }

  // optional string alternativeHeadline = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alternativeheadline().data(), static_cast<int>(this->alternativeheadline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CreativeWork.alternativeHeadline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->alternativeheadline(), output);
  }

  // optional string datePublished = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datepublished().data(), static_cast<int>(this->datepublished().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CreativeWork.datePublished");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->datepublished(), output);
  }

  // optional string year = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->year().data(), static_cast<int>(this->year().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CreativeWork.year");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->year(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Rating rating = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->rating_, output);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray genres = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->genres_, output);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray thumbnailUrls = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->thumbnailurls_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.CreativeWork)
}

::google::protobuf::uint8* CreativeWork::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.CreativeWork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.Thing thing = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->thing_, deterministic, target);
  }

  // optional string headline = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headline().data(), static_cast<int>(this->headline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CreativeWork.headline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->headline(), target);
  }

  // optional string alternativeHeadline = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alternativeheadline().data(), static_cast<int>(this->alternativeheadline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CreativeWork.alternativeHeadline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->alternativeheadline(), target);
  }

  // optional string datePublished = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datepublished().data(), static_cast<int>(this->datepublished().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CreativeWork.datePublished");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->datepublished(), target);
  }

  // optional string year = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->year().data(), static_cast<int>(this->year().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CreativeWork.year");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->year(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Rating rating = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->rating_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray genres = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->genres_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray thumbnailUrls = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->thumbnailurls_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.CreativeWork)
  return target;
}

size_t CreativeWork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.CreativeWork)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string headline = 2;
    if (has_headline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headline());
    }

    // optional string alternativeHeadline = 3;
    if (has_alternativeheadline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alternativeheadline());
    }

    // optional string datePublished = 4;
    if (has_datepublished()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datepublished());
    }

    // optional string year = 5;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->year());
    }

    // optional .ru.mail.go.webbase.blobs.Thing thing = 1;
    if (has_thing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->thing_);
    }

    // optional .ru.mail.go.webbase.blobs.Rating rating = 6;
    if (has_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rating_);
    }

    // optional .ru.mail.go.webbase.blobs.StringArray genres = 7;
    if (has_genres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->genres_);
    }

    // optional .ru.mail.go.webbase.blobs.UrlArray thumbnailUrls = 8;
    if (has_thumbnailurls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->thumbnailurls_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreativeWork::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.CreativeWork)
  GOOGLE_DCHECK_NE(&from, this);
  const CreativeWork* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreativeWork>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.CreativeWork)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.CreativeWork)
    MergeFrom(*source);
  }
}

void CreativeWork::MergeFrom(const CreativeWork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.CreativeWork)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_headline();
      headline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headline_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_alternativeheadline();
      alternativeheadline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alternativeheadline_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_datepublished();
      datepublished_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datepublished_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_year();
      year_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.year_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_thing()->::ru::mail::go::webbase::blobs::Thing::MergeFrom(from.thing());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_rating()->::ru::mail::go::webbase::blobs::Rating::MergeFrom(from.rating());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_genres()->::ru::mail::go::webbase::blobs::StringArray::MergeFrom(from.genres());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_thumbnailurls()->::ru::mail::go::webbase::blobs::UrlArray::MergeFrom(from.thumbnailurls());
    }
  }
}

void CreativeWork::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.CreativeWork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreativeWork::CopyFrom(const CreativeWork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.CreativeWork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreativeWork::IsInitialized() const {
  if (has_rating()) {
    if (!this->rating_->IsInitialized()) return false;
  }
  return true;
}

void CreativeWork::Swap(CreativeWork* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreativeWork::InternalSwap(CreativeWork* other) {
  using std::swap;
  headline_.Swap(&other->headline_);
  alternativeheadline_.Swap(&other->alternativeheadline_);
  datepublished_.Swap(&other->datepublished_);
  year_.Swap(&other->year_);
  swap(thing_, other->thing_);
  swap(rating_, other->rating_);
  swap(genres_, other->genres_);
  swap(thumbnailurls_, other->thumbnailurls_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreativeWork::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreativeWork

// optional .ru.mail.go.webbase.blobs.Thing thing = 1;
bool CreativeWork::has_thing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CreativeWork::set_has_thing() {
  _has_bits_[0] |= 0x00000010u;
}
void CreativeWork::clear_has_thing() {
  _has_bits_[0] &= ~0x00000010u;
}
void CreativeWork::clear_thing() {
  if (thing_ != NULL) thing_->::ru::mail::go::webbase::blobs::Thing::Clear();
  clear_has_thing();
}
const ::ru::mail::go::webbase::blobs::Thing& CreativeWork::thing() const {
  const ::ru::mail::go::webbase::blobs::Thing* p = thing_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CreativeWork.thing)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::Thing*>(
      &::ru::mail::go::webbase::blobs::_Thing_default_instance_);
}
::ru::mail::go::webbase::blobs::Thing* CreativeWork::mutable_thing() {
  set_has_thing();
  if (thing_ == NULL) {
    thing_ = new ::ru::mail::go::webbase::blobs::Thing;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CreativeWork.thing)
  return thing_;
}
::ru::mail::go::webbase::blobs::Thing* CreativeWork::release_thing() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CreativeWork.thing)
  clear_has_thing();
  ::ru::mail::go::webbase::blobs::Thing* temp = thing_;
  thing_ = NULL;
  return temp;
}
void CreativeWork::set_allocated_thing(::ru::mail::go::webbase::blobs::Thing* thing) {
  delete thing_;
  thing_ = thing;
  if (thing) {
    set_has_thing();
  } else {
    clear_has_thing();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CreativeWork.thing)
}

// optional string headline = 2;
bool CreativeWork::has_headline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreativeWork::set_has_headline() {
  _has_bits_[0] |= 0x00000001u;
}
void CreativeWork::clear_has_headline() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreativeWork::clear_headline() {
  headline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headline();
}
const ::std::string& CreativeWork::headline() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CreativeWork.headline)
  return headline_.GetNoArena();
}
void CreativeWork::set_headline(const ::std::string& value) {
  set_has_headline();
  headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CreativeWork.headline)
}
#if LANG_CXX11
void CreativeWork::set_headline(::std::string&& value) {
  set_has_headline();
  headline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CreativeWork.headline)
}
#endif
void CreativeWork::set_headline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headline();
  headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CreativeWork.headline)
}
void CreativeWork::set_headline(const char* value, size_t size) {
  set_has_headline();
  headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CreativeWork.headline)
}
::std::string* CreativeWork::mutable_headline() {
  set_has_headline();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CreativeWork.headline)
  return headline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreativeWork::release_headline() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CreativeWork.headline)
  clear_has_headline();
  return headline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreativeWork::set_allocated_headline(::std::string* headline) {
  if (headline != NULL) {
    set_has_headline();
  } else {
    clear_has_headline();
  }
  headline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headline);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CreativeWork.headline)
}

// optional string alternativeHeadline = 3;
bool CreativeWork::has_alternativeheadline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreativeWork::set_has_alternativeheadline() {
  _has_bits_[0] |= 0x00000002u;
}
void CreativeWork::clear_has_alternativeheadline() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreativeWork::clear_alternativeheadline() {
  alternativeheadline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alternativeheadline();
}
const ::std::string& CreativeWork::alternativeheadline() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CreativeWork.alternativeHeadline)
  return alternativeheadline_.GetNoArena();
}
void CreativeWork::set_alternativeheadline(const ::std::string& value) {
  set_has_alternativeheadline();
  alternativeheadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CreativeWork.alternativeHeadline)
}
#if LANG_CXX11
void CreativeWork::set_alternativeheadline(::std::string&& value) {
  set_has_alternativeheadline();
  alternativeheadline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CreativeWork.alternativeHeadline)
}
#endif
void CreativeWork::set_alternativeheadline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alternativeheadline();
  alternativeheadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CreativeWork.alternativeHeadline)
}
void CreativeWork::set_alternativeheadline(const char* value, size_t size) {
  set_has_alternativeheadline();
  alternativeheadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CreativeWork.alternativeHeadline)
}
::std::string* CreativeWork::mutable_alternativeheadline() {
  set_has_alternativeheadline();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CreativeWork.alternativeHeadline)
  return alternativeheadline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreativeWork::release_alternativeheadline() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CreativeWork.alternativeHeadline)
  clear_has_alternativeheadline();
  return alternativeheadline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreativeWork::set_allocated_alternativeheadline(::std::string* alternativeheadline) {
  if (alternativeheadline != NULL) {
    set_has_alternativeheadline();
  } else {
    clear_has_alternativeheadline();
  }
  alternativeheadline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alternativeheadline);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CreativeWork.alternativeHeadline)
}

// optional string datePublished = 4;
bool CreativeWork::has_datepublished() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreativeWork::set_has_datepublished() {
  _has_bits_[0] |= 0x00000004u;
}
void CreativeWork::clear_has_datepublished() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreativeWork::clear_datepublished() {
  datepublished_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_datepublished();
}
const ::std::string& CreativeWork::datepublished() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CreativeWork.datePublished)
  return datepublished_.GetNoArena();
}
void CreativeWork::set_datepublished(const ::std::string& value) {
  set_has_datepublished();
  datepublished_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CreativeWork.datePublished)
}
#if LANG_CXX11
void CreativeWork::set_datepublished(::std::string&& value) {
  set_has_datepublished();
  datepublished_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CreativeWork.datePublished)
}
#endif
void CreativeWork::set_datepublished(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_datepublished();
  datepublished_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CreativeWork.datePublished)
}
void CreativeWork::set_datepublished(const char* value, size_t size) {
  set_has_datepublished();
  datepublished_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CreativeWork.datePublished)
}
::std::string* CreativeWork::mutable_datepublished() {
  set_has_datepublished();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CreativeWork.datePublished)
  return datepublished_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreativeWork::release_datepublished() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CreativeWork.datePublished)
  clear_has_datepublished();
  return datepublished_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreativeWork::set_allocated_datepublished(::std::string* datepublished) {
  if (datepublished != NULL) {
    set_has_datepublished();
  } else {
    clear_has_datepublished();
  }
  datepublished_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datepublished);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CreativeWork.datePublished)
}

// optional string year = 5;
bool CreativeWork::has_year() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CreativeWork::set_has_year() {
  _has_bits_[0] |= 0x00000008u;
}
void CreativeWork::clear_has_year() {
  _has_bits_[0] &= ~0x00000008u;
}
void CreativeWork::clear_year() {
  year_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_year();
}
const ::std::string& CreativeWork::year() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CreativeWork.year)
  return year_.GetNoArena();
}
void CreativeWork::set_year(const ::std::string& value) {
  set_has_year();
  year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CreativeWork.year)
}
#if LANG_CXX11
void CreativeWork::set_year(::std::string&& value) {
  set_has_year();
  year_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CreativeWork.year)
}
#endif
void CreativeWork::set_year(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_year();
  year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CreativeWork.year)
}
void CreativeWork::set_year(const char* value, size_t size) {
  set_has_year();
  year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CreativeWork.year)
}
::std::string* CreativeWork::mutable_year() {
  set_has_year();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CreativeWork.year)
  return year_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreativeWork::release_year() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CreativeWork.year)
  clear_has_year();
  return year_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreativeWork::set_allocated_year(::std::string* year) {
  if (year != NULL) {
    set_has_year();
  } else {
    clear_has_year();
  }
  year_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), year);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CreativeWork.year)
}

// optional .ru.mail.go.webbase.blobs.Rating rating = 6;
bool CreativeWork::has_rating() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CreativeWork::set_has_rating() {
  _has_bits_[0] |= 0x00000020u;
}
void CreativeWork::clear_has_rating() {
  _has_bits_[0] &= ~0x00000020u;
}
void CreativeWork::clear_rating() {
  if (rating_ != NULL) rating_->::ru::mail::go::webbase::blobs::Rating::Clear();
  clear_has_rating();
}
const ::ru::mail::go::webbase::blobs::Rating& CreativeWork::rating() const {
  const ::ru::mail::go::webbase::blobs::Rating* p = rating_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CreativeWork.rating)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::Rating*>(
      &::ru::mail::go::webbase::blobs::_Rating_default_instance_);
}
::ru::mail::go::webbase::blobs::Rating* CreativeWork::mutable_rating() {
  set_has_rating();
  if (rating_ == NULL) {
    rating_ = new ::ru::mail::go::webbase::blobs::Rating;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CreativeWork.rating)
  return rating_;
}
::ru::mail::go::webbase::blobs::Rating* CreativeWork::release_rating() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CreativeWork.rating)
  clear_has_rating();
  ::ru::mail::go::webbase::blobs::Rating* temp = rating_;
  rating_ = NULL;
  return temp;
}
void CreativeWork::set_allocated_rating(::ru::mail::go::webbase::blobs::Rating* rating) {
  delete rating_;
  rating_ = rating;
  if (rating) {
    set_has_rating();
  } else {
    clear_has_rating();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CreativeWork.rating)
}

// optional .ru.mail.go.webbase.blobs.StringArray genres = 7;
bool CreativeWork::has_genres() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CreativeWork::set_has_genres() {
  _has_bits_[0] |= 0x00000040u;
}
void CreativeWork::clear_has_genres() {
  _has_bits_[0] &= ~0x00000040u;
}
void CreativeWork::clear_genres() {
  if (genres_ != NULL) genres_->::ru::mail::go::webbase::blobs::StringArray::Clear();
  clear_has_genres();
}
const ::ru::mail::go::webbase::blobs::StringArray& CreativeWork::genres() const {
  const ::ru::mail::go::webbase::blobs::StringArray* p = genres_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CreativeWork.genres)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::StringArray*>(
      &::ru::mail::go::webbase::blobs::_StringArray_default_instance_);
}
::ru::mail::go::webbase::blobs::StringArray* CreativeWork::mutable_genres() {
  set_has_genres();
  if (genres_ == NULL) {
    genres_ = new ::ru::mail::go::webbase::blobs::StringArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CreativeWork.genres)
  return genres_;
}
::ru::mail::go::webbase::blobs::StringArray* CreativeWork::release_genres() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CreativeWork.genres)
  clear_has_genres();
  ::ru::mail::go::webbase::blobs::StringArray* temp = genres_;
  genres_ = NULL;
  return temp;
}
void CreativeWork::set_allocated_genres(::ru::mail::go::webbase::blobs::StringArray* genres) {
  delete genres_;
  genres_ = genres;
  if (genres) {
    set_has_genres();
  } else {
    clear_has_genres();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CreativeWork.genres)
}

// optional .ru.mail.go.webbase.blobs.UrlArray thumbnailUrls = 8;
bool CreativeWork::has_thumbnailurls() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CreativeWork::set_has_thumbnailurls() {
  _has_bits_[0] |= 0x00000080u;
}
void CreativeWork::clear_has_thumbnailurls() {
  _has_bits_[0] &= ~0x00000080u;
}
void CreativeWork::clear_thumbnailurls() {
  if (thumbnailurls_ != NULL) thumbnailurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
  clear_has_thumbnailurls();
}
const ::ru::mail::go::webbase::blobs::UrlArray& CreativeWork::thumbnailurls() const {
  const ::ru::mail::go::webbase::blobs::UrlArray* p = thumbnailurls_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CreativeWork.thumbnailUrls)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlArray*>(
      &::ru::mail::go::webbase::blobs::_UrlArray_default_instance_);
}
::ru::mail::go::webbase::blobs::UrlArray* CreativeWork::mutable_thumbnailurls() {
  set_has_thumbnailurls();
  if (thumbnailurls_ == NULL) {
    thumbnailurls_ = new ::ru::mail::go::webbase::blobs::UrlArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CreativeWork.thumbnailUrls)
  return thumbnailurls_;
}
::ru::mail::go::webbase::blobs::UrlArray* CreativeWork::release_thumbnailurls() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CreativeWork.thumbnailUrls)
  clear_has_thumbnailurls();
  ::ru::mail::go::webbase::blobs::UrlArray* temp = thumbnailurls_;
  thumbnailurls_ = NULL;
  return temp;
}
void CreativeWork::set_allocated_thumbnailurls(::ru::mail::go::webbase::blobs::UrlArray* thumbnailurls) {
  delete thumbnailurls_;
  thumbnailurls_ = thumbnailurls;
  if (thumbnailurls) {
    set_has_thumbnailurls();
  } else {
    clear_has_thumbnailurls();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CreativeWork.thumbnailUrls)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Person::kThingFieldNumber;
const int Person::kAltNameFieldNumber;
const int Person::kGivenNameFieldNumber;
const int Person::kFamilyNameFieldNumber;
const int Person::kAdditionalNameFieldNumber;
const int Person::kGenderFieldNumber;
const int Person::kBirthDateFieldNumber;
const int Person::kDeathDateFieldNumber;
const int Person::kThumbnailUrlsFieldNumber;
const int Person::kImagesUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Person::Person()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.Person)
}
Person::Person(const Person& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  altname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_altname()) {
    altname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.altname_);
  }
  givenname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_givenname()) {
    givenname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.givenname_);
  }
  familyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_familyname()) {
    familyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.familyname_);
  }
  additionalname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_additionalname()) {
    additionalname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.additionalname_);
  }
  gender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gender()) {
    gender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gender_);
  }
  birthdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_birthdate()) {
    birthdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.birthdate_);
  }
  deathdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deathdate()) {
    deathdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deathdate_);
  }
  if (from.has_thing()) {
    thing_ = new ::ru::mail::go::webbase::blobs::Thing(*from.thing_);
  } else {
    thing_ = NULL;
  }
  if (from.has_thumbnailurls()) {
    thumbnailurls_ = new ::ru::mail::go::webbase::blobs::UrlArray(*from.thumbnailurls_);
  } else {
    thumbnailurls_ = NULL;
  }
  if (from.has_imagesurls()) {
    imagesurls_ = new ::ru::mail::go::webbase::blobs::UrlArray(*from.imagesurls_);
  } else {
    imagesurls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.Person)
}

void Person::SharedCtor() {
  _cached_size_ = 0;
  altname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  givenname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  familyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  additionalname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  birthdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deathdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&thing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imagesurls_) -
      reinterpret_cast<char*>(&thing_)) + sizeof(imagesurls_));
}

Person::~Person() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.Person)
  SharedDtor();
}

void Person::SharedDtor() {
  altname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  givenname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  familyname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  additionalname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  birthdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deathdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete thing_;
  if (this != internal_default_instance()) delete thumbnailurls_;
  if (this != internal_default_instance()) delete imagesurls_;
}

void Person::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Person::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Person& Person::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

Person* Person::New(::google::protobuf::Arena* arena) const {
  Person* n = new Person;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Person::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.Person)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!altname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*altname_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!givenname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*givenname_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!familyname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*familyname_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!additionalname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*additionalname_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!gender_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gender_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!birthdate_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*birthdate_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!deathdate_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*deathdate_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(thing_ != NULL);
      thing_->::ru::mail::go::webbase::blobs::Thing::Clear();
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(thumbnailurls_ != NULL);
      thumbnailurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(imagesurls_ != NULL);
      imagesurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.Person)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.Thing thing = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string altName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_altname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->altname().data(), static_cast<int>(this->altname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Person.altName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string givenName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_givenname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->givenname().data(), static_cast<int>(this->givenname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Person.givenName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string familyName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_familyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->familyname().data(), static_cast<int>(this->familyname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Person.familyName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string additionalName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->additionalname().data(), static_cast<int>(this->additionalname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Person.additionalName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gender = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gender().data(), static_cast<int>(this->gender().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Person.gender");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string birthDate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birthdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->birthdate().data(), static_cast<int>(this->birthdate().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Person.birthDate");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string deathDate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deathdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deathdate().data(), static_cast<int>(this->deathdate().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Person.deathDate");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UrlArray thumbnailUrls = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thumbnailurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagesurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.Person)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.Person)
  return false;
#undef DO_
}

void Person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.Person)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.Thing thing = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->thing_, output);
  }

  // optional string altName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->altname().data(), static_cast<int>(this->altname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Person.altName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->altname(), output);
  }

  // required string givenName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->givenname().data(), static_cast<int>(this->givenname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Person.givenName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->givenname(), output);
  }

  // optional string familyName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->familyname().data(), static_cast<int>(this->familyname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Person.familyName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->familyname(), output);
  }

  // optional string additionalName = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalname().data(), static_cast<int>(this->additionalname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Person.additionalName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->additionalname(), output);
  }

  // optional string gender = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gender().data(), static_cast<int>(this->gender().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Person.gender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->gender(), output);
  }

  // optional string birthDate = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->birthdate().data(), static_cast<int>(this->birthdate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Person.birthDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->birthdate(), output);
  }

  // optional string deathDate = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deathdate().data(), static_cast<int>(this->deathdate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Person.deathDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->deathdate(), output);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray thumbnailUrls = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->thumbnailurls_, output);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->imagesurls_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.Person)
}

::google::protobuf::uint8* Person::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.Person)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.Thing thing = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->thing_, deterministic, target);
  }

  // optional string altName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->altname().data(), static_cast<int>(this->altname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Person.altName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->altname(), target);
  }

  // required string givenName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->givenname().data(), static_cast<int>(this->givenname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Person.givenName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->givenname(), target);
  }

  // optional string familyName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->familyname().data(), static_cast<int>(this->familyname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Person.familyName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->familyname(), target);
  }

  // optional string additionalName = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalname().data(), static_cast<int>(this->additionalname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Person.additionalName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->additionalname(), target);
  }

  // optional string gender = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gender().data(), static_cast<int>(this->gender().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Person.gender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->gender(), target);
  }

  // optional string birthDate = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->birthdate().data(), static_cast<int>(this->birthdate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Person.birthDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->birthdate(), target);
  }

  // optional string deathDate = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deathdate().data(), static_cast<int>(this->deathdate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Person.deathDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->deathdate(), target);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray thumbnailUrls = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->thumbnailurls_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->imagesurls_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.Person)
  return target;
}

size_t Person::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.Person)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string givenName = 3;
  if (has_givenname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->givenname());
  }
  // optional string altName = 2;
  if (has_altname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->altname());
  }

  if (_has_bits_[0 / 32] & 252u) {
    // optional string familyName = 4;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->familyname());
    }

    // optional string additionalName = 5;
    if (has_additionalname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalname());
    }

    // optional string gender = 6;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gender());
    }

    // optional string birthDate = 7;
    if (has_birthdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->birthdate());
    }

    // optional string deathDate = 8;
    if (has_deathdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deathdate());
    }

    // optional .ru.mail.go.webbase.blobs.Thing thing = 1;
    if (has_thing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->thing_);
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .ru.mail.go.webbase.blobs.UrlArray thumbnailUrls = 9;
    if (has_thumbnailurls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->thumbnailurls_);
    }

    // optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
    if (has_imagesurls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imagesurls_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Person::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.Person)
  GOOGLE_DCHECK_NE(&from, this);
  const Person* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Person>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.Person)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.Person)
    MergeFrom(*source);
  }
}

void Person::MergeFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.Person)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_altname();
      altname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.altname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_givenname();
      givenname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.givenname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_familyname();
      familyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.familyname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_additionalname();
      additionalname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.additionalname_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_gender();
      gender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gender_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_birthdate();
      birthdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.birthdate_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_deathdate();
      deathdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deathdate_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_thing()->::ru::mail::go::webbase::blobs::Thing::MergeFrom(from.thing());
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_thumbnailurls()->::ru::mail::go::webbase::blobs::UrlArray::MergeFrom(from.thumbnailurls());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_imagesurls()->::ru::mail::go::webbase::blobs::UrlArray::MergeFrom(from.imagesurls());
    }
  }
}

void Person::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person::CopyFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Person::Swap(Person* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Person::InternalSwap(Person* other) {
  using std::swap;
  altname_.Swap(&other->altname_);
  givenname_.Swap(&other->givenname_);
  familyname_.Swap(&other->familyname_);
  additionalname_.Swap(&other->additionalname_);
  gender_.Swap(&other->gender_);
  birthdate_.Swap(&other->birthdate_);
  deathdate_.Swap(&other->deathdate_);
  swap(thing_, other->thing_);
  swap(thumbnailurls_, other->thumbnailurls_);
  swap(imagesurls_, other->imagesurls_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Person::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Person

// optional .ru.mail.go.webbase.blobs.Thing thing = 1;
bool Person::has_thing() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Person::set_has_thing() {
  _has_bits_[0] |= 0x00000080u;
}
void Person::clear_has_thing() {
  _has_bits_[0] &= ~0x00000080u;
}
void Person::clear_thing() {
  if (thing_ != NULL) thing_->::ru::mail::go::webbase::blobs::Thing::Clear();
  clear_has_thing();
}
const ::ru::mail::go::webbase::blobs::Thing& Person::thing() const {
  const ::ru::mail::go::webbase::blobs::Thing* p = thing_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Person.thing)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::Thing*>(
      &::ru::mail::go::webbase::blobs::_Thing_default_instance_);
}
::ru::mail::go::webbase::blobs::Thing* Person::mutable_thing() {
  set_has_thing();
  if (thing_ == NULL) {
    thing_ = new ::ru::mail::go::webbase::blobs::Thing;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Person.thing)
  return thing_;
}
::ru::mail::go::webbase::blobs::Thing* Person::release_thing() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Person.thing)
  clear_has_thing();
  ::ru::mail::go::webbase::blobs::Thing* temp = thing_;
  thing_ = NULL;
  return temp;
}
void Person::set_allocated_thing(::ru::mail::go::webbase::blobs::Thing* thing) {
  delete thing_;
  thing_ = thing;
  if (thing) {
    set_has_thing();
  } else {
    clear_has_thing();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Person.thing)
}

// optional string altName = 2;
bool Person::has_altname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Person::set_has_altname() {
  _has_bits_[0] |= 0x00000001u;
}
void Person::clear_has_altname() {
  _has_bits_[0] &= ~0x00000001u;
}
void Person::clear_altname() {
  altname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_altname();
}
const ::std::string& Person::altname() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Person.altName)
  return altname_.GetNoArena();
}
void Person::set_altname(const ::std::string& value) {
  set_has_altname();
  altname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Person.altName)
}
#if LANG_CXX11
void Person::set_altname(::std::string&& value) {
  set_has_altname();
  altname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Person.altName)
}
#endif
void Person::set_altname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_altname();
  altname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Person.altName)
}
void Person::set_altname(const char* value, size_t size) {
  set_has_altname();
  altname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Person.altName)
}
::std::string* Person::mutable_altname() {
  set_has_altname();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Person.altName)
  return altname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Person::release_altname() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Person.altName)
  clear_has_altname();
  return altname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Person::set_allocated_altname(::std::string* altname) {
  if (altname != NULL) {
    set_has_altname();
  } else {
    clear_has_altname();
  }
  altname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), altname);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Person.altName)
}

// required string givenName = 3;
bool Person::has_givenname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Person::set_has_givenname() {
  _has_bits_[0] |= 0x00000002u;
}
void Person::clear_has_givenname() {
  _has_bits_[0] &= ~0x00000002u;
}
void Person::clear_givenname() {
  givenname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_givenname();
}
const ::std::string& Person::givenname() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Person.givenName)
  return givenname_.GetNoArena();
}
void Person::set_givenname(const ::std::string& value) {
  set_has_givenname();
  givenname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Person.givenName)
}
#if LANG_CXX11
void Person::set_givenname(::std::string&& value) {
  set_has_givenname();
  givenname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Person.givenName)
}
#endif
void Person::set_givenname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_givenname();
  givenname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Person.givenName)
}
void Person::set_givenname(const char* value, size_t size) {
  set_has_givenname();
  givenname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Person.givenName)
}
::std::string* Person::mutable_givenname() {
  set_has_givenname();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Person.givenName)
  return givenname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Person::release_givenname() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Person.givenName)
  clear_has_givenname();
  return givenname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Person::set_allocated_givenname(::std::string* givenname) {
  if (givenname != NULL) {
    set_has_givenname();
  } else {
    clear_has_givenname();
  }
  givenname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), givenname);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Person.givenName)
}

// optional string familyName = 4;
bool Person::has_familyname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Person::set_has_familyname() {
  _has_bits_[0] |= 0x00000004u;
}
void Person::clear_has_familyname() {
  _has_bits_[0] &= ~0x00000004u;
}
void Person::clear_familyname() {
  familyname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_familyname();
}
const ::std::string& Person::familyname() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Person.familyName)
  return familyname_.GetNoArena();
}
void Person::set_familyname(const ::std::string& value) {
  set_has_familyname();
  familyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Person.familyName)
}
#if LANG_CXX11
void Person::set_familyname(::std::string&& value) {
  set_has_familyname();
  familyname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Person.familyName)
}
#endif
void Person::set_familyname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_familyname();
  familyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Person.familyName)
}
void Person::set_familyname(const char* value, size_t size) {
  set_has_familyname();
  familyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Person.familyName)
}
::std::string* Person::mutable_familyname() {
  set_has_familyname();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Person.familyName)
  return familyname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Person::release_familyname() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Person.familyName)
  clear_has_familyname();
  return familyname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Person::set_allocated_familyname(::std::string* familyname) {
  if (familyname != NULL) {
    set_has_familyname();
  } else {
    clear_has_familyname();
  }
  familyname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), familyname);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Person.familyName)
}

// optional string additionalName = 5;
bool Person::has_additionalname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Person::set_has_additionalname() {
  _has_bits_[0] |= 0x00000008u;
}
void Person::clear_has_additionalname() {
  _has_bits_[0] &= ~0x00000008u;
}
void Person::clear_additionalname() {
  additionalname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_additionalname();
}
const ::std::string& Person::additionalname() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Person.additionalName)
  return additionalname_.GetNoArena();
}
void Person::set_additionalname(const ::std::string& value) {
  set_has_additionalname();
  additionalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Person.additionalName)
}
#if LANG_CXX11
void Person::set_additionalname(::std::string&& value) {
  set_has_additionalname();
  additionalname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Person.additionalName)
}
#endif
void Person::set_additionalname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_additionalname();
  additionalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Person.additionalName)
}
void Person::set_additionalname(const char* value, size_t size) {
  set_has_additionalname();
  additionalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Person.additionalName)
}
::std::string* Person::mutable_additionalname() {
  set_has_additionalname();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Person.additionalName)
  return additionalname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Person::release_additionalname() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Person.additionalName)
  clear_has_additionalname();
  return additionalname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Person::set_allocated_additionalname(::std::string* additionalname) {
  if (additionalname != NULL) {
    set_has_additionalname();
  } else {
    clear_has_additionalname();
  }
  additionalname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), additionalname);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Person.additionalName)
}

// optional string gender = 6;
bool Person::has_gender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Person::set_has_gender() {
  _has_bits_[0] |= 0x00000010u;
}
void Person::clear_has_gender() {
  _has_bits_[0] &= ~0x00000010u;
}
void Person::clear_gender() {
  gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gender();
}
const ::std::string& Person::gender() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Person.gender)
  return gender_.GetNoArena();
}
void Person::set_gender(const ::std::string& value) {
  set_has_gender();
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Person.gender)
}
#if LANG_CXX11
void Person::set_gender(::std::string&& value) {
  set_has_gender();
  gender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Person.gender)
}
#endif
void Person::set_gender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gender();
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Person.gender)
}
void Person::set_gender(const char* value, size_t size) {
  set_has_gender();
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Person.gender)
}
::std::string* Person::mutable_gender() {
  set_has_gender();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Person.gender)
  return gender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Person::release_gender() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Person.gender)
  clear_has_gender();
  return gender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Person::set_allocated_gender(::std::string* gender) {
  if (gender != NULL) {
    set_has_gender();
  } else {
    clear_has_gender();
  }
  gender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gender);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Person.gender)
}

// optional string birthDate = 7;
bool Person::has_birthdate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Person::set_has_birthdate() {
  _has_bits_[0] |= 0x00000020u;
}
void Person::clear_has_birthdate() {
  _has_bits_[0] &= ~0x00000020u;
}
void Person::clear_birthdate() {
  birthdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_birthdate();
}
const ::std::string& Person::birthdate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Person.birthDate)
  return birthdate_.GetNoArena();
}
void Person::set_birthdate(const ::std::string& value) {
  set_has_birthdate();
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Person.birthDate)
}
#if LANG_CXX11
void Person::set_birthdate(::std::string&& value) {
  set_has_birthdate();
  birthdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Person.birthDate)
}
#endif
void Person::set_birthdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_birthdate();
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Person.birthDate)
}
void Person::set_birthdate(const char* value, size_t size) {
  set_has_birthdate();
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Person.birthDate)
}
::std::string* Person::mutable_birthdate() {
  set_has_birthdate();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Person.birthDate)
  return birthdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Person::release_birthdate() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Person.birthDate)
  clear_has_birthdate();
  return birthdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Person::set_allocated_birthdate(::std::string* birthdate) {
  if (birthdate != NULL) {
    set_has_birthdate();
  } else {
    clear_has_birthdate();
  }
  birthdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), birthdate);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Person.birthDate)
}

// optional string deathDate = 8;
bool Person::has_deathdate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Person::set_has_deathdate() {
  _has_bits_[0] |= 0x00000040u;
}
void Person::clear_has_deathdate() {
  _has_bits_[0] &= ~0x00000040u;
}
void Person::clear_deathdate() {
  deathdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deathdate();
}
const ::std::string& Person::deathdate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Person.deathDate)
  return deathdate_.GetNoArena();
}
void Person::set_deathdate(const ::std::string& value) {
  set_has_deathdate();
  deathdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Person.deathDate)
}
#if LANG_CXX11
void Person::set_deathdate(::std::string&& value) {
  set_has_deathdate();
  deathdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Person.deathDate)
}
#endif
void Person::set_deathdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deathdate();
  deathdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Person.deathDate)
}
void Person::set_deathdate(const char* value, size_t size) {
  set_has_deathdate();
  deathdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Person.deathDate)
}
::std::string* Person::mutable_deathdate() {
  set_has_deathdate();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Person.deathDate)
  return deathdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Person::release_deathdate() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Person.deathDate)
  clear_has_deathdate();
  return deathdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Person::set_allocated_deathdate(::std::string* deathdate) {
  if (deathdate != NULL) {
    set_has_deathdate();
  } else {
    clear_has_deathdate();
  }
  deathdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deathdate);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Person.deathDate)
}

// optional .ru.mail.go.webbase.blobs.UrlArray thumbnailUrls = 9;
bool Person::has_thumbnailurls() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Person::set_has_thumbnailurls() {
  _has_bits_[0] |= 0x00000100u;
}
void Person::clear_has_thumbnailurls() {
  _has_bits_[0] &= ~0x00000100u;
}
void Person::clear_thumbnailurls() {
  if (thumbnailurls_ != NULL) thumbnailurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
  clear_has_thumbnailurls();
}
const ::ru::mail::go::webbase::blobs::UrlArray& Person::thumbnailurls() const {
  const ::ru::mail::go::webbase::blobs::UrlArray* p = thumbnailurls_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Person.thumbnailUrls)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlArray*>(
      &::ru::mail::go::webbase::blobs::_UrlArray_default_instance_);
}
::ru::mail::go::webbase::blobs::UrlArray* Person::mutable_thumbnailurls() {
  set_has_thumbnailurls();
  if (thumbnailurls_ == NULL) {
    thumbnailurls_ = new ::ru::mail::go::webbase::blobs::UrlArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Person.thumbnailUrls)
  return thumbnailurls_;
}
::ru::mail::go::webbase::blobs::UrlArray* Person::release_thumbnailurls() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Person.thumbnailUrls)
  clear_has_thumbnailurls();
  ::ru::mail::go::webbase::blobs::UrlArray* temp = thumbnailurls_;
  thumbnailurls_ = NULL;
  return temp;
}
void Person::set_allocated_thumbnailurls(::ru::mail::go::webbase::blobs::UrlArray* thumbnailurls) {
  delete thumbnailurls_;
  thumbnailurls_ = thumbnailurls;
  if (thumbnailurls) {
    set_has_thumbnailurls();
  } else {
    clear_has_thumbnailurls();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Person.thumbnailUrls)
}

// optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
bool Person::has_imagesurls() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Person::set_has_imagesurls() {
  _has_bits_[0] |= 0x00000200u;
}
void Person::clear_has_imagesurls() {
  _has_bits_[0] &= ~0x00000200u;
}
void Person::clear_imagesurls() {
  if (imagesurls_ != NULL) imagesurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
  clear_has_imagesurls();
}
const ::ru::mail::go::webbase::blobs::UrlArray& Person::imagesurls() const {
  const ::ru::mail::go::webbase::blobs::UrlArray* p = imagesurls_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Person.imagesUrls)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlArray*>(
      &::ru::mail::go::webbase::blobs::_UrlArray_default_instance_);
}
::ru::mail::go::webbase::blobs::UrlArray* Person::mutable_imagesurls() {
  set_has_imagesurls();
  if (imagesurls_ == NULL) {
    imagesurls_ = new ::ru::mail::go::webbase::blobs::UrlArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Person.imagesUrls)
  return imagesurls_;
}
::ru::mail::go::webbase::blobs::UrlArray* Person::release_imagesurls() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Person.imagesUrls)
  clear_has_imagesurls();
  ::ru::mail::go::webbase::blobs::UrlArray* temp = imagesurls_;
  imagesurls_ = NULL;
  return temp;
}
void Person::set_allocated_imagesurls(::ru::mail::go::webbase::blobs::UrlArray* imagesurls) {
  delete imagesurls_;
  imagesurls_ = imagesurls;
  if (imagesurls) {
    set_has_imagesurls();
  } else {
    clear_has_imagesurls();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Person.imagesUrls)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PersonArray::kPersonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PersonArray::PersonArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.PersonArray)
}
PersonArray::PersonArray(const PersonArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      persons_(from.persons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.PersonArray)
}

void PersonArray::SharedCtor() {
  _cached_size_ = 0;
}

PersonArray::~PersonArray() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.PersonArray)
  SharedDtor();
}

void PersonArray::SharedDtor() {
}

void PersonArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersonArray::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PersonArray& PersonArray::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

PersonArray* PersonArray::New(::google::protobuf::Arena* arena) const {
  PersonArray* n = new PersonArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PersonArray::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.PersonArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  persons_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PersonArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.PersonArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.Person persons = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_persons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.PersonArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.PersonArray)
  return false;
#undef DO_
}

void PersonArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.PersonArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.Person persons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->persons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->persons(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.PersonArray)
}

::google::protobuf::uint8* PersonArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.PersonArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.Person persons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->persons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->persons(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.PersonArray)
  return target;
}

size_t PersonArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.PersonArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.Person persons = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->persons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->persons(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.PersonArray)
  GOOGLE_DCHECK_NE(&from, this);
  const PersonArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PersonArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.PersonArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.PersonArray)
    MergeFrom(*source);
  }
}

void PersonArray::MergeFrom(const PersonArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.PersonArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  persons_.MergeFrom(from.persons_);
}

void PersonArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.PersonArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonArray::CopyFrom(const PersonArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.PersonArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonArray::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->persons())) return false;
  return true;
}

void PersonArray::Swap(PersonArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PersonArray::InternalSwap(PersonArray* other) {
  using std::swap;
  persons_.InternalSwap(&other->persons_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PersonArray::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PersonArray

// repeated .ru.mail.go.webbase.blobs.Person persons = 1;
int PersonArray::persons_size() const {
  return persons_.size();
}
void PersonArray::clear_persons() {
  persons_.Clear();
}
const ::ru::mail::go::webbase::blobs::Person& PersonArray::persons(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PersonArray.persons)
  return persons_.Get(index);
}
::ru::mail::go::webbase::blobs::Person* PersonArray::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PersonArray.persons)
  return persons_.Mutable(index);
}
::ru::mail::go::webbase::blobs::Person* PersonArray::add_persons() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PersonArray.persons)
  return persons_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Person >*
PersonArray::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PersonArray.persons)
  return &persons_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Person >&
PersonArray::persons() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PersonArray.persons)
  return persons_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Movie::kWorkFieldNumber;
const int Movie::kDurationFieldNumber;
const int Movie::kCountriesFieldNumber;
const int Movie::kActorsFieldNumber;
const int Movie::kDirectorsFieldNumber;
const int Movie::kPersonsFieldNumber;
const int Movie::kScreenwritersFieldNumber;
const int Movie::kImagesUrlsFieldNumber;
const int Movie::kStillsUrlsFieldNumber;
const int Movie::kTrailerUrlsFieldNumber;
const int Movie::kOfficialUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Movie::Movie()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.Movie)
}
Movie::Movie(const Movie& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  duration_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_duration()) {
    duration_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.duration_);
  }
  if (from.has_work()) {
    work_ = new ::ru::mail::go::webbase::blobs::CreativeWork(*from.work_);
  } else {
    work_ = NULL;
  }
  if (from.has_countries()) {
    countries_ = new ::ru::mail::go::webbase::blobs::StringArray(*from.countries_);
  } else {
    countries_ = NULL;
  }
  if (from.has_actors()) {
    actors_ = new ::ru::mail::go::webbase::blobs::StringArray(*from.actors_);
  } else {
    actors_ = NULL;
  }
  if (from.has_directors()) {
    directors_ = new ::ru::mail::go::webbase::blobs::StringArray(*from.directors_);
  } else {
    directors_ = NULL;
  }
  if (from.has_persons()) {
    persons_ = new ::ru::mail::go::webbase::blobs::StringArray(*from.persons_);
  } else {
    persons_ = NULL;
  }
  if (from.has_screenwriters()) {
    screenwriters_ = new ::ru::mail::go::webbase::blobs::StringArray(*from.screenwriters_);
  } else {
    screenwriters_ = NULL;
  }
  if (from.has_imagesurls()) {
    imagesurls_ = new ::ru::mail::go::webbase::blobs::UrlArray(*from.imagesurls_);
  } else {
    imagesurls_ = NULL;
  }
  if (from.has_stillsurls()) {
    stillsurls_ = new ::ru::mail::go::webbase::blobs::UrlArray(*from.stillsurls_);
  } else {
    stillsurls_ = NULL;
  }
  if (from.has_trailerurls()) {
    trailerurls_ = new ::ru::mail::go::webbase::blobs::UrlArray(*from.trailerurls_);
  } else {
    trailerurls_ = NULL;
  }
  if (from.has_officialurls()) {
    officialurls_ = new ::ru::mail::go::webbase::blobs::UrlArray(*from.officialurls_);
  } else {
    officialurls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.Movie)
}

void Movie::SharedCtor() {
  _cached_size_ = 0;
  duration_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&work_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&officialurls_) -
      reinterpret_cast<char*>(&work_)) + sizeof(officialurls_));
}

Movie::~Movie() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.Movie)
  SharedDtor();
}

void Movie::SharedDtor() {
  duration_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete work_;
  if (this != internal_default_instance()) delete countries_;
  if (this != internal_default_instance()) delete actors_;
  if (this != internal_default_instance()) delete directors_;
  if (this != internal_default_instance()) delete persons_;
  if (this != internal_default_instance()) delete screenwriters_;
  if (this != internal_default_instance()) delete imagesurls_;
  if (this != internal_default_instance()) delete stillsurls_;
  if (this != internal_default_instance()) delete trailerurls_;
  if (this != internal_default_instance()) delete officialurls_;
}

void Movie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Movie::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Movie& Movie::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

Movie* Movie::New(::google::protobuf::Arena* arena) const {
  Movie* n = new Movie;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Movie::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.Movie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!duration_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*duration_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(work_ != NULL);
      work_->::ru::mail::go::webbase::blobs::CreativeWork::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(countries_ != NULL);
      countries_->::ru::mail::go::webbase::blobs::StringArray::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(actors_ != NULL);
      actors_->::ru::mail::go::webbase::blobs::StringArray::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(directors_ != NULL);
      directors_->::ru::mail::go::webbase::blobs::StringArray::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(persons_ != NULL);
      persons_->::ru::mail::go::webbase::blobs::StringArray::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(screenwriters_ != NULL);
      screenwriters_->::ru::mail::go::webbase::blobs::StringArray::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(imagesurls_ != NULL);
      imagesurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(stillsurls_ != NULL);
      stillsurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(trailerurls_ != NULL);
      trailerurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(officialurls_ != NULL);
      officialurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Movie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.Movie)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_work()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_duration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->duration().data(), static_cast<int>(this->duration().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Movie.duration");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.StringArray countries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_countries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.StringArray actors = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.StringArray directors = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_directors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.StringArray persons = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_persons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.StringArray screenwriters = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screenwriters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagesurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UrlArray stillsUrls = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stillsurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UrlArray trailerUrls = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trailerurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UrlArray officialUrls = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_officialurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.Movie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.Movie)
  return false;
#undef DO_
}

void Movie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.Movie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->work_, output);
  }

  // optional string duration = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->duration().data(), static_cast<int>(this->duration().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Movie.duration");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->duration(), output);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray countries = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->countries_, output);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray actors = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->actors_, output);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray directors = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->directors_, output);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray persons = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->persons_, output);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray screenwriters = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->screenwriters_, output);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->imagesurls_, output);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray stillsUrls = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->stillsurls_, output);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray trailerUrls = 22;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->trailerurls_, output);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray officialUrls = 23;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->officialurls_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.Movie)
}

::google::protobuf::uint8* Movie::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.Movie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->work_, deterministic, target);
  }

  // optional string duration = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->duration().data(), static_cast<int>(this->duration().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Movie.duration");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->duration(), target);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray countries = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->countries_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray actors = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->actors_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray directors = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->directors_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray persons = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->persons_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray screenwriters = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->screenwriters_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->imagesurls_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray stillsUrls = 21;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->stillsurls_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray trailerUrls = 22;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->trailerurls_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray officialUrls = 23;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->officialurls_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.Movie)
  return target;
}

size_t Movie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.Movie)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->duration());
    }

    // optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
    if (has_work()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->work_);
    }

    // optional .ru.mail.go.webbase.blobs.StringArray countries = 3;
    if (has_countries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->countries_);
    }

    // optional .ru.mail.go.webbase.blobs.StringArray actors = 4;
    if (has_actors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->actors_);
    }

    // optional .ru.mail.go.webbase.blobs.StringArray directors = 5;
    if (has_directors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->directors_);
    }

    // optional .ru.mail.go.webbase.blobs.StringArray persons = 6;
    if (has_persons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->persons_);
    }

    // optional .ru.mail.go.webbase.blobs.StringArray screenwriters = 7;
    if (has_screenwriters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->screenwriters_);
    }

    // optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
    if (has_imagesurls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imagesurls_);
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional .ru.mail.go.webbase.blobs.UrlArray stillsUrls = 21;
    if (has_stillsurls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stillsurls_);
    }

    // optional .ru.mail.go.webbase.blobs.UrlArray trailerUrls = 22;
    if (has_trailerurls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trailerurls_);
    }

    // optional .ru.mail.go.webbase.blobs.UrlArray officialUrls = 23;
    if (has_officialurls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->officialurls_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Movie::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.Movie)
  GOOGLE_DCHECK_NE(&from, this);
  const Movie* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Movie>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.Movie)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.Movie)
    MergeFrom(*source);
  }
}

void Movie::MergeFrom(const Movie& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.Movie)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_duration();
      duration_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.duration_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_work()->::ru::mail::go::webbase::blobs::CreativeWork::MergeFrom(from.work());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_countries()->::ru::mail::go::webbase::blobs::StringArray::MergeFrom(from.countries());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_actors()->::ru::mail::go::webbase::blobs::StringArray::MergeFrom(from.actors());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_directors()->::ru::mail::go::webbase::blobs::StringArray::MergeFrom(from.directors());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_persons()->::ru::mail::go::webbase::blobs::StringArray::MergeFrom(from.persons());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_screenwriters()->::ru::mail::go::webbase::blobs::StringArray::MergeFrom(from.screenwriters());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_imagesurls()->::ru::mail::go::webbase::blobs::UrlArray::MergeFrom(from.imagesurls());
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_stillsurls()->::ru::mail::go::webbase::blobs::UrlArray::MergeFrom(from.stillsurls());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_trailerurls()->::ru::mail::go::webbase::blobs::UrlArray::MergeFrom(from.trailerurls());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_officialurls()->::ru::mail::go::webbase::blobs::UrlArray::MergeFrom(from.officialurls());
    }
  }
}

void Movie::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.Movie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Movie::CopyFrom(const Movie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.Movie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Movie::IsInitialized() const {
  if (has_work()) {
    if (!this->work_->IsInitialized()) return false;
  }
  return true;
}

void Movie::Swap(Movie* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Movie::InternalSwap(Movie* other) {
  using std::swap;
  duration_.Swap(&other->duration_);
  swap(work_, other->work_);
  swap(countries_, other->countries_);
  swap(actors_, other->actors_);
  swap(directors_, other->directors_);
  swap(persons_, other->persons_);
  swap(screenwriters_, other->screenwriters_);
  swap(imagesurls_, other->imagesurls_);
  swap(stillsurls_, other->stillsurls_);
  swap(trailerurls_, other->trailerurls_);
  swap(officialurls_, other->officialurls_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Movie::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Movie

// optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
bool Movie::has_work() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Movie::set_has_work() {
  _has_bits_[0] |= 0x00000002u;
}
void Movie::clear_has_work() {
  _has_bits_[0] &= ~0x00000002u;
}
void Movie::clear_work() {
  if (work_ != NULL) work_->::ru::mail::go::webbase::blobs::CreativeWork::Clear();
  clear_has_work();
}
const ::ru::mail::go::webbase::blobs::CreativeWork& Movie::work() const {
  const ::ru::mail::go::webbase::blobs::CreativeWork* p = work_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Movie.work)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::CreativeWork*>(
      &::ru::mail::go::webbase::blobs::_CreativeWork_default_instance_);
}
::ru::mail::go::webbase::blobs::CreativeWork* Movie::mutable_work() {
  set_has_work();
  if (work_ == NULL) {
    work_ = new ::ru::mail::go::webbase::blobs::CreativeWork;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Movie.work)
  return work_;
}
::ru::mail::go::webbase::blobs::CreativeWork* Movie::release_work() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Movie.work)
  clear_has_work();
  ::ru::mail::go::webbase::blobs::CreativeWork* temp = work_;
  work_ = NULL;
  return temp;
}
void Movie::set_allocated_work(::ru::mail::go::webbase::blobs::CreativeWork* work) {
  delete work_;
  work_ = work;
  if (work) {
    set_has_work();
  } else {
    clear_has_work();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Movie.work)
}

// optional string duration = 2;
bool Movie::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Movie::set_has_duration() {
  _has_bits_[0] |= 0x00000001u;
}
void Movie::clear_has_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
void Movie::clear_duration() {
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_duration();
}
const ::std::string& Movie::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Movie.duration)
  return duration_.GetNoArena();
}
void Movie::set_duration(const ::std::string& value) {
  set_has_duration();
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Movie.duration)
}
#if LANG_CXX11
void Movie::set_duration(::std::string&& value) {
  set_has_duration();
  duration_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Movie.duration)
}
#endif
void Movie::set_duration(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_duration();
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Movie.duration)
}
void Movie::set_duration(const char* value, size_t size) {
  set_has_duration();
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Movie.duration)
}
::std::string* Movie::mutable_duration() {
  set_has_duration();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Movie.duration)
  return duration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Movie::release_duration() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Movie.duration)
  clear_has_duration();
  return duration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Movie::set_allocated_duration(::std::string* duration) {
  if (duration != NULL) {
    set_has_duration();
  } else {
    clear_has_duration();
  }
  duration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duration);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Movie.duration)
}

// optional .ru.mail.go.webbase.blobs.StringArray countries = 3;
bool Movie::has_countries() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Movie::set_has_countries() {
  _has_bits_[0] |= 0x00000004u;
}
void Movie::clear_has_countries() {
  _has_bits_[0] &= ~0x00000004u;
}
void Movie::clear_countries() {
  if (countries_ != NULL) countries_->::ru::mail::go::webbase::blobs::StringArray::Clear();
  clear_has_countries();
}
const ::ru::mail::go::webbase::blobs::StringArray& Movie::countries() const {
  const ::ru::mail::go::webbase::blobs::StringArray* p = countries_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Movie.countries)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::StringArray*>(
      &::ru::mail::go::webbase::blobs::_StringArray_default_instance_);
}
::ru::mail::go::webbase::blobs::StringArray* Movie::mutable_countries() {
  set_has_countries();
  if (countries_ == NULL) {
    countries_ = new ::ru::mail::go::webbase::blobs::StringArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Movie.countries)
  return countries_;
}
::ru::mail::go::webbase::blobs::StringArray* Movie::release_countries() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Movie.countries)
  clear_has_countries();
  ::ru::mail::go::webbase::blobs::StringArray* temp = countries_;
  countries_ = NULL;
  return temp;
}
void Movie::set_allocated_countries(::ru::mail::go::webbase::blobs::StringArray* countries) {
  delete countries_;
  countries_ = countries;
  if (countries) {
    set_has_countries();
  } else {
    clear_has_countries();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Movie.countries)
}

// optional .ru.mail.go.webbase.blobs.StringArray actors = 4;
bool Movie::has_actors() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Movie::set_has_actors() {
  _has_bits_[0] |= 0x00000008u;
}
void Movie::clear_has_actors() {
  _has_bits_[0] &= ~0x00000008u;
}
void Movie::clear_actors() {
  if (actors_ != NULL) actors_->::ru::mail::go::webbase::blobs::StringArray::Clear();
  clear_has_actors();
}
const ::ru::mail::go::webbase::blobs::StringArray& Movie::actors() const {
  const ::ru::mail::go::webbase::blobs::StringArray* p = actors_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Movie.actors)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::StringArray*>(
      &::ru::mail::go::webbase::blobs::_StringArray_default_instance_);
}
::ru::mail::go::webbase::blobs::StringArray* Movie::mutable_actors() {
  set_has_actors();
  if (actors_ == NULL) {
    actors_ = new ::ru::mail::go::webbase::blobs::StringArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Movie.actors)
  return actors_;
}
::ru::mail::go::webbase::blobs::StringArray* Movie::release_actors() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Movie.actors)
  clear_has_actors();
  ::ru::mail::go::webbase::blobs::StringArray* temp = actors_;
  actors_ = NULL;
  return temp;
}
void Movie::set_allocated_actors(::ru::mail::go::webbase::blobs::StringArray* actors) {
  delete actors_;
  actors_ = actors;
  if (actors) {
    set_has_actors();
  } else {
    clear_has_actors();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Movie.actors)
}

// optional .ru.mail.go.webbase.blobs.StringArray directors = 5;
bool Movie::has_directors() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Movie::set_has_directors() {
  _has_bits_[0] |= 0x00000010u;
}
void Movie::clear_has_directors() {
  _has_bits_[0] &= ~0x00000010u;
}
void Movie::clear_directors() {
  if (directors_ != NULL) directors_->::ru::mail::go::webbase::blobs::StringArray::Clear();
  clear_has_directors();
}
const ::ru::mail::go::webbase::blobs::StringArray& Movie::directors() const {
  const ::ru::mail::go::webbase::blobs::StringArray* p = directors_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Movie.directors)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::StringArray*>(
      &::ru::mail::go::webbase::blobs::_StringArray_default_instance_);
}
::ru::mail::go::webbase::blobs::StringArray* Movie::mutable_directors() {
  set_has_directors();
  if (directors_ == NULL) {
    directors_ = new ::ru::mail::go::webbase::blobs::StringArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Movie.directors)
  return directors_;
}
::ru::mail::go::webbase::blobs::StringArray* Movie::release_directors() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Movie.directors)
  clear_has_directors();
  ::ru::mail::go::webbase::blobs::StringArray* temp = directors_;
  directors_ = NULL;
  return temp;
}
void Movie::set_allocated_directors(::ru::mail::go::webbase::blobs::StringArray* directors) {
  delete directors_;
  directors_ = directors;
  if (directors) {
    set_has_directors();
  } else {
    clear_has_directors();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Movie.directors)
}

// optional .ru.mail.go.webbase.blobs.StringArray persons = 6;
bool Movie::has_persons() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Movie::set_has_persons() {
  _has_bits_[0] |= 0x00000020u;
}
void Movie::clear_has_persons() {
  _has_bits_[0] &= ~0x00000020u;
}
void Movie::clear_persons() {
  if (persons_ != NULL) persons_->::ru::mail::go::webbase::blobs::StringArray::Clear();
  clear_has_persons();
}
const ::ru::mail::go::webbase::blobs::StringArray& Movie::persons() const {
  const ::ru::mail::go::webbase::blobs::StringArray* p = persons_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Movie.persons)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::StringArray*>(
      &::ru::mail::go::webbase::blobs::_StringArray_default_instance_);
}
::ru::mail::go::webbase::blobs::StringArray* Movie::mutable_persons() {
  set_has_persons();
  if (persons_ == NULL) {
    persons_ = new ::ru::mail::go::webbase::blobs::StringArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Movie.persons)
  return persons_;
}
::ru::mail::go::webbase::blobs::StringArray* Movie::release_persons() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Movie.persons)
  clear_has_persons();
  ::ru::mail::go::webbase::blobs::StringArray* temp = persons_;
  persons_ = NULL;
  return temp;
}
void Movie::set_allocated_persons(::ru::mail::go::webbase::blobs::StringArray* persons) {
  delete persons_;
  persons_ = persons;
  if (persons) {
    set_has_persons();
  } else {
    clear_has_persons();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Movie.persons)
}

// optional .ru.mail.go.webbase.blobs.StringArray screenwriters = 7;
bool Movie::has_screenwriters() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Movie::set_has_screenwriters() {
  _has_bits_[0] |= 0x00000040u;
}
void Movie::clear_has_screenwriters() {
  _has_bits_[0] &= ~0x00000040u;
}
void Movie::clear_screenwriters() {
  if (screenwriters_ != NULL) screenwriters_->::ru::mail::go::webbase::blobs::StringArray::Clear();
  clear_has_screenwriters();
}
const ::ru::mail::go::webbase::blobs::StringArray& Movie::screenwriters() const {
  const ::ru::mail::go::webbase::blobs::StringArray* p = screenwriters_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Movie.screenwriters)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::StringArray*>(
      &::ru::mail::go::webbase::blobs::_StringArray_default_instance_);
}
::ru::mail::go::webbase::blobs::StringArray* Movie::mutable_screenwriters() {
  set_has_screenwriters();
  if (screenwriters_ == NULL) {
    screenwriters_ = new ::ru::mail::go::webbase::blobs::StringArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Movie.screenwriters)
  return screenwriters_;
}
::ru::mail::go::webbase::blobs::StringArray* Movie::release_screenwriters() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Movie.screenwriters)
  clear_has_screenwriters();
  ::ru::mail::go::webbase::blobs::StringArray* temp = screenwriters_;
  screenwriters_ = NULL;
  return temp;
}
void Movie::set_allocated_screenwriters(::ru::mail::go::webbase::blobs::StringArray* screenwriters) {
  delete screenwriters_;
  screenwriters_ = screenwriters;
  if (screenwriters) {
    set_has_screenwriters();
  } else {
    clear_has_screenwriters();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Movie.screenwriters)
}

// optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
bool Movie::has_imagesurls() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Movie::set_has_imagesurls() {
  _has_bits_[0] |= 0x00000080u;
}
void Movie::clear_has_imagesurls() {
  _has_bits_[0] &= ~0x00000080u;
}
void Movie::clear_imagesurls() {
  if (imagesurls_ != NULL) imagesurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
  clear_has_imagesurls();
}
const ::ru::mail::go::webbase::blobs::UrlArray& Movie::imagesurls() const {
  const ::ru::mail::go::webbase::blobs::UrlArray* p = imagesurls_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Movie.imagesUrls)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlArray*>(
      &::ru::mail::go::webbase::blobs::_UrlArray_default_instance_);
}
::ru::mail::go::webbase::blobs::UrlArray* Movie::mutable_imagesurls() {
  set_has_imagesurls();
  if (imagesurls_ == NULL) {
    imagesurls_ = new ::ru::mail::go::webbase::blobs::UrlArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Movie.imagesUrls)
  return imagesurls_;
}
::ru::mail::go::webbase::blobs::UrlArray* Movie::release_imagesurls() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Movie.imagesUrls)
  clear_has_imagesurls();
  ::ru::mail::go::webbase::blobs::UrlArray* temp = imagesurls_;
  imagesurls_ = NULL;
  return temp;
}
void Movie::set_allocated_imagesurls(::ru::mail::go::webbase::blobs::UrlArray* imagesurls) {
  delete imagesurls_;
  imagesurls_ = imagesurls;
  if (imagesurls) {
    set_has_imagesurls();
  } else {
    clear_has_imagesurls();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Movie.imagesUrls)
}

// optional .ru.mail.go.webbase.blobs.UrlArray stillsUrls = 21;
bool Movie::has_stillsurls() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Movie::set_has_stillsurls() {
  _has_bits_[0] |= 0x00000100u;
}
void Movie::clear_has_stillsurls() {
  _has_bits_[0] &= ~0x00000100u;
}
void Movie::clear_stillsurls() {
  if (stillsurls_ != NULL) stillsurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
  clear_has_stillsurls();
}
const ::ru::mail::go::webbase::blobs::UrlArray& Movie::stillsurls() const {
  const ::ru::mail::go::webbase::blobs::UrlArray* p = stillsurls_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Movie.stillsUrls)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlArray*>(
      &::ru::mail::go::webbase::blobs::_UrlArray_default_instance_);
}
::ru::mail::go::webbase::blobs::UrlArray* Movie::mutable_stillsurls() {
  set_has_stillsurls();
  if (stillsurls_ == NULL) {
    stillsurls_ = new ::ru::mail::go::webbase::blobs::UrlArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Movie.stillsUrls)
  return stillsurls_;
}
::ru::mail::go::webbase::blobs::UrlArray* Movie::release_stillsurls() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Movie.stillsUrls)
  clear_has_stillsurls();
  ::ru::mail::go::webbase::blobs::UrlArray* temp = stillsurls_;
  stillsurls_ = NULL;
  return temp;
}
void Movie::set_allocated_stillsurls(::ru::mail::go::webbase::blobs::UrlArray* stillsurls) {
  delete stillsurls_;
  stillsurls_ = stillsurls;
  if (stillsurls) {
    set_has_stillsurls();
  } else {
    clear_has_stillsurls();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Movie.stillsUrls)
}

// optional .ru.mail.go.webbase.blobs.UrlArray trailerUrls = 22;
bool Movie::has_trailerurls() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Movie::set_has_trailerurls() {
  _has_bits_[0] |= 0x00000200u;
}
void Movie::clear_has_trailerurls() {
  _has_bits_[0] &= ~0x00000200u;
}
void Movie::clear_trailerurls() {
  if (trailerurls_ != NULL) trailerurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
  clear_has_trailerurls();
}
const ::ru::mail::go::webbase::blobs::UrlArray& Movie::trailerurls() const {
  const ::ru::mail::go::webbase::blobs::UrlArray* p = trailerurls_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Movie.trailerUrls)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlArray*>(
      &::ru::mail::go::webbase::blobs::_UrlArray_default_instance_);
}
::ru::mail::go::webbase::blobs::UrlArray* Movie::mutable_trailerurls() {
  set_has_trailerurls();
  if (trailerurls_ == NULL) {
    trailerurls_ = new ::ru::mail::go::webbase::blobs::UrlArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Movie.trailerUrls)
  return trailerurls_;
}
::ru::mail::go::webbase::blobs::UrlArray* Movie::release_trailerurls() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Movie.trailerUrls)
  clear_has_trailerurls();
  ::ru::mail::go::webbase::blobs::UrlArray* temp = trailerurls_;
  trailerurls_ = NULL;
  return temp;
}
void Movie::set_allocated_trailerurls(::ru::mail::go::webbase::blobs::UrlArray* trailerurls) {
  delete trailerurls_;
  trailerurls_ = trailerurls;
  if (trailerurls) {
    set_has_trailerurls();
  } else {
    clear_has_trailerurls();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Movie.trailerUrls)
}

// optional .ru.mail.go.webbase.blobs.UrlArray officialUrls = 23;
bool Movie::has_officialurls() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Movie::set_has_officialurls() {
  _has_bits_[0] |= 0x00000400u;
}
void Movie::clear_has_officialurls() {
  _has_bits_[0] &= ~0x00000400u;
}
void Movie::clear_officialurls() {
  if (officialurls_ != NULL) officialurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
  clear_has_officialurls();
}
const ::ru::mail::go::webbase::blobs::UrlArray& Movie::officialurls() const {
  const ::ru::mail::go::webbase::blobs::UrlArray* p = officialurls_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Movie.officialUrls)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlArray*>(
      &::ru::mail::go::webbase::blobs::_UrlArray_default_instance_);
}
::ru::mail::go::webbase::blobs::UrlArray* Movie::mutable_officialurls() {
  set_has_officialurls();
  if (officialurls_ == NULL) {
    officialurls_ = new ::ru::mail::go::webbase::blobs::UrlArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Movie.officialUrls)
  return officialurls_;
}
::ru::mail::go::webbase::blobs::UrlArray* Movie::release_officialurls() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Movie.officialUrls)
  clear_has_officialurls();
  ::ru::mail::go::webbase::blobs::UrlArray* temp = officialurls_;
  officialurls_ = NULL;
  return temp;
}
void Movie::set_allocated_officialurls(::ru::mail::go::webbase::blobs::UrlArray* officialurls) {
  delete officialurls_;
  officialurls_ = officialurls;
  if (officialurls) {
    set_has_officialurls();
  } else {
    clear_has_officialurls();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Movie.officialUrls)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovieArray::kMoviesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovieArray::MovieArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.MovieArray)
}
MovieArray::MovieArray(const MovieArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      movies_(from.movies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.MovieArray)
}

void MovieArray::SharedCtor() {
  _cached_size_ = 0;
}

MovieArray::~MovieArray() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.MovieArray)
  SharedDtor();
}

void MovieArray::SharedDtor() {
}

void MovieArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovieArray::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MovieArray& MovieArray::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

MovieArray* MovieArray::New(::google::protobuf::Arena* arena) const {
  MovieArray* n = new MovieArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MovieArray::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.MovieArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  movies_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MovieArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.MovieArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.Movie movies = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_movies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.MovieArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.MovieArray)
  return false;
#undef DO_
}

void MovieArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.MovieArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.Movie movies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->movies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->movies(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.MovieArray)
}

::google::protobuf::uint8* MovieArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.MovieArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.Movie movies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->movies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->movies(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.MovieArray)
  return target;
}

size_t MovieArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.MovieArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.Movie movies = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->movies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movies(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovieArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.MovieArray)
  GOOGLE_DCHECK_NE(&from, this);
  const MovieArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MovieArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.MovieArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.MovieArray)
    MergeFrom(*source);
  }
}

void MovieArray::MergeFrom(const MovieArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.MovieArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  movies_.MergeFrom(from.movies_);
}

void MovieArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.MovieArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovieArray::CopyFrom(const MovieArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.MovieArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieArray::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->movies())) return false;
  return true;
}

void MovieArray::Swap(MovieArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MovieArray::InternalSwap(MovieArray* other) {
  using std::swap;
  movies_.InternalSwap(&other->movies_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MovieArray::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MovieArray

// repeated .ru.mail.go.webbase.blobs.Movie movies = 1;
int MovieArray::movies_size() const {
  return movies_.size();
}
void MovieArray::clear_movies() {
  movies_.Clear();
}
const ::ru::mail::go::webbase::blobs::Movie& MovieArray::movies(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieArray.movies)
  return movies_.Get(index);
}
::ru::mail::go::webbase::blobs::Movie* MovieArray::mutable_movies(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieArray.movies)
  return movies_.Mutable(index);
}
::ru::mail::go::webbase::blobs::Movie* MovieArray::add_movies() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.MovieArray.movies)
  return movies_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Movie >*
MovieArray::mutable_movies() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.MovieArray.movies)
  return &movies_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Movie >&
MovieArray::movies() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.MovieArray.movies)
  return movies_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TVEpisode::kWorkFieldNumber;
const int TVEpisode::kStartDateFieldNumber;
const int TVEpisode::kEpisodeNumberFieldNumber;
const int TVEpisode::kPartOfSeasonFieldNumber;
const int TVEpisode::kPartOfTVSeriesFieldNumber;
const int TVEpisode::kImagesUrlsFieldNumber;
const int TVEpisode::kStillsUrlsFieldNumber;
const int TVEpisode::kTrailerUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TVEpisode::TVEpisode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.TVEpisode)
}
TVEpisode::TVEpisode(const TVEpisode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  startdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_startdate()) {
    startdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.startdate_);
  }
  if (from.has_work()) {
    work_ = new ::ru::mail::go::webbase::blobs::CreativeWork(*from.work_);
  } else {
    work_ = NULL;
  }
  if (from.has_imagesurls()) {
    imagesurls_ = new ::ru::mail::go::webbase::blobs::UrlArray(*from.imagesurls_);
  } else {
    imagesurls_ = NULL;
  }
  if (from.has_stillsurls()) {
    stillsurls_ = new ::ru::mail::go::webbase::blobs::UrlArray(*from.stillsurls_);
  } else {
    stillsurls_ = NULL;
  }
  if (from.has_trailerurls()) {
    trailerurls_ = new ::ru::mail::go::webbase::blobs::UrlArray(*from.trailerurls_);
  } else {
    trailerurls_ = NULL;
  }
  ::memcpy(&episodenumber_, &from.episodenumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&partoftvseries_) -
    reinterpret_cast<char*>(&episodenumber_)) + sizeof(partoftvseries_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.TVEpisode)
}

void TVEpisode::SharedCtor() {
  _cached_size_ = 0;
  startdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&work_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partoftvseries_) -
      reinterpret_cast<char*>(&work_)) + sizeof(partoftvseries_));
}

TVEpisode::~TVEpisode() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.TVEpisode)
  SharedDtor();
}

void TVEpisode::SharedDtor() {
  startdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete work_;
  if (this != internal_default_instance()) delete imagesurls_;
  if (this != internal_default_instance()) delete stillsurls_;
  if (this != internal_default_instance()) delete trailerurls_;
}

void TVEpisode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TVEpisode::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TVEpisode& TVEpisode::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

TVEpisode* TVEpisode::New(::google::protobuf::Arena* arena) const {
  TVEpisode* n = new TVEpisode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TVEpisode::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.TVEpisode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!startdate_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*startdate_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(work_ != NULL);
      work_->::ru::mail::go::webbase::blobs::CreativeWork::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(imagesurls_ != NULL);
      imagesurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stillsurls_ != NULL);
      stillsurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(trailerurls_ != NULL);
      trailerurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&episodenumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&partoftvseries_) -
        reinterpret_cast<char*>(&episodenumber_)) + sizeof(partoftvseries_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TVEpisode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.TVEpisode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_work()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string startDate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->startdate().data(), static_cast<int>(this->startdate().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TVEpisode.startDate");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 episodeNumber = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_episodenumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &episodenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 partOfSeason = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_partofseason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partofseason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 partOfTVSeries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_partoftvseries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partoftvseries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagesurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UrlArray stillsUrls = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stillsurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UrlArray trailerUrls = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trailerurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.TVEpisode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.TVEpisode)
  return false;
#undef DO_
}

void TVEpisode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.TVEpisode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->work_, output);
  }

  // optional string startDate = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startdate().data(), static_cast<int>(this->startdate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TVEpisode.startDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->startdate(), output);
  }

  // optional uint32 episodeNumber = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->episodenumber(), output);
  }

  // optional uint32 partOfSeason = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->partofseason(), output);
  }

  // optional uint32 partOfTVSeries = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->partoftvseries(), output);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->imagesurls_, output);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray stillsUrls = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->stillsurls_, output);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray trailerUrls = 22;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->trailerurls_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.TVEpisode)
}

::google::protobuf::uint8* TVEpisode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.TVEpisode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->work_, deterministic, target);
  }

  // optional string startDate = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startdate().data(), static_cast<int>(this->startdate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TVEpisode.startDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->startdate(), target);
  }

  // optional uint32 episodeNumber = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->episodenumber(), target);
  }

  // optional uint32 partOfSeason = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->partofseason(), target);
  }

  // optional uint32 partOfTVSeries = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->partoftvseries(), target);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->imagesurls_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray stillsUrls = 21;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->stillsurls_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray trailerUrls = 22;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->trailerurls_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.TVEpisode)
  return target;
}

size_t TVEpisode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.TVEpisode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string startDate = 2;
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startdate());
    }

    // optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
    if (has_work()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->work_);
    }

    // optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
    if (has_imagesurls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imagesurls_);
    }

    // optional .ru.mail.go.webbase.blobs.UrlArray stillsUrls = 21;
    if (has_stillsurls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stillsurls_);
    }

    // optional .ru.mail.go.webbase.blobs.UrlArray trailerUrls = 22;
    if (has_trailerurls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trailerurls_);
    }

    // optional uint32 episodeNumber = 3;
    if (has_episodenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->episodenumber());
    }

    // optional uint32 partOfSeason = 4;
    if (has_partofseason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partofseason());
    }

    // optional uint32 partOfTVSeries = 5;
    if (has_partoftvseries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partoftvseries());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TVEpisode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.TVEpisode)
  GOOGLE_DCHECK_NE(&from, this);
  const TVEpisode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TVEpisode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.TVEpisode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.TVEpisode)
    MergeFrom(*source);
  }
}

void TVEpisode::MergeFrom(const TVEpisode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.TVEpisode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_startdate();
      startdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.startdate_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_work()->::ru::mail::go::webbase::blobs::CreativeWork::MergeFrom(from.work());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_imagesurls()->::ru::mail::go::webbase::blobs::UrlArray::MergeFrom(from.imagesurls());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_stillsurls()->::ru::mail::go::webbase::blobs::UrlArray::MergeFrom(from.stillsurls());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_trailerurls()->::ru::mail::go::webbase::blobs::UrlArray::MergeFrom(from.trailerurls());
    }
    if (cached_has_bits & 0x00000020u) {
      episodenumber_ = from.episodenumber_;
    }
    if (cached_has_bits & 0x00000040u) {
      partofseason_ = from.partofseason_;
    }
    if (cached_has_bits & 0x00000080u) {
      partoftvseries_ = from.partoftvseries_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TVEpisode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.TVEpisode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TVEpisode::CopyFrom(const TVEpisode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.TVEpisode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TVEpisode::IsInitialized() const {
  if (has_work()) {
    if (!this->work_->IsInitialized()) return false;
  }
  return true;
}

void TVEpisode::Swap(TVEpisode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TVEpisode::InternalSwap(TVEpisode* other) {
  using std::swap;
  startdate_.Swap(&other->startdate_);
  swap(work_, other->work_);
  swap(imagesurls_, other->imagesurls_);
  swap(stillsurls_, other->stillsurls_);
  swap(trailerurls_, other->trailerurls_);
  swap(episodenumber_, other->episodenumber_);
  swap(partofseason_, other->partofseason_);
  swap(partoftvseries_, other->partoftvseries_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TVEpisode::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TVEpisode

// optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
bool TVEpisode::has_work() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TVEpisode::set_has_work() {
  _has_bits_[0] |= 0x00000002u;
}
void TVEpisode::clear_has_work() {
  _has_bits_[0] &= ~0x00000002u;
}
void TVEpisode::clear_work() {
  if (work_ != NULL) work_->::ru::mail::go::webbase::blobs::CreativeWork::Clear();
  clear_has_work();
}
const ::ru::mail::go::webbase::blobs::CreativeWork& TVEpisode::work() const {
  const ::ru::mail::go::webbase::blobs::CreativeWork* p = work_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVEpisode.work)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::CreativeWork*>(
      &::ru::mail::go::webbase::blobs::_CreativeWork_default_instance_);
}
::ru::mail::go::webbase::blobs::CreativeWork* TVEpisode::mutable_work() {
  set_has_work();
  if (work_ == NULL) {
    work_ = new ::ru::mail::go::webbase::blobs::CreativeWork;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVEpisode.work)
  return work_;
}
::ru::mail::go::webbase::blobs::CreativeWork* TVEpisode::release_work() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVEpisode.work)
  clear_has_work();
  ::ru::mail::go::webbase::blobs::CreativeWork* temp = work_;
  work_ = NULL;
  return temp;
}
void TVEpisode::set_allocated_work(::ru::mail::go::webbase::blobs::CreativeWork* work) {
  delete work_;
  work_ = work;
  if (work) {
    set_has_work();
  } else {
    clear_has_work();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVEpisode.work)
}

// optional string startDate = 2;
bool TVEpisode::has_startdate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TVEpisode::set_has_startdate() {
  _has_bits_[0] |= 0x00000001u;
}
void TVEpisode::clear_has_startdate() {
  _has_bits_[0] &= ~0x00000001u;
}
void TVEpisode::clear_startdate() {
  startdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_startdate();
}
const ::std::string& TVEpisode::startdate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVEpisode.startDate)
  return startdate_.GetNoArena();
}
void TVEpisode::set_startdate(const ::std::string& value) {
  set_has_startdate();
  startdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TVEpisode.startDate)
}
#if LANG_CXX11
void TVEpisode::set_startdate(::std::string&& value) {
  set_has_startdate();
  startdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TVEpisode.startDate)
}
#endif
void TVEpisode::set_startdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_startdate();
  startdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TVEpisode.startDate)
}
void TVEpisode::set_startdate(const char* value, size_t size) {
  set_has_startdate();
  startdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TVEpisode.startDate)
}
::std::string* TVEpisode::mutable_startdate() {
  set_has_startdate();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVEpisode.startDate)
  return startdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TVEpisode::release_startdate() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVEpisode.startDate)
  clear_has_startdate();
  return startdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TVEpisode::set_allocated_startdate(::std::string* startdate) {
  if (startdate != NULL) {
    set_has_startdate();
  } else {
    clear_has_startdate();
  }
  startdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), startdate);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVEpisode.startDate)
}

// optional uint32 episodeNumber = 3;
bool TVEpisode::has_episodenumber() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TVEpisode::set_has_episodenumber() {
  _has_bits_[0] |= 0x00000020u;
}
void TVEpisode::clear_has_episodenumber() {
  _has_bits_[0] &= ~0x00000020u;
}
void TVEpisode::clear_episodenumber() {
  episodenumber_ = 0u;
  clear_has_episodenumber();
}
::google::protobuf::uint32 TVEpisode::episodenumber() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVEpisode.episodeNumber)
  return episodenumber_;
}
void TVEpisode::set_episodenumber(::google::protobuf::uint32 value) {
  set_has_episodenumber();
  episodenumber_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TVEpisode.episodeNumber)
}

// optional uint32 partOfSeason = 4;
bool TVEpisode::has_partofseason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TVEpisode::set_has_partofseason() {
  _has_bits_[0] |= 0x00000040u;
}
void TVEpisode::clear_has_partofseason() {
  _has_bits_[0] &= ~0x00000040u;
}
void TVEpisode::clear_partofseason() {
  partofseason_ = 0u;
  clear_has_partofseason();
}
::google::protobuf::uint32 TVEpisode::partofseason() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVEpisode.partOfSeason)
  return partofseason_;
}
void TVEpisode::set_partofseason(::google::protobuf::uint32 value) {
  set_has_partofseason();
  partofseason_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TVEpisode.partOfSeason)
}

// optional uint32 partOfTVSeries = 5;
bool TVEpisode::has_partoftvseries() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TVEpisode::set_has_partoftvseries() {
  _has_bits_[0] |= 0x00000080u;
}
void TVEpisode::clear_has_partoftvseries() {
  _has_bits_[0] &= ~0x00000080u;
}
void TVEpisode::clear_partoftvseries() {
  partoftvseries_ = 0u;
  clear_has_partoftvseries();
}
::google::protobuf::uint32 TVEpisode::partoftvseries() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVEpisode.partOfTVSeries)
  return partoftvseries_;
}
void TVEpisode::set_partoftvseries(::google::protobuf::uint32 value) {
  set_has_partoftvseries();
  partoftvseries_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TVEpisode.partOfTVSeries)
}

// optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
bool TVEpisode::has_imagesurls() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TVEpisode::set_has_imagesurls() {
  _has_bits_[0] |= 0x00000004u;
}
void TVEpisode::clear_has_imagesurls() {
  _has_bits_[0] &= ~0x00000004u;
}
void TVEpisode::clear_imagesurls() {
  if (imagesurls_ != NULL) imagesurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
  clear_has_imagesurls();
}
const ::ru::mail::go::webbase::blobs::UrlArray& TVEpisode::imagesurls() const {
  const ::ru::mail::go::webbase::blobs::UrlArray* p = imagesurls_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVEpisode.imagesUrls)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlArray*>(
      &::ru::mail::go::webbase::blobs::_UrlArray_default_instance_);
}
::ru::mail::go::webbase::blobs::UrlArray* TVEpisode::mutable_imagesurls() {
  set_has_imagesurls();
  if (imagesurls_ == NULL) {
    imagesurls_ = new ::ru::mail::go::webbase::blobs::UrlArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVEpisode.imagesUrls)
  return imagesurls_;
}
::ru::mail::go::webbase::blobs::UrlArray* TVEpisode::release_imagesurls() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVEpisode.imagesUrls)
  clear_has_imagesurls();
  ::ru::mail::go::webbase::blobs::UrlArray* temp = imagesurls_;
  imagesurls_ = NULL;
  return temp;
}
void TVEpisode::set_allocated_imagesurls(::ru::mail::go::webbase::blobs::UrlArray* imagesurls) {
  delete imagesurls_;
  imagesurls_ = imagesurls;
  if (imagesurls) {
    set_has_imagesurls();
  } else {
    clear_has_imagesurls();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVEpisode.imagesUrls)
}

// optional .ru.mail.go.webbase.blobs.UrlArray stillsUrls = 21;
bool TVEpisode::has_stillsurls() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TVEpisode::set_has_stillsurls() {
  _has_bits_[0] |= 0x00000008u;
}
void TVEpisode::clear_has_stillsurls() {
  _has_bits_[0] &= ~0x00000008u;
}
void TVEpisode::clear_stillsurls() {
  if (stillsurls_ != NULL) stillsurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
  clear_has_stillsurls();
}
const ::ru::mail::go::webbase::blobs::UrlArray& TVEpisode::stillsurls() const {
  const ::ru::mail::go::webbase::blobs::UrlArray* p = stillsurls_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVEpisode.stillsUrls)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlArray*>(
      &::ru::mail::go::webbase::blobs::_UrlArray_default_instance_);
}
::ru::mail::go::webbase::blobs::UrlArray* TVEpisode::mutable_stillsurls() {
  set_has_stillsurls();
  if (stillsurls_ == NULL) {
    stillsurls_ = new ::ru::mail::go::webbase::blobs::UrlArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVEpisode.stillsUrls)
  return stillsurls_;
}
::ru::mail::go::webbase::blobs::UrlArray* TVEpisode::release_stillsurls() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVEpisode.stillsUrls)
  clear_has_stillsurls();
  ::ru::mail::go::webbase::blobs::UrlArray* temp = stillsurls_;
  stillsurls_ = NULL;
  return temp;
}
void TVEpisode::set_allocated_stillsurls(::ru::mail::go::webbase::blobs::UrlArray* stillsurls) {
  delete stillsurls_;
  stillsurls_ = stillsurls;
  if (stillsurls) {
    set_has_stillsurls();
  } else {
    clear_has_stillsurls();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVEpisode.stillsUrls)
}

// optional .ru.mail.go.webbase.blobs.UrlArray trailerUrls = 22;
bool TVEpisode::has_trailerurls() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TVEpisode::set_has_trailerurls() {
  _has_bits_[0] |= 0x00000010u;
}
void TVEpisode::clear_has_trailerurls() {
  _has_bits_[0] &= ~0x00000010u;
}
void TVEpisode::clear_trailerurls() {
  if (trailerurls_ != NULL) trailerurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
  clear_has_trailerurls();
}
const ::ru::mail::go::webbase::blobs::UrlArray& TVEpisode::trailerurls() const {
  const ::ru::mail::go::webbase::blobs::UrlArray* p = trailerurls_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVEpisode.trailerUrls)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlArray*>(
      &::ru::mail::go::webbase::blobs::_UrlArray_default_instance_);
}
::ru::mail::go::webbase::blobs::UrlArray* TVEpisode::mutable_trailerurls() {
  set_has_trailerurls();
  if (trailerurls_ == NULL) {
    trailerurls_ = new ::ru::mail::go::webbase::blobs::UrlArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVEpisode.trailerUrls)
  return trailerurls_;
}
::ru::mail::go::webbase::blobs::UrlArray* TVEpisode::release_trailerurls() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVEpisode.trailerUrls)
  clear_has_trailerurls();
  ::ru::mail::go::webbase::blobs::UrlArray* temp = trailerurls_;
  trailerurls_ = NULL;
  return temp;
}
void TVEpisode::set_allocated_trailerurls(::ru::mail::go::webbase::blobs::UrlArray* trailerurls) {
  delete trailerurls_;
  trailerurls_ = trailerurls;
  if (trailerurls) {
    set_has_trailerurls();
  } else {
    clear_has_trailerurls();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVEpisode.trailerUrls)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TVEpisodeArray::kEpisodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TVEpisodeArray::TVEpisodeArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.TVEpisodeArray)
}
TVEpisodeArray::TVEpisodeArray(const TVEpisodeArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      episodes_(from.episodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.TVEpisodeArray)
}

void TVEpisodeArray::SharedCtor() {
  _cached_size_ = 0;
}

TVEpisodeArray::~TVEpisodeArray() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.TVEpisodeArray)
  SharedDtor();
}

void TVEpisodeArray::SharedDtor() {
}

void TVEpisodeArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TVEpisodeArray::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TVEpisodeArray& TVEpisodeArray::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

TVEpisodeArray* TVEpisodeArray::New(::google::protobuf::Arena* arena) const {
  TVEpisodeArray* n = new TVEpisodeArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TVEpisodeArray::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.TVEpisodeArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  episodes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TVEpisodeArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.TVEpisodeArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.TVEpisode episodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_episodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.TVEpisodeArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.TVEpisodeArray)
  return false;
#undef DO_
}

void TVEpisodeArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.TVEpisodeArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.TVEpisode episodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->episodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->episodes(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.TVEpisodeArray)
}

::google::protobuf::uint8* TVEpisodeArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.TVEpisodeArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.TVEpisode episodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->episodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->episodes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.TVEpisodeArray)
  return target;
}

size_t TVEpisodeArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.TVEpisodeArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.TVEpisode episodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->episodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->episodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TVEpisodeArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.TVEpisodeArray)
  GOOGLE_DCHECK_NE(&from, this);
  const TVEpisodeArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TVEpisodeArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.TVEpisodeArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.TVEpisodeArray)
    MergeFrom(*source);
  }
}

void TVEpisodeArray::MergeFrom(const TVEpisodeArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.TVEpisodeArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  episodes_.MergeFrom(from.episodes_);
}

void TVEpisodeArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.TVEpisodeArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TVEpisodeArray::CopyFrom(const TVEpisodeArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.TVEpisodeArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TVEpisodeArray::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->episodes())) return false;
  return true;
}

void TVEpisodeArray::Swap(TVEpisodeArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TVEpisodeArray::InternalSwap(TVEpisodeArray* other) {
  using std::swap;
  episodes_.InternalSwap(&other->episodes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TVEpisodeArray::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TVEpisodeArray

// repeated .ru.mail.go.webbase.blobs.TVEpisode episodes = 1;
int TVEpisodeArray::episodes_size() const {
  return episodes_.size();
}
void TVEpisodeArray::clear_episodes() {
  episodes_.Clear();
}
const ::ru::mail::go::webbase::blobs::TVEpisode& TVEpisodeArray::episodes(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVEpisodeArray.episodes)
  return episodes_.Get(index);
}
::ru::mail::go::webbase::blobs::TVEpisode* TVEpisodeArray::mutable_episodes(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVEpisodeArray.episodes)
  return episodes_.Mutable(index);
}
::ru::mail::go::webbase::blobs::TVEpisode* TVEpisodeArray::add_episodes() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.TVEpisodeArray.episodes)
  return episodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TVEpisode >*
TVEpisodeArray::mutable_episodes() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.TVEpisodeArray.episodes)
  return &episodes_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TVEpisode >&
TVEpisodeArray::episodes() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.TVEpisodeArray.episodes)
  return episodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TVSeason::kWorkFieldNumber;
const int TVSeason::kSeasonNumberFieldNumber;
const int TVSeason::kStartDateFieldNumber;
const int TVSeason::kEndDateFieldNumber;
const int TVSeason::kPartOfTVSeriesFieldNumber;
const int TVSeason::kNumberOfEpisodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TVSeason::TVSeason()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.TVSeason)
}
TVSeason::TVSeason(const TVSeason& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  startdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_startdate()) {
    startdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.startdate_);
  }
  enddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enddate()) {
    enddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enddate_);
  }
  if (from.has_work()) {
    work_ = new ::ru::mail::go::webbase::blobs::CreativeWork(*from.work_);
  } else {
    work_ = NULL;
  }
  ::memcpy(&seasonnumber_, &from.seasonnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&numberofepisodes_) -
    reinterpret_cast<char*>(&seasonnumber_)) + sizeof(numberofepisodes_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.TVSeason)
}

void TVSeason::SharedCtor() {
  _cached_size_ = 0;
  startdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&work_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numberofepisodes_) -
      reinterpret_cast<char*>(&work_)) + sizeof(numberofepisodes_));
}

TVSeason::~TVSeason() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.TVSeason)
  SharedDtor();
}

void TVSeason::SharedDtor() {
  startdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete work_;
}

void TVSeason::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TVSeason::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TVSeason& TVSeason::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

TVSeason* TVSeason::New(::google::protobuf::Arena* arena) const {
  TVSeason* n = new TVSeason;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TVSeason::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.TVSeason)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!startdate_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*startdate_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!enddate_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*enddate_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(work_ != NULL);
      work_->::ru::mail::go::webbase::blobs::CreativeWork::Clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&seasonnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numberofepisodes_) -
        reinterpret_cast<char*>(&seasonnumber_)) + sizeof(numberofepisodes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TVSeason::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.TVSeason)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_work()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 seasonNumber = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_seasonnumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seasonnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string startDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->startdate().data(), static_cast<int>(this->startdate().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TVSeason.startDate");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string endDate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enddate().data(), static_cast<int>(this->enddate().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TVSeason.endDate");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 partOfTVSeries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_partoftvseries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partoftvseries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numberOfEpisodes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_numberofepisodes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numberofepisodes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.TVSeason)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.TVSeason)
  return false;
#undef DO_
}

void TVSeason::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.TVSeason)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->work_, output);
  }

  // required uint32 seasonNumber = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seasonnumber(), output);
  }

  // optional string startDate = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startdate().data(), static_cast<int>(this->startdate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TVSeason.startDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->startdate(), output);
  }

  // optional string endDate = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enddate().data(), static_cast<int>(this->enddate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TVSeason.endDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->enddate(), output);
  }

  // optional uint32 partOfTVSeries = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->partoftvseries(), output);
  }

  // optional uint32 numberOfEpisodes = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->numberofepisodes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.TVSeason)
}

::google::protobuf::uint8* TVSeason::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.TVSeason)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->work_, deterministic, target);
  }

  // required uint32 seasonNumber = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seasonnumber(), target);
  }

  // optional string startDate = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startdate().data(), static_cast<int>(this->startdate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TVSeason.startDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->startdate(), target);
  }

  // optional string endDate = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enddate().data(), static_cast<int>(this->enddate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TVSeason.endDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->enddate(), target);
  }

  // optional uint32 partOfTVSeries = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->partoftvseries(), target);
  }

  // optional uint32 numberOfEpisodes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->numberofepisodes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.TVSeason)
  return target;
}

size_t TVSeason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.TVSeason)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 seasonNumber = 2;
  if (has_seasonnumber()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seasonnumber());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string startDate = 3;
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startdate());
    }

    // optional string endDate = 4;
    if (has_enddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enddate());
    }

    // optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
    if (has_work()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->work_);
    }

  }
  if (_has_bits_[0 / 32] & 48u) {
    // optional uint32 partOfTVSeries = 5;
    if (has_partoftvseries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partoftvseries());
    }

    // optional uint32 numberOfEpisodes = 6;
    if (has_numberofepisodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numberofepisodes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TVSeason::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.TVSeason)
  GOOGLE_DCHECK_NE(&from, this);
  const TVSeason* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TVSeason>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.TVSeason)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.TVSeason)
    MergeFrom(*source);
  }
}

void TVSeason::MergeFrom(const TVSeason& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.TVSeason)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_startdate();
      startdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.startdate_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_enddate();
      enddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enddate_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_work()->::ru::mail::go::webbase::blobs::CreativeWork::MergeFrom(from.work());
    }
    if (cached_has_bits & 0x00000008u) {
      seasonnumber_ = from.seasonnumber_;
    }
    if (cached_has_bits & 0x00000010u) {
      partoftvseries_ = from.partoftvseries_;
    }
    if (cached_has_bits & 0x00000020u) {
      numberofepisodes_ = from.numberofepisodes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TVSeason::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.TVSeason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TVSeason::CopyFrom(const TVSeason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.TVSeason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TVSeason::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_work()) {
    if (!this->work_->IsInitialized()) return false;
  }
  return true;
}

void TVSeason::Swap(TVSeason* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TVSeason::InternalSwap(TVSeason* other) {
  using std::swap;
  startdate_.Swap(&other->startdate_);
  enddate_.Swap(&other->enddate_);
  swap(work_, other->work_);
  swap(seasonnumber_, other->seasonnumber_);
  swap(partoftvseries_, other->partoftvseries_);
  swap(numberofepisodes_, other->numberofepisodes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TVSeason::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TVSeason

// optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
bool TVSeason::has_work() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TVSeason::set_has_work() {
  _has_bits_[0] |= 0x00000004u;
}
void TVSeason::clear_has_work() {
  _has_bits_[0] &= ~0x00000004u;
}
void TVSeason::clear_work() {
  if (work_ != NULL) work_->::ru::mail::go::webbase::blobs::CreativeWork::Clear();
  clear_has_work();
}
const ::ru::mail::go::webbase::blobs::CreativeWork& TVSeason::work() const {
  const ::ru::mail::go::webbase::blobs::CreativeWork* p = work_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeason.work)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::CreativeWork*>(
      &::ru::mail::go::webbase::blobs::_CreativeWork_default_instance_);
}
::ru::mail::go::webbase::blobs::CreativeWork* TVSeason::mutable_work() {
  set_has_work();
  if (work_ == NULL) {
    work_ = new ::ru::mail::go::webbase::blobs::CreativeWork;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVSeason.work)
  return work_;
}
::ru::mail::go::webbase::blobs::CreativeWork* TVSeason::release_work() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVSeason.work)
  clear_has_work();
  ::ru::mail::go::webbase::blobs::CreativeWork* temp = work_;
  work_ = NULL;
  return temp;
}
void TVSeason::set_allocated_work(::ru::mail::go::webbase::blobs::CreativeWork* work) {
  delete work_;
  work_ = work;
  if (work) {
    set_has_work();
  } else {
    clear_has_work();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVSeason.work)
}

// required uint32 seasonNumber = 2;
bool TVSeason::has_seasonnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TVSeason::set_has_seasonnumber() {
  _has_bits_[0] |= 0x00000008u;
}
void TVSeason::clear_has_seasonnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
void TVSeason::clear_seasonnumber() {
  seasonnumber_ = 0u;
  clear_has_seasonnumber();
}
::google::protobuf::uint32 TVSeason::seasonnumber() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeason.seasonNumber)
  return seasonnumber_;
}
void TVSeason::set_seasonnumber(::google::protobuf::uint32 value) {
  set_has_seasonnumber();
  seasonnumber_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TVSeason.seasonNumber)
}

// optional string startDate = 3;
bool TVSeason::has_startdate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TVSeason::set_has_startdate() {
  _has_bits_[0] |= 0x00000001u;
}
void TVSeason::clear_has_startdate() {
  _has_bits_[0] &= ~0x00000001u;
}
void TVSeason::clear_startdate() {
  startdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_startdate();
}
const ::std::string& TVSeason::startdate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeason.startDate)
  return startdate_.GetNoArena();
}
void TVSeason::set_startdate(const ::std::string& value) {
  set_has_startdate();
  startdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TVSeason.startDate)
}
#if LANG_CXX11
void TVSeason::set_startdate(::std::string&& value) {
  set_has_startdate();
  startdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TVSeason.startDate)
}
#endif
void TVSeason::set_startdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_startdate();
  startdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TVSeason.startDate)
}
void TVSeason::set_startdate(const char* value, size_t size) {
  set_has_startdate();
  startdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TVSeason.startDate)
}
::std::string* TVSeason::mutable_startdate() {
  set_has_startdate();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVSeason.startDate)
  return startdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TVSeason::release_startdate() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVSeason.startDate)
  clear_has_startdate();
  return startdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TVSeason::set_allocated_startdate(::std::string* startdate) {
  if (startdate != NULL) {
    set_has_startdate();
  } else {
    clear_has_startdate();
  }
  startdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), startdate);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVSeason.startDate)
}

// optional string endDate = 4;
bool TVSeason::has_enddate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TVSeason::set_has_enddate() {
  _has_bits_[0] |= 0x00000002u;
}
void TVSeason::clear_has_enddate() {
  _has_bits_[0] &= ~0x00000002u;
}
void TVSeason::clear_enddate() {
  enddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enddate();
}
const ::std::string& TVSeason::enddate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeason.endDate)
  return enddate_.GetNoArena();
}
void TVSeason::set_enddate(const ::std::string& value) {
  set_has_enddate();
  enddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TVSeason.endDate)
}
#if LANG_CXX11
void TVSeason::set_enddate(::std::string&& value) {
  set_has_enddate();
  enddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TVSeason.endDate)
}
#endif
void TVSeason::set_enddate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enddate();
  enddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TVSeason.endDate)
}
void TVSeason::set_enddate(const char* value, size_t size) {
  set_has_enddate();
  enddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TVSeason.endDate)
}
::std::string* TVSeason::mutable_enddate() {
  set_has_enddate();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVSeason.endDate)
  return enddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TVSeason::release_enddate() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVSeason.endDate)
  clear_has_enddate();
  return enddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TVSeason::set_allocated_enddate(::std::string* enddate) {
  if (enddate != NULL) {
    set_has_enddate();
  } else {
    clear_has_enddate();
  }
  enddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enddate);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVSeason.endDate)
}

// optional uint32 partOfTVSeries = 5;
bool TVSeason::has_partoftvseries() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TVSeason::set_has_partoftvseries() {
  _has_bits_[0] |= 0x00000010u;
}
void TVSeason::clear_has_partoftvseries() {
  _has_bits_[0] &= ~0x00000010u;
}
void TVSeason::clear_partoftvseries() {
  partoftvseries_ = 0u;
  clear_has_partoftvseries();
}
::google::protobuf::uint32 TVSeason::partoftvseries() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeason.partOfTVSeries)
  return partoftvseries_;
}
void TVSeason::set_partoftvseries(::google::protobuf::uint32 value) {
  set_has_partoftvseries();
  partoftvseries_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TVSeason.partOfTVSeries)
}

// optional uint32 numberOfEpisodes = 6;
bool TVSeason::has_numberofepisodes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TVSeason::set_has_numberofepisodes() {
  _has_bits_[0] |= 0x00000020u;
}
void TVSeason::clear_has_numberofepisodes() {
  _has_bits_[0] &= ~0x00000020u;
}
void TVSeason::clear_numberofepisodes() {
  numberofepisodes_ = 0u;
  clear_has_numberofepisodes();
}
::google::protobuf::uint32 TVSeason::numberofepisodes() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeason.numberOfEpisodes)
  return numberofepisodes_;
}
void TVSeason::set_numberofepisodes(::google::protobuf::uint32 value) {
  set_has_numberofepisodes();
  numberofepisodes_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TVSeason.numberOfEpisodes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TVSeasonArray::kSeasonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TVSeasonArray::TVSeasonArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.TVSeasonArray)
}
TVSeasonArray::TVSeasonArray(const TVSeasonArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      seasons_(from.seasons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.TVSeasonArray)
}

void TVSeasonArray::SharedCtor() {
  _cached_size_ = 0;
}

TVSeasonArray::~TVSeasonArray() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.TVSeasonArray)
  SharedDtor();
}

void TVSeasonArray::SharedDtor() {
}

void TVSeasonArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TVSeasonArray::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TVSeasonArray& TVSeasonArray::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

TVSeasonArray* TVSeasonArray::New(::google::protobuf::Arena* arena) const {
  TVSeasonArray* n = new TVSeasonArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TVSeasonArray::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.TVSeasonArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seasons_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TVSeasonArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.TVSeasonArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.TVSeason seasons = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seasons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.TVSeasonArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.TVSeasonArray)
  return false;
#undef DO_
}

void TVSeasonArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.TVSeasonArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.TVSeason seasons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->seasons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->seasons(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.TVSeasonArray)
}

::google::protobuf::uint8* TVSeasonArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.TVSeasonArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.TVSeason seasons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->seasons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->seasons(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.TVSeasonArray)
  return target;
}

size_t TVSeasonArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.TVSeasonArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.TVSeason seasons = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->seasons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seasons(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TVSeasonArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.TVSeasonArray)
  GOOGLE_DCHECK_NE(&from, this);
  const TVSeasonArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TVSeasonArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.TVSeasonArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.TVSeasonArray)
    MergeFrom(*source);
  }
}

void TVSeasonArray::MergeFrom(const TVSeasonArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.TVSeasonArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  seasons_.MergeFrom(from.seasons_);
}

void TVSeasonArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.TVSeasonArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TVSeasonArray::CopyFrom(const TVSeasonArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.TVSeasonArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TVSeasonArray::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->seasons())) return false;
  return true;
}

void TVSeasonArray::Swap(TVSeasonArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TVSeasonArray::InternalSwap(TVSeasonArray* other) {
  using std::swap;
  seasons_.InternalSwap(&other->seasons_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TVSeasonArray::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TVSeasonArray

// repeated .ru.mail.go.webbase.blobs.TVSeason seasons = 1;
int TVSeasonArray::seasons_size() const {
  return seasons_.size();
}
void TVSeasonArray::clear_seasons() {
  seasons_.Clear();
}
const ::ru::mail::go::webbase::blobs::TVSeason& TVSeasonArray::seasons(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeasonArray.seasons)
  return seasons_.Get(index);
}
::ru::mail::go::webbase::blobs::TVSeason* TVSeasonArray::mutable_seasons(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVSeasonArray.seasons)
  return seasons_.Mutable(index);
}
::ru::mail::go::webbase::blobs::TVSeason* TVSeasonArray::add_seasons() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.TVSeasonArray.seasons)
  return seasons_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TVSeason >*
TVSeasonArray::mutable_seasons() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.TVSeasonArray.seasons)
  return &seasons_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TVSeason >&
TVSeasonArray::seasons() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.TVSeasonArray.seasons)
  return seasons_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TVSeries::kWorkFieldNumber;
const int TVSeries::kStartDateFieldNumber;
const int TVSeries::kEndDateFieldNumber;
const int TVSeries::kNumberOfEpisodesFieldNumber;
const int TVSeries::kActorsFieldNumber;
const int TVSeries::kDirectorsFieldNumber;
const int TVSeries::kPersonsFieldNumber;
const int TVSeries::kScreenwritersFieldNumber;
const int TVSeries::kImagesUrlsFieldNumber;
const int TVSeries::kStillsUrlsFieldNumber;
const int TVSeries::kTrailerUrlsFieldNumber;
const int TVSeries::kOfficialUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TVSeries::TVSeries()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.TVSeries)
}
TVSeries::TVSeries(const TVSeries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  startdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_startdate()) {
    startdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.startdate_);
  }
  enddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enddate()) {
    enddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enddate_);
  }
  if (from.has_work()) {
    work_ = new ::ru::mail::go::webbase::blobs::CreativeWork(*from.work_);
  } else {
    work_ = NULL;
  }
  if (from.has_actors()) {
    actors_ = new ::ru::mail::go::webbase::blobs::StringArray(*from.actors_);
  } else {
    actors_ = NULL;
  }
  if (from.has_directors()) {
    directors_ = new ::ru::mail::go::webbase::blobs::StringArray(*from.directors_);
  } else {
    directors_ = NULL;
  }
  if (from.has_persons()) {
    persons_ = new ::ru::mail::go::webbase::blobs::StringArray(*from.persons_);
  } else {
    persons_ = NULL;
  }
  if (from.has_screenwriters()) {
    screenwriters_ = new ::ru::mail::go::webbase::blobs::StringArray(*from.screenwriters_);
  } else {
    screenwriters_ = NULL;
  }
  if (from.has_imagesurls()) {
    imagesurls_ = new ::ru::mail::go::webbase::blobs::UrlArray(*from.imagesurls_);
  } else {
    imagesurls_ = NULL;
  }
  if (from.has_stillsurls()) {
    stillsurls_ = new ::ru::mail::go::webbase::blobs::UrlArray(*from.stillsurls_);
  } else {
    stillsurls_ = NULL;
  }
  if (from.has_trailerurls()) {
    trailerurls_ = new ::ru::mail::go::webbase::blobs::UrlArray(*from.trailerurls_);
  } else {
    trailerurls_ = NULL;
  }
  if (from.has_officialurls()) {
    officialurls_ = new ::ru::mail::go::webbase::blobs::UrlArray(*from.officialurls_);
  } else {
    officialurls_ = NULL;
  }
  numberofepisodes_ = from.numberofepisodes_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.TVSeries)
}

void TVSeries::SharedCtor() {
  _cached_size_ = 0;
  startdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&work_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numberofepisodes_) -
      reinterpret_cast<char*>(&work_)) + sizeof(numberofepisodes_));
}

TVSeries::~TVSeries() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.TVSeries)
  SharedDtor();
}

void TVSeries::SharedDtor() {
  startdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete work_;
  if (this != internal_default_instance()) delete actors_;
  if (this != internal_default_instance()) delete directors_;
  if (this != internal_default_instance()) delete persons_;
  if (this != internal_default_instance()) delete screenwriters_;
  if (this != internal_default_instance()) delete imagesurls_;
  if (this != internal_default_instance()) delete stillsurls_;
  if (this != internal_default_instance()) delete trailerurls_;
  if (this != internal_default_instance()) delete officialurls_;
}

void TVSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TVSeries::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TVSeries& TVSeries::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

TVSeries* TVSeries::New(::google::protobuf::Arena* arena) const {
  TVSeries* n = new TVSeries;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TVSeries::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.TVSeries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!startdate_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*startdate_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!enddate_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*enddate_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(work_ != NULL);
      work_->::ru::mail::go::webbase::blobs::CreativeWork::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(actors_ != NULL);
      actors_->::ru::mail::go::webbase::blobs::StringArray::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(directors_ != NULL);
      directors_->::ru::mail::go::webbase::blobs::StringArray::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(persons_ != NULL);
      persons_->::ru::mail::go::webbase::blobs::StringArray::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(screenwriters_ != NULL);
      screenwriters_->::ru::mail::go::webbase::blobs::StringArray::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(imagesurls_ != NULL);
      imagesurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(stillsurls_ != NULL);
      stillsurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(trailerurls_ != NULL);
      trailerurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(officialurls_ != NULL);
      officialurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
    }
  }
  numberofepisodes_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TVSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.TVSeries)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_work()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string startDate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->startdate().data(), static_cast<int>(this->startdate().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TVSeries.startDate");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string endDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enddate().data(), static_cast<int>(this->enddate().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TVSeries.endDate");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numberOfEpisodes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_numberofepisodes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numberofepisodes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.StringArray actors = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.StringArray directors = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_directors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.StringArray persons = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_persons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.StringArray screenwriters = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screenwriters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagesurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UrlArray stillsUrls = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stillsurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UrlArray trailerUrls = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trailerurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UrlArray officialUrls = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_officialurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.TVSeries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.TVSeries)
  return false;
#undef DO_
}

void TVSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.TVSeries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->work_, output);
  }

  // optional string startDate = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startdate().data(), static_cast<int>(this->startdate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TVSeries.startDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->startdate(), output);
  }

  // optional string endDate = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enddate().data(), static_cast<int>(this->enddate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TVSeries.endDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->enddate(), output);
  }

  // optional uint32 numberOfEpisodes = 4;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->numberofepisodes(), output);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray actors = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->actors_, output);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray directors = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->directors_, output);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray persons = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->persons_, output);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray screenwriters = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->screenwriters_, output);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->imagesurls_, output);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray stillsUrls = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->stillsurls_, output);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray trailerUrls = 22;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->trailerurls_, output);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray officialUrls = 23;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->officialurls_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.TVSeries)
}

::google::protobuf::uint8* TVSeries::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.TVSeries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->work_, deterministic, target);
  }

  // optional string startDate = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startdate().data(), static_cast<int>(this->startdate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TVSeries.startDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->startdate(), target);
  }

  // optional string endDate = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enddate().data(), static_cast<int>(this->enddate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TVSeries.endDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->enddate(), target);
  }

  // optional uint32 numberOfEpisodes = 4;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->numberofepisodes(), target);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray actors = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->actors_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray directors = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->directors_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray persons = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->persons_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.StringArray screenwriters = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->screenwriters_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->imagesurls_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray stillsUrls = 21;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->stillsurls_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray trailerUrls = 22;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->trailerurls_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.UrlArray officialUrls = 23;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->officialurls_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.TVSeries)
  return target;
}

size_t TVSeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.TVSeries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string startDate = 2;
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startdate());
    }

    // optional string endDate = 3;
    if (has_enddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enddate());
    }

    // optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
    if (has_work()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->work_);
    }

    // optional .ru.mail.go.webbase.blobs.StringArray actors = 5;
    if (has_actors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->actors_);
    }

    // optional .ru.mail.go.webbase.blobs.StringArray directors = 6;
    if (has_directors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->directors_);
    }

    // optional .ru.mail.go.webbase.blobs.StringArray persons = 7;
    if (has_persons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->persons_);
    }

    // optional .ru.mail.go.webbase.blobs.StringArray screenwriters = 8;
    if (has_screenwriters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->screenwriters_);
    }

    // optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
    if (has_imagesurls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imagesurls_);
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .ru.mail.go.webbase.blobs.UrlArray stillsUrls = 21;
    if (has_stillsurls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stillsurls_);
    }

    // optional .ru.mail.go.webbase.blobs.UrlArray trailerUrls = 22;
    if (has_trailerurls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trailerurls_);
    }

    // optional .ru.mail.go.webbase.blobs.UrlArray officialUrls = 23;
    if (has_officialurls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->officialurls_);
    }

    // optional uint32 numberOfEpisodes = 4;
    if (has_numberofepisodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numberofepisodes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TVSeries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.TVSeries)
  GOOGLE_DCHECK_NE(&from, this);
  const TVSeries* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TVSeries>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.TVSeries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.TVSeries)
    MergeFrom(*source);
  }
}

void TVSeries::MergeFrom(const TVSeries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.TVSeries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_startdate();
      startdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.startdate_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_enddate();
      enddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enddate_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_work()->::ru::mail::go::webbase::blobs::CreativeWork::MergeFrom(from.work());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_actors()->::ru::mail::go::webbase::blobs::StringArray::MergeFrom(from.actors());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_directors()->::ru::mail::go::webbase::blobs::StringArray::MergeFrom(from.directors());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_persons()->::ru::mail::go::webbase::blobs::StringArray::MergeFrom(from.persons());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_screenwriters()->::ru::mail::go::webbase::blobs::StringArray::MergeFrom(from.screenwriters());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_imagesurls()->::ru::mail::go::webbase::blobs::UrlArray::MergeFrom(from.imagesurls());
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_stillsurls()->::ru::mail::go::webbase::blobs::UrlArray::MergeFrom(from.stillsurls());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_trailerurls()->::ru::mail::go::webbase::blobs::UrlArray::MergeFrom(from.trailerurls());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_officialurls()->::ru::mail::go::webbase::blobs::UrlArray::MergeFrom(from.officialurls());
    }
    if (cached_has_bits & 0x00000800u) {
      numberofepisodes_ = from.numberofepisodes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TVSeries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.TVSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TVSeries::CopyFrom(const TVSeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.TVSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TVSeries::IsInitialized() const {
  if (has_work()) {
    if (!this->work_->IsInitialized()) return false;
  }
  return true;
}

void TVSeries::Swap(TVSeries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TVSeries::InternalSwap(TVSeries* other) {
  using std::swap;
  startdate_.Swap(&other->startdate_);
  enddate_.Swap(&other->enddate_);
  swap(work_, other->work_);
  swap(actors_, other->actors_);
  swap(directors_, other->directors_);
  swap(persons_, other->persons_);
  swap(screenwriters_, other->screenwriters_);
  swap(imagesurls_, other->imagesurls_);
  swap(stillsurls_, other->stillsurls_);
  swap(trailerurls_, other->trailerurls_);
  swap(officialurls_, other->officialurls_);
  swap(numberofepisodes_, other->numberofepisodes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TVSeries::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TVSeries

// optional .ru.mail.go.webbase.blobs.CreativeWork work = 1;
bool TVSeries::has_work() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TVSeries::set_has_work() {
  _has_bits_[0] |= 0x00000004u;
}
void TVSeries::clear_has_work() {
  _has_bits_[0] &= ~0x00000004u;
}
void TVSeries::clear_work() {
  if (work_ != NULL) work_->::ru::mail::go::webbase::blobs::CreativeWork::Clear();
  clear_has_work();
}
const ::ru::mail::go::webbase::blobs::CreativeWork& TVSeries::work() const {
  const ::ru::mail::go::webbase::blobs::CreativeWork* p = work_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeries.work)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::CreativeWork*>(
      &::ru::mail::go::webbase::blobs::_CreativeWork_default_instance_);
}
::ru::mail::go::webbase::blobs::CreativeWork* TVSeries::mutable_work() {
  set_has_work();
  if (work_ == NULL) {
    work_ = new ::ru::mail::go::webbase::blobs::CreativeWork;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVSeries.work)
  return work_;
}
::ru::mail::go::webbase::blobs::CreativeWork* TVSeries::release_work() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVSeries.work)
  clear_has_work();
  ::ru::mail::go::webbase::blobs::CreativeWork* temp = work_;
  work_ = NULL;
  return temp;
}
void TVSeries::set_allocated_work(::ru::mail::go::webbase::blobs::CreativeWork* work) {
  delete work_;
  work_ = work;
  if (work) {
    set_has_work();
  } else {
    clear_has_work();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVSeries.work)
}

// optional string startDate = 2;
bool TVSeries::has_startdate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TVSeries::set_has_startdate() {
  _has_bits_[0] |= 0x00000001u;
}
void TVSeries::clear_has_startdate() {
  _has_bits_[0] &= ~0x00000001u;
}
void TVSeries::clear_startdate() {
  startdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_startdate();
}
const ::std::string& TVSeries::startdate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeries.startDate)
  return startdate_.GetNoArena();
}
void TVSeries::set_startdate(const ::std::string& value) {
  set_has_startdate();
  startdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TVSeries.startDate)
}
#if LANG_CXX11
void TVSeries::set_startdate(::std::string&& value) {
  set_has_startdate();
  startdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TVSeries.startDate)
}
#endif
void TVSeries::set_startdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_startdate();
  startdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TVSeries.startDate)
}
void TVSeries::set_startdate(const char* value, size_t size) {
  set_has_startdate();
  startdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TVSeries.startDate)
}
::std::string* TVSeries::mutable_startdate() {
  set_has_startdate();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVSeries.startDate)
  return startdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TVSeries::release_startdate() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVSeries.startDate)
  clear_has_startdate();
  return startdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TVSeries::set_allocated_startdate(::std::string* startdate) {
  if (startdate != NULL) {
    set_has_startdate();
  } else {
    clear_has_startdate();
  }
  startdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), startdate);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVSeries.startDate)
}

// optional string endDate = 3;
bool TVSeries::has_enddate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TVSeries::set_has_enddate() {
  _has_bits_[0] |= 0x00000002u;
}
void TVSeries::clear_has_enddate() {
  _has_bits_[0] &= ~0x00000002u;
}
void TVSeries::clear_enddate() {
  enddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enddate();
}
const ::std::string& TVSeries::enddate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeries.endDate)
  return enddate_.GetNoArena();
}
void TVSeries::set_enddate(const ::std::string& value) {
  set_has_enddate();
  enddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TVSeries.endDate)
}
#if LANG_CXX11
void TVSeries::set_enddate(::std::string&& value) {
  set_has_enddate();
  enddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TVSeries.endDate)
}
#endif
void TVSeries::set_enddate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enddate();
  enddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TVSeries.endDate)
}
void TVSeries::set_enddate(const char* value, size_t size) {
  set_has_enddate();
  enddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TVSeries.endDate)
}
::std::string* TVSeries::mutable_enddate() {
  set_has_enddate();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVSeries.endDate)
  return enddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TVSeries::release_enddate() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVSeries.endDate)
  clear_has_enddate();
  return enddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TVSeries::set_allocated_enddate(::std::string* enddate) {
  if (enddate != NULL) {
    set_has_enddate();
  } else {
    clear_has_enddate();
  }
  enddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enddate);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVSeries.endDate)
}

// optional uint32 numberOfEpisodes = 4;
bool TVSeries::has_numberofepisodes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TVSeries::set_has_numberofepisodes() {
  _has_bits_[0] |= 0x00000800u;
}
void TVSeries::clear_has_numberofepisodes() {
  _has_bits_[0] &= ~0x00000800u;
}
void TVSeries::clear_numberofepisodes() {
  numberofepisodes_ = 0u;
  clear_has_numberofepisodes();
}
::google::protobuf::uint32 TVSeries::numberofepisodes() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeries.numberOfEpisodes)
  return numberofepisodes_;
}
void TVSeries::set_numberofepisodes(::google::protobuf::uint32 value) {
  set_has_numberofepisodes();
  numberofepisodes_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TVSeries.numberOfEpisodes)
}

// optional .ru.mail.go.webbase.blobs.StringArray actors = 5;
bool TVSeries::has_actors() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TVSeries::set_has_actors() {
  _has_bits_[0] |= 0x00000008u;
}
void TVSeries::clear_has_actors() {
  _has_bits_[0] &= ~0x00000008u;
}
void TVSeries::clear_actors() {
  if (actors_ != NULL) actors_->::ru::mail::go::webbase::blobs::StringArray::Clear();
  clear_has_actors();
}
const ::ru::mail::go::webbase::blobs::StringArray& TVSeries::actors() const {
  const ::ru::mail::go::webbase::blobs::StringArray* p = actors_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeries.actors)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::StringArray*>(
      &::ru::mail::go::webbase::blobs::_StringArray_default_instance_);
}
::ru::mail::go::webbase::blobs::StringArray* TVSeries::mutable_actors() {
  set_has_actors();
  if (actors_ == NULL) {
    actors_ = new ::ru::mail::go::webbase::blobs::StringArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVSeries.actors)
  return actors_;
}
::ru::mail::go::webbase::blobs::StringArray* TVSeries::release_actors() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVSeries.actors)
  clear_has_actors();
  ::ru::mail::go::webbase::blobs::StringArray* temp = actors_;
  actors_ = NULL;
  return temp;
}
void TVSeries::set_allocated_actors(::ru::mail::go::webbase::blobs::StringArray* actors) {
  delete actors_;
  actors_ = actors;
  if (actors) {
    set_has_actors();
  } else {
    clear_has_actors();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVSeries.actors)
}

// optional .ru.mail.go.webbase.blobs.StringArray directors = 6;
bool TVSeries::has_directors() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TVSeries::set_has_directors() {
  _has_bits_[0] |= 0x00000010u;
}
void TVSeries::clear_has_directors() {
  _has_bits_[0] &= ~0x00000010u;
}
void TVSeries::clear_directors() {
  if (directors_ != NULL) directors_->::ru::mail::go::webbase::blobs::StringArray::Clear();
  clear_has_directors();
}
const ::ru::mail::go::webbase::blobs::StringArray& TVSeries::directors() const {
  const ::ru::mail::go::webbase::blobs::StringArray* p = directors_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeries.directors)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::StringArray*>(
      &::ru::mail::go::webbase::blobs::_StringArray_default_instance_);
}
::ru::mail::go::webbase::blobs::StringArray* TVSeries::mutable_directors() {
  set_has_directors();
  if (directors_ == NULL) {
    directors_ = new ::ru::mail::go::webbase::blobs::StringArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVSeries.directors)
  return directors_;
}
::ru::mail::go::webbase::blobs::StringArray* TVSeries::release_directors() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVSeries.directors)
  clear_has_directors();
  ::ru::mail::go::webbase::blobs::StringArray* temp = directors_;
  directors_ = NULL;
  return temp;
}
void TVSeries::set_allocated_directors(::ru::mail::go::webbase::blobs::StringArray* directors) {
  delete directors_;
  directors_ = directors;
  if (directors) {
    set_has_directors();
  } else {
    clear_has_directors();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVSeries.directors)
}

// optional .ru.mail.go.webbase.blobs.StringArray persons = 7;
bool TVSeries::has_persons() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TVSeries::set_has_persons() {
  _has_bits_[0] |= 0x00000020u;
}
void TVSeries::clear_has_persons() {
  _has_bits_[0] &= ~0x00000020u;
}
void TVSeries::clear_persons() {
  if (persons_ != NULL) persons_->::ru::mail::go::webbase::blobs::StringArray::Clear();
  clear_has_persons();
}
const ::ru::mail::go::webbase::blobs::StringArray& TVSeries::persons() const {
  const ::ru::mail::go::webbase::blobs::StringArray* p = persons_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeries.persons)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::StringArray*>(
      &::ru::mail::go::webbase::blobs::_StringArray_default_instance_);
}
::ru::mail::go::webbase::blobs::StringArray* TVSeries::mutable_persons() {
  set_has_persons();
  if (persons_ == NULL) {
    persons_ = new ::ru::mail::go::webbase::blobs::StringArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVSeries.persons)
  return persons_;
}
::ru::mail::go::webbase::blobs::StringArray* TVSeries::release_persons() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVSeries.persons)
  clear_has_persons();
  ::ru::mail::go::webbase::blobs::StringArray* temp = persons_;
  persons_ = NULL;
  return temp;
}
void TVSeries::set_allocated_persons(::ru::mail::go::webbase::blobs::StringArray* persons) {
  delete persons_;
  persons_ = persons;
  if (persons) {
    set_has_persons();
  } else {
    clear_has_persons();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVSeries.persons)
}

// optional .ru.mail.go.webbase.blobs.StringArray screenwriters = 8;
bool TVSeries::has_screenwriters() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TVSeries::set_has_screenwriters() {
  _has_bits_[0] |= 0x00000040u;
}
void TVSeries::clear_has_screenwriters() {
  _has_bits_[0] &= ~0x00000040u;
}
void TVSeries::clear_screenwriters() {
  if (screenwriters_ != NULL) screenwriters_->::ru::mail::go::webbase::blobs::StringArray::Clear();
  clear_has_screenwriters();
}
const ::ru::mail::go::webbase::blobs::StringArray& TVSeries::screenwriters() const {
  const ::ru::mail::go::webbase::blobs::StringArray* p = screenwriters_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeries.screenwriters)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::StringArray*>(
      &::ru::mail::go::webbase::blobs::_StringArray_default_instance_);
}
::ru::mail::go::webbase::blobs::StringArray* TVSeries::mutable_screenwriters() {
  set_has_screenwriters();
  if (screenwriters_ == NULL) {
    screenwriters_ = new ::ru::mail::go::webbase::blobs::StringArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVSeries.screenwriters)
  return screenwriters_;
}
::ru::mail::go::webbase::blobs::StringArray* TVSeries::release_screenwriters() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVSeries.screenwriters)
  clear_has_screenwriters();
  ::ru::mail::go::webbase::blobs::StringArray* temp = screenwriters_;
  screenwriters_ = NULL;
  return temp;
}
void TVSeries::set_allocated_screenwriters(::ru::mail::go::webbase::blobs::StringArray* screenwriters) {
  delete screenwriters_;
  screenwriters_ = screenwriters;
  if (screenwriters) {
    set_has_screenwriters();
  } else {
    clear_has_screenwriters();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVSeries.screenwriters)
}

// optional .ru.mail.go.webbase.blobs.UrlArray imagesUrls = 20;
bool TVSeries::has_imagesurls() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TVSeries::set_has_imagesurls() {
  _has_bits_[0] |= 0x00000080u;
}
void TVSeries::clear_has_imagesurls() {
  _has_bits_[0] &= ~0x00000080u;
}
void TVSeries::clear_imagesurls() {
  if (imagesurls_ != NULL) imagesurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
  clear_has_imagesurls();
}
const ::ru::mail::go::webbase::blobs::UrlArray& TVSeries::imagesurls() const {
  const ::ru::mail::go::webbase::blobs::UrlArray* p = imagesurls_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeries.imagesUrls)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlArray*>(
      &::ru::mail::go::webbase::blobs::_UrlArray_default_instance_);
}
::ru::mail::go::webbase::blobs::UrlArray* TVSeries::mutable_imagesurls() {
  set_has_imagesurls();
  if (imagesurls_ == NULL) {
    imagesurls_ = new ::ru::mail::go::webbase::blobs::UrlArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVSeries.imagesUrls)
  return imagesurls_;
}
::ru::mail::go::webbase::blobs::UrlArray* TVSeries::release_imagesurls() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVSeries.imagesUrls)
  clear_has_imagesurls();
  ::ru::mail::go::webbase::blobs::UrlArray* temp = imagesurls_;
  imagesurls_ = NULL;
  return temp;
}
void TVSeries::set_allocated_imagesurls(::ru::mail::go::webbase::blobs::UrlArray* imagesurls) {
  delete imagesurls_;
  imagesurls_ = imagesurls;
  if (imagesurls) {
    set_has_imagesurls();
  } else {
    clear_has_imagesurls();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVSeries.imagesUrls)
}

// optional .ru.mail.go.webbase.blobs.UrlArray stillsUrls = 21;
bool TVSeries::has_stillsurls() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TVSeries::set_has_stillsurls() {
  _has_bits_[0] |= 0x00000100u;
}
void TVSeries::clear_has_stillsurls() {
  _has_bits_[0] &= ~0x00000100u;
}
void TVSeries::clear_stillsurls() {
  if (stillsurls_ != NULL) stillsurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
  clear_has_stillsurls();
}
const ::ru::mail::go::webbase::blobs::UrlArray& TVSeries::stillsurls() const {
  const ::ru::mail::go::webbase::blobs::UrlArray* p = stillsurls_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeries.stillsUrls)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlArray*>(
      &::ru::mail::go::webbase::blobs::_UrlArray_default_instance_);
}
::ru::mail::go::webbase::blobs::UrlArray* TVSeries::mutable_stillsurls() {
  set_has_stillsurls();
  if (stillsurls_ == NULL) {
    stillsurls_ = new ::ru::mail::go::webbase::blobs::UrlArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVSeries.stillsUrls)
  return stillsurls_;
}
::ru::mail::go::webbase::blobs::UrlArray* TVSeries::release_stillsurls() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVSeries.stillsUrls)
  clear_has_stillsurls();
  ::ru::mail::go::webbase::blobs::UrlArray* temp = stillsurls_;
  stillsurls_ = NULL;
  return temp;
}
void TVSeries::set_allocated_stillsurls(::ru::mail::go::webbase::blobs::UrlArray* stillsurls) {
  delete stillsurls_;
  stillsurls_ = stillsurls;
  if (stillsurls) {
    set_has_stillsurls();
  } else {
    clear_has_stillsurls();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVSeries.stillsUrls)
}

// optional .ru.mail.go.webbase.blobs.UrlArray trailerUrls = 22;
bool TVSeries::has_trailerurls() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TVSeries::set_has_trailerurls() {
  _has_bits_[0] |= 0x00000200u;
}
void TVSeries::clear_has_trailerurls() {
  _has_bits_[0] &= ~0x00000200u;
}
void TVSeries::clear_trailerurls() {
  if (trailerurls_ != NULL) trailerurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
  clear_has_trailerurls();
}
const ::ru::mail::go::webbase::blobs::UrlArray& TVSeries::trailerurls() const {
  const ::ru::mail::go::webbase::blobs::UrlArray* p = trailerurls_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeries.trailerUrls)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlArray*>(
      &::ru::mail::go::webbase::blobs::_UrlArray_default_instance_);
}
::ru::mail::go::webbase::blobs::UrlArray* TVSeries::mutable_trailerurls() {
  set_has_trailerurls();
  if (trailerurls_ == NULL) {
    trailerurls_ = new ::ru::mail::go::webbase::blobs::UrlArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVSeries.trailerUrls)
  return trailerurls_;
}
::ru::mail::go::webbase::blobs::UrlArray* TVSeries::release_trailerurls() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVSeries.trailerUrls)
  clear_has_trailerurls();
  ::ru::mail::go::webbase::blobs::UrlArray* temp = trailerurls_;
  trailerurls_ = NULL;
  return temp;
}
void TVSeries::set_allocated_trailerurls(::ru::mail::go::webbase::blobs::UrlArray* trailerurls) {
  delete trailerurls_;
  trailerurls_ = trailerurls;
  if (trailerurls) {
    set_has_trailerurls();
  } else {
    clear_has_trailerurls();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVSeries.trailerUrls)
}

// optional .ru.mail.go.webbase.blobs.UrlArray officialUrls = 23;
bool TVSeries::has_officialurls() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TVSeries::set_has_officialurls() {
  _has_bits_[0] |= 0x00000400u;
}
void TVSeries::clear_has_officialurls() {
  _has_bits_[0] &= ~0x00000400u;
}
void TVSeries::clear_officialurls() {
  if (officialurls_ != NULL) officialurls_->::ru::mail::go::webbase::blobs::UrlArray::Clear();
  clear_has_officialurls();
}
const ::ru::mail::go::webbase::blobs::UrlArray& TVSeries::officialurls() const {
  const ::ru::mail::go::webbase::blobs::UrlArray* p = officialurls_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TVSeries.officialUrls)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlArray*>(
      &::ru::mail::go::webbase::blobs::_UrlArray_default_instance_);
}
::ru::mail::go::webbase::blobs::UrlArray* TVSeries::mutable_officialurls() {
  set_has_officialurls();
  if (officialurls_ == NULL) {
    officialurls_ = new ::ru::mail::go::webbase::blobs::UrlArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TVSeries.officialUrls)
  return officialurls_;
}
::ru::mail::go::webbase::blobs::UrlArray* TVSeries::release_officialurls() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TVSeries.officialUrls)
  clear_has_officialurls();
  ::ru::mail::go::webbase::blobs::UrlArray* temp = officialurls_;
  officialurls_ = NULL;
  return temp;
}
void TVSeries::set_allocated_officialurls(::ru::mail::go::webbase::blobs::UrlArray* officialurls) {
  delete officialurls_;
  officialurls_ = officialurls;
  if (officialurls) {
    set_has_officialurls();
  } else {
    clear_has_officialurls();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TVSeries.officialUrls)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParsedSubject::kTypeFieldNumber;
const int ParsedSubject::kThingFieldNumber;
const int ParsedSubject::kPersonFieldNumber;
const int ParsedSubject::kMovieFieldNumber;
const int ParsedSubject::kTvepisodeFieldNumber;
const int ParsedSubject::kTvseasonFieldNumber;
const int ParsedSubject::kTelecastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParsedSubject::ParsedSubject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_subj_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ParsedSubject)
}
ParsedSubject::ParsedSubject(const ParsedSubject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_thing()) {
    thing_ = new ::ru::mail::go::webbase::blobs::Thing(*from.thing_);
  } else {
    thing_ = NULL;
  }
  if (from.has_person()) {
    person_ = new ::ru::mail::go::webbase::blobs::Person(*from.person_);
  } else {
    person_ = NULL;
  }
  if (from.has_movie()) {
    movie_ = new ::ru::mail::go::webbase::blobs::Movie(*from.movie_);
  } else {
    movie_ = NULL;
  }
  if (from.has_tvepisode()) {
    tvepisode_ = new ::ru::mail::go::webbase::blobs::TVEpisode(*from.tvepisode_);
  } else {
    tvepisode_ = NULL;
  }
  if (from.has_tvseason()) {
    tvseason_ = new ::ru::mail::go::webbase::blobs::TVSeason(*from.tvseason_);
  } else {
    tvseason_ = NULL;
  }
  if (from.has_telecast()) {
    telecast_ = new ::ru::mail::go::webbase::blobs::TVSeries(*from.telecast_);
  } else {
    telecast_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ParsedSubject)
}

void ParsedSubject::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&thing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&telecast_) -
      reinterpret_cast<char*>(&thing_)) + sizeof(telecast_));
  type_ = 2;
}

ParsedSubject::~ParsedSubject() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ParsedSubject)
  SharedDtor();
}

void ParsedSubject::SharedDtor() {
  if (this != internal_default_instance()) delete thing_;
  if (this != internal_default_instance()) delete person_;
  if (this != internal_default_instance()) delete movie_;
  if (this != internal_default_instance()) delete tvepisode_;
  if (this != internal_default_instance()) delete tvseason_;
  if (this != internal_default_instance()) delete telecast_;
}

void ParsedSubject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParsedSubject::descriptor() {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParsedSubject& ParsedSubject::default_instance() {
  protobuf_subj_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParsedSubject* ParsedSubject::New(::google::protobuf::Arena* arena) const {
  ParsedSubject* n = new ParsedSubject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParsedSubject::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ParsedSubject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(thing_ != NULL);
      thing_->::ru::mail::go::webbase::blobs::Thing::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(person_ != NULL);
      person_->::ru::mail::go::webbase::blobs::Person::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(movie_ != NULL);
      movie_->::ru::mail::go::webbase::blobs::Movie::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tvepisode_ != NULL);
      tvepisode_->::ru::mail::go::webbase::blobs::TVEpisode::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tvseason_ != NULL);
      tvseason_->::ru::mail::go::webbase::blobs::TVSeason::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(telecast_ != NULL);
      telecast_->::ru::mail::go::webbase::blobs::TVSeries::Clear();
    }
    type_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParsedSubject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ParsedSubject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.ParsedSubject.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ParsedSubject_Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::blobs::ParsedSubject_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Thing thing = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Person person = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_person()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Movie movie = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movie()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.TVEpisode tvepisode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tvepisode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.TVSeason tvseason = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tvseason()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.TVSeries telecast = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_telecast()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ParsedSubject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ParsedSubject)
  return false;
#undef DO_
}

void ParsedSubject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ParsedSubject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ParsedSubject.Type type = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Thing thing = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->thing_, output);
  }

  // optional .ru.mail.go.webbase.blobs.Person person = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->person_, output);
  }

  // optional .ru.mail.go.webbase.blobs.Movie movie = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->movie_, output);
  }

  // optional .ru.mail.go.webbase.blobs.TVEpisode tvepisode = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->tvepisode_, output);
  }

  // optional .ru.mail.go.webbase.blobs.TVSeason tvseason = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->tvseason_, output);
  }

  // optional .ru.mail.go.webbase.blobs.TVSeries telecast = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->telecast_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ParsedSubject)
}

::google::protobuf::uint8* ParsedSubject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ParsedSubject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ParsedSubject.Type type = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Thing thing = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->thing_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.Person person = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->person_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.Movie movie = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->movie_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.TVEpisode tvepisode = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->tvepisode_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.TVSeason tvseason = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->tvseason_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.TVSeries telecast = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->telecast_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ParsedSubject)
  return target;
}

size_t ParsedSubject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ParsedSubject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.ParsedSubject.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .ru.mail.go.webbase.blobs.Thing thing = 2;
    if (has_thing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->thing_);
    }

    // optional .ru.mail.go.webbase.blobs.Person person = 3;
    if (has_person()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->person_);
    }

    // optional .ru.mail.go.webbase.blobs.Movie movie = 4;
    if (has_movie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->movie_);
    }

    // optional .ru.mail.go.webbase.blobs.TVEpisode tvepisode = 5;
    if (has_tvepisode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tvepisode_);
    }

    // optional .ru.mail.go.webbase.blobs.TVSeason tvseason = 6;
    if (has_tvseason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tvseason_);
    }

    // optional .ru.mail.go.webbase.blobs.TVSeries telecast = 7;
    if (has_telecast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->telecast_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParsedSubject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ParsedSubject)
  GOOGLE_DCHECK_NE(&from, this);
  const ParsedSubject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParsedSubject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ParsedSubject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ParsedSubject)
    MergeFrom(*source);
  }
}

void ParsedSubject::MergeFrom(const ParsedSubject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ParsedSubject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_thing()->::ru::mail::go::webbase::blobs::Thing::MergeFrom(from.thing());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_person()->::ru::mail::go::webbase::blobs::Person::MergeFrom(from.person());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_movie()->::ru::mail::go::webbase::blobs::Movie::MergeFrom(from.movie());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_tvepisode()->::ru::mail::go::webbase::blobs::TVEpisode::MergeFrom(from.tvepisode());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_tvseason()->::ru::mail::go::webbase::blobs::TVSeason::MergeFrom(from.tvseason());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_telecast()->::ru::mail::go::webbase::blobs::TVSeries::MergeFrom(from.telecast());
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParsedSubject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ParsedSubject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsedSubject::CopyFrom(const ParsedSubject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ParsedSubject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParsedSubject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;
  if (has_person()) {
    if (!this->person_->IsInitialized()) return false;
  }
  if (has_movie()) {
    if (!this->movie_->IsInitialized()) return false;
  }
  if (has_tvepisode()) {
    if (!this->tvepisode_->IsInitialized()) return false;
  }
  if (has_tvseason()) {
    if (!this->tvseason_->IsInitialized()) return false;
  }
  if (has_telecast()) {
    if (!this->telecast_->IsInitialized()) return false;
  }
  return true;
}

void ParsedSubject::Swap(ParsedSubject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParsedSubject::InternalSwap(ParsedSubject* other) {
  using std::swap;
  swap(thing_, other->thing_);
  swap(person_, other->person_);
  swap(movie_, other->movie_);
  swap(tvepisode_, other->tvepisode_);
  swap(tvseason_, other->tvseason_);
  swap(telecast_, other->telecast_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParsedSubject::GetMetadata() const {
  protobuf_subj_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subj_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParsedSubject

// required .ru.mail.go.webbase.blobs.ParsedSubject.Type type = 1;
bool ParsedSubject::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ParsedSubject::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
void ParsedSubject::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void ParsedSubject::clear_type() {
  type_ = 2;
  clear_has_type();
}
::ru::mail::go::webbase::blobs::ParsedSubject_Type ParsedSubject::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedSubject.type)
  return static_cast< ::ru::mail::go::webbase::blobs::ParsedSubject_Type >(type_);
}
void ParsedSubject::set_type(::ru::mail::go::webbase::blobs::ParsedSubject_Type value) {
  assert(::ru::mail::go::webbase::blobs::ParsedSubject_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedSubject.type)
}

// optional .ru.mail.go.webbase.blobs.Thing thing = 2;
bool ParsedSubject::has_thing() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParsedSubject::set_has_thing() {
  _has_bits_[0] |= 0x00000001u;
}
void ParsedSubject::clear_has_thing() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParsedSubject::clear_thing() {
  if (thing_ != NULL) thing_->::ru::mail::go::webbase::blobs::Thing::Clear();
  clear_has_thing();
}
const ::ru::mail::go::webbase::blobs::Thing& ParsedSubject::thing() const {
  const ::ru::mail::go::webbase::blobs::Thing* p = thing_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedSubject.thing)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::Thing*>(
      &::ru::mail::go::webbase::blobs::_Thing_default_instance_);
}
::ru::mail::go::webbase::blobs::Thing* ParsedSubject::mutable_thing() {
  set_has_thing();
  if (thing_ == NULL) {
    thing_ = new ::ru::mail::go::webbase::blobs::Thing;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedSubject.thing)
  return thing_;
}
::ru::mail::go::webbase::blobs::Thing* ParsedSubject::release_thing() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedSubject.thing)
  clear_has_thing();
  ::ru::mail::go::webbase::blobs::Thing* temp = thing_;
  thing_ = NULL;
  return temp;
}
void ParsedSubject::set_allocated_thing(::ru::mail::go::webbase::blobs::Thing* thing) {
  delete thing_;
  thing_ = thing;
  if (thing) {
    set_has_thing();
  } else {
    clear_has_thing();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedSubject.thing)
}

// optional .ru.mail.go.webbase.blobs.Person person = 3;
bool ParsedSubject::has_person() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParsedSubject::set_has_person() {
  _has_bits_[0] |= 0x00000002u;
}
void ParsedSubject::clear_has_person() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParsedSubject::clear_person() {
  if (person_ != NULL) person_->::ru::mail::go::webbase::blobs::Person::Clear();
  clear_has_person();
}
const ::ru::mail::go::webbase::blobs::Person& ParsedSubject::person() const {
  const ::ru::mail::go::webbase::blobs::Person* p = person_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedSubject.person)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::Person*>(
      &::ru::mail::go::webbase::blobs::_Person_default_instance_);
}
::ru::mail::go::webbase::blobs::Person* ParsedSubject::mutable_person() {
  set_has_person();
  if (person_ == NULL) {
    person_ = new ::ru::mail::go::webbase::blobs::Person;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedSubject.person)
  return person_;
}
::ru::mail::go::webbase::blobs::Person* ParsedSubject::release_person() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedSubject.person)
  clear_has_person();
  ::ru::mail::go::webbase::blobs::Person* temp = person_;
  person_ = NULL;
  return temp;
}
void ParsedSubject::set_allocated_person(::ru::mail::go::webbase::blobs::Person* person) {
  delete person_;
  person_ = person;
  if (person) {
    set_has_person();
  } else {
    clear_has_person();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedSubject.person)
}

// optional .ru.mail.go.webbase.blobs.Movie movie = 4;
bool ParsedSubject::has_movie() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ParsedSubject::set_has_movie() {
  _has_bits_[0] |= 0x00000004u;
}
void ParsedSubject::clear_has_movie() {
  _has_bits_[0] &= ~0x00000004u;
}
void ParsedSubject::clear_movie() {
  if (movie_ != NULL) movie_->::ru::mail::go::webbase::blobs::Movie::Clear();
  clear_has_movie();
}
const ::ru::mail::go::webbase::blobs::Movie& ParsedSubject::movie() const {
  const ::ru::mail::go::webbase::blobs::Movie* p = movie_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedSubject.movie)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::Movie*>(
      &::ru::mail::go::webbase::blobs::_Movie_default_instance_);
}
::ru::mail::go::webbase::blobs::Movie* ParsedSubject::mutable_movie() {
  set_has_movie();
  if (movie_ == NULL) {
    movie_ = new ::ru::mail::go::webbase::blobs::Movie;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedSubject.movie)
  return movie_;
}
::ru::mail::go::webbase::blobs::Movie* ParsedSubject::release_movie() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedSubject.movie)
  clear_has_movie();
  ::ru::mail::go::webbase::blobs::Movie* temp = movie_;
  movie_ = NULL;
  return temp;
}
void ParsedSubject::set_allocated_movie(::ru::mail::go::webbase::blobs::Movie* movie) {
  delete movie_;
  movie_ = movie;
  if (movie) {
    set_has_movie();
  } else {
    clear_has_movie();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedSubject.movie)
}

// optional .ru.mail.go.webbase.blobs.TVEpisode tvepisode = 5;
bool ParsedSubject::has_tvepisode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ParsedSubject::set_has_tvepisode() {
  _has_bits_[0] |= 0x00000008u;
}
void ParsedSubject::clear_has_tvepisode() {
  _has_bits_[0] &= ~0x00000008u;
}
void ParsedSubject::clear_tvepisode() {
  if (tvepisode_ != NULL) tvepisode_->::ru::mail::go::webbase::blobs::TVEpisode::Clear();
  clear_has_tvepisode();
}
const ::ru::mail::go::webbase::blobs::TVEpisode& ParsedSubject::tvepisode() const {
  const ::ru::mail::go::webbase::blobs::TVEpisode* p = tvepisode_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedSubject.tvepisode)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::TVEpisode*>(
      &::ru::mail::go::webbase::blobs::_TVEpisode_default_instance_);
}
::ru::mail::go::webbase::blobs::TVEpisode* ParsedSubject::mutable_tvepisode() {
  set_has_tvepisode();
  if (tvepisode_ == NULL) {
    tvepisode_ = new ::ru::mail::go::webbase::blobs::TVEpisode;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedSubject.tvepisode)
  return tvepisode_;
}
::ru::mail::go::webbase::blobs::TVEpisode* ParsedSubject::release_tvepisode() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedSubject.tvepisode)
  clear_has_tvepisode();
  ::ru::mail::go::webbase::blobs::TVEpisode* temp = tvepisode_;
  tvepisode_ = NULL;
  return temp;
}
void ParsedSubject::set_allocated_tvepisode(::ru::mail::go::webbase::blobs::TVEpisode* tvepisode) {
  delete tvepisode_;
  tvepisode_ = tvepisode;
  if (tvepisode) {
    set_has_tvepisode();
  } else {
    clear_has_tvepisode();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedSubject.tvepisode)
}

// optional .ru.mail.go.webbase.blobs.TVSeason tvseason = 6;
bool ParsedSubject::has_tvseason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ParsedSubject::set_has_tvseason() {
  _has_bits_[0] |= 0x00000010u;
}
void ParsedSubject::clear_has_tvseason() {
  _has_bits_[0] &= ~0x00000010u;
}
void ParsedSubject::clear_tvseason() {
  if (tvseason_ != NULL) tvseason_->::ru::mail::go::webbase::blobs::TVSeason::Clear();
  clear_has_tvseason();
}
const ::ru::mail::go::webbase::blobs::TVSeason& ParsedSubject::tvseason() const {
  const ::ru::mail::go::webbase::blobs::TVSeason* p = tvseason_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedSubject.tvseason)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::TVSeason*>(
      &::ru::mail::go::webbase::blobs::_TVSeason_default_instance_);
}
::ru::mail::go::webbase::blobs::TVSeason* ParsedSubject::mutable_tvseason() {
  set_has_tvseason();
  if (tvseason_ == NULL) {
    tvseason_ = new ::ru::mail::go::webbase::blobs::TVSeason;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedSubject.tvseason)
  return tvseason_;
}
::ru::mail::go::webbase::blobs::TVSeason* ParsedSubject::release_tvseason() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedSubject.tvseason)
  clear_has_tvseason();
  ::ru::mail::go::webbase::blobs::TVSeason* temp = tvseason_;
  tvseason_ = NULL;
  return temp;
}
void ParsedSubject::set_allocated_tvseason(::ru::mail::go::webbase::blobs::TVSeason* tvseason) {
  delete tvseason_;
  tvseason_ = tvseason;
  if (tvseason) {
    set_has_tvseason();
  } else {
    clear_has_tvseason();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedSubject.tvseason)
}

// optional .ru.mail.go.webbase.blobs.TVSeries telecast = 7;
bool ParsedSubject::has_telecast() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ParsedSubject::set_has_telecast() {
  _has_bits_[0] |= 0x00000020u;
}
void ParsedSubject::clear_has_telecast() {
  _has_bits_[0] &= ~0x00000020u;
}
void ParsedSubject::clear_telecast() {
  if (telecast_ != NULL) telecast_->::ru::mail::go::webbase::blobs::TVSeries::Clear();
  clear_has_telecast();
}
const ::ru::mail::go::webbase::blobs::TVSeries& ParsedSubject::telecast() const {
  const ::ru::mail::go::webbase::blobs::TVSeries* p = telecast_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedSubject.telecast)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::TVSeries*>(
      &::ru::mail::go::webbase::blobs::_TVSeries_default_instance_);
}
::ru::mail::go::webbase::blobs::TVSeries* ParsedSubject::mutable_telecast() {
  set_has_telecast();
  if (telecast_ == NULL) {
    telecast_ = new ::ru::mail::go::webbase::blobs::TVSeries;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedSubject.telecast)
  return telecast_;
}
::ru::mail::go::webbase::blobs::TVSeries* ParsedSubject::release_telecast() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedSubject.telecast)
  clear_has_telecast();
  ::ru::mail::go::webbase::blobs::TVSeries* temp = telecast_;
  telecast_ = NULL;
  return temp;
}
void ParsedSubject::set_allocated_telecast(::ru::mail::go::webbase::blobs::TVSeries* telecast) {
  delete telecast_;
  telecast_ = telecast;
  if (telecast) {
    set_has_telecast();
  } else {
    clear_has_telecast();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedSubject.telecast)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
