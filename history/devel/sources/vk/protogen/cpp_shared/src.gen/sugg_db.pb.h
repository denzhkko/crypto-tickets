// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sugg_db.proto

#ifndef PROTOBUF_sugg_5fdb_2eproto__INCLUDED
#define PROTOBUF_sugg_5fdb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "suggests.pb.h"
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace sugg {
namespace indexer {
class SuggInfoRecord;
class SuggInfoRecordDefaultTypeInternal;
extern SuggInfoRecordDefaultTypeInternal _SuggInfoRecord_default_instance_;
}  // namespace indexer
}  // namespace sugg
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace sugg {
namespace indexer {

namespace protobuf_sugg_5fdb_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_sugg_5fdb_2eproto

// ===================================================================

class SuggInfoRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.SuggInfoRecord) */ {
 public:
  SuggInfoRecord();
  virtual ~SuggInfoRecord();

  SuggInfoRecord(const SuggInfoRecord& from);

  inline SuggInfoRecord& operator=(const SuggInfoRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuggInfoRecord(SuggInfoRecord&& from) noexcept
    : SuggInfoRecord() {
    *this = ::std::move(from);
  }

  inline SuggInfoRecord& operator=(SuggInfoRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuggInfoRecord& default_instance();

  static inline const SuggInfoRecord* internal_default_instance() {
    return reinterpret_cast<const SuggInfoRecord*>(
               &_SuggInfoRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SuggInfoRecord* other);
  friend void swap(SuggInfoRecord& a, SuggInfoRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuggInfoRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  SuggInfoRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuggInfoRecord& from);
  void MergeFrom(const SuggInfoRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuggInfoRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string query = 1;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional .ru.mail.go.sugg.indexer.SuggSiteResult site_res = 3;
  bool has_site_res() const;
  void clear_site_res();
  static const int kSiteResFieldNumber = 3;
  const ::ru::mail::go::sugg::indexer::SuggSiteResult& site_res() const;
  ::ru::mail::go::sugg::indexer::SuggSiteResult* mutable_site_res();
  ::ru::mail::go::sugg::indexer::SuggSiteResult* release_site_res();
  void set_allocated_site_res(::ru::mail::go::sugg::indexer::SuggSiteResult* site_res);

  // optional double porno_prob = 2;
  bool has_porno_prob() const;
  void clear_porno_prob();
  static const int kPornoProbFieldNumber = 2;
  double porno_prob() const;
  void set_porno_prob(double value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.SuggInfoRecord)
 private:
  void set_has_query();
  void clear_has_query();
  void set_has_porno_prob();
  void clear_has_porno_prob();
  void set_has_site_res();
  void clear_has_site_res();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::ru::mail::go::sugg::indexer::SuggSiteResult* site_res_;
  double porno_prob_;
  friend struct protobuf_sugg_5fdb_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SuggInfoRecord

// optional string query = 1;
inline bool SuggInfoRecord::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggInfoRecord::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuggInfoRecord::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuggInfoRecord::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& SuggInfoRecord::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggInfoRecord.query)
  return query_.GetNoArena();
}
inline void SuggInfoRecord::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggInfoRecord.query)
}
#if LANG_CXX11
inline void SuggInfoRecord::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggInfoRecord.query)
}
#endif
inline void SuggInfoRecord::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggInfoRecord.query)
}
inline void SuggInfoRecord::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggInfoRecord.query)
}
inline ::std::string* SuggInfoRecord::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggInfoRecord.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggInfoRecord::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggInfoRecord.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggInfoRecord::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggInfoRecord.query)
}

// optional double porno_prob = 2;
inline bool SuggInfoRecord::has_porno_prob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuggInfoRecord::set_has_porno_prob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuggInfoRecord::clear_has_porno_prob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuggInfoRecord::clear_porno_prob() {
  porno_prob_ = 0;
  clear_has_porno_prob();
}
inline double SuggInfoRecord::porno_prob() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggInfoRecord.porno_prob)
  return porno_prob_;
}
inline void SuggInfoRecord::set_porno_prob(double value) {
  set_has_porno_prob();
  porno_prob_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggInfoRecord.porno_prob)
}

// optional .ru.mail.go.sugg.indexer.SuggSiteResult site_res = 3;
inline bool SuggInfoRecord::has_site_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuggInfoRecord::set_has_site_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuggInfoRecord::clear_has_site_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuggInfoRecord::clear_site_res() {
  if (site_res_ != NULL) site_res_->::ru::mail::go::sugg::indexer::SuggSiteResult::Clear();
  clear_has_site_res();
}
inline const ::ru::mail::go::sugg::indexer::SuggSiteResult& SuggInfoRecord::site_res() const {
  const ::ru::mail::go::sugg::indexer::SuggSiteResult* p = site_res_;
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggInfoRecord.site_res)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::sugg::indexer::SuggSiteResult*>(
      &::ru::mail::go::sugg::indexer::_SuggSiteResult_default_instance_);
}
inline ::ru::mail::go::sugg::indexer::SuggSiteResult* SuggInfoRecord::mutable_site_res() {
  set_has_site_res();
  if (site_res_ == NULL) {
    site_res_ = new ::ru::mail::go::sugg::indexer::SuggSiteResult;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggInfoRecord.site_res)
  return site_res_;
}
inline ::ru::mail::go::sugg::indexer::SuggSiteResult* SuggInfoRecord::release_site_res() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggInfoRecord.site_res)
  clear_has_site_res();
  ::ru::mail::go::sugg::indexer::SuggSiteResult* temp = site_res_;
  site_res_ = NULL;
  return temp;
}
inline void SuggInfoRecord::set_allocated_site_res(::ru::mail::go::sugg::indexer::SuggSiteResult* site_res) {
  delete site_res_;
  site_res_ = site_res;
  if (site_res) {
    set_has_site_res();
  } else {
    clear_has_site_res();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggInfoRecord.site_res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace indexer
}  // namespace sugg
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sugg_5fdb_2eproto__INCLUDED
