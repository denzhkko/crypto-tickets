// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: suggests.proto

#ifndef PROTOBUF_suggests_2eproto__INCLUDED
#define PROTOBUF_suggests_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sputnik_logs.pb.h"
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace sugg {
namespace indexer {
class Clicks;
class ClicksDefaultTypeInternal;
extern ClicksDefaultTypeInternal _Clicks_default_instance_;
class Clicks_Click;
class Clicks_ClickDefaultTypeInternal;
extern Clicks_ClickDefaultTypeInternal _Clicks_Click_default_instance_;
class FeatureEntry;
class FeatureEntryDefaultTypeInternal;
extern FeatureEntryDefaultTypeInternal _FeatureEntry_default_instance_;
class Query;
class QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class RichObjStat;
class RichObjStatDefaultTypeInternal;
extern RichObjStatDefaultTypeInternal _RichObjStat_default_instance_;
class SpcFix;
class SpcFixDefaultTypeInternal;
extern SpcFixDefaultTypeInternal _SpcFix_default_instance_;
class SuggInlineAutocompResult;
class SuggInlineAutocompResultDefaultTypeInternal;
extern SuggInlineAutocompResultDefaultTypeInternal _SuggInlineAutocompResult_default_instance_;
class SuggJobData;
class SuggJobDataDefaultTypeInternal;
extern SuggJobDataDefaultTypeInternal _SuggJobData_default_instance_;
class SuggMobileAutocompResult;
class SuggMobileAutocompResultDefaultTypeInternal;
extern SuggMobileAutocompResultDefaultTypeInternal _SuggMobileAutocompResult_default_instance_;
class SuggQueryResult;
class SuggQueryResultDefaultTypeInternal;
extern SuggQueryResultDefaultTypeInternal _SuggQueryResult_default_instance_;
class SuggQueryResult_AmigoMusicResult;
class SuggQueryResult_AmigoMusicResultDefaultTypeInternal;
extern SuggQueryResult_AmigoMusicResultDefaultTypeInternal _SuggQueryResult_AmigoMusicResult_default_instance_;
class SuggQueryResult_MatchedPair;
class SuggQueryResult_MatchedPairDefaultTypeInternal;
extern SuggQueryResult_MatchedPairDefaultTypeInternal _SuggQueryResult_MatchedPair_default_instance_;
class SuggResultStat;
class SuggResultStatDefaultTypeInternal;
extern SuggResultStatDefaultTypeInternal _SuggResultStat_default_instance_;
class SuggResults;
class SuggResultsDefaultTypeInternal;
extern SuggResultsDefaultTypeInternal _SuggResults_default_instance_;
class SuggSiteResult;
class SuggSiteResultDefaultTypeInternal;
extern SuggSiteResultDefaultTypeInternal _SuggSiteResult_default_instance_;
class SuggTotalFreq;
class SuggTotalFreqDefaultTypeInternal;
extern SuggTotalFreqDefaultTypeInternal _SuggTotalFreq_default_instance_;
class SuggWnfEntry;
class SuggWnfEntryDefaultTypeInternal;
extern SuggWnfEntryDefaultTypeInternal _SuggWnfEntry_default_instance_;
class SuggWnfResult;
class SuggWnfResultDefaultTypeInternal;
extern SuggWnfResultDefaultTypeInternal _SuggWnfResult_default_instance_;
}  // namespace indexer
}  // namespace sugg
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace sugg {
namespace indexer {

namespace protobuf_suggests_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_suggests_2eproto

enum Query_QType {
  Query_QType_VARIANT = 0,
  Query_QType_MISSPELL = 1
};
bool Query_QType_IsValid(int value);
const Query_QType Query_QType_QType_MIN = Query_QType_VARIANT;
const Query_QType Query_QType_QType_MAX = Query_QType_MISSPELL;
const int Query_QType_QType_ARRAYSIZE = Query_QType_QType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Query_QType_descriptor();
inline const ::std::string& Query_QType_Name(Query_QType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Query_QType_descriptor(), value);
}
inline bool Query_QType_Parse(
    const ::std::string& name, Query_QType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Query_QType>(
    Query_QType_descriptor(), name, value);
}
enum SuggQueryResult_MisspellType {
  SuggQueryResult_MisspellType_NONE = 0,
  SuggQueryResult_MisspellType_GRAMMATIC = 1,
  SuggQueryResult_MisspellType_INVERTED = 2,
  SuggQueryResult_MisspellType_PUNTO = 3
};
bool SuggQueryResult_MisspellType_IsValid(int value);
const SuggQueryResult_MisspellType SuggQueryResult_MisspellType_MisspellType_MIN = SuggQueryResult_MisspellType_NONE;
const SuggQueryResult_MisspellType SuggQueryResult_MisspellType_MisspellType_MAX = SuggQueryResult_MisspellType_PUNTO;
const int SuggQueryResult_MisspellType_MisspellType_ARRAYSIZE = SuggQueryResult_MisspellType_MisspellType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SuggQueryResult_MisspellType_descriptor();
inline const ::std::string& SuggQueryResult_MisspellType_Name(SuggQueryResult_MisspellType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SuggQueryResult_MisspellType_descriptor(), value);
}
inline bool SuggQueryResult_MisspellType_Parse(
    const ::std::string& name, SuggQueryResult_MisspellType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SuggQueryResult_MisspellType>(
    SuggQueryResult_MisspellType_descriptor(), name, value);
}
// ===================================================================

class Clicks_Click : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.Clicks.Click) */ {
 public:
  Clicks_Click();
  virtual ~Clicks_Click();

  Clicks_Click(const Clicks_Click& from);

  inline Clicks_Click& operator=(const Clicks_Click& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Clicks_Click(Clicks_Click&& from) noexcept
    : Clicks_Click() {
    *this = ::std::move(from);
  }

  inline Clicks_Click& operator=(Clicks_Click&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Clicks_Click& default_instance();

  static inline const Clicks_Click* internal_default_instance() {
    return reinterpret_cast<const Clicks_Click*>(
               &_Clicks_Click_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Clicks_Click* other);
  friend void swap(Clicks_Click& a, Clicks_Click& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Clicks_Click* New() const PROTOBUF_FINAL { return New(NULL); }

  Clicks_Click* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Clicks_Click& from);
  void MergeFrom(const Clicks_Click& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Clicks_Click* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional int32 pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  ::google::protobuf::int32 pos() const;
  void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.Clicks.Click)
 private:
  void set_has_pos();
  void clear_has_pos();
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::int32 pos_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Clicks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.Clicks) */ {
 public:
  Clicks();
  virtual ~Clicks();

  Clicks(const Clicks& from);

  inline Clicks& operator=(const Clicks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Clicks(Clicks&& from) noexcept
    : Clicks() {
    *this = ::std::move(from);
  }

  inline Clicks& operator=(Clicks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Clicks& default_instance();

  static inline const Clicks* internal_default_instance() {
    return reinterpret_cast<const Clicks*>(
               &_Clicks_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Clicks* other);
  friend void swap(Clicks& a, Clicks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Clicks* New() const PROTOBUF_FINAL { return New(NULL); }

  Clicks* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Clicks& from);
  void MergeFrom(const Clicks& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Clicks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Clicks_Click Click;

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.sugg.indexer.Clicks.Click click = 1;
  int click_size() const;
  void clear_click();
  static const int kClickFieldNumber = 1;
  const ::ru::mail::go::sugg::indexer::Clicks_Click& click(int index) const;
  ::ru::mail::go::sugg::indexer::Clicks_Click* mutable_click(int index);
  ::ru::mail::go::sugg::indexer::Clicks_Click* add_click();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::Clicks_Click >*
      mutable_click();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::Clicks_Click >&
      click() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.Clicks)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::Clicks_Click > click_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Query : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.Query) */ {
 public:
  Query();
  virtual ~Query();

  Query(const Query& from);

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Query& default_instance();

  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Query* other);
  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const PROTOBUF_FINAL { return New(NULL); }

  Query* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Query_QType QType;
  static const QType VARIANT =
    Query_QType_VARIANT;
  static const QType MISSPELL =
    Query_QType_MISSPELL;
  static inline bool QType_IsValid(int value) {
    return Query_QType_IsValid(value);
  }
  static const QType QType_MIN =
    Query_QType_QType_MIN;
  static const QType QType_MAX =
    Query_QType_QType_MAX;
  static const int QType_ARRAYSIZE =
    Query_QType_QType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QType_descriptor() {
    return Query_QType_descriptor();
  }
  static inline const ::std::string& QType_Name(QType value) {
    return Query_QType_Name(value);
  }
  static inline bool QType_Parse(const ::std::string& name,
      QType* value) {
    return Query_QType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string query = 1;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // required uint32 uniqs = 2;
  bool has_uniqs() const;
  void clear_uniqs();
  static const int kUniqsFieldNumber = 2;
  ::google::protobuf::uint32 uniqs() const;
  void set_uniqs(::google::protobuf::uint32 value);

  // required .ru.mail.go.sugg.indexer.Query.QType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::ru::mail::go::sugg::indexer::Query_QType type() const;
  void set_type(::ru::mail::go::sugg::indexer::Query_QType value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.Query)
 private:
  void set_has_query();
  void clear_has_query();
  void set_has_uniqs();
  void clear_has_uniqs();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::uint32 uniqs_;
  int type_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpcFix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.SpcFix) */ {
 public:
  SpcFix();
  virtual ~SpcFix();

  SpcFix(const SpcFix& from);

  inline SpcFix& operator=(const SpcFix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpcFix(SpcFix&& from) noexcept
    : SpcFix() {
    *this = ::std::move(from);
  }

  inline SpcFix& operator=(SpcFix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpcFix& default_instance();

  static inline const SpcFix* internal_default_instance() {
    return reinterpret_cast<const SpcFix*>(
               &_SpcFix_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SpcFix* other);
  friend void swap(SpcFix& a, SpcFix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpcFix* New() const PROTOBUF_FINAL { return New(NULL); }

  SpcFix* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpcFix& from);
  void MergeFrom(const SpcFix& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpcFix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required uint32 num = 2;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::uint32 num() const;
  void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.SpcFix)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_num();
  void clear_has_num();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::uint32 num_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RichObjStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.RichObjStat) */ {
 public:
  RichObjStat();
  virtual ~RichObjStat();

  RichObjStat(const RichObjStat& from);

  inline RichObjStat& operator=(const RichObjStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RichObjStat(RichObjStat&& from) noexcept
    : RichObjStat() {
    *this = ::std::move(from);
  }

  inline RichObjStat& operator=(RichObjStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RichObjStat& default_instance();

  static inline const RichObjStat* internal_default_instance() {
    return reinterpret_cast<const RichObjStat*>(
               &_RichObjStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RichObjStat* other);
  friend void swap(RichObjStat& a, RichObjStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RichObjStat* New() const PROTOBUF_FINAL { return New(NULL); }

  RichObjStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RichObjStat& from);
  void MergeFrom(const RichObjStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RichObjStat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required uint32 num = 2;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::uint32 num() const;
  void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.RichObjStat)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_num();
  void clear_has_num();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::uint32 num_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuggJobData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.SuggJobData) */ {
 public:
  SuggJobData();
  virtual ~SuggJobData();

  SuggJobData(const SuggJobData& from);

  inline SuggJobData& operator=(const SuggJobData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuggJobData(SuggJobData&& from) noexcept
    : SuggJobData() {
    *this = ::std::move(from);
  }

  inline SuggJobData& operator=(SuggJobData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuggJobData& default_instance();

  static inline const SuggJobData* internal_default_instance() {
    return reinterpret_cast<const SuggJobData*>(
               &_SuggJobData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SuggJobData* other);
  friend void swap(SuggJobData& a, SuggJobData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuggJobData* New() const PROTOBUF_FINAL { return New(NULL); }

  SuggJobData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuggJobData& from);
  void MergeFrom(const SuggJobData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuggJobData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.sugg.indexer.Query queries = 9;
  int queries_size() const;
  void clear_queries();
  static const int kQueriesFieldNumber = 9;
  const ::ru::mail::go::sugg::indexer::Query& queries(int index) const;
  ::ru::mail::go::sugg::indexer::Query* mutable_queries(int index);
  ::ru::mail::go::sugg::indexer::Query* add_queries();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::Query >*
      mutable_queries();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::Query >&
      queries() const;

  // repeated string richObjs = 22;
  int richobjs_size() const;
  void clear_richobjs();
  static const int kRichObjsFieldNumber = 22;
  const ::std::string& richobjs(int index) const;
  ::std::string* mutable_richobjs(int index);
  void set_richobjs(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_richobjs(int index, ::std::string&& value);
  #endif
  void set_richobjs(int index, const char* value);
  void set_richobjs(int index, const char* value, size_t size);
  ::std::string* add_richobjs();
  void add_richobjs(const ::std::string& value);
  #if LANG_CXX11
  void add_richobjs(::std::string&& value);
  #endif
  void add_richobjs(const char* value);
  void add_richobjs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& richobjs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_richobjs();

  // repeated .ru.mail.go.sugg.indexer.RichObjStat richObjsStat = 23;
  int richobjsstat_size() const;
  void clear_richobjsstat();
  static const int kRichObjsStatFieldNumber = 23;
  const ::ru::mail::go::sugg::indexer::RichObjStat& richobjsstat(int index) const;
  ::ru::mail::go::sugg::indexer::RichObjStat* mutable_richobjsstat(int index);
  ::ru::mail::go::sugg::indexer::RichObjStat* add_richobjsstat();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::RichObjStat >*
      mutable_richobjsstat();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::RichObjStat >&
      richobjsstat() const;

  // repeated .ru.mail.go.sugg.indexer.SpcFix spcFixStat = 24;
  int spcfixstat_size() const;
  void clear_spcfixstat();
  static const int kSpcFixStatFieldNumber = 24;
  const ::ru::mail::go::sugg::indexer::SpcFix& spcfixstat(int index) const;
  ::ru::mail::go::sugg::indexer::SpcFix* mutable_spcfixstat(int index);
  ::ru::mail::go::sugg::indexer::SpcFix* add_spcfixstat();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SpcFix >*
      mutable_spcfixstat();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SpcFix >&
      spcfixstat() const;

  // optional string vertical = 1;
  bool has_vertical() const;
  void clear_vertical();
  static const int kVerticalFieldNumber = 1;
  const ::std::string& vertical() const;
  void set_vertical(const ::std::string& value);
  #if LANG_CXX11
  void set_vertical(::std::string&& value);
  #endif
  void set_vertical(const char* value);
  void set_vertical(const char* value, size_t size);
  ::std::string* mutable_vertical();
  ::std::string* release_vertical();
  void set_allocated_vertical(::std::string* vertical);

  // optional string queryNormalized = 2;
  bool has_querynormalized() const;
  void clear_querynormalized();
  static const int kQueryNormalizedFieldNumber = 2;
  const ::std::string& querynormalized() const;
  void set_querynormalized(const ::std::string& value);
  #if LANG_CXX11
  void set_querynormalized(::std::string&& value);
  #endif
  void set_querynormalized(const char* value);
  void set_querynormalized(const char* value, size_t size);
  ::std::string* mutable_querynormalized();
  ::std::string* release_querynormalized();
  void set_allocated_querynormalized(::std::string* querynormalized);

  // optional string referer = 25;
  bool has_referer() const;
  void clear_referer();
  static const int kRefererFieldNumber = 25;
  const ::std::string& referer() const;
  void set_referer(const ::std::string& value);
  #if LANG_CXX11
  void set_referer(::std::string&& value);
  #endif
  void set_referer(const char* value);
  void set_referer(const char* value, size_t size);
  ::std::string* mutable_referer();
  ::std::string* release_referer();
  void set_allocated_referer(::std::string* referer);

  // optional .ru.mail.go.webbase.SputnikRanker.UserRankValues uniqsLower = 8;
  bool has_uniqslower() const;
  void clear_uniqslower();
  static const int kUniqsLowerFieldNumber = 8;
  const ::ru::mail::go::webbase::SputnikRanker::UserRankValues& uniqslower() const;
  ::ru::mail::go::webbase::SputnikRanker::UserRankValues* mutable_uniqslower();
  ::ru::mail::go::webbase::SputnikRanker::UserRankValues* release_uniqslower();
  void set_allocated_uniqslower(::ru::mail::go::webbase::SputnikRanker::UserRankValues* uniqslower);

  // optional uint64 timeStampMin = 4;
  bool has_timestampmin() const;
  void clear_timestampmin();
  static const int kTimeStampMinFieldNumber = 4;
  ::google::protobuf::uint64 timestampmin() const;
  void set_timestampmin(::google::protobuf::uint64 value);

  // optional uint64 timeStampMax = 5;
  bool has_timestampmax() const;
  void clear_timestampmax();
  static const int kTimeStampMaxFieldNumber = 5;
  ::google::protobuf::uint64 timestampmax() const;
  void set_timestampmax(::google::protobuf::uint64 value);

  // optional uint32 geo = 3;
  bool has_geo() const;
  void clear_geo();
  static const int kGeoFieldNumber = 3;
  ::google::protobuf::uint32 geo() const;
  void set_geo(::google::protobuf::uint32 value);

  // optional uint32 uniqsUpper = 7;
  bool has_uniqsupper() const;
  void clear_uniqsupper();
  static const int kUniqsUpperFieldNumber = 7;
  ::google::protobuf::uint32 uniqsupper() const;
  void set_uniqsupper(::google::protobuf::uint32 value);

  // optional uint64 timeStampSumm = 6;
  bool has_timestampsumm() const;
  void clear_timestampsumm();
  static const int kTimeStampSummFieldNumber = 6;
  ::google::protobuf::uint64 timestampsumm() const;
  void set_timestampsumm(::google::protobuf::uint64 value);

  // optional uint32 numSessions = 10;
  bool has_numsessions() const;
  void clear_numsessions();
  static const int kNumSessionsFieldNumber = 10;
  ::google::protobuf::uint32 numsessions() const;
  void set_numsessions(::google::protobuf::uint32 value);

  // optional uint32 numPorno = 11;
  bool has_numporno() const;
  void clear_numporno();
  static const int kNumPornoFieldNumber = 11;
  ::google::protobuf::uint32 numporno() const;
  void set_numporno(::google::protobuf::uint32 value);

  // optional uint32 numRobot = 12;
  bool has_numrobot() const;
  void clear_numrobot();
  static const int kNumRobotFieldNumber = 12;
  ::google::protobuf::uint32 numrobot() const;
  void set_numrobot(::google::protobuf::uint32 value);

  // optional uint32 numMusic = 13;
  bool has_nummusic() const;
  void clear_nummusic();
  static const int kNumMusicFieldNumber = 13;
  ::google::protobuf::uint32 nummusic() const;
  void set_nummusic(::google::protobuf::uint32 value);

  // optional uint32 numFromSugg = 14;
  bool has_numfromsugg() const;
  void clear_numfromsugg();
  static const int kNumFromSuggFieldNumber = 14;
  ::google::protobuf::uint32 numfromsugg() const;
  void set_numfromsugg(::google::protobuf::uint32 value);

  // optional uint32 numSerpClicks = 15;
  bool has_numserpclicks() const;
  void clear_numserpclicks();
  static const int kNumSerpClicksFieldNumber = 15;
  ::google::protobuf::uint32 numserpclicks() const;
  void set_numserpclicks(::google::protobuf::uint32 value);

  // optional uint64 summSerpCount = 17;
  bool has_summserpcount() const;
  void clear_summserpcount();
  static const int kSummSerpCountFieldNumber = 17;
  ::google::protobuf::uint64 summserpcount() const;
  void set_summserpcount(::google::protobuf::uint64 value);

  // optional uint64 summSerpCountSessions = 18;
  bool has_summserpcountsessions() const;
  void clear_summserpcountsessions();
  static const int kSummSerpCountSessionsFieldNumber = 18;
  ::google::protobuf::uint64 summserpcountsessions() const;
  void set_summserpcountsessions(::google::protobuf::uint64 value);

  // optional uint32 numSpcBanned = 16;
  bool has_numspcbanned() const;
  void clear_numspcbanned();
  static const int kNumSpcBannedFieldNumber = 16;
  ::google::protobuf::uint32 numspcbanned() const;
  void set_numspcbanned(::google::protobuf::uint32 value);

  // optional uint32 uniqsRobot = 21;
  bool has_uniqsrobot() const;
  void clear_uniqsrobot();
  static const int kUniqsRobotFieldNumber = 21;
  ::google::protobuf::uint32 uniqsrobot() const;
  void set_uniqsrobot(::google::protobuf::uint32 value);

  // optional uint64 dateTime = 19;
  bool has_datetime() const;
  void clear_datetime();
  static const int kDateTimeFieldNumber = 19;
  ::google::protobuf::uint64 datetime() const;
  void set_datetime(::google::protobuf::uint64 value);

  // optional double freshness = 20;
  bool has_freshness() const;
  void clear_freshness();
  static const int kFreshnessFieldNumber = 20;
  double freshness() const;
  void set_freshness(double value);

  // optional double pornoProb = 26;
  bool has_pornoprob() const;
  void clear_pornoprob();
  static const int kPornoProbFieldNumber = 26;
  double pornoprob() const;
  void set_pornoprob(double value);

  // optional uint32 numPornoProbHigh = 27;
  bool has_numpornoprobhigh() const;
  void clear_numpornoprobhigh();
  static const int kNumPornoProbHighFieldNumber = 27;
  ::google::protobuf::uint32 numpornoprobhigh() const;
  void set_numpornoprobhigh(::google::protobuf::uint32 value);

  // optional uint32 numPornoProbLow = 28;
  bool has_numpornoproblow() const;
  void clear_numpornoproblow();
  static const int kNumPornoProbLowFieldNumber = 28;
  ::google::protobuf::uint32 numpornoproblow() const;
  void set_numpornoproblow(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.SuggJobData)
 private:
  void set_has_vertical();
  void clear_has_vertical();
  void set_has_querynormalized();
  void clear_has_querynormalized();
  void set_has_geo();
  void clear_has_geo();
  void set_has_referer();
  void clear_has_referer();
  void set_has_timestampmin();
  void clear_has_timestampmin();
  void set_has_timestampmax();
  void clear_has_timestampmax();
  void set_has_timestampsumm();
  void clear_has_timestampsumm();
  void set_has_uniqsupper();
  void clear_has_uniqsupper();
  void set_has_uniqsrobot();
  void clear_has_uniqsrobot();
  void set_has_uniqslower();
  void clear_has_uniqslower();
  void set_has_pornoprob();
  void clear_has_pornoprob();
  void set_has_numpornoprobhigh();
  void clear_has_numpornoprobhigh();
  void set_has_numpornoproblow();
  void clear_has_numpornoproblow();
  void set_has_numsessions();
  void clear_has_numsessions();
  void set_has_numporno();
  void clear_has_numporno();
  void set_has_numrobot();
  void clear_has_numrobot();
  void set_has_nummusic();
  void clear_has_nummusic();
  void set_has_numfromsugg();
  void clear_has_numfromsugg();
  void set_has_numserpclicks();
  void clear_has_numserpclicks();
  void set_has_numspcbanned();
  void clear_has_numspcbanned();
  void set_has_summserpcount();
  void clear_has_summserpcount();
  void set_has_summserpcountsessions();
  void clear_has_summserpcountsessions();
  void set_has_datetime();
  void clear_has_datetime();
  void set_has_freshness();
  void clear_has_freshness();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::Query > queries_;
  ::google::protobuf::RepeatedPtrField< ::std::string> richobjs_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::RichObjStat > richobjsstat_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SpcFix > spcfixstat_;
  ::google::protobuf::internal::ArenaStringPtr vertical_;
  ::google::protobuf::internal::ArenaStringPtr querynormalized_;
  ::google::protobuf::internal::ArenaStringPtr referer_;
  ::ru::mail::go::webbase::SputnikRanker::UserRankValues* uniqslower_;
  ::google::protobuf::uint64 timestampmin_;
  ::google::protobuf::uint64 timestampmax_;
  ::google::protobuf::uint32 geo_;
  ::google::protobuf::uint32 uniqsupper_;
  ::google::protobuf::uint64 timestampsumm_;
  ::google::protobuf::uint32 numsessions_;
  ::google::protobuf::uint32 numporno_;
  ::google::protobuf::uint32 numrobot_;
  ::google::protobuf::uint32 nummusic_;
  ::google::protobuf::uint32 numfromsugg_;
  ::google::protobuf::uint32 numserpclicks_;
  ::google::protobuf::uint64 summserpcount_;
  ::google::protobuf::uint64 summserpcountsessions_;
  ::google::protobuf::uint32 numspcbanned_;
  ::google::protobuf::uint32 uniqsrobot_;
  ::google::protobuf::uint64 datetime_;
  double freshness_;
  double pornoprob_;
  ::google::protobuf::uint32 numpornoprobhigh_;
  ::google::protobuf::uint32 numpornoproblow_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FeatureEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.FeatureEntry) */ {
 public:
  FeatureEntry();
  virtual ~FeatureEntry();

  FeatureEntry(const FeatureEntry& from);

  inline FeatureEntry& operator=(const FeatureEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeatureEntry(FeatureEntry&& from) noexcept
    : FeatureEntry() {
    *this = ::std::move(from);
  }

  inline FeatureEntry& operator=(FeatureEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureEntry& default_instance();

  static inline const FeatureEntry* internal_default_instance() {
    return reinterpret_cast<const FeatureEntry*>(
               &_FeatureEntry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(FeatureEntry* other);
  friend void swap(FeatureEntry& a, FeatureEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeatureEntry* New() const PROTOBUF_FINAL { return New(NULL); }

  FeatureEntry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FeatureEntry& from);
  void MergeFrom(const FeatureEntry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FeatureEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  double value() const;
  void set_value(double value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.FeatureEntry)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double value_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuggSiteResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.SuggSiteResult) */ {
 public:
  SuggSiteResult();
  virtual ~SuggSiteResult();

  SuggSiteResult(const SuggSiteResult& from);

  inline SuggSiteResult& operator=(const SuggSiteResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuggSiteResult(SuggSiteResult&& from) noexcept
    : SuggSiteResult() {
    *this = ::std::move(from);
  }

  inline SuggSiteResult& operator=(SuggSiteResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuggSiteResult& default_instance();

  static inline const SuggSiteResult* internal_default_instance() {
    return reinterpret_cast<const SuggSiteResult*>(
               &_SuggSiteResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SuggSiteResult* other);
  friend void swap(SuggSiteResult& a, SuggSiteResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuggSiteResult* New() const PROTOBUF_FINAL { return New(NULL); }

  SuggSiteResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuggSiteResult& from);
  void MergeFrom(const SuggSiteResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuggSiteResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string query = 3;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 3;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional string favicon = 4;
  bool has_favicon() const;
  void clear_favicon();
  static const int kFaviconFieldNumber = 4;
  const ::std::string& favicon() const;
  void set_favicon(const ::std::string& value);
  #if LANG_CXX11
  void set_favicon(::std::string&& value);
  #endif
  void set_favicon(const char* value);
  void set_favicon(const char* value, size_t size);
  ::std::string* mutable_favicon();
  ::std::string* release_favicon();
  void set_allocated_favicon(::std::string* favicon);

  // optional bool is_nail = 5;
  bool has_is_nail() const;
  void clear_is_nail();
  static const int kIsNailFieldNumber = 5;
  bool is_nail() const;
  void set_is_nail(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.SuggSiteResult)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_title();
  void clear_has_title();
  void set_has_query();
  void clear_has_query();
  void set_has_favicon();
  void clear_has_favicon();
  void set_has_is_nail();
  void clear_has_is_nail();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr favicon_;
  bool is_nail_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuggQueryResult_AmigoMusicResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult) */ {
 public:
  SuggQueryResult_AmigoMusicResult();
  virtual ~SuggQueryResult_AmigoMusicResult();

  SuggQueryResult_AmigoMusicResult(const SuggQueryResult_AmigoMusicResult& from);

  inline SuggQueryResult_AmigoMusicResult& operator=(const SuggQueryResult_AmigoMusicResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuggQueryResult_AmigoMusicResult(SuggQueryResult_AmigoMusicResult&& from) noexcept
    : SuggQueryResult_AmigoMusicResult() {
    *this = ::std::move(from);
  }

  inline SuggQueryResult_AmigoMusicResult& operator=(SuggQueryResult_AmigoMusicResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuggQueryResult_AmigoMusicResult& default_instance();

  static inline const SuggQueryResult_AmigoMusicResult* internal_default_instance() {
    return reinterpret_cast<const SuggQueryResult_AmigoMusicResult*>(
               &_SuggQueryResult_AmigoMusicResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SuggQueryResult_AmigoMusicResult* other);
  friend void swap(SuggQueryResult_AmigoMusicResult& a, SuggQueryResult_AmigoMusicResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuggQueryResult_AmigoMusicResult* New() const PROTOBUF_FINAL { return New(NULL); }

  SuggQueryResult_AmigoMusicResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuggQueryResult_AmigoMusicResult& from);
  void MergeFrom(const SuggQueryResult_AmigoMusicResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuggQueryResult_AmigoMusicResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string artist = 1;
  bool has_artist() const;
  void clear_artist();
  static const int kArtistFieldNumber = 1;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // optional string album = 2;
  bool has_album() const;
  void clear_album();
  static const int kAlbumFieldNumber = 2;
  const ::std::string& album() const;
  void set_album(const ::std::string& value);
  #if LANG_CXX11
  void set_album(::std::string&& value);
  #endif
  void set_album(const char* value);
  void set_album(const char* value, size_t size);
  ::std::string* mutable_album();
  ::std::string* release_album();
  void set_allocated_album(::std::string* album);

  // optional string track = 3;
  bool has_track() const;
  void clear_track();
  static const int kTrackFieldNumber = 3;
  const ::std::string& track() const;
  void set_track(const ::std::string& value);
  #if LANG_CXX11
  void set_track(::std::string&& value);
  #endif
  void set_track(const char* value);
  void set_track(const char* value, size_t size);
  ::std::string* mutable_track();
  ::std::string* release_track();
  void set_allocated_track(::std::string* track);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
 private:
  void set_has_artist();
  void clear_has_artist();
  void set_has_album();
  void clear_has_album();
  void set_has_track();
  void clear_has_track();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr album_;
  ::google::protobuf::internal::ArenaStringPtr track_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuggQueryResult_MatchedPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair) */ {
 public:
  SuggQueryResult_MatchedPair();
  virtual ~SuggQueryResult_MatchedPair();

  SuggQueryResult_MatchedPair(const SuggQueryResult_MatchedPair& from);

  inline SuggQueryResult_MatchedPair& operator=(const SuggQueryResult_MatchedPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuggQueryResult_MatchedPair(SuggQueryResult_MatchedPair&& from) noexcept
    : SuggQueryResult_MatchedPair() {
    *this = ::std::move(from);
  }

  inline SuggQueryResult_MatchedPair& operator=(SuggQueryResult_MatchedPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuggQueryResult_MatchedPair& default_instance();

  static inline const SuggQueryResult_MatchedPair* internal_default_instance() {
    return reinterpret_cast<const SuggQueryResult_MatchedPair*>(
               &_SuggQueryResult_MatchedPair_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SuggQueryResult_MatchedPair* other);
  friend void swap(SuggQueryResult_MatchedPair& a, SuggQueryResult_MatchedPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuggQueryResult_MatchedPair* New() const PROTOBUF_FINAL { return New(NULL); }

  SuggQueryResult_MatchedPair* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuggQueryResult_MatchedPair& from);
  void MergeFrom(const SuggQueryResult_MatchedPair& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuggQueryResult_MatchedPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 begin_pos = 1;
  bool has_begin_pos() const;
  void clear_begin_pos();
  static const int kBeginPosFieldNumber = 1;
  ::google::protobuf::uint32 begin_pos() const;
  void set_begin_pos(::google::protobuf::uint32 value);

  // required uint32 end_pos = 2;
  bool has_end_pos() const;
  void clear_end_pos();
  static const int kEndPosFieldNumber = 2;
  ::google::protobuf::uint32 end_pos() const;
  void set_end_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
 private:
  void set_has_begin_pos();
  void clear_has_begin_pos();
  void set_has_end_pos();
  void clear_has_end_pos();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 begin_pos_;
  ::google::protobuf::uint32 end_pos_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuggQueryResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.SuggQueryResult) */ {
 public:
  SuggQueryResult();
  virtual ~SuggQueryResult();

  SuggQueryResult(const SuggQueryResult& from);

  inline SuggQueryResult& operator=(const SuggQueryResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuggQueryResult(SuggQueryResult&& from) noexcept
    : SuggQueryResult() {
    *this = ::std::move(from);
  }

  inline SuggQueryResult& operator=(SuggQueryResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuggQueryResult& default_instance();

  static inline const SuggQueryResult* internal_default_instance() {
    return reinterpret_cast<const SuggQueryResult*>(
               &_SuggQueryResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SuggQueryResult* other);
  friend void swap(SuggQueryResult& a, SuggQueryResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuggQueryResult* New() const PROTOBUF_FINAL { return New(NULL); }

  SuggQueryResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuggQueryResult& from);
  void MergeFrom(const SuggQueryResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuggQueryResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SuggQueryResult_AmigoMusicResult AmigoMusicResult;
  typedef SuggQueryResult_MatchedPair MatchedPair;

  typedef SuggQueryResult_MisspellType MisspellType;
  static const MisspellType NONE =
    SuggQueryResult_MisspellType_NONE;
  static const MisspellType GRAMMATIC =
    SuggQueryResult_MisspellType_GRAMMATIC;
  static const MisspellType INVERTED =
    SuggQueryResult_MisspellType_INVERTED;
  static const MisspellType PUNTO =
    SuggQueryResult_MisspellType_PUNTO;
  static inline bool MisspellType_IsValid(int value) {
    return SuggQueryResult_MisspellType_IsValid(value);
  }
  static const MisspellType MisspellType_MIN =
    SuggQueryResult_MisspellType_MisspellType_MIN;
  static const MisspellType MisspellType_MAX =
    SuggQueryResult_MisspellType_MisspellType_MAX;
  static const int MisspellType_ARRAYSIZE =
    SuggQueryResult_MisspellType_MisspellType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MisspellType_descriptor() {
    return SuggQueryResult_MisspellType_descriptor();
  }
  static inline const ::std::string& MisspellType_Name(MisspellType value) {
    return SuggQueryResult_MisspellType_Name(value);
  }
  static inline bool MisspellType_Parse(const ::std::string& name,
      MisspellType* value) {
    return SuggQueryResult_MisspellType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.sugg.indexer.FeatureEntry feature_list = 9;
  int feature_list_size() const;
  void clear_feature_list();
  static const int kFeatureListFieldNumber = 9;
  const ::ru::mail::go::sugg::indexer::FeatureEntry& feature_list(int index) const;
  ::ru::mail::go::sugg::indexer::FeatureEntry* mutable_feature_list(int index);
  ::ru::mail::go::sugg::indexer::FeatureEntry* add_feature_list();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::FeatureEntry >*
      mutable_feature_list();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::FeatureEntry >&
      feature_list() const;

  // repeated .ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair matched_ranges = 19;
  int matched_ranges_size() const;
  void clear_matched_ranges();
  static const int kMatchedRangesFieldNumber = 19;
  const ::ru::mail::go::sugg::indexer::SuggQueryResult_MatchedPair& matched_ranges(int index) const;
  ::ru::mail::go::sugg::indexer::SuggQueryResult_MatchedPair* mutable_matched_ranges(int index);
  ::ru::mail::go::sugg::indexer::SuggQueryResult_MatchedPair* add_matched_ranges();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggQueryResult_MatchedPair >*
      mutable_matched_ranges();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggQueryResult_MatchedPair >&
      matched_ranges() const;

  // optional string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional string rich_category = 6;
  bool has_rich_category() const;
  void clear_rich_category();
  static const int kRichCategoryFieldNumber = 6;
  const ::std::string& rich_category() const;
  void set_rich_category(const ::std::string& value);
  #if LANG_CXX11
  void set_rich_category(::std::string&& value);
  #endif
  void set_rich_category(const char* value);
  void set_rich_category(const char* value, size_t size);
  ::std::string* mutable_rich_category();
  ::std::string* release_rich_category();
  void set_allocated_rich_category(::std::string* rich_category);

  // optional string rich_data = 7;
  bool has_rich_data() const;
  void clear_rich_data();
  static const int kRichDataFieldNumber = 7;
  const ::std::string& rich_data() const;
  void set_rich_data(const ::std::string& value);
  #if LANG_CXX11
  void set_rich_data(::std::string&& value);
  #endif
  void set_rich_data(const char* value);
  void set_rich_data(const char* value, size_t size);
  ::std::string* mutable_rich_data();
  ::std::string* release_rich_data();
  void set_allocated_rich_data(::std::string* rich_data);

  // optional string marked_text = 10;
  bool has_marked_text() const;
  void clear_marked_text();
  static const int kMarkedTextFieldNumber = 10;
  const ::std::string& marked_text() const;
  void set_marked_text(const ::std::string& value);
  #if LANG_CXX11
  void set_marked_text(::std::string&& value);
  #endif
  void set_marked_text(const char* value);
  void set_marked_text(const char* value, size_t size);
  ::std::string* mutable_marked_text();
  ::std::string* release_marked_text();
  void set_allocated_marked_text(::std::string* marked_text);

  // optional .ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult amigo_music = 8;
  bool has_amigo_music() const;
  void clear_amigo_music();
  static const int kAmigoMusicFieldNumber = 8;
  const ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult& amigo_music() const;
  ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult* mutable_amigo_music();
  ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult* release_amigo_music();
  void set_allocated_amigo_music(::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult* amigo_music);

  // optional .ru.mail.go.sugg.indexer.SuggSiteResult site = 17;
  bool has_site() const;
  void clear_site();
  static const int kSiteFieldNumber = 17;
  const ::ru::mail::go::sugg::indexer::SuggSiteResult& site() const;
  ::ru::mail::go::sugg::indexer::SuggSiteResult* mutable_site();
  ::ru::mail::go::sugg::indexer::SuggSiteResult* release_site();
  void set_allocated_site(::ru::mail::go::sugg::indexer::SuggSiteResult* site);

  // optional .ru.mail.go.sugg.indexer.SuggQueryResult.MisspellType misspell_type = 2;
  bool has_misspell_type() const;
  void clear_misspell_type();
  static const int kMisspellTypeFieldNumber = 2;
  ::ru::mail::go::sugg::indexer::SuggQueryResult_MisspellType misspell_type() const;
  void set_misspell_type(::ru::mail::go::sugg::indexer::SuggQueryResult_MisspellType value);

  // optional bool is_music = 3;
  bool has_is_music() const;
  void clear_is_music();
  static const int kIsMusicFieldNumber = 3;
  bool is_music() const;
  void set_is_music(bool value);

  // optional bool is_autocomp = 4;
  bool has_is_autocomp() const;
  void clear_is_autocomp();
  static const int kIsAutocompFieldNumber = 4;
  bool is_autocomp() const;
  void set_is_autocomp(bool value);

  // optional bool is_news = 5;
  bool has_is_news() const;
  void clear_is_news();
  static const int kIsNewsFieldNumber = 5;
  bool is_news() const;
  void set_is_news(bool value);

  // optional bool exact_match = 13;
  bool has_exact_match() const;
  void clear_exact_match();
  static const int kExactMatchFieldNumber = 13;
  bool exact_match() const;
  void set_exact_match(bool value);

  // optional uint32 freq = 11;
  bool has_freq() const;
  void clear_freq();
  static const int kFreqFieldNumber = 11;
  ::google::protobuf::uint32 freq() const;
  void set_freq(::google::protobuf::uint32 value);

  // optional float weight = 12;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 12;
  float weight() const;
  void set_weight(float value);

  // optional uint32 geo_country_freq = 14;
  bool has_geo_country_freq() const;
  void clear_geo_country_freq();
  static const int kGeoCountryFreqFieldNumber = 14;
  ::google::protobuf::uint32 geo_country_freq() const;
  void set_geo_country_freq(::google::protobuf::uint32 value);

  // optional uint32 geo_region_freq = 15;
  bool has_geo_region_freq() const;
  void clear_geo_region_freq();
  static const int kGeoRegionFreqFieldNumber = 15;
  ::google::protobuf::uint32 geo_region_freq() const;
  void set_geo_region_freq(::google::protobuf::uint32 value);

  // optional float log_prob = 16;
  bool has_log_prob() const;
  void clear_log_prob();
  static const int kLogProbFieldNumber = 16;
  float log_prob() const;
  void set_log_prob(float value);

  // optional uint32 rich_category_type = 18;
  bool has_rich_category_type() const;
  void clear_rich_category_type();
  static const int kRichCategoryTypeFieldNumber = 18;
  ::google::protobuf::uint32 rich_category_type() const;
  void set_rich_category_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.SuggQueryResult)
 private:
  void set_has_text();
  void clear_has_text();
  void set_has_misspell_type();
  void clear_has_misspell_type();
  void set_has_is_music();
  void clear_has_is_music();
  void set_has_is_autocomp();
  void clear_has_is_autocomp();
  void set_has_is_news();
  void clear_has_is_news();
  void set_has_rich_category();
  void clear_has_rich_category();
  void set_has_rich_data();
  void clear_has_rich_data();
  void set_has_amigo_music();
  void clear_has_amigo_music();
  void set_has_marked_text();
  void clear_has_marked_text();
  void set_has_freq();
  void clear_has_freq();
  void set_has_weight();
  void clear_has_weight();
  void set_has_exact_match();
  void clear_has_exact_match();
  void set_has_geo_country_freq();
  void clear_has_geo_country_freq();
  void set_has_geo_region_freq();
  void clear_has_geo_region_freq();
  void set_has_log_prob();
  void clear_has_log_prob();
  void set_has_site();
  void clear_has_site();
  void set_has_rich_category_type();
  void clear_has_rich_category_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::FeatureEntry > feature_list_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggQueryResult_MatchedPair > matched_ranges_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr rich_category_;
  ::google::protobuf::internal::ArenaStringPtr rich_data_;
  ::google::protobuf::internal::ArenaStringPtr marked_text_;
  ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult* amigo_music_;
  ::ru::mail::go::sugg::indexer::SuggSiteResult* site_;
  int misspell_type_;
  bool is_music_;
  bool is_autocomp_;
  bool is_news_;
  bool exact_match_;
  ::google::protobuf::uint32 freq_;
  float weight_;
  ::google::protobuf::uint32 geo_country_freq_;
  ::google::protobuf::uint32 geo_region_freq_;
  float log_prob_;
  ::google::protobuf::uint32 rich_category_type_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuggWnfEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.SuggWnfEntry) */ {
 public:
  SuggWnfEntry();
  virtual ~SuggWnfEntry();

  SuggWnfEntry(const SuggWnfEntry& from);

  inline SuggWnfEntry& operator=(const SuggWnfEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuggWnfEntry(SuggWnfEntry&& from) noexcept
    : SuggWnfEntry() {
    *this = ::std::move(from);
  }

  inline SuggWnfEntry& operator=(SuggWnfEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuggWnfEntry& default_instance();

  static inline const SuggWnfEntry* internal_default_instance() {
    return reinterpret_cast<const SuggWnfEntry*>(
               &_SuggWnfEntry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(SuggWnfEntry* other);
  friend void swap(SuggWnfEntry& a, SuggWnfEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuggWnfEntry* New() const PROTOBUF_FINAL { return New(NULL); }

  SuggWnfEntry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuggWnfEntry& from);
  void MergeFrom(const SuggWnfEntry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuggWnfEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string comment = 2;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 2;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // optional string tag = 3;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 3;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional bool verdict = 1;
  bool has_verdict() const;
  void clear_verdict();
  static const int kVerdictFieldNumber = 1;
  bool verdict() const;
  void set_verdict(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.SuggWnfEntry)
 private:
  void set_has_tag();
  void clear_has_tag();
  void set_has_verdict();
  void clear_has_verdict();
  void set_has_comment();
  void clear_has_comment();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  bool verdict_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuggWnfResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.SuggWnfResult) */ {
 public:
  SuggWnfResult();
  virtual ~SuggWnfResult();

  SuggWnfResult(const SuggWnfResult& from);

  inline SuggWnfResult& operator=(const SuggWnfResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuggWnfResult(SuggWnfResult&& from) noexcept
    : SuggWnfResult() {
    *this = ::std::move(from);
  }

  inline SuggWnfResult& operator=(SuggWnfResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuggWnfResult& default_instance();

  static inline const SuggWnfResult* internal_default_instance() {
    return reinterpret_cast<const SuggWnfResult*>(
               &_SuggWnfResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(SuggWnfResult* other);
  friend void swap(SuggWnfResult& a, SuggWnfResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuggWnfResult* New() const PROTOBUF_FINAL { return New(NULL); }

  SuggWnfResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuggWnfResult& from);
  void MergeFrom(const SuggWnfResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuggWnfResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.sugg.indexer.SuggWnfEntry wnf_entries = 3;
  int wnf_entries_size() const;
  void clear_wnf_entries();
  static const int kWnfEntriesFieldNumber = 3;
  const ::ru::mail::go::sugg::indexer::SuggWnfEntry& wnf_entries(int index) const;
  ::ru::mail::go::sugg::indexer::SuggWnfEntry* mutable_wnf_entries(int index);
  ::ru::mail::go::sugg::indexer::SuggWnfEntry* add_wnf_entries();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggWnfEntry >*
      mutable_wnf_entries();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggWnfEntry >&
      wnf_entries() const;

  // optional string wnf_query = 1;
  bool has_wnf_query() const;
  void clear_wnf_query();
  static const int kWnfQueryFieldNumber = 1;
  const ::std::string& wnf_query() const;
  void set_wnf_query(const ::std::string& value);
  #if LANG_CXX11
  void set_wnf_query(::std::string&& value);
  #endif
  void set_wnf_query(const char* value);
  void set_wnf_query(const char* value, size_t size);
  ::std::string* mutable_wnf_query();
  ::std::string* release_wnf_query();
  void set_allocated_wnf_query(::std::string* wnf_query);

  // optional .ru.mail.go.sugg.indexer.SuggWnfEntry wnf_result = 2;
  bool has_wnf_result() const;
  void clear_wnf_result();
  static const int kWnfResultFieldNumber = 2;
  const ::ru::mail::go::sugg::indexer::SuggWnfEntry& wnf_result() const;
  ::ru::mail::go::sugg::indexer::SuggWnfEntry* mutable_wnf_result();
  ::ru::mail::go::sugg::indexer::SuggWnfEntry* release_wnf_result();
  void set_allocated_wnf_result(::ru::mail::go::sugg::indexer::SuggWnfEntry* wnf_result);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.SuggWnfResult)
 private:
  void set_has_wnf_query();
  void clear_has_wnf_query();
  void set_has_wnf_result();
  void clear_has_wnf_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggWnfEntry > wnf_entries_;
  ::google::protobuf::internal::ArenaStringPtr wnf_query_;
  ::ru::mail::go::sugg::indexer::SuggWnfEntry* wnf_result_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuggMobileAutocompResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.SuggMobileAutocompResult) */ {
 public:
  SuggMobileAutocompResult();
  virtual ~SuggMobileAutocompResult();

  SuggMobileAutocompResult(const SuggMobileAutocompResult& from);

  inline SuggMobileAutocompResult& operator=(const SuggMobileAutocompResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuggMobileAutocompResult(SuggMobileAutocompResult&& from) noexcept
    : SuggMobileAutocompResult() {
    *this = ::std::move(from);
  }

  inline SuggMobileAutocompResult& operator=(SuggMobileAutocompResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuggMobileAutocompResult& default_instance();

  static inline const SuggMobileAutocompResult* internal_default_instance() {
    return reinterpret_cast<const SuggMobileAutocompResult*>(
               &_SuggMobileAutocompResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(SuggMobileAutocompResult* other);
  friend void swap(SuggMobileAutocompResult& a, SuggMobileAutocompResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuggMobileAutocompResult* New() const PROTOBUF_FINAL { return New(NULL); }

  SuggMobileAutocompResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuggMobileAutocompResult& from);
  void MergeFrom(const SuggMobileAutocompResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuggMobileAutocompResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string paste_text = 1;
  bool has_paste_text() const;
  void clear_paste_text();
  static const int kPasteTextFieldNumber = 1;
  const ::std::string& paste_text() const;
  void set_paste_text(const ::std::string& value);
  #if LANG_CXX11
  void set_paste_text(::std::string&& value);
  #endif
  void set_paste_text(const char* value);
  void set_paste_text(const char* value, size_t size);
  ::std::string* mutable_paste_text();
  ::std::string* release_paste_text();
  void set_allocated_paste_text(::std::string* paste_text);

  // required string display_text = 2;
  bool has_display_text() const;
  void clear_display_text();
  static const int kDisplayTextFieldNumber = 2;
  const ::std::string& display_text() const;
  void set_display_text(const ::std::string& value);
  #if LANG_CXX11
  void set_display_text(::std::string&& value);
  #endif
  void set_display_text(const char* value);
  void set_display_text(const char* value, size_t size);
  ::std::string* mutable_display_text();
  ::std::string* release_display_text();
  void set_allocated_display_text(::std::string* display_text);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
 private:
  void set_has_paste_text();
  void clear_has_paste_text();
  void set_has_display_text();
  void clear_has_display_text();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr paste_text_;
  ::google::protobuf::internal::ArenaStringPtr display_text_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuggInlineAutocompResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.SuggInlineAutocompResult) */ {
 public:
  SuggInlineAutocompResult();
  virtual ~SuggInlineAutocompResult();

  SuggInlineAutocompResult(const SuggInlineAutocompResult& from);

  inline SuggInlineAutocompResult& operator=(const SuggInlineAutocompResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuggInlineAutocompResult(SuggInlineAutocompResult&& from) noexcept
    : SuggInlineAutocompResult() {
    *this = ::std::move(from);
  }

  inline SuggInlineAutocompResult& operator=(SuggInlineAutocompResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuggInlineAutocompResult& default_instance();

  static inline const SuggInlineAutocompResult* internal_default_instance() {
    return reinterpret_cast<const SuggInlineAutocompResult*>(
               &_SuggInlineAutocompResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(SuggInlineAutocompResult* other);
  friend void swap(SuggInlineAutocompResult& a, SuggInlineAutocompResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuggInlineAutocompResult* New() const PROTOBUF_FINAL { return New(NULL); }

  SuggInlineAutocompResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuggInlineAutocompResult& from);
  void MergeFrom(const SuggInlineAutocompResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuggInlineAutocompResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string completion_text = 1;
  bool has_completion_text() const;
  void clear_completion_text();
  static const int kCompletionTextFieldNumber = 1;
  const ::std::string& completion_text() const;
  void set_completion_text(const ::std::string& value);
  #if LANG_CXX11
  void set_completion_text(::std::string&& value);
  #endif
  void set_completion_text(const char* value);
  void set_completion_text(const char* value, size_t size);
  ::std::string* mutable_completion_text();
  ::std::string* release_completion_text();
  void set_allocated_completion_text(::std::string* completion_text);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
 private:
  void set_has_completion_text();
  void clear_has_completion_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr completion_text_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuggTotalFreq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.SuggTotalFreq) */ {
 public:
  SuggTotalFreq();
  virtual ~SuggTotalFreq();

  SuggTotalFreq(const SuggTotalFreq& from);

  inline SuggTotalFreq& operator=(const SuggTotalFreq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuggTotalFreq(SuggTotalFreq&& from) noexcept
    : SuggTotalFreq() {
    *this = ::std::move(from);
  }

  inline SuggTotalFreq& operator=(SuggTotalFreq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuggTotalFreq& default_instance();

  static inline const SuggTotalFreq* internal_default_instance() {
    return reinterpret_cast<const SuggTotalFreq*>(
               &_SuggTotalFreq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(SuggTotalFreq* other);
  friend void swap(SuggTotalFreq& a, SuggTotalFreq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuggTotalFreq* New() const PROTOBUF_FINAL { return New(NULL); }

  SuggTotalFreq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuggTotalFreq& from);
  void MergeFrom(const SuggTotalFreq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuggTotalFreq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 total = 1;
  bool has_total() const;
  void clear_total();
  static const int kTotalFieldNumber = 1;
  ::google::protobuf::uint64 total() const;
  void set_total(::google::protobuf::uint64 value);

  // optional uint64 country = 2;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 2;
  ::google::protobuf::uint64 country() const;
  void set_country(::google::protobuf::uint64 value);

  // optional uint64 region = 3;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 3;
  ::google::protobuf::uint64 region() const;
  void set_region(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.SuggTotalFreq)
 private:
  void set_has_total();
  void clear_has_total();
  void set_has_country();
  void clear_has_country();
  void set_has_region();
  void clear_has_region();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 total_;
  ::google::protobuf::uint64 country_;
  ::google::protobuf::uint64 region_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuggResultStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.SuggResultStat) */ {
 public:
  SuggResultStat();
  virtual ~SuggResultStat();

  SuggResultStat(const SuggResultStat& from);

  inline SuggResultStat& operator=(const SuggResultStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuggResultStat(SuggResultStat&& from) noexcept
    : SuggResultStat() {
    *this = ::std::move(from);
  }

  inline SuggResultStat& operator=(SuggResultStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuggResultStat& default_instance();

  static inline const SuggResultStat* internal_default_instance() {
    return reinterpret_cast<const SuggResultStat*>(
               &_SuggResultStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(SuggResultStat* other);
  friend void swap(SuggResultStat& a, SuggResultStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuggResultStat* New() const PROTOBUF_FINAL { return New(NULL); }

  SuggResultStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuggResultStat& from);
  void MergeFrom(const SuggResultStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuggResultStat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ru.mail.go.sugg.indexer.SuggTotalFreq total_freq = 4;
  bool has_total_freq() const;
  void clear_total_freq();
  static const int kTotalFreqFieldNumber = 4;
  const ::ru::mail::go::sugg::indexer::SuggTotalFreq& total_freq() const;
  ::ru::mail::go::sugg::indexer::SuggTotalFreq* mutable_total_freq();
  ::ru::mail::go::sugg::indexer::SuggTotalFreq* release_total_freq();
  void set_allocated_total_freq(::ru::mail::go::sugg::indexer::SuggTotalFreq* total_freq);

  // optional bool skip_exact_match = 1;
  bool has_skip_exact_match() const;
  void clear_skip_exact_match();
  static const int kSkipExactMatchFieldNumber = 1;
  bool skip_exact_match() const;
  void set_skip_exact_match(bool value);

  // optional uint32 top_results = 3;
  bool has_top_results() const;
  void clear_top_results();
  static const int kTopResultsFieldNumber = 3;
  ::google::protobuf::uint32 top_results() const;
  void set_top_results(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.SuggResultStat)
 private:
  void set_has_skip_exact_match();
  void clear_has_skip_exact_match();
  void set_has_top_results();
  void clear_has_top_results();
  void set_has_total_freq();
  void clear_has_total_freq();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::sugg::indexer::SuggTotalFreq* total_freq_;
  bool skip_exact_match_;
  ::google::protobuf::uint32 top_results_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuggResults : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.sugg.indexer.SuggResults) */ {
 public:
  SuggResults();
  virtual ~SuggResults();

  SuggResults(const SuggResults& from);

  inline SuggResults& operator=(const SuggResults& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuggResults(SuggResults&& from) noexcept
    : SuggResults() {
    *this = ::std::move(from);
  }

  inline SuggResults& operator=(SuggResults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuggResults& default_instance();

  static inline const SuggResults* internal_default_instance() {
    return reinterpret_cast<const SuggResults*>(
               &_SuggResults_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(SuggResults* other);
  friend void swap(SuggResults& a, SuggResults& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuggResults* New() const PROTOBUF_FINAL { return New(NULL); }

  SuggResults* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuggResults& from);
  void MergeFrom(const SuggResults& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuggResults* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.sugg.indexer.SuggQueryResult queries = 1;
  int queries_size() const;
  void clear_queries();
  static const int kQueriesFieldNumber = 1;
  const ::ru::mail::go::sugg::indexer::SuggQueryResult& queries(int index) const;
  ::ru::mail::go::sugg::indexer::SuggQueryResult* mutable_queries(int index);
  ::ru::mail::go::sugg::indexer::SuggQueryResult* add_queries();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggQueryResult >*
      mutable_queries();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggQueryResult >&
      queries() const;

  // repeated .ru.mail.go.sugg.indexer.SuggSiteResult sites = 2;
  int sites_size() const;
  void clear_sites();
  static const int kSitesFieldNumber = 2;
  const ::ru::mail::go::sugg::indexer::SuggSiteResult& sites(int index) const;
  ::ru::mail::go::sugg::indexer::SuggSiteResult* mutable_sites(int index);
  ::ru::mail::go::sugg::indexer::SuggSiteResult* add_sites();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggSiteResult >*
      mutable_sites();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggSiteResult >&
      sites() const;

  // repeated .ru.mail.go.sugg.indexer.SuggMobileAutocompResult mobile_autocomps = 6;
  int mobile_autocomps_size() const;
  void clear_mobile_autocomps();
  static const int kMobileAutocompsFieldNumber = 6;
  const ::ru::mail::go::sugg::indexer::SuggMobileAutocompResult& mobile_autocomps(int index) const;
  ::ru::mail::go::sugg::indexer::SuggMobileAutocompResult* mutable_mobile_autocomps(int index);
  ::ru::mail::go::sugg::indexer::SuggMobileAutocompResult* add_mobile_autocomps();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggMobileAutocompResult >*
      mutable_mobile_autocomps();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggMobileAutocompResult >&
      mobile_autocomps() const;

  // repeated .ru.mail.go.sugg.indexer.SuggInlineAutocompResult inline_autocomps = 9;
  int inline_autocomps_size() const;
  void clear_inline_autocomps();
  static const int kInlineAutocompsFieldNumber = 9;
  const ::ru::mail::go::sugg::indexer::SuggInlineAutocompResult& inline_autocomps(int index) const;
  ::ru::mail::go::sugg::indexer::SuggInlineAutocompResult* mutable_inline_autocomps(int index);
  ::ru::mail::go::sugg::indexer::SuggInlineAutocompResult* add_inline_autocomps();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggInlineAutocompResult >*
      mutable_inline_autocomps();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggInlineAutocompResult >&
      inline_autocomps() const;

  // optional string error = 3;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // optional string query = 4;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 4;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional .ru.mail.go.sugg.indexer.SuggWnfResult wnf_result = 5;
  bool has_wnf_result() const;
  void clear_wnf_result();
  static const int kWnfResultFieldNumber = 5;
  const ::ru::mail::go::sugg::indexer::SuggWnfResult& wnf_result() const;
  ::ru::mail::go::sugg::indexer::SuggWnfResult* mutable_wnf_result();
  ::ru::mail::go::sugg::indexer::SuggWnfResult* release_wnf_result();
  void set_allocated_wnf_result(::ru::mail::go::sugg::indexer::SuggWnfResult* wnf_result);

  // optional .ru.mail.go.sugg.indexer.SuggResultStat stat = 8;
  bool has_stat() const;
  void clear_stat();
  static const int kStatFieldNumber = 8;
  const ::ru::mail::go::sugg::indexer::SuggResultStat& stat() const;
  ::ru::mail::go::sugg::indexer::SuggResultStat* mutable_stat();
  ::ru::mail::go::sugg::indexer::SuggResultStat* release_stat();
  void set_allocated_stat(::ru::mail::go::sugg::indexer::SuggResultStat* stat);

  // optional double end_ratio = 10;
  bool has_end_ratio() const;
  void clear_end_ratio();
  static const int kEndRatioFieldNumber = 10;
  double end_ratio() const;
  void set_end_ratio(double value);

  // optional uint32 rid = 7;
  bool has_rid() const;
  void clear_rid();
  static const int kRidFieldNumber = 7;
  ::google::protobuf::uint32 rid() const;
  void set_rid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.sugg.indexer.SuggResults)
 private:
  void set_has_query();
  void clear_has_query();
  void set_has_rid();
  void clear_has_rid();
  void set_has_error();
  void clear_has_error();
  void set_has_stat();
  void clear_has_stat();
  void set_has_wnf_result();
  void clear_has_wnf_result();
  void set_has_end_ratio();
  void clear_has_end_ratio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggQueryResult > queries_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggSiteResult > sites_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggMobileAutocompResult > mobile_autocomps_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggInlineAutocompResult > inline_autocomps_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::ru::mail::go::sugg::indexer::SuggWnfResult* wnf_result_;
  ::ru::mail::go::sugg::indexer::SuggResultStat* stat_;
  double end_ratio_;
  ::google::protobuf::uint32 rid_;
  friend struct protobuf_suggests_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Clicks_Click

// optional int32 pos = 1;
inline bool Clicks_Click::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Clicks_Click::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Clicks_Click::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Clicks_Click::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 Clicks_Click::pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.Clicks.Click.pos)
  return pos_;
}
inline void Clicks_Click::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.Clicks.Click.pos)
}

// optional uint64 timestamp = 2;
inline bool Clicks_Click::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Clicks_Click::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Clicks_Click::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Clicks_Click::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Clicks_Click::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.Clicks.Click.timestamp)
  return timestamp_;
}
inline void Clicks_Click::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.Clicks.Click.timestamp)
}

// -------------------------------------------------------------------

// Clicks

// repeated .ru.mail.go.sugg.indexer.Clicks.Click click = 1;
inline int Clicks::click_size() const {
  return click_.size();
}
inline void Clicks::clear_click() {
  click_.Clear();
}
inline const ::ru::mail::go::sugg::indexer::Clicks_Click& Clicks::click(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.Clicks.click)
  return click_.Get(index);
}
inline ::ru::mail::go::sugg::indexer::Clicks_Click* Clicks::mutable_click(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.Clicks.click)
  return click_.Mutable(index);
}
inline ::ru::mail::go::sugg::indexer::Clicks_Click* Clicks::add_click() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.Clicks.click)
  return click_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::Clicks_Click >*
Clicks::mutable_click() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.Clicks.click)
  return &click_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::Clicks_Click >&
Clicks::click() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.Clicks.click)
  return click_;
}

// -------------------------------------------------------------------

// Query

// required string query = 1;
inline bool Query::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Query::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Query::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Query::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& Query::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.Query.query)
  return query_.GetNoArena();
}
inline void Query::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.Query.query)
}
#if LANG_CXX11
inline void Query::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.Query.query)
}
#endif
inline void Query::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.Query.query)
}
inline void Query::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.Query.query)
}
inline ::std::string* Query::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.Query.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Query::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.Query.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Query::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.Query.query)
}

// required uint32 uniqs = 2;
inline bool Query::has_uniqs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Query::set_has_uniqs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Query::clear_has_uniqs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Query::clear_uniqs() {
  uniqs_ = 0u;
  clear_has_uniqs();
}
inline ::google::protobuf::uint32 Query::uniqs() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.Query.uniqs)
  return uniqs_;
}
inline void Query::set_uniqs(::google::protobuf::uint32 value) {
  set_has_uniqs();
  uniqs_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.Query.uniqs)
}

// required .ru.mail.go.sugg.indexer.Query.QType type = 3;
inline bool Query::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Query::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Query::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Query::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::sugg::indexer::Query_QType Query::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.Query.type)
  return static_cast< ::ru::mail::go::sugg::indexer::Query_QType >(type_);
}
inline void Query::set_type(::ru::mail::go::sugg::indexer::Query_QType value) {
  assert(::ru::mail::go::sugg::indexer::Query_QType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.Query.type)
}

// -------------------------------------------------------------------

// SpcFix

// required string type = 1;
inline bool SpcFix::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpcFix::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpcFix::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpcFix::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& SpcFix::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SpcFix.type)
  return type_.GetNoArena();
}
inline void SpcFix::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SpcFix.type)
}
#if LANG_CXX11
inline void SpcFix::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SpcFix.type)
}
#endif
inline void SpcFix::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SpcFix.type)
}
inline void SpcFix::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SpcFix.type)
}
inline ::std::string* SpcFix::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SpcFix.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpcFix::release_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SpcFix.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpcFix::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SpcFix.type)
}

// required uint32 num = 2;
inline bool SpcFix::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpcFix::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpcFix::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpcFix::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 SpcFix::num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SpcFix.num)
  return num_;
}
inline void SpcFix::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SpcFix.num)
}

// -------------------------------------------------------------------

// RichObjStat

// required string type = 1;
inline bool RichObjStat::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RichObjStat::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RichObjStat::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RichObjStat::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& RichObjStat::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.RichObjStat.type)
  return type_.GetNoArena();
}
inline void RichObjStat::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.RichObjStat.type)
}
#if LANG_CXX11
inline void RichObjStat::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.RichObjStat.type)
}
#endif
inline void RichObjStat::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.RichObjStat.type)
}
inline void RichObjStat::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.RichObjStat.type)
}
inline ::std::string* RichObjStat::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.RichObjStat.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RichObjStat::release_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.RichObjStat.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RichObjStat::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.RichObjStat.type)
}

// required uint32 num = 2;
inline bool RichObjStat::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RichObjStat::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RichObjStat::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RichObjStat::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 RichObjStat::num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.RichObjStat.num)
  return num_;
}
inline void RichObjStat::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.RichObjStat.num)
}

// -------------------------------------------------------------------

// SuggJobData

// optional string vertical = 1;
inline bool SuggJobData::has_vertical() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggJobData::set_has_vertical() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuggJobData::clear_has_vertical() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuggJobData::clear_vertical() {
  vertical_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vertical();
}
inline const ::std::string& SuggJobData::vertical() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.vertical)
  return vertical_.GetNoArena();
}
inline void SuggJobData::set_vertical(const ::std::string& value) {
  set_has_vertical();
  vertical_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.vertical)
}
#if LANG_CXX11
inline void SuggJobData::set_vertical(::std::string&& value) {
  set_has_vertical();
  vertical_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggJobData.vertical)
}
#endif
inline void SuggJobData::set_vertical(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vertical();
  vertical_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggJobData.vertical)
}
inline void SuggJobData::set_vertical(const char* value, size_t size) {
  set_has_vertical();
  vertical_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggJobData.vertical)
}
inline ::std::string* SuggJobData::mutable_vertical() {
  set_has_vertical();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggJobData.vertical)
  return vertical_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggJobData::release_vertical() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggJobData.vertical)
  clear_has_vertical();
  return vertical_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggJobData::set_allocated_vertical(::std::string* vertical) {
  if (vertical != NULL) {
    set_has_vertical();
  } else {
    clear_has_vertical();
  }
  vertical_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vertical);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggJobData.vertical)
}

// optional string queryNormalized = 2;
inline bool SuggJobData::has_querynormalized() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuggJobData::set_has_querynormalized() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuggJobData::clear_has_querynormalized() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuggJobData::clear_querynormalized() {
  querynormalized_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_querynormalized();
}
inline const ::std::string& SuggJobData::querynormalized() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.queryNormalized)
  return querynormalized_.GetNoArena();
}
inline void SuggJobData::set_querynormalized(const ::std::string& value) {
  set_has_querynormalized();
  querynormalized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.queryNormalized)
}
#if LANG_CXX11
inline void SuggJobData::set_querynormalized(::std::string&& value) {
  set_has_querynormalized();
  querynormalized_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggJobData.queryNormalized)
}
#endif
inline void SuggJobData::set_querynormalized(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_querynormalized();
  querynormalized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggJobData.queryNormalized)
}
inline void SuggJobData::set_querynormalized(const char* value, size_t size) {
  set_has_querynormalized();
  querynormalized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggJobData.queryNormalized)
}
inline ::std::string* SuggJobData::mutable_querynormalized() {
  set_has_querynormalized();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggJobData.queryNormalized)
  return querynormalized_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggJobData::release_querynormalized() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggJobData.queryNormalized)
  clear_has_querynormalized();
  return querynormalized_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggJobData::set_allocated_querynormalized(::std::string* querynormalized) {
  if (querynormalized != NULL) {
    set_has_querynormalized();
  } else {
    clear_has_querynormalized();
  }
  querynormalized_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), querynormalized);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggJobData.queryNormalized)
}

// optional uint32 geo = 3;
inline bool SuggJobData::has_geo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SuggJobData::set_has_geo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SuggJobData::clear_has_geo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SuggJobData::clear_geo() {
  geo_ = 0u;
  clear_has_geo();
}
inline ::google::protobuf::uint32 SuggJobData::geo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.geo)
  return geo_;
}
inline void SuggJobData::set_geo(::google::protobuf::uint32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.geo)
}

// optional string referer = 25;
inline bool SuggJobData::has_referer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuggJobData::set_has_referer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuggJobData::clear_has_referer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuggJobData::clear_referer() {
  referer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_referer();
}
inline const ::std::string& SuggJobData::referer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.referer)
  return referer_.GetNoArena();
}
inline void SuggJobData::set_referer(const ::std::string& value) {
  set_has_referer();
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.referer)
}
#if LANG_CXX11
inline void SuggJobData::set_referer(::std::string&& value) {
  set_has_referer();
  referer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggJobData.referer)
}
#endif
inline void SuggJobData::set_referer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_referer();
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggJobData.referer)
}
inline void SuggJobData::set_referer(const char* value, size_t size) {
  set_has_referer();
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggJobData.referer)
}
inline ::std::string* SuggJobData::mutable_referer() {
  set_has_referer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggJobData.referer)
  return referer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggJobData::release_referer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggJobData.referer)
  clear_has_referer();
  return referer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggJobData::set_allocated_referer(::std::string* referer) {
  if (referer != NULL) {
    set_has_referer();
  } else {
    clear_has_referer();
  }
  referer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggJobData.referer)
}

// optional uint64 timeStampMin = 4;
inline bool SuggJobData::has_timestampmin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SuggJobData::set_has_timestampmin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SuggJobData::clear_has_timestampmin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SuggJobData::clear_timestampmin() {
  timestampmin_ = GOOGLE_ULONGLONG(0);
  clear_has_timestampmin();
}
inline ::google::protobuf::uint64 SuggJobData::timestampmin() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.timeStampMin)
  return timestampmin_;
}
inline void SuggJobData::set_timestampmin(::google::protobuf::uint64 value) {
  set_has_timestampmin();
  timestampmin_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.timeStampMin)
}

// optional uint64 timeStampMax = 5;
inline bool SuggJobData::has_timestampmax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SuggJobData::set_has_timestampmax() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SuggJobData::clear_has_timestampmax() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SuggJobData::clear_timestampmax() {
  timestampmax_ = GOOGLE_ULONGLONG(0);
  clear_has_timestampmax();
}
inline ::google::protobuf::uint64 SuggJobData::timestampmax() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.timeStampMax)
  return timestampmax_;
}
inline void SuggJobData::set_timestampmax(::google::protobuf::uint64 value) {
  set_has_timestampmax();
  timestampmax_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.timeStampMax)
}

// optional uint64 timeStampSumm = 6;
inline bool SuggJobData::has_timestampsumm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SuggJobData::set_has_timestampsumm() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SuggJobData::clear_has_timestampsumm() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SuggJobData::clear_timestampsumm() {
  timestampsumm_ = GOOGLE_ULONGLONG(0);
  clear_has_timestampsumm();
}
inline ::google::protobuf::uint64 SuggJobData::timestampsumm() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.timeStampSumm)
  return timestampsumm_;
}
inline void SuggJobData::set_timestampsumm(::google::protobuf::uint64 value) {
  set_has_timestampsumm();
  timestampsumm_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.timeStampSumm)
}

// optional uint32 uniqsUpper = 7;
inline bool SuggJobData::has_uniqsupper() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SuggJobData::set_has_uniqsupper() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SuggJobData::clear_has_uniqsupper() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SuggJobData::clear_uniqsupper() {
  uniqsupper_ = 0u;
  clear_has_uniqsupper();
}
inline ::google::protobuf::uint32 SuggJobData::uniqsupper() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.uniqsUpper)
  return uniqsupper_;
}
inline void SuggJobData::set_uniqsupper(::google::protobuf::uint32 value) {
  set_has_uniqsupper();
  uniqsupper_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.uniqsUpper)
}

// optional uint32 uniqsRobot = 21;
inline bool SuggJobData::has_uniqsrobot() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SuggJobData::set_has_uniqsrobot() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SuggJobData::clear_has_uniqsrobot() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SuggJobData::clear_uniqsrobot() {
  uniqsrobot_ = 0u;
  clear_has_uniqsrobot();
}
inline ::google::protobuf::uint32 SuggJobData::uniqsrobot() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.uniqsRobot)
  return uniqsrobot_;
}
inline void SuggJobData::set_uniqsrobot(::google::protobuf::uint32 value) {
  set_has_uniqsrobot();
  uniqsrobot_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.uniqsRobot)
}

// optional .ru.mail.go.webbase.SputnikRanker.UserRankValues uniqsLower = 8;
inline bool SuggJobData::has_uniqslower() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SuggJobData::set_has_uniqslower() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SuggJobData::clear_has_uniqslower() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SuggJobData::clear_uniqslower() {
  if (uniqslower_ != NULL) uniqslower_->::ru::mail::go::webbase::SputnikRanker::UserRankValues::Clear();
  clear_has_uniqslower();
}
inline const ::ru::mail::go::webbase::SputnikRanker::UserRankValues& SuggJobData::uniqslower() const {
  const ::ru::mail::go::webbase::SputnikRanker::UserRankValues* p = uniqslower_;
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.uniqsLower)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::SputnikRanker::UserRankValues*>(
      &::ru::mail::go::webbase::SputnikRanker::_UserRankValues_default_instance_);
}
inline ::ru::mail::go::webbase::SputnikRanker::UserRankValues* SuggJobData::mutable_uniqslower() {
  set_has_uniqslower();
  if (uniqslower_ == NULL) {
    uniqslower_ = new ::ru::mail::go::webbase::SputnikRanker::UserRankValues;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggJobData.uniqsLower)
  return uniqslower_;
}
inline ::ru::mail::go::webbase::SputnikRanker::UserRankValues* SuggJobData::release_uniqslower() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggJobData.uniqsLower)
  clear_has_uniqslower();
  ::ru::mail::go::webbase::SputnikRanker::UserRankValues* temp = uniqslower_;
  uniqslower_ = NULL;
  return temp;
}
inline void SuggJobData::set_allocated_uniqslower(::ru::mail::go::webbase::SputnikRanker::UserRankValues* uniqslower) {
  delete uniqslower_;
  uniqslower_ = uniqslower;
  if (uniqslower) {
    set_has_uniqslower();
  } else {
    clear_has_uniqslower();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggJobData.uniqsLower)
}

// repeated .ru.mail.go.sugg.indexer.Query queries = 9;
inline int SuggJobData::queries_size() const {
  return queries_.size();
}
inline void SuggJobData::clear_queries() {
  queries_.Clear();
}
inline const ::ru::mail::go::sugg::indexer::Query& SuggJobData::queries(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.queries)
  return queries_.Get(index);
}
inline ::ru::mail::go::sugg::indexer::Query* SuggJobData::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggJobData.queries)
  return queries_.Mutable(index);
}
inline ::ru::mail::go::sugg::indexer::Query* SuggJobData::add_queries() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggJobData.queries)
  return queries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::Query >*
SuggJobData::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggJobData.queries)
  return &queries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::Query >&
SuggJobData::queries() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggJobData.queries)
  return queries_;
}

// optional double pornoProb = 26;
inline bool SuggJobData::has_pornoprob() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SuggJobData::set_has_pornoprob() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SuggJobData::clear_has_pornoprob() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SuggJobData::clear_pornoprob() {
  pornoprob_ = 0;
  clear_has_pornoprob();
}
inline double SuggJobData::pornoprob() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.pornoProb)
  return pornoprob_;
}
inline void SuggJobData::set_pornoprob(double value) {
  set_has_pornoprob();
  pornoprob_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.pornoProb)
}

// optional uint32 numPornoProbHigh = 27;
inline bool SuggJobData::has_numpornoprobhigh() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SuggJobData::set_has_numpornoprobhigh() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SuggJobData::clear_has_numpornoprobhigh() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SuggJobData::clear_numpornoprobhigh() {
  numpornoprobhigh_ = 0u;
  clear_has_numpornoprobhigh();
}
inline ::google::protobuf::uint32 SuggJobData::numpornoprobhigh() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numPornoProbHigh)
  return numpornoprobhigh_;
}
inline void SuggJobData::set_numpornoprobhigh(::google::protobuf::uint32 value) {
  set_has_numpornoprobhigh();
  numpornoprobhigh_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numPornoProbHigh)
}

// optional uint32 numPornoProbLow = 28;
inline bool SuggJobData::has_numpornoproblow() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SuggJobData::set_has_numpornoproblow() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SuggJobData::clear_has_numpornoproblow() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SuggJobData::clear_numpornoproblow() {
  numpornoproblow_ = 0u;
  clear_has_numpornoproblow();
}
inline ::google::protobuf::uint32 SuggJobData::numpornoproblow() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numPornoProbLow)
  return numpornoproblow_;
}
inline void SuggJobData::set_numpornoproblow(::google::protobuf::uint32 value) {
  set_has_numpornoproblow();
  numpornoproblow_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numPornoProbLow)
}

// optional uint32 numSessions = 10;
inline bool SuggJobData::has_numsessions() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SuggJobData::set_has_numsessions() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SuggJobData::clear_has_numsessions() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SuggJobData::clear_numsessions() {
  numsessions_ = 0u;
  clear_has_numsessions();
}
inline ::google::protobuf::uint32 SuggJobData::numsessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numSessions)
  return numsessions_;
}
inline void SuggJobData::set_numsessions(::google::protobuf::uint32 value) {
  set_has_numsessions();
  numsessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numSessions)
}

// optional uint32 numPorno = 11;
inline bool SuggJobData::has_numporno() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SuggJobData::set_has_numporno() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SuggJobData::clear_has_numporno() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SuggJobData::clear_numporno() {
  numporno_ = 0u;
  clear_has_numporno();
}
inline ::google::protobuf::uint32 SuggJobData::numporno() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numPorno)
  return numporno_;
}
inline void SuggJobData::set_numporno(::google::protobuf::uint32 value) {
  set_has_numporno();
  numporno_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numPorno)
}

// optional uint32 numRobot = 12;
inline bool SuggJobData::has_numrobot() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SuggJobData::set_has_numrobot() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SuggJobData::clear_has_numrobot() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SuggJobData::clear_numrobot() {
  numrobot_ = 0u;
  clear_has_numrobot();
}
inline ::google::protobuf::uint32 SuggJobData::numrobot() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numRobot)
  return numrobot_;
}
inline void SuggJobData::set_numrobot(::google::protobuf::uint32 value) {
  set_has_numrobot();
  numrobot_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numRobot)
}

// optional uint32 numMusic = 13;
inline bool SuggJobData::has_nummusic() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SuggJobData::set_has_nummusic() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SuggJobData::clear_has_nummusic() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SuggJobData::clear_nummusic() {
  nummusic_ = 0u;
  clear_has_nummusic();
}
inline ::google::protobuf::uint32 SuggJobData::nummusic() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numMusic)
  return nummusic_;
}
inline void SuggJobData::set_nummusic(::google::protobuf::uint32 value) {
  set_has_nummusic();
  nummusic_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numMusic)
}

// optional uint32 numFromSugg = 14;
inline bool SuggJobData::has_numfromsugg() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SuggJobData::set_has_numfromsugg() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SuggJobData::clear_has_numfromsugg() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SuggJobData::clear_numfromsugg() {
  numfromsugg_ = 0u;
  clear_has_numfromsugg();
}
inline ::google::protobuf::uint32 SuggJobData::numfromsugg() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numFromSugg)
  return numfromsugg_;
}
inline void SuggJobData::set_numfromsugg(::google::protobuf::uint32 value) {
  set_has_numfromsugg();
  numfromsugg_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numFromSugg)
}

// optional uint32 numSerpClicks = 15;
inline bool SuggJobData::has_numserpclicks() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SuggJobData::set_has_numserpclicks() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SuggJobData::clear_has_numserpclicks() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SuggJobData::clear_numserpclicks() {
  numserpclicks_ = 0u;
  clear_has_numserpclicks();
}
inline ::google::protobuf::uint32 SuggJobData::numserpclicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numSerpClicks)
  return numserpclicks_;
}
inline void SuggJobData::set_numserpclicks(::google::protobuf::uint32 value) {
  set_has_numserpclicks();
  numserpclicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numSerpClicks)
}

// optional uint32 numSpcBanned = 16;
inline bool SuggJobData::has_numspcbanned() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SuggJobData::set_has_numspcbanned() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SuggJobData::clear_has_numspcbanned() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SuggJobData::clear_numspcbanned() {
  numspcbanned_ = 0u;
  clear_has_numspcbanned();
}
inline ::google::protobuf::uint32 SuggJobData::numspcbanned() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numSpcBanned)
  return numspcbanned_;
}
inline void SuggJobData::set_numspcbanned(::google::protobuf::uint32 value) {
  set_has_numspcbanned();
  numspcbanned_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numSpcBanned)
}

// optional uint64 summSerpCount = 17;
inline bool SuggJobData::has_summserpcount() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SuggJobData::set_has_summserpcount() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SuggJobData::clear_has_summserpcount() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SuggJobData::clear_summserpcount() {
  summserpcount_ = GOOGLE_ULONGLONG(0);
  clear_has_summserpcount();
}
inline ::google::protobuf::uint64 SuggJobData::summserpcount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.summSerpCount)
  return summserpcount_;
}
inline void SuggJobData::set_summserpcount(::google::protobuf::uint64 value) {
  set_has_summserpcount();
  summserpcount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.summSerpCount)
}

// optional uint64 summSerpCountSessions = 18;
inline bool SuggJobData::has_summserpcountsessions() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SuggJobData::set_has_summserpcountsessions() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SuggJobData::clear_has_summserpcountsessions() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SuggJobData::clear_summserpcountsessions() {
  summserpcountsessions_ = GOOGLE_ULONGLONG(0);
  clear_has_summserpcountsessions();
}
inline ::google::protobuf::uint64 SuggJobData::summserpcountsessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.summSerpCountSessions)
  return summserpcountsessions_;
}
inline void SuggJobData::set_summserpcountsessions(::google::protobuf::uint64 value) {
  set_has_summserpcountsessions();
  summserpcountsessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.summSerpCountSessions)
}

// optional uint64 dateTime = 19;
inline bool SuggJobData::has_datetime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SuggJobData::set_has_datetime() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SuggJobData::clear_has_datetime() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SuggJobData::clear_datetime() {
  datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_datetime();
}
inline ::google::protobuf::uint64 SuggJobData::datetime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.dateTime)
  return datetime_;
}
inline void SuggJobData::set_datetime(::google::protobuf::uint64 value) {
  set_has_datetime();
  datetime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.dateTime)
}

// optional double freshness = 20;
inline bool SuggJobData::has_freshness() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SuggJobData::set_has_freshness() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SuggJobData::clear_has_freshness() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SuggJobData::clear_freshness() {
  freshness_ = 0;
  clear_has_freshness();
}
inline double SuggJobData::freshness() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.freshness)
  return freshness_;
}
inline void SuggJobData::set_freshness(double value) {
  set_has_freshness();
  freshness_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.freshness)
}

// repeated string richObjs = 22;
inline int SuggJobData::richobjs_size() const {
  return richobjs_.size();
}
inline void SuggJobData::clear_richobjs() {
  richobjs_.Clear();
}
inline const ::std::string& SuggJobData::richobjs(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
  return richobjs_.Get(index);
}
inline ::std::string* SuggJobData::mutable_richobjs(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
  return richobjs_.Mutable(index);
}
inline void SuggJobData::set_richobjs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
  richobjs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SuggJobData::set_richobjs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
  richobjs_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SuggJobData::set_richobjs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  richobjs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
}
inline void SuggJobData::set_richobjs(int index, const char* value, size_t size) {
  richobjs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
}
inline ::std::string* SuggJobData::add_richobjs() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
  return richobjs_.Add();
}
inline void SuggJobData::add_richobjs(const ::std::string& value) {
  richobjs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
}
#if LANG_CXX11
inline void SuggJobData::add_richobjs(::std::string&& value) {
  richobjs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
}
#endif
inline void SuggJobData::add_richobjs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  richobjs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
}
inline void SuggJobData::add_richobjs(const char* value, size_t size) {
  richobjs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SuggJobData::richobjs() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
  return richobjs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SuggJobData::mutable_richobjs() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
  return &richobjs_;
}

// repeated .ru.mail.go.sugg.indexer.RichObjStat richObjsStat = 23;
inline int SuggJobData::richobjsstat_size() const {
  return richobjsstat_.size();
}
inline void SuggJobData::clear_richobjsstat() {
  richobjsstat_.Clear();
}
inline const ::ru::mail::go::sugg::indexer::RichObjStat& SuggJobData::richobjsstat(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.richObjsStat)
  return richobjsstat_.Get(index);
}
inline ::ru::mail::go::sugg::indexer::RichObjStat* SuggJobData::mutable_richobjsstat(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggJobData.richObjsStat)
  return richobjsstat_.Mutable(index);
}
inline ::ru::mail::go::sugg::indexer::RichObjStat* SuggJobData::add_richobjsstat() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggJobData.richObjsStat)
  return richobjsstat_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::RichObjStat >*
SuggJobData::mutable_richobjsstat() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggJobData.richObjsStat)
  return &richobjsstat_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::RichObjStat >&
SuggJobData::richobjsstat() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggJobData.richObjsStat)
  return richobjsstat_;
}

// repeated .ru.mail.go.sugg.indexer.SpcFix spcFixStat = 24;
inline int SuggJobData::spcfixstat_size() const {
  return spcfixstat_.size();
}
inline void SuggJobData::clear_spcfixstat() {
  spcfixstat_.Clear();
}
inline const ::ru::mail::go::sugg::indexer::SpcFix& SuggJobData::spcfixstat(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.spcFixStat)
  return spcfixstat_.Get(index);
}
inline ::ru::mail::go::sugg::indexer::SpcFix* SuggJobData::mutable_spcfixstat(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggJobData.spcFixStat)
  return spcfixstat_.Mutable(index);
}
inline ::ru::mail::go::sugg::indexer::SpcFix* SuggJobData::add_spcfixstat() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggJobData.spcFixStat)
  return spcfixstat_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SpcFix >*
SuggJobData::mutable_spcfixstat() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggJobData.spcFixStat)
  return &spcfixstat_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SpcFix >&
SuggJobData::spcfixstat() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggJobData.spcFixStat)
  return spcfixstat_;
}

// -------------------------------------------------------------------

// FeatureEntry

// optional string name = 1;
inline bool FeatureEntry::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureEntry::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FeatureEntry::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.FeatureEntry.name)
  return name_.GetNoArena();
}
inline void FeatureEntry::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.FeatureEntry.name)
}
#if LANG_CXX11
inline void FeatureEntry::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.FeatureEntry.name)
}
#endif
inline void FeatureEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.FeatureEntry.name)
}
inline void FeatureEntry::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.FeatureEntry.name)
}
inline ::std::string* FeatureEntry::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.FeatureEntry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeatureEntry::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.FeatureEntry.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.FeatureEntry.name)
}

// optional double value = 2;
inline bool FeatureEntry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeatureEntry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeatureEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeatureEntry::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double FeatureEntry::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.FeatureEntry.value)
  return value_;
}
inline void FeatureEntry::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.FeatureEntry.value)
}

// -------------------------------------------------------------------

// SuggSiteResult

// optional string url = 1;
inline bool SuggSiteResult::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggSiteResult::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuggSiteResult::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuggSiteResult::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& SuggSiteResult::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggSiteResult.url)
  return url_.GetNoArena();
}
inline void SuggSiteResult::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggSiteResult.url)
}
#if LANG_CXX11
inline void SuggSiteResult::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggSiteResult.url)
}
#endif
inline void SuggSiteResult::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggSiteResult.url)
}
inline void SuggSiteResult::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggSiteResult.url)
}
inline ::std::string* SuggSiteResult::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggSiteResult.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggSiteResult::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggSiteResult.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggSiteResult::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggSiteResult.url)
}

// optional string title = 2;
inline bool SuggSiteResult::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuggSiteResult::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuggSiteResult::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuggSiteResult::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& SuggSiteResult::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggSiteResult.title)
  return title_.GetNoArena();
}
inline void SuggSiteResult::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggSiteResult.title)
}
#if LANG_CXX11
inline void SuggSiteResult::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggSiteResult.title)
}
#endif
inline void SuggSiteResult::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggSiteResult.title)
}
inline void SuggSiteResult::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggSiteResult.title)
}
inline ::std::string* SuggSiteResult::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggSiteResult.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggSiteResult::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggSiteResult.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggSiteResult::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggSiteResult.title)
}

// optional string query = 3;
inline bool SuggSiteResult::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuggSiteResult::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuggSiteResult::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuggSiteResult::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& SuggSiteResult::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggSiteResult.query)
  return query_.GetNoArena();
}
inline void SuggSiteResult::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggSiteResult.query)
}
#if LANG_CXX11
inline void SuggSiteResult::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggSiteResult.query)
}
#endif
inline void SuggSiteResult::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggSiteResult.query)
}
inline void SuggSiteResult::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggSiteResult.query)
}
inline ::std::string* SuggSiteResult::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggSiteResult.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggSiteResult::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggSiteResult.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggSiteResult::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggSiteResult.query)
}

// optional string favicon = 4;
inline bool SuggSiteResult::has_favicon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SuggSiteResult::set_has_favicon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SuggSiteResult::clear_has_favicon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SuggSiteResult::clear_favicon() {
  favicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_favicon();
}
inline const ::std::string& SuggSiteResult::favicon() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggSiteResult.favicon)
  return favicon_.GetNoArena();
}
inline void SuggSiteResult::set_favicon(const ::std::string& value) {
  set_has_favicon();
  favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggSiteResult.favicon)
}
#if LANG_CXX11
inline void SuggSiteResult::set_favicon(::std::string&& value) {
  set_has_favicon();
  favicon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggSiteResult.favicon)
}
#endif
inline void SuggSiteResult::set_favicon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_favicon();
  favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggSiteResult.favicon)
}
inline void SuggSiteResult::set_favicon(const char* value, size_t size) {
  set_has_favicon();
  favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggSiteResult.favicon)
}
inline ::std::string* SuggSiteResult::mutable_favicon() {
  set_has_favicon();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggSiteResult.favicon)
  return favicon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggSiteResult::release_favicon() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggSiteResult.favicon)
  clear_has_favicon();
  return favicon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggSiteResult::set_allocated_favicon(::std::string* favicon) {
  if (favicon != NULL) {
    set_has_favicon();
  } else {
    clear_has_favicon();
  }
  favicon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggSiteResult.favicon)
}

// optional bool is_nail = 5;
inline bool SuggSiteResult::has_is_nail() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SuggSiteResult::set_has_is_nail() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SuggSiteResult::clear_has_is_nail() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SuggSiteResult::clear_is_nail() {
  is_nail_ = false;
  clear_has_is_nail();
}
inline bool SuggSiteResult::is_nail() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggSiteResult.is_nail)
  return is_nail_;
}
inline void SuggSiteResult::set_is_nail(bool value) {
  set_has_is_nail();
  is_nail_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggSiteResult.is_nail)
}

// -------------------------------------------------------------------

// SuggQueryResult_AmigoMusicResult

// optional string artist = 1;
inline bool SuggQueryResult_AmigoMusicResult::has_artist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggQueryResult_AmigoMusicResult::set_has_artist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuggQueryResult_AmigoMusicResult::clear_has_artist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuggQueryResult_AmigoMusicResult::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_artist();
}
inline const ::std::string& SuggQueryResult_AmigoMusicResult::artist() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist)
  return artist_.GetNoArena();
}
inline void SuggQueryResult_AmigoMusicResult::set_artist(const ::std::string& value) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist)
}
#if LANG_CXX11
inline void SuggQueryResult_AmigoMusicResult::set_artist(::std::string&& value) {
  set_has_artist();
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist)
}
#endif
inline void SuggQueryResult_AmigoMusicResult::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist)
}
inline void SuggQueryResult_AmigoMusicResult::set_artist(const char* value, size_t size) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist)
}
inline ::std::string* SuggQueryResult_AmigoMusicResult::mutable_artist() {
  set_has_artist();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggQueryResult_AmigoMusicResult::release_artist() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist)
  clear_has_artist();
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggQueryResult_AmigoMusicResult::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    set_has_artist();
  } else {
    clear_has_artist();
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist)
}

// optional string album = 2;
inline bool SuggQueryResult_AmigoMusicResult::has_album() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuggQueryResult_AmigoMusicResult::set_has_album() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuggQueryResult_AmigoMusicResult::clear_has_album() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuggQueryResult_AmigoMusicResult::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_album();
}
inline const ::std::string& SuggQueryResult_AmigoMusicResult::album() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album)
  return album_.GetNoArena();
}
inline void SuggQueryResult_AmigoMusicResult::set_album(const ::std::string& value) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album)
}
#if LANG_CXX11
inline void SuggQueryResult_AmigoMusicResult::set_album(::std::string&& value) {
  set_has_album();
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album)
}
#endif
inline void SuggQueryResult_AmigoMusicResult::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album)
}
inline void SuggQueryResult_AmigoMusicResult::set_album(const char* value, size_t size) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album)
}
inline ::std::string* SuggQueryResult_AmigoMusicResult::mutable_album() {
  set_has_album();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggQueryResult_AmigoMusicResult::release_album() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album)
  clear_has_album();
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggQueryResult_AmigoMusicResult::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    set_has_album();
  } else {
    clear_has_album();
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album)
}

// optional string track = 3;
inline bool SuggQueryResult_AmigoMusicResult::has_track() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuggQueryResult_AmigoMusicResult::set_has_track() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuggQueryResult_AmigoMusicResult::clear_has_track() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuggQueryResult_AmigoMusicResult::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track();
}
inline const ::std::string& SuggQueryResult_AmigoMusicResult::track() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track)
  return track_.GetNoArena();
}
inline void SuggQueryResult_AmigoMusicResult::set_track(const ::std::string& value) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track)
}
#if LANG_CXX11
inline void SuggQueryResult_AmigoMusicResult::set_track(::std::string&& value) {
  set_has_track();
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track)
}
#endif
inline void SuggQueryResult_AmigoMusicResult::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track)
}
inline void SuggQueryResult_AmigoMusicResult::set_track(const char* value, size_t size) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track)
}
inline ::std::string* SuggQueryResult_AmigoMusicResult::mutable_track() {
  set_has_track();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggQueryResult_AmigoMusicResult::release_track() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track)
  clear_has_track();
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggQueryResult_AmigoMusicResult::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    set_has_track();
  } else {
    clear_has_track();
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track)
}

// -------------------------------------------------------------------

// SuggQueryResult_MatchedPair

// required uint32 begin_pos = 1;
inline bool SuggQueryResult_MatchedPair::has_begin_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggQueryResult_MatchedPair::set_has_begin_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuggQueryResult_MatchedPair::clear_has_begin_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuggQueryResult_MatchedPair::clear_begin_pos() {
  begin_pos_ = 0u;
  clear_has_begin_pos();
}
inline ::google::protobuf::uint32 SuggQueryResult_MatchedPair::begin_pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair.begin_pos)
  return begin_pos_;
}
inline void SuggQueryResult_MatchedPair::set_begin_pos(::google::protobuf::uint32 value) {
  set_has_begin_pos();
  begin_pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair.begin_pos)
}

// required uint32 end_pos = 2;
inline bool SuggQueryResult_MatchedPair::has_end_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuggQueryResult_MatchedPair::set_has_end_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuggQueryResult_MatchedPair::clear_has_end_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuggQueryResult_MatchedPair::clear_end_pos() {
  end_pos_ = 0u;
  clear_has_end_pos();
}
inline ::google::protobuf::uint32 SuggQueryResult_MatchedPair::end_pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair.end_pos)
  return end_pos_;
}
inline void SuggQueryResult_MatchedPair::set_end_pos(::google::protobuf::uint32 value) {
  set_has_end_pos();
  end_pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair.end_pos)
}

// -------------------------------------------------------------------

// SuggQueryResult

// optional string text = 1;
inline bool SuggQueryResult::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggQueryResult::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuggQueryResult::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuggQueryResult::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& SuggQueryResult::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.text)
  return text_.GetNoArena();
}
inline void SuggQueryResult::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.text)
}
#if LANG_CXX11
inline void SuggQueryResult::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggQueryResult.text)
}
#endif
inline void SuggQueryResult::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggQueryResult.text)
}
inline void SuggQueryResult::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggQueryResult.text)
}
inline ::std::string* SuggQueryResult::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggQueryResult::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggQueryResult::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.text)
}

// optional .ru.mail.go.sugg.indexer.SuggQueryResult.MisspellType misspell_type = 2;
inline bool SuggQueryResult::has_misspell_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SuggQueryResult::set_has_misspell_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SuggQueryResult::clear_has_misspell_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SuggQueryResult::clear_misspell_type() {
  misspell_type_ = 0;
  clear_has_misspell_type();
}
inline ::ru::mail::go::sugg::indexer::SuggQueryResult_MisspellType SuggQueryResult::misspell_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.misspell_type)
  return static_cast< ::ru::mail::go::sugg::indexer::SuggQueryResult_MisspellType >(misspell_type_);
}
inline void SuggQueryResult::set_misspell_type(::ru::mail::go::sugg::indexer::SuggQueryResult_MisspellType value) {
  assert(::ru::mail::go::sugg::indexer::SuggQueryResult_MisspellType_IsValid(value));
  set_has_misspell_type();
  misspell_type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.misspell_type)
}

// optional bool is_music = 3;
inline bool SuggQueryResult::has_is_music() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SuggQueryResult::set_has_is_music() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SuggQueryResult::clear_has_is_music() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SuggQueryResult::clear_is_music() {
  is_music_ = false;
  clear_has_is_music();
}
inline bool SuggQueryResult::is_music() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.is_music)
  return is_music_;
}
inline void SuggQueryResult::set_is_music(bool value) {
  set_has_is_music();
  is_music_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.is_music)
}

// optional bool is_autocomp = 4;
inline bool SuggQueryResult::has_is_autocomp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SuggQueryResult::set_has_is_autocomp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SuggQueryResult::clear_has_is_autocomp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SuggQueryResult::clear_is_autocomp() {
  is_autocomp_ = false;
  clear_has_is_autocomp();
}
inline bool SuggQueryResult::is_autocomp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.is_autocomp)
  return is_autocomp_;
}
inline void SuggQueryResult::set_is_autocomp(bool value) {
  set_has_is_autocomp();
  is_autocomp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.is_autocomp)
}

// optional bool is_news = 5;
inline bool SuggQueryResult::has_is_news() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SuggQueryResult::set_has_is_news() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SuggQueryResult::clear_has_is_news() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SuggQueryResult::clear_is_news() {
  is_news_ = false;
  clear_has_is_news();
}
inline bool SuggQueryResult::is_news() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.is_news)
  return is_news_;
}
inline void SuggQueryResult::set_is_news(bool value) {
  set_has_is_news();
  is_news_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.is_news)
}

// optional string rich_category = 6;
inline bool SuggQueryResult::has_rich_category() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuggQueryResult::set_has_rich_category() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuggQueryResult::clear_has_rich_category() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuggQueryResult::clear_rich_category() {
  rich_category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rich_category();
}
inline const ::std::string& SuggQueryResult::rich_category() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category)
  return rich_category_.GetNoArena();
}
inline void SuggQueryResult::set_rich_category(const ::std::string& value) {
  set_has_rich_category();
  rich_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category)
}
#if LANG_CXX11
inline void SuggQueryResult::set_rich_category(::std::string&& value) {
  set_has_rich_category();
  rich_category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category)
}
#endif
inline void SuggQueryResult::set_rich_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rich_category();
  rich_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category)
}
inline void SuggQueryResult::set_rich_category(const char* value, size_t size) {
  set_has_rich_category();
  rich_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category)
}
inline ::std::string* SuggQueryResult::mutable_rich_category() {
  set_has_rich_category();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category)
  return rich_category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggQueryResult::release_rich_category() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category)
  clear_has_rich_category();
  return rich_category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggQueryResult::set_allocated_rich_category(::std::string* rich_category) {
  if (rich_category != NULL) {
    set_has_rich_category();
  } else {
    clear_has_rich_category();
  }
  rich_category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rich_category);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category)
}

// optional string rich_data = 7;
inline bool SuggQueryResult::has_rich_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuggQueryResult::set_has_rich_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuggQueryResult::clear_has_rich_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuggQueryResult::clear_rich_data() {
  rich_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rich_data();
}
inline const ::std::string& SuggQueryResult::rich_data() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.rich_data)
  return rich_data_.GetNoArena();
}
inline void SuggQueryResult::set_rich_data(const ::std::string& value) {
  set_has_rich_data();
  rich_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.rich_data)
}
#if LANG_CXX11
inline void SuggQueryResult::set_rich_data(::std::string&& value) {
  set_has_rich_data();
  rich_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggQueryResult.rich_data)
}
#endif
inline void SuggQueryResult::set_rich_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rich_data();
  rich_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggQueryResult.rich_data)
}
inline void SuggQueryResult::set_rich_data(const char* value, size_t size) {
  set_has_rich_data();
  rich_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggQueryResult.rich_data)
}
inline ::std::string* SuggQueryResult::mutable_rich_data() {
  set_has_rich_data();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.rich_data)
  return rich_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggQueryResult::release_rich_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.rich_data)
  clear_has_rich_data();
  return rich_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggQueryResult::set_allocated_rich_data(::std::string* rich_data) {
  if (rich_data != NULL) {
    set_has_rich_data();
  } else {
    clear_has_rich_data();
  }
  rich_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rich_data);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.rich_data)
}

// optional .ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult amigo_music = 8;
inline bool SuggQueryResult::has_amigo_music() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SuggQueryResult::set_has_amigo_music() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SuggQueryResult::clear_has_amigo_music() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SuggQueryResult::clear_amigo_music() {
  if (amigo_music_ != NULL) amigo_music_->::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult::Clear();
  clear_has_amigo_music();
}
inline const ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult& SuggQueryResult::amigo_music() const {
  const ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult* p = amigo_music_;
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.amigo_music)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult*>(
      &::ru::mail::go::sugg::indexer::_SuggQueryResult_AmigoMusicResult_default_instance_);
}
inline ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult* SuggQueryResult::mutable_amigo_music() {
  set_has_amigo_music();
  if (amigo_music_ == NULL) {
    amigo_music_ = new ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.amigo_music)
  return amigo_music_;
}
inline ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult* SuggQueryResult::release_amigo_music() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.amigo_music)
  clear_has_amigo_music();
  ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult* temp = amigo_music_;
  amigo_music_ = NULL;
  return temp;
}
inline void SuggQueryResult::set_allocated_amigo_music(::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult* amigo_music) {
  delete amigo_music_;
  amigo_music_ = amigo_music;
  if (amigo_music) {
    set_has_amigo_music();
  } else {
    clear_has_amigo_music();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.amigo_music)
}

// repeated .ru.mail.go.sugg.indexer.FeatureEntry feature_list = 9;
inline int SuggQueryResult::feature_list_size() const {
  return feature_list_.size();
}
inline void SuggQueryResult::clear_feature_list() {
  feature_list_.Clear();
}
inline const ::ru::mail::go::sugg::indexer::FeatureEntry& SuggQueryResult::feature_list(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.feature_list)
  return feature_list_.Get(index);
}
inline ::ru::mail::go::sugg::indexer::FeatureEntry* SuggQueryResult::mutable_feature_list(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.feature_list)
  return feature_list_.Mutable(index);
}
inline ::ru::mail::go::sugg::indexer::FeatureEntry* SuggQueryResult::add_feature_list() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggQueryResult.feature_list)
  return feature_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::FeatureEntry >*
SuggQueryResult::mutable_feature_list() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggQueryResult.feature_list)
  return &feature_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::FeatureEntry >&
SuggQueryResult::feature_list() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggQueryResult.feature_list)
  return feature_list_;
}

// optional string marked_text = 10;
inline bool SuggQueryResult::has_marked_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SuggQueryResult::set_has_marked_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SuggQueryResult::clear_has_marked_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SuggQueryResult::clear_marked_text() {
  marked_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_marked_text();
}
inline const ::std::string& SuggQueryResult::marked_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.marked_text)
  return marked_text_.GetNoArena();
}
inline void SuggQueryResult::set_marked_text(const ::std::string& value) {
  set_has_marked_text();
  marked_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.marked_text)
}
#if LANG_CXX11
inline void SuggQueryResult::set_marked_text(::std::string&& value) {
  set_has_marked_text();
  marked_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggQueryResult.marked_text)
}
#endif
inline void SuggQueryResult::set_marked_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_marked_text();
  marked_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggQueryResult.marked_text)
}
inline void SuggQueryResult::set_marked_text(const char* value, size_t size) {
  set_has_marked_text();
  marked_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggQueryResult.marked_text)
}
inline ::std::string* SuggQueryResult::mutable_marked_text() {
  set_has_marked_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.marked_text)
  return marked_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggQueryResult::release_marked_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.marked_text)
  clear_has_marked_text();
  return marked_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggQueryResult::set_allocated_marked_text(::std::string* marked_text) {
  if (marked_text != NULL) {
    set_has_marked_text();
  } else {
    clear_has_marked_text();
  }
  marked_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marked_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.marked_text)
}

// optional uint32 freq = 11;
inline bool SuggQueryResult::has_freq() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SuggQueryResult::set_has_freq() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SuggQueryResult::clear_has_freq() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SuggQueryResult::clear_freq() {
  freq_ = 0u;
  clear_has_freq();
}
inline ::google::protobuf::uint32 SuggQueryResult::freq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.freq)
  return freq_;
}
inline void SuggQueryResult::set_freq(::google::protobuf::uint32 value) {
  set_has_freq();
  freq_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.freq)
}

// optional float weight = 12;
inline bool SuggQueryResult::has_weight() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SuggQueryResult::set_has_weight() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SuggQueryResult::clear_has_weight() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SuggQueryResult::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float SuggQueryResult::weight() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.weight)
  return weight_;
}
inline void SuggQueryResult::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.weight)
}

// optional bool exact_match = 13;
inline bool SuggQueryResult::has_exact_match() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SuggQueryResult::set_has_exact_match() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SuggQueryResult::clear_has_exact_match() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SuggQueryResult::clear_exact_match() {
  exact_match_ = false;
  clear_has_exact_match();
}
inline bool SuggQueryResult::exact_match() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.exact_match)
  return exact_match_;
}
inline void SuggQueryResult::set_exact_match(bool value) {
  set_has_exact_match();
  exact_match_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.exact_match)
}

// optional uint32 geo_country_freq = 14;
inline bool SuggQueryResult::has_geo_country_freq() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SuggQueryResult::set_has_geo_country_freq() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SuggQueryResult::clear_has_geo_country_freq() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SuggQueryResult::clear_geo_country_freq() {
  geo_country_freq_ = 0u;
  clear_has_geo_country_freq();
}
inline ::google::protobuf::uint32 SuggQueryResult::geo_country_freq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.geo_country_freq)
  return geo_country_freq_;
}
inline void SuggQueryResult::set_geo_country_freq(::google::protobuf::uint32 value) {
  set_has_geo_country_freq();
  geo_country_freq_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.geo_country_freq)
}

// optional uint32 geo_region_freq = 15;
inline bool SuggQueryResult::has_geo_region_freq() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SuggQueryResult::set_has_geo_region_freq() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SuggQueryResult::clear_has_geo_region_freq() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SuggQueryResult::clear_geo_region_freq() {
  geo_region_freq_ = 0u;
  clear_has_geo_region_freq();
}
inline ::google::protobuf::uint32 SuggQueryResult::geo_region_freq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.geo_region_freq)
  return geo_region_freq_;
}
inline void SuggQueryResult::set_geo_region_freq(::google::protobuf::uint32 value) {
  set_has_geo_region_freq();
  geo_region_freq_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.geo_region_freq)
}

// optional float log_prob = 16;
inline bool SuggQueryResult::has_log_prob() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SuggQueryResult::set_has_log_prob() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SuggQueryResult::clear_has_log_prob() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SuggQueryResult::clear_log_prob() {
  log_prob_ = 0;
  clear_has_log_prob();
}
inline float SuggQueryResult::log_prob() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.log_prob)
  return log_prob_;
}
inline void SuggQueryResult::set_log_prob(float value) {
  set_has_log_prob();
  log_prob_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.log_prob)
}

// optional .ru.mail.go.sugg.indexer.SuggSiteResult site = 17;
inline bool SuggQueryResult::has_site() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SuggQueryResult::set_has_site() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SuggQueryResult::clear_has_site() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SuggQueryResult::clear_site() {
  if (site_ != NULL) site_->::ru::mail::go::sugg::indexer::SuggSiteResult::Clear();
  clear_has_site();
}
inline const ::ru::mail::go::sugg::indexer::SuggSiteResult& SuggQueryResult::site() const {
  const ::ru::mail::go::sugg::indexer::SuggSiteResult* p = site_;
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.site)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::sugg::indexer::SuggSiteResult*>(
      &::ru::mail::go::sugg::indexer::_SuggSiteResult_default_instance_);
}
inline ::ru::mail::go::sugg::indexer::SuggSiteResult* SuggQueryResult::mutable_site() {
  set_has_site();
  if (site_ == NULL) {
    site_ = new ::ru::mail::go::sugg::indexer::SuggSiteResult;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.site)
  return site_;
}
inline ::ru::mail::go::sugg::indexer::SuggSiteResult* SuggQueryResult::release_site() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.site)
  clear_has_site();
  ::ru::mail::go::sugg::indexer::SuggSiteResult* temp = site_;
  site_ = NULL;
  return temp;
}
inline void SuggQueryResult::set_allocated_site(::ru::mail::go::sugg::indexer::SuggSiteResult* site) {
  delete site_;
  site_ = site;
  if (site) {
    set_has_site();
  } else {
    clear_has_site();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.site)
}

// optional uint32 rich_category_type = 18;
inline bool SuggQueryResult::has_rich_category_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SuggQueryResult::set_has_rich_category_type() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SuggQueryResult::clear_has_rich_category_type() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SuggQueryResult::clear_rich_category_type() {
  rich_category_type_ = 0u;
  clear_has_rich_category_type();
}
inline ::google::protobuf::uint32 SuggQueryResult::rich_category_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category_type)
  return rich_category_type_;
}
inline void SuggQueryResult::set_rich_category_type(::google::protobuf::uint32 value) {
  set_has_rich_category_type();
  rich_category_type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category_type)
}

// repeated .ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair matched_ranges = 19;
inline int SuggQueryResult::matched_ranges_size() const {
  return matched_ranges_.size();
}
inline void SuggQueryResult::clear_matched_ranges() {
  matched_ranges_.Clear();
}
inline const ::ru::mail::go::sugg::indexer::SuggQueryResult_MatchedPair& SuggQueryResult::matched_ranges(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.matched_ranges)
  return matched_ranges_.Get(index);
}
inline ::ru::mail::go::sugg::indexer::SuggQueryResult_MatchedPair* SuggQueryResult::mutable_matched_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.matched_ranges)
  return matched_ranges_.Mutable(index);
}
inline ::ru::mail::go::sugg::indexer::SuggQueryResult_MatchedPair* SuggQueryResult::add_matched_ranges() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggQueryResult.matched_ranges)
  return matched_ranges_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggQueryResult_MatchedPair >*
SuggQueryResult::mutable_matched_ranges() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggQueryResult.matched_ranges)
  return &matched_ranges_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggQueryResult_MatchedPair >&
SuggQueryResult::matched_ranges() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggQueryResult.matched_ranges)
  return matched_ranges_;
}

// -------------------------------------------------------------------

// SuggWnfEntry

// optional string tag = 3;
inline bool SuggWnfEntry::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuggWnfEntry::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuggWnfEntry::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuggWnfEntry::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& SuggWnfEntry::tag() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggWnfEntry.tag)
  return tag_.GetNoArena();
}
inline void SuggWnfEntry::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggWnfEntry.tag)
}
#if LANG_CXX11
inline void SuggWnfEntry::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggWnfEntry.tag)
}
#endif
inline void SuggWnfEntry::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggWnfEntry.tag)
}
inline void SuggWnfEntry::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggWnfEntry.tag)
}
inline ::std::string* SuggWnfEntry::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggWnfEntry.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggWnfEntry::release_tag() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggWnfEntry.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggWnfEntry::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggWnfEntry.tag)
}

// optional bool verdict = 1;
inline bool SuggWnfEntry::has_verdict() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuggWnfEntry::set_has_verdict() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuggWnfEntry::clear_has_verdict() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuggWnfEntry::clear_verdict() {
  verdict_ = false;
  clear_has_verdict();
}
inline bool SuggWnfEntry::verdict() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggWnfEntry.verdict)
  return verdict_;
}
inline void SuggWnfEntry::set_verdict(bool value) {
  set_has_verdict();
  verdict_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggWnfEntry.verdict)
}

// optional string comment = 2;
inline bool SuggWnfEntry::has_comment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggWnfEntry::set_has_comment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuggWnfEntry::clear_has_comment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuggWnfEntry::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
inline const ::std::string& SuggWnfEntry::comment() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggWnfEntry.comment)
  return comment_.GetNoArena();
}
inline void SuggWnfEntry::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggWnfEntry.comment)
}
#if LANG_CXX11
inline void SuggWnfEntry::set_comment(::std::string&& value) {
  set_has_comment();
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggWnfEntry.comment)
}
#endif
inline void SuggWnfEntry::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggWnfEntry.comment)
}
inline void SuggWnfEntry::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggWnfEntry.comment)
}
inline ::std::string* SuggWnfEntry::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggWnfEntry.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggWnfEntry::release_comment() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggWnfEntry.comment)
  clear_has_comment();
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggWnfEntry::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggWnfEntry.comment)
}

// -------------------------------------------------------------------

// SuggWnfResult

// optional string wnf_query = 1;
inline bool SuggWnfResult::has_wnf_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggWnfResult::set_has_wnf_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuggWnfResult::clear_has_wnf_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuggWnfResult::clear_wnf_query() {
  wnf_query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wnf_query();
}
inline const ::std::string& SuggWnfResult::wnf_query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query)
  return wnf_query_.GetNoArena();
}
inline void SuggWnfResult::set_wnf_query(const ::std::string& value) {
  set_has_wnf_query();
  wnf_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query)
}
#if LANG_CXX11
inline void SuggWnfResult::set_wnf_query(::std::string&& value) {
  set_has_wnf_query();
  wnf_query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query)
}
#endif
inline void SuggWnfResult::set_wnf_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wnf_query();
  wnf_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query)
}
inline void SuggWnfResult::set_wnf_query(const char* value, size_t size) {
  set_has_wnf_query();
  wnf_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query)
}
inline ::std::string* SuggWnfResult::mutable_wnf_query() {
  set_has_wnf_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query)
  return wnf_query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggWnfResult::release_wnf_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query)
  clear_has_wnf_query();
  return wnf_query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggWnfResult::set_allocated_wnf_query(::std::string* wnf_query) {
  if (wnf_query != NULL) {
    set_has_wnf_query();
  } else {
    clear_has_wnf_query();
  }
  wnf_query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wnf_query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query)
}

// optional .ru.mail.go.sugg.indexer.SuggWnfEntry wnf_result = 2;
inline bool SuggWnfResult::has_wnf_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuggWnfResult::set_has_wnf_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuggWnfResult::clear_has_wnf_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuggWnfResult::clear_wnf_result() {
  if (wnf_result_ != NULL) wnf_result_->::ru::mail::go::sugg::indexer::SuggWnfEntry::Clear();
  clear_has_wnf_result();
}
inline const ::ru::mail::go::sugg::indexer::SuggWnfEntry& SuggWnfResult::wnf_result() const {
  const ::ru::mail::go::sugg::indexer::SuggWnfEntry* p = wnf_result_;
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_result)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::sugg::indexer::SuggWnfEntry*>(
      &::ru::mail::go::sugg::indexer::_SuggWnfEntry_default_instance_);
}
inline ::ru::mail::go::sugg::indexer::SuggWnfEntry* SuggWnfResult::mutable_wnf_result() {
  set_has_wnf_result();
  if (wnf_result_ == NULL) {
    wnf_result_ = new ::ru::mail::go::sugg::indexer::SuggWnfEntry;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_result)
  return wnf_result_;
}
inline ::ru::mail::go::sugg::indexer::SuggWnfEntry* SuggWnfResult::release_wnf_result() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_result)
  clear_has_wnf_result();
  ::ru::mail::go::sugg::indexer::SuggWnfEntry* temp = wnf_result_;
  wnf_result_ = NULL;
  return temp;
}
inline void SuggWnfResult::set_allocated_wnf_result(::ru::mail::go::sugg::indexer::SuggWnfEntry* wnf_result) {
  delete wnf_result_;
  wnf_result_ = wnf_result;
  if (wnf_result) {
    set_has_wnf_result();
  } else {
    clear_has_wnf_result();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_result)
}

// repeated .ru.mail.go.sugg.indexer.SuggWnfEntry wnf_entries = 3;
inline int SuggWnfResult::wnf_entries_size() const {
  return wnf_entries_.size();
}
inline void SuggWnfResult::clear_wnf_entries() {
  wnf_entries_.Clear();
}
inline const ::ru::mail::go::sugg::indexer::SuggWnfEntry& SuggWnfResult::wnf_entries(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_entries)
  return wnf_entries_.Get(index);
}
inline ::ru::mail::go::sugg::indexer::SuggWnfEntry* SuggWnfResult::mutable_wnf_entries(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_entries)
  return wnf_entries_.Mutable(index);
}
inline ::ru::mail::go::sugg::indexer::SuggWnfEntry* SuggWnfResult::add_wnf_entries() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_entries)
  return wnf_entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggWnfEntry >*
SuggWnfResult::mutable_wnf_entries() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_entries)
  return &wnf_entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggWnfEntry >&
SuggWnfResult::wnf_entries() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_entries)
  return wnf_entries_;
}

// -------------------------------------------------------------------

// SuggMobileAutocompResult

// required string paste_text = 1;
inline bool SuggMobileAutocompResult::has_paste_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggMobileAutocompResult::set_has_paste_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuggMobileAutocompResult::clear_has_paste_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuggMobileAutocompResult::clear_paste_text() {
  paste_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_paste_text();
}
inline const ::std::string& SuggMobileAutocompResult::paste_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text)
  return paste_text_.GetNoArena();
}
inline void SuggMobileAutocompResult::set_paste_text(const ::std::string& value) {
  set_has_paste_text();
  paste_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text)
}
#if LANG_CXX11
inline void SuggMobileAutocompResult::set_paste_text(::std::string&& value) {
  set_has_paste_text();
  paste_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text)
}
#endif
inline void SuggMobileAutocompResult::set_paste_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_paste_text();
  paste_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text)
}
inline void SuggMobileAutocompResult::set_paste_text(const char* value, size_t size) {
  set_has_paste_text();
  paste_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text)
}
inline ::std::string* SuggMobileAutocompResult::mutable_paste_text() {
  set_has_paste_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text)
  return paste_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggMobileAutocompResult::release_paste_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text)
  clear_has_paste_text();
  return paste_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggMobileAutocompResult::set_allocated_paste_text(::std::string* paste_text) {
  if (paste_text != NULL) {
    set_has_paste_text();
  } else {
    clear_has_paste_text();
  }
  paste_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paste_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text)
}

// required string display_text = 2;
inline bool SuggMobileAutocompResult::has_display_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuggMobileAutocompResult::set_has_display_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuggMobileAutocompResult::clear_has_display_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuggMobileAutocompResult::clear_display_text() {
  display_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display_text();
}
inline const ::std::string& SuggMobileAutocompResult::display_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text)
  return display_text_.GetNoArena();
}
inline void SuggMobileAutocompResult::set_display_text(const ::std::string& value) {
  set_has_display_text();
  display_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text)
}
#if LANG_CXX11
inline void SuggMobileAutocompResult::set_display_text(::std::string&& value) {
  set_has_display_text();
  display_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text)
}
#endif
inline void SuggMobileAutocompResult::set_display_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_display_text();
  display_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text)
}
inline void SuggMobileAutocompResult::set_display_text(const char* value, size_t size) {
  set_has_display_text();
  display_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text)
}
inline ::std::string* SuggMobileAutocompResult::mutable_display_text() {
  set_has_display_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text)
  return display_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggMobileAutocompResult::release_display_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text)
  clear_has_display_text();
  return display_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggMobileAutocompResult::set_allocated_display_text(::std::string* display_text) {
  if (display_text != NULL) {
    set_has_display_text();
  } else {
    clear_has_display_text();
  }
  display_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text)
}

// -------------------------------------------------------------------

// SuggInlineAutocompResult

// required string completion_text = 1;
inline bool SuggInlineAutocompResult::has_completion_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggInlineAutocompResult::set_has_completion_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuggInlineAutocompResult::clear_has_completion_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuggInlineAutocompResult::clear_completion_text() {
  completion_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_completion_text();
}
inline const ::std::string& SuggInlineAutocompResult::completion_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text)
  return completion_text_.GetNoArena();
}
inline void SuggInlineAutocompResult::set_completion_text(const ::std::string& value) {
  set_has_completion_text();
  completion_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text)
}
#if LANG_CXX11
inline void SuggInlineAutocompResult::set_completion_text(::std::string&& value) {
  set_has_completion_text();
  completion_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text)
}
#endif
inline void SuggInlineAutocompResult::set_completion_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_completion_text();
  completion_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text)
}
inline void SuggInlineAutocompResult::set_completion_text(const char* value, size_t size) {
  set_has_completion_text();
  completion_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text)
}
inline ::std::string* SuggInlineAutocompResult::mutable_completion_text() {
  set_has_completion_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text)
  return completion_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggInlineAutocompResult::release_completion_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text)
  clear_has_completion_text();
  return completion_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggInlineAutocompResult::set_allocated_completion_text(::std::string* completion_text) {
  if (completion_text != NULL) {
    set_has_completion_text();
  } else {
    clear_has_completion_text();
  }
  completion_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), completion_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text)
}

// -------------------------------------------------------------------

// SuggTotalFreq

// optional uint64 total = 1;
inline bool SuggTotalFreq::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggTotalFreq::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuggTotalFreq::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuggTotalFreq::clear_total() {
  total_ = GOOGLE_ULONGLONG(0);
  clear_has_total();
}
inline ::google::protobuf::uint64 SuggTotalFreq::total() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggTotalFreq.total)
  return total_;
}
inline void SuggTotalFreq::set_total(::google::protobuf::uint64 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggTotalFreq.total)
}

// optional uint64 country = 2;
inline bool SuggTotalFreq::has_country() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuggTotalFreq::set_has_country() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuggTotalFreq::clear_has_country() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuggTotalFreq::clear_country() {
  country_ = GOOGLE_ULONGLONG(0);
  clear_has_country();
}
inline ::google::protobuf::uint64 SuggTotalFreq::country() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggTotalFreq.country)
  return country_;
}
inline void SuggTotalFreq::set_country(::google::protobuf::uint64 value) {
  set_has_country();
  country_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggTotalFreq.country)
}

// optional uint64 region = 3;
inline bool SuggTotalFreq::has_region() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuggTotalFreq::set_has_region() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuggTotalFreq::clear_has_region() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuggTotalFreq::clear_region() {
  region_ = GOOGLE_ULONGLONG(0);
  clear_has_region();
}
inline ::google::protobuf::uint64 SuggTotalFreq::region() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggTotalFreq.region)
  return region_;
}
inline void SuggTotalFreq::set_region(::google::protobuf::uint64 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggTotalFreq.region)
}

// -------------------------------------------------------------------

// SuggResultStat

// optional bool skip_exact_match = 1;
inline bool SuggResultStat::has_skip_exact_match() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuggResultStat::set_has_skip_exact_match() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuggResultStat::clear_has_skip_exact_match() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuggResultStat::clear_skip_exact_match() {
  skip_exact_match_ = false;
  clear_has_skip_exact_match();
}
inline bool SuggResultStat::skip_exact_match() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResultStat.skip_exact_match)
  return skip_exact_match_;
}
inline void SuggResultStat::set_skip_exact_match(bool value) {
  set_has_skip_exact_match();
  skip_exact_match_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggResultStat.skip_exact_match)
}

// optional uint32 top_results = 3;
inline bool SuggResultStat::has_top_results() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuggResultStat::set_has_top_results() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuggResultStat::clear_has_top_results() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuggResultStat::clear_top_results() {
  top_results_ = 0u;
  clear_has_top_results();
}
inline ::google::protobuf::uint32 SuggResultStat::top_results() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResultStat.top_results)
  return top_results_;
}
inline void SuggResultStat::set_top_results(::google::protobuf::uint32 value) {
  set_has_top_results();
  top_results_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggResultStat.top_results)
}

// optional .ru.mail.go.sugg.indexer.SuggTotalFreq total_freq = 4;
inline bool SuggResultStat::has_total_freq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggResultStat::set_has_total_freq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuggResultStat::clear_has_total_freq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuggResultStat::clear_total_freq() {
  if (total_freq_ != NULL) total_freq_->::ru::mail::go::sugg::indexer::SuggTotalFreq::Clear();
  clear_has_total_freq();
}
inline const ::ru::mail::go::sugg::indexer::SuggTotalFreq& SuggResultStat::total_freq() const {
  const ::ru::mail::go::sugg::indexer::SuggTotalFreq* p = total_freq_;
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResultStat.total_freq)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::sugg::indexer::SuggTotalFreq*>(
      &::ru::mail::go::sugg::indexer::_SuggTotalFreq_default_instance_);
}
inline ::ru::mail::go::sugg::indexer::SuggTotalFreq* SuggResultStat::mutable_total_freq() {
  set_has_total_freq();
  if (total_freq_ == NULL) {
    total_freq_ = new ::ru::mail::go::sugg::indexer::SuggTotalFreq;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResultStat.total_freq)
  return total_freq_;
}
inline ::ru::mail::go::sugg::indexer::SuggTotalFreq* SuggResultStat::release_total_freq() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggResultStat.total_freq)
  clear_has_total_freq();
  ::ru::mail::go::sugg::indexer::SuggTotalFreq* temp = total_freq_;
  total_freq_ = NULL;
  return temp;
}
inline void SuggResultStat::set_allocated_total_freq(::ru::mail::go::sugg::indexer::SuggTotalFreq* total_freq) {
  delete total_freq_;
  total_freq_ = total_freq;
  if (total_freq) {
    set_has_total_freq();
  } else {
    clear_has_total_freq();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggResultStat.total_freq)
}

// -------------------------------------------------------------------

// SuggResults

// optional string query = 4;
inline bool SuggResults::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuggResults::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuggResults::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuggResults::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& SuggResults::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.query)
  return query_.GetNoArena();
}
inline void SuggResults::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggResults.query)
}
#if LANG_CXX11
inline void SuggResults::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggResults.query)
}
#endif
inline void SuggResults::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggResults.query)
}
inline void SuggResults::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggResults.query)
}
inline ::std::string* SuggResults::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResults.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggResults::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggResults.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggResults::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggResults.query)
}

// optional uint32 rid = 7;
inline bool SuggResults::has_rid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SuggResults::set_has_rid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SuggResults::clear_has_rid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SuggResults::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
inline ::google::protobuf::uint32 SuggResults::rid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.rid)
  return rid_;
}
inline void SuggResults::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggResults.rid)
}

// repeated .ru.mail.go.sugg.indexer.SuggQueryResult queries = 1;
inline int SuggResults::queries_size() const {
  return queries_.size();
}
inline void SuggResults::clear_queries() {
  queries_.Clear();
}
inline const ::ru::mail::go::sugg::indexer::SuggQueryResult& SuggResults::queries(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.queries)
  return queries_.Get(index);
}
inline ::ru::mail::go::sugg::indexer::SuggQueryResult* SuggResults::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResults.queries)
  return queries_.Mutable(index);
}
inline ::ru::mail::go::sugg::indexer::SuggQueryResult* SuggResults::add_queries() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggResults.queries)
  return queries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggQueryResult >*
SuggResults::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggResults.queries)
  return &queries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggQueryResult >&
SuggResults::queries() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggResults.queries)
  return queries_;
}

// repeated .ru.mail.go.sugg.indexer.SuggSiteResult sites = 2;
inline int SuggResults::sites_size() const {
  return sites_.size();
}
inline void SuggResults::clear_sites() {
  sites_.Clear();
}
inline const ::ru::mail::go::sugg::indexer::SuggSiteResult& SuggResults::sites(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.sites)
  return sites_.Get(index);
}
inline ::ru::mail::go::sugg::indexer::SuggSiteResult* SuggResults::mutable_sites(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResults.sites)
  return sites_.Mutable(index);
}
inline ::ru::mail::go::sugg::indexer::SuggSiteResult* SuggResults::add_sites() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggResults.sites)
  return sites_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggSiteResult >*
SuggResults::mutable_sites() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggResults.sites)
  return &sites_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggSiteResult >&
SuggResults::sites() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggResults.sites)
  return sites_;
}

// optional string error = 3;
inline bool SuggResults::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggResults::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuggResults::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuggResults::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
inline const ::std::string& SuggResults::error() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.error)
  return error_.GetNoArena();
}
inline void SuggResults::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggResults.error)
}
#if LANG_CXX11
inline void SuggResults::set_error(::std::string&& value) {
  set_has_error();
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggResults.error)
}
#endif
inline void SuggResults::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggResults.error)
}
inline void SuggResults::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggResults.error)
}
inline ::std::string* SuggResults::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResults.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuggResults::release_error() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggResults.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuggResults::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggResults.error)
}

// optional .ru.mail.go.sugg.indexer.SuggResultStat stat = 8;
inline bool SuggResults::has_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SuggResults::set_has_stat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SuggResults::clear_has_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SuggResults::clear_stat() {
  if (stat_ != NULL) stat_->::ru::mail::go::sugg::indexer::SuggResultStat::Clear();
  clear_has_stat();
}
inline const ::ru::mail::go::sugg::indexer::SuggResultStat& SuggResults::stat() const {
  const ::ru::mail::go::sugg::indexer::SuggResultStat* p = stat_;
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::sugg::indexer::SuggResultStat*>(
      &::ru::mail::go::sugg::indexer::_SuggResultStat_default_instance_);
}
inline ::ru::mail::go::sugg::indexer::SuggResultStat* SuggResults::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    stat_ = new ::ru::mail::go::sugg::indexer::SuggResultStat;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResults.stat)
  return stat_;
}
inline ::ru::mail::go::sugg::indexer::SuggResultStat* SuggResults::release_stat() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggResults.stat)
  clear_has_stat();
  ::ru::mail::go::sugg::indexer::SuggResultStat* temp = stat_;
  stat_ = NULL;
  return temp;
}
inline void SuggResults::set_allocated_stat(::ru::mail::go::sugg::indexer::SuggResultStat* stat) {
  delete stat_;
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggResults.stat)
}

// optional .ru.mail.go.sugg.indexer.SuggWnfResult wnf_result = 5;
inline bool SuggResults::has_wnf_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuggResults::set_has_wnf_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuggResults::clear_has_wnf_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuggResults::clear_wnf_result() {
  if (wnf_result_ != NULL) wnf_result_->::ru::mail::go::sugg::indexer::SuggWnfResult::Clear();
  clear_has_wnf_result();
}
inline const ::ru::mail::go::sugg::indexer::SuggWnfResult& SuggResults::wnf_result() const {
  const ::ru::mail::go::sugg::indexer::SuggWnfResult* p = wnf_result_;
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.wnf_result)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::sugg::indexer::SuggWnfResult*>(
      &::ru::mail::go::sugg::indexer::_SuggWnfResult_default_instance_);
}
inline ::ru::mail::go::sugg::indexer::SuggWnfResult* SuggResults::mutable_wnf_result() {
  set_has_wnf_result();
  if (wnf_result_ == NULL) {
    wnf_result_ = new ::ru::mail::go::sugg::indexer::SuggWnfResult;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResults.wnf_result)
  return wnf_result_;
}
inline ::ru::mail::go::sugg::indexer::SuggWnfResult* SuggResults::release_wnf_result() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggResults.wnf_result)
  clear_has_wnf_result();
  ::ru::mail::go::sugg::indexer::SuggWnfResult* temp = wnf_result_;
  wnf_result_ = NULL;
  return temp;
}
inline void SuggResults::set_allocated_wnf_result(::ru::mail::go::sugg::indexer::SuggWnfResult* wnf_result) {
  delete wnf_result_;
  wnf_result_ = wnf_result;
  if (wnf_result) {
    set_has_wnf_result();
  } else {
    clear_has_wnf_result();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggResults.wnf_result)
}

// repeated .ru.mail.go.sugg.indexer.SuggMobileAutocompResult mobile_autocomps = 6;
inline int SuggResults::mobile_autocomps_size() const {
  return mobile_autocomps_.size();
}
inline void SuggResults::clear_mobile_autocomps() {
  mobile_autocomps_.Clear();
}
inline const ::ru::mail::go::sugg::indexer::SuggMobileAutocompResult& SuggResults::mobile_autocomps(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.mobile_autocomps)
  return mobile_autocomps_.Get(index);
}
inline ::ru::mail::go::sugg::indexer::SuggMobileAutocompResult* SuggResults::mutable_mobile_autocomps(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResults.mobile_autocomps)
  return mobile_autocomps_.Mutable(index);
}
inline ::ru::mail::go::sugg::indexer::SuggMobileAutocompResult* SuggResults::add_mobile_autocomps() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggResults.mobile_autocomps)
  return mobile_autocomps_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggMobileAutocompResult >*
SuggResults::mutable_mobile_autocomps() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggResults.mobile_autocomps)
  return &mobile_autocomps_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggMobileAutocompResult >&
SuggResults::mobile_autocomps() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggResults.mobile_autocomps)
  return mobile_autocomps_;
}

// repeated .ru.mail.go.sugg.indexer.SuggInlineAutocompResult inline_autocomps = 9;
inline int SuggResults::inline_autocomps_size() const {
  return inline_autocomps_.size();
}
inline void SuggResults::clear_inline_autocomps() {
  inline_autocomps_.Clear();
}
inline const ::ru::mail::go::sugg::indexer::SuggInlineAutocompResult& SuggResults::inline_autocomps(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.inline_autocomps)
  return inline_autocomps_.Get(index);
}
inline ::ru::mail::go::sugg::indexer::SuggInlineAutocompResult* SuggResults::mutable_inline_autocomps(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResults.inline_autocomps)
  return inline_autocomps_.Mutable(index);
}
inline ::ru::mail::go::sugg::indexer::SuggInlineAutocompResult* SuggResults::add_inline_autocomps() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggResults.inline_autocomps)
  return inline_autocomps_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggInlineAutocompResult >*
SuggResults::mutable_inline_autocomps() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggResults.inline_autocomps)
  return &inline_autocomps_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggInlineAutocompResult >&
SuggResults::inline_autocomps() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggResults.inline_autocomps)
  return inline_autocomps_;
}

// optional double end_ratio = 10;
inline bool SuggResults::has_end_ratio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SuggResults::set_has_end_ratio() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SuggResults::clear_has_end_ratio() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SuggResults::clear_end_ratio() {
  end_ratio_ = 0;
  clear_has_end_ratio();
}
inline double SuggResults::end_ratio() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.end_ratio)
  return end_ratio_;
}
inline void SuggResults::set_end_ratio(double value) {
  set_has_end_ratio();
  end_ratio_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggResults.end_ratio)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace indexer
}  // namespace sugg
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::sugg::indexer::Query_QType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::sugg::indexer::Query_QType>() {
  return ::ru::mail::go::sugg::indexer::Query_QType_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::sugg::indexer::SuggQueryResult_MisspellType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::sugg::indexer::SuggQueryResult_MisspellType>() {
  return ::ru::mail::go::sugg::indexer::SuggQueryResult_MisspellType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_suggests_2eproto__INCLUDED
