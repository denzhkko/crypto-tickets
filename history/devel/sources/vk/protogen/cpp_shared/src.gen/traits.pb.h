// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traits.proto

#ifndef PROTOBUF_traits_2eproto__INCLUDED
#define PROTOBUF_traits_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace gogo {
namespace traits {
class category_stat;
class category_statDefaultTypeInternal;
extern category_statDefaultTypeInternal _category_stat_default_instance_;
class color_stat;
class color_statDefaultTypeInternal;
extern color_statDefaultTypeInternal _color_stat_default_instance_;
class companies_doc;
class companies_docDefaultTypeInternal;
extern companies_docDefaultTypeInternal _companies_doc_default_instance_;
class companies_trait;
class companies_traitDefaultTypeInternal;
extern companies_traitDefaultTypeInternal _companies_trait_default_instance_;
class domain_stat_trait;
class domain_stat_traitDefaultTypeInternal;
extern domain_stat_traitDefaultTypeInternal _domain_stat_trait_default_instance_;
class infocard_features;
class infocard_featuresDefaultTypeInternal;
extern infocard_featuresDefaultTypeInternal _infocard_features_default_instance_;
class infocard_trait;
class infocard_traitDefaultTypeInternal;
extern infocard_traitDefaultTypeInternal _infocard_trait_default_instance_;
class recipes_doc;
class recipes_docDefaultTypeInternal;
extern recipes_docDefaultTypeInternal _recipes_doc_default_instance_;
class recipes_trait;
class recipes_traitDefaultTypeInternal;
extern recipes_traitDefaultTypeInternal _recipes_trait_default_instance_;
class shard_domain_pos;
class shard_domain_posDefaultTypeInternal;
extern shard_domain_posDefaultTypeInternal _shard_domain_pos_default_instance_;
class shard_domain_stat;
class shard_domain_statDefaultTypeInternal;
extern shard_domain_statDefaultTypeInternal _shard_domain_stat_default_instance_;
class shard_domain_stat_trait;
class shard_domain_stat_traitDefaultTypeInternal;
extern shard_domain_stat_traitDefaultTypeInternal _shard_domain_stat_trait_default_instance_;
class shard_url_stat;
class shard_url_statDefaultTypeInternal;
extern shard_url_statDefaultTypeInternal _shard_url_stat_default_instance_;
class shard_url_stat_trait;
class shard_url_stat_traitDefaultTypeInternal;
extern shard_url_stat_traitDefaultTypeInternal _shard_url_stat_trait_default_instance_;
class size_stat;
class size_statDefaultTypeInternal;
extern size_statDefaultTypeInternal _size_stat_default_instance_;
class test_aggregation;
class test_aggregationDefaultTypeInternal;
extern test_aggregationDefaultTypeInternal _test_aggregation_default_instance_;
class test_trait;
class test_traitDefaultTypeInternal;
extern test_traitDefaultTypeInternal _test_trait_default_instance_;
class torg_china_trait;
class torg_china_traitDefaultTypeInternal;
extern torg_china_traitDefaultTypeInternal _torg_china_trait_default_instance_;
class total_searcher_docs_statistics;
class total_searcher_docs_statisticsDefaultTypeInternal;
extern total_searcher_docs_statisticsDefaultTypeInternal _total_searcher_docs_statistics_default_instance_;
class vk_music_track_trait;
class vk_music_track_traitDefaultTypeInternal;
extern vk_music_track_traitDefaultTypeInternal _vk_music_track_trait_default_instance_;
}  // namespace traits
}  // namespace gogo

namespace gogo {
namespace traits {

namespace protobuf_traits_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_traits_2eproto

enum infocard_trait_markup_source {
  infocard_trait_markup_source_QUERY = 1,
  infocard_trait_markup_source_INDEX = 2
};
bool infocard_trait_markup_source_IsValid(int value);
const infocard_trait_markup_source infocard_trait_markup_source_markup_source_MIN = infocard_trait_markup_source_QUERY;
const infocard_trait_markup_source infocard_trait_markup_source_markup_source_MAX = infocard_trait_markup_source_INDEX;
const int infocard_trait_markup_source_markup_source_ARRAYSIZE = infocard_trait_markup_source_markup_source_MAX + 1;

const ::google::protobuf::EnumDescriptor* infocard_trait_markup_source_descriptor();
inline const ::std::string& infocard_trait_markup_source_Name(infocard_trait_markup_source value) {
  return ::google::protobuf::internal::NameOfEnum(
    infocard_trait_markup_source_descriptor(), value);
}
inline bool infocard_trait_markup_source_Parse(
    const ::std::string& name, infocard_trait_markup_source* value) {
  return ::google::protobuf::internal::ParseNamedEnum<infocard_trait_markup_source>(
    infocard_trait_markup_source_descriptor(), name, value);
}
// ===================================================================

class test_trait : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.test_trait) */ {
 public:
  test_trait();
  virtual ~test_trait();

  test_trait(const test_trait& from);

  inline test_trait& operator=(const test_trait& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  test_trait(test_trait&& from) noexcept
    : test_trait() {
    *this = ::std::move(from);
  }

  inline test_trait& operator=(test_trait&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const test_trait& default_instance();

  static inline const test_trait* internal_default_instance() {
    return reinterpret_cast<const test_trait*>(
               &_test_trait_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(test_trait* other);
  friend void swap(test_trait& a, test_trait& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline test_trait* New() const PROTOBUF_FINAL { return New(NULL); }

  test_trait* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const test_trait& from);
  void MergeFrom(const test_trait& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(test_trait* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gogo.traits.test_trait)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class test_aggregation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.test_aggregation) */ {
 public:
  test_aggregation();
  virtual ~test_aggregation();

  test_aggregation(const test_aggregation& from);

  inline test_aggregation& operator=(const test_aggregation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  test_aggregation(test_aggregation&& from) noexcept
    : test_aggregation() {
    *this = ::std::move(from);
  }

  inline test_aggregation& operator=(test_aggregation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const test_aggregation& default_instance();

  static inline const test_aggregation* internal_default_instance() {
    return reinterpret_cast<const test_aggregation*>(
               &_test_aggregation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(test_aggregation* other);
  friend void swap(test_aggregation& a, test_aggregation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline test_aggregation* New() const PROTOBUF_FINAL { return New(NULL); }

  test_aggregation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const test_aggregation& from);
  void MergeFrom(const test_aggregation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(test_aggregation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 sum_length = 1;
  bool has_sum_length() const;
  void clear_sum_length();
  static const int kSumLengthFieldNumber = 1;
  ::google::protobuf::int32 sum_length() const;
  void set_sum_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gogo.traits.test_aggregation)
 private:
  void set_has_sum_length();
  void clear_has_sum_length();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 sum_length_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class domain_stat_trait : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.domain_stat_trait) */ {
 public:
  domain_stat_trait();
  virtual ~domain_stat_trait();

  domain_stat_trait(const domain_stat_trait& from);

  inline domain_stat_trait& operator=(const domain_stat_trait& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  domain_stat_trait(domain_stat_trait&& from) noexcept
    : domain_stat_trait() {
    *this = ::std::move(from);
  }

  inline domain_stat_trait& operator=(domain_stat_trait&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const domain_stat_trait& default_instance();

  static inline const domain_stat_trait* internal_default_instance() {
    return reinterpret_cast<const domain_stat_trait*>(
               &_domain_stat_trait_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(domain_stat_trait* other);
  friend void swap(domain_stat_trait& a, domain_stat_trait& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline domain_stat_trait* New() const PROTOBUF_FINAL { return New(NULL); }

  domain_stat_trait* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const domain_stat_trait& from);
  void MergeFrom(const domain_stat_trait& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(domain_stat_trait* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 domains = 1 [packed = true];
  int domains_size() const;
  void clear_domains();
  static const int kDomainsFieldNumber = 1;
  ::google::protobuf::uint32 domains(int index) const;
  void set_domains(int index, ::google::protobuf::uint32 value);
  void add_domains(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      domains() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_domains();

  // repeated uint32 docs = 2 [packed = true];
  int docs_size() const;
  void clear_docs();
  static const int kDocsFieldNumber = 2;
  ::google::protobuf::uint32 docs(int index) const;
  void set_docs(int index, ::google::protobuf::uint32 value);
  void add_docs(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      docs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_docs();

  // optional uint32 total_docs = 3;
  bool has_total_docs() const;
  void clear_total_docs();
  static const int kTotalDocsFieldNumber = 3;
  ::google::protobuf::uint32 total_docs() const;
  void set_total_docs(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.traits.domain_stat_trait)
 private:
  void set_has_total_docs();
  void clear_has_total_docs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > domains_;
  mutable int _domains_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > docs_;
  mutable int _docs_cached_byte_size_;
  ::google::protobuf::uint32 total_docs_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class shard_domain_pos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.shard_domain_pos) */ {
 public:
  shard_domain_pos();
  virtual ~shard_domain_pos();

  shard_domain_pos(const shard_domain_pos& from);

  inline shard_domain_pos& operator=(const shard_domain_pos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  shard_domain_pos(shard_domain_pos&& from) noexcept
    : shard_domain_pos() {
    *this = ::std::move(from);
  }

  inline shard_domain_pos& operator=(shard_domain_pos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shard_domain_pos& default_instance();

  static inline const shard_domain_pos* internal_default_instance() {
    return reinterpret_cast<const shard_domain_pos*>(
               &_shard_domain_pos_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(shard_domain_pos* other);
  friend void swap(shard_domain_pos& a, shard_domain_pos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline shard_domain_pos* New() const PROTOBUF_FINAL { return New(NULL); }

  shard_domain_pos* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const shard_domain_pos& from);
  void MergeFrom(const shard_domain_pos& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(shard_domain_pos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 min = 1;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 1;
  ::google::protobuf::uint32 min() const;
  void set_min(::google::protobuf::uint32 value);

  // optional uint32 max = 2;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  ::google::protobuf::uint32 max() const;
  void set_max(::google::protobuf::uint32 value);

  // optional float avg = 3;
  bool has_avg() const;
  void clear_avg();
  static const int kAvgFieldNumber = 3;
  float avg() const;
  void set_avg(float value);

  // optional float var = 4;
  bool has_var() const;
  void clear_var();
  static const int kVarFieldNumber = 4;
  float var() const;
  void set_var(float value);

  // @@protoc_insertion_point(class_scope:gogo.traits.shard_domain_pos)
 private:
  void set_has_min();
  void clear_has_min();
  void set_has_max();
  void clear_has_max();
  void set_has_avg();
  void clear_has_avg();
  void set_has_var();
  void clear_has_var();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 min_;
  ::google::protobuf::uint32 max_;
  float avg_;
  float var_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class shard_domain_stat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.shard_domain_stat) */ {
 public:
  shard_domain_stat();
  virtual ~shard_domain_stat();

  shard_domain_stat(const shard_domain_stat& from);

  inline shard_domain_stat& operator=(const shard_domain_stat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  shard_domain_stat(shard_domain_stat&& from) noexcept
    : shard_domain_stat() {
    *this = ::std::move(from);
  }

  inline shard_domain_stat& operator=(shard_domain_stat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shard_domain_stat& default_instance();

  static inline const shard_domain_stat* internal_default_instance() {
    return reinterpret_cast<const shard_domain_stat*>(
               &_shard_domain_stat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(shard_domain_stat* other);
  friend void swap(shard_domain_stat& a, shard_domain_stat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline shard_domain_stat* New() const PROTOBUF_FINAL { return New(NULL); }

  shard_domain_stat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const shard_domain_stat& from);
  void MergeFrom(const shard_domain_stat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(shard_domain_stat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gogo.traits.shard_domain_pos pos = 3;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 3;
  const ::gogo::traits::shard_domain_pos& pos() const;
  ::gogo::traits::shard_domain_pos* mutable_pos();
  ::gogo::traits::shard_domain_pos* release_pos();
  void set_allocated_pos(::gogo::traits::shard_domain_pos* pos);

  // required uint32 domain = 1;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  ::google::protobuf::uint32 domain() const;
  void set_domain(::google::protobuf::uint32 value);

  // optional uint32 docs = 2;
  bool has_docs() const;
  void clear_docs();
  static const int kDocsFieldNumber = 2;
  ::google::protobuf::uint32 docs() const;
  void set_docs(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.traits.shard_domain_stat)
 private:
  void set_has_domain();
  void clear_has_domain();
  void set_has_docs();
  void clear_has_docs();
  void set_has_pos();
  void clear_has_pos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::gogo::traits::shard_domain_pos* pos_;
  ::google::protobuf::uint32 domain_;
  ::google::protobuf::uint32 docs_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class shard_domain_stat_trait : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.shard_domain_stat_trait) */ {
 public:
  shard_domain_stat_trait();
  virtual ~shard_domain_stat_trait();

  shard_domain_stat_trait(const shard_domain_stat_trait& from);

  inline shard_domain_stat_trait& operator=(const shard_domain_stat_trait& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  shard_domain_stat_trait(shard_domain_stat_trait&& from) noexcept
    : shard_domain_stat_trait() {
    *this = ::std::move(from);
  }

  inline shard_domain_stat_trait& operator=(shard_domain_stat_trait&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shard_domain_stat_trait& default_instance();

  static inline const shard_domain_stat_trait* internal_default_instance() {
    return reinterpret_cast<const shard_domain_stat_trait*>(
               &_shard_domain_stat_trait_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(shard_domain_stat_trait* other);
  friend void swap(shard_domain_stat_trait& a, shard_domain_stat_trait& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline shard_domain_stat_trait* New() const PROTOBUF_FINAL { return New(NULL); }

  shard_domain_stat_trait* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const shard_domain_stat_trait& from);
  void MergeFrom(const shard_domain_stat_trait& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(shard_domain_stat_trait* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gogo.traits.shard_domain_stat domains = 1;
  int domains_size() const;
  void clear_domains();
  static const int kDomainsFieldNumber = 1;
  const ::gogo::traits::shard_domain_stat& domains(int index) const;
  ::gogo::traits::shard_domain_stat* mutable_domains(int index);
  ::gogo::traits::shard_domain_stat* add_domains();
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::shard_domain_stat >*
      mutable_domains();
  const ::google::protobuf::RepeatedPtrField< ::gogo::traits::shard_domain_stat >&
      domains() const;

  // optional uint32 total_docs = 2;
  bool has_total_docs() const;
  void clear_total_docs();
  static const int kTotalDocsFieldNumber = 2;
  ::google::protobuf::uint32 total_docs() const;
  void set_total_docs(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.traits.shard_domain_stat_trait)
 private:
  void set_has_total_docs();
  void clear_has_total_docs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::shard_domain_stat > domains_;
  ::google::protobuf::uint32 total_docs_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class shard_url_stat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.shard_url_stat) */ {
 public:
  shard_url_stat();
  virtual ~shard_url_stat();

  shard_url_stat(const shard_url_stat& from);

  inline shard_url_stat& operator=(const shard_url_stat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  shard_url_stat(shard_url_stat&& from) noexcept
    : shard_url_stat() {
    *this = ::std::move(from);
  }

  inline shard_url_stat& operator=(shard_url_stat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shard_url_stat& default_instance();

  static inline const shard_url_stat* internal_default_instance() {
    return reinterpret_cast<const shard_url_stat*>(
               &_shard_url_stat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(shard_url_stat* other);
  friend void swap(shard_url_stat& a, shard_url_stat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline shard_url_stat* New() const PROTOBUF_FINAL { return New(NULL); }

  shard_url_stat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const shard_url_stat& from);
  void MergeFrom(const shard_url_stat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(shard_url_stat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  ::google::protobuf::uint64 url() const;
  void set_url(::google::protobuf::uint64 value);

  // optional uint32 domain = 2;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  ::google::protobuf::uint32 domain() const;
  void set_domain(::google::protobuf::uint32 value);

  // optional uint32 pos = 3;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 3;
  ::google::protobuf::uint32 pos() const;
  void set_pos(::google::protobuf::uint32 value);

  // optional float sq_model_rank = 4;
  bool has_sq_model_rank() const;
  void clear_sq_model_rank();
  static const int kSqModelRankFieldNumber = 4;
  float sq_model_rank() const;
  void set_sq_model_rank(float value);

  // @@protoc_insertion_point(class_scope:gogo.traits.shard_url_stat)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_domain();
  void clear_has_domain();
  void set_has_pos();
  void clear_has_pos();
  void set_has_sq_model_rank();
  void clear_has_sq_model_rank();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 url_;
  ::google::protobuf::uint32 domain_;
  ::google::protobuf::uint32 pos_;
  float sq_model_rank_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class shard_url_stat_trait : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.shard_url_stat_trait) */ {
 public:
  shard_url_stat_trait();
  virtual ~shard_url_stat_trait();

  shard_url_stat_trait(const shard_url_stat_trait& from);

  inline shard_url_stat_trait& operator=(const shard_url_stat_trait& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  shard_url_stat_trait(shard_url_stat_trait&& from) noexcept
    : shard_url_stat_trait() {
    *this = ::std::move(from);
  }

  inline shard_url_stat_trait& operator=(shard_url_stat_trait&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shard_url_stat_trait& default_instance();

  static inline const shard_url_stat_trait* internal_default_instance() {
    return reinterpret_cast<const shard_url_stat_trait*>(
               &_shard_url_stat_trait_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(shard_url_stat_trait* other);
  friend void swap(shard_url_stat_trait& a, shard_url_stat_trait& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline shard_url_stat_trait* New() const PROTOBUF_FINAL { return New(NULL); }

  shard_url_stat_trait* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const shard_url_stat_trait& from);
  void MergeFrom(const shard_url_stat_trait& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(shard_url_stat_trait* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gogo.traits.shard_url_stat urls = 1;
  int urls_size() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 1;
  const ::gogo::traits::shard_url_stat& urls(int index) const;
  ::gogo::traits::shard_url_stat* mutable_urls(int index);
  ::gogo::traits::shard_url_stat* add_urls();
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::shard_url_stat >*
      mutable_urls();
  const ::google::protobuf::RepeatedPtrField< ::gogo::traits::shard_url_stat >&
      urls() const;

  // @@protoc_insertion_point(class_scope:gogo.traits.shard_url_stat_trait)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::shard_url_stat > urls_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class infocard_features : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.infocard_features) */ {
 public:
  infocard_features();
  virtual ~infocard_features();

  infocard_features(const infocard_features& from);

  inline infocard_features& operator=(const infocard_features& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  infocard_features(infocard_features&& from) noexcept
    : infocard_features() {
    *this = ::std::move(from);
  }

  inline infocard_features& operator=(infocard_features&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const infocard_features& default_instance();

  static inline const infocard_features* internal_default_instance() {
    return reinterpret_cast<const infocard_features*>(
               &_infocard_features_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(infocard_features* other);
  friend void swap(infocard_features& a, infocard_features& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline infocard_features* New() const PROTOBUF_FINAL { return New(NULL); }

  infocard_features* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const infocard_features& from);
  void MergeFrom(const infocard_features& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(infocard_features* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float features = 1 [packed = true];
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 1;
  float features(int index) const;
  void set_features(int index, float value);
  void add_features(float value);
  const ::google::protobuf::RepeatedField< float >&
      features() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_features();

  // @@protoc_insertion_point(class_scope:gogo.traits.infocard_features)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > features_;
  mutable int _features_cached_byte_size_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class infocard_trait : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.infocard_trait) */ {
 public:
  infocard_trait();
  virtual ~infocard_trait();

  infocard_trait(const infocard_trait& from);

  inline infocard_trait& operator=(const infocard_trait& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  infocard_trait(infocard_trait&& from) noexcept
    : infocard_trait() {
    *this = ::std::move(from);
  }

  inline infocard_trait& operator=(infocard_trait&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const infocard_trait& default_instance();

  static inline const infocard_trait* internal_default_instance() {
    return reinterpret_cast<const infocard_trait*>(
               &_infocard_trait_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(infocard_trait* other);
  friend void swap(infocard_trait& a, infocard_trait& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline infocard_trait* New() const PROTOBUF_FINAL { return New(NULL); }

  infocard_trait* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const infocard_trait& from);
  void MergeFrom(const infocard_trait& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(infocard_trait* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef infocard_trait_markup_source markup_source;
  static const markup_source QUERY =
    infocard_trait_markup_source_QUERY;
  static const markup_source INDEX =
    infocard_trait_markup_source_INDEX;
  static inline bool markup_source_IsValid(int value) {
    return infocard_trait_markup_source_IsValid(value);
  }
  static const markup_source markup_source_MIN =
    infocard_trait_markup_source_markup_source_MIN;
  static const markup_source markup_source_MAX =
    infocard_trait_markup_source_markup_source_MAX;
  static const int markup_source_ARRAYSIZE =
    infocard_trait_markup_source_markup_source_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  markup_source_descriptor() {
    return infocard_trait_markup_source_descriptor();
  }
  static inline const ::std::string& markup_source_Name(markup_source value) {
    return infocard_trait_markup_source_Name(value);
  }
  static inline bool markup_source_Parse(const ::std::string& name,
      markup_source* value) {
    return infocard_trait_markup_source_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint64 objects = 1 [packed = true];
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 1;
  ::google::protobuf::uint64 objects(int index) const;
  void set_objects(int index, ::google::protobuf::uint64 value);
  void add_objects(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      objects() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_objects();

  // repeated float ranks = 2 [packed = true];
  int ranks_size() const;
  void clear_ranks();
  static const int kRanksFieldNumber = 2;
  float ranks(int index) const;
  void set_ranks(int index, float value);
  void add_ranks(float value);
  const ::google::protobuf::RepeatedField< float >&
      ranks() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ranks();

  // repeated int32 positions = 3 [packed = true];
  int positions_size() const;
  void clear_positions();
  static const int kPositionsFieldNumber = 3;
  ::google::protobuf::int32 positions(int index) const;
  void set_positions(int index, ::google::protobuf::int32 value);
  void add_positions(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      positions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_positions();

  // repeated .gogo.traits.infocard_features features = 4;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 4;
  const ::gogo::traits::infocard_features& features(int index) const;
  ::gogo::traits::infocard_features* mutable_features(int index);
  ::gogo::traits::infocard_features* add_features();
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::infocard_features >*
      mutable_features();
  const ::google::protobuf::RepeatedPtrField< ::gogo::traits::infocard_features >&
      features() const;

  // repeated .gogo.traits.infocard_trait.markup_source markups = 5 [packed = true];
  int markups_size() const;
  void clear_markups();
  static const int kMarkupsFieldNumber = 5;
  ::gogo::traits::infocard_trait_markup_source markups(int index) const;
  void set_markups(int index, ::gogo::traits::infocard_trait_markup_source value);
  void add_markups(::gogo::traits::infocard_trait_markup_source value);
  const ::google::protobuf::RepeatedField<int>& markups() const;
  ::google::protobuf::RepeatedField<int>* mutable_markups();

  // @@protoc_insertion_point(class_scope:gogo.traits.infocard_trait)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > objects_;
  mutable int _objects_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > ranks_;
  mutable int _ranks_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > positions_;
  mutable int _positions_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::infocard_features > features_;
  ::google::protobuf::RepeatedField<int> markups_;
  mutable int _markups_cached_byte_size_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class companies_doc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.companies_doc) */ {
 public:
  companies_doc();
  virtual ~companies_doc();

  companies_doc(const companies_doc& from);

  inline companies_doc& operator=(const companies_doc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  companies_doc(companies_doc&& from) noexcept
    : companies_doc() {
    *this = ::std::move(from);
  }

  inline companies_doc& operator=(companies_doc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const companies_doc& default_instance();

  static inline const companies_doc* internal_default_instance() {
    return reinterpret_cast<const companies_doc*>(
               &_companies_doc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(companies_doc* other);
  friend void swap(companies_doc& a, companies_doc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline companies_doc* New() const PROTOBUF_FINAL { return New(NULL); }

  companies_doc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const companies_doc& from);
  void MergeFrom(const companies_doc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(companies_doc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float features = 4 [packed = true];
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 4;
  float features(int index) const;
  void set_features(int index, float value);
  void add_features(float value);
  const ::google::protobuf::RepeatedField< float >&
      features() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_features();

  // optional uint64 hash = 1;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  ::google::protobuf::uint64 hash() const;
  void set_hash(::google::protobuf::uint64 value);

  // optional float rank = 2;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 2;
  float rank() const;
  void set_rank(float value);

  // optional int32 position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  ::google::protobuf::int32 position() const;
  void set_position(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gogo.traits.companies_doc)
 private:
  void set_has_hash();
  void clear_has_hash();
  void set_has_rank();
  void clear_has_rank();
  void set_has_position();
  void clear_has_position();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > features_;
  mutable int _features_cached_byte_size_;
  ::google::protobuf::uint64 hash_;
  float rank_;
  ::google::protobuf::int32 position_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class companies_trait : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.companies_trait) */ {
 public:
  companies_trait();
  virtual ~companies_trait();

  companies_trait(const companies_trait& from);

  inline companies_trait& operator=(const companies_trait& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  companies_trait(companies_trait&& from) noexcept
    : companies_trait() {
    *this = ::std::move(from);
  }

  inline companies_trait& operator=(companies_trait&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const companies_trait& default_instance();

  static inline const companies_trait* internal_default_instance() {
    return reinterpret_cast<const companies_trait*>(
               &_companies_trait_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(companies_trait* other);
  friend void swap(companies_trait& a, companies_trait& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline companies_trait* New() const PROTOBUF_FINAL { return New(NULL); }

  companies_trait* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const companies_trait& from);
  void MergeFrom(const companies_trait& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(companies_trait* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gogo.traits.companies_doc docs = 1;
  int docs_size() const;
  void clear_docs();
  static const int kDocsFieldNumber = 1;
  const ::gogo::traits::companies_doc& docs(int index) const;
  ::gogo::traits::companies_doc* mutable_docs(int index);
  ::gogo::traits::companies_doc* add_docs();
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::companies_doc >*
      mutable_docs();
  const ::google::protobuf::RepeatedPtrField< ::gogo::traits::companies_doc >&
      docs() const;

  // @@protoc_insertion_point(class_scope:gogo.traits.companies_trait)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::companies_doc > docs_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class color_stat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.color_stat) */ {
 public:
  color_stat();
  virtual ~color_stat();

  color_stat(const color_stat& from);

  inline color_stat& operator=(const color_stat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  color_stat(color_stat&& from) noexcept
    : color_stat() {
    *this = ::std::move(from);
  }

  inline color_stat& operator=(color_stat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const color_stat& default_instance();

  static inline const color_stat* internal_default_instance() {
    return reinterpret_cast<const color_stat*>(
               &_color_stat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(color_stat* other);
  friend void swap(color_stat& a, color_stat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline color_stat* New() const PROTOBUF_FINAL { return New(NULL); }

  color_stat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const color_stat& from);
  void MergeFrom(const color_stat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(color_stat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 color_id = 1;
  bool has_color_id() const;
  void clear_color_id();
  static const int kColorIdFieldNumber = 1;
  ::google::protobuf::int32 color_id() const;
  void set_color_id(::google::protobuf::int32 value);

  // required int32 color_popularity = 2;
  bool has_color_popularity() const;
  void clear_color_popularity();
  static const int kColorPopularityFieldNumber = 2;
  ::google::protobuf::int32 color_popularity() const;
  void set_color_popularity(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gogo.traits.color_stat)
 private:
  void set_has_color_id();
  void clear_has_color_id();
  void set_has_color_popularity();
  void clear_has_color_popularity();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 color_id_;
  ::google::protobuf::int32 color_popularity_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class category_stat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.category_stat) */ {
 public:
  category_stat();
  virtual ~category_stat();

  category_stat(const category_stat& from);

  inline category_stat& operator=(const category_stat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  category_stat(category_stat&& from) noexcept
    : category_stat() {
    *this = ::std::move(from);
  }

  inline category_stat& operator=(category_stat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const category_stat& default_instance();

  static inline const category_stat* internal_default_instance() {
    return reinterpret_cast<const category_stat*>(
               &_category_stat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(category_stat* other);
  friend void swap(category_stat& a, category_stat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline category_stat* New() const PROTOBUF_FINAL { return New(NULL); }

  category_stat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const category_stat& from);
  void MergeFrom(const category_stat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(category_stat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 category_id = 1;
  bool has_category_id() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 1;
  ::google::protobuf::int64 category_id() const;
  void set_category_id(::google::protobuf::int64 value);

  // required int32 category_popularity = 2;
  bool has_category_popularity() const;
  void clear_category_popularity();
  static const int kCategoryPopularityFieldNumber = 2;
  ::google::protobuf::int32 category_popularity() const;
  void set_category_popularity(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gogo.traits.category_stat)
 private:
  void set_has_category_id();
  void clear_has_category_id();
  void set_has_category_popularity();
  void clear_has_category_popularity();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 category_id_;
  ::google::protobuf::int32 category_popularity_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class size_stat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.size_stat) */ {
 public:
  size_stat();
  virtual ~size_stat();

  size_stat(const size_stat& from);

  inline size_stat& operator=(const size_stat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  size_stat(size_stat&& from) noexcept
    : size_stat() {
    *this = ::std::move(from);
  }

  inline size_stat& operator=(size_stat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const size_stat& default_instance();

  static inline const size_stat* internal_default_instance() {
    return reinterpret_cast<const size_stat*>(
               &_size_stat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(size_stat* other);
  friend void swap(size_stat& a, size_stat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline size_stat* New() const PROTOBUF_FINAL { return New(NULL); }

  size_stat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const size_stat& from);
  void MergeFrom(const size_stat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(size_stat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 size_id = 1;
  bool has_size_id() const;
  void clear_size_id();
  static const int kSizeIdFieldNumber = 1;
  ::google::protobuf::int32 size_id() const;
  void set_size_id(::google::protobuf::int32 value);

  // required int32 size_type_id = 2;
  bool has_size_type_id() const;
  void clear_size_type_id();
  static const int kSizeTypeIdFieldNumber = 2;
  ::google::protobuf::int32 size_type_id() const;
  void set_size_type_id(::google::protobuf::int32 value);

  // required int32 size_popularity = 3;
  bool has_size_popularity() const;
  void clear_size_popularity();
  static const int kSizePopularityFieldNumber = 3;
  ::google::protobuf::int32 size_popularity() const;
  void set_size_popularity(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gogo.traits.size_stat)
 private:
  void set_has_size_id();
  void clear_has_size_id();
  void set_has_size_type_id();
  void clear_has_size_type_id();
  void set_has_size_popularity();
  void clear_has_size_popularity();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 size_id_;
  ::google::protobuf::int32 size_type_id_;
  ::google::protobuf::int32 size_popularity_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class torg_china_trait : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.torg_china_trait) */ {
 public:
  torg_china_trait();
  virtual ~torg_china_trait();

  torg_china_trait(const torg_china_trait& from);

  inline torg_china_trait& operator=(const torg_china_trait& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  torg_china_trait(torg_china_trait&& from) noexcept
    : torg_china_trait() {
    *this = ::std::move(from);
  }

  inline torg_china_trait& operator=(torg_china_trait&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const torg_china_trait& default_instance();

  static inline const torg_china_trait* internal_default_instance() {
    return reinterpret_cast<const torg_china_trait*>(
               &_torg_china_trait_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(torg_china_trait* other);
  friend void swap(torg_china_trait& a, torg_china_trait& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline torg_china_trait* New() const PROTOBUF_FINAL { return New(NULL); }

  torg_china_trait* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const torg_china_trait& from);
  void MergeFrom(const torg_china_trait& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(torg_china_trait* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gogo.traits.category_stat category_stat_l0 = 3;
  int category_stat_l0_size() const;
  void clear_category_stat_l0();
  static const int kCategoryStatL0FieldNumber = 3;
  const ::gogo::traits::category_stat& category_stat_l0(int index) const;
  ::gogo::traits::category_stat* mutable_category_stat_l0(int index);
  ::gogo::traits::category_stat* add_category_stat_l0();
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >*
      mutable_category_stat_l0();
  const ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >&
      category_stat_l0() const;

  // repeated .gogo.traits.category_stat category_stat_l1 = 4;
  int category_stat_l1_size() const;
  void clear_category_stat_l1();
  static const int kCategoryStatL1FieldNumber = 4;
  const ::gogo::traits::category_stat& category_stat_l1(int index) const;
  ::gogo::traits::category_stat* mutable_category_stat_l1(int index);
  ::gogo::traits::category_stat* add_category_stat_l1();
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >*
      mutable_category_stat_l1();
  const ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >&
      category_stat_l1() const;

  // repeated .gogo.traits.category_stat category_stat_l2 = 5;
  int category_stat_l2_size() const;
  void clear_category_stat_l2();
  static const int kCategoryStatL2FieldNumber = 5;
  const ::gogo::traits::category_stat& category_stat_l2(int index) const;
  ::gogo::traits::category_stat* mutable_category_stat_l2(int index);
  ::gogo::traits::category_stat* add_category_stat_l2();
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >*
      mutable_category_stat_l2();
  const ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >&
      category_stat_l2() const;

  // repeated .gogo.traits.color_stat colors = 6;
  int colors_size() const;
  void clear_colors();
  static const int kColorsFieldNumber = 6;
  const ::gogo::traits::color_stat& colors(int index) const;
  ::gogo::traits::color_stat* mutable_colors(int index);
  ::gogo::traits::color_stat* add_colors();
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::color_stat >*
      mutable_colors();
  const ::google::protobuf::RepeatedPtrField< ::gogo::traits::color_stat >&
      colors() const;

  // repeated .gogo.traits.size_stat sizes = 7;
  int sizes_size() const;
  void clear_sizes();
  static const int kSizesFieldNumber = 7;
  const ::gogo::traits::size_stat& sizes(int index) const;
  ::gogo::traits::size_stat* mutable_sizes(int index);
  ::gogo::traits::size_stat* add_sizes();
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::size_stat >*
      mutable_sizes();
  const ::google::protobuf::RepeatedPtrField< ::gogo::traits::size_stat >&
      sizes() const;

  // optional int32 price_min = 1;
  bool has_price_min() const;
  void clear_price_min();
  static const int kPriceMinFieldNumber = 1;
  ::google::protobuf::int32 price_min() const;
  void set_price_min(::google::protobuf::int32 value);

  // optional int32 price_max = 2;
  bool has_price_max() const;
  void clear_price_max();
  static const int kPriceMaxFieldNumber = 2;
  ::google::protobuf::int32 price_max() const;
  void set_price_max(::google::protobuf::int32 value);

  // optional int32 pbonus_price_min = 8;
  bool has_pbonus_price_min() const;
  void clear_pbonus_price_min();
  static const int kPbonusPriceMinFieldNumber = 8;
  ::google::protobuf::int32 pbonus_price_min() const;
  void set_pbonus_price_min(::google::protobuf::int32 value);

  // optional int32 pbonus_price_max = 9;
  bool has_pbonus_price_max() const;
  void clear_pbonus_price_max();
  static const int kPbonusPriceMaxFieldNumber = 9;
  ::google::protobuf::int32 pbonus_price_max() const;
  void set_pbonus_price_max(::google::protobuf::int32 value);

  // optional int32 price_usd_min = 10;
  bool has_price_usd_min() const;
  void clear_price_usd_min();
  static const int kPriceUsdMinFieldNumber = 10;
  ::google::protobuf::int32 price_usd_min() const;
  void set_price_usd_min(::google::protobuf::int32 value);

  // optional int32 price_usd_max = 11;
  bool has_price_usd_max() const;
  void clear_price_usd_max();
  static const int kPriceUsdMaxFieldNumber = 11;
  ::google::protobuf::int32 price_usd_max() const;
  void set_price_usd_max(::google::protobuf::int32 value);

  // optional int32 price_usd_with_ship_min = 12;
  bool has_price_usd_with_ship_min() const;
  void clear_price_usd_with_ship_min();
  static const int kPriceUsdWithShipMinFieldNumber = 12;
  ::google::protobuf::int32 price_usd_with_ship_min() const;
  void set_price_usd_with_ship_min(::google::protobuf::int32 value);

  // optional int32 price_usd_with_ship_max = 13;
  bool has_price_usd_with_ship_max() const;
  void clear_price_usd_with_ship_max();
  static const int kPriceUsdWithShipMaxFieldNumber = 13;
  ::google::protobuf::int32 price_usd_with_ship_max() const;
  void set_price_usd_with_ship_max(::google::protobuf::int32 value);

  // optional int32 price_usd_with_cod_ship_min = 14;
  bool has_price_usd_with_cod_ship_min() const;
  void clear_price_usd_with_cod_ship_min();
  static const int kPriceUsdWithCodShipMinFieldNumber = 14;
  ::google::protobuf::int32 price_usd_with_cod_ship_min() const;
  void set_price_usd_with_cod_ship_min(::google::protobuf::int32 value);

  // optional int32 price_usd_with_cod_ship_max = 15;
  bool has_price_usd_with_cod_ship_max() const;
  void clear_price_usd_with_cod_ship_max();
  static const int kPriceUsdWithCodShipMaxFieldNumber = 15;
  ::google::protobuf::int32 price_usd_with_cod_ship_max() const;
  void set_price_usd_with_cod_ship_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gogo.traits.torg_china_trait)
 private:
  void set_has_price_min();
  void clear_has_price_min();
  void set_has_price_max();
  void clear_has_price_max();
  void set_has_pbonus_price_min();
  void clear_has_pbonus_price_min();
  void set_has_pbonus_price_max();
  void clear_has_pbonus_price_max();
  void set_has_price_usd_min();
  void clear_has_price_usd_min();
  void set_has_price_usd_max();
  void clear_has_price_usd_max();
  void set_has_price_usd_with_ship_min();
  void clear_has_price_usd_with_ship_min();
  void set_has_price_usd_with_ship_max();
  void clear_has_price_usd_with_ship_max();
  void set_has_price_usd_with_cod_ship_min();
  void clear_has_price_usd_with_cod_ship_min();
  void set_has_price_usd_with_cod_ship_max();
  void clear_has_price_usd_with_cod_ship_max();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat > category_stat_l0_;
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat > category_stat_l1_;
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat > category_stat_l2_;
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::color_stat > colors_;
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::size_stat > sizes_;
  ::google::protobuf::int32 price_min_;
  ::google::protobuf::int32 price_max_;
  ::google::protobuf::int32 pbonus_price_min_;
  ::google::protobuf::int32 pbonus_price_max_;
  ::google::protobuf::int32 price_usd_min_;
  ::google::protobuf::int32 price_usd_max_;
  ::google::protobuf::int32 price_usd_with_ship_min_;
  ::google::protobuf::int32 price_usd_with_ship_max_;
  ::google::protobuf::int32 price_usd_with_cod_ship_min_;
  ::google::protobuf::int32 price_usd_with_cod_ship_max_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class vk_music_track_trait : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.vk_music_track_trait) */ {
 public:
  vk_music_track_trait();
  virtual ~vk_music_track_trait();

  vk_music_track_trait(const vk_music_track_trait& from);

  inline vk_music_track_trait& operator=(const vk_music_track_trait& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  vk_music_track_trait(vk_music_track_trait&& from) noexcept
    : vk_music_track_trait() {
    *this = ::std::move(from);
  }

  inline vk_music_track_trait& operator=(vk_music_track_trait&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const vk_music_track_trait& default_instance();

  static inline const vk_music_track_trait* internal_default_instance() {
    return reinterpret_cast<const vk_music_track_trait*>(
               &_vk_music_track_trait_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(vk_music_track_trait* other);
  friend void swap(vk_music_track_trait& a, vk_music_track_trait& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline vk_music_track_trait* New() const PROTOBUF_FINAL { return New(NULL); }

  vk_music_track_trait* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const vk_music_track_trait& from);
  void MergeFrom(const vk_music_track_trait& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(vk_music_track_trait* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 official_titles_fully_matched = 1;
  bool has_official_titles_fully_matched() const;
  void clear_official_titles_fully_matched();
  static const int kOfficialTitlesFullyMatchedFieldNumber = 1;
  ::google::protobuf::int32 official_titles_fully_matched() const;
  void set_official_titles_fully_matched(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gogo.traits.vk_music_track_trait)
 private:
  void set_has_official_titles_fully_matched();
  void clear_has_official_titles_fully_matched();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 official_titles_fully_matched_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class total_searcher_docs_statistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.total_searcher_docs_statistics) */ {
 public:
  total_searcher_docs_statistics();
  virtual ~total_searcher_docs_statistics();

  total_searcher_docs_statistics(const total_searcher_docs_statistics& from);

  inline total_searcher_docs_statistics& operator=(const total_searcher_docs_statistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  total_searcher_docs_statistics(total_searcher_docs_statistics&& from) noexcept
    : total_searcher_docs_statistics() {
    *this = ::std::move(from);
  }

  inline total_searcher_docs_statistics& operator=(total_searcher_docs_statistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const total_searcher_docs_statistics& default_instance();

  static inline const total_searcher_docs_statistics* internal_default_instance() {
    return reinterpret_cast<const total_searcher_docs_statistics*>(
               &_total_searcher_docs_statistics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(total_searcher_docs_statistics* other);
  friend void swap(total_searcher_docs_statistics& a, total_searcher_docs_statistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline total_searcher_docs_statistics* New() const PROTOBUF_FINAL { return New(NULL); }

  total_searcher_docs_statistics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const total_searcher_docs_statistics& from);
  void MergeFrom(const total_searcher_docs_statistics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(total_searcher_docs_statistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 same_words_total_docs = 1;
  bool has_same_words_total_docs() const;
  void clear_same_words_total_docs();
  static const int kSameWordsTotalDocsFieldNumber = 1;
  ::google::protobuf::int32 same_words_total_docs() const;
  void set_same_words_total_docs(::google::protobuf::int32 value);

  // optional int32 total_found_docs_count = 2;
  bool has_total_found_docs_count() const;
  void clear_total_found_docs_count();
  static const int kTotalFoundDocsCountFieldNumber = 2;
  ::google::protobuf::int32 total_found_docs_count() const;
  void set_total_found_docs_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gogo.traits.total_searcher_docs_statistics)
 private:
  void set_has_same_words_total_docs();
  void clear_has_same_words_total_docs();
  void set_has_total_found_docs_count();
  void clear_has_total_found_docs_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 same_words_total_docs_;
  ::google::protobuf::int32 total_found_docs_count_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class recipes_doc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.recipes_doc) */ {
 public:
  recipes_doc();
  virtual ~recipes_doc();

  recipes_doc(const recipes_doc& from);

  inline recipes_doc& operator=(const recipes_doc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  recipes_doc(recipes_doc&& from) noexcept
    : recipes_doc() {
    *this = ::std::move(from);
  }

  inline recipes_doc& operator=(recipes_doc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const recipes_doc& default_instance();

  static inline const recipes_doc* internal_default_instance() {
    return reinterpret_cast<const recipes_doc*>(
               &_recipes_doc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(recipes_doc* other);
  friend void swap(recipes_doc& a, recipes_doc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline recipes_doc* New() const PROTOBUF_FINAL { return New(NULL); }

  recipes_doc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const recipes_doc& from);
  void MergeFrom(const recipes_doc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(recipes_doc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 hash = 1;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  ::google::protobuf::uint64 hash() const;
  void set_hash(::google::protobuf::uint64 value);

  // optional float rank = 2;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 2;
  float rank() const;
  void set_rank(float value);

  // optional int32 position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  ::google::protobuf::int32 position() const;
  void set_position(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gogo.traits.recipes_doc)
 private:
  void set_has_hash();
  void clear_has_hash();
  void set_has_rank();
  void clear_has_rank();
  void set_has_position();
  void clear_has_position();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 hash_;
  float rank_;
  ::google::protobuf::int32 position_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class recipes_trait : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.traits.recipes_trait) */ {
 public:
  recipes_trait();
  virtual ~recipes_trait();

  recipes_trait(const recipes_trait& from);

  inline recipes_trait& operator=(const recipes_trait& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  recipes_trait(recipes_trait&& from) noexcept
    : recipes_trait() {
    *this = ::std::move(from);
  }

  inline recipes_trait& operator=(recipes_trait&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const recipes_trait& default_instance();

  static inline const recipes_trait* internal_default_instance() {
    return reinterpret_cast<const recipes_trait*>(
               &_recipes_trait_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(recipes_trait* other);
  friend void swap(recipes_trait& a, recipes_trait& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline recipes_trait* New() const PROTOBUF_FINAL { return New(NULL); }

  recipes_trait* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const recipes_trait& from);
  void MergeFrom(const recipes_trait& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(recipes_trait* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gogo.traits.recipes_doc docs = 1;
  int docs_size() const;
  void clear_docs();
  static const int kDocsFieldNumber = 1;
  const ::gogo::traits::recipes_doc& docs(int index) const;
  ::gogo::traits::recipes_doc* mutable_docs(int index);
  ::gogo::traits::recipes_doc* add_docs();
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::recipes_doc >*
      mutable_docs();
  const ::google::protobuf::RepeatedPtrField< ::gogo::traits::recipes_doc >&
      docs() const;

  // @@protoc_insertion_point(class_scope:gogo.traits.recipes_trait)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::traits::recipes_doc > docs_;
  friend struct protobuf_traits_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// test_trait

// required int32 x = 1;
inline bool test_trait::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void test_trait::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void test_trait::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void test_trait::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 test_trait::x() const {
  // @@protoc_insertion_point(field_get:gogo.traits.test_trait.x)
  return x_;
}
inline void test_trait::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.test_trait.x)
}

// required int32 y = 2;
inline bool test_trait::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void test_trait::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void test_trait::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void test_trait::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 test_trait::y() const {
  // @@protoc_insertion_point(field_get:gogo.traits.test_trait.y)
  return y_;
}
inline void test_trait::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.test_trait.y)
}

// -------------------------------------------------------------------

// test_aggregation

// required int32 sum_length = 1;
inline bool test_aggregation::has_sum_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void test_aggregation::set_has_sum_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void test_aggregation::clear_has_sum_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void test_aggregation::clear_sum_length() {
  sum_length_ = 0;
  clear_has_sum_length();
}
inline ::google::protobuf::int32 test_aggregation::sum_length() const {
  // @@protoc_insertion_point(field_get:gogo.traits.test_aggregation.sum_length)
  return sum_length_;
}
inline void test_aggregation::set_sum_length(::google::protobuf::int32 value) {
  set_has_sum_length();
  sum_length_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.test_aggregation.sum_length)
}

// -------------------------------------------------------------------

// domain_stat_trait

// repeated uint32 domains = 1 [packed = true];
inline int domain_stat_trait::domains_size() const {
  return domains_.size();
}
inline void domain_stat_trait::clear_domains() {
  domains_.Clear();
}
inline ::google::protobuf::uint32 domain_stat_trait::domains(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.domain_stat_trait.domains)
  return domains_.Get(index);
}
inline void domain_stat_trait::set_domains(int index, ::google::protobuf::uint32 value) {
  domains_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.traits.domain_stat_trait.domains)
}
inline void domain_stat_trait::add_domains(::google::protobuf::uint32 value) {
  domains_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.traits.domain_stat_trait.domains)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
domain_stat_trait::domains() const {
  // @@protoc_insertion_point(field_list:gogo.traits.domain_stat_trait.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
domain_stat_trait::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.domain_stat_trait.domains)
  return &domains_;
}

// repeated uint32 docs = 2 [packed = true];
inline int domain_stat_trait::docs_size() const {
  return docs_.size();
}
inline void domain_stat_trait::clear_docs() {
  docs_.Clear();
}
inline ::google::protobuf::uint32 domain_stat_trait::docs(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.domain_stat_trait.docs)
  return docs_.Get(index);
}
inline void domain_stat_trait::set_docs(int index, ::google::protobuf::uint32 value) {
  docs_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.traits.domain_stat_trait.docs)
}
inline void domain_stat_trait::add_docs(::google::protobuf::uint32 value) {
  docs_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.traits.domain_stat_trait.docs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
domain_stat_trait::docs() const {
  // @@protoc_insertion_point(field_list:gogo.traits.domain_stat_trait.docs)
  return docs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
domain_stat_trait::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.domain_stat_trait.docs)
  return &docs_;
}

// optional uint32 total_docs = 3;
inline bool domain_stat_trait::has_total_docs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void domain_stat_trait::set_has_total_docs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void domain_stat_trait::clear_has_total_docs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void domain_stat_trait::clear_total_docs() {
  total_docs_ = 0u;
  clear_has_total_docs();
}
inline ::google::protobuf::uint32 domain_stat_trait::total_docs() const {
  // @@protoc_insertion_point(field_get:gogo.traits.domain_stat_trait.total_docs)
  return total_docs_;
}
inline void domain_stat_trait::set_total_docs(::google::protobuf::uint32 value) {
  set_has_total_docs();
  total_docs_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.domain_stat_trait.total_docs)
}

// -------------------------------------------------------------------

// shard_domain_pos

// optional uint32 min = 1;
inline bool shard_domain_pos::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shard_domain_pos::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shard_domain_pos::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shard_domain_pos::clear_min() {
  min_ = 0u;
  clear_has_min();
}
inline ::google::protobuf::uint32 shard_domain_pos::min() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_pos.min)
  return min_;
}
inline void shard_domain_pos::set_min(::google::protobuf::uint32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_domain_pos.min)
}

// optional uint32 max = 2;
inline bool shard_domain_pos::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shard_domain_pos::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shard_domain_pos::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shard_domain_pos::clear_max() {
  max_ = 0u;
  clear_has_max();
}
inline ::google::protobuf::uint32 shard_domain_pos::max() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_pos.max)
  return max_;
}
inline void shard_domain_pos::set_max(::google::protobuf::uint32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_domain_pos.max)
}

// optional float avg = 3;
inline bool shard_domain_pos::has_avg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shard_domain_pos::set_has_avg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shard_domain_pos::clear_has_avg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shard_domain_pos::clear_avg() {
  avg_ = 0;
  clear_has_avg();
}
inline float shard_domain_pos::avg() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_pos.avg)
  return avg_;
}
inline void shard_domain_pos::set_avg(float value) {
  set_has_avg();
  avg_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_domain_pos.avg)
}

// optional float var = 4;
inline bool shard_domain_pos::has_var() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void shard_domain_pos::set_has_var() {
  _has_bits_[0] |= 0x00000008u;
}
inline void shard_domain_pos::clear_has_var() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void shard_domain_pos::clear_var() {
  var_ = 0;
  clear_has_var();
}
inline float shard_domain_pos::var() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_pos.var)
  return var_;
}
inline void shard_domain_pos::set_var(float value) {
  set_has_var();
  var_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_domain_pos.var)
}

// -------------------------------------------------------------------

// shard_domain_stat

// required uint32 domain = 1;
inline bool shard_domain_stat::has_domain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shard_domain_stat::set_has_domain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shard_domain_stat::clear_has_domain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shard_domain_stat::clear_domain() {
  domain_ = 0u;
  clear_has_domain();
}
inline ::google::protobuf::uint32 shard_domain_stat::domain() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_stat.domain)
  return domain_;
}
inline void shard_domain_stat::set_domain(::google::protobuf::uint32 value) {
  set_has_domain();
  domain_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_domain_stat.domain)
}

// optional uint32 docs = 2;
inline bool shard_domain_stat::has_docs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shard_domain_stat::set_has_docs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shard_domain_stat::clear_has_docs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shard_domain_stat::clear_docs() {
  docs_ = 0u;
  clear_has_docs();
}
inline ::google::protobuf::uint32 shard_domain_stat::docs() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_stat.docs)
  return docs_;
}
inline void shard_domain_stat::set_docs(::google::protobuf::uint32 value) {
  set_has_docs();
  docs_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_domain_stat.docs)
}

// optional .gogo.traits.shard_domain_pos pos = 3;
inline bool shard_domain_stat::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shard_domain_stat::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shard_domain_stat::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shard_domain_stat::clear_pos() {
  if (pos_ != NULL) pos_->::gogo::traits::shard_domain_pos::Clear();
  clear_has_pos();
}
inline const ::gogo::traits::shard_domain_pos& shard_domain_stat::pos() const {
  const ::gogo::traits::shard_domain_pos* p = pos_;
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_stat.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::traits::shard_domain_pos*>(
      &::gogo::traits::_shard_domain_pos_default_instance_);
}
inline ::gogo::traits::shard_domain_pos* shard_domain_stat::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::gogo::traits::shard_domain_pos;
  }
  // @@protoc_insertion_point(field_mutable:gogo.traits.shard_domain_stat.pos)
  return pos_;
}
inline ::gogo::traits::shard_domain_pos* shard_domain_stat::release_pos() {
  // @@protoc_insertion_point(field_release:gogo.traits.shard_domain_stat.pos)
  clear_has_pos();
  ::gogo::traits::shard_domain_pos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void shard_domain_stat::set_allocated_pos(::gogo::traits::shard_domain_pos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.traits.shard_domain_stat.pos)
}

// -------------------------------------------------------------------

// shard_domain_stat_trait

// repeated .gogo.traits.shard_domain_stat domains = 1;
inline int shard_domain_stat_trait::domains_size() const {
  return domains_.size();
}
inline void shard_domain_stat_trait::clear_domains() {
  domains_.Clear();
}
inline const ::gogo::traits::shard_domain_stat& shard_domain_stat_trait::domains(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_stat_trait.domains)
  return domains_.Get(index);
}
inline ::gogo::traits::shard_domain_stat* shard_domain_stat_trait::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.shard_domain_stat_trait.domains)
  return domains_.Mutable(index);
}
inline ::gogo::traits::shard_domain_stat* shard_domain_stat_trait::add_domains() {
  // @@protoc_insertion_point(field_add:gogo.traits.shard_domain_stat_trait.domains)
  return domains_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::traits::shard_domain_stat >*
shard_domain_stat_trait::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.shard_domain_stat_trait.domains)
  return &domains_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::traits::shard_domain_stat >&
shard_domain_stat_trait::domains() const {
  // @@protoc_insertion_point(field_list:gogo.traits.shard_domain_stat_trait.domains)
  return domains_;
}

// optional uint32 total_docs = 2;
inline bool shard_domain_stat_trait::has_total_docs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shard_domain_stat_trait::set_has_total_docs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shard_domain_stat_trait::clear_has_total_docs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shard_domain_stat_trait::clear_total_docs() {
  total_docs_ = 0u;
  clear_has_total_docs();
}
inline ::google::protobuf::uint32 shard_domain_stat_trait::total_docs() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_stat_trait.total_docs)
  return total_docs_;
}
inline void shard_domain_stat_trait::set_total_docs(::google::protobuf::uint32 value) {
  set_has_total_docs();
  total_docs_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_domain_stat_trait.total_docs)
}

// -------------------------------------------------------------------

// shard_url_stat

// optional uint64 url = 1;
inline bool shard_url_stat::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shard_url_stat::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shard_url_stat::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shard_url_stat::clear_url() {
  url_ = GOOGLE_ULONGLONG(0);
  clear_has_url();
}
inline ::google::protobuf::uint64 shard_url_stat::url() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_url_stat.url)
  return url_;
}
inline void shard_url_stat::set_url(::google::protobuf::uint64 value) {
  set_has_url();
  url_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_url_stat.url)
}

// optional uint32 domain = 2;
inline bool shard_url_stat::has_domain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shard_url_stat::set_has_domain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shard_url_stat::clear_has_domain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shard_url_stat::clear_domain() {
  domain_ = 0u;
  clear_has_domain();
}
inline ::google::protobuf::uint32 shard_url_stat::domain() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_url_stat.domain)
  return domain_;
}
inline void shard_url_stat::set_domain(::google::protobuf::uint32 value) {
  set_has_domain();
  domain_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_url_stat.domain)
}

// optional uint32 pos = 3;
inline bool shard_url_stat::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shard_url_stat::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shard_url_stat::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shard_url_stat::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 shard_url_stat::pos() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_url_stat.pos)
  return pos_;
}
inline void shard_url_stat::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_url_stat.pos)
}

// optional float sq_model_rank = 4;
inline bool shard_url_stat::has_sq_model_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void shard_url_stat::set_has_sq_model_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void shard_url_stat::clear_has_sq_model_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void shard_url_stat::clear_sq_model_rank() {
  sq_model_rank_ = 0;
  clear_has_sq_model_rank();
}
inline float shard_url_stat::sq_model_rank() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_url_stat.sq_model_rank)
  return sq_model_rank_;
}
inline void shard_url_stat::set_sq_model_rank(float value) {
  set_has_sq_model_rank();
  sq_model_rank_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_url_stat.sq_model_rank)
}

// -------------------------------------------------------------------

// shard_url_stat_trait

// repeated .gogo.traits.shard_url_stat urls = 1;
inline int shard_url_stat_trait::urls_size() const {
  return urls_.size();
}
inline void shard_url_stat_trait::clear_urls() {
  urls_.Clear();
}
inline const ::gogo::traits::shard_url_stat& shard_url_stat_trait::urls(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_url_stat_trait.urls)
  return urls_.Get(index);
}
inline ::gogo::traits::shard_url_stat* shard_url_stat_trait::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.shard_url_stat_trait.urls)
  return urls_.Mutable(index);
}
inline ::gogo::traits::shard_url_stat* shard_url_stat_trait::add_urls() {
  // @@protoc_insertion_point(field_add:gogo.traits.shard_url_stat_trait.urls)
  return urls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::traits::shard_url_stat >*
shard_url_stat_trait::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.shard_url_stat_trait.urls)
  return &urls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::traits::shard_url_stat >&
shard_url_stat_trait::urls() const {
  // @@protoc_insertion_point(field_list:gogo.traits.shard_url_stat_trait.urls)
  return urls_;
}

// -------------------------------------------------------------------

// infocard_features

// repeated float features = 1 [packed = true];
inline int infocard_features::features_size() const {
  return features_.size();
}
inline void infocard_features::clear_features() {
  features_.Clear();
}
inline float infocard_features::features(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.infocard_features.features)
  return features_.Get(index);
}
inline void infocard_features::set_features(int index, float value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.traits.infocard_features.features)
}
inline void infocard_features::add_features(float value) {
  features_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.traits.infocard_features.features)
}
inline const ::google::protobuf::RepeatedField< float >&
infocard_features::features() const {
  // @@protoc_insertion_point(field_list:gogo.traits.infocard_features.features)
  return features_;
}
inline ::google::protobuf::RepeatedField< float >*
infocard_features::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.infocard_features.features)
  return &features_;
}

// -------------------------------------------------------------------

// infocard_trait

// repeated uint64 objects = 1 [packed = true];
inline int infocard_trait::objects_size() const {
  return objects_.size();
}
inline void infocard_trait::clear_objects() {
  objects_.Clear();
}
inline ::google::protobuf::uint64 infocard_trait::objects(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.infocard_trait.objects)
  return objects_.Get(index);
}
inline void infocard_trait::set_objects(int index, ::google::protobuf::uint64 value) {
  objects_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.traits.infocard_trait.objects)
}
inline void infocard_trait::add_objects(::google::protobuf::uint64 value) {
  objects_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.traits.infocard_trait.objects)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
infocard_trait::objects() const {
  // @@protoc_insertion_point(field_list:gogo.traits.infocard_trait.objects)
  return objects_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
infocard_trait::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.infocard_trait.objects)
  return &objects_;
}

// repeated float ranks = 2 [packed = true];
inline int infocard_trait::ranks_size() const {
  return ranks_.size();
}
inline void infocard_trait::clear_ranks() {
  ranks_.Clear();
}
inline float infocard_trait::ranks(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.infocard_trait.ranks)
  return ranks_.Get(index);
}
inline void infocard_trait::set_ranks(int index, float value) {
  ranks_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.traits.infocard_trait.ranks)
}
inline void infocard_trait::add_ranks(float value) {
  ranks_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.traits.infocard_trait.ranks)
}
inline const ::google::protobuf::RepeatedField< float >&
infocard_trait::ranks() const {
  // @@protoc_insertion_point(field_list:gogo.traits.infocard_trait.ranks)
  return ranks_;
}
inline ::google::protobuf::RepeatedField< float >*
infocard_trait::mutable_ranks() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.infocard_trait.ranks)
  return &ranks_;
}

// repeated int32 positions = 3 [packed = true];
inline int infocard_trait::positions_size() const {
  return positions_.size();
}
inline void infocard_trait::clear_positions() {
  positions_.Clear();
}
inline ::google::protobuf::int32 infocard_trait::positions(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.infocard_trait.positions)
  return positions_.Get(index);
}
inline void infocard_trait::set_positions(int index, ::google::protobuf::int32 value) {
  positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.traits.infocard_trait.positions)
}
inline void infocard_trait::add_positions(::google::protobuf::int32 value) {
  positions_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.traits.infocard_trait.positions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
infocard_trait::positions() const {
  // @@protoc_insertion_point(field_list:gogo.traits.infocard_trait.positions)
  return positions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
infocard_trait::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.infocard_trait.positions)
  return &positions_;
}

// repeated .gogo.traits.infocard_features features = 4;
inline int infocard_trait::features_size() const {
  return features_.size();
}
inline void infocard_trait::clear_features() {
  features_.Clear();
}
inline const ::gogo::traits::infocard_features& infocard_trait::features(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.infocard_trait.features)
  return features_.Get(index);
}
inline ::gogo::traits::infocard_features* infocard_trait::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.infocard_trait.features)
  return features_.Mutable(index);
}
inline ::gogo::traits::infocard_features* infocard_trait::add_features() {
  // @@protoc_insertion_point(field_add:gogo.traits.infocard_trait.features)
  return features_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::traits::infocard_features >*
infocard_trait::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.infocard_trait.features)
  return &features_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::traits::infocard_features >&
infocard_trait::features() const {
  // @@protoc_insertion_point(field_list:gogo.traits.infocard_trait.features)
  return features_;
}

// repeated .gogo.traits.infocard_trait.markup_source markups = 5 [packed = true];
inline int infocard_trait::markups_size() const {
  return markups_.size();
}
inline void infocard_trait::clear_markups() {
  markups_.Clear();
}
inline ::gogo::traits::infocard_trait_markup_source infocard_trait::markups(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.infocard_trait.markups)
  return static_cast< ::gogo::traits::infocard_trait_markup_source >(markups_.Get(index));
}
inline void infocard_trait::set_markups(int index, ::gogo::traits::infocard_trait_markup_source value) {
  assert(::gogo::traits::infocard_trait_markup_source_IsValid(value));
  markups_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.traits.infocard_trait.markups)
}
inline void infocard_trait::add_markups(::gogo::traits::infocard_trait_markup_source value) {
  assert(::gogo::traits::infocard_trait_markup_source_IsValid(value));
  markups_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.traits.infocard_trait.markups)
}
inline const ::google::protobuf::RepeatedField<int>&
infocard_trait::markups() const {
  // @@protoc_insertion_point(field_list:gogo.traits.infocard_trait.markups)
  return markups_;
}
inline ::google::protobuf::RepeatedField<int>*
infocard_trait::mutable_markups() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.infocard_trait.markups)
  return &markups_;
}

// -------------------------------------------------------------------

// companies_doc

// optional uint64 hash = 1;
inline bool companies_doc::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void companies_doc::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void companies_doc::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void companies_doc::clear_hash() {
  hash_ = GOOGLE_ULONGLONG(0);
  clear_has_hash();
}
inline ::google::protobuf::uint64 companies_doc::hash() const {
  // @@protoc_insertion_point(field_get:gogo.traits.companies_doc.hash)
  return hash_;
}
inline void companies_doc::set_hash(::google::protobuf::uint64 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.companies_doc.hash)
}

// optional float rank = 2;
inline bool companies_doc::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void companies_doc::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void companies_doc::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void companies_doc::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline float companies_doc::rank() const {
  // @@protoc_insertion_point(field_get:gogo.traits.companies_doc.rank)
  return rank_;
}
inline void companies_doc::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.companies_doc.rank)
}

// optional int32 position = 3;
inline bool companies_doc::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void companies_doc::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void companies_doc::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void companies_doc::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 companies_doc::position() const {
  // @@protoc_insertion_point(field_get:gogo.traits.companies_doc.position)
  return position_;
}
inline void companies_doc::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.companies_doc.position)
}

// repeated float features = 4 [packed = true];
inline int companies_doc::features_size() const {
  return features_.size();
}
inline void companies_doc::clear_features() {
  features_.Clear();
}
inline float companies_doc::features(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.companies_doc.features)
  return features_.Get(index);
}
inline void companies_doc::set_features(int index, float value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.traits.companies_doc.features)
}
inline void companies_doc::add_features(float value) {
  features_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.traits.companies_doc.features)
}
inline const ::google::protobuf::RepeatedField< float >&
companies_doc::features() const {
  // @@protoc_insertion_point(field_list:gogo.traits.companies_doc.features)
  return features_;
}
inline ::google::protobuf::RepeatedField< float >*
companies_doc::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.companies_doc.features)
  return &features_;
}

// -------------------------------------------------------------------

// companies_trait

// repeated .gogo.traits.companies_doc docs = 1;
inline int companies_trait::docs_size() const {
  return docs_.size();
}
inline void companies_trait::clear_docs() {
  docs_.Clear();
}
inline const ::gogo::traits::companies_doc& companies_trait::docs(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.companies_trait.docs)
  return docs_.Get(index);
}
inline ::gogo::traits::companies_doc* companies_trait::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.companies_trait.docs)
  return docs_.Mutable(index);
}
inline ::gogo::traits::companies_doc* companies_trait::add_docs() {
  // @@protoc_insertion_point(field_add:gogo.traits.companies_trait.docs)
  return docs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::traits::companies_doc >*
companies_trait::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.companies_trait.docs)
  return &docs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::traits::companies_doc >&
companies_trait::docs() const {
  // @@protoc_insertion_point(field_list:gogo.traits.companies_trait.docs)
  return docs_;
}

// -------------------------------------------------------------------

// color_stat

// required int32 color_id = 1;
inline bool color_stat::has_color_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void color_stat::set_has_color_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void color_stat::clear_has_color_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void color_stat::clear_color_id() {
  color_id_ = 0;
  clear_has_color_id();
}
inline ::google::protobuf::int32 color_stat::color_id() const {
  // @@protoc_insertion_point(field_get:gogo.traits.color_stat.color_id)
  return color_id_;
}
inline void color_stat::set_color_id(::google::protobuf::int32 value) {
  set_has_color_id();
  color_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.color_stat.color_id)
}

// required int32 color_popularity = 2;
inline bool color_stat::has_color_popularity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void color_stat::set_has_color_popularity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void color_stat::clear_has_color_popularity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void color_stat::clear_color_popularity() {
  color_popularity_ = 0;
  clear_has_color_popularity();
}
inline ::google::protobuf::int32 color_stat::color_popularity() const {
  // @@protoc_insertion_point(field_get:gogo.traits.color_stat.color_popularity)
  return color_popularity_;
}
inline void color_stat::set_color_popularity(::google::protobuf::int32 value) {
  set_has_color_popularity();
  color_popularity_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.color_stat.color_popularity)
}

// -------------------------------------------------------------------

// category_stat

// required int64 category_id = 1;
inline bool category_stat::has_category_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void category_stat::set_has_category_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void category_stat::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void category_stat::clear_category_id() {
  category_id_ = GOOGLE_LONGLONG(0);
  clear_has_category_id();
}
inline ::google::protobuf::int64 category_stat::category_id() const {
  // @@protoc_insertion_point(field_get:gogo.traits.category_stat.category_id)
  return category_id_;
}
inline void category_stat::set_category_id(::google::protobuf::int64 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.category_stat.category_id)
}

// required int32 category_popularity = 2;
inline bool category_stat::has_category_popularity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void category_stat::set_has_category_popularity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void category_stat::clear_has_category_popularity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void category_stat::clear_category_popularity() {
  category_popularity_ = 0;
  clear_has_category_popularity();
}
inline ::google::protobuf::int32 category_stat::category_popularity() const {
  // @@protoc_insertion_point(field_get:gogo.traits.category_stat.category_popularity)
  return category_popularity_;
}
inline void category_stat::set_category_popularity(::google::protobuf::int32 value) {
  set_has_category_popularity();
  category_popularity_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.category_stat.category_popularity)
}

// -------------------------------------------------------------------

// size_stat

// required int32 size_id = 1;
inline bool size_stat::has_size_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void size_stat::set_has_size_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void size_stat::clear_has_size_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void size_stat::clear_size_id() {
  size_id_ = 0;
  clear_has_size_id();
}
inline ::google::protobuf::int32 size_stat::size_id() const {
  // @@protoc_insertion_point(field_get:gogo.traits.size_stat.size_id)
  return size_id_;
}
inline void size_stat::set_size_id(::google::protobuf::int32 value) {
  set_has_size_id();
  size_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.size_stat.size_id)
}

// required int32 size_type_id = 2;
inline bool size_stat::has_size_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void size_stat::set_has_size_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void size_stat::clear_has_size_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void size_stat::clear_size_type_id() {
  size_type_id_ = 0;
  clear_has_size_type_id();
}
inline ::google::protobuf::int32 size_stat::size_type_id() const {
  // @@protoc_insertion_point(field_get:gogo.traits.size_stat.size_type_id)
  return size_type_id_;
}
inline void size_stat::set_size_type_id(::google::protobuf::int32 value) {
  set_has_size_type_id();
  size_type_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.size_stat.size_type_id)
}

// required int32 size_popularity = 3;
inline bool size_stat::has_size_popularity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void size_stat::set_has_size_popularity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void size_stat::clear_has_size_popularity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void size_stat::clear_size_popularity() {
  size_popularity_ = 0;
  clear_has_size_popularity();
}
inline ::google::protobuf::int32 size_stat::size_popularity() const {
  // @@protoc_insertion_point(field_get:gogo.traits.size_stat.size_popularity)
  return size_popularity_;
}
inline void size_stat::set_size_popularity(::google::protobuf::int32 value) {
  set_has_size_popularity();
  size_popularity_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.size_stat.size_popularity)
}

// -------------------------------------------------------------------

// torg_china_trait

// optional int32 price_min = 1;
inline bool torg_china_trait::has_price_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void torg_china_trait::set_has_price_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void torg_china_trait::clear_has_price_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void torg_china_trait::clear_price_min() {
  price_min_ = 0;
  clear_has_price_min();
}
inline ::google::protobuf::int32 torg_china_trait::price_min() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.price_min)
  return price_min_;
}
inline void torg_china_trait::set_price_min(::google::protobuf::int32 value) {
  set_has_price_min();
  price_min_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.price_min)
}

// optional int32 price_max = 2;
inline bool torg_china_trait::has_price_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void torg_china_trait::set_has_price_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void torg_china_trait::clear_has_price_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void torg_china_trait::clear_price_max() {
  price_max_ = 0;
  clear_has_price_max();
}
inline ::google::protobuf::int32 torg_china_trait::price_max() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.price_max)
  return price_max_;
}
inline void torg_china_trait::set_price_max(::google::protobuf::int32 value) {
  set_has_price_max();
  price_max_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.price_max)
}

// repeated .gogo.traits.category_stat category_stat_l0 = 3;
inline int torg_china_trait::category_stat_l0_size() const {
  return category_stat_l0_.size();
}
inline void torg_china_trait::clear_category_stat_l0() {
  category_stat_l0_.Clear();
}
inline const ::gogo::traits::category_stat& torg_china_trait::category_stat_l0(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.category_stat_l0)
  return category_stat_l0_.Get(index);
}
inline ::gogo::traits::category_stat* torg_china_trait::mutable_category_stat_l0(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.torg_china_trait.category_stat_l0)
  return category_stat_l0_.Mutable(index);
}
inline ::gogo::traits::category_stat* torg_china_trait::add_category_stat_l0() {
  // @@protoc_insertion_point(field_add:gogo.traits.torg_china_trait.category_stat_l0)
  return category_stat_l0_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >*
torg_china_trait::mutable_category_stat_l0() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.torg_china_trait.category_stat_l0)
  return &category_stat_l0_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >&
torg_china_trait::category_stat_l0() const {
  // @@protoc_insertion_point(field_list:gogo.traits.torg_china_trait.category_stat_l0)
  return category_stat_l0_;
}

// repeated .gogo.traits.category_stat category_stat_l1 = 4;
inline int torg_china_trait::category_stat_l1_size() const {
  return category_stat_l1_.size();
}
inline void torg_china_trait::clear_category_stat_l1() {
  category_stat_l1_.Clear();
}
inline const ::gogo::traits::category_stat& torg_china_trait::category_stat_l1(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.category_stat_l1)
  return category_stat_l1_.Get(index);
}
inline ::gogo::traits::category_stat* torg_china_trait::mutable_category_stat_l1(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.torg_china_trait.category_stat_l1)
  return category_stat_l1_.Mutable(index);
}
inline ::gogo::traits::category_stat* torg_china_trait::add_category_stat_l1() {
  // @@protoc_insertion_point(field_add:gogo.traits.torg_china_trait.category_stat_l1)
  return category_stat_l1_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >*
torg_china_trait::mutable_category_stat_l1() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.torg_china_trait.category_stat_l1)
  return &category_stat_l1_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >&
torg_china_trait::category_stat_l1() const {
  // @@protoc_insertion_point(field_list:gogo.traits.torg_china_trait.category_stat_l1)
  return category_stat_l1_;
}

// repeated .gogo.traits.category_stat category_stat_l2 = 5;
inline int torg_china_trait::category_stat_l2_size() const {
  return category_stat_l2_.size();
}
inline void torg_china_trait::clear_category_stat_l2() {
  category_stat_l2_.Clear();
}
inline const ::gogo::traits::category_stat& torg_china_trait::category_stat_l2(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.category_stat_l2)
  return category_stat_l2_.Get(index);
}
inline ::gogo::traits::category_stat* torg_china_trait::mutable_category_stat_l2(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.torg_china_trait.category_stat_l2)
  return category_stat_l2_.Mutable(index);
}
inline ::gogo::traits::category_stat* torg_china_trait::add_category_stat_l2() {
  // @@protoc_insertion_point(field_add:gogo.traits.torg_china_trait.category_stat_l2)
  return category_stat_l2_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >*
torg_china_trait::mutable_category_stat_l2() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.torg_china_trait.category_stat_l2)
  return &category_stat_l2_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >&
torg_china_trait::category_stat_l2() const {
  // @@protoc_insertion_point(field_list:gogo.traits.torg_china_trait.category_stat_l2)
  return category_stat_l2_;
}

// repeated .gogo.traits.color_stat colors = 6;
inline int torg_china_trait::colors_size() const {
  return colors_.size();
}
inline void torg_china_trait::clear_colors() {
  colors_.Clear();
}
inline const ::gogo::traits::color_stat& torg_china_trait::colors(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.colors)
  return colors_.Get(index);
}
inline ::gogo::traits::color_stat* torg_china_trait::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.torg_china_trait.colors)
  return colors_.Mutable(index);
}
inline ::gogo::traits::color_stat* torg_china_trait::add_colors() {
  // @@protoc_insertion_point(field_add:gogo.traits.torg_china_trait.colors)
  return colors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::traits::color_stat >*
torg_china_trait::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.torg_china_trait.colors)
  return &colors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::traits::color_stat >&
torg_china_trait::colors() const {
  // @@protoc_insertion_point(field_list:gogo.traits.torg_china_trait.colors)
  return colors_;
}

// repeated .gogo.traits.size_stat sizes = 7;
inline int torg_china_trait::sizes_size() const {
  return sizes_.size();
}
inline void torg_china_trait::clear_sizes() {
  sizes_.Clear();
}
inline const ::gogo::traits::size_stat& torg_china_trait::sizes(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.sizes)
  return sizes_.Get(index);
}
inline ::gogo::traits::size_stat* torg_china_trait::mutable_sizes(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.torg_china_trait.sizes)
  return sizes_.Mutable(index);
}
inline ::gogo::traits::size_stat* torg_china_trait::add_sizes() {
  // @@protoc_insertion_point(field_add:gogo.traits.torg_china_trait.sizes)
  return sizes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::traits::size_stat >*
torg_china_trait::mutable_sizes() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.torg_china_trait.sizes)
  return &sizes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::traits::size_stat >&
torg_china_trait::sizes() const {
  // @@protoc_insertion_point(field_list:gogo.traits.torg_china_trait.sizes)
  return sizes_;
}

// optional int32 pbonus_price_min = 8;
inline bool torg_china_trait::has_pbonus_price_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void torg_china_trait::set_has_pbonus_price_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void torg_china_trait::clear_has_pbonus_price_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void torg_china_trait::clear_pbonus_price_min() {
  pbonus_price_min_ = 0;
  clear_has_pbonus_price_min();
}
inline ::google::protobuf::int32 torg_china_trait::pbonus_price_min() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.pbonus_price_min)
  return pbonus_price_min_;
}
inline void torg_china_trait::set_pbonus_price_min(::google::protobuf::int32 value) {
  set_has_pbonus_price_min();
  pbonus_price_min_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.pbonus_price_min)
}

// optional int32 pbonus_price_max = 9;
inline bool torg_china_trait::has_pbonus_price_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void torg_china_trait::set_has_pbonus_price_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void torg_china_trait::clear_has_pbonus_price_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void torg_china_trait::clear_pbonus_price_max() {
  pbonus_price_max_ = 0;
  clear_has_pbonus_price_max();
}
inline ::google::protobuf::int32 torg_china_trait::pbonus_price_max() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.pbonus_price_max)
  return pbonus_price_max_;
}
inline void torg_china_trait::set_pbonus_price_max(::google::protobuf::int32 value) {
  set_has_pbonus_price_max();
  pbonus_price_max_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.pbonus_price_max)
}

// optional int32 price_usd_min = 10;
inline bool torg_china_trait::has_price_usd_min() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void torg_china_trait::set_has_price_usd_min() {
  _has_bits_[0] |= 0x00000010u;
}
inline void torg_china_trait::clear_has_price_usd_min() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void torg_china_trait::clear_price_usd_min() {
  price_usd_min_ = 0;
  clear_has_price_usd_min();
}
inline ::google::protobuf::int32 torg_china_trait::price_usd_min() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.price_usd_min)
  return price_usd_min_;
}
inline void torg_china_trait::set_price_usd_min(::google::protobuf::int32 value) {
  set_has_price_usd_min();
  price_usd_min_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.price_usd_min)
}

// optional int32 price_usd_max = 11;
inline bool torg_china_trait::has_price_usd_max() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void torg_china_trait::set_has_price_usd_max() {
  _has_bits_[0] |= 0x00000020u;
}
inline void torg_china_trait::clear_has_price_usd_max() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void torg_china_trait::clear_price_usd_max() {
  price_usd_max_ = 0;
  clear_has_price_usd_max();
}
inline ::google::protobuf::int32 torg_china_trait::price_usd_max() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.price_usd_max)
  return price_usd_max_;
}
inline void torg_china_trait::set_price_usd_max(::google::protobuf::int32 value) {
  set_has_price_usd_max();
  price_usd_max_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.price_usd_max)
}

// optional int32 price_usd_with_ship_min = 12;
inline bool torg_china_trait::has_price_usd_with_ship_min() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void torg_china_trait::set_has_price_usd_with_ship_min() {
  _has_bits_[0] |= 0x00000040u;
}
inline void torg_china_trait::clear_has_price_usd_with_ship_min() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void torg_china_trait::clear_price_usd_with_ship_min() {
  price_usd_with_ship_min_ = 0;
  clear_has_price_usd_with_ship_min();
}
inline ::google::protobuf::int32 torg_china_trait::price_usd_with_ship_min() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.price_usd_with_ship_min)
  return price_usd_with_ship_min_;
}
inline void torg_china_trait::set_price_usd_with_ship_min(::google::protobuf::int32 value) {
  set_has_price_usd_with_ship_min();
  price_usd_with_ship_min_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.price_usd_with_ship_min)
}

// optional int32 price_usd_with_ship_max = 13;
inline bool torg_china_trait::has_price_usd_with_ship_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void torg_china_trait::set_has_price_usd_with_ship_max() {
  _has_bits_[0] |= 0x00000080u;
}
inline void torg_china_trait::clear_has_price_usd_with_ship_max() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void torg_china_trait::clear_price_usd_with_ship_max() {
  price_usd_with_ship_max_ = 0;
  clear_has_price_usd_with_ship_max();
}
inline ::google::protobuf::int32 torg_china_trait::price_usd_with_ship_max() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.price_usd_with_ship_max)
  return price_usd_with_ship_max_;
}
inline void torg_china_trait::set_price_usd_with_ship_max(::google::protobuf::int32 value) {
  set_has_price_usd_with_ship_max();
  price_usd_with_ship_max_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.price_usd_with_ship_max)
}

// optional int32 price_usd_with_cod_ship_min = 14;
inline bool torg_china_trait::has_price_usd_with_cod_ship_min() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void torg_china_trait::set_has_price_usd_with_cod_ship_min() {
  _has_bits_[0] |= 0x00000100u;
}
inline void torg_china_trait::clear_has_price_usd_with_cod_ship_min() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void torg_china_trait::clear_price_usd_with_cod_ship_min() {
  price_usd_with_cod_ship_min_ = 0;
  clear_has_price_usd_with_cod_ship_min();
}
inline ::google::protobuf::int32 torg_china_trait::price_usd_with_cod_ship_min() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.price_usd_with_cod_ship_min)
  return price_usd_with_cod_ship_min_;
}
inline void torg_china_trait::set_price_usd_with_cod_ship_min(::google::protobuf::int32 value) {
  set_has_price_usd_with_cod_ship_min();
  price_usd_with_cod_ship_min_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.price_usd_with_cod_ship_min)
}

// optional int32 price_usd_with_cod_ship_max = 15;
inline bool torg_china_trait::has_price_usd_with_cod_ship_max() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void torg_china_trait::set_has_price_usd_with_cod_ship_max() {
  _has_bits_[0] |= 0x00000200u;
}
inline void torg_china_trait::clear_has_price_usd_with_cod_ship_max() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void torg_china_trait::clear_price_usd_with_cod_ship_max() {
  price_usd_with_cod_ship_max_ = 0;
  clear_has_price_usd_with_cod_ship_max();
}
inline ::google::protobuf::int32 torg_china_trait::price_usd_with_cod_ship_max() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.price_usd_with_cod_ship_max)
  return price_usd_with_cod_ship_max_;
}
inline void torg_china_trait::set_price_usd_with_cod_ship_max(::google::protobuf::int32 value) {
  set_has_price_usd_with_cod_ship_max();
  price_usd_with_cod_ship_max_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.price_usd_with_cod_ship_max)
}

// -------------------------------------------------------------------

// vk_music_track_trait

// optional int32 official_titles_fully_matched = 1;
inline bool vk_music_track_trait::has_official_titles_fully_matched() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vk_music_track_trait::set_has_official_titles_fully_matched() {
  _has_bits_[0] |= 0x00000001u;
}
inline void vk_music_track_trait::clear_has_official_titles_fully_matched() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void vk_music_track_trait::clear_official_titles_fully_matched() {
  official_titles_fully_matched_ = 0;
  clear_has_official_titles_fully_matched();
}
inline ::google::protobuf::int32 vk_music_track_trait::official_titles_fully_matched() const {
  // @@protoc_insertion_point(field_get:gogo.traits.vk_music_track_trait.official_titles_fully_matched)
  return official_titles_fully_matched_;
}
inline void vk_music_track_trait::set_official_titles_fully_matched(::google::protobuf::int32 value) {
  set_has_official_titles_fully_matched();
  official_titles_fully_matched_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.vk_music_track_trait.official_titles_fully_matched)
}

// -------------------------------------------------------------------

// total_searcher_docs_statistics

// optional int32 same_words_total_docs = 1;
inline bool total_searcher_docs_statistics::has_same_words_total_docs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void total_searcher_docs_statistics::set_has_same_words_total_docs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void total_searcher_docs_statistics::clear_has_same_words_total_docs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void total_searcher_docs_statistics::clear_same_words_total_docs() {
  same_words_total_docs_ = 0;
  clear_has_same_words_total_docs();
}
inline ::google::protobuf::int32 total_searcher_docs_statistics::same_words_total_docs() const {
  // @@protoc_insertion_point(field_get:gogo.traits.total_searcher_docs_statistics.same_words_total_docs)
  return same_words_total_docs_;
}
inline void total_searcher_docs_statistics::set_same_words_total_docs(::google::protobuf::int32 value) {
  set_has_same_words_total_docs();
  same_words_total_docs_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.total_searcher_docs_statistics.same_words_total_docs)
}

// optional int32 total_found_docs_count = 2;
inline bool total_searcher_docs_statistics::has_total_found_docs_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void total_searcher_docs_statistics::set_has_total_found_docs_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void total_searcher_docs_statistics::clear_has_total_found_docs_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void total_searcher_docs_statistics::clear_total_found_docs_count() {
  total_found_docs_count_ = 0;
  clear_has_total_found_docs_count();
}
inline ::google::protobuf::int32 total_searcher_docs_statistics::total_found_docs_count() const {
  // @@protoc_insertion_point(field_get:gogo.traits.total_searcher_docs_statistics.total_found_docs_count)
  return total_found_docs_count_;
}
inline void total_searcher_docs_statistics::set_total_found_docs_count(::google::protobuf::int32 value) {
  set_has_total_found_docs_count();
  total_found_docs_count_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.total_searcher_docs_statistics.total_found_docs_count)
}

// -------------------------------------------------------------------

// recipes_doc

// optional uint64 hash = 1;
inline bool recipes_doc::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void recipes_doc::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void recipes_doc::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void recipes_doc::clear_hash() {
  hash_ = GOOGLE_ULONGLONG(0);
  clear_has_hash();
}
inline ::google::protobuf::uint64 recipes_doc::hash() const {
  // @@protoc_insertion_point(field_get:gogo.traits.recipes_doc.hash)
  return hash_;
}
inline void recipes_doc::set_hash(::google::protobuf::uint64 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.recipes_doc.hash)
}

// optional float rank = 2;
inline bool recipes_doc::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void recipes_doc::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void recipes_doc::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void recipes_doc::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline float recipes_doc::rank() const {
  // @@protoc_insertion_point(field_get:gogo.traits.recipes_doc.rank)
  return rank_;
}
inline void recipes_doc::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.recipes_doc.rank)
}

// optional int32 position = 3;
inline bool recipes_doc::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void recipes_doc::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void recipes_doc::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void recipes_doc::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 recipes_doc::position() const {
  // @@protoc_insertion_point(field_get:gogo.traits.recipes_doc.position)
  return position_;
}
inline void recipes_doc::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.recipes_doc.position)
}

// -------------------------------------------------------------------

// recipes_trait

// repeated .gogo.traits.recipes_doc docs = 1;
inline int recipes_trait::docs_size() const {
  return docs_.size();
}
inline void recipes_trait::clear_docs() {
  docs_.Clear();
}
inline const ::gogo::traits::recipes_doc& recipes_trait::docs(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.recipes_trait.docs)
  return docs_.Get(index);
}
inline ::gogo::traits::recipes_doc* recipes_trait::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.recipes_trait.docs)
  return docs_.Mutable(index);
}
inline ::gogo::traits::recipes_doc* recipes_trait::add_docs() {
  // @@protoc_insertion_point(field_add:gogo.traits.recipes_trait.docs)
  return docs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::traits::recipes_doc >*
recipes_trait::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.recipes_trait.docs)
  return &docs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::traits::recipes_doc >&
recipes_trait::docs() const {
  // @@protoc_insertion_point(field_list:gogo.traits.recipes_trait.docs)
  return docs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace traits
}  // namespace gogo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gogo::traits::infocard_trait_markup_source> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gogo::traits::infocard_trait_markup_source>() {
  return ::gogo::traits::infocard_trait_markup_source_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_traits_2eproto__INCLUDED
