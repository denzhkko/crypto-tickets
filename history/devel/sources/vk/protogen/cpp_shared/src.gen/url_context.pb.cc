// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: url_context.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "url_context.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ns_mailru_spider {
class url_contextDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<url_context>
     _instance;
} _url_context_default_instance_;

namespace protobuf_url_5fcontext_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_context, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_context, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_context, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_context, last_modified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_context, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_context, state_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_context, depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_context, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_context, fetch_forced_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_context, indexed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_context, browse_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(url_context, browse_rank_ts_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(url_context)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_url_context_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "url_context.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _url_context_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_url_context_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021url_context.proto\022\020ns_mailru_spider\"\261\004"
      "\n\013url_context\022\013\n\003url\030\001 \002(\t\022\025\n\rlast_modif"
      "ied\030\002 \002(\003\0224\n\005state\030\003 \002(\0162%.ns_mailru_spi"
      "der.url_context.state_t\022\026\n\016state_duratio"
      "n\030\004 \002(\r\022\r\n\005depth\030\005 \002(\r\022:\n\010language\030\006 \001(\016"
      "2(.ns_mailru_spider.url_context.language"
      "_t\022\024\n\014fetch_forced\030\007 \001(\010\022\017\n\007indexed\030\010 \001("
      "\010\022\023\n\013browse_rank\030\t \001(\r\022\026\n\016browse_rank_ts"
      "\030\n \001(\003\"\243\001\n\007state_t\022\n\n\006us_new\020\000\022\t\n\005us_ok\020"
      "\002\022\n\n\006us_bad\020\003\022\017\n\013us_disabled\020\004\022\016\n\nus_rem"
      "oved\020\005\022\020\n\014us_duplicate\020\006\022\016\n\nus_failure\020\007"
      "\022\r\n\tus_reload\020\010\022\022\n\016us_shingle_dup\020\t\022\017\n\013u"
      "s_redirect\020\n\"k\n\nlanguage_t\022\020\n\014lang_unkno"
      "wn\020\000\022\020\n\014lang_russian\020\001\022\021\n\rlang_cyrillic\020"
      "\002\022\022\n\016lang_bolgarian\020\003\022\022\n\016lang_ukrainian\020"
      "\004B\014B\nUrlContext"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 615);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "url_context.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_url_5fcontext_2eproto

const ::google::protobuf::EnumDescriptor* url_context_state_t_descriptor() {
  protobuf_url_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_url_5fcontext_2eproto::file_level_enum_descriptors[0];
}
bool url_context_state_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const url_context_state_t url_context::us_new;
const url_context_state_t url_context::us_ok;
const url_context_state_t url_context::us_bad;
const url_context_state_t url_context::us_disabled;
const url_context_state_t url_context::us_removed;
const url_context_state_t url_context::us_duplicate;
const url_context_state_t url_context::us_failure;
const url_context_state_t url_context::us_reload;
const url_context_state_t url_context::us_shingle_dup;
const url_context_state_t url_context::us_redirect;
const url_context_state_t url_context::state_t_MIN;
const url_context_state_t url_context::state_t_MAX;
const int url_context::state_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* url_context_language_t_descriptor() {
  protobuf_url_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_url_5fcontext_2eproto::file_level_enum_descriptors[1];
}
bool url_context_language_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const url_context_language_t url_context::lang_unknown;
const url_context_language_t url_context::lang_russian;
const url_context_language_t url_context::lang_cyrillic;
const url_context_language_t url_context::lang_bolgarian;
const url_context_language_t url_context::lang_ukrainian;
const url_context_language_t url_context::language_t_MIN;
const url_context_language_t url_context::language_t_MAX;
const int url_context::language_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int url_context::kUrlFieldNumber;
const int url_context::kLastModifiedFieldNumber;
const int url_context::kStateFieldNumber;
const int url_context::kStateDurationFieldNumber;
const int url_context::kDepthFieldNumber;
const int url_context::kLanguageFieldNumber;
const int url_context::kFetchForcedFieldNumber;
const int url_context::kIndexedFieldNumber;
const int url_context::kBrowseRankFieldNumber;
const int url_context::kBrowseRankTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

url_context::url_context()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_url_5fcontext_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns_mailru_spider.url_context)
}
url_context::url_context(const url_context& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&last_modified_, &from.last_modified_,
    static_cast<size_t>(reinterpret_cast<char*>(&browse_rank_ts_) -
    reinterpret_cast<char*>(&last_modified_)) + sizeof(browse_rank_ts_));
  // @@protoc_insertion_point(copy_constructor:ns_mailru_spider.url_context)
}

void url_context::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_modified_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&browse_rank_ts_) -
      reinterpret_cast<char*>(&last_modified_)) + sizeof(browse_rank_ts_));
}

url_context::~url_context() {
  // @@protoc_insertion_point(destructor:ns_mailru_spider.url_context)
  SharedDtor();
}

void url_context::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void url_context::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* url_context::descriptor() {
  protobuf_url_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_url_5fcontext_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const url_context& url_context::default_instance() {
  protobuf_url_5fcontext_2eproto::InitDefaults();
  return *internal_default_instance();
}

url_context* url_context::New(::google::protobuf::Arena* arena) const {
  url_context* n = new url_context;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void url_context::Clear() {
// @@protoc_insertion_point(message_clear_start:ns_mailru_spider.url_context)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&last_modified_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&indexed_) -
        reinterpret_cast<char*>(&last_modified_)) + sizeof(indexed_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&browse_rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&browse_rank_ts_) -
        reinterpret_cast<char*>(&browse_rank_)) + sizeof(browse_rank_ts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool url_context::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns_mailru_spider.url_context)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ns_mailru_spider.url_context.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_modified = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_last_modified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_modified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ns_mailru_spider.url_context.state_t state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ns_mailru_spider::url_context_state_t_IsValid(value)) {
            set_state(static_cast< ::ns_mailru_spider::url_context_state_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 state_duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_state_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 depth = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ns_mailru_spider.url_context.language_t language = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ns_mailru_spider::url_context_language_t_IsValid(value)) {
            set_language(static_cast< ::ns_mailru_spider::url_context_language_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fetch_forced = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_fetch_forced();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_forced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool indexed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_indexed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &indexed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 browse_rank = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_browse_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browse_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 browse_rank_ts = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_browse_rank_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &browse_rank_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns_mailru_spider.url_context)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns_mailru_spider.url_context)
  return false;
#undef DO_
}

void url_context::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns_mailru_spider.url_context)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ns_mailru_spider.url_context.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required int64 last_modified = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_modified(), output);
  }

  // required .ns_mailru_spider.url_context.state_t state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // required uint32 state_duration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->state_duration(), output);
  }

  // required uint32 depth = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->depth(), output);
  }

  // optional .ns_mailru_spider.url_context.language_t language = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->language(), output);
  }

  // optional bool fetch_forced = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fetch_forced(), output);
  }

  // optional bool indexed = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->indexed(), output);
  }

  // optional uint32 browse_rank = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->browse_rank(), output);
  }

  // optional int64 browse_rank_ts = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->browse_rank_ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ns_mailru_spider.url_context)
}

::google::protobuf::uint8* url_context::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ns_mailru_spider.url_context)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ns_mailru_spider.url_context.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required int64 last_modified = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_modified(), target);
  }

  // required .ns_mailru_spider.url_context.state_t state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // required uint32 state_duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->state_duration(), target);
  }

  // required uint32 depth = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->depth(), target);
  }

  // optional .ns_mailru_spider.url_context.language_t language = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->language(), target);
  }

  // optional bool fetch_forced = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fetch_forced(), target);
  }

  // optional bool indexed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->indexed(), target);
  }

  // optional uint32 browse_rank = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->browse_rank(), target);
  }

  // optional int64 browse_rank_ts = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->browse_rank_ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns_mailru_spider.url_context)
  return target;
}

size_t url_context::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ns_mailru_spider.url_context)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_last_modified()) {
    // required int64 last_modified = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_modified());
  }

  if (has_state()) {
    // required .ns_mailru_spider.url_context.state_t state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_state_duration()) {
    // required uint32 state_duration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state_duration());
  }

  if (has_depth()) {
    // required uint32 depth = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->depth());
  }

  return total_size;
}
size_t url_context::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns_mailru_spider.url_context)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required int64 last_modified = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_modified());

    // required .ns_mailru_spider.url_context.state_t state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required uint32 state_duration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state_duration());

    // required uint32 depth = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->depth());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional .ns_mailru_spider.url_context.language_t language = 6;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
    }

    // optional bool fetch_forced = 7;
    if (has_fetch_forced()) {
      total_size += 1 + 1;
    }

    // optional bool indexed = 8;
    if (has_indexed()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 browse_rank = 9;
    if (has_browse_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browse_rank());
    }

    // optional int64 browse_rank_ts = 10;
    if (has_browse_rank_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->browse_rank_ts());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void url_context::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns_mailru_spider.url_context)
  GOOGLE_DCHECK_NE(&from, this);
  const url_context* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const url_context>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns_mailru_spider.url_context)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns_mailru_spider.url_context)
    MergeFrom(*source);
  }
}

void url_context::MergeFrom(const url_context& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns_mailru_spider.url_context)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      last_modified_ = from.last_modified_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_duration_ = from.state_duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      depth_ = from.depth_;
    }
    if (cached_has_bits & 0x00000020u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000040u) {
      fetch_forced_ = from.fetch_forced_;
    }
    if (cached_has_bits & 0x00000080u) {
      indexed_ = from.indexed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      browse_rank_ = from.browse_rank_;
    }
    if (cached_has_bits & 0x00000200u) {
      browse_rank_ts_ = from.browse_rank_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void url_context::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns_mailru_spider.url_context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void url_context::CopyFrom(const url_context& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns_mailru_spider.url_context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool url_context::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void url_context::Swap(url_context* other) {
  if (other == this) return;
  InternalSwap(other);
}
void url_context::InternalSwap(url_context* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(last_modified_, other->last_modified_);
  swap(state_, other->state_);
  swap(state_duration_, other->state_duration_);
  swap(depth_, other->depth_);
  swap(language_, other->language_);
  swap(fetch_forced_, other->fetch_forced_);
  swap(indexed_, other->indexed_);
  swap(browse_rank_, other->browse_rank_);
  swap(browse_rank_ts_, other->browse_rank_ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata url_context::GetMetadata() const {
  protobuf_url_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_url_5fcontext_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// url_context

// required string url = 1;
bool url_context::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void url_context::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void url_context::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void url_context::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& url_context::url() const {
  // @@protoc_insertion_point(field_get:ns_mailru_spider.url_context.url)
  return url_.GetNoArena();
}
void url_context::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ns_mailru_spider.url_context.url)
}
#if LANG_CXX11
void url_context::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ns_mailru_spider.url_context.url)
}
#endif
void url_context::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ns_mailru_spider.url_context.url)
}
void url_context::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ns_mailru_spider.url_context.url)
}
::std::string* url_context::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ns_mailru_spider.url_context.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* url_context::release_url() {
  // @@protoc_insertion_point(field_release:ns_mailru_spider.url_context.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void url_context::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ns_mailru_spider.url_context.url)
}

// required int64 last_modified = 2;
bool url_context::has_last_modified() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void url_context::set_has_last_modified() {
  _has_bits_[0] |= 0x00000002u;
}
void url_context::clear_has_last_modified() {
  _has_bits_[0] &= ~0x00000002u;
}
void url_context::clear_last_modified() {
  last_modified_ = GOOGLE_LONGLONG(0);
  clear_has_last_modified();
}
::google::protobuf::int64 url_context::last_modified() const {
  // @@protoc_insertion_point(field_get:ns_mailru_spider.url_context.last_modified)
  return last_modified_;
}
void url_context::set_last_modified(::google::protobuf::int64 value) {
  set_has_last_modified();
  last_modified_ = value;
  // @@protoc_insertion_point(field_set:ns_mailru_spider.url_context.last_modified)
}

// required .ns_mailru_spider.url_context.state_t state = 3;
bool url_context::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void url_context::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
void url_context::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void url_context::clear_state() {
  state_ = 0;
  clear_has_state();
}
::ns_mailru_spider::url_context_state_t url_context::state() const {
  // @@protoc_insertion_point(field_get:ns_mailru_spider.url_context.state)
  return static_cast< ::ns_mailru_spider::url_context_state_t >(state_);
}
void url_context::set_state(::ns_mailru_spider::url_context_state_t value) {
  assert(::ns_mailru_spider::url_context_state_t_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:ns_mailru_spider.url_context.state)
}

// required uint32 state_duration = 4;
bool url_context::has_state_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void url_context::set_has_state_duration() {
  _has_bits_[0] |= 0x00000008u;
}
void url_context::clear_has_state_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
void url_context::clear_state_duration() {
  state_duration_ = 0u;
  clear_has_state_duration();
}
::google::protobuf::uint32 url_context::state_duration() const {
  // @@protoc_insertion_point(field_get:ns_mailru_spider.url_context.state_duration)
  return state_duration_;
}
void url_context::set_state_duration(::google::protobuf::uint32 value) {
  set_has_state_duration();
  state_duration_ = value;
  // @@protoc_insertion_point(field_set:ns_mailru_spider.url_context.state_duration)
}

// required uint32 depth = 5;
bool url_context::has_depth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void url_context::set_has_depth() {
  _has_bits_[0] |= 0x00000010u;
}
void url_context::clear_has_depth() {
  _has_bits_[0] &= ~0x00000010u;
}
void url_context::clear_depth() {
  depth_ = 0u;
  clear_has_depth();
}
::google::protobuf::uint32 url_context::depth() const {
  // @@protoc_insertion_point(field_get:ns_mailru_spider.url_context.depth)
  return depth_;
}
void url_context::set_depth(::google::protobuf::uint32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:ns_mailru_spider.url_context.depth)
}

// optional .ns_mailru_spider.url_context.language_t language = 6;
bool url_context::has_language() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void url_context::set_has_language() {
  _has_bits_[0] |= 0x00000020u;
}
void url_context::clear_has_language() {
  _has_bits_[0] &= ~0x00000020u;
}
void url_context::clear_language() {
  language_ = 0;
  clear_has_language();
}
::ns_mailru_spider::url_context_language_t url_context::language() const {
  // @@protoc_insertion_point(field_get:ns_mailru_spider.url_context.language)
  return static_cast< ::ns_mailru_spider::url_context_language_t >(language_);
}
void url_context::set_language(::ns_mailru_spider::url_context_language_t value) {
  assert(::ns_mailru_spider::url_context_language_t_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:ns_mailru_spider.url_context.language)
}

// optional bool fetch_forced = 7;
bool url_context::has_fetch_forced() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void url_context::set_has_fetch_forced() {
  _has_bits_[0] |= 0x00000040u;
}
void url_context::clear_has_fetch_forced() {
  _has_bits_[0] &= ~0x00000040u;
}
void url_context::clear_fetch_forced() {
  fetch_forced_ = false;
  clear_has_fetch_forced();
}
bool url_context::fetch_forced() const {
  // @@protoc_insertion_point(field_get:ns_mailru_spider.url_context.fetch_forced)
  return fetch_forced_;
}
void url_context::set_fetch_forced(bool value) {
  set_has_fetch_forced();
  fetch_forced_ = value;
  // @@protoc_insertion_point(field_set:ns_mailru_spider.url_context.fetch_forced)
}

// optional bool indexed = 8;
bool url_context::has_indexed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void url_context::set_has_indexed() {
  _has_bits_[0] |= 0x00000080u;
}
void url_context::clear_has_indexed() {
  _has_bits_[0] &= ~0x00000080u;
}
void url_context::clear_indexed() {
  indexed_ = false;
  clear_has_indexed();
}
bool url_context::indexed() const {
  // @@protoc_insertion_point(field_get:ns_mailru_spider.url_context.indexed)
  return indexed_;
}
void url_context::set_indexed(bool value) {
  set_has_indexed();
  indexed_ = value;
  // @@protoc_insertion_point(field_set:ns_mailru_spider.url_context.indexed)
}

// optional uint32 browse_rank = 9;
bool url_context::has_browse_rank() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void url_context::set_has_browse_rank() {
  _has_bits_[0] |= 0x00000100u;
}
void url_context::clear_has_browse_rank() {
  _has_bits_[0] &= ~0x00000100u;
}
void url_context::clear_browse_rank() {
  browse_rank_ = 0u;
  clear_has_browse_rank();
}
::google::protobuf::uint32 url_context::browse_rank() const {
  // @@protoc_insertion_point(field_get:ns_mailru_spider.url_context.browse_rank)
  return browse_rank_;
}
void url_context::set_browse_rank(::google::protobuf::uint32 value) {
  set_has_browse_rank();
  browse_rank_ = value;
  // @@protoc_insertion_point(field_set:ns_mailru_spider.url_context.browse_rank)
}

// optional int64 browse_rank_ts = 10;
bool url_context::has_browse_rank_ts() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void url_context::set_has_browse_rank_ts() {
  _has_bits_[0] |= 0x00000200u;
}
void url_context::clear_has_browse_rank_ts() {
  _has_bits_[0] &= ~0x00000200u;
}
void url_context::clear_browse_rank_ts() {
  browse_rank_ts_ = GOOGLE_LONGLONG(0);
  clear_has_browse_rank_ts();
}
::google::protobuf::int64 url_context::browse_rank_ts() const {
  // @@protoc_insertion_point(field_get:ns_mailru_spider.url_context.browse_rank_ts)
  return browse_rank_ts_;
}
void url_context::set_browse_rank_ts(::google::protobuf::int64 value) {
  set_has_browse_rank_ts();
  browse_rank_ts_ = value;
  // @@protoc_insertion_point(field_set:ns_mailru_spider.url_context.browse_rank_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ns_mailru_spider

// @@protoc_insertion_point(global_scope)
