// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "video.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class VideoThumbnailDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoThumbnail>
     _instance;
} _VideoThumbnail_default_instance_;
class StatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Status>
     _instance;
} _Status_default_instance_;
class VideoImportDocDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoImportDoc>
     _instance;
} _VideoImportDoc_default_instance_;
class IndexedVideoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IndexedVideo>
     _instance;
} _IndexedVideo_default_instance_;
class FastVideoImportDocDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FastVideoImportDoc>
     _instance;
} _FastVideoImportDoc_default_instance_;
class MovieMetadataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MovieMetadata>
     _instance;
} _MovieMetadata_default_instance_;
class MoviesClassificationDocDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MoviesClassificationDoc>
     _instance;
} _MoviesClassificationDoc_default_instance_;
class YouTubeRecommendationsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<YouTubeRecommendations>
     _instance;
} _YouTubeRecommendations_default_instance_;
class VideoMarkupHtmlInputDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoMarkupHtmlInput>
     _instance;
} _VideoMarkupHtmlInput_default_instance_;
class VideoMarkupDescriptionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoMarkupDescription>
     _instance;
} _VideoMarkupDescription_default_instance_;
class VideoMarkupOpenGraphDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoMarkupOpenGraph>
     _instance;
} _VideoMarkupOpenGraph_default_instance_;
class VideoMarkupSchemaOrgDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoMarkupSchemaOrg>
     _instance;
} _VideoMarkupSchemaOrg_default_instance_;
class VideoMarkupTwitterCardDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoMarkupTwitterCard>
     _instance;
} _VideoMarkupTwitterCard_default_instance_;
class VideoMarkupHtml5VideoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoMarkupHtml5Video>
     _instance;
} _VideoMarkupHtml5Video_default_instance_;
class RecoBuildInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecoBuildInfo>
     _instance;
} _RecoBuildInfo_default_instance_;
class VkVideoViewDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkVideoView>
     _instance;
} _VkVideoView_default_instance_;
class VideoViewDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoView>
     _instance;
} _VideoView_default_instance_;
class VideoViewsListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoViewsList>
     _instance;
} _VideoViewsList_default_instance_;
class VideoViewForRecsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoViewForRecs>
     _instance;
} _VideoViewForRecs_default_instance_;
class VkVideoSessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkVideoSession>
     _instance;
} _VkVideoSession_default_instance_;
class VideoJointWatchesDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoJointWatchesData>
     _instance;
} _VideoJointWatchesData_default_instance_;
class VkSessionOrVideoInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkSessionOrVideoInfo>
     _instance;
} _VkSessionOrVideoInfo_default_instance_;
class VkVideoIdsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkVideoIds>
     _instance;
} _VkVideoIds_default_instance_;
class SeriesEpisodeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeriesEpisode>
     _instance;
} _SeriesEpisode_default_instance_;

namespace protobuf_video_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[24];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[14];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoThumbnail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoThumbnail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoThumbnail, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoThumbnail, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoThumbnail, video_url_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, failscount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, checktype_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, isdeleted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, urlvideo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, urlpreview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, rawpreviewdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, adult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, contenthash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, legal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, shottime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, hd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, paid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, regreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, fee_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, feecurrency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, userurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, usernick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, usermail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, albumdescription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, albumcommentcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, albumid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, albumname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, albumurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, originalalbumtitle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, statvotes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, statlikes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, statdislikes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, statcommentscount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, statviews_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, statrating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, referenceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, originalthumbwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, originalthumbheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, importtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, sourceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, hasplayer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, episode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, videotype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, season_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, seriesid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, finishedserial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, byte_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, metadatasourceurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, full_movie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, full_hd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, allowinfastbase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, contentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, livestream_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, exclusiveprovider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, protobufsourcetypeflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, allow_embed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, youtubehash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, channelid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, userid64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, livevideostate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, extplatform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, videoqualityoptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, reposts_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, group_is_closed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, group_is_verified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, group_members_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, group_trending_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, dzen_certain_grade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, video_orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, dzen_exists_in_reco_snapshot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, subscribers_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, dzen_video_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, user_is_verified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, user_subscribers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, adult_reports_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, is_probably_porn_by_vk_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, user_domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, is_good_film_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, is_good_cartoon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, is_good_serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, is_update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, is_licensed_content_vk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, content_hash_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, similarity_cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, contentidstring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, united_video_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, is_promo_author_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, videoqualityoptionsvk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, is_official_music_clip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, is_external_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, external_link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, audio_title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, audio_performer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImportDoc, hashtags_),
  0,
  26,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  27,
  25,
  30,
  31,
  28,
  32,
  33,
  29,
  40,
  41,
  34,
  35,
  36,
  5,
  6,
  7,
  8,
  37,
  38,
  9,
  10,
  22,
  39,
  62,
  63,
  44,
  46,
  45,
  11,
  47,
  49,
  48,
  50,
  42,
  51,
  12,
  13,
  52,
  53,
  54,
  56,
  43,
  55,
  14,
  57,
  58,
  59,
  61,
  64,
  65,
  66,
  60,
  15,
  16,
  68,
  67,
  17,
  ~0u,
  69,
  71,
  72,
  70,
  73,
  91,
  92,
  74,
  76,
  90,
  77,
  75,
  80,
  78,
  18,
  79,
  82,
  83,
  84,
  85,
  19,
  81,
  20,
  89,
  86,
  ~0u,
  87,
  88,
  21,
  23,
  24,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedVideo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedVideo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedVideo, video_import_doc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedVideo, movie_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedVideo, is_porn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedVideo, preview_mb_num_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastVideoImportDoc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastVideoImportDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastVideoImportDoc, video_import_doc_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, original_title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, director_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, producer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, actors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, genre_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, imdb_rating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, release_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, premiere_ru_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieMetadata, afisha_id_),
  0,
  1,
  8,
  14,
  9,
  2,
  3,
  4,
  5,
  6,
  7,
  13,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoviesClassificationDoc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoviesClassificationDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoviesClassificationDoc, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoviesClassificationDoc, url_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouTubeRecommendations, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouTubeRecommendations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouTubeRecommendations, recommendations_ids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupHtmlInput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupHtmlInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupHtmlInput, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupHtmlInput, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupHtmlInput, enc_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupDescription, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupDescription, video_markup_detected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupDescription, open_graph_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupDescription, schema_org_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupDescription, twitter_card_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupDescription, html5_video_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupDescription, number_of_unparsed_open_graph_videos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupDescription, number_of_unparsed_schema_org_videos_),
  2,
  0,
  ~0u,
  1,
  ~0u,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, page_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, preview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, video_player_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, video_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, adult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, hd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, full_hd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, season_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, episode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, allow_embed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupOpenGraph, upload_date_iso8601_),
  0,
  1,
  2,
  3,
  4,
  7,
  8,
  9,
  5,
  10,
  11,
  12,
  14,
  15,
  13,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupSchemaOrg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupSchemaOrg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupSchemaOrg, declaration_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupSchemaOrg, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupSchemaOrg, page_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupSchemaOrg, preview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupSchemaOrg, video_player_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupSchemaOrg, video_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupSchemaOrg, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupSchemaOrg, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupSchemaOrg, duration_iso8601_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupSchemaOrg, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupSchemaOrg, is_family_friendly_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupSchemaOrg, paid_),
  11,
  0,
  1,
  2,
  3,
  4,
  7,
  8,
  5,
  6,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupTwitterCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupTwitterCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupTwitterCard, card_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupTwitterCard, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupTwitterCard, page_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupTwitterCard, preview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupTwitterCard, video_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupTwitterCard, video_player_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupTwitterCard, stream_player_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupTwitterCard, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupTwitterCard, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupTwitterCard, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupTwitterCard, description_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  9,
  10,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupHtml5Video, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoMarkupHtml5Video, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoBuildInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoBuildInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoBuildInfo, url_recommended_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoBuildInfo, recommended_for_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoBuildInfo, indexed_video_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoView, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoView, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoView, referrer_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoView, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoView, viewed_part_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoView, our_recommendations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoView, video_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoView, video_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoView, event_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoView, ref_),
  4,
  0,
  6,
  5,
  8,
  1,
  3,
  7,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoView, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoView, mrcu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoView, video_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoView, video_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoView, event_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoView, query_),
  0,
  1,
  3,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoViewsList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoViewsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoViewsList, views_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoViewForRecs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoViewForRecs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoViewForRecs, video_url_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoSession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoSession, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoSession, is_male_session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoSession, views_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoJointWatchesData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoJointWatchesData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoJointWatchesData, common_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoJointWatchesData, highly_recommended_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkSessionOrVideoInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkSessionOrVideoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkSessionOrVideoInfo, video_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkSessionOrVideoInfo, is_indexed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkSessionOrVideoInfo, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkSessionOrVideoInfo, is_male_session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkSessionOrVideoInfo, view_),
  0,
  3,
  2,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoIds, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkVideoIds, ids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesEpisode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesEpisode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesEpisode, series_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesEpisode, season_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesEpisode, episode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesEpisode, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesEpisode, sourceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesEpisode, video_table_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesEpisode, trusted_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesEpisode, hosting_),
  2,
  3,
  4,
  5,
  6,
  0,
  7,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(VideoThumbnail)},
  { 11, 20, sizeof(Status)},
  { 24, 127, sizeof(VideoImportDoc)},
  { 225, 234, sizeof(IndexedVideo)},
  { 238, 244, sizeof(FastVideoImportDoc)},
  { 245, 265, sizeof(MovieMetadata)},
  { 280, 287, sizeof(MoviesClassificationDoc)},
  { 289, 295, sizeof(YouTubeRecommendations)},
  { 296, 304, sizeof(VideoMarkupHtmlInput)},
  { 307, 319, sizeof(VideoMarkupDescription)},
  { 326, 347, sizeof(VideoMarkupOpenGraph)},
  { 363, 380, sizeof(VideoMarkupSchemaOrg)},
  { 392, 408, sizeof(VideoMarkupTwitterCard)},
  { 419, 424, sizeof(VideoMarkupHtml5Video)},
  { 424, 432, sizeof(RecoBuildInfo)},
  { 435, 449, sizeof(VkVideoView)},
  { 458, 468, sizeof(VideoView)},
  { 473, 479, sizeof(VideoViewsList)},
  { 480, 486, sizeof(VideoViewForRecs)},
  { 487, 495, sizeof(VkVideoSession)},
  { 498, 505, sizeof(VideoJointWatchesData)},
  { 507, 517, sizeof(VkSessionOrVideoInfo)},
  { 522, 528, sizeof(VkVideoIds)},
  { 529, 542, sizeof(SeriesEpisode)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoThumbnail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoImportDoc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IndexedVideo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FastVideoImportDoc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MovieMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MoviesClassificationDoc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YouTubeRecommendations_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoMarkupHtmlInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoMarkupDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoMarkupOpenGraph_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoMarkupSchemaOrg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoMarkupTwitterCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoMarkupHtml5Video_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecoBuildInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkVideoView_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoView_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoViewsList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoViewForRecs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkVideoSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoJointWatchesData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkSessionOrVideoInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkVideoIds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeriesEpisode_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "video.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 24);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::InitDefaults();
  _VideoThumbnail_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoThumbnail_default_instance_);_Status_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Status_default_instance_);_VideoImportDoc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoImportDoc_default_instance_);_IndexedVideo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IndexedVideo_default_instance_);_FastVideoImportDoc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FastVideoImportDoc_default_instance_);_MovieMetadata_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MovieMetadata_default_instance_);_MoviesClassificationDoc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MoviesClassificationDoc_default_instance_);_YouTubeRecommendations_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_YouTubeRecommendations_default_instance_);_VideoMarkupHtmlInput_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoMarkupHtmlInput_default_instance_);_VideoMarkupDescription_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoMarkupDescription_default_instance_);_VideoMarkupOpenGraph_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoMarkupOpenGraph_default_instance_);_VideoMarkupSchemaOrg_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoMarkupSchemaOrg_default_instance_);_VideoMarkupTwitterCard_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoMarkupTwitterCard_default_instance_);_VideoMarkupHtml5Video_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoMarkupHtml5Video_default_instance_);_RecoBuildInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecoBuildInfo_default_instance_);_VkVideoView_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkVideoView_default_instance_);_VideoView_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoView_default_instance_);_VideoViewsList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoViewsList_default_instance_);_VideoViewForRecs_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoViewForRecs_default_instance_);_VkVideoSession_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkVideoSession_default_instance_);_VideoJointWatchesData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoJointWatchesData_default_instance_);_VkSessionOrVideoInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkSessionOrVideoInfo_default_instance_);_VkVideoIds_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkVideoIds_default_instance_);_SeriesEpisode_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeriesEpisode_default_instance_);_IndexedVideo_default_instance_._instance.get_mutable()->video_import_doc_ = const_cast< ::ru::mail::go::webbase::blobs::VideoImportDoc*>(
      ::ru::mail::go::webbase::blobs::VideoImportDoc::internal_default_instance());
  _IndexedVideo_default_instance_._instance.get_mutable()->movie_metadata_ = const_cast< ::ru::mail::go::webbase::blobs::MovieMetadata*>(
      ::ru::mail::go::webbase::blobs::MovieMetadata::internal_default_instance());
  _FastVideoImportDoc_default_instance_._instance.get_mutable()->video_import_doc_ = const_cast< ::ru::mail::go::webbase::blobs::VideoImportDoc*>(
      ::ru::mail::go::webbase::blobs::VideoImportDoc::internal_default_instance());
  _MoviesClassificationDoc_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::ru::mail::go::webbase::blobs::MovieMetadata*>(
      ::ru::mail::go::webbase::blobs::MovieMetadata::internal_default_instance());
  _VideoMarkupDescription_default_instance_._instance.get_mutable()->open_graph_ = const_cast< ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph*>(
      ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph::internal_default_instance());
  _VideoMarkupDescription_default_instance_._instance.get_mutable()->twitter_card_ = const_cast< ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard*>(
      ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard::internal_default_instance());
  _RecoBuildInfo_default_instance_._instance.get_mutable()->indexed_video_ = const_cast< ::ru::mail::go::webbase::blobs::IndexedVideo*>(
      ::ru::mail::go::webbase::blobs::IndexedVideo::internal_default_instance());
  _VkVideoView_default_instance_._instance.get_mutable()->video_metadata_ = const_cast< ::ru::mail::go::webbase::blobs::VideoImportDoc*>(
      ::ru::mail::go::webbase::blobs::VideoImportDoc::internal_default_instance());
  _VideoView_default_instance_._instance.get_mutable()->video_metadata_ = const_cast< ::ru::mail::go::webbase::blobs::VideoImportDoc*>(
      ::ru::mail::go::webbase::blobs::VideoImportDoc::internal_default_instance());
  _VkSessionOrVideoInfo_default_instance_._instance.get_mutable()->video_metadata_ = const_cast< ::ru::mail::go::webbase::blobs::VideoImportDoc*>(
      ::ru::mail::go::webbase::blobs::VideoImportDoc::internal_default_instance());
  _VkSessionOrVideoInfo_default_instance_._instance.get_mutable()->view_ = const_cast< ::ru::mail::go::webbase::blobs::VkVideoView*>(
      ::ru::mail::go::webbase::blobs::VkVideoView::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013video.proto\022\030ru.mail.go.webbase.blobs\032"
      "\024document_enums.proto\"\?\n\016VideoThumbnail\022"
      "\014\n\004data\030\001 \002(\014\022\014\n\004hash\030\002 \002(\t\022\021\n\tvideo_url"
      "\030\003 \002(\t\"}\n\006Status\022\017\n\007success\030\001 \001(\010\022\021\n\ttim"
      "estamp\030\002 \001(\003\022\022\n\nfailsCount\030\003 \001(\005\022;\n\tchec"
      "kType\030\004 \001(\0162(.ru.mail.go.webbase.blobs.V"
      "ideoCheckType\"\213\024\n\016VideoImportDoc\022\014\n\004name"
      "\030\001 \001(\t\022\021\n\tisDeleted\030\002 \001(\010\022\020\n\010urlVideo\030\003 "
      "\001(\t\022\022\n\nurlPreview\030\004 \001(\t\022\026\n\016rawPreviewDat"
      "a\030\005 \001(\014\022\023\n\013description\030\006 \001(\t\022\020\n\010category"
      "\030\007 \003(\t\022\013\n\003tag\030\010 \003(\t\022\r\n\005adult\030\t \001(\010\022\023\n\013co"
      "ntentHash\030\n \001(\003\022\020\n\010duration\030\013 \001(\005\022\n\n\002id\030"
      "\014 \001(\003\022\r\n\005legal\030\r \001(\010\022\020\n\010shottime\030\016 \001(\003\022\014"
      "\n\004time\030\017 \001(\003\022\n\n\002hd\030\020 \001(\010\022\014\n\004paid\030\021 \001(\010\022\016"
      "\n\006regreq\030\022 \001(\010\022\013\n\003fee\030\023 \001(\005\022\023\n\013feeCurren"
      "cy\030\024 \001(\005\022\016\n\006userId\030\025 \001(\005\022\017\n\007userUrl\030\026 \001("
      "\t\022\020\n\010userNick\030\027 \001(\t\022\020\n\010userMail\030\030 \001(\t\022\030\n"
      "\020albumDescription\030\031 \001(\t\022\031\n\021albumCommentC"
      "ount\030\032 \001(\005\022\017\n\007albumId\030\033 \001(\005\022\021\n\talbumName"
      "\030\034 \001(\t\022\020\n\010albumUrl\030\035 \001(\t\022\032\n\022originalAlbu"
      "mTitle\030` \001(\t\022\021\n\tstatVotes\030\036 \001(\005\022\021\n\tstatL"
      "ikes\0307 \001(\005\022\024\n\014statDislikes\0308 \001(\005\022\031\n\021stat"
      "CommentsCount\030\037 \001(\005\022\021\n\tstatViews\030  \001(\005\022\022"
      "\n\nstatRating\030! \001(\003\022\023\n\013referenceId\030\" \001(\t\022"
      "\032\n\022originalThumbWidth\030# \001(\005\022\033\n\023originalT"
      "humbHeight\030$ \001(\005\022\022\n\nimportTime\030% \001(\003\022\020\n\010"
      "sourceId\030& \001(\005\022\021\n\thasPlayer\030\' \001(\010\022\017\n\007epi"
      "sode\030( \001(\005\022\016\n\006player\030) \001(\t\022\021\n\tvideoType\030"
      "* \001(\t\022\r\n\005width\030+ \001(\005\022\016\n\006height\030, \001(\005\022\016\n\006"
      "season\030- \001(\005\022\020\n\010seriesId\030. \001(\005\022\026\n\016finish"
      "edSerial\030/ \001(\010\022\021\n\tbyte_size\0300 \001(\003\022\031\n\021met"
      "adataSourceUrl\0301 \001(\t\022\022\n\nfull_movie\0303 \001(\010"
      "\022\017\n\007full_hd\0304 \001(\010\022\027\n\017allowInFastbase\0305 \001"
      "(\010\022\021\n\tcontentId\0306 \001(\003\022A\n\nliveStream\0309 \001("
      "\0162-.ru.mail.go.webbase.blobs.VideoLiveSt"
      "reamType\022G\n\021exclusiveProvider\030: \001(\0162,.ru"
      ".mail.go.webbase.blobs.ExclusiveProvider"
      "s\022L\n\026protobufSourceTypeFlag\030; \001(\0162,.ru.m"
      "ail.go.webbase.blobs.ProtobufSourceType\022"
      "\023\n\013allow_embed\030< \001(\010\022\023\n\013youtubeHash\030= \001("
      "\t\022\021\n\tchannelId\030> \001(\t\022\020\n\010userId64\030\? \001(\003\022@"
      "\n\016liveVideoState\030@ \001(\0162(.ru.mail.go.webb"
      "ase.blobs.LiveVideoState\022\023\n\013extPlatform\030"
      "A \001(\t\022H\n\023videoQualityOptions\030B \003(\0162+.ru."
      "mail.go.webbase.blobs.VideoQualityValue\022"
      "\025\n\rreposts_count\030C \001(\005\022\027\n\017group_is_close"
      "d\030D \001(\010\022\031\n\021group_is_verified\030E \001(\010\022\033\n\023gr"
      "oup_members_count\030F \001(\005\022\026\n\016group_trendin"
      "g\030G \001(\010\022F\n\022dzen_certain_grade\030H \001(\0162*.ru"
      ".mail.go.webbase.blobs.DzenCertainGrade\022"
      "E\n\021video_orientation\030I \001(\0162*.ru.mail.go."
      "webbase.blobs.VideoOrientation\022+\n\034dzen_e"
      "xists_in_reco_snapshot\030J \001(\010:\005false\022\037\n\020s"
      "ubscribers_only\030K \001(\010:\005false\022<\n\017dzen_vid"
      "eo_type\030L \001(\0162#.ru.mail.go.webbase.blobs"
      ".VideoType\022\037\n\020user_is_verified\030M \001(\010:\005fa"
      "lse\022\030\n\020user_subscribers\030N \001(\005\022\033\n\023adult_r"
      "eports_count\030O \001(\005\022+\n\034is_probably_porn_b"
      "y_vk_score\030P \001(\010:\005false\022\023\n\013user_domain\030Q"
      " \001(\t\022\033\n\014is_good_film\030R \001(\010:\005false\022\036\n\017is_"
      "good_cartoon\030S \001(\010:\005false\022\035\n\016is_good_ser"
      "ial\030T \001(\010:\005false\022\021\n\tis_update\030U \001(\010\022\036\n\026i"
      "s_licensed_content_vk\030V \001(\010\022\033\n\023content_h"
      "ash_string\030W \001(\t\022\035\n\025similarity_cluster_i"
      "d\030X \001(\003\022\027\n\017contentIdString\030Y \001(\t\022\027\n\017unit"
      "ed_video_id\030Z \001(\003\022\036\n\017is_promo_author\030[ \001"
      "(\010:\005false\022\035\n\025videoQualityOptionsVK\030\\ \003(\t"
      "\022%\n\026is_official_music_clip\030] \001(\010:\005false\022"
      "\023\n\013is_external\030^ \001(\010\022\025\n\rexternal_link\030_ "
      "\001(\t\022\023\n\013audio_title\030a \001(\t\022\027\n\017audio_perfor"
      "mer\030b \001(\t\022\020\n\010hashtags\030c \003(\t\"\274\001\n\014IndexedV"
      "ideo\022B\n\020video_import_doc\030\001 \002(\0132(.ru.mail"
      ".go.webbase.blobs.VideoImportDoc\022\?\n\016movi"
      "e_metadata\030\002 \001(\0132\'.ru.mail.go.webbase.bl"
      "obs.MovieMetadata\022\017\n\007is_porn\030\003 \001(\010\022\026\n\016pr"
      "eview_mb_num\030\004 \001(\005\"X\n\022FastVideoImportDoc"
      "\022B\n\020video_import_doc\030\001 \002(\0132(.ru.mail.go."
      "webbase.blobs.VideoImportDoc\"\235\003\n\rMovieMe"
      "tadata\022\r\n\005title\030\001 \002(\t\022\026\n\016original_title\030"
      "\002 \001(\t\022\020\n\010duration\030\003 \001(\r\022C\n\006status\030\004 \001(\0162"
      "3.ru.mail.go.webbase.blobs.MovieMetadata"
      ".MovieStatus\022\014\n\004year\030\005 \001(\r\022\017\n\007country\030\006 "
      "\001(\t\022\020\n\010director\030\007 \001(\t\022\020\n\010producer\030\010 \001(\t\022"
      "\016\n\006actors\030\t \001(\t\022\r\n\005genre\030\n \001(\t\022\023\n\013descri"
      "ption\030\013 \001(\t\022\023\n\013imdb_rating\030\014 \001(\002\022\024\n\014rele"
      "ase_date\030\r \001(\003\022\023\n\013premiere_ru\030\016 \001(\003\022\021\n\ta"
      "fisha_id\030\017 \001(\003\"D\n\013MovieStatus\022\021\n\rCURRENT"
      "_MOVIE\020\001\022\022\n\016UPCOMING_MOVIE\020\002\022\016\n\nPAST_MOV"
      "IE\020\003\"a\n\027MoviesClassificationDoc\0229\n\010metad"
      "ata\030\001 \002(\0132\'.ru.mail.go.webbase.blobs.Mov"
      "ieMetadata\022\013\n\003url\030\002 \003(\t\"5\n\026YouTubeRecomm"
      "endations\022\033\n\023recommendations_ids\030\001 \003(\t\"e"
      "\n\024VideoMarkupHtmlInput\022\013\n\003url\030\001 \002(\t\022\017\n\007c"
      "ontent\030\002 \002(\014\022/\n\003enc\030\003 \002(\0162\".ru.mail.go.w"
      "ebbase.blobs.Encoding\"\266\003\n\026VideoMarkupDes"
      "cription\022$\n\025video_markup_detected\030\001 \002(\010:"
      "\005false\022B\n\nopen_graph\030\002 \001(\0132..ru.mail.go."
      "webbase.blobs.VideoMarkupOpenGraph\022B\n\nsc"
      "hema_org\030\003 \003(\0132..ru.mail.go.webbase.blob"
      "s.VideoMarkupSchemaOrg\022F\n\014twitter_card\030\004"
      " \001(\01320.ru.mail.go.webbase.blobs.VideoMar"
      "kupTwitterCard\022D\n\013html5_video\030\005 \003(\0132/.ru"
      ".mail.go.webbase.blobs.VideoMarkupHtml5V"
      "ideo\022/\n$number_of_unparsed_open_graph_vi"
      "deos\030\006 \002(\r:\0010\022/\n$number_of_unparsed_sche"
      "ma_org_videos\030\007 \002(\r:\0010\"\273\002\n\024VideoMarkupOp"
      "enGraph\022\r\n\005title\030\001 \002(\t\022\020\n\010page_url\030\002 \002(\t"
      "\022\017\n\007preview\030\003 \002(\t\022\030\n\020video_player_url\030\004 "
      "\001(\t\022\022\n\nvideo_type\030\005 \001(\t\022\r\n\005width\030\006 \001(\005\022\016"
      "\n\006height\030\007 \001(\005\022\020\n\010duration\030\010 \001(\005\022\023\n\013desc"
      "ription\030\t \001(\t\022\r\n\005adult\030\n \001(\010\022\n\n\002hd\030\013 \001(\010"
      "\022\017\n\007full_hd\030\014 \001(\010\022\016\n\006season\030\r \001(\005\022\017\n\007epi"
      "sode\030\016 \001(\005\022\023\n\013allow_embed\030\017 \001(\010\022\033\n\023uploa"
      "d_date_iso8601\030\020 \001(\t\"\201\003\n\024VideoMarkupSche"
      "maOrg\022X\n\020declaration_type\030\001 \002(\0162>.ru.mai"
      "l.go.webbase.blobs.VideoMarkupSchemaOrg."
      "DeclarationType\022\r\n\005title\030\002 \002(\t\022\020\n\010page_u"
      "rl\030\003 \002(\t\022\017\n\007preview\030\004 \002(\t\022\030\n\020video_playe"
      "r_url\030\005 \001(\t\022\022\n\nvideo_type\030\006 \001(\t\022\r\n\005width"
      "\030\007 \001(\005\022\016\n\006height\030\010 \001(\005\022\030\n\020duration_iso86"
      "01\030\t \001(\t\022\023\n\013description\030\n \001(\t\022\032\n\022is_fami"
      "ly_friendly\030\013 \001(\010\022\014\n\004paid\030\014 \001(\010\"7\n\017Decla"
      "rationType\022\r\n\tMICRODATA\020\001\022\010\n\004RDFA\020\002\022\013\n\007J"
      "SON_LD\020\003\"\354\001\n\026VideoMarkupTwitterCard\022\021\n\tc"
      "ard_type\030\001 \002(\t\022\r\n\005title\030\002 \002(\t\022\020\n\010page_ur"
      "l\030\003 \002(\t\022\017\n\007preview\030\004 \002(\t\022\022\n\nvideo_type\030\005"
      " \002(\t\022\030\n\020video_player_url\030\006 \001(\t\022\031\n\021stream"
      "_player_url\030\007 \001(\t\022\r\n\005width\030\010 \001(\005\022\016\n\006heig"
      "ht\030\t \001(\005\022\020\n\010duration\030\n \001(\005\022\023\n\013descriptio"
      "n\030\013 \001(\t\"\027\n\025VideoMarkupHtml5Video\"\200\001\n\rRec"
      "oBuildInfo\022\027\n\017url_recommended\030\001 \001(\t\022\027\n\017r"
      "ecommended_for\030\002 \001(\t\022=\n\rindexed_video\030\003 "
      "\001(\0132&.ru.mail.go.webbase.blobs.IndexedVi"
      "deo\"\365\001\n\013VkVideoView\022\017\n\007user_id\030\001 \001(\005\022\024\n\014"
      "referrer_url\030\002 \001(\t\022\022\n\nstart_time\030\003 \001(\003\022\023"
      "\n\013viewed_part\030\004 \001(\002\022\033\n\023our_recommendatio"
      "ns\030\005 \001(\010\022\021\n\tvideo_url\030\006 \001(\t\022@\n\016video_met"
      "adata\030\007 \001(\0132(.ru.mail.go.webbase.blobs.V"
      "ideoImportDoc\022\027\n\017event_timestamp\030\010 \001(\003\022\013"
      "\n\003ref\030\t \001(\t\"\226\001\n\tVideoView\022\014\n\004mrcu\030\001 \002(\t\022"
      "\021\n\tvideo_url\030\002 \002(\t\022@\n\016video_metadata\030\003 \001"
      "(\0132(.ru.mail.go.webbase.blobs.VideoImpor"
      "tDoc\022\027\n\017event_timestamp\030\004 \001(\003\022\r\n\005query\030\005"
      " \001(\t\"D\n\016VideoViewsList\0222\n\005views\030\001 \003(\0132#."
      "ru.mail.go.webbase.blobs.VideoView\"%\n\020Vi"
      "deoViewForRecs\022\021\n\tvideo_url\030\001 \002(\t\"s\n\016VkV"
      "ideoSession\022\022\n\nsession_id\030\001 \001(\005\022\027\n\017is_ma"
      "le_session\030\002 \001(\010\0224\n\005views\030\003 \003(\0132%.ru.mai"
      "l.go.webbase.blobs.VkVideoView\"\233\001\n\025Video"
      "JointWatchesData\022:\n\006common\030\001 \003(\0132*.ru.ma"
      "il.go.webbase.blobs.VideoViewForRecs\022F\n\022"
      "highly_recommended\030\002 \003(\0132*.ru.mail.go.we"
      "bbase.blobs.VideoViewForRecs\"\316\001\n\024VkSessi"
      "onOrVideoInfo\022@\n\016video_metadata\030\001 \001(\0132(."
      "ru.mail.go.webbase.blobs.VideoImportDoc\022"
      "\022\n\nis_indexed\030\002 \001(\010\022\022\n\nsession_id\030\003 \001(\005\022"
      "\027\n\017is_male_session\030\004 \001(\010\0223\n\004view\030\005 \001(\0132%"
      ".ru.mail.go.webbase.blobs.VkVideoView\"\031\n"
      "\nVkVideoIds\022\013\n\003ids\030\001 \003(\t\"\251\001\n\rSeriesEpiso"
      "de\022\021\n\tseries_id\030\001 \001(\005\022\016\n\006season\030\002 \001(\005\022\017\n"
      "\007episode\030\003 \001(\005\022\020\n\010duration\030\004 \001(\005\022\020\n\010sour"
      "ceId\030\005 \001(\005\022\027\n\017video_table_key\030\006 \001(\014\022\026\n\016t"
      "rusted_source\030\007 \001(\010\022\017\n\007hosting\030\010 \001(\t*G\n\016"
      "LiveVideoState\022\020\n\014LIVE_UNKNOWN\020\000\022\n\n\006ONLI"
      "NE\020\001\022\n\n\006RECORD\020\002\022\013\n\007VK_LIVE\020\003*G\n\022Protobu"
      "fSourceType\022\013\n\007UNKNOWN\020\000\022\016\n\nODKL_KAFKA\020\001"
      "\022\024\n\020ODKL_KAFKA_ULTRA\020\002*\202\001\n\022ExclusiveProv"
      "iders\022\010\n\004NONE\020\000\022\016\n\nNMG_SERIES\020\001\022\022\n\016DORAM"
      "A_CHANNEL\020\002\022\021\n\rANIME_CHANNEL\020\003\022\024\n\020TELESP"
      "ORT_LALIGA\020\004\022\025\n\021TELESPORT_SERIE_A\020\005*\206\001\n\021"
      "VideoQualityValue\022\025\n\021UNDEFINED_QUALITY\020\000"
      "\022\n\n\006LOWEST\020\001\022\007\n\003LOW\020\002\022\n\n\006MEDIUM\020\003\022\010\n\004HIG"
      "H\020\004\022\n\n\006FULLHD\020\005\022\n\n\006QUADHD\020\006\022\013\n\007ULTRAHD\020\007"
      "\022\n\n\006MOBILE\020\010*\235\001\n\017VideoQueryClass\022\022\n\016NOT_"
      "CLASSIFIED\020\000\022\010\n\004NEWS\020\001\022\t\n\005MOVIE\020\002\022\020\n\014COM"
      "MON_MOVIE\020\003\022\023\n\017INFOMOVIE_ACTOR\020\004\022\r\n\tNEW_"
      "MOVIE\020\005\022\022\n\016SUPERNEW_MOVIE\020\006\022\027\n\023SERIES_WI"
      "TH_EPISODE\020\007*\257\002\n\024VideoThumbnailStatus\022\022\n"
      "\016STATUS_INITIAL\020\000\022\020\n\014STATUS_READY\020\001\022\030\n\024S"
      "TATUS_NETWORK_ERROR\020\002\022\016\n\nSTATUS_3XX\020\003\022\016\n"
      "\nSTATUS_4XX\020\004\022\016\n\nSTATUS_5XX\020\005\022\023\n\017STATUS_"
      "NOTFOUND\020\006\022\024\n\020STATUS_FORBIDDEN\020\007\022\022\n\016STAT"
      "US_UNKNOWN\020\010\022\032\n\026STATUS_SPECIAL_PREVIEW\020\t"
      "\022\022\n\016STATUS_BAD_URL\020\n\022\026\n\022STATUS_IMAGE_ERR"
      "OR\020\013\022 \n\034STATUS_ADULT_SPECIAL_PREVIEW\020\014*\330"
      "\003\n\016VideoCheckType\022\037\n\033PREVIEW_ACCESSIBILI"
      "TY_CHECK\020\001\022!\n\035PREVIEW_ACCESSIBILITY_RECH"
      "ECK\020\002\022\035\n\031YOUTUBE_TOP_QUERIES_CHECK\020\003\022\031\n\025"
      "YOUTUBE_POPULAR_CHECK\020\004\022\032\n\026YOUTUBE_COMPL"
      "ETE_CHECK\020\005\022\036\n\032YOUTUBE_WEB_EMBEDDED_CHEC"
      "K\020\006\022\014\n\010VK_CHECK\020\007\022\032\n\026DESCRIPTION_TEXT_CH"
      "ECK\020\010\022\023\n\017IMAGEHASH_CHECK\020\t\022\020\n\014HOURLY_CHE"
      "CK\020\n\022\"\n\036PREVIEW_ACCESSIBILITY_CHECK_V2\020\013"
      "\022\034\n\030BIG_FETCHER_STATUS_CHECK\020\014\022\026\n\022DARK_F"
      "ETCHER_CHECK\020\r\022\017\n\013HYDRA_CHECK\020\016\022\030\n\024REDIR"
      "ECT_FOUND_CHECK\020\017\022\020\n\014UPLOAD_CHECK\020\020\022$\n P"
      "REVIEW_ACCESSIBILITY_CHECK_DARK\020\021*\217\002\n\023Vi"
      "deoLiveStreamType\022\035\n\031VIDEO_LIVE_STREAM_U"
      "NKNOWN\020\000\022\024\n\020ODKL_LIVE_TV_APP\020\001\022\025\n\021ODKL_L"
      "IVE_TV_ODLK\020\002\022\025\n\021ODKL_LIVE_TV_ODKL\020\003\022\023\n\017"
      "VK_LIVE_WAITING\020\004\022\023\n\017VK_LIVE_STARTED\020\005\022\021"
      "\n\rVK_LIVE_ENDED\020\006\022\022\n\016VK_LIVE_FAILED\020\007\022\024\n"
      "\020VK_LIVE_UPCOMING\020\010\022\025\n\021VK_LIVE_PRE_CHECK"
      "\020\t\022\027\n\023VK_LIVE_NOT_STARTED\020\n*\221\001\n\020DzenCert"
      "ainGrade\022\017\n\013DCG_UNKNOWN\020\001\022\030\n\024DCG_SUBSCRI"
      "BERS_ONLY\020\002\022\014\n\010DCG_GOOD\020\003\022\022\n\016DCG_BOOST_W"
      "EAK\020\004\022\030\n\024DCG_PESSIMIZE_STRONG\020\005\022\026\n\022DCG_P"
      "ESSIMIZE_WEAK\020\006*F\n\020VideoOrientation\022\016\n\nV"
      "O_UNKNOWN\020\001\022\021\n\rVO_HORIZONTAL\020\002\022\017\n\013VO_VER"
      "TICAL\020\003*9\n\tVideoType\022\016\n\nVT_UNKNOWN\020\001\022\016\n\n"
      "VT_REGULAR\020\002\022\014\n\010VT_SHORT\020\003*T\n\017VideoMarku"
      "pType\022\016\n\nOPEN_GRAPH\020\001\022\016\n\nSCHEMA_ORG\020\002\022\020\n"
      "\014TWITTER_CARD\020\003\022\017\n\013HTML5_VIDEO\020\004B\007B\005Vide"
      "o"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8521);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "video.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_video_2eproto

const ::google::protobuf::EnumDescriptor* MovieMetadata_MovieStatus_descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_enum_descriptors[0];
}
bool MovieMetadata_MovieStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MovieMetadata_MovieStatus MovieMetadata::CURRENT_MOVIE;
const MovieMetadata_MovieStatus MovieMetadata::UPCOMING_MOVIE;
const MovieMetadata_MovieStatus MovieMetadata::PAST_MOVIE;
const MovieMetadata_MovieStatus MovieMetadata::MovieStatus_MIN;
const MovieMetadata_MovieStatus MovieMetadata::MovieStatus_MAX;
const int MovieMetadata::MovieStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VideoMarkupSchemaOrg_DeclarationType_descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_enum_descriptors[1];
}
bool VideoMarkupSchemaOrg_DeclarationType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VideoMarkupSchemaOrg_DeclarationType VideoMarkupSchemaOrg::MICRODATA;
const VideoMarkupSchemaOrg_DeclarationType VideoMarkupSchemaOrg::RDFA;
const VideoMarkupSchemaOrg_DeclarationType VideoMarkupSchemaOrg::JSON_LD;
const VideoMarkupSchemaOrg_DeclarationType VideoMarkupSchemaOrg::DeclarationType_MIN;
const VideoMarkupSchemaOrg_DeclarationType VideoMarkupSchemaOrg::DeclarationType_MAX;
const int VideoMarkupSchemaOrg::DeclarationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LiveVideoState_descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_enum_descriptors[2];
}
bool LiveVideoState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProtobufSourceType_descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_enum_descriptors[3];
}
bool ProtobufSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExclusiveProviders_descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_enum_descriptors[4];
}
bool ExclusiveProviders_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VideoQualityValue_descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_enum_descriptors[5];
}
bool VideoQualityValue_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VideoQueryClass_descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_enum_descriptors[6];
}
bool VideoQueryClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VideoThumbnailStatus_descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_enum_descriptors[7];
}
bool VideoThumbnailStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VideoCheckType_descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_enum_descriptors[8];
}
bool VideoCheckType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VideoLiveStreamType_descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_enum_descriptors[9];
}
bool VideoLiveStreamType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DzenCertainGrade_descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_enum_descriptors[10];
}
bool DzenCertainGrade_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VideoOrientation_descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_enum_descriptors[11];
}
bool VideoOrientation_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VideoType_descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_enum_descriptors[12];
}
bool VideoType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VideoMarkupType_descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_enum_descriptors[13];
}
bool VideoMarkupType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoThumbnail::kDataFieldNumber;
const int VideoThumbnail::kHashFieldNumber;
const int VideoThumbnail::kVideoUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoThumbnail::VideoThumbnail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VideoThumbnail)
}
VideoThumbnail::VideoThumbnail(const VideoThumbnail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_url()) {
    video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VideoThumbnail)
}

void VideoThumbnail::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VideoThumbnail::~VideoThumbnail() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VideoThumbnail)
  SharedDtor();
}

void VideoThumbnail::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoThumbnail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoThumbnail::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoThumbnail& VideoThumbnail::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoThumbnail* VideoThumbnail::New(::google::protobuf::Arena* arena) const {
  VideoThumbnail* n = new VideoThumbnail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoThumbnail::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VideoThumbnail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hash_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!video_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*video_url_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoThumbnail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VideoThumbnail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoThumbnail.hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string video_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_url().data(), static_cast<int>(this->video_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoThumbnail.video_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VideoThumbnail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VideoThumbnail)
  return false;
#undef DO_
}

void VideoThumbnail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VideoThumbnail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // required string hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoThumbnail.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hash(), output);
  }

  // required string video_url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), static_cast<int>(this->video_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoThumbnail.video_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->video_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VideoThumbnail)
}

::google::protobuf::uint8* VideoThumbnail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VideoThumbnail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // required string hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoThumbnail.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hash(), target);
  }

  // required string video_url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), static_cast<int>(this->video_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoThumbnail.video_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->video_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VideoThumbnail)
  return target;
}

size_t VideoThumbnail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.VideoThumbnail)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_hash()) {
    // required string hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  if (has_video_url()) {
    // required string video_url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->video_url());
  }

  return total_size;
}
size_t VideoThumbnail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VideoThumbnail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes data = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required string hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());

    // required string video_url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->video_url());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoThumbnail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VideoThumbnail)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoThumbnail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoThumbnail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VideoThumbnail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VideoThumbnail)
    MergeFrom(*source);
  }
}

void VideoThumbnail::MergeFrom(const VideoThumbnail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VideoThumbnail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_video_url();
      video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
    }
  }
}

void VideoThumbnail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VideoThumbnail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoThumbnail::CopyFrom(const VideoThumbnail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VideoThumbnail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoThumbnail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void VideoThumbnail::Swap(VideoThumbnail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoThumbnail::InternalSwap(VideoThumbnail* other) {
  using std::swap;
  data_.Swap(&other->data_);
  hash_.Swap(&other->hash_);
  video_url_.Swap(&other->video_url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoThumbnail::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoThumbnail

// required bytes data = 1;
bool VideoThumbnail::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoThumbnail::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoThumbnail::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoThumbnail::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& VideoThumbnail::data() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoThumbnail.data)
  return data_.GetNoArena();
}
void VideoThumbnail::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoThumbnail.data)
}
#if LANG_CXX11
void VideoThumbnail::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoThumbnail.data)
}
#endif
void VideoThumbnail::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoThumbnail.data)
}
void VideoThumbnail::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoThumbnail.data)
}
::std::string* VideoThumbnail::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoThumbnail.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoThumbnail::release_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoThumbnail.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoThumbnail::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoThumbnail.data)
}

// required string hash = 2;
bool VideoThumbnail::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VideoThumbnail::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void VideoThumbnail::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void VideoThumbnail::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& VideoThumbnail::hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoThumbnail.hash)
  return hash_.GetNoArena();
}
void VideoThumbnail::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoThumbnail.hash)
}
#if LANG_CXX11
void VideoThumbnail::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoThumbnail.hash)
}
#endif
void VideoThumbnail::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoThumbnail.hash)
}
void VideoThumbnail::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoThumbnail.hash)
}
::std::string* VideoThumbnail::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoThumbnail.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoThumbnail::release_hash() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoThumbnail.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoThumbnail::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoThumbnail.hash)
}

// required string video_url = 3;
bool VideoThumbnail::has_video_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VideoThumbnail::set_has_video_url() {
  _has_bits_[0] |= 0x00000004u;
}
void VideoThumbnail::clear_has_video_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void VideoThumbnail::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_url();
}
const ::std::string& VideoThumbnail::video_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoThumbnail.video_url)
  return video_url_.GetNoArena();
}
void VideoThumbnail::set_video_url(const ::std::string& value) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoThumbnail.video_url)
}
#if LANG_CXX11
void VideoThumbnail::set_video_url(::std::string&& value) {
  set_has_video_url();
  video_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoThumbnail.video_url)
}
#endif
void VideoThumbnail::set_video_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoThumbnail.video_url)
}
void VideoThumbnail::set_video_url(const char* value, size_t size) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoThumbnail.video_url)
}
::std::string* VideoThumbnail::mutable_video_url() {
  set_has_video_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoThumbnail.video_url)
  return video_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoThumbnail::release_video_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoThumbnail.video_url)
  clear_has_video_url();
  return video_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoThumbnail::set_allocated_video_url(::std::string* video_url) {
  if (video_url != NULL) {
    set_has_video_url();
  } else {
    clear_has_video_url();
  }
  video_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoThumbnail.video_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kSuccessFieldNumber;
const int Status::kTimestampFieldNumber;
const int Status::kFailsCountFieldNumber;
const int Status::kCheckTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.Status)
}
Status::Status(const Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&checktype_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(checktype_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.Status)
}

void Status::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failscount_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(failscount_));
  checktype_ = 1;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.Status)
  SharedDtor();
}

void Status::SharedDtor() {
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Status& Status::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failscount_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(failscount_));
    checktype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 failsCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_failscount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &failscount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VideoCheckType checkType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::VideoCheckType_IsValid(value)) {
            set_checktype(static_cast< ::ru::mail::go::webbase::blobs::VideoCheckType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional int32 failsCount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->failscount(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VideoCheckType checkType = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->checktype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // optional int32 failsCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->failscount(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VideoCheckType checkType = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->checktype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.Status)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional int32 failsCount = 3;
    if (has_failscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->failscount());
    }

    // optional .ru.mail.go.webbase.blobs.VideoCheckType checkType = 4;
    if (has_checktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->checktype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000004u) {
      failscount_ = from.failscount_;
    }
    if (cached_has_bits & 0x00000008u) {
      checktype_ = from.checktype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(success_, other->success_);
  swap(failscount_, other->failscount_);
  swap(checktype_, other->checktype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// optional bool success = 1;
bool Status::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Status::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
void Status::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
void Status::clear_success() {
  success_ = false;
  clear_has_success();
}
bool Status::success() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Status.success)
  return success_;
}
void Status::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Status.success)
}

// optional int64 timestamp = 2;
bool Status::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Status::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void Status::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void Status::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 Status::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Status.timestamp)
  return timestamp_;
}
void Status::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Status.timestamp)
}

// optional int32 failsCount = 3;
bool Status::has_failscount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Status::set_has_failscount() {
  _has_bits_[0] |= 0x00000004u;
}
void Status::clear_has_failscount() {
  _has_bits_[0] &= ~0x00000004u;
}
void Status::clear_failscount() {
  failscount_ = 0;
  clear_has_failscount();
}
::google::protobuf::int32 Status::failscount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Status.failsCount)
  return failscount_;
}
void Status::set_failscount(::google::protobuf::int32 value) {
  set_has_failscount();
  failscount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Status.failsCount)
}

// optional .ru.mail.go.webbase.blobs.VideoCheckType checkType = 4;
bool Status::has_checktype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Status::set_has_checktype() {
  _has_bits_[0] |= 0x00000008u;
}
void Status::clear_has_checktype() {
  _has_bits_[0] &= ~0x00000008u;
}
void Status::clear_checktype() {
  checktype_ = 1;
  clear_has_checktype();
}
::ru::mail::go::webbase::blobs::VideoCheckType Status::checktype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Status.checkType)
  return static_cast< ::ru::mail::go::webbase::blobs::VideoCheckType >(checktype_);
}
void Status::set_checktype(::ru::mail::go::webbase::blobs::VideoCheckType value) {
  assert(::ru::mail::go::webbase::blobs::VideoCheckType_IsValid(value));
  set_has_checktype();
  checktype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Status.checkType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoImportDoc::kNameFieldNumber;
const int VideoImportDoc::kIsDeletedFieldNumber;
const int VideoImportDoc::kUrlVideoFieldNumber;
const int VideoImportDoc::kUrlPreviewFieldNumber;
const int VideoImportDoc::kRawPreviewDataFieldNumber;
const int VideoImportDoc::kDescriptionFieldNumber;
const int VideoImportDoc::kCategoryFieldNumber;
const int VideoImportDoc::kTagFieldNumber;
const int VideoImportDoc::kAdultFieldNumber;
const int VideoImportDoc::kContentHashFieldNumber;
const int VideoImportDoc::kDurationFieldNumber;
const int VideoImportDoc::kIdFieldNumber;
const int VideoImportDoc::kLegalFieldNumber;
const int VideoImportDoc::kShottimeFieldNumber;
const int VideoImportDoc::kTimeFieldNumber;
const int VideoImportDoc::kHdFieldNumber;
const int VideoImportDoc::kPaidFieldNumber;
const int VideoImportDoc::kRegreqFieldNumber;
const int VideoImportDoc::kFeeFieldNumber;
const int VideoImportDoc::kFeeCurrencyFieldNumber;
const int VideoImportDoc::kUserIdFieldNumber;
const int VideoImportDoc::kUserUrlFieldNumber;
const int VideoImportDoc::kUserNickFieldNumber;
const int VideoImportDoc::kUserMailFieldNumber;
const int VideoImportDoc::kAlbumDescriptionFieldNumber;
const int VideoImportDoc::kAlbumCommentCountFieldNumber;
const int VideoImportDoc::kAlbumIdFieldNumber;
const int VideoImportDoc::kAlbumNameFieldNumber;
const int VideoImportDoc::kAlbumUrlFieldNumber;
const int VideoImportDoc::kOriginalAlbumTitleFieldNumber;
const int VideoImportDoc::kStatVotesFieldNumber;
const int VideoImportDoc::kStatLikesFieldNumber;
const int VideoImportDoc::kStatDislikesFieldNumber;
const int VideoImportDoc::kStatCommentsCountFieldNumber;
const int VideoImportDoc::kStatViewsFieldNumber;
const int VideoImportDoc::kStatRatingFieldNumber;
const int VideoImportDoc::kReferenceIdFieldNumber;
const int VideoImportDoc::kOriginalThumbWidthFieldNumber;
const int VideoImportDoc::kOriginalThumbHeightFieldNumber;
const int VideoImportDoc::kImportTimeFieldNumber;
const int VideoImportDoc::kSourceIdFieldNumber;
const int VideoImportDoc::kHasPlayerFieldNumber;
const int VideoImportDoc::kEpisodeFieldNumber;
const int VideoImportDoc::kPlayerFieldNumber;
const int VideoImportDoc::kVideoTypeFieldNumber;
const int VideoImportDoc::kWidthFieldNumber;
const int VideoImportDoc::kHeightFieldNumber;
const int VideoImportDoc::kSeasonFieldNumber;
const int VideoImportDoc::kSeriesIdFieldNumber;
const int VideoImportDoc::kFinishedSerialFieldNumber;
const int VideoImportDoc::kByteSizeFieldNumber;
const int VideoImportDoc::kMetadataSourceUrlFieldNumber;
const int VideoImportDoc::kFullMovieFieldNumber;
const int VideoImportDoc::kFullHdFieldNumber;
const int VideoImportDoc::kAllowInFastbaseFieldNumber;
const int VideoImportDoc::kContentIdFieldNumber;
const int VideoImportDoc::kLiveStreamFieldNumber;
const int VideoImportDoc::kExclusiveProviderFieldNumber;
const int VideoImportDoc::kProtobufSourceTypeFlagFieldNumber;
const int VideoImportDoc::kAllowEmbedFieldNumber;
const int VideoImportDoc::kYoutubeHashFieldNumber;
const int VideoImportDoc::kChannelIdFieldNumber;
const int VideoImportDoc::kUserId64FieldNumber;
const int VideoImportDoc::kLiveVideoStateFieldNumber;
const int VideoImportDoc::kExtPlatformFieldNumber;
const int VideoImportDoc::kVideoQualityOptionsFieldNumber;
const int VideoImportDoc::kRepostsCountFieldNumber;
const int VideoImportDoc::kGroupIsClosedFieldNumber;
const int VideoImportDoc::kGroupIsVerifiedFieldNumber;
const int VideoImportDoc::kGroupMembersCountFieldNumber;
const int VideoImportDoc::kGroupTrendingFieldNumber;
const int VideoImportDoc::kDzenCertainGradeFieldNumber;
const int VideoImportDoc::kVideoOrientationFieldNumber;
const int VideoImportDoc::kDzenExistsInRecoSnapshotFieldNumber;
const int VideoImportDoc::kSubscribersOnlyFieldNumber;
const int VideoImportDoc::kDzenVideoTypeFieldNumber;
const int VideoImportDoc::kUserIsVerifiedFieldNumber;
const int VideoImportDoc::kUserSubscribersFieldNumber;
const int VideoImportDoc::kAdultReportsCountFieldNumber;
const int VideoImportDoc::kIsProbablyPornByVkScoreFieldNumber;
const int VideoImportDoc::kUserDomainFieldNumber;
const int VideoImportDoc::kIsGoodFilmFieldNumber;
const int VideoImportDoc::kIsGoodCartoonFieldNumber;
const int VideoImportDoc::kIsGoodSerialFieldNumber;
const int VideoImportDoc::kIsUpdateFieldNumber;
const int VideoImportDoc::kIsLicensedContentVkFieldNumber;
const int VideoImportDoc::kContentHashStringFieldNumber;
const int VideoImportDoc::kSimilarityClusterIdFieldNumber;
const int VideoImportDoc::kContentIdStringFieldNumber;
const int VideoImportDoc::kUnitedVideoIdFieldNumber;
const int VideoImportDoc::kIsPromoAuthorFieldNumber;
const int VideoImportDoc::kVideoQualityOptionsVKFieldNumber;
const int VideoImportDoc::kIsOfficialMusicClipFieldNumber;
const int VideoImportDoc::kIsExternalFieldNumber;
const int VideoImportDoc::kExternalLinkFieldNumber;
const int VideoImportDoc::kAudioTitleFieldNumber;
const int VideoImportDoc::kAudioPerformerFieldNumber;
const int VideoImportDoc::kHashtagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoImportDoc::VideoImportDoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VideoImportDoc)
}
VideoImportDoc::VideoImportDoc(const VideoImportDoc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      category_(from.category_),
      tag_(from.tag_),
      videoqualityoptions_(from.videoqualityoptions_),
      videoqualityoptionsvk_(from.videoqualityoptionsvk_),
      hashtags_(from.hashtags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  urlvideo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_urlvideo()) {
    urlvideo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.urlvideo_);
  }
  urlpreview_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_urlpreview()) {
    urlpreview_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.urlpreview_);
  }
  rawpreviewdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rawpreviewdata()) {
    rawpreviewdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rawpreviewdata_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  userurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userurl()) {
    userurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userurl_);
  }
  usernick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_usernick()) {
    usernick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usernick_);
  }
  usermail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_usermail()) {
    usermail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usermail_);
  }
  albumdescription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_albumdescription()) {
    albumdescription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumdescription_);
  }
  albumname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_albumname()) {
    albumname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumname_);
  }
  albumurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_albumurl()) {
    albumurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumurl_);
  }
  referenceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_referenceid()) {
    referenceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referenceid_);
  }
  player_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player()) {
    player_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_);
  }
  videotype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_videotype()) {
    videotype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videotype_);
  }
  metadatasourceurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadatasourceurl()) {
    metadatasourceurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadatasourceurl_);
  }
  youtubehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_youtubehash()) {
    youtubehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtubehash_);
  }
  channelid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channelid()) {
    channelid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  extplatform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extplatform()) {
    extplatform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extplatform_);
  }
  user_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_domain()) {
    user_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_domain_);
  }
  content_hash_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content_hash_string()) {
    content_hash_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_hash_string_);
  }
  contentidstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contentidstring()) {
    contentidstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contentidstring_);
  }
  external_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_external_link()) {
    external_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_link_);
  }
  originalalbumtitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_originalalbumtitle()) {
    originalalbumtitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.originalalbumtitle_);
  }
  audio_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_audio_title()) {
    audio_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_title_);
  }
  audio_performer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_audio_performer()) {
    audio_performer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_performer_);
  }
  ::memcpy(&contenthash_, &from.contenthash_,
    static_cast<size_t>(reinterpret_cast<char*>(&video_orientation_) -
    reinterpret_cast<char*>(&contenthash_)) + sizeof(video_orientation_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VideoImportDoc)
}

void VideoImportDoc::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  urlvideo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  urlpreview_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rawpreviewdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usernick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usermail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumdescription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referenceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videotype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadatasourceurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtubehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extplatform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_hash_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contentidstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  originalalbumtitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_performer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&contenthash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&united_video_id_) -
      reinterpret_cast<char*>(&contenthash_)) + sizeof(united_video_id_));
  dzen_video_type_ = 1;
  dzen_certain_grade_ = 1;
  video_orientation_ = 1;
}

VideoImportDoc::~VideoImportDoc() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VideoImportDoc)
  SharedDtor();
}

void VideoImportDoc::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  urlvideo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  urlpreview_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rawpreviewdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usernick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usermail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumdescription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referenceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videotype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadatasourceurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtubehash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extplatform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_hash_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contentidstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  originalalbumtitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_performer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoImportDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoImportDoc::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoImportDoc& VideoImportDoc::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoImportDoc* VideoImportDoc::New(::google::protobuf::Arena* arena) const {
  VideoImportDoc* n = new VideoImportDoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoImportDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VideoImportDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_.Clear();
  tag_.Clear();
  videoqualityoptions_.Clear();
  videoqualityoptionsvk_.Clear();
  hashtags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!urlvideo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*urlvideo_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!urlpreview_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*urlpreview_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!rawpreviewdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rawpreviewdata_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!userurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*userurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!usernick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*usernick_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!usermail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*usermail_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!albumdescription_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*albumdescription_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!albumname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*albumname_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(!albumurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*albumurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(!referenceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*referenceid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(!player_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*player_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(!videotype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*videotype_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(!metadatasourceurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*metadatasourceurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(!youtubehash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*youtubehash_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(!channelid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*channelid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(!extplatform_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extplatform_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(!user_domain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_domain_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(!content_hash_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_hash_string_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(!contentidstring_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*contentidstring_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(!external_link_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*external_link_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(!originalalbumtitle_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*originalalbumtitle_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(!audio_title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*audio_title_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 0x01000000u) {
    GOOGLE_DCHECK(!audio_performer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*audio_performer_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 4261412864u) {
    ::memset(&contenthash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&contenthash_)) + sizeof(id_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&shottime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&statvotes_) -
        reinterpret_cast<char*>(&shottime_)) + sizeof(statvotes_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&paid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&originalthumbwidth_) -
        reinterpret_cast<char*>(&paid_)) + sizeof(originalthumbwidth_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&importtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&byte_size_) -
        reinterpret_cast<char*>(&importtime_)) + sizeof(byte_size_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&seriesid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&statdislikes_) -
        reinterpret_cast<char*>(&seriesid_)) + sizeof(statdislikes_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 255u) {
    ::memset(&livestream_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&group_is_closed_) -
        reinterpret_cast<char*>(&livestream_)) + sizeof(group_is_closed_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&group_is_verified_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_good_film_) -
        reinterpret_cast<char*>(&group_is_verified_)) + sizeof(is_good_film_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&adult_reports_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_official_music_clip_) -
        reinterpret_cast<char*>(&adult_reports_count_)) + sizeof(is_official_music_clip_));
  }
  if (cached_has_bits & 520093696u) {
    ::memset(&is_external_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&united_video_id_) -
        reinterpret_cast<char*>(&is_external_)) + sizeof(united_video_id_));
    dzen_video_type_ = 1;
    dzen_certain_grade_ = 1;
    video_orientation_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoImportDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VideoImportDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isDeleted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_isdeleted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdeleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string urlVideo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_urlvideo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urlvideo().data(), static_cast<int>(this->urlvideo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string urlPreview = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_urlpreview()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urlpreview().data(), static_cast<int>(this->urlpreview().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rawPreviewData = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rawpreviewdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string category = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category(this->category_size() - 1).data(),
            static_cast<int>(this->category(this->category_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.category");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag(this->tag_size() - 1).data(),
            static_cast<int>(this->tag(this->tag_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool adult = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_adult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 contentHash = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_contenthash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &contenthash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 duration = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool legal = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_legal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 shottime = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_shottime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shottime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hd = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_hd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool paid = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_paid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool regreq = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_regreq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &regreq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fee = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_fee();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 feeCurrency = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_feecurrency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feecurrency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 userId = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string userUrl = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userurl().data(), static_cast<int>(this->userurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.userUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string userNick = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usernick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->usernick().data(), static_cast<int>(this->usernick().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.userNick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string userMail = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usermail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->usermail().data(), static_cast<int>(this->usermail().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.userMail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string albumDescription = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_albumdescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->albumdescription().data(), static_cast<int>(this->albumdescription().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 albumCommentCount = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_albumcommentcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &albumcommentcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 albumId = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_albumid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &albumid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string albumName = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_albumname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->albumname().data(), static_cast<int>(this->albumname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.albumName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string albumUrl = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_albumurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->albumurl().data(), static_cast<int>(this->albumurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 statVotes = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_statvotes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statvotes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 statCommentsCount = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_statcommentscount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statcommentscount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 statViews = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_statviews();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statviews_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 statRating = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_statrating();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &statrating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string referenceId = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referenceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->referenceid().data(), static_cast<int>(this->referenceid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.referenceId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 originalThumbWidth = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_originalthumbwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &originalthumbwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 originalThumbHeight = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_originalthumbheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &originalthumbheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 importTime = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_importtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &importtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sourceId = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          set_has_sourceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hasPlayer = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          set_has_hasplayer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasplayer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 episode = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_episode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &episode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player().data(), static_cast<int>(this->player().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.player");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string videoType = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videotype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->videotype().data(), static_cast<int>(this->videotype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.videoType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 season = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          set_has_season();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seriesId = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          set_has_seriesid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seriesid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool finishedSerial = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 376 & 0xFF */)) {
          set_has_finishedserial();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finishedserial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 byte_size = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 384 & 0xFF */)) {
          set_has_byte_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &byte_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string metadataSourceUrl = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadatasourceurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metadatasourceurl().data(), static_cast<int>(this->metadatasourceurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool full_movie = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {
          set_has_full_movie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &full_movie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool full_hd = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {
          set_has_full_hd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &full_hd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allowInFastbase = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
          set_has_allowinfastbase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowinfastbase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 contentId = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {
          set_has_contentid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &contentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 statLikes = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {
          set_has_statlikes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statlikes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 statDislikes = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {
          set_has_statdislikes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statdislikes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VideoLiveStreamType liveStream = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::VideoLiveStreamType_IsValid(value)) {
            set_livestream(static_cast< ::ru::mail::go::webbase::blobs::VideoLiveStreamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                57, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ExclusiveProviders exclusiveProvider = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ExclusiveProviders_IsValid(value)) {
            set_exclusiveprovider(static_cast< ::ru::mail::go::webbase::blobs::ExclusiveProviders >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                58, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ProtobufSourceType protobufSourceTypeFlag = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 472 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ProtobufSourceType_IsValid(value)) {
            set_protobufsourcetypeflag(static_cast< ::ru::mail::go::webbase::blobs::ProtobufSourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                59, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_embed = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
          set_has_allow_embed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_embed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string youtubeHash = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtubehash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->youtubehash().data(), static_cast<int>(this->youtubehash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string channelId = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 498 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelid().data(), static_cast<int>(this->channelid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.channelId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 userId64 = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {
          set_has_userid64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.LiveVideoState liveVideoState = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 512 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::LiveVideoState_IsValid(value)) {
            set_livevideostate(static_cast< ::ru::mail::go::webbase::blobs::LiveVideoState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                64, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extPlatform = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 522 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extplatform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extplatform().data(), static_cast<int>(this->extplatform().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.VideoQualityValue videoQualityOptions = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 528 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::VideoQualityValue_IsValid(value)) {
            add_videoqualityoptions(static_cast< ::ru::mail::go::webbase::blobs::VideoQualityValue >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                66, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 530 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 66,
                 ::ru::mail::go::webbase::blobs::VideoQualityValue_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_videoqualityoptions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reposts_count = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 536 & 0xFF */)) {
          set_has_reposts_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reposts_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool group_is_closed = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 544 & 0xFF */)) {
          set_has_group_is_closed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &group_is_closed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool group_is_verified = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 552 & 0xFF */)) {
          set_has_group_is_verified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &group_is_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 group_members_count = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {
          set_has_group_members_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_members_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool group_trending = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 568 & 0xFF */)) {
          set_has_group_trending();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &group_trending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.DzenCertainGrade dzen_certain_grade = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 576 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::DzenCertainGrade_IsValid(value)) {
            set_dzen_certain_grade(static_cast< ::ru::mail::go::webbase::blobs::DzenCertainGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                72, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VideoOrientation video_orientation = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 584 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::VideoOrientation_IsValid(value)) {
            set_video_orientation(static_cast< ::ru::mail::go::webbase::blobs::VideoOrientation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                73, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool dzen_exists_in_reco_snapshot = 74 [default = false];
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 592 & 0xFF */)) {
          set_has_dzen_exists_in_reco_snapshot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dzen_exists_in_reco_snapshot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool subscribers_only = 75 [default = false];
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 600 & 0xFF */)) {
          set_has_subscribers_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subscribers_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VideoType dzen_video_type = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 608 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::VideoType_IsValid(value)) {
            set_dzen_video_type(static_cast< ::ru::mail::go::webbase::blobs::VideoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                76, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool user_is_verified = 77 [default = false];
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 616 & 0xFF */)) {
          set_has_user_is_verified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_is_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_subscribers = 78;
      case 78: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 624 & 0xFF */)) {
          set_has_user_subscribers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_subscribers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 adult_reports_count = 79;
      case 79: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 632 & 0xFF */)) {
          set_has_adult_reports_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adult_reports_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_probably_porn_by_vk_score = 80 [default = false];
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 640 & 0xFF */)) {
          set_has_is_probably_porn_by_vk_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_probably_porn_by_vk_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_domain = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 650 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_domain().data(), static_cast<int>(this->user_domain().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.user_domain");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_good_film = 82 [default = false];
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 656 & 0xFF */)) {
          set_has_is_good_film();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_good_film_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_good_cartoon = 83 [default = false];
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 664 & 0xFF */)) {
          set_has_is_good_cartoon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_good_cartoon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_good_serial = 84 [default = false];
      case 84: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 672 & 0xFF */)) {
          set_has_is_good_serial();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_good_serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_update = 85;
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 680 & 0xFF */)) {
          set_has_is_update();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_licensed_content_vk = 86;
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 688 & 0xFF */)) {
          set_has_is_licensed_content_vk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_licensed_content_vk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string content_hash_string = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 698 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_hash_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content_hash_string().data(), static_cast<int>(this->content_hash_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 similarity_cluster_id = 88;
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 704 & 0xFF */)) {
          set_has_similarity_cluster_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &similarity_cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string contentIdString = 89;
      case 89: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 714 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contentidstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contentidstring().data(), static_cast<int>(this->contentidstring().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 united_video_id = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 720 & 0xFF */)) {
          set_has_united_video_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &united_video_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_promo_author = 91 [default = false];
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 728 & 0xFF */)) {
          set_has_is_promo_author();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_promo_author_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string videoQualityOptionsVK = 92;
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 738 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_videoqualityoptionsvk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->videoqualityoptionsvk(this->videoqualityoptionsvk_size() - 1).data(),
            static_cast<int>(this->videoqualityoptionsvk(this->videoqualityoptionsvk_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_official_music_clip = 93 [default = false];
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 744 & 0xFF */)) {
          set_has_is_official_music_clip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_official_music_clip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_external = 94;
      case 94: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 752 & 0xFF */)) {
          set_has_is_external();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_external_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string external_link = 95;
      case 95: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 762 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_link().data(), static_cast<int>(this->external_link().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.external_link");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string originalAlbumTitle = 96;
      case 96: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 770 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originalalbumtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->originalalbumtitle().data(), static_cast<int>(this->originalalbumtitle().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string audio_title = 97;
      case 97: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 778 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audio_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->audio_title().data(), static_cast<int>(this->audio_title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.audio_title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string audio_performer = 98;
      case 98: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 786 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audio_performer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->audio_performer().data(), static_cast<int>(this->audio_performer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string hashtags = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 794 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hashtags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hashtags(this->hashtags_size() - 1).data(),
            static_cast<int>(this->hashtags(this->hashtags_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoImportDoc.hashtags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VideoImportDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VideoImportDoc)
  return false;
#undef DO_
}

void VideoImportDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VideoImportDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool isDeleted = 2;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isdeleted(), output);
  }

  // optional string urlVideo = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urlvideo().data(), static_cast<int>(this->urlvideo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->urlvideo(), output);
  }

  // optional string urlPreview = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urlpreview().data(), static_cast<int>(this->urlpreview().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->urlpreview(), output);
  }

  // optional bytes rawPreviewData = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->rawpreviewdata(), output);
  }

  // optional string description = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // repeated string category = 7;
  for (int i = 0, n = this->category_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category(i).data(), static_cast<int>(this->category(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.category");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->category(i), output);
  }

  // repeated string tag = 8;
  for (int i = 0, n = this->tag_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag(i).data(), static_cast<int>(this->tag(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.tag");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->tag(i), output);
  }

  // optional bool adult = 9;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->adult(), output);
  }

  // optional int64 contentHash = 10;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->contenthash(), output);
  }

  // optional int32 duration = 11;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->duration(), output);
  }

  // optional int64 id = 12;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->id(), output);
  }

  // optional bool legal = 13;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->legal(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 shottime = 14;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->shottime(), output);
  }

  // optional int64 time = 15;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->time(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool hd = 16;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->hd(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool paid = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->paid(), output);
  }

  // optional bool regreq = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->regreq(), output);
  }

  // optional int32 fee = 19;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->fee(), output);
  }

  // optional int32 feeCurrency = 20;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->feecurrency(), output);
  }

  // optional int32 userId = 21;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->userid(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string userUrl = 22;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userurl().data(), static_cast<int>(this->userurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.userUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->userurl(), output);
  }

  // optional string userNick = 23;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usernick().data(), static_cast<int>(this->usernick().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.userNick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->usernick(), output);
  }

  // optional string userMail = 24;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usermail().data(), static_cast<int>(this->usermail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.userMail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->usermail(), output);
  }

  // optional string albumDescription = 25;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumdescription().data(), static_cast<int>(this->albumdescription().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->albumdescription(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 albumCommentCount = 26;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->albumcommentcount(), output);
  }

  // optional int32 albumId = 27;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->albumid(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string albumName = 28;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumname().data(), static_cast<int>(this->albumname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.albumName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->albumname(), output);
  }

  // optional string albumUrl = 29;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumurl().data(), static_cast<int>(this->albumurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->albumurl(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 statVotes = 30;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->statvotes(), output);
  }

  // optional int32 statCommentsCount = 31;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->statcommentscount(), output);
  }

  // optional int32 statViews = 32;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->statviews(), output);
  }

  // optional int64 statRating = 33;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->statrating(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string referenceId = 34;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referenceid().data(), static_cast<int>(this->referenceid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.referenceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->referenceid(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 originalThumbWidth = 35;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->originalthumbwidth(), output);
  }

  // optional int32 originalThumbHeight = 36;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->originalthumbheight(), output);
  }

  // optional int64 importTime = 37;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->importtime(), output);
  }

  // optional int32 sourceId = 38;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->sourceid(), output);
  }

  // optional bool hasPlayer = 39;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->hasplayer(), output);
  }

  // optional int32 episode = 40;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->episode(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string player = 41;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player().data(), static_cast<int>(this->player().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.player");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      41, this->player(), output);
  }

  // optional string videoType = 42;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videotype().data(), static_cast<int>(this->videotype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.videoType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->videotype(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 width = 43;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->width(), output);
  }

  // optional int32 height = 44;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->height(), output);
  }

  // optional int32 season = 45;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->season(), output);
  }

  // optional int32 seriesId = 46;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->seriesid(), output);
  }

  // optional bool finishedSerial = 47;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(47, this->finishedserial(), output);
  }

  // optional int64 byte_size = 48;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(48, this->byte_size(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string metadataSourceUrl = 49;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadatasourceurl().data(), static_cast<int>(this->metadatasourceurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      49, this->metadatasourceurl(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool full_movie = 51;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->full_movie(), output);
  }

  // optional bool full_hd = 52;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(52, this->full_hd(), output);
  }

  // optional bool allowInFastbase = 53;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->allowinfastbase(), output);
  }

  // optional int64 contentId = 54;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(54, this->contentid(), output);
  }

  // optional int32 statLikes = 55;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->statlikes(), output);
  }

  // optional int32 statDislikes = 56;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->statdislikes(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional .ru.mail.go.webbase.blobs.VideoLiveStreamType liveStream = 57;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      57, this->livestream(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ExclusiveProviders exclusiveProvider = 58;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      58, this->exclusiveprovider(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ProtobufSourceType protobufSourceTypeFlag = 59;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      59, this->protobufsourcetypeflag(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool allow_embed = 60;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->allow_embed(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string youtubeHash = 61;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtubehash().data(), static_cast<int>(this->youtubehash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      61, this->youtubehash(), output);
  }

  // optional string channelId = 62;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), static_cast<int>(this->channelid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.channelId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      62, this->channelid(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional int64 userId64 = 63;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(63, this->userid64(), output);
  }

  // optional .ru.mail.go.webbase.blobs.LiveVideoState liveVideoState = 64;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      64, this->livevideostate(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string extPlatform = 65;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extplatform().data(), static_cast<int>(this->extplatform().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      65, this->extplatform(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.VideoQualityValue videoQualityOptions = 66;
  for (int i = 0, n = this->videoqualityoptions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      66, this->videoqualityoptions(i), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 reposts_count = 67;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->reposts_count(), output);
  }

  // optional bool group_is_closed = 68;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(68, this->group_is_closed(), output);
  }

  // optional bool group_is_verified = 69;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(69, this->group_is_verified(), output);
  }

  // optional int32 group_members_count = 70;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->group_members_count(), output);
  }

  // optional bool group_trending = 71;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(71, this->group_trending(), output);
  }

  // optional .ru.mail.go.webbase.blobs.DzenCertainGrade dzen_certain_grade = 72;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      72, this->dzen_certain_grade(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VideoOrientation video_orientation = 73;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      73, this->video_orientation(), output);
  }

  // optional bool dzen_exists_in_reco_snapshot = 74 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(74, this->dzen_exists_in_reco_snapshot(), output);
  }

  // optional bool subscribers_only = 75 [default = false];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(75, this->subscribers_only(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VideoType dzen_video_type = 76;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      76, this->dzen_video_type(), output);
  }

  // optional bool user_is_verified = 77 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(77, this->user_is_verified(), output);
  }

  // optional int32 user_subscribers = 78;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(78, this->user_subscribers(), output);
  }

  // optional int32 adult_reports_count = 79;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(79, this->adult_reports_count(), output);
  }

  // optional bool is_probably_porn_by_vk_score = 80 [default = false];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(80, this->is_probably_porn_by_vk_score(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string user_domain = 81;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_domain().data(), static_cast<int>(this->user_domain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.user_domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      81, this->user_domain(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool is_good_film = 82 [default = false];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(82, this->is_good_film(), output);
  }

  // optional bool is_good_cartoon = 83 [default = false];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->is_good_cartoon(), output);
  }

  // optional bool is_good_serial = 84 [default = false];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(84, this->is_good_serial(), output);
  }

  // optional bool is_update = 85;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(85, this->is_update(), output);
  }

  // optional bool is_licensed_content_vk = 86;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(86, this->is_licensed_content_vk(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string content_hash_string = 87;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_hash_string().data(), static_cast<int>(this->content_hash_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      87, this->content_hash_string(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional int64 similarity_cluster_id = 88;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(88, this->similarity_cluster_id(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string contentIdString = 89;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentidstring().data(), static_cast<int>(this->contentidstring().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      89, this->contentidstring(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional int64 united_video_id = 90;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(90, this->united_video_id(), output);
  }

  // optional bool is_promo_author = 91 [default = false];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(91, this->is_promo_author(), output);
  }

  // repeated string videoQualityOptionsVK = 92;
  for (int i = 0, n = this->videoqualityoptionsvk_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videoqualityoptionsvk(i).data(), static_cast<int>(this->videoqualityoptionsvk(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      92, this->videoqualityoptionsvk(i), output);
  }

  // optional bool is_official_music_clip = 93 [default = false];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(93, this->is_official_music_clip(), output);
  }

  // optional bool is_external = 94;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(94, this->is_external(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string external_link = 95;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_link().data(), static_cast<int>(this->external_link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.external_link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      95, this->external_link(), output);
  }

  // optional string originalAlbumTitle = 96;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originalalbumtitle().data(), static_cast<int>(this->originalalbumtitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      96, this->originalalbumtitle(), output);
  }

  // optional string audio_title = 97;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audio_title().data(), static_cast<int>(this->audio_title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.audio_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      97, this->audio_title(), output);
  }

  // optional string audio_performer = 98;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audio_performer().data(), static_cast<int>(this->audio_performer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      98, this->audio_performer(), output);
  }

  // repeated string hashtags = 99;
  for (int i = 0, n = this->hashtags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hashtags(i).data(), static_cast<int>(this->hashtags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.hashtags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      99, this->hashtags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VideoImportDoc)
}

::google::protobuf::uint8* VideoImportDoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VideoImportDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool isDeleted = 2;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isdeleted(), target);
  }

  // optional string urlVideo = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urlvideo().data(), static_cast<int>(this->urlvideo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->urlvideo(), target);
  }

  // optional string urlPreview = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urlpreview().data(), static_cast<int>(this->urlpreview().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->urlpreview(), target);
  }

  // optional bytes rawPreviewData = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->rawpreviewdata(), target);
  }

  // optional string description = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // repeated string category = 7;
  for (int i = 0, n = this->category_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category(i).data(), static_cast<int>(this->category(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.category");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->category(i), target);
  }

  // repeated string tag = 8;
  for (int i = 0, n = this->tag_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag(i).data(), static_cast<int>(this->tag(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.tag");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->tag(i), target);
  }

  // optional bool adult = 9;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->adult(), target);
  }

  // optional int64 contentHash = 10;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->contenthash(), target);
  }

  // optional int32 duration = 11;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->duration(), target);
  }

  // optional int64 id = 12;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->id(), target);
  }

  // optional bool legal = 13;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->legal(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 shottime = 14;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->shottime(), target);
  }

  // optional int64 time = 15;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->time(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool hd = 16;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->hd(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool paid = 17;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->paid(), target);
  }

  // optional bool regreq = 18;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->regreq(), target);
  }

  // optional int32 fee = 19;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->fee(), target);
  }

  // optional int32 feeCurrency = 20;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->feecurrency(), target);
  }

  // optional int32 userId = 21;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->userid(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string userUrl = 22;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userurl().data(), static_cast<int>(this->userurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.userUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->userurl(), target);
  }

  // optional string userNick = 23;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usernick().data(), static_cast<int>(this->usernick().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.userNick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->usernick(), target);
  }

  // optional string userMail = 24;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usermail().data(), static_cast<int>(this->usermail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.userMail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->usermail(), target);
  }

  // optional string albumDescription = 25;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumdescription().data(), static_cast<int>(this->albumdescription().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->albumdescription(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 albumCommentCount = 26;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->albumcommentcount(), target);
  }

  // optional int32 albumId = 27;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->albumid(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string albumName = 28;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumname().data(), static_cast<int>(this->albumname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.albumName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->albumname(), target);
  }

  // optional string albumUrl = 29;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumurl().data(), static_cast<int>(this->albumurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->albumurl(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 statVotes = 30;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->statvotes(), target);
  }

  // optional int32 statCommentsCount = 31;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->statcommentscount(), target);
  }

  // optional int32 statViews = 32;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->statviews(), target);
  }

  // optional int64 statRating = 33;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->statrating(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string referenceId = 34;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referenceid().data(), static_cast<int>(this->referenceid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.referenceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->referenceid(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 originalThumbWidth = 35;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->originalthumbwidth(), target);
  }

  // optional int32 originalThumbHeight = 36;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->originalthumbheight(), target);
  }

  // optional int64 importTime = 37;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->importtime(), target);
  }

  // optional int32 sourceId = 38;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->sourceid(), target);
  }

  // optional bool hasPlayer = 39;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->hasplayer(), target);
  }

  // optional int32 episode = 40;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->episode(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string player = 41;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player().data(), static_cast<int>(this->player().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.player");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->player(), target);
  }

  // optional string videoType = 42;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videotype().data(), static_cast<int>(this->videotype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.videoType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->videotype(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 width = 43;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->width(), target);
  }

  // optional int32 height = 44;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->height(), target);
  }

  // optional int32 season = 45;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->season(), target);
  }

  // optional int32 seriesId = 46;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->seriesid(), target);
  }

  // optional bool finishedSerial = 47;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(47, this->finishedserial(), target);
  }

  // optional int64 byte_size = 48;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(48, this->byte_size(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string metadataSourceUrl = 49;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadatasourceurl().data(), static_cast<int>(this->metadatasourceurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        49, this->metadatasourceurl(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool full_movie = 51;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->full_movie(), target);
  }

  // optional bool full_hd = 52;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(52, this->full_hd(), target);
  }

  // optional bool allowInFastbase = 53;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->allowinfastbase(), target);
  }

  // optional int64 contentId = 54;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(54, this->contentid(), target);
  }

  // optional int32 statLikes = 55;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->statlikes(), target);
  }

  // optional int32 statDislikes = 56;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->statdislikes(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional .ru.mail.go.webbase.blobs.VideoLiveStreamType liveStream = 57;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      57, this->livestream(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ExclusiveProviders exclusiveProvider = 58;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      58, this->exclusiveprovider(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ProtobufSourceType protobufSourceTypeFlag = 59;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      59, this->protobufsourcetypeflag(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool allow_embed = 60;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->allow_embed(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string youtubeHash = 61;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtubehash().data(), static_cast<int>(this->youtubehash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        61, this->youtubehash(), target);
  }

  // optional string channelId = 62;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelid().data(), static_cast<int>(this->channelid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.channelId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        62, this->channelid(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int64 userId64 = 63;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(63, this->userid64(), target);
  }

  // optional .ru.mail.go.webbase.blobs.LiveVideoState liveVideoState = 64;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      64, this->livevideostate(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string extPlatform = 65;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extplatform().data(), static_cast<int>(this->extplatform().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        65, this->extplatform(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.VideoQualityValue videoQualityOptions = 66;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    66, this->videoqualityoptions_, target);

  cached_has_bits = _has_bits_[2];
  // optional int32 reposts_count = 67;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->reposts_count(), target);
  }

  // optional bool group_is_closed = 68;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(68, this->group_is_closed(), target);
  }

  // optional bool group_is_verified = 69;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(69, this->group_is_verified(), target);
  }

  // optional int32 group_members_count = 70;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->group_members_count(), target);
  }

  // optional bool group_trending = 71;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(71, this->group_trending(), target);
  }

  // optional .ru.mail.go.webbase.blobs.DzenCertainGrade dzen_certain_grade = 72;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      72, this->dzen_certain_grade(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VideoOrientation video_orientation = 73;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      73, this->video_orientation(), target);
  }

  // optional bool dzen_exists_in_reco_snapshot = 74 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(74, this->dzen_exists_in_reco_snapshot(), target);
  }

  // optional bool subscribers_only = 75 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(75, this->subscribers_only(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VideoType dzen_video_type = 76;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      76, this->dzen_video_type(), target);
  }

  // optional bool user_is_verified = 77 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(77, this->user_is_verified(), target);
  }

  // optional int32 user_subscribers = 78;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(78, this->user_subscribers(), target);
  }

  // optional int32 adult_reports_count = 79;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(79, this->adult_reports_count(), target);
  }

  // optional bool is_probably_porn_by_vk_score = 80 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(80, this->is_probably_porn_by_vk_score(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string user_domain = 81;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_domain().data(), static_cast<int>(this->user_domain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.user_domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        81, this->user_domain(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool is_good_film = 82 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(82, this->is_good_film(), target);
  }

  // optional bool is_good_cartoon = 83 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->is_good_cartoon(), target);
  }

  // optional bool is_good_serial = 84 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(84, this->is_good_serial(), target);
  }

  // optional bool is_update = 85;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(85, this->is_update(), target);
  }

  // optional bool is_licensed_content_vk = 86;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(86, this->is_licensed_content_vk(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string content_hash_string = 87;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_hash_string().data(), static_cast<int>(this->content_hash_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        87, this->content_hash_string(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int64 similarity_cluster_id = 88;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(88, this->similarity_cluster_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string contentIdString = 89;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentidstring().data(), static_cast<int>(this->contentidstring().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        89, this->contentidstring(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int64 united_video_id = 90;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(90, this->united_video_id(), target);
  }

  // optional bool is_promo_author = 91 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(91, this->is_promo_author(), target);
  }

  // repeated string videoQualityOptionsVK = 92;
  for (int i = 0, n = this->videoqualityoptionsvk_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videoqualityoptionsvk(i).data(), static_cast<int>(this->videoqualityoptionsvk(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(92, this->videoqualityoptionsvk(i), target);
  }

  // optional bool is_official_music_clip = 93 [default = false];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(93, this->is_official_music_clip(), target);
  }

  // optional bool is_external = 94;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(94, this->is_external(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string external_link = 95;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_link().data(), static_cast<int>(this->external_link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.external_link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        95, this->external_link(), target);
  }

  // optional string originalAlbumTitle = 96;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originalalbumtitle().data(), static_cast<int>(this->originalalbumtitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        96, this->originalalbumtitle(), target);
  }

  // optional string audio_title = 97;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audio_title().data(), static_cast<int>(this->audio_title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.audio_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        97, this->audio_title(), target);
  }

  // optional string audio_performer = 98;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audio_performer().data(), static_cast<int>(this->audio_performer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        98, this->audio_performer(), target);
  }

  // repeated string hashtags = 99;
  for (int i = 0, n = this->hashtags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hashtags(i).data(), static_cast<int>(this->hashtags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoImportDoc.hashtags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(99, this->hashtags(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VideoImportDoc)
  return target;
}

size_t VideoImportDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VideoImportDoc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string category = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->category_size());
  for (int i = 0, n = this->category_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->category(i));
  }

  // repeated string tag = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tag_size());
  for (int i = 0, n = this->tag_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag(i));
  }

  // repeated .ru.mail.go.webbase.blobs.VideoQualityValue videoQualityOptions = 66;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->videoqualityoptions_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->videoqualityoptions(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated string videoQualityOptionsVK = 92;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->videoqualityoptionsvk_size());
  for (int i = 0, n = this->videoqualityoptionsvk_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->videoqualityoptionsvk(i));
  }

  // repeated string hashtags = 99;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->hashtags_size());
  for (int i = 0, n = this->hashtags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hashtags(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string urlVideo = 3;
    if (has_urlvideo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->urlvideo());
    }

    // optional string urlPreview = 4;
    if (has_urlpreview()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->urlpreview());
    }

    // optional bytes rawPreviewData = 5;
    if (has_rawpreviewdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rawpreviewdata());
    }

    // optional string description = 6;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string userUrl = 22;
    if (has_userurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userurl());
    }

    // optional string userNick = 23;
    if (has_usernick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usernick());
    }

    // optional string userMail = 24;
    if (has_usermail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usermail());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string albumDescription = 25;
    if (has_albumdescription()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->albumdescription());
    }

    // optional string albumName = 28;
    if (has_albumname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->albumname());
    }

    // optional string albumUrl = 29;
    if (has_albumurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->albumurl());
    }

    // optional string referenceId = 34;
    if (has_referenceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->referenceid());
    }

    // optional string player = 41;
    if (has_player()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player());
    }

    // optional string videoType = 42;
    if (has_videotype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videotype());
    }

    // optional string metadataSourceUrl = 49;
    if (has_metadatasourceurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metadatasourceurl());
    }

    // optional string youtubeHash = 61;
    if (has_youtubehash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtubehash());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional string channelId = 62;
    if (has_channelid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional string extPlatform = 65;
    if (has_extplatform()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extplatform());
    }

    // optional string user_domain = 81;
    if (has_user_domain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_domain());
    }

    // optional string content_hash_string = 87;
    if (has_content_hash_string()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content_hash_string());
    }

    // optional string contentIdString = 89;
    if (has_contentidstring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contentidstring());
    }

    // optional string external_link = 95;
    if (has_external_link()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_link());
    }

    // optional string originalAlbumTitle = 96;
    if (has_originalalbumtitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originalalbumtitle());
    }

    // optional string audio_title = 97;
    if (has_audio_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audio_title());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional string audio_performer = 98;
    if (has_audio_performer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audio_performer());
    }

    // optional int64 contentHash = 10;
    if (has_contenthash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->contenthash());
    }

    // optional bool isDeleted = 2;
    if (has_isdeleted()) {
      total_size += 1 + 1;
    }

    // optional bool adult = 9;
    if (has_adult()) {
      total_size += 1 + 1;
    }

    // optional bool legal = 13;
    if (has_legal()) {
      total_size += 1 + 1;
    }

    // optional bool hd = 16;
    if (has_hd()) {
      total_size += 2 + 1;
    }

    // optional int32 duration = 11;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int64 id = 12;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional int64 shottime = 14;
    if (has_shottime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shottime());
    }

    // optional int64 time = 15;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 fee = 19;
    if (has_fee()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fee());
    }

    // optional int32 feeCurrency = 20;
    if (has_feecurrency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->feecurrency());
    }

    // optional int32 userId = 21;
    if (has_userid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 albumCommentCount = 26;
    if (has_albumcommentcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->albumcommentcount());
    }

    // optional int32 albumId = 27;
    if (has_albumid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->albumid());
    }

    // optional int32 statVotes = 30;
    if (has_statvotes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statvotes());
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional bool paid = 17;
    if (has_paid()) {
      total_size += 2 + 1;
    }

    // optional bool regreq = 18;
    if (has_regreq()) {
      total_size += 2 + 1;
    }

    // optional bool hasPlayer = 39;
    if (has_hasplayer()) {
      total_size += 2 + 1;
    }

    // optional bool finishedSerial = 47;
    if (has_finishedserial()) {
      total_size += 2 + 1;
    }

    // optional int32 statCommentsCount = 31;
    if (has_statcommentscount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statcommentscount());
    }

    // optional int64 statRating = 33;
    if (has_statrating()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->statrating());
    }

    // optional int32 statViews = 32;
    if (has_statviews()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statviews());
    }

    // optional int32 originalThumbWidth = 35;
    if (has_originalthumbwidth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->originalthumbwidth());
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional int64 importTime = 37;
    if (has_importtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->importtime());
    }

    // optional int32 originalThumbHeight = 36;
    if (has_originalthumbheight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->originalthumbheight());
    }

    // optional int32 sourceId = 38;
    if (has_sourceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourceid());
    }

    // optional int32 episode = 40;
    if (has_episode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->episode());
    }

    // optional int32 width = 43;
    if (has_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 44;
    if (has_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 season = 45;
    if (has_season()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season());
    }

    // optional int64 byte_size = 48;
    if (has_byte_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->byte_size());
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional int32 seriesId = 46;
    if (has_seriesid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seriesid());
    }

    // optional bool full_movie = 51;
    if (has_full_movie()) {
      total_size += 2 + 1;
    }

    // optional bool full_hd = 52;
    if (has_full_hd()) {
      total_size += 2 + 1;
    }

    // optional bool allowInFastbase = 53;
    if (has_allowinfastbase()) {
      total_size += 2 + 1;
    }

    // optional bool allow_embed = 60;
    if (has_allow_embed()) {
      total_size += 2 + 1;
    }

    // optional int64 contentId = 54;
    if (has_contentid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->contentid());
    }

    // optional int32 statLikes = 55;
    if (has_statlikes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statlikes());
    }

    // optional int32 statDislikes = 56;
    if (has_statdislikes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statdislikes());
    }

  }
  if (_has_bits_[64 / 32] & 255u) {
    // optional .ru.mail.go.webbase.blobs.VideoLiveStreamType liveStream = 57;
    if (has_livestream()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->livestream());
    }

    // optional .ru.mail.go.webbase.blobs.ExclusiveProviders exclusiveProvider = 58;
    if (has_exclusiveprovider()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exclusiveprovider());
    }

    // optional .ru.mail.go.webbase.blobs.ProtobufSourceType protobufSourceTypeFlag = 59;
    if (has_protobufsourcetypeflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protobufsourcetypeflag());
    }

    // optional .ru.mail.go.webbase.blobs.LiveVideoState liveVideoState = 64;
    if (has_livevideostate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->livevideostate());
    }

    // optional int64 userId64 = 63;
    if (has_userid64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid64());
    }

    // optional int32 reposts_count = 67;
    if (has_reposts_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reposts_count());
    }

    // optional int32 group_members_count = 70;
    if (has_group_members_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_members_count());
    }

    // optional bool group_is_closed = 68;
    if (has_group_is_closed()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[72 / 32] & 65280u) {
    // optional bool group_is_verified = 69;
    if (has_group_is_verified()) {
      total_size += 2 + 1;
    }

    // optional bool group_trending = 71;
    if (has_group_trending()) {
      total_size += 2 + 1;
    }

    // optional bool dzen_exists_in_reco_snapshot = 74 [default = false];
    if (has_dzen_exists_in_reco_snapshot()) {
      total_size += 2 + 1;
    }

    // optional int32 user_subscribers = 78;
    if (has_user_subscribers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_subscribers());
    }

    // optional bool subscribers_only = 75 [default = false];
    if (has_subscribers_only()) {
      total_size += 2 + 1;
    }

    // optional bool user_is_verified = 77 [default = false];
    if (has_user_is_verified()) {
      total_size += 2 + 1;
    }

    // optional bool is_probably_porn_by_vk_score = 80 [default = false];
    if (has_is_probably_porn_by_vk_score()) {
      total_size += 2 + 1;
    }

    // optional bool is_good_film = 82 [default = false];
    if (has_is_good_film()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[80 / 32] & 16711680u) {
    // optional int32 adult_reports_count = 79;
    if (has_adult_reports_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adult_reports_count());
    }

    // optional int64 similarity_cluster_id = 88;
    if (has_similarity_cluster_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->similarity_cluster_id());
    }

    // optional bool is_good_cartoon = 83 [default = false];
    if (has_is_good_cartoon()) {
      total_size += 2 + 1;
    }

    // optional bool is_good_serial = 84 [default = false];
    if (has_is_good_serial()) {
      total_size += 2 + 1;
    }

    // optional bool is_update = 85;
    if (has_is_update()) {
      total_size += 2 + 1;
    }

    // optional bool is_licensed_content_vk = 86;
    if (has_is_licensed_content_vk()) {
      total_size += 2 + 1;
    }

    // optional bool is_promo_author = 91 [default = false];
    if (has_is_promo_author()) {
      total_size += 2 + 1;
    }

    // optional bool is_official_music_clip = 93 [default = false];
    if (has_is_official_music_clip()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[88 / 32] & 520093696u) {
    // optional bool is_external = 94;
    if (has_is_external()) {
      total_size += 2 + 1;
    }

    // optional int64 united_video_id = 90;
    if (has_united_video_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->united_video_id());
    }

    // optional .ru.mail.go.webbase.blobs.VideoType dzen_video_type = 76;
    if (has_dzen_video_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dzen_video_type());
    }

    // optional .ru.mail.go.webbase.blobs.DzenCertainGrade dzen_certain_grade = 72;
    if (has_dzen_certain_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dzen_certain_grade());
    }

    // optional .ru.mail.go.webbase.blobs.VideoOrientation video_orientation = 73;
    if (has_video_orientation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->video_orientation());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoImportDoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VideoImportDoc)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoImportDoc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoImportDoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VideoImportDoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VideoImportDoc)
    MergeFrom(*source);
  }
}

void VideoImportDoc::MergeFrom(const VideoImportDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VideoImportDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_.MergeFrom(from.category_);
  tag_.MergeFrom(from.tag_);
  videoqualityoptions_.MergeFrom(from.videoqualityoptions_);
  videoqualityoptionsvk_.MergeFrom(from.videoqualityoptionsvk_);
  hashtags_.MergeFrom(from.hashtags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_urlvideo();
      urlvideo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.urlvideo_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_urlpreview();
      urlpreview_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.urlpreview_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_rawpreviewdata();
      rawpreviewdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rawpreviewdata_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_userurl();
      userurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userurl_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_usernick();
      usernick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usernick_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_usermail();
      usermail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usermail_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_albumdescription();
      albumdescription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumdescription_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_albumname();
      albumname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumname_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_albumurl();
      albumurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumurl_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_referenceid();
      referenceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referenceid_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_player();
      player_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_videotype();
      videotype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videotype_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_metadatasourceurl();
      metadatasourceurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadatasourceurl_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_youtubehash();
      youtubehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtubehash_);
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      set_has_channelid();
      channelid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
    }
    if (cached_has_bits & 0x00020000u) {
      set_has_extplatform();
      extplatform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extplatform_);
    }
    if (cached_has_bits & 0x00040000u) {
      set_has_user_domain();
      user_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_domain_);
    }
    if (cached_has_bits & 0x00080000u) {
      set_has_content_hash_string();
      content_hash_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_hash_string_);
    }
    if (cached_has_bits & 0x00100000u) {
      set_has_contentidstring();
      contentidstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contentidstring_);
    }
    if (cached_has_bits & 0x00200000u) {
      set_has_external_link();
      external_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_link_);
    }
    if (cached_has_bits & 0x00400000u) {
      set_has_originalalbumtitle();
      originalalbumtitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.originalalbumtitle_);
    }
    if (cached_has_bits & 0x00800000u) {
      set_has_audio_title();
      audio_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_title_);
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      set_has_audio_performer();
      audio_performer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_performer_);
    }
    if (cached_has_bits & 0x02000000u) {
      contenthash_ = from.contenthash_;
    }
    if (cached_has_bits & 0x04000000u) {
      isdeleted_ = from.isdeleted_;
    }
    if (cached_has_bits & 0x08000000u) {
      adult_ = from.adult_;
    }
    if (cached_has_bits & 0x10000000u) {
      legal_ = from.legal_;
    }
    if (cached_has_bits & 0x20000000u) {
      hd_ = from.hd_;
    }
    if (cached_has_bits & 0x40000000u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x80000000u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      shottime_ = from.shottime_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000004u) {
      fee_ = from.fee_;
    }
    if (cached_has_bits & 0x00000008u) {
      feecurrency_ = from.feecurrency_;
    }
    if (cached_has_bits & 0x00000010u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000020u) {
      albumcommentcount_ = from.albumcommentcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      albumid_ = from.albumid_;
    }
    if (cached_has_bits & 0x00000080u) {
      statvotes_ = from.statvotes_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      paid_ = from.paid_;
    }
    if (cached_has_bits & 0x00000200u) {
      regreq_ = from.regreq_;
    }
    if (cached_has_bits & 0x00000400u) {
      hasplayer_ = from.hasplayer_;
    }
    if (cached_has_bits & 0x00000800u) {
      finishedserial_ = from.finishedserial_;
    }
    if (cached_has_bits & 0x00001000u) {
      statcommentscount_ = from.statcommentscount_;
    }
    if (cached_has_bits & 0x00002000u) {
      statrating_ = from.statrating_;
    }
    if (cached_has_bits & 0x00004000u) {
      statviews_ = from.statviews_;
    }
    if (cached_has_bits & 0x00008000u) {
      originalthumbwidth_ = from.originalthumbwidth_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      importtime_ = from.importtime_;
    }
    if (cached_has_bits & 0x00020000u) {
      originalthumbheight_ = from.originalthumbheight_;
    }
    if (cached_has_bits & 0x00040000u) {
      sourceid_ = from.sourceid_;
    }
    if (cached_has_bits & 0x00080000u) {
      episode_ = from.episode_;
    }
    if (cached_has_bits & 0x00100000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00200000u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00400000u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00800000u) {
      byte_size_ = from.byte_size_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      seriesid_ = from.seriesid_;
    }
    if (cached_has_bits & 0x02000000u) {
      full_movie_ = from.full_movie_;
    }
    if (cached_has_bits & 0x04000000u) {
      full_hd_ = from.full_hd_;
    }
    if (cached_has_bits & 0x08000000u) {
      allowinfastbase_ = from.allowinfastbase_;
    }
    if (cached_has_bits & 0x10000000u) {
      allow_embed_ = from.allow_embed_;
    }
    if (cached_has_bits & 0x20000000u) {
      contentid_ = from.contentid_;
    }
    if (cached_has_bits & 0x40000000u) {
      statlikes_ = from.statlikes_;
    }
    if (cached_has_bits & 0x80000000u) {
      statdislikes_ = from.statdislikes_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      livestream_ = from.livestream_;
    }
    if (cached_has_bits & 0x00000002u) {
      exclusiveprovider_ = from.exclusiveprovider_;
    }
    if (cached_has_bits & 0x00000004u) {
      protobufsourcetypeflag_ = from.protobufsourcetypeflag_;
    }
    if (cached_has_bits & 0x00000008u) {
      livevideostate_ = from.livevideostate_;
    }
    if (cached_has_bits & 0x00000010u) {
      userid64_ = from.userid64_;
    }
    if (cached_has_bits & 0x00000020u) {
      reposts_count_ = from.reposts_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      group_members_count_ = from.group_members_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      group_is_closed_ = from.group_is_closed_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      group_is_verified_ = from.group_is_verified_;
    }
    if (cached_has_bits & 0x00000200u) {
      group_trending_ = from.group_trending_;
    }
    if (cached_has_bits & 0x00000400u) {
      dzen_exists_in_reco_snapshot_ = from.dzen_exists_in_reco_snapshot_;
    }
    if (cached_has_bits & 0x00000800u) {
      user_subscribers_ = from.user_subscribers_;
    }
    if (cached_has_bits & 0x00001000u) {
      subscribers_only_ = from.subscribers_only_;
    }
    if (cached_has_bits & 0x00002000u) {
      user_is_verified_ = from.user_is_verified_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_probably_porn_by_vk_score_ = from.is_probably_porn_by_vk_score_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_good_film_ = from.is_good_film_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      adult_reports_count_ = from.adult_reports_count_;
    }
    if (cached_has_bits & 0x00020000u) {
      similarity_cluster_id_ = from.similarity_cluster_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_good_cartoon_ = from.is_good_cartoon_;
    }
    if (cached_has_bits & 0x00080000u) {
      is_good_serial_ = from.is_good_serial_;
    }
    if (cached_has_bits & 0x00100000u) {
      is_update_ = from.is_update_;
    }
    if (cached_has_bits & 0x00200000u) {
      is_licensed_content_vk_ = from.is_licensed_content_vk_;
    }
    if (cached_has_bits & 0x00400000u) {
      is_promo_author_ = from.is_promo_author_;
    }
    if (cached_has_bits & 0x00800000u) {
      is_official_music_clip_ = from.is_official_music_clip_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 520093696u) {
    if (cached_has_bits & 0x01000000u) {
      is_external_ = from.is_external_;
    }
    if (cached_has_bits & 0x02000000u) {
      united_video_id_ = from.united_video_id_;
    }
    if (cached_has_bits & 0x04000000u) {
      dzen_video_type_ = from.dzen_video_type_;
    }
    if (cached_has_bits & 0x08000000u) {
      dzen_certain_grade_ = from.dzen_certain_grade_;
    }
    if (cached_has_bits & 0x10000000u) {
      video_orientation_ = from.video_orientation_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void VideoImportDoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VideoImportDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoImportDoc::CopyFrom(const VideoImportDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VideoImportDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoImportDoc::IsInitialized() const {
  return true;
}

void VideoImportDoc::Swap(VideoImportDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoImportDoc::InternalSwap(VideoImportDoc* other) {
  using std::swap;
  category_.InternalSwap(&other->category_);
  tag_.InternalSwap(&other->tag_);
  videoqualityoptions_.InternalSwap(&other->videoqualityoptions_);
  videoqualityoptionsvk_.InternalSwap(&other->videoqualityoptionsvk_);
  hashtags_.InternalSwap(&other->hashtags_);
  name_.Swap(&other->name_);
  urlvideo_.Swap(&other->urlvideo_);
  urlpreview_.Swap(&other->urlpreview_);
  rawpreviewdata_.Swap(&other->rawpreviewdata_);
  description_.Swap(&other->description_);
  userurl_.Swap(&other->userurl_);
  usernick_.Swap(&other->usernick_);
  usermail_.Swap(&other->usermail_);
  albumdescription_.Swap(&other->albumdescription_);
  albumname_.Swap(&other->albumname_);
  albumurl_.Swap(&other->albumurl_);
  referenceid_.Swap(&other->referenceid_);
  player_.Swap(&other->player_);
  videotype_.Swap(&other->videotype_);
  metadatasourceurl_.Swap(&other->metadatasourceurl_);
  youtubehash_.Swap(&other->youtubehash_);
  channelid_.Swap(&other->channelid_);
  extplatform_.Swap(&other->extplatform_);
  user_domain_.Swap(&other->user_domain_);
  content_hash_string_.Swap(&other->content_hash_string_);
  contentidstring_.Swap(&other->contentidstring_);
  external_link_.Swap(&other->external_link_);
  originalalbumtitle_.Swap(&other->originalalbumtitle_);
  audio_title_.Swap(&other->audio_title_);
  audio_performer_.Swap(&other->audio_performer_);
  swap(contenthash_, other->contenthash_);
  swap(isdeleted_, other->isdeleted_);
  swap(adult_, other->adult_);
  swap(legal_, other->legal_);
  swap(hd_, other->hd_);
  swap(duration_, other->duration_);
  swap(id_, other->id_);
  swap(shottime_, other->shottime_);
  swap(time_, other->time_);
  swap(fee_, other->fee_);
  swap(feecurrency_, other->feecurrency_);
  swap(userid_, other->userid_);
  swap(albumcommentcount_, other->albumcommentcount_);
  swap(albumid_, other->albumid_);
  swap(statvotes_, other->statvotes_);
  swap(paid_, other->paid_);
  swap(regreq_, other->regreq_);
  swap(hasplayer_, other->hasplayer_);
  swap(finishedserial_, other->finishedserial_);
  swap(statcommentscount_, other->statcommentscount_);
  swap(statrating_, other->statrating_);
  swap(statviews_, other->statviews_);
  swap(originalthumbwidth_, other->originalthumbwidth_);
  swap(importtime_, other->importtime_);
  swap(originalthumbheight_, other->originalthumbheight_);
  swap(sourceid_, other->sourceid_);
  swap(episode_, other->episode_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(season_, other->season_);
  swap(byte_size_, other->byte_size_);
  swap(seriesid_, other->seriesid_);
  swap(full_movie_, other->full_movie_);
  swap(full_hd_, other->full_hd_);
  swap(allowinfastbase_, other->allowinfastbase_);
  swap(allow_embed_, other->allow_embed_);
  swap(contentid_, other->contentid_);
  swap(statlikes_, other->statlikes_);
  swap(statdislikes_, other->statdislikes_);
  swap(livestream_, other->livestream_);
  swap(exclusiveprovider_, other->exclusiveprovider_);
  swap(protobufsourcetypeflag_, other->protobufsourcetypeflag_);
  swap(livevideostate_, other->livevideostate_);
  swap(userid64_, other->userid64_);
  swap(reposts_count_, other->reposts_count_);
  swap(group_members_count_, other->group_members_count_);
  swap(group_is_closed_, other->group_is_closed_);
  swap(group_is_verified_, other->group_is_verified_);
  swap(group_trending_, other->group_trending_);
  swap(dzen_exists_in_reco_snapshot_, other->dzen_exists_in_reco_snapshot_);
  swap(user_subscribers_, other->user_subscribers_);
  swap(subscribers_only_, other->subscribers_only_);
  swap(user_is_verified_, other->user_is_verified_);
  swap(is_probably_porn_by_vk_score_, other->is_probably_porn_by_vk_score_);
  swap(is_good_film_, other->is_good_film_);
  swap(adult_reports_count_, other->adult_reports_count_);
  swap(similarity_cluster_id_, other->similarity_cluster_id_);
  swap(is_good_cartoon_, other->is_good_cartoon_);
  swap(is_good_serial_, other->is_good_serial_);
  swap(is_update_, other->is_update_);
  swap(is_licensed_content_vk_, other->is_licensed_content_vk_);
  swap(is_promo_author_, other->is_promo_author_);
  swap(is_official_music_clip_, other->is_official_music_clip_);
  swap(is_external_, other->is_external_);
  swap(united_video_id_, other->united_video_id_);
  swap(dzen_video_type_, other->dzen_video_type_);
  swap(dzen_certain_grade_, other->dzen_certain_grade_);
  swap(video_orientation_, other->video_orientation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoImportDoc::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoImportDoc

// optional string name = 1;
bool VideoImportDoc::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoImportDoc::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoImportDoc::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoImportDoc::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& VideoImportDoc::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.name)
  return name_.GetNoArena();
}
void VideoImportDoc::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.name)
}
#if LANG_CXX11
void VideoImportDoc::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.name)
}
#endif
void VideoImportDoc::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.name)
}
void VideoImportDoc::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.name)
}
::std::string* VideoImportDoc::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.name)
}

// optional bool isDeleted = 2;
bool VideoImportDoc::has_isdeleted() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void VideoImportDoc::set_has_isdeleted() {
  _has_bits_[0] |= 0x04000000u;
}
void VideoImportDoc::clear_has_isdeleted() {
  _has_bits_[0] &= ~0x04000000u;
}
void VideoImportDoc::clear_isdeleted() {
  isdeleted_ = false;
  clear_has_isdeleted();
}
bool VideoImportDoc::isdeleted() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.isDeleted)
  return isdeleted_;
}
void VideoImportDoc::set_isdeleted(bool value) {
  set_has_isdeleted();
  isdeleted_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.isDeleted)
}

// optional string urlVideo = 3;
bool VideoImportDoc::has_urlvideo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VideoImportDoc::set_has_urlvideo() {
  _has_bits_[0] |= 0x00000002u;
}
void VideoImportDoc::clear_has_urlvideo() {
  _has_bits_[0] &= ~0x00000002u;
}
void VideoImportDoc::clear_urlvideo() {
  urlvideo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_urlvideo();
}
const ::std::string& VideoImportDoc::urlvideo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo)
  return urlvideo_.GetNoArena();
}
void VideoImportDoc::set_urlvideo(const ::std::string& value) {
  set_has_urlvideo();
  urlvideo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo)
}
#if LANG_CXX11
void VideoImportDoc::set_urlvideo(::std::string&& value) {
  set_has_urlvideo();
  urlvideo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo)
}
#endif
void VideoImportDoc::set_urlvideo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_urlvideo();
  urlvideo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo)
}
void VideoImportDoc::set_urlvideo(const char* value, size_t size) {
  set_has_urlvideo();
  urlvideo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo)
}
::std::string* VideoImportDoc::mutable_urlvideo() {
  set_has_urlvideo();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo)
  return urlvideo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_urlvideo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo)
  clear_has_urlvideo();
  return urlvideo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_urlvideo(::std::string* urlvideo) {
  if (urlvideo != NULL) {
    set_has_urlvideo();
  } else {
    clear_has_urlvideo();
  }
  urlvideo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), urlvideo);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo)
}

// optional string urlPreview = 4;
bool VideoImportDoc::has_urlpreview() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VideoImportDoc::set_has_urlpreview() {
  _has_bits_[0] |= 0x00000004u;
}
void VideoImportDoc::clear_has_urlpreview() {
  _has_bits_[0] &= ~0x00000004u;
}
void VideoImportDoc::clear_urlpreview() {
  urlpreview_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_urlpreview();
}
const ::std::string& VideoImportDoc::urlpreview() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview)
  return urlpreview_.GetNoArena();
}
void VideoImportDoc::set_urlpreview(const ::std::string& value) {
  set_has_urlpreview();
  urlpreview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview)
}
#if LANG_CXX11
void VideoImportDoc::set_urlpreview(::std::string&& value) {
  set_has_urlpreview();
  urlpreview_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview)
}
#endif
void VideoImportDoc::set_urlpreview(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_urlpreview();
  urlpreview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview)
}
void VideoImportDoc::set_urlpreview(const char* value, size_t size) {
  set_has_urlpreview();
  urlpreview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview)
}
::std::string* VideoImportDoc::mutable_urlpreview() {
  set_has_urlpreview();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview)
  return urlpreview_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_urlpreview() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview)
  clear_has_urlpreview();
  return urlpreview_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_urlpreview(::std::string* urlpreview) {
  if (urlpreview != NULL) {
    set_has_urlpreview();
  } else {
    clear_has_urlpreview();
  }
  urlpreview_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), urlpreview);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview)
}

// optional bytes rawPreviewData = 5;
bool VideoImportDoc::has_rawpreviewdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VideoImportDoc::set_has_rawpreviewdata() {
  _has_bits_[0] |= 0x00000008u;
}
void VideoImportDoc::clear_has_rawpreviewdata() {
  _has_bits_[0] &= ~0x00000008u;
}
void VideoImportDoc::clear_rawpreviewdata() {
  rawpreviewdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rawpreviewdata();
}
const ::std::string& VideoImportDoc::rawpreviewdata() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.rawPreviewData)
  return rawpreviewdata_.GetNoArena();
}
void VideoImportDoc::set_rawpreviewdata(const ::std::string& value) {
  set_has_rawpreviewdata();
  rawpreviewdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.rawPreviewData)
}
#if LANG_CXX11
void VideoImportDoc::set_rawpreviewdata(::std::string&& value) {
  set_has_rawpreviewdata();
  rawpreviewdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.rawPreviewData)
}
#endif
void VideoImportDoc::set_rawpreviewdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rawpreviewdata();
  rawpreviewdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.rawPreviewData)
}
void VideoImportDoc::set_rawpreviewdata(const void* value, size_t size) {
  set_has_rawpreviewdata();
  rawpreviewdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.rawPreviewData)
}
::std::string* VideoImportDoc::mutable_rawpreviewdata() {
  set_has_rawpreviewdata();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.rawPreviewData)
  return rawpreviewdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_rawpreviewdata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.rawPreviewData)
  clear_has_rawpreviewdata();
  return rawpreviewdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_rawpreviewdata(::std::string* rawpreviewdata) {
  if (rawpreviewdata != NULL) {
    set_has_rawpreviewdata();
  } else {
    clear_has_rawpreviewdata();
  }
  rawpreviewdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rawpreviewdata);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.rawPreviewData)
}

// optional string description = 6;
bool VideoImportDoc::has_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VideoImportDoc::set_has_description() {
  _has_bits_[0] |= 0x00000010u;
}
void VideoImportDoc::clear_has_description() {
  _has_bits_[0] &= ~0x00000010u;
}
void VideoImportDoc::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& VideoImportDoc::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.description)
  return description_.GetNoArena();
}
void VideoImportDoc::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.description)
}
#if LANG_CXX11
void VideoImportDoc::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.description)
}
#endif
void VideoImportDoc::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.description)
}
void VideoImportDoc::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.description)
}
::std::string* VideoImportDoc::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.description)
}

// repeated string category = 7;
int VideoImportDoc::category_size() const {
  return category_.size();
}
void VideoImportDoc::clear_category() {
  category_.Clear();
}
const ::std::string& VideoImportDoc::category(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.category)
  return category_.Get(index);
}
::std::string* VideoImportDoc::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.category)
  return category_.Mutable(index);
}
void VideoImportDoc::set_category(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.category)
  category_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VideoImportDoc::set_category(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.category)
  category_.Mutable(index)->assign(std::move(value));
}
#endif
void VideoImportDoc::set_category(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  category_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.category)
}
void VideoImportDoc::set_category(int index, const char* value, size_t size) {
  category_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.category)
}
::std::string* VideoImportDoc::add_category() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.category)
  return category_.Add();
}
void VideoImportDoc::add_category(const ::std::string& value) {
  category_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.category)
}
#if LANG_CXX11
void VideoImportDoc::add_category(::std::string&& value) {
  category_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.category)
}
#endif
void VideoImportDoc::add_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  category_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VideoImportDoc.category)
}
void VideoImportDoc::add_category(const char* value, size_t size) {
  category_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.category)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VideoImportDoc::category() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoImportDoc.category)
  return category_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VideoImportDoc::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoImportDoc.category)
  return &category_;
}

// repeated string tag = 8;
int VideoImportDoc::tag_size() const {
  return tag_.size();
}
void VideoImportDoc::clear_tag() {
  tag_.Clear();
}
const ::std::string& VideoImportDoc::tag(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
  return tag_.Get(index);
}
::std::string* VideoImportDoc::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
  return tag_.Mutable(index);
}
void VideoImportDoc::set_tag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
  tag_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VideoImportDoc::set_tag(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
  tag_.Mutable(index)->assign(std::move(value));
}
#endif
void VideoImportDoc::set_tag(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
}
void VideoImportDoc::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
}
::std::string* VideoImportDoc::add_tag() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
  return tag_.Add();
}
void VideoImportDoc::add_tag(const ::std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
}
#if LANG_CXX11
void VideoImportDoc::add_tag(::std::string&& value) {
  tag_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
}
#endif
void VideoImportDoc::add_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
}
void VideoImportDoc::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VideoImportDoc::tag() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
  return tag_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VideoImportDoc::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
  return &tag_;
}

// optional bool adult = 9;
bool VideoImportDoc::has_adult() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void VideoImportDoc::set_has_adult() {
  _has_bits_[0] |= 0x08000000u;
}
void VideoImportDoc::clear_has_adult() {
  _has_bits_[0] &= ~0x08000000u;
}
void VideoImportDoc::clear_adult() {
  adult_ = false;
  clear_has_adult();
}
bool VideoImportDoc::adult() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.adult)
  return adult_;
}
void VideoImportDoc::set_adult(bool value) {
  set_has_adult();
  adult_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.adult)
}

// optional int64 contentHash = 10;
bool VideoImportDoc::has_contenthash() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void VideoImportDoc::set_has_contenthash() {
  _has_bits_[0] |= 0x02000000u;
}
void VideoImportDoc::clear_has_contenthash() {
  _has_bits_[0] &= ~0x02000000u;
}
void VideoImportDoc::clear_contenthash() {
  contenthash_ = GOOGLE_LONGLONG(0);
  clear_has_contenthash();
}
::google::protobuf::int64 VideoImportDoc::contenthash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.contentHash)
  return contenthash_;
}
void VideoImportDoc::set_contenthash(::google::protobuf::int64 value) {
  set_has_contenthash();
  contenthash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.contentHash)
}

// optional int32 duration = 11;
bool VideoImportDoc::has_duration() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void VideoImportDoc::set_has_duration() {
  _has_bits_[0] |= 0x40000000u;
}
void VideoImportDoc::clear_has_duration() {
  _has_bits_[0] &= ~0x40000000u;
}
void VideoImportDoc::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
::google::protobuf::int32 VideoImportDoc::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.duration)
  return duration_;
}
void VideoImportDoc::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.duration)
}

// optional int64 id = 12;
bool VideoImportDoc::has_id() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void VideoImportDoc::set_has_id() {
  _has_bits_[0] |= 0x80000000u;
}
void VideoImportDoc::clear_has_id() {
  _has_bits_[0] &= ~0x80000000u;
}
void VideoImportDoc::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 VideoImportDoc::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.id)
  return id_;
}
void VideoImportDoc::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.id)
}

// optional bool legal = 13;
bool VideoImportDoc::has_legal() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void VideoImportDoc::set_has_legal() {
  _has_bits_[0] |= 0x10000000u;
}
void VideoImportDoc::clear_has_legal() {
  _has_bits_[0] &= ~0x10000000u;
}
void VideoImportDoc::clear_legal() {
  legal_ = false;
  clear_has_legal();
}
bool VideoImportDoc::legal() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.legal)
  return legal_;
}
void VideoImportDoc::set_legal(bool value) {
  set_has_legal();
  legal_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.legal)
}

// optional int64 shottime = 14;
bool VideoImportDoc::has_shottime() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void VideoImportDoc::set_has_shottime() {
  _has_bits_[1] |= 0x00000001u;
}
void VideoImportDoc::clear_has_shottime() {
  _has_bits_[1] &= ~0x00000001u;
}
void VideoImportDoc::clear_shottime() {
  shottime_ = GOOGLE_LONGLONG(0);
  clear_has_shottime();
}
::google::protobuf::int64 VideoImportDoc::shottime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.shottime)
  return shottime_;
}
void VideoImportDoc::set_shottime(::google::protobuf::int64 value) {
  set_has_shottime();
  shottime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.shottime)
}

// optional int64 time = 15;
bool VideoImportDoc::has_time() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void VideoImportDoc::set_has_time() {
  _has_bits_[1] |= 0x00000002u;
}
void VideoImportDoc::clear_has_time() {
  _has_bits_[1] &= ~0x00000002u;
}
void VideoImportDoc::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
::google::protobuf::int64 VideoImportDoc::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.time)
  return time_;
}
void VideoImportDoc::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.time)
}

// optional bool hd = 16;
bool VideoImportDoc::has_hd() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void VideoImportDoc::set_has_hd() {
  _has_bits_[0] |= 0x20000000u;
}
void VideoImportDoc::clear_has_hd() {
  _has_bits_[0] &= ~0x20000000u;
}
void VideoImportDoc::clear_hd() {
  hd_ = false;
  clear_has_hd();
}
bool VideoImportDoc::hd() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.hd)
  return hd_;
}
void VideoImportDoc::set_hd(bool value) {
  set_has_hd();
  hd_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.hd)
}

// optional bool paid = 17;
bool VideoImportDoc::has_paid() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void VideoImportDoc::set_has_paid() {
  _has_bits_[1] |= 0x00000100u;
}
void VideoImportDoc::clear_has_paid() {
  _has_bits_[1] &= ~0x00000100u;
}
void VideoImportDoc::clear_paid() {
  paid_ = false;
  clear_has_paid();
}
bool VideoImportDoc::paid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.paid)
  return paid_;
}
void VideoImportDoc::set_paid(bool value) {
  set_has_paid();
  paid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.paid)
}

// optional bool regreq = 18;
bool VideoImportDoc::has_regreq() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void VideoImportDoc::set_has_regreq() {
  _has_bits_[1] |= 0x00000200u;
}
void VideoImportDoc::clear_has_regreq() {
  _has_bits_[1] &= ~0x00000200u;
}
void VideoImportDoc::clear_regreq() {
  regreq_ = false;
  clear_has_regreq();
}
bool VideoImportDoc::regreq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.regreq)
  return regreq_;
}
void VideoImportDoc::set_regreq(bool value) {
  set_has_regreq();
  regreq_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.regreq)
}

// optional int32 fee = 19;
bool VideoImportDoc::has_fee() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void VideoImportDoc::set_has_fee() {
  _has_bits_[1] |= 0x00000004u;
}
void VideoImportDoc::clear_has_fee() {
  _has_bits_[1] &= ~0x00000004u;
}
void VideoImportDoc::clear_fee() {
  fee_ = 0;
  clear_has_fee();
}
::google::protobuf::int32 VideoImportDoc::fee() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.fee)
  return fee_;
}
void VideoImportDoc::set_fee(::google::protobuf::int32 value) {
  set_has_fee();
  fee_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.fee)
}

// optional int32 feeCurrency = 20;
bool VideoImportDoc::has_feecurrency() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void VideoImportDoc::set_has_feecurrency() {
  _has_bits_[1] |= 0x00000008u;
}
void VideoImportDoc::clear_has_feecurrency() {
  _has_bits_[1] &= ~0x00000008u;
}
void VideoImportDoc::clear_feecurrency() {
  feecurrency_ = 0;
  clear_has_feecurrency();
}
::google::protobuf::int32 VideoImportDoc::feecurrency() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.feeCurrency)
  return feecurrency_;
}
void VideoImportDoc::set_feecurrency(::google::protobuf::int32 value) {
  set_has_feecurrency();
  feecurrency_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.feeCurrency)
}

// optional int32 userId = 21;
bool VideoImportDoc::has_userid() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void VideoImportDoc::set_has_userid() {
  _has_bits_[1] |= 0x00000010u;
}
void VideoImportDoc::clear_has_userid() {
  _has_bits_[1] &= ~0x00000010u;
}
void VideoImportDoc::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
::google::protobuf::int32 VideoImportDoc::userid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.userId)
  return userid_;
}
void VideoImportDoc::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.userId)
}

// optional string userUrl = 22;
bool VideoImportDoc::has_userurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VideoImportDoc::set_has_userurl() {
  _has_bits_[0] |= 0x00000020u;
}
void VideoImportDoc::clear_has_userurl() {
  _has_bits_[0] &= ~0x00000020u;
}
void VideoImportDoc::clear_userurl() {
  userurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userurl();
}
const ::std::string& VideoImportDoc::userurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.userUrl)
  return userurl_.GetNoArena();
}
void VideoImportDoc::set_userurl(const ::std::string& value) {
  set_has_userurl();
  userurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.userUrl)
}
#if LANG_CXX11
void VideoImportDoc::set_userurl(::std::string&& value) {
  set_has_userurl();
  userurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.userUrl)
}
#endif
void VideoImportDoc::set_userurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userurl();
  userurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.userUrl)
}
void VideoImportDoc::set_userurl(const char* value, size_t size) {
  set_has_userurl();
  userurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.userUrl)
}
::std::string* VideoImportDoc::mutable_userurl() {
  set_has_userurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.userUrl)
  return userurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_userurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.userUrl)
  clear_has_userurl();
  return userurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_userurl(::std::string* userurl) {
  if (userurl != NULL) {
    set_has_userurl();
  } else {
    clear_has_userurl();
  }
  userurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.userUrl)
}

// optional string userNick = 23;
bool VideoImportDoc::has_usernick() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VideoImportDoc::set_has_usernick() {
  _has_bits_[0] |= 0x00000040u;
}
void VideoImportDoc::clear_has_usernick() {
  _has_bits_[0] &= ~0x00000040u;
}
void VideoImportDoc::clear_usernick() {
  usernick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_usernick();
}
const ::std::string& VideoImportDoc::usernick() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.userNick)
  return usernick_.GetNoArena();
}
void VideoImportDoc::set_usernick(const ::std::string& value) {
  set_has_usernick();
  usernick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.userNick)
}
#if LANG_CXX11
void VideoImportDoc::set_usernick(::std::string&& value) {
  set_has_usernick();
  usernick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.userNick)
}
#endif
void VideoImportDoc::set_usernick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_usernick();
  usernick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.userNick)
}
void VideoImportDoc::set_usernick(const char* value, size_t size) {
  set_has_usernick();
  usernick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.userNick)
}
::std::string* VideoImportDoc::mutable_usernick() {
  set_has_usernick();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.userNick)
  return usernick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_usernick() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.userNick)
  clear_has_usernick();
  return usernick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_usernick(::std::string* usernick) {
  if (usernick != NULL) {
    set_has_usernick();
  } else {
    clear_has_usernick();
  }
  usernick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usernick);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.userNick)
}

// optional string userMail = 24;
bool VideoImportDoc::has_usermail() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VideoImportDoc::set_has_usermail() {
  _has_bits_[0] |= 0x00000080u;
}
void VideoImportDoc::clear_has_usermail() {
  _has_bits_[0] &= ~0x00000080u;
}
void VideoImportDoc::clear_usermail() {
  usermail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_usermail();
}
const ::std::string& VideoImportDoc::usermail() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.userMail)
  return usermail_.GetNoArena();
}
void VideoImportDoc::set_usermail(const ::std::string& value) {
  set_has_usermail();
  usermail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.userMail)
}
#if LANG_CXX11
void VideoImportDoc::set_usermail(::std::string&& value) {
  set_has_usermail();
  usermail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.userMail)
}
#endif
void VideoImportDoc::set_usermail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_usermail();
  usermail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.userMail)
}
void VideoImportDoc::set_usermail(const char* value, size_t size) {
  set_has_usermail();
  usermail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.userMail)
}
::std::string* VideoImportDoc::mutable_usermail() {
  set_has_usermail();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.userMail)
  return usermail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_usermail() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.userMail)
  clear_has_usermail();
  return usermail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_usermail(::std::string* usermail) {
  if (usermail != NULL) {
    set_has_usermail();
  } else {
    clear_has_usermail();
  }
  usermail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usermail);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.userMail)
}

// optional string albumDescription = 25;
bool VideoImportDoc::has_albumdescription() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VideoImportDoc::set_has_albumdescription() {
  _has_bits_[0] |= 0x00000100u;
}
void VideoImportDoc::clear_has_albumdescription() {
  _has_bits_[0] &= ~0x00000100u;
}
void VideoImportDoc::clear_albumdescription() {
  albumdescription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumdescription();
}
const ::std::string& VideoImportDoc::albumdescription() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription)
  return albumdescription_.GetNoArena();
}
void VideoImportDoc::set_albumdescription(const ::std::string& value) {
  set_has_albumdescription();
  albumdescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription)
}
#if LANG_CXX11
void VideoImportDoc::set_albumdescription(::std::string&& value) {
  set_has_albumdescription();
  albumdescription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription)
}
#endif
void VideoImportDoc::set_albumdescription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumdescription();
  albumdescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription)
}
void VideoImportDoc::set_albumdescription(const char* value, size_t size) {
  set_has_albumdescription();
  albumdescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription)
}
::std::string* VideoImportDoc::mutable_albumdescription() {
  set_has_albumdescription();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription)
  return albumdescription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_albumdescription() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription)
  clear_has_albumdescription();
  return albumdescription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_albumdescription(::std::string* albumdescription) {
  if (albumdescription != NULL) {
    set_has_albumdescription();
  } else {
    clear_has_albumdescription();
  }
  albumdescription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumdescription);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription)
}

// optional int32 albumCommentCount = 26;
bool VideoImportDoc::has_albumcommentcount() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void VideoImportDoc::set_has_albumcommentcount() {
  _has_bits_[1] |= 0x00000020u;
}
void VideoImportDoc::clear_has_albumcommentcount() {
  _has_bits_[1] &= ~0x00000020u;
}
void VideoImportDoc::clear_albumcommentcount() {
  albumcommentcount_ = 0;
  clear_has_albumcommentcount();
}
::google::protobuf::int32 VideoImportDoc::albumcommentcount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.albumCommentCount)
  return albumcommentcount_;
}
void VideoImportDoc::set_albumcommentcount(::google::protobuf::int32 value) {
  set_has_albumcommentcount();
  albumcommentcount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.albumCommentCount)
}

// optional int32 albumId = 27;
bool VideoImportDoc::has_albumid() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void VideoImportDoc::set_has_albumid() {
  _has_bits_[1] |= 0x00000040u;
}
void VideoImportDoc::clear_has_albumid() {
  _has_bits_[1] &= ~0x00000040u;
}
void VideoImportDoc::clear_albumid() {
  albumid_ = 0;
  clear_has_albumid();
}
::google::protobuf::int32 VideoImportDoc::albumid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.albumId)
  return albumid_;
}
void VideoImportDoc::set_albumid(::google::protobuf::int32 value) {
  set_has_albumid();
  albumid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.albumId)
}

// optional string albumName = 28;
bool VideoImportDoc::has_albumname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VideoImportDoc::set_has_albumname() {
  _has_bits_[0] |= 0x00000200u;
}
void VideoImportDoc::clear_has_albumname() {
  _has_bits_[0] &= ~0x00000200u;
}
void VideoImportDoc::clear_albumname() {
  albumname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumname();
}
const ::std::string& VideoImportDoc::albumname() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.albumName)
  return albumname_.GetNoArena();
}
void VideoImportDoc::set_albumname(const ::std::string& value) {
  set_has_albumname();
  albumname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.albumName)
}
#if LANG_CXX11
void VideoImportDoc::set_albumname(::std::string&& value) {
  set_has_albumname();
  albumname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.albumName)
}
#endif
void VideoImportDoc::set_albumname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumname();
  albumname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.albumName)
}
void VideoImportDoc::set_albumname(const char* value, size_t size) {
  set_has_albumname();
  albumname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.albumName)
}
::std::string* VideoImportDoc::mutable_albumname() {
  set_has_albumname();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.albumName)
  return albumname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_albumname() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.albumName)
  clear_has_albumname();
  return albumname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_albumname(::std::string* albumname) {
  if (albumname != NULL) {
    set_has_albumname();
  } else {
    clear_has_albumname();
  }
  albumname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumname);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.albumName)
}

// optional string albumUrl = 29;
bool VideoImportDoc::has_albumurl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VideoImportDoc::set_has_albumurl() {
  _has_bits_[0] |= 0x00000400u;
}
void VideoImportDoc::clear_has_albumurl() {
  _has_bits_[0] &= ~0x00000400u;
}
void VideoImportDoc::clear_albumurl() {
  albumurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumurl();
}
const ::std::string& VideoImportDoc::albumurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl)
  return albumurl_.GetNoArena();
}
void VideoImportDoc::set_albumurl(const ::std::string& value) {
  set_has_albumurl();
  albumurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl)
}
#if LANG_CXX11
void VideoImportDoc::set_albumurl(::std::string&& value) {
  set_has_albumurl();
  albumurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl)
}
#endif
void VideoImportDoc::set_albumurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumurl();
  albumurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl)
}
void VideoImportDoc::set_albumurl(const char* value, size_t size) {
  set_has_albumurl();
  albumurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl)
}
::std::string* VideoImportDoc::mutable_albumurl() {
  set_has_albumurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl)
  return albumurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_albumurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl)
  clear_has_albumurl();
  return albumurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_albumurl(::std::string* albumurl) {
  if (albumurl != NULL) {
    set_has_albumurl();
  } else {
    clear_has_albumurl();
  }
  albumurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl)
}

// optional string originalAlbumTitle = 96;
bool VideoImportDoc::has_originalalbumtitle() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void VideoImportDoc::set_has_originalalbumtitle() {
  _has_bits_[0] |= 0x00400000u;
}
void VideoImportDoc::clear_has_originalalbumtitle() {
  _has_bits_[0] &= ~0x00400000u;
}
void VideoImportDoc::clear_originalalbumtitle() {
  originalalbumtitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_originalalbumtitle();
}
const ::std::string& VideoImportDoc::originalalbumtitle() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle)
  return originalalbumtitle_.GetNoArena();
}
void VideoImportDoc::set_originalalbumtitle(const ::std::string& value) {
  set_has_originalalbumtitle();
  originalalbumtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle)
}
#if LANG_CXX11
void VideoImportDoc::set_originalalbumtitle(::std::string&& value) {
  set_has_originalalbumtitle();
  originalalbumtitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle)
}
#endif
void VideoImportDoc::set_originalalbumtitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_originalalbumtitle();
  originalalbumtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle)
}
void VideoImportDoc::set_originalalbumtitle(const char* value, size_t size) {
  set_has_originalalbumtitle();
  originalalbumtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle)
}
::std::string* VideoImportDoc::mutable_originalalbumtitle() {
  set_has_originalalbumtitle();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle)
  return originalalbumtitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_originalalbumtitle() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle)
  clear_has_originalalbumtitle();
  return originalalbumtitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_originalalbumtitle(::std::string* originalalbumtitle) {
  if (originalalbumtitle != NULL) {
    set_has_originalalbumtitle();
  } else {
    clear_has_originalalbumtitle();
  }
  originalalbumtitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), originalalbumtitle);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle)
}

// optional int32 statVotes = 30;
bool VideoImportDoc::has_statvotes() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void VideoImportDoc::set_has_statvotes() {
  _has_bits_[1] |= 0x00000080u;
}
void VideoImportDoc::clear_has_statvotes() {
  _has_bits_[1] &= ~0x00000080u;
}
void VideoImportDoc::clear_statvotes() {
  statvotes_ = 0;
  clear_has_statvotes();
}
::google::protobuf::int32 VideoImportDoc::statvotes() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.statVotes)
  return statvotes_;
}
void VideoImportDoc::set_statvotes(::google::protobuf::int32 value) {
  set_has_statvotes();
  statvotes_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.statVotes)
}

// optional int32 statLikes = 55;
bool VideoImportDoc::has_statlikes() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
void VideoImportDoc::set_has_statlikes() {
  _has_bits_[1] |= 0x40000000u;
}
void VideoImportDoc::clear_has_statlikes() {
  _has_bits_[1] &= ~0x40000000u;
}
void VideoImportDoc::clear_statlikes() {
  statlikes_ = 0;
  clear_has_statlikes();
}
::google::protobuf::int32 VideoImportDoc::statlikes() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.statLikes)
  return statlikes_;
}
void VideoImportDoc::set_statlikes(::google::protobuf::int32 value) {
  set_has_statlikes();
  statlikes_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.statLikes)
}

// optional int32 statDislikes = 56;
bool VideoImportDoc::has_statdislikes() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
void VideoImportDoc::set_has_statdislikes() {
  _has_bits_[1] |= 0x80000000u;
}
void VideoImportDoc::clear_has_statdislikes() {
  _has_bits_[1] &= ~0x80000000u;
}
void VideoImportDoc::clear_statdislikes() {
  statdislikes_ = 0;
  clear_has_statdislikes();
}
::google::protobuf::int32 VideoImportDoc::statdislikes() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.statDislikes)
  return statdislikes_;
}
void VideoImportDoc::set_statdislikes(::google::protobuf::int32 value) {
  set_has_statdislikes();
  statdislikes_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.statDislikes)
}

// optional int32 statCommentsCount = 31;
bool VideoImportDoc::has_statcommentscount() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void VideoImportDoc::set_has_statcommentscount() {
  _has_bits_[1] |= 0x00001000u;
}
void VideoImportDoc::clear_has_statcommentscount() {
  _has_bits_[1] &= ~0x00001000u;
}
void VideoImportDoc::clear_statcommentscount() {
  statcommentscount_ = 0;
  clear_has_statcommentscount();
}
::google::protobuf::int32 VideoImportDoc::statcommentscount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.statCommentsCount)
  return statcommentscount_;
}
void VideoImportDoc::set_statcommentscount(::google::protobuf::int32 value) {
  set_has_statcommentscount();
  statcommentscount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.statCommentsCount)
}

// optional int32 statViews = 32;
bool VideoImportDoc::has_statviews() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void VideoImportDoc::set_has_statviews() {
  _has_bits_[1] |= 0x00004000u;
}
void VideoImportDoc::clear_has_statviews() {
  _has_bits_[1] &= ~0x00004000u;
}
void VideoImportDoc::clear_statviews() {
  statviews_ = 0;
  clear_has_statviews();
}
::google::protobuf::int32 VideoImportDoc::statviews() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.statViews)
  return statviews_;
}
void VideoImportDoc::set_statviews(::google::protobuf::int32 value) {
  set_has_statviews();
  statviews_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.statViews)
}

// optional int64 statRating = 33;
bool VideoImportDoc::has_statrating() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void VideoImportDoc::set_has_statrating() {
  _has_bits_[1] |= 0x00002000u;
}
void VideoImportDoc::clear_has_statrating() {
  _has_bits_[1] &= ~0x00002000u;
}
void VideoImportDoc::clear_statrating() {
  statrating_ = GOOGLE_LONGLONG(0);
  clear_has_statrating();
}
::google::protobuf::int64 VideoImportDoc::statrating() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.statRating)
  return statrating_;
}
void VideoImportDoc::set_statrating(::google::protobuf::int64 value) {
  set_has_statrating();
  statrating_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.statRating)
}

// optional string referenceId = 34;
bool VideoImportDoc::has_referenceid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VideoImportDoc::set_has_referenceid() {
  _has_bits_[0] |= 0x00000800u;
}
void VideoImportDoc::clear_has_referenceid() {
  _has_bits_[0] &= ~0x00000800u;
}
void VideoImportDoc::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_referenceid();
}
const ::std::string& VideoImportDoc::referenceid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.referenceId)
  return referenceid_.GetNoArena();
}
void VideoImportDoc::set_referenceid(const ::std::string& value) {
  set_has_referenceid();
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.referenceId)
}
#if LANG_CXX11
void VideoImportDoc::set_referenceid(::std::string&& value) {
  set_has_referenceid();
  referenceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.referenceId)
}
#endif
void VideoImportDoc::set_referenceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_referenceid();
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.referenceId)
}
void VideoImportDoc::set_referenceid(const char* value, size_t size) {
  set_has_referenceid();
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.referenceId)
}
::std::string* VideoImportDoc::mutable_referenceid() {
  set_has_referenceid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_referenceid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.referenceId)
  clear_has_referenceid();
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    set_has_referenceid();
  } else {
    clear_has_referenceid();
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.referenceId)
}

// optional int32 originalThumbWidth = 35;
bool VideoImportDoc::has_originalthumbwidth() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void VideoImportDoc::set_has_originalthumbwidth() {
  _has_bits_[1] |= 0x00008000u;
}
void VideoImportDoc::clear_has_originalthumbwidth() {
  _has_bits_[1] &= ~0x00008000u;
}
void VideoImportDoc::clear_originalthumbwidth() {
  originalthumbwidth_ = 0;
  clear_has_originalthumbwidth();
}
::google::protobuf::int32 VideoImportDoc::originalthumbwidth() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.originalThumbWidth)
  return originalthumbwidth_;
}
void VideoImportDoc::set_originalthumbwidth(::google::protobuf::int32 value) {
  set_has_originalthumbwidth();
  originalthumbwidth_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.originalThumbWidth)
}

// optional int32 originalThumbHeight = 36;
bool VideoImportDoc::has_originalthumbheight() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void VideoImportDoc::set_has_originalthumbheight() {
  _has_bits_[1] |= 0x00020000u;
}
void VideoImportDoc::clear_has_originalthumbheight() {
  _has_bits_[1] &= ~0x00020000u;
}
void VideoImportDoc::clear_originalthumbheight() {
  originalthumbheight_ = 0;
  clear_has_originalthumbheight();
}
::google::protobuf::int32 VideoImportDoc::originalthumbheight() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.originalThumbHeight)
  return originalthumbheight_;
}
void VideoImportDoc::set_originalthumbheight(::google::protobuf::int32 value) {
  set_has_originalthumbheight();
  originalthumbheight_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.originalThumbHeight)
}

// optional int64 importTime = 37;
bool VideoImportDoc::has_importtime() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void VideoImportDoc::set_has_importtime() {
  _has_bits_[1] |= 0x00010000u;
}
void VideoImportDoc::clear_has_importtime() {
  _has_bits_[1] &= ~0x00010000u;
}
void VideoImportDoc::clear_importtime() {
  importtime_ = GOOGLE_LONGLONG(0);
  clear_has_importtime();
}
::google::protobuf::int64 VideoImportDoc::importtime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.importTime)
  return importtime_;
}
void VideoImportDoc::set_importtime(::google::protobuf::int64 value) {
  set_has_importtime();
  importtime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.importTime)
}

// optional int32 sourceId = 38;
bool VideoImportDoc::has_sourceid() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void VideoImportDoc::set_has_sourceid() {
  _has_bits_[1] |= 0x00040000u;
}
void VideoImportDoc::clear_has_sourceid() {
  _has_bits_[1] &= ~0x00040000u;
}
void VideoImportDoc::clear_sourceid() {
  sourceid_ = 0;
  clear_has_sourceid();
}
::google::protobuf::int32 VideoImportDoc::sourceid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.sourceId)
  return sourceid_;
}
void VideoImportDoc::set_sourceid(::google::protobuf::int32 value) {
  set_has_sourceid();
  sourceid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.sourceId)
}

// optional bool hasPlayer = 39;
bool VideoImportDoc::has_hasplayer() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void VideoImportDoc::set_has_hasplayer() {
  _has_bits_[1] |= 0x00000400u;
}
void VideoImportDoc::clear_has_hasplayer() {
  _has_bits_[1] &= ~0x00000400u;
}
void VideoImportDoc::clear_hasplayer() {
  hasplayer_ = false;
  clear_has_hasplayer();
}
bool VideoImportDoc::hasplayer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.hasPlayer)
  return hasplayer_;
}
void VideoImportDoc::set_hasplayer(bool value) {
  set_has_hasplayer();
  hasplayer_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.hasPlayer)
}

// optional int32 episode = 40;
bool VideoImportDoc::has_episode() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void VideoImportDoc::set_has_episode() {
  _has_bits_[1] |= 0x00080000u;
}
void VideoImportDoc::clear_has_episode() {
  _has_bits_[1] &= ~0x00080000u;
}
void VideoImportDoc::clear_episode() {
  episode_ = 0;
  clear_has_episode();
}
::google::protobuf::int32 VideoImportDoc::episode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.episode)
  return episode_;
}
void VideoImportDoc::set_episode(::google::protobuf::int32 value) {
  set_has_episode();
  episode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.episode)
}

// optional string player = 41;
bool VideoImportDoc::has_player() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VideoImportDoc::set_has_player() {
  _has_bits_[0] |= 0x00001000u;
}
void VideoImportDoc::clear_has_player() {
  _has_bits_[0] &= ~0x00001000u;
}
void VideoImportDoc::clear_player() {
  player_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player();
}
const ::std::string& VideoImportDoc::player() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.player)
  return player_.GetNoArena();
}
void VideoImportDoc::set_player(const ::std::string& value) {
  set_has_player();
  player_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.player)
}
#if LANG_CXX11
void VideoImportDoc::set_player(::std::string&& value) {
  set_has_player();
  player_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.player)
}
#endif
void VideoImportDoc::set_player(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player();
  player_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.player)
}
void VideoImportDoc::set_player(const char* value, size_t size) {
  set_has_player();
  player_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.player)
}
::std::string* VideoImportDoc::mutable_player() {
  set_has_player();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.player)
  return player_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_player() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.player)
  clear_has_player();
  return player_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_player(::std::string* player) {
  if (player != NULL) {
    set_has_player();
  } else {
    clear_has_player();
  }
  player_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.player)
}

// optional string videoType = 42;
bool VideoImportDoc::has_videotype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VideoImportDoc::set_has_videotype() {
  _has_bits_[0] |= 0x00002000u;
}
void VideoImportDoc::clear_has_videotype() {
  _has_bits_[0] &= ~0x00002000u;
}
void VideoImportDoc::clear_videotype() {
  videotype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_videotype();
}
const ::std::string& VideoImportDoc::videotype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.videoType)
  return videotype_.GetNoArena();
}
void VideoImportDoc::set_videotype(const ::std::string& value) {
  set_has_videotype();
  videotype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.videoType)
}
#if LANG_CXX11
void VideoImportDoc::set_videotype(::std::string&& value) {
  set_has_videotype();
  videotype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.videoType)
}
#endif
void VideoImportDoc::set_videotype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_videotype();
  videotype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.videoType)
}
void VideoImportDoc::set_videotype(const char* value, size_t size) {
  set_has_videotype();
  videotype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.videoType)
}
::std::string* VideoImportDoc::mutable_videotype() {
  set_has_videotype();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.videoType)
  return videotype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_videotype() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.videoType)
  clear_has_videotype();
  return videotype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_videotype(::std::string* videotype) {
  if (videotype != NULL) {
    set_has_videotype();
  } else {
    clear_has_videotype();
  }
  videotype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videotype);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.videoType)
}

// optional int32 width = 43;
bool VideoImportDoc::has_width() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void VideoImportDoc::set_has_width() {
  _has_bits_[1] |= 0x00100000u;
}
void VideoImportDoc::clear_has_width() {
  _has_bits_[1] &= ~0x00100000u;
}
void VideoImportDoc::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 VideoImportDoc::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.width)
  return width_;
}
void VideoImportDoc::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.width)
}

// optional int32 height = 44;
bool VideoImportDoc::has_height() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void VideoImportDoc::set_has_height() {
  _has_bits_[1] |= 0x00200000u;
}
void VideoImportDoc::clear_has_height() {
  _has_bits_[1] &= ~0x00200000u;
}
void VideoImportDoc::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 VideoImportDoc::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.height)
  return height_;
}
void VideoImportDoc::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.height)
}

// optional int32 season = 45;
bool VideoImportDoc::has_season() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void VideoImportDoc::set_has_season() {
  _has_bits_[1] |= 0x00400000u;
}
void VideoImportDoc::clear_has_season() {
  _has_bits_[1] &= ~0x00400000u;
}
void VideoImportDoc::clear_season() {
  season_ = 0;
  clear_has_season();
}
::google::protobuf::int32 VideoImportDoc::season() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.season)
  return season_;
}
void VideoImportDoc::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.season)
}

// optional int32 seriesId = 46;
bool VideoImportDoc::has_seriesid() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void VideoImportDoc::set_has_seriesid() {
  _has_bits_[1] |= 0x01000000u;
}
void VideoImportDoc::clear_has_seriesid() {
  _has_bits_[1] &= ~0x01000000u;
}
void VideoImportDoc::clear_seriesid() {
  seriesid_ = 0;
  clear_has_seriesid();
}
::google::protobuf::int32 VideoImportDoc::seriesid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.seriesId)
  return seriesid_;
}
void VideoImportDoc::set_seriesid(::google::protobuf::int32 value) {
  set_has_seriesid();
  seriesid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.seriesId)
}

// optional bool finishedSerial = 47;
bool VideoImportDoc::has_finishedserial() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void VideoImportDoc::set_has_finishedserial() {
  _has_bits_[1] |= 0x00000800u;
}
void VideoImportDoc::clear_has_finishedserial() {
  _has_bits_[1] &= ~0x00000800u;
}
void VideoImportDoc::clear_finishedserial() {
  finishedserial_ = false;
  clear_has_finishedserial();
}
bool VideoImportDoc::finishedserial() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.finishedSerial)
  return finishedserial_;
}
void VideoImportDoc::set_finishedserial(bool value) {
  set_has_finishedserial();
  finishedserial_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.finishedSerial)
}

// optional int64 byte_size = 48;
bool VideoImportDoc::has_byte_size() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void VideoImportDoc::set_has_byte_size() {
  _has_bits_[1] |= 0x00800000u;
}
void VideoImportDoc::clear_has_byte_size() {
  _has_bits_[1] &= ~0x00800000u;
}
void VideoImportDoc::clear_byte_size() {
  byte_size_ = GOOGLE_LONGLONG(0);
  clear_has_byte_size();
}
::google::protobuf::int64 VideoImportDoc::byte_size() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.byte_size)
  return byte_size_;
}
void VideoImportDoc::set_byte_size(::google::protobuf::int64 value) {
  set_has_byte_size();
  byte_size_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.byte_size)
}

// optional string metadataSourceUrl = 49;
bool VideoImportDoc::has_metadatasourceurl() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VideoImportDoc::set_has_metadatasourceurl() {
  _has_bits_[0] |= 0x00004000u;
}
void VideoImportDoc::clear_has_metadatasourceurl() {
  _has_bits_[0] &= ~0x00004000u;
}
void VideoImportDoc::clear_metadatasourceurl() {
  metadatasourceurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadatasourceurl();
}
const ::std::string& VideoImportDoc::metadatasourceurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl)
  return metadatasourceurl_.GetNoArena();
}
void VideoImportDoc::set_metadatasourceurl(const ::std::string& value) {
  set_has_metadatasourceurl();
  metadatasourceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl)
}
#if LANG_CXX11
void VideoImportDoc::set_metadatasourceurl(::std::string&& value) {
  set_has_metadatasourceurl();
  metadatasourceurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl)
}
#endif
void VideoImportDoc::set_metadatasourceurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metadatasourceurl();
  metadatasourceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl)
}
void VideoImportDoc::set_metadatasourceurl(const char* value, size_t size) {
  set_has_metadatasourceurl();
  metadatasourceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl)
}
::std::string* VideoImportDoc::mutable_metadatasourceurl() {
  set_has_metadatasourceurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl)
  return metadatasourceurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_metadatasourceurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl)
  clear_has_metadatasourceurl();
  return metadatasourceurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_metadatasourceurl(::std::string* metadatasourceurl) {
  if (metadatasourceurl != NULL) {
    set_has_metadatasourceurl();
  } else {
    clear_has_metadatasourceurl();
  }
  metadatasourceurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadatasourceurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl)
}

// optional bool full_movie = 51;
bool VideoImportDoc::has_full_movie() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void VideoImportDoc::set_has_full_movie() {
  _has_bits_[1] |= 0x02000000u;
}
void VideoImportDoc::clear_has_full_movie() {
  _has_bits_[1] &= ~0x02000000u;
}
void VideoImportDoc::clear_full_movie() {
  full_movie_ = false;
  clear_has_full_movie();
}
bool VideoImportDoc::full_movie() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.full_movie)
  return full_movie_;
}
void VideoImportDoc::set_full_movie(bool value) {
  set_has_full_movie();
  full_movie_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.full_movie)
}

// optional bool full_hd = 52;
bool VideoImportDoc::has_full_hd() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void VideoImportDoc::set_has_full_hd() {
  _has_bits_[1] |= 0x04000000u;
}
void VideoImportDoc::clear_has_full_hd() {
  _has_bits_[1] &= ~0x04000000u;
}
void VideoImportDoc::clear_full_hd() {
  full_hd_ = false;
  clear_has_full_hd();
}
bool VideoImportDoc::full_hd() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.full_hd)
  return full_hd_;
}
void VideoImportDoc::set_full_hd(bool value) {
  set_has_full_hd();
  full_hd_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.full_hd)
}

// optional bool allowInFastbase = 53;
bool VideoImportDoc::has_allowinfastbase() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
void VideoImportDoc::set_has_allowinfastbase() {
  _has_bits_[1] |= 0x08000000u;
}
void VideoImportDoc::clear_has_allowinfastbase() {
  _has_bits_[1] &= ~0x08000000u;
}
void VideoImportDoc::clear_allowinfastbase() {
  allowinfastbase_ = false;
  clear_has_allowinfastbase();
}
bool VideoImportDoc::allowinfastbase() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.allowInFastbase)
  return allowinfastbase_;
}
void VideoImportDoc::set_allowinfastbase(bool value) {
  set_has_allowinfastbase();
  allowinfastbase_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.allowInFastbase)
}

// optional int64 contentId = 54;
bool VideoImportDoc::has_contentid() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
void VideoImportDoc::set_has_contentid() {
  _has_bits_[1] |= 0x20000000u;
}
void VideoImportDoc::clear_has_contentid() {
  _has_bits_[1] &= ~0x20000000u;
}
void VideoImportDoc::clear_contentid() {
  contentid_ = GOOGLE_LONGLONG(0);
  clear_has_contentid();
}
::google::protobuf::int64 VideoImportDoc::contentid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.contentId)
  return contentid_;
}
void VideoImportDoc::set_contentid(::google::protobuf::int64 value) {
  set_has_contentid();
  contentid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.contentId)
}

// optional .ru.mail.go.webbase.blobs.VideoLiveStreamType liveStream = 57;
bool VideoImportDoc::has_livestream() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
void VideoImportDoc::set_has_livestream() {
  _has_bits_[2] |= 0x00000001u;
}
void VideoImportDoc::clear_has_livestream() {
  _has_bits_[2] &= ~0x00000001u;
}
void VideoImportDoc::clear_livestream() {
  livestream_ = 0;
  clear_has_livestream();
}
::ru::mail::go::webbase::blobs::VideoLiveStreamType VideoImportDoc::livestream() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.liveStream)
  return static_cast< ::ru::mail::go::webbase::blobs::VideoLiveStreamType >(livestream_);
}
void VideoImportDoc::set_livestream(::ru::mail::go::webbase::blobs::VideoLiveStreamType value) {
  assert(::ru::mail::go::webbase::blobs::VideoLiveStreamType_IsValid(value));
  set_has_livestream();
  livestream_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.liveStream)
}

// optional .ru.mail.go.webbase.blobs.ExclusiveProviders exclusiveProvider = 58;
bool VideoImportDoc::has_exclusiveprovider() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
void VideoImportDoc::set_has_exclusiveprovider() {
  _has_bits_[2] |= 0x00000002u;
}
void VideoImportDoc::clear_has_exclusiveprovider() {
  _has_bits_[2] &= ~0x00000002u;
}
void VideoImportDoc::clear_exclusiveprovider() {
  exclusiveprovider_ = 0;
  clear_has_exclusiveprovider();
}
::ru::mail::go::webbase::blobs::ExclusiveProviders VideoImportDoc::exclusiveprovider() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.exclusiveProvider)
  return static_cast< ::ru::mail::go::webbase::blobs::ExclusiveProviders >(exclusiveprovider_);
}
void VideoImportDoc::set_exclusiveprovider(::ru::mail::go::webbase::blobs::ExclusiveProviders value) {
  assert(::ru::mail::go::webbase::blobs::ExclusiveProviders_IsValid(value));
  set_has_exclusiveprovider();
  exclusiveprovider_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.exclusiveProvider)
}

// optional .ru.mail.go.webbase.blobs.ProtobufSourceType protobufSourceTypeFlag = 59;
bool VideoImportDoc::has_protobufsourcetypeflag() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
void VideoImportDoc::set_has_protobufsourcetypeflag() {
  _has_bits_[2] |= 0x00000004u;
}
void VideoImportDoc::clear_has_protobufsourcetypeflag() {
  _has_bits_[2] &= ~0x00000004u;
}
void VideoImportDoc::clear_protobufsourcetypeflag() {
  protobufsourcetypeflag_ = 0;
  clear_has_protobufsourcetypeflag();
}
::ru::mail::go::webbase::blobs::ProtobufSourceType VideoImportDoc::protobufsourcetypeflag() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.protobufSourceTypeFlag)
  return static_cast< ::ru::mail::go::webbase::blobs::ProtobufSourceType >(protobufsourcetypeflag_);
}
void VideoImportDoc::set_protobufsourcetypeflag(::ru::mail::go::webbase::blobs::ProtobufSourceType value) {
  assert(::ru::mail::go::webbase::blobs::ProtobufSourceType_IsValid(value));
  set_has_protobufsourcetypeflag();
  protobufsourcetypeflag_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.protobufSourceTypeFlag)
}

// optional bool allow_embed = 60;
bool VideoImportDoc::has_allow_embed() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
void VideoImportDoc::set_has_allow_embed() {
  _has_bits_[1] |= 0x10000000u;
}
void VideoImportDoc::clear_has_allow_embed() {
  _has_bits_[1] &= ~0x10000000u;
}
void VideoImportDoc::clear_allow_embed() {
  allow_embed_ = false;
  clear_has_allow_embed();
}
bool VideoImportDoc::allow_embed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.allow_embed)
  return allow_embed_;
}
void VideoImportDoc::set_allow_embed(bool value) {
  set_has_allow_embed();
  allow_embed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.allow_embed)
}

// optional string youtubeHash = 61;
bool VideoImportDoc::has_youtubehash() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VideoImportDoc::set_has_youtubehash() {
  _has_bits_[0] |= 0x00008000u;
}
void VideoImportDoc::clear_has_youtubehash() {
  _has_bits_[0] &= ~0x00008000u;
}
void VideoImportDoc::clear_youtubehash() {
  youtubehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youtubehash();
}
const ::std::string& VideoImportDoc::youtubehash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash)
  return youtubehash_.GetNoArena();
}
void VideoImportDoc::set_youtubehash(const ::std::string& value) {
  set_has_youtubehash();
  youtubehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash)
}
#if LANG_CXX11
void VideoImportDoc::set_youtubehash(::std::string&& value) {
  set_has_youtubehash();
  youtubehash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash)
}
#endif
void VideoImportDoc::set_youtubehash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_youtubehash();
  youtubehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash)
}
void VideoImportDoc::set_youtubehash(const char* value, size_t size) {
  set_has_youtubehash();
  youtubehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash)
}
::std::string* VideoImportDoc::mutable_youtubehash() {
  set_has_youtubehash();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash)
  return youtubehash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_youtubehash() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash)
  clear_has_youtubehash();
  return youtubehash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_youtubehash(::std::string* youtubehash) {
  if (youtubehash != NULL) {
    set_has_youtubehash();
  } else {
    clear_has_youtubehash();
  }
  youtubehash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), youtubehash);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash)
}

// optional string channelId = 62;
bool VideoImportDoc::has_channelid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void VideoImportDoc::set_has_channelid() {
  _has_bits_[0] |= 0x00010000u;
}
void VideoImportDoc::clear_has_channelid() {
  _has_bits_[0] &= ~0x00010000u;
}
void VideoImportDoc::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
const ::std::string& VideoImportDoc::channelid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.channelId)
  return channelid_.GetNoArena();
}
void VideoImportDoc::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.channelId)
}
#if LANG_CXX11
void VideoImportDoc::set_channelid(::std::string&& value) {
  set_has_channelid();
  channelid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.channelId)
}
#endif
void VideoImportDoc::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channelid();
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.channelId)
}
void VideoImportDoc::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.channelId)
}
::std::string* VideoImportDoc::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.channelId)
  return channelid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_channelid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.channelId)
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.channelId)
}

// optional int64 userId64 = 63;
bool VideoImportDoc::has_userid64() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
void VideoImportDoc::set_has_userid64() {
  _has_bits_[2] |= 0x00000010u;
}
void VideoImportDoc::clear_has_userid64() {
  _has_bits_[2] &= ~0x00000010u;
}
void VideoImportDoc::clear_userid64() {
  userid64_ = GOOGLE_LONGLONG(0);
  clear_has_userid64();
}
::google::protobuf::int64 VideoImportDoc::userid64() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.userId64)
  return userid64_;
}
void VideoImportDoc::set_userid64(::google::protobuf::int64 value) {
  set_has_userid64();
  userid64_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.userId64)
}

// optional .ru.mail.go.webbase.blobs.LiveVideoState liveVideoState = 64;
bool VideoImportDoc::has_livevideostate() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
void VideoImportDoc::set_has_livevideostate() {
  _has_bits_[2] |= 0x00000008u;
}
void VideoImportDoc::clear_has_livevideostate() {
  _has_bits_[2] &= ~0x00000008u;
}
void VideoImportDoc::clear_livevideostate() {
  livevideostate_ = 0;
  clear_has_livevideostate();
}
::ru::mail::go::webbase::blobs::LiveVideoState VideoImportDoc::livevideostate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.liveVideoState)
  return static_cast< ::ru::mail::go::webbase::blobs::LiveVideoState >(livevideostate_);
}
void VideoImportDoc::set_livevideostate(::ru::mail::go::webbase::blobs::LiveVideoState value) {
  assert(::ru::mail::go::webbase::blobs::LiveVideoState_IsValid(value));
  set_has_livevideostate();
  livevideostate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.liveVideoState)
}

// optional string extPlatform = 65;
bool VideoImportDoc::has_extplatform() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void VideoImportDoc::set_has_extplatform() {
  _has_bits_[0] |= 0x00020000u;
}
void VideoImportDoc::clear_has_extplatform() {
  _has_bits_[0] &= ~0x00020000u;
}
void VideoImportDoc::clear_extplatform() {
  extplatform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extplatform();
}
const ::std::string& VideoImportDoc::extplatform() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform)
  return extplatform_.GetNoArena();
}
void VideoImportDoc::set_extplatform(const ::std::string& value) {
  set_has_extplatform();
  extplatform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform)
}
#if LANG_CXX11
void VideoImportDoc::set_extplatform(::std::string&& value) {
  set_has_extplatform();
  extplatform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform)
}
#endif
void VideoImportDoc::set_extplatform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extplatform();
  extplatform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform)
}
void VideoImportDoc::set_extplatform(const char* value, size_t size) {
  set_has_extplatform();
  extplatform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform)
}
::std::string* VideoImportDoc::mutable_extplatform() {
  set_has_extplatform();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform)
  return extplatform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_extplatform() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform)
  clear_has_extplatform();
  return extplatform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_extplatform(::std::string* extplatform) {
  if (extplatform != NULL) {
    set_has_extplatform();
  } else {
    clear_has_extplatform();
  }
  extplatform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extplatform);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform)
}

// repeated .ru.mail.go.webbase.blobs.VideoQualityValue videoQualityOptions = 66;
int VideoImportDoc::videoqualityoptions_size() const {
  return videoqualityoptions_.size();
}
void VideoImportDoc::clear_videoqualityoptions() {
  videoqualityoptions_.Clear();
}
::ru::mail::go::webbase::blobs::VideoQualityValue VideoImportDoc::videoqualityoptions(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptions)
  return static_cast< ::ru::mail::go::webbase::blobs::VideoQualityValue >(videoqualityoptions_.Get(index));
}
void VideoImportDoc::set_videoqualityoptions(int index, ::ru::mail::go::webbase::blobs::VideoQualityValue value) {
  assert(::ru::mail::go::webbase::blobs::VideoQualityValue_IsValid(value));
  videoqualityoptions_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptions)
}
void VideoImportDoc::add_videoqualityoptions(::ru::mail::go::webbase::blobs::VideoQualityValue value) {
  assert(::ru::mail::go::webbase::blobs::VideoQualityValue_IsValid(value));
  videoqualityoptions_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptions)
}
const ::google::protobuf::RepeatedField<int>&
VideoImportDoc::videoqualityoptions() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptions)
  return videoqualityoptions_;
}
::google::protobuf::RepeatedField<int>*
VideoImportDoc::mutable_videoqualityoptions() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptions)
  return &videoqualityoptions_;
}

// optional int32 reposts_count = 67;
bool VideoImportDoc::has_reposts_count() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
void VideoImportDoc::set_has_reposts_count() {
  _has_bits_[2] |= 0x00000020u;
}
void VideoImportDoc::clear_has_reposts_count() {
  _has_bits_[2] &= ~0x00000020u;
}
void VideoImportDoc::clear_reposts_count() {
  reposts_count_ = 0;
  clear_has_reposts_count();
}
::google::protobuf::int32 VideoImportDoc::reposts_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.reposts_count)
  return reposts_count_;
}
void VideoImportDoc::set_reposts_count(::google::protobuf::int32 value) {
  set_has_reposts_count();
  reposts_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.reposts_count)
}

// optional bool group_is_closed = 68;
bool VideoImportDoc::has_group_is_closed() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
void VideoImportDoc::set_has_group_is_closed() {
  _has_bits_[2] |= 0x00000080u;
}
void VideoImportDoc::clear_has_group_is_closed() {
  _has_bits_[2] &= ~0x00000080u;
}
void VideoImportDoc::clear_group_is_closed() {
  group_is_closed_ = false;
  clear_has_group_is_closed();
}
bool VideoImportDoc::group_is_closed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.group_is_closed)
  return group_is_closed_;
}
void VideoImportDoc::set_group_is_closed(bool value) {
  set_has_group_is_closed();
  group_is_closed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.group_is_closed)
}

// optional bool group_is_verified = 69;
bool VideoImportDoc::has_group_is_verified() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
void VideoImportDoc::set_has_group_is_verified() {
  _has_bits_[2] |= 0x00000100u;
}
void VideoImportDoc::clear_has_group_is_verified() {
  _has_bits_[2] &= ~0x00000100u;
}
void VideoImportDoc::clear_group_is_verified() {
  group_is_verified_ = false;
  clear_has_group_is_verified();
}
bool VideoImportDoc::group_is_verified() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.group_is_verified)
  return group_is_verified_;
}
void VideoImportDoc::set_group_is_verified(bool value) {
  set_has_group_is_verified();
  group_is_verified_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.group_is_verified)
}

// optional int32 group_members_count = 70;
bool VideoImportDoc::has_group_members_count() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
void VideoImportDoc::set_has_group_members_count() {
  _has_bits_[2] |= 0x00000040u;
}
void VideoImportDoc::clear_has_group_members_count() {
  _has_bits_[2] &= ~0x00000040u;
}
void VideoImportDoc::clear_group_members_count() {
  group_members_count_ = 0;
  clear_has_group_members_count();
}
::google::protobuf::int32 VideoImportDoc::group_members_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.group_members_count)
  return group_members_count_;
}
void VideoImportDoc::set_group_members_count(::google::protobuf::int32 value) {
  set_has_group_members_count();
  group_members_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.group_members_count)
}

// optional bool group_trending = 71;
bool VideoImportDoc::has_group_trending() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
void VideoImportDoc::set_has_group_trending() {
  _has_bits_[2] |= 0x00000200u;
}
void VideoImportDoc::clear_has_group_trending() {
  _has_bits_[2] &= ~0x00000200u;
}
void VideoImportDoc::clear_group_trending() {
  group_trending_ = false;
  clear_has_group_trending();
}
bool VideoImportDoc::group_trending() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.group_trending)
  return group_trending_;
}
void VideoImportDoc::set_group_trending(bool value) {
  set_has_group_trending();
  group_trending_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.group_trending)
}

// optional .ru.mail.go.webbase.blobs.DzenCertainGrade dzen_certain_grade = 72;
bool VideoImportDoc::has_dzen_certain_grade() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
void VideoImportDoc::set_has_dzen_certain_grade() {
  _has_bits_[2] |= 0x08000000u;
}
void VideoImportDoc::clear_has_dzen_certain_grade() {
  _has_bits_[2] &= ~0x08000000u;
}
void VideoImportDoc::clear_dzen_certain_grade() {
  dzen_certain_grade_ = 1;
  clear_has_dzen_certain_grade();
}
::ru::mail::go::webbase::blobs::DzenCertainGrade VideoImportDoc::dzen_certain_grade() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.dzen_certain_grade)
  return static_cast< ::ru::mail::go::webbase::blobs::DzenCertainGrade >(dzen_certain_grade_);
}
void VideoImportDoc::set_dzen_certain_grade(::ru::mail::go::webbase::blobs::DzenCertainGrade value) {
  assert(::ru::mail::go::webbase::blobs::DzenCertainGrade_IsValid(value));
  set_has_dzen_certain_grade();
  dzen_certain_grade_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.dzen_certain_grade)
}

// optional .ru.mail.go.webbase.blobs.VideoOrientation video_orientation = 73;
bool VideoImportDoc::has_video_orientation() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
void VideoImportDoc::set_has_video_orientation() {
  _has_bits_[2] |= 0x10000000u;
}
void VideoImportDoc::clear_has_video_orientation() {
  _has_bits_[2] &= ~0x10000000u;
}
void VideoImportDoc::clear_video_orientation() {
  video_orientation_ = 1;
  clear_has_video_orientation();
}
::ru::mail::go::webbase::blobs::VideoOrientation VideoImportDoc::video_orientation() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.video_orientation)
  return static_cast< ::ru::mail::go::webbase::blobs::VideoOrientation >(video_orientation_);
}
void VideoImportDoc::set_video_orientation(::ru::mail::go::webbase::blobs::VideoOrientation value) {
  assert(::ru::mail::go::webbase::blobs::VideoOrientation_IsValid(value));
  set_has_video_orientation();
  video_orientation_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.video_orientation)
}

// optional bool dzen_exists_in_reco_snapshot = 74 [default = false];
bool VideoImportDoc::has_dzen_exists_in_reco_snapshot() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
void VideoImportDoc::set_has_dzen_exists_in_reco_snapshot() {
  _has_bits_[2] |= 0x00000400u;
}
void VideoImportDoc::clear_has_dzen_exists_in_reco_snapshot() {
  _has_bits_[2] &= ~0x00000400u;
}
void VideoImportDoc::clear_dzen_exists_in_reco_snapshot() {
  dzen_exists_in_reco_snapshot_ = false;
  clear_has_dzen_exists_in_reco_snapshot();
}
bool VideoImportDoc::dzen_exists_in_reco_snapshot() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.dzen_exists_in_reco_snapshot)
  return dzen_exists_in_reco_snapshot_;
}
void VideoImportDoc::set_dzen_exists_in_reco_snapshot(bool value) {
  set_has_dzen_exists_in_reco_snapshot();
  dzen_exists_in_reco_snapshot_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.dzen_exists_in_reco_snapshot)
}

// optional bool subscribers_only = 75 [default = false];
bool VideoImportDoc::has_subscribers_only() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
void VideoImportDoc::set_has_subscribers_only() {
  _has_bits_[2] |= 0x00001000u;
}
void VideoImportDoc::clear_has_subscribers_only() {
  _has_bits_[2] &= ~0x00001000u;
}
void VideoImportDoc::clear_subscribers_only() {
  subscribers_only_ = false;
  clear_has_subscribers_only();
}
bool VideoImportDoc::subscribers_only() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.subscribers_only)
  return subscribers_only_;
}
void VideoImportDoc::set_subscribers_only(bool value) {
  set_has_subscribers_only();
  subscribers_only_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.subscribers_only)
}

// optional .ru.mail.go.webbase.blobs.VideoType dzen_video_type = 76;
bool VideoImportDoc::has_dzen_video_type() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
void VideoImportDoc::set_has_dzen_video_type() {
  _has_bits_[2] |= 0x04000000u;
}
void VideoImportDoc::clear_has_dzen_video_type() {
  _has_bits_[2] &= ~0x04000000u;
}
void VideoImportDoc::clear_dzen_video_type() {
  dzen_video_type_ = 1;
  clear_has_dzen_video_type();
}
::ru::mail::go::webbase::blobs::VideoType VideoImportDoc::dzen_video_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.dzen_video_type)
  return static_cast< ::ru::mail::go::webbase::blobs::VideoType >(dzen_video_type_);
}
void VideoImportDoc::set_dzen_video_type(::ru::mail::go::webbase::blobs::VideoType value) {
  assert(::ru::mail::go::webbase::blobs::VideoType_IsValid(value));
  set_has_dzen_video_type();
  dzen_video_type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.dzen_video_type)
}

// optional bool user_is_verified = 77 [default = false];
bool VideoImportDoc::has_user_is_verified() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
void VideoImportDoc::set_has_user_is_verified() {
  _has_bits_[2] |= 0x00002000u;
}
void VideoImportDoc::clear_has_user_is_verified() {
  _has_bits_[2] &= ~0x00002000u;
}
void VideoImportDoc::clear_user_is_verified() {
  user_is_verified_ = false;
  clear_has_user_is_verified();
}
bool VideoImportDoc::user_is_verified() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.user_is_verified)
  return user_is_verified_;
}
void VideoImportDoc::set_user_is_verified(bool value) {
  set_has_user_is_verified();
  user_is_verified_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.user_is_verified)
}

// optional int32 user_subscribers = 78;
bool VideoImportDoc::has_user_subscribers() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
void VideoImportDoc::set_has_user_subscribers() {
  _has_bits_[2] |= 0x00000800u;
}
void VideoImportDoc::clear_has_user_subscribers() {
  _has_bits_[2] &= ~0x00000800u;
}
void VideoImportDoc::clear_user_subscribers() {
  user_subscribers_ = 0;
  clear_has_user_subscribers();
}
::google::protobuf::int32 VideoImportDoc::user_subscribers() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.user_subscribers)
  return user_subscribers_;
}
void VideoImportDoc::set_user_subscribers(::google::protobuf::int32 value) {
  set_has_user_subscribers();
  user_subscribers_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.user_subscribers)
}

// optional int32 adult_reports_count = 79;
bool VideoImportDoc::has_adult_reports_count() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
void VideoImportDoc::set_has_adult_reports_count() {
  _has_bits_[2] |= 0x00010000u;
}
void VideoImportDoc::clear_has_adult_reports_count() {
  _has_bits_[2] &= ~0x00010000u;
}
void VideoImportDoc::clear_adult_reports_count() {
  adult_reports_count_ = 0;
  clear_has_adult_reports_count();
}
::google::protobuf::int32 VideoImportDoc::adult_reports_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.adult_reports_count)
  return adult_reports_count_;
}
void VideoImportDoc::set_adult_reports_count(::google::protobuf::int32 value) {
  set_has_adult_reports_count();
  adult_reports_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.adult_reports_count)
}

// optional bool is_probably_porn_by_vk_score = 80 [default = false];
bool VideoImportDoc::has_is_probably_porn_by_vk_score() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
void VideoImportDoc::set_has_is_probably_porn_by_vk_score() {
  _has_bits_[2] |= 0x00004000u;
}
void VideoImportDoc::clear_has_is_probably_porn_by_vk_score() {
  _has_bits_[2] &= ~0x00004000u;
}
void VideoImportDoc::clear_is_probably_porn_by_vk_score() {
  is_probably_porn_by_vk_score_ = false;
  clear_has_is_probably_porn_by_vk_score();
}
bool VideoImportDoc::is_probably_porn_by_vk_score() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_probably_porn_by_vk_score)
  return is_probably_porn_by_vk_score_;
}
void VideoImportDoc::set_is_probably_porn_by_vk_score(bool value) {
  set_has_is_probably_porn_by_vk_score();
  is_probably_porn_by_vk_score_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_probably_porn_by_vk_score)
}

// optional string user_domain = 81;
bool VideoImportDoc::has_user_domain() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void VideoImportDoc::set_has_user_domain() {
  _has_bits_[0] |= 0x00040000u;
}
void VideoImportDoc::clear_has_user_domain() {
  _has_bits_[0] &= ~0x00040000u;
}
void VideoImportDoc::clear_user_domain() {
  user_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_domain();
}
const ::std::string& VideoImportDoc::user_domain() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.user_domain)
  return user_domain_.GetNoArena();
}
void VideoImportDoc::set_user_domain(const ::std::string& value) {
  set_has_user_domain();
  user_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.user_domain)
}
#if LANG_CXX11
void VideoImportDoc::set_user_domain(::std::string&& value) {
  set_has_user_domain();
  user_domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.user_domain)
}
#endif
void VideoImportDoc::set_user_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_domain();
  user_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.user_domain)
}
void VideoImportDoc::set_user_domain(const char* value, size_t size) {
  set_has_user_domain();
  user_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.user_domain)
}
::std::string* VideoImportDoc::mutable_user_domain() {
  set_has_user_domain();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.user_domain)
  return user_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_user_domain() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.user_domain)
  clear_has_user_domain();
  return user_domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_user_domain(::std::string* user_domain) {
  if (user_domain != NULL) {
    set_has_user_domain();
  } else {
    clear_has_user_domain();
  }
  user_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_domain);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.user_domain)
}

// optional bool is_good_film = 82 [default = false];
bool VideoImportDoc::has_is_good_film() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
void VideoImportDoc::set_has_is_good_film() {
  _has_bits_[2] |= 0x00008000u;
}
void VideoImportDoc::clear_has_is_good_film() {
  _has_bits_[2] &= ~0x00008000u;
}
void VideoImportDoc::clear_is_good_film() {
  is_good_film_ = false;
  clear_has_is_good_film();
}
bool VideoImportDoc::is_good_film() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_good_film)
  return is_good_film_;
}
void VideoImportDoc::set_is_good_film(bool value) {
  set_has_is_good_film();
  is_good_film_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_good_film)
}

// optional bool is_good_cartoon = 83 [default = false];
bool VideoImportDoc::has_is_good_cartoon() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
void VideoImportDoc::set_has_is_good_cartoon() {
  _has_bits_[2] |= 0x00040000u;
}
void VideoImportDoc::clear_has_is_good_cartoon() {
  _has_bits_[2] &= ~0x00040000u;
}
void VideoImportDoc::clear_is_good_cartoon() {
  is_good_cartoon_ = false;
  clear_has_is_good_cartoon();
}
bool VideoImportDoc::is_good_cartoon() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_good_cartoon)
  return is_good_cartoon_;
}
void VideoImportDoc::set_is_good_cartoon(bool value) {
  set_has_is_good_cartoon();
  is_good_cartoon_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_good_cartoon)
}

// optional bool is_good_serial = 84 [default = false];
bool VideoImportDoc::has_is_good_serial() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
void VideoImportDoc::set_has_is_good_serial() {
  _has_bits_[2] |= 0x00080000u;
}
void VideoImportDoc::clear_has_is_good_serial() {
  _has_bits_[2] &= ~0x00080000u;
}
void VideoImportDoc::clear_is_good_serial() {
  is_good_serial_ = false;
  clear_has_is_good_serial();
}
bool VideoImportDoc::is_good_serial() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_good_serial)
  return is_good_serial_;
}
void VideoImportDoc::set_is_good_serial(bool value) {
  set_has_is_good_serial();
  is_good_serial_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_good_serial)
}

// optional bool is_update = 85;
bool VideoImportDoc::has_is_update() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
void VideoImportDoc::set_has_is_update() {
  _has_bits_[2] |= 0x00100000u;
}
void VideoImportDoc::clear_has_is_update() {
  _has_bits_[2] &= ~0x00100000u;
}
void VideoImportDoc::clear_is_update() {
  is_update_ = false;
  clear_has_is_update();
}
bool VideoImportDoc::is_update() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_update)
  return is_update_;
}
void VideoImportDoc::set_is_update(bool value) {
  set_has_is_update();
  is_update_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_update)
}

// optional bool is_licensed_content_vk = 86;
bool VideoImportDoc::has_is_licensed_content_vk() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
void VideoImportDoc::set_has_is_licensed_content_vk() {
  _has_bits_[2] |= 0x00200000u;
}
void VideoImportDoc::clear_has_is_licensed_content_vk() {
  _has_bits_[2] &= ~0x00200000u;
}
void VideoImportDoc::clear_is_licensed_content_vk() {
  is_licensed_content_vk_ = false;
  clear_has_is_licensed_content_vk();
}
bool VideoImportDoc::is_licensed_content_vk() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_licensed_content_vk)
  return is_licensed_content_vk_;
}
void VideoImportDoc::set_is_licensed_content_vk(bool value) {
  set_has_is_licensed_content_vk();
  is_licensed_content_vk_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_licensed_content_vk)
}

// optional string content_hash_string = 87;
bool VideoImportDoc::has_content_hash_string() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void VideoImportDoc::set_has_content_hash_string() {
  _has_bits_[0] |= 0x00080000u;
}
void VideoImportDoc::clear_has_content_hash_string() {
  _has_bits_[0] &= ~0x00080000u;
}
void VideoImportDoc::clear_content_hash_string() {
  content_hash_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content_hash_string();
}
const ::std::string& VideoImportDoc::content_hash_string() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string)
  return content_hash_string_.GetNoArena();
}
void VideoImportDoc::set_content_hash_string(const ::std::string& value) {
  set_has_content_hash_string();
  content_hash_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string)
}
#if LANG_CXX11
void VideoImportDoc::set_content_hash_string(::std::string&& value) {
  set_has_content_hash_string();
  content_hash_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string)
}
#endif
void VideoImportDoc::set_content_hash_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content_hash_string();
  content_hash_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string)
}
void VideoImportDoc::set_content_hash_string(const char* value, size_t size) {
  set_has_content_hash_string();
  content_hash_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string)
}
::std::string* VideoImportDoc::mutable_content_hash_string() {
  set_has_content_hash_string();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string)
  return content_hash_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_content_hash_string() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string)
  clear_has_content_hash_string();
  return content_hash_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_content_hash_string(::std::string* content_hash_string) {
  if (content_hash_string != NULL) {
    set_has_content_hash_string();
  } else {
    clear_has_content_hash_string();
  }
  content_hash_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_hash_string);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string)
}

// optional int64 similarity_cluster_id = 88;
bool VideoImportDoc::has_similarity_cluster_id() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
void VideoImportDoc::set_has_similarity_cluster_id() {
  _has_bits_[2] |= 0x00020000u;
}
void VideoImportDoc::clear_has_similarity_cluster_id() {
  _has_bits_[2] &= ~0x00020000u;
}
void VideoImportDoc::clear_similarity_cluster_id() {
  similarity_cluster_id_ = GOOGLE_LONGLONG(0);
  clear_has_similarity_cluster_id();
}
::google::protobuf::int64 VideoImportDoc::similarity_cluster_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.similarity_cluster_id)
  return similarity_cluster_id_;
}
void VideoImportDoc::set_similarity_cluster_id(::google::protobuf::int64 value) {
  set_has_similarity_cluster_id();
  similarity_cluster_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.similarity_cluster_id)
}

// optional string contentIdString = 89;
bool VideoImportDoc::has_contentidstring() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void VideoImportDoc::set_has_contentidstring() {
  _has_bits_[0] |= 0x00100000u;
}
void VideoImportDoc::clear_has_contentidstring() {
  _has_bits_[0] &= ~0x00100000u;
}
void VideoImportDoc::clear_contentidstring() {
  contentidstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contentidstring();
}
const ::std::string& VideoImportDoc::contentidstring() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString)
  return contentidstring_.GetNoArena();
}
void VideoImportDoc::set_contentidstring(const ::std::string& value) {
  set_has_contentidstring();
  contentidstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString)
}
#if LANG_CXX11
void VideoImportDoc::set_contentidstring(::std::string&& value) {
  set_has_contentidstring();
  contentidstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString)
}
#endif
void VideoImportDoc::set_contentidstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contentidstring();
  contentidstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString)
}
void VideoImportDoc::set_contentidstring(const char* value, size_t size) {
  set_has_contentidstring();
  contentidstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString)
}
::std::string* VideoImportDoc::mutable_contentidstring() {
  set_has_contentidstring();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString)
  return contentidstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_contentidstring() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString)
  clear_has_contentidstring();
  return contentidstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_contentidstring(::std::string* contentidstring) {
  if (contentidstring != NULL) {
    set_has_contentidstring();
  } else {
    clear_has_contentidstring();
  }
  contentidstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contentidstring);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString)
}

// optional int64 united_video_id = 90;
bool VideoImportDoc::has_united_video_id() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
void VideoImportDoc::set_has_united_video_id() {
  _has_bits_[2] |= 0x02000000u;
}
void VideoImportDoc::clear_has_united_video_id() {
  _has_bits_[2] &= ~0x02000000u;
}
void VideoImportDoc::clear_united_video_id() {
  united_video_id_ = GOOGLE_LONGLONG(0);
  clear_has_united_video_id();
}
::google::protobuf::int64 VideoImportDoc::united_video_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.united_video_id)
  return united_video_id_;
}
void VideoImportDoc::set_united_video_id(::google::protobuf::int64 value) {
  set_has_united_video_id();
  united_video_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.united_video_id)
}

// optional bool is_promo_author = 91 [default = false];
bool VideoImportDoc::has_is_promo_author() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
void VideoImportDoc::set_has_is_promo_author() {
  _has_bits_[2] |= 0x00400000u;
}
void VideoImportDoc::clear_has_is_promo_author() {
  _has_bits_[2] &= ~0x00400000u;
}
void VideoImportDoc::clear_is_promo_author() {
  is_promo_author_ = false;
  clear_has_is_promo_author();
}
bool VideoImportDoc::is_promo_author() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_promo_author)
  return is_promo_author_;
}
void VideoImportDoc::set_is_promo_author(bool value) {
  set_has_is_promo_author();
  is_promo_author_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_promo_author)
}

// repeated string videoQualityOptionsVK = 92;
int VideoImportDoc::videoqualityoptionsvk_size() const {
  return videoqualityoptionsvk_.size();
}
void VideoImportDoc::clear_videoqualityoptionsvk() {
  videoqualityoptionsvk_.Clear();
}
const ::std::string& VideoImportDoc::videoqualityoptionsvk(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
  return videoqualityoptionsvk_.Get(index);
}
::std::string* VideoImportDoc::mutable_videoqualityoptionsvk(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
  return videoqualityoptionsvk_.Mutable(index);
}
void VideoImportDoc::set_videoqualityoptionsvk(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
  videoqualityoptionsvk_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VideoImportDoc::set_videoqualityoptionsvk(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
  videoqualityoptionsvk_.Mutable(index)->assign(std::move(value));
}
#endif
void VideoImportDoc::set_videoqualityoptionsvk(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  videoqualityoptionsvk_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
}
void VideoImportDoc::set_videoqualityoptionsvk(int index, const char* value, size_t size) {
  videoqualityoptionsvk_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
}
::std::string* VideoImportDoc::add_videoqualityoptionsvk() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
  return videoqualityoptionsvk_.Add();
}
void VideoImportDoc::add_videoqualityoptionsvk(const ::std::string& value) {
  videoqualityoptionsvk_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
}
#if LANG_CXX11
void VideoImportDoc::add_videoqualityoptionsvk(::std::string&& value) {
  videoqualityoptionsvk_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
}
#endif
void VideoImportDoc::add_videoqualityoptionsvk(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  videoqualityoptionsvk_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
}
void VideoImportDoc::add_videoqualityoptionsvk(const char* value, size_t size) {
  videoqualityoptionsvk_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VideoImportDoc::videoqualityoptionsvk() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
  return videoqualityoptionsvk_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VideoImportDoc::mutable_videoqualityoptionsvk() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
  return &videoqualityoptionsvk_;
}

// optional bool is_official_music_clip = 93 [default = false];
bool VideoImportDoc::has_is_official_music_clip() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
void VideoImportDoc::set_has_is_official_music_clip() {
  _has_bits_[2] |= 0x00800000u;
}
void VideoImportDoc::clear_has_is_official_music_clip() {
  _has_bits_[2] &= ~0x00800000u;
}
void VideoImportDoc::clear_is_official_music_clip() {
  is_official_music_clip_ = false;
  clear_has_is_official_music_clip();
}
bool VideoImportDoc::is_official_music_clip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_official_music_clip)
  return is_official_music_clip_;
}
void VideoImportDoc::set_is_official_music_clip(bool value) {
  set_has_is_official_music_clip();
  is_official_music_clip_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_official_music_clip)
}

// optional bool is_external = 94;
bool VideoImportDoc::has_is_external() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
void VideoImportDoc::set_has_is_external() {
  _has_bits_[2] |= 0x01000000u;
}
void VideoImportDoc::clear_has_is_external() {
  _has_bits_[2] &= ~0x01000000u;
}
void VideoImportDoc::clear_is_external() {
  is_external_ = false;
  clear_has_is_external();
}
bool VideoImportDoc::is_external() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_external)
  return is_external_;
}
void VideoImportDoc::set_is_external(bool value) {
  set_has_is_external();
  is_external_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_external)
}

// optional string external_link = 95;
bool VideoImportDoc::has_external_link() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void VideoImportDoc::set_has_external_link() {
  _has_bits_[0] |= 0x00200000u;
}
void VideoImportDoc::clear_has_external_link() {
  _has_bits_[0] &= ~0x00200000u;
}
void VideoImportDoc::clear_external_link() {
  external_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_external_link();
}
const ::std::string& VideoImportDoc::external_link() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.external_link)
  return external_link_.GetNoArena();
}
void VideoImportDoc::set_external_link(const ::std::string& value) {
  set_has_external_link();
  external_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.external_link)
}
#if LANG_CXX11
void VideoImportDoc::set_external_link(::std::string&& value) {
  set_has_external_link();
  external_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.external_link)
}
#endif
void VideoImportDoc::set_external_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_external_link();
  external_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.external_link)
}
void VideoImportDoc::set_external_link(const char* value, size_t size) {
  set_has_external_link();
  external_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.external_link)
}
::std::string* VideoImportDoc::mutable_external_link() {
  set_has_external_link();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.external_link)
  return external_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_external_link() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.external_link)
  clear_has_external_link();
  return external_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_external_link(::std::string* external_link) {
  if (external_link != NULL) {
    set_has_external_link();
  } else {
    clear_has_external_link();
  }
  external_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_link);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.external_link)
}

// optional string audio_title = 97;
bool VideoImportDoc::has_audio_title() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void VideoImportDoc::set_has_audio_title() {
  _has_bits_[0] |= 0x00800000u;
}
void VideoImportDoc::clear_has_audio_title() {
  _has_bits_[0] &= ~0x00800000u;
}
void VideoImportDoc::clear_audio_title() {
  audio_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audio_title();
}
const ::std::string& VideoImportDoc::audio_title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.audio_title)
  return audio_title_.GetNoArena();
}
void VideoImportDoc::set_audio_title(const ::std::string& value) {
  set_has_audio_title();
  audio_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.audio_title)
}
#if LANG_CXX11
void VideoImportDoc::set_audio_title(::std::string&& value) {
  set_has_audio_title();
  audio_title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.audio_title)
}
#endif
void VideoImportDoc::set_audio_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_audio_title();
  audio_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.audio_title)
}
void VideoImportDoc::set_audio_title(const char* value, size_t size) {
  set_has_audio_title();
  audio_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.audio_title)
}
::std::string* VideoImportDoc::mutable_audio_title() {
  set_has_audio_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.audio_title)
  return audio_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_audio_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.audio_title)
  clear_has_audio_title();
  return audio_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_audio_title(::std::string* audio_title) {
  if (audio_title != NULL) {
    set_has_audio_title();
  } else {
    clear_has_audio_title();
  }
  audio_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.audio_title)
}

// optional string audio_performer = 98;
bool VideoImportDoc::has_audio_performer() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void VideoImportDoc::set_has_audio_performer() {
  _has_bits_[0] |= 0x01000000u;
}
void VideoImportDoc::clear_has_audio_performer() {
  _has_bits_[0] &= ~0x01000000u;
}
void VideoImportDoc::clear_audio_performer() {
  audio_performer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audio_performer();
}
const ::std::string& VideoImportDoc::audio_performer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer)
  return audio_performer_.GetNoArena();
}
void VideoImportDoc::set_audio_performer(const ::std::string& value) {
  set_has_audio_performer();
  audio_performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer)
}
#if LANG_CXX11
void VideoImportDoc::set_audio_performer(::std::string&& value) {
  set_has_audio_performer();
  audio_performer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer)
}
#endif
void VideoImportDoc::set_audio_performer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_audio_performer();
  audio_performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer)
}
void VideoImportDoc::set_audio_performer(const char* value, size_t size) {
  set_has_audio_performer();
  audio_performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer)
}
::std::string* VideoImportDoc::mutable_audio_performer() {
  set_has_audio_performer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer)
  return audio_performer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoImportDoc::release_audio_performer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer)
  clear_has_audio_performer();
  return audio_performer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoImportDoc::set_allocated_audio_performer(::std::string* audio_performer) {
  if (audio_performer != NULL) {
    set_has_audio_performer();
  } else {
    clear_has_audio_performer();
  }
  audio_performer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_performer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer)
}

// repeated string hashtags = 99;
int VideoImportDoc::hashtags_size() const {
  return hashtags_.size();
}
void VideoImportDoc::clear_hashtags() {
  hashtags_.Clear();
}
const ::std::string& VideoImportDoc::hashtags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
  return hashtags_.Get(index);
}
::std::string* VideoImportDoc::mutable_hashtags(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
  return hashtags_.Mutable(index);
}
void VideoImportDoc::set_hashtags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
  hashtags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VideoImportDoc::set_hashtags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
  hashtags_.Mutable(index)->assign(std::move(value));
}
#endif
void VideoImportDoc::set_hashtags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hashtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
}
void VideoImportDoc::set_hashtags(int index, const char* value, size_t size) {
  hashtags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
}
::std::string* VideoImportDoc::add_hashtags() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
  return hashtags_.Add();
}
void VideoImportDoc::add_hashtags(const ::std::string& value) {
  hashtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
}
#if LANG_CXX11
void VideoImportDoc::add_hashtags(::std::string&& value) {
  hashtags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
}
#endif
void VideoImportDoc::add_hashtags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hashtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
}
void VideoImportDoc::add_hashtags(const char* value, size_t size) {
  hashtags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VideoImportDoc::hashtags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
  return hashtags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VideoImportDoc::mutable_hashtags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
  return &hashtags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexedVideo::kVideoImportDocFieldNumber;
const int IndexedVideo::kMovieMetadataFieldNumber;
const int IndexedVideo::kIsPornFieldNumber;
const int IndexedVideo::kPreviewMbNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexedVideo::IndexedVideo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.IndexedVideo)
}
IndexedVideo::IndexedVideo(const IndexedVideo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_video_import_doc()) {
    video_import_doc_ = new ::ru::mail::go::webbase::blobs::VideoImportDoc(*from.video_import_doc_);
  } else {
    video_import_doc_ = NULL;
  }
  if (from.has_movie_metadata()) {
    movie_metadata_ = new ::ru::mail::go::webbase::blobs::MovieMetadata(*from.movie_metadata_);
  } else {
    movie_metadata_ = NULL;
  }
  ::memcpy(&is_porn_, &from.is_porn_,
    static_cast<size_t>(reinterpret_cast<char*>(&preview_mb_num_) -
    reinterpret_cast<char*>(&is_porn_)) + sizeof(preview_mb_num_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.IndexedVideo)
}

void IndexedVideo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&video_import_doc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preview_mb_num_) -
      reinterpret_cast<char*>(&video_import_doc_)) + sizeof(preview_mb_num_));
}

IndexedVideo::~IndexedVideo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.IndexedVideo)
  SharedDtor();
}

void IndexedVideo::SharedDtor() {
  if (this != internal_default_instance()) delete video_import_doc_;
  if (this != internal_default_instance()) delete movie_metadata_;
}

void IndexedVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexedVideo::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexedVideo& IndexedVideo::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

IndexedVideo* IndexedVideo::New(::google::protobuf::Arena* arena) const {
  IndexedVideo* n = new IndexedVideo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexedVideo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.IndexedVideo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(video_import_doc_ != NULL);
      video_import_doc_->::ru::mail::go::webbase::blobs::VideoImportDoc::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(movie_metadata_ != NULL);
      movie_metadata_->::ru::mail::go::webbase::blobs::MovieMetadata::Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&is_porn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preview_mb_num_) -
        reinterpret_cast<char*>(&is_porn_)) + sizeof(preview_mb_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IndexedVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.IndexedVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.VideoImportDoc video_import_doc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_import_doc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.MovieMetadata movie_metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movie_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_porn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_porn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_porn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 preview_mb_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_preview_mb_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preview_mb_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.IndexedVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.IndexedVideo)
  return false;
#undef DO_
}

void IndexedVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.IndexedVideo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.VideoImportDoc video_import_doc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->video_import_doc_, output);
  }

  // optional .ru.mail.go.webbase.blobs.MovieMetadata movie_metadata = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->movie_metadata_, output);
  }

  // optional bool is_porn = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_porn(), output);
  }

  // optional int32 preview_mb_num = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->preview_mb_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.IndexedVideo)
}

::google::protobuf::uint8* IndexedVideo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.IndexedVideo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.VideoImportDoc video_import_doc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->video_import_doc_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.MovieMetadata movie_metadata = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->movie_metadata_, deterministic, target);
  }

  // optional bool is_porn = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_porn(), target);
  }

  // optional int32 preview_mb_num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->preview_mb_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.IndexedVideo)
  return target;
}

size_t IndexedVideo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.IndexedVideo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.VideoImportDoc video_import_doc = 1;
  if (has_video_import_doc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->video_import_doc_);
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional .ru.mail.go.webbase.blobs.MovieMetadata movie_metadata = 2;
    if (has_movie_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->movie_metadata_);
    }

    // optional bool is_porn = 3;
    if (has_is_porn()) {
      total_size += 1 + 1;
    }

    // optional int32 preview_mb_num = 4;
    if (has_preview_mb_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preview_mb_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexedVideo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.IndexedVideo)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexedVideo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexedVideo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.IndexedVideo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.IndexedVideo)
    MergeFrom(*source);
  }
}

void IndexedVideo::MergeFrom(const IndexedVideo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.IndexedVideo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_video_import_doc()->::ru::mail::go::webbase::blobs::VideoImportDoc::MergeFrom(from.video_import_doc());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_movie_metadata()->::ru::mail::go::webbase::blobs::MovieMetadata::MergeFrom(from.movie_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      is_porn_ = from.is_porn_;
    }
    if (cached_has_bits & 0x00000008u) {
      preview_mb_num_ = from.preview_mb_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IndexedVideo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.IndexedVideo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexedVideo::CopyFrom(const IndexedVideo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.IndexedVideo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexedVideo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_movie_metadata()) {
    if (!this->movie_metadata_->IsInitialized()) return false;
  }
  return true;
}

void IndexedVideo::Swap(IndexedVideo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexedVideo::InternalSwap(IndexedVideo* other) {
  using std::swap;
  swap(video_import_doc_, other->video_import_doc_);
  swap(movie_metadata_, other->movie_metadata_);
  swap(is_porn_, other->is_porn_);
  swap(preview_mb_num_, other->preview_mb_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexedVideo::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndexedVideo

// required .ru.mail.go.webbase.blobs.VideoImportDoc video_import_doc = 1;
bool IndexedVideo::has_video_import_doc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IndexedVideo::set_has_video_import_doc() {
  _has_bits_[0] |= 0x00000001u;
}
void IndexedVideo::clear_has_video_import_doc() {
  _has_bits_[0] &= ~0x00000001u;
}
void IndexedVideo::clear_video_import_doc() {
  if (video_import_doc_ != NULL) video_import_doc_->::ru::mail::go::webbase::blobs::VideoImportDoc::Clear();
  clear_has_video_import_doc();
}
const ::ru::mail::go::webbase::blobs::VideoImportDoc& IndexedVideo::video_import_doc() const {
  const ::ru::mail::go::webbase::blobs::VideoImportDoc* p = video_import_doc_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.IndexedVideo.video_import_doc)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VideoImportDoc*>(
      &::ru::mail::go::webbase::blobs::_VideoImportDoc_default_instance_);
}
::ru::mail::go::webbase::blobs::VideoImportDoc* IndexedVideo::mutable_video_import_doc() {
  set_has_video_import_doc();
  if (video_import_doc_ == NULL) {
    video_import_doc_ = new ::ru::mail::go::webbase::blobs::VideoImportDoc;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.IndexedVideo.video_import_doc)
  return video_import_doc_;
}
::ru::mail::go::webbase::blobs::VideoImportDoc* IndexedVideo::release_video_import_doc() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.IndexedVideo.video_import_doc)
  clear_has_video_import_doc();
  ::ru::mail::go::webbase::blobs::VideoImportDoc* temp = video_import_doc_;
  video_import_doc_ = NULL;
  return temp;
}
void IndexedVideo::set_allocated_video_import_doc(::ru::mail::go::webbase::blobs::VideoImportDoc* video_import_doc) {
  delete video_import_doc_;
  video_import_doc_ = video_import_doc;
  if (video_import_doc) {
    set_has_video_import_doc();
  } else {
    clear_has_video_import_doc();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.IndexedVideo.video_import_doc)
}

// optional .ru.mail.go.webbase.blobs.MovieMetadata movie_metadata = 2;
bool IndexedVideo::has_movie_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IndexedVideo::set_has_movie_metadata() {
  _has_bits_[0] |= 0x00000002u;
}
void IndexedVideo::clear_has_movie_metadata() {
  _has_bits_[0] &= ~0x00000002u;
}
void IndexedVideo::clear_movie_metadata() {
  if (movie_metadata_ != NULL) movie_metadata_->::ru::mail::go::webbase::blobs::MovieMetadata::Clear();
  clear_has_movie_metadata();
}
const ::ru::mail::go::webbase::blobs::MovieMetadata& IndexedVideo::movie_metadata() const {
  const ::ru::mail::go::webbase::blobs::MovieMetadata* p = movie_metadata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.IndexedVideo.movie_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::MovieMetadata*>(
      &::ru::mail::go::webbase::blobs::_MovieMetadata_default_instance_);
}
::ru::mail::go::webbase::blobs::MovieMetadata* IndexedVideo::mutable_movie_metadata() {
  set_has_movie_metadata();
  if (movie_metadata_ == NULL) {
    movie_metadata_ = new ::ru::mail::go::webbase::blobs::MovieMetadata;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.IndexedVideo.movie_metadata)
  return movie_metadata_;
}
::ru::mail::go::webbase::blobs::MovieMetadata* IndexedVideo::release_movie_metadata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.IndexedVideo.movie_metadata)
  clear_has_movie_metadata();
  ::ru::mail::go::webbase::blobs::MovieMetadata* temp = movie_metadata_;
  movie_metadata_ = NULL;
  return temp;
}
void IndexedVideo::set_allocated_movie_metadata(::ru::mail::go::webbase::blobs::MovieMetadata* movie_metadata) {
  delete movie_metadata_;
  movie_metadata_ = movie_metadata;
  if (movie_metadata) {
    set_has_movie_metadata();
  } else {
    clear_has_movie_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.IndexedVideo.movie_metadata)
}

// optional bool is_porn = 3;
bool IndexedVideo::has_is_porn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IndexedVideo::set_has_is_porn() {
  _has_bits_[0] |= 0x00000004u;
}
void IndexedVideo::clear_has_is_porn() {
  _has_bits_[0] &= ~0x00000004u;
}
void IndexedVideo::clear_is_porn() {
  is_porn_ = false;
  clear_has_is_porn();
}
bool IndexedVideo::is_porn() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.IndexedVideo.is_porn)
  return is_porn_;
}
void IndexedVideo::set_is_porn(bool value) {
  set_has_is_porn();
  is_porn_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.IndexedVideo.is_porn)
}

// optional int32 preview_mb_num = 4;
bool IndexedVideo::has_preview_mb_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IndexedVideo::set_has_preview_mb_num() {
  _has_bits_[0] |= 0x00000008u;
}
void IndexedVideo::clear_has_preview_mb_num() {
  _has_bits_[0] &= ~0x00000008u;
}
void IndexedVideo::clear_preview_mb_num() {
  preview_mb_num_ = 0;
  clear_has_preview_mb_num();
}
::google::protobuf::int32 IndexedVideo::preview_mb_num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.IndexedVideo.preview_mb_num)
  return preview_mb_num_;
}
void IndexedVideo::set_preview_mb_num(::google::protobuf::int32 value) {
  set_has_preview_mb_num();
  preview_mb_num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.IndexedVideo.preview_mb_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FastVideoImportDoc::kVideoImportDocFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FastVideoImportDoc::FastVideoImportDoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.FastVideoImportDoc)
}
FastVideoImportDoc::FastVideoImportDoc(const FastVideoImportDoc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_video_import_doc()) {
    video_import_doc_ = new ::ru::mail::go::webbase::blobs::VideoImportDoc(*from.video_import_doc_);
  } else {
    video_import_doc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.FastVideoImportDoc)
}

void FastVideoImportDoc::SharedCtor() {
  _cached_size_ = 0;
  video_import_doc_ = NULL;
}

FastVideoImportDoc::~FastVideoImportDoc() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.FastVideoImportDoc)
  SharedDtor();
}

void FastVideoImportDoc::SharedDtor() {
  if (this != internal_default_instance()) delete video_import_doc_;
}

void FastVideoImportDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FastVideoImportDoc::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FastVideoImportDoc& FastVideoImportDoc::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

FastVideoImportDoc* FastVideoImportDoc::New(::google::protobuf::Arena* arena) const {
  FastVideoImportDoc* n = new FastVideoImportDoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FastVideoImportDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.FastVideoImportDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_video_import_doc()) {
    GOOGLE_DCHECK(video_import_doc_ != NULL);
    video_import_doc_->::ru::mail::go::webbase::blobs::VideoImportDoc::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FastVideoImportDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.FastVideoImportDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.VideoImportDoc video_import_doc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_import_doc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.FastVideoImportDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.FastVideoImportDoc)
  return false;
#undef DO_
}

void FastVideoImportDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.FastVideoImportDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.VideoImportDoc video_import_doc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->video_import_doc_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.FastVideoImportDoc)
}

::google::protobuf::uint8* FastVideoImportDoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.FastVideoImportDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.VideoImportDoc video_import_doc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->video_import_doc_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.FastVideoImportDoc)
  return target;
}

size_t FastVideoImportDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.FastVideoImportDoc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.VideoImportDoc video_import_doc = 1;
  if (has_video_import_doc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->video_import_doc_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FastVideoImportDoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.FastVideoImportDoc)
  GOOGLE_DCHECK_NE(&from, this);
  const FastVideoImportDoc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FastVideoImportDoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.FastVideoImportDoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.FastVideoImportDoc)
    MergeFrom(*source);
  }
}

void FastVideoImportDoc::MergeFrom(const FastVideoImportDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.FastVideoImportDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_video_import_doc()) {
    mutable_video_import_doc()->::ru::mail::go::webbase::blobs::VideoImportDoc::MergeFrom(from.video_import_doc());
  }
}

void FastVideoImportDoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.FastVideoImportDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastVideoImportDoc::CopyFrom(const FastVideoImportDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.FastVideoImportDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastVideoImportDoc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FastVideoImportDoc::Swap(FastVideoImportDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FastVideoImportDoc::InternalSwap(FastVideoImportDoc* other) {
  using std::swap;
  swap(video_import_doc_, other->video_import_doc_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FastVideoImportDoc::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FastVideoImportDoc

// required .ru.mail.go.webbase.blobs.VideoImportDoc video_import_doc = 1;
bool FastVideoImportDoc::has_video_import_doc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FastVideoImportDoc::set_has_video_import_doc() {
  _has_bits_[0] |= 0x00000001u;
}
void FastVideoImportDoc::clear_has_video_import_doc() {
  _has_bits_[0] &= ~0x00000001u;
}
void FastVideoImportDoc::clear_video_import_doc() {
  if (video_import_doc_ != NULL) video_import_doc_->::ru::mail::go::webbase::blobs::VideoImportDoc::Clear();
  clear_has_video_import_doc();
}
const ::ru::mail::go::webbase::blobs::VideoImportDoc& FastVideoImportDoc::video_import_doc() const {
  const ::ru::mail::go::webbase::blobs::VideoImportDoc* p = video_import_doc_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FastVideoImportDoc.video_import_doc)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VideoImportDoc*>(
      &::ru::mail::go::webbase::blobs::_VideoImportDoc_default_instance_);
}
::ru::mail::go::webbase::blobs::VideoImportDoc* FastVideoImportDoc::mutable_video_import_doc() {
  set_has_video_import_doc();
  if (video_import_doc_ == NULL) {
    video_import_doc_ = new ::ru::mail::go::webbase::blobs::VideoImportDoc;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FastVideoImportDoc.video_import_doc)
  return video_import_doc_;
}
::ru::mail::go::webbase::blobs::VideoImportDoc* FastVideoImportDoc::release_video_import_doc() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FastVideoImportDoc.video_import_doc)
  clear_has_video_import_doc();
  ::ru::mail::go::webbase::blobs::VideoImportDoc* temp = video_import_doc_;
  video_import_doc_ = NULL;
  return temp;
}
void FastVideoImportDoc::set_allocated_video_import_doc(::ru::mail::go::webbase::blobs::VideoImportDoc* video_import_doc) {
  delete video_import_doc_;
  video_import_doc_ = video_import_doc;
  if (video_import_doc) {
    set_has_video_import_doc();
  } else {
    clear_has_video_import_doc();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FastVideoImportDoc.video_import_doc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovieMetadata::kTitleFieldNumber;
const int MovieMetadata::kOriginalTitleFieldNumber;
const int MovieMetadata::kDurationFieldNumber;
const int MovieMetadata::kStatusFieldNumber;
const int MovieMetadata::kYearFieldNumber;
const int MovieMetadata::kCountryFieldNumber;
const int MovieMetadata::kDirectorFieldNumber;
const int MovieMetadata::kProducerFieldNumber;
const int MovieMetadata::kActorsFieldNumber;
const int MovieMetadata::kGenreFieldNumber;
const int MovieMetadata::kDescriptionFieldNumber;
const int MovieMetadata::kImdbRatingFieldNumber;
const int MovieMetadata::kReleaseDateFieldNumber;
const int MovieMetadata::kPremiereRuFieldNumber;
const int MovieMetadata::kAfishaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovieMetadata::MovieMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.MovieMetadata)
}
MovieMetadata::MovieMetadata(const MovieMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  original_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_original_title()) {
    original_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_title_);
  }
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  director_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_director()) {
    director_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.director_);
  }
  producer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_producer()) {
    producer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_);
  }
  actors_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_actors()) {
    actors_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actors_);
  }
  genre_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_genre()) {
    genre_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.genre_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.MovieMetadata)
}

void MovieMetadata::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  director_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actors_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genre_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imdb_rating_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(imdb_rating_));
  status_ = 1;
}

MovieMetadata::~MovieMetadata() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.MovieMetadata)
  SharedDtor();
}

void MovieMetadata::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  director_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actors_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genre_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MovieMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovieMetadata::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MovieMetadata& MovieMetadata::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

MovieMetadata* MovieMetadata::New(::google::protobuf::Arena* arena) const {
  MovieMetadata* n = new MovieMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MovieMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.MovieMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!original_title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*original_title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!director_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*director_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!producer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*producer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!actors_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*actors_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!genre_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*genre_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 32512u) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&imdb_rating_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(imdb_rating_));
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MovieMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.MovieMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.MovieMetadata.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string original_title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_original_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->original_title().data(), static_cast<int>(this->original_title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.MovieMetadata.original_title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.MovieMetadata.MovieStatus status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::MovieMetadata_MovieStatus_IsValid(value)) {
            set_status(static_cast< ::ru::mail::go::webbase::blobs::MovieMetadata_MovieStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 year = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), static_cast<int>(this->country().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.MovieMetadata.country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string director = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_director()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->director().data(), static_cast<int>(this->director().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.MovieMetadata.director");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string producer = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->producer().data(), static_cast<int>(this->producer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.MovieMetadata.producer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string actors = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->actors().data(), static_cast<int>(this->actors().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.MovieMetadata.actors");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string genre = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genre()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->genre().data(), static_cast<int>(this->genre().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.MovieMetadata.genre");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.MovieMetadata.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float imdb_rating = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_imdb_rating();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &imdb_rating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 release_date = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_release_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &release_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 premiere_ru = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_premiere_ru();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &premiere_ru_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 afisha_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_afisha_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &afisha_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.MovieMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.MovieMetadata)
  return false;
#undef DO_
}

void MovieMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.MovieMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MovieMetadata.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional string original_title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->original_title().data(), static_cast<int>(this->original_title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MovieMetadata.original_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->original_title(), output);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duration(), output);
  }

  // optional .ru.mail.go.webbase.blobs.MovieMetadata.MovieStatus status = 4;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional uint32 year = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->year(), output);
  }

  // optional string country = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), static_cast<int>(this->country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MovieMetadata.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->country(), output);
  }

  // optional string director = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->director().data(), static_cast<int>(this->director().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MovieMetadata.director");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->director(), output);
  }

  // optional string producer = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->producer().data(), static_cast<int>(this->producer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MovieMetadata.producer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->producer(), output);
  }

  // optional string actors = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actors().data(), static_cast<int>(this->actors().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MovieMetadata.actors");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->actors(), output);
  }

  // optional string genre = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->genre().data(), static_cast<int>(this->genre().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MovieMetadata.genre");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->genre(), output);
  }

  // optional string description = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MovieMetadata.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->description(), output);
  }

  // optional float imdb_rating = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->imdb_rating(), output);
  }

  // optional int64 release_date = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->release_date(), output);
  }

  // optional int64 premiere_ru = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->premiere_ru(), output);
  }

  // optional int64 afisha_id = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->afisha_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.MovieMetadata)
}

::google::protobuf::uint8* MovieMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.MovieMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MovieMetadata.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string original_title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->original_title().data(), static_cast<int>(this->original_title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MovieMetadata.original_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->original_title(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duration(), target);
  }

  // optional .ru.mail.go.webbase.blobs.MovieMetadata.MovieStatus status = 4;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional uint32 year = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->year(), target);
  }

  // optional string country = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), static_cast<int>(this->country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MovieMetadata.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->country(), target);
  }

  // optional string director = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->director().data(), static_cast<int>(this->director().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MovieMetadata.director");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->director(), target);
  }

  // optional string producer = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->producer().data(), static_cast<int>(this->producer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MovieMetadata.producer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->producer(), target);
  }

  // optional string actors = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actors().data(), static_cast<int>(this->actors().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MovieMetadata.actors");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->actors(), target);
  }

  // optional string genre = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->genre().data(), static_cast<int>(this->genre().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MovieMetadata.genre");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->genre(), target);
  }

  // optional string description = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MovieMetadata.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->description(), target);
  }

  // optional float imdb_rating = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->imdb_rating(), target);
  }

  // optional int64 release_date = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->release_date(), target);
  }

  // optional int64 premiere_ru = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->premiere_ru(), target);
  }

  // optional int64 afisha_id = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->afisha_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.MovieMetadata)
  return target;
}

size_t MovieMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.MovieMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string title = 1;
  if (has_title()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional string original_title = 2;
    if (has_original_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->original_title());
    }

    // optional string country = 6;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string director = 7;
    if (has_director()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->director());
    }

    // optional string producer = 8;
    if (has_producer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->producer());
    }

    // optional string actors = 9;
    if (has_actors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actors());
    }

    // optional string genre = 10;
    if (has_genre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->genre());
    }

    // optional string description = 11;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional uint32 duration = 3;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional uint32 year = 5;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // optional int64 release_date = 13;
    if (has_release_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->release_date());
    }

    // optional int64 premiere_ru = 14;
    if (has_premiere_ru()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->premiere_ru());
    }

    // optional int64 afisha_id = 15;
    if (has_afisha_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->afisha_id());
    }

    // optional float imdb_rating = 12;
    if (has_imdb_rating()) {
      total_size += 1 + 4;
    }

    // optional .ru.mail.go.webbase.blobs.MovieMetadata.MovieStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovieMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.MovieMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const MovieMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MovieMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.MovieMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.MovieMetadata)
    MergeFrom(*source);
  }
}

void MovieMetadata::MergeFrom(const MovieMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.MovieMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_original_title();
      original_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_director();
      director_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.director_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_producer();
      producer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_actors();
      actors_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actors_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_genre();
      genre_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.genre_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000200u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000400u) {
      release_date_ = from.release_date_;
    }
    if (cached_has_bits & 0x00000800u) {
      premiere_ru_ = from.premiere_ru_;
    }
    if (cached_has_bits & 0x00001000u) {
      afisha_id_ = from.afisha_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      imdb_rating_ = from.imdb_rating_;
    }
    if (cached_has_bits & 0x00004000u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MovieMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.MovieMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovieMetadata::CopyFrom(const MovieMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.MovieMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MovieMetadata::Swap(MovieMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MovieMetadata::InternalSwap(MovieMetadata* other) {
  using std::swap;
  title_.Swap(&other->title_);
  original_title_.Swap(&other->original_title_);
  country_.Swap(&other->country_);
  director_.Swap(&other->director_);
  producer_.Swap(&other->producer_);
  actors_.Swap(&other->actors_);
  genre_.Swap(&other->genre_);
  description_.Swap(&other->description_);
  swap(duration_, other->duration_);
  swap(year_, other->year_);
  swap(release_date_, other->release_date_);
  swap(premiere_ru_, other->premiere_ru_);
  swap(afisha_id_, other->afisha_id_);
  swap(imdb_rating_, other->imdb_rating_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MovieMetadata::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MovieMetadata

// required string title = 1;
bool MovieMetadata::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MovieMetadata::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void MovieMetadata::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void MovieMetadata::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& MovieMetadata::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.title)
  return title_.GetNoArena();
}
void MovieMetadata::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.title)
}
#if LANG_CXX11
void MovieMetadata::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MovieMetadata.title)
}
#endif
void MovieMetadata::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MovieMetadata.title)
}
void MovieMetadata::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MovieMetadata.title)
}
::std::string* MovieMetadata::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieMetadata.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieMetadata::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MovieMetadata.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieMetadata::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MovieMetadata.title)
}

// optional string original_title = 2;
bool MovieMetadata::has_original_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MovieMetadata::set_has_original_title() {
  _has_bits_[0] |= 0x00000002u;
}
void MovieMetadata::clear_has_original_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void MovieMetadata::clear_original_title() {
  original_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_original_title();
}
const ::std::string& MovieMetadata::original_title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.original_title)
  return original_title_.GetNoArena();
}
void MovieMetadata::set_original_title(const ::std::string& value) {
  set_has_original_title();
  original_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.original_title)
}
#if LANG_CXX11
void MovieMetadata::set_original_title(::std::string&& value) {
  set_has_original_title();
  original_title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MovieMetadata.original_title)
}
#endif
void MovieMetadata::set_original_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_original_title();
  original_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MovieMetadata.original_title)
}
void MovieMetadata::set_original_title(const char* value, size_t size) {
  set_has_original_title();
  original_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MovieMetadata.original_title)
}
::std::string* MovieMetadata::mutable_original_title() {
  set_has_original_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieMetadata.original_title)
  return original_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieMetadata::release_original_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MovieMetadata.original_title)
  clear_has_original_title();
  return original_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieMetadata::set_allocated_original_title(::std::string* original_title) {
  if (original_title != NULL) {
    set_has_original_title();
  } else {
    clear_has_original_title();
  }
  original_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MovieMetadata.original_title)
}

// optional uint32 duration = 3;
bool MovieMetadata::has_duration() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MovieMetadata::set_has_duration() {
  _has_bits_[0] |= 0x00000100u;
}
void MovieMetadata::clear_has_duration() {
  _has_bits_[0] &= ~0x00000100u;
}
void MovieMetadata::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 MovieMetadata::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.duration)
  return duration_;
}
void MovieMetadata::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.duration)
}

// optional .ru.mail.go.webbase.blobs.MovieMetadata.MovieStatus status = 4;
bool MovieMetadata::has_status() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void MovieMetadata::set_has_status() {
  _has_bits_[0] |= 0x00004000u;
}
void MovieMetadata::clear_has_status() {
  _has_bits_[0] &= ~0x00004000u;
}
void MovieMetadata::clear_status() {
  status_ = 1;
  clear_has_status();
}
::ru::mail::go::webbase::blobs::MovieMetadata_MovieStatus MovieMetadata::status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.status)
  return static_cast< ::ru::mail::go::webbase::blobs::MovieMetadata_MovieStatus >(status_);
}
void MovieMetadata::set_status(::ru::mail::go::webbase::blobs::MovieMetadata_MovieStatus value) {
  assert(::ru::mail::go::webbase::blobs::MovieMetadata_MovieStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.status)
}

// optional uint32 year = 5;
bool MovieMetadata::has_year() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MovieMetadata::set_has_year() {
  _has_bits_[0] |= 0x00000200u;
}
void MovieMetadata::clear_has_year() {
  _has_bits_[0] &= ~0x00000200u;
}
void MovieMetadata::clear_year() {
  year_ = 0u;
  clear_has_year();
}
::google::protobuf::uint32 MovieMetadata::year() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.year)
  return year_;
}
void MovieMetadata::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.year)
}

// optional string country = 6;
bool MovieMetadata::has_country() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MovieMetadata::set_has_country() {
  _has_bits_[0] |= 0x00000004u;
}
void MovieMetadata::clear_has_country() {
  _has_bits_[0] &= ~0x00000004u;
}
void MovieMetadata::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
const ::std::string& MovieMetadata::country() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.country)
  return country_.GetNoArena();
}
void MovieMetadata::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.country)
}
#if LANG_CXX11
void MovieMetadata::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MovieMetadata.country)
}
#endif
void MovieMetadata::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MovieMetadata.country)
}
void MovieMetadata::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MovieMetadata.country)
}
::std::string* MovieMetadata::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieMetadata.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieMetadata::release_country() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MovieMetadata.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieMetadata::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MovieMetadata.country)
}

// optional string director = 7;
bool MovieMetadata::has_director() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MovieMetadata::set_has_director() {
  _has_bits_[0] |= 0x00000008u;
}
void MovieMetadata::clear_has_director() {
  _has_bits_[0] &= ~0x00000008u;
}
void MovieMetadata::clear_director() {
  director_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_director();
}
const ::std::string& MovieMetadata::director() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.director)
  return director_.GetNoArena();
}
void MovieMetadata::set_director(const ::std::string& value) {
  set_has_director();
  director_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.director)
}
#if LANG_CXX11
void MovieMetadata::set_director(::std::string&& value) {
  set_has_director();
  director_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MovieMetadata.director)
}
#endif
void MovieMetadata::set_director(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_director();
  director_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MovieMetadata.director)
}
void MovieMetadata::set_director(const char* value, size_t size) {
  set_has_director();
  director_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MovieMetadata.director)
}
::std::string* MovieMetadata::mutable_director() {
  set_has_director();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieMetadata.director)
  return director_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieMetadata::release_director() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MovieMetadata.director)
  clear_has_director();
  return director_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieMetadata::set_allocated_director(::std::string* director) {
  if (director != NULL) {
    set_has_director();
  } else {
    clear_has_director();
  }
  director_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), director);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MovieMetadata.director)
}

// optional string producer = 8;
bool MovieMetadata::has_producer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MovieMetadata::set_has_producer() {
  _has_bits_[0] |= 0x00000010u;
}
void MovieMetadata::clear_has_producer() {
  _has_bits_[0] &= ~0x00000010u;
}
void MovieMetadata::clear_producer() {
  producer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_producer();
}
const ::std::string& MovieMetadata::producer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.producer)
  return producer_.GetNoArena();
}
void MovieMetadata::set_producer(const ::std::string& value) {
  set_has_producer();
  producer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.producer)
}
#if LANG_CXX11
void MovieMetadata::set_producer(::std::string&& value) {
  set_has_producer();
  producer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MovieMetadata.producer)
}
#endif
void MovieMetadata::set_producer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_producer();
  producer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MovieMetadata.producer)
}
void MovieMetadata::set_producer(const char* value, size_t size) {
  set_has_producer();
  producer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MovieMetadata.producer)
}
::std::string* MovieMetadata::mutable_producer() {
  set_has_producer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieMetadata.producer)
  return producer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieMetadata::release_producer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MovieMetadata.producer)
  clear_has_producer();
  return producer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieMetadata::set_allocated_producer(::std::string* producer) {
  if (producer != NULL) {
    set_has_producer();
  } else {
    clear_has_producer();
  }
  producer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MovieMetadata.producer)
}

// optional string actors = 9;
bool MovieMetadata::has_actors() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MovieMetadata::set_has_actors() {
  _has_bits_[0] |= 0x00000020u;
}
void MovieMetadata::clear_has_actors() {
  _has_bits_[0] &= ~0x00000020u;
}
void MovieMetadata::clear_actors() {
  actors_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_actors();
}
const ::std::string& MovieMetadata::actors() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.actors)
  return actors_.GetNoArena();
}
void MovieMetadata::set_actors(const ::std::string& value) {
  set_has_actors();
  actors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.actors)
}
#if LANG_CXX11
void MovieMetadata::set_actors(::std::string&& value) {
  set_has_actors();
  actors_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MovieMetadata.actors)
}
#endif
void MovieMetadata::set_actors(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_actors();
  actors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MovieMetadata.actors)
}
void MovieMetadata::set_actors(const char* value, size_t size) {
  set_has_actors();
  actors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MovieMetadata.actors)
}
::std::string* MovieMetadata::mutable_actors() {
  set_has_actors();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieMetadata.actors)
  return actors_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieMetadata::release_actors() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MovieMetadata.actors)
  clear_has_actors();
  return actors_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieMetadata::set_allocated_actors(::std::string* actors) {
  if (actors != NULL) {
    set_has_actors();
  } else {
    clear_has_actors();
  }
  actors_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actors);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MovieMetadata.actors)
}

// optional string genre = 10;
bool MovieMetadata::has_genre() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MovieMetadata::set_has_genre() {
  _has_bits_[0] |= 0x00000040u;
}
void MovieMetadata::clear_has_genre() {
  _has_bits_[0] &= ~0x00000040u;
}
void MovieMetadata::clear_genre() {
  genre_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_genre();
}
const ::std::string& MovieMetadata::genre() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.genre)
  return genre_.GetNoArena();
}
void MovieMetadata::set_genre(const ::std::string& value) {
  set_has_genre();
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.genre)
}
#if LANG_CXX11
void MovieMetadata::set_genre(::std::string&& value) {
  set_has_genre();
  genre_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MovieMetadata.genre)
}
#endif
void MovieMetadata::set_genre(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_genre();
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MovieMetadata.genre)
}
void MovieMetadata::set_genre(const char* value, size_t size) {
  set_has_genre();
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MovieMetadata.genre)
}
::std::string* MovieMetadata::mutable_genre() {
  set_has_genre();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieMetadata.genre)
  return genre_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieMetadata::release_genre() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MovieMetadata.genre)
  clear_has_genre();
  return genre_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieMetadata::set_allocated_genre(::std::string* genre) {
  if (genre != NULL) {
    set_has_genre();
  } else {
    clear_has_genre();
  }
  genre_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), genre);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MovieMetadata.genre)
}

// optional string description = 11;
bool MovieMetadata::has_description() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MovieMetadata::set_has_description() {
  _has_bits_[0] |= 0x00000080u;
}
void MovieMetadata::clear_has_description() {
  _has_bits_[0] &= ~0x00000080u;
}
void MovieMetadata::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& MovieMetadata::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.description)
  return description_.GetNoArena();
}
void MovieMetadata::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.description)
}
#if LANG_CXX11
void MovieMetadata::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MovieMetadata.description)
}
#endif
void MovieMetadata::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MovieMetadata.description)
}
void MovieMetadata::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MovieMetadata.description)
}
::std::string* MovieMetadata::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieMetadata.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieMetadata::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MovieMetadata.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieMetadata::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MovieMetadata.description)
}

// optional float imdb_rating = 12;
bool MovieMetadata::has_imdb_rating() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void MovieMetadata::set_has_imdb_rating() {
  _has_bits_[0] |= 0x00002000u;
}
void MovieMetadata::clear_has_imdb_rating() {
  _has_bits_[0] &= ~0x00002000u;
}
void MovieMetadata::clear_imdb_rating() {
  imdb_rating_ = 0;
  clear_has_imdb_rating();
}
float MovieMetadata::imdb_rating() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.imdb_rating)
  return imdb_rating_;
}
void MovieMetadata::set_imdb_rating(float value) {
  set_has_imdb_rating();
  imdb_rating_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.imdb_rating)
}

// optional int64 release_date = 13;
bool MovieMetadata::has_release_date() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MovieMetadata::set_has_release_date() {
  _has_bits_[0] |= 0x00000400u;
}
void MovieMetadata::clear_has_release_date() {
  _has_bits_[0] &= ~0x00000400u;
}
void MovieMetadata::clear_release_date() {
  release_date_ = GOOGLE_LONGLONG(0);
  clear_has_release_date();
}
::google::protobuf::int64 MovieMetadata::release_date() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.release_date)
  return release_date_;
}
void MovieMetadata::set_release_date(::google::protobuf::int64 value) {
  set_has_release_date();
  release_date_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.release_date)
}

// optional int64 premiere_ru = 14;
bool MovieMetadata::has_premiere_ru() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void MovieMetadata::set_has_premiere_ru() {
  _has_bits_[0] |= 0x00000800u;
}
void MovieMetadata::clear_has_premiere_ru() {
  _has_bits_[0] &= ~0x00000800u;
}
void MovieMetadata::clear_premiere_ru() {
  premiere_ru_ = GOOGLE_LONGLONG(0);
  clear_has_premiere_ru();
}
::google::protobuf::int64 MovieMetadata::premiere_ru() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.premiere_ru)
  return premiere_ru_;
}
void MovieMetadata::set_premiere_ru(::google::protobuf::int64 value) {
  set_has_premiere_ru();
  premiere_ru_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.premiere_ru)
}

// optional int64 afisha_id = 15;
bool MovieMetadata::has_afisha_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void MovieMetadata::set_has_afisha_id() {
  _has_bits_[0] |= 0x00001000u;
}
void MovieMetadata::clear_has_afisha_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void MovieMetadata::clear_afisha_id() {
  afisha_id_ = GOOGLE_LONGLONG(0);
  clear_has_afisha_id();
}
::google::protobuf::int64 MovieMetadata::afisha_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.afisha_id)
  return afisha_id_;
}
void MovieMetadata::set_afisha_id(::google::protobuf::int64 value) {
  set_has_afisha_id();
  afisha_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.afisha_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoviesClassificationDoc::kMetadataFieldNumber;
const int MoviesClassificationDoc::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoviesClassificationDoc::MoviesClassificationDoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
}
MoviesClassificationDoc::MoviesClassificationDoc(const MoviesClassificationDoc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      url_(from.url_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metadata()) {
    metadata_ = new ::ru::mail::go::webbase::blobs::MovieMetadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
}

void MoviesClassificationDoc::SharedCtor() {
  _cached_size_ = 0;
  metadata_ = NULL;
}

MoviesClassificationDoc::~MoviesClassificationDoc() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
  SharedDtor();
}

void MoviesClassificationDoc::SharedDtor() {
  if (this != internal_default_instance()) delete metadata_;
}

void MoviesClassificationDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoviesClassificationDoc::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MoviesClassificationDoc& MoviesClassificationDoc::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

MoviesClassificationDoc* MoviesClassificationDoc::New(::google::protobuf::Arena* arena) const {
  MoviesClassificationDoc* n = new MoviesClassificationDoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MoviesClassificationDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.Clear();
  if (has_metadata()) {
    GOOGLE_DCHECK(metadata_ != NULL);
    metadata_->::ru::mail::go::webbase::blobs::MovieMetadata::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MoviesClassificationDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.MovieMetadata metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url(this->url_size() - 1).data(),
            static_cast<int>(this->url(this->url_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.MoviesClassificationDoc.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
  return false;
#undef DO_
}

void MoviesClassificationDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.MovieMetadata metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->metadata_, output);
  }

  // repeated string url = 2;
  for (int i = 0, n = this->url_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url(i).data(), static_cast<int>(this->url(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MoviesClassificationDoc.url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
}

::google::protobuf::uint8* MoviesClassificationDoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.MovieMetadata metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->metadata_, deterministic, target);
  }

  // repeated string url = 2;
  for (int i = 0, n = this->url_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url(i).data(), static_cast<int>(this->url(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MoviesClassificationDoc.url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->url(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
  return target;
}

size_t MoviesClassificationDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.MovieMetadata metadata = 1;
  if (has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }
  // repeated string url = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->url_size());
  for (int i = 0, n = this->url_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->url(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoviesClassificationDoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
  GOOGLE_DCHECK_NE(&from, this);
  const MoviesClassificationDoc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MoviesClassificationDoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
    MergeFrom(*source);
  }
}

void MoviesClassificationDoc::MergeFrom(const MoviesClassificationDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  url_.MergeFrom(from.url_);
  if (from.has_metadata()) {
    mutable_metadata()->::ru::mail::go::webbase::blobs::MovieMetadata::MergeFrom(from.metadata());
  }
}

void MoviesClassificationDoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoviesClassificationDoc::CopyFrom(const MoviesClassificationDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoviesClassificationDoc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_metadata()) {
    if (!this->metadata_->IsInitialized()) return false;
  }
  return true;
}

void MoviesClassificationDoc::Swap(MoviesClassificationDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoviesClassificationDoc::InternalSwap(MoviesClassificationDoc* other) {
  using std::swap;
  url_.InternalSwap(&other->url_);
  swap(metadata_, other->metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MoviesClassificationDoc::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MoviesClassificationDoc

// required .ru.mail.go.webbase.blobs.MovieMetadata metadata = 1;
bool MoviesClassificationDoc::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MoviesClassificationDoc::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void MoviesClassificationDoc::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void MoviesClassificationDoc::clear_metadata() {
  if (metadata_ != NULL) metadata_->::ru::mail::go::webbase::blobs::MovieMetadata::Clear();
  clear_has_metadata();
}
const ::ru::mail::go::webbase::blobs::MovieMetadata& MoviesClassificationDoc::metadata() const {
  const ::ru::mail::go::webbase::blobs::MovieMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MoviesClassificationDoc.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::MovieMetadata*>(
      &::ru::mail::go::webbase::blobs::_MovieMetadata_default_instance_);
}
::ru::mail::go::webbase::blobs::MovieMetadata* MoviesClassificationDoc::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) {
    metadata_ = new ::ru::mail::go::webbase::blobs::MovieMetadata;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MoviesClassificationDoc.metadata)
  return metadata_;
}
::ru::mail::go::webbase::blobs::MovieMetadata* MoviesClassificationDoc::release_metadata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MoviesClassificationDoc.metadata)
  clear_has_metadata();
  ::ru::mail::go::webbase::blobs::MovieMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void MoviesClassificationDoc::set_allocated_metadata(::ru::mail::go::webbase::blobs::MovieMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MoviesClassificationDoc.metadata)
}

// repeated string url = 2;
int MoviesClassificationDoc::url_size() const {
  return url_.size();
}
void MoviesClassificationDoc::clear_url() {
  url_.Clear();
}
const ::std::string& MoviesClassificationDoc::url(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
  return url_.Get(index);
}
::std::string* MoviesClassificationDoc::mutable_url(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
  return url_.Mutable(index);
}
void MoviesClassificationDoc::set_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
  url_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void MoviesClassificationDoc::set_url(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
  url_.Mutable(index)->assign(std::move(value));
}
#endif
void MoviesClassificationDoc::set_url(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
}
void MoviesClassificationDoc::set_url(int index, const char* value, size_t size) {
  url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
}
::std::string* MoviesClassificationDoc::add_url() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
  return url_.Add();
}
void MoviesClassificationDoc::add_url(const ::std::string& value) {
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
}
#if LANG_CXX11
void MoviesClassificationDoc::add_url(::std::string&& value) {
  url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
}
#endif
void MoviesClassificationDoc::add_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
}
void MoviesClassificationDoc::add_url(const char* value, size_t size) {
  url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MoviesClassificationDoc::url() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
  return url_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MoviesClassificationDoc::mutable_url() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
  return &url_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YouTubeRecommendations::kRecommendationsIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YouTubeRecommendations::YouTubeRecommendations()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.YouTubeRecommendations)
}
YouTubeRecommendations::YouTubeRecommendations(const YouTubeRecommendations& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      recommendations_ids_(from.recommendations_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.YouTubeRecommendations)
}

void YouTubeRecommendations::SharedCtor() {
  _cached_size_ = 0;
}

YouTubeRecommendations::~YouTubeRecommendations() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.YouTubeRecommendations)
  SharedDtor();
}

void YouTubeRecommendations::SharedDtor() {
}

void YouTubeRecommendations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YouTubeRecommendations::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YouTubeRecommendations& YouTubeRecommendations::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

YouTubeRecommendations* YouTubeRecommendations::New(::google::protobuf::Arena* arena) const {
  YouTubeRecommendations* n = new YouTubeRecommendations;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouTubeRecommendations::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.YouTubeRecommendations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recommendations_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool YouTubeRecommendations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.YouTubeRecommendations)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string recommendations_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recommendations_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recommendations_ids(this->recommendations_ids_size() - 1).data(),
            static_cast<int>(this->recommendations_ids(this->recommendations_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.YouTubeRecommendations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.YouTubeRecommendations)
  return false;
#undef DO_
}

void YouTubeRecommendations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.YouTubeRecommendations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string recommendations_ids = 1;
  for (int i = 0, n = this->recommendations_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recommendations_ids(i).data(), static_cast<int>(this->recommendations_ids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->recommendations_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.YouTubeRecommendations)
}

::google::protobuf::uint8* YouTubeRecommendations::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.YouTubeRecommendations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string recommendations_ids = 1;
  for (int i = 0, n = this->recommendations_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recommendations_ids(i).data(), static_cast<int>(this->recommendations_ids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->recommendations_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.YouTubeRecommendations)
  return target;
}

size_t YouTubeRecommendations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.YouTubeRecommendations)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string recommendations_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->recommendations_ids_size());
  for (int i = 0, n = this->recommendations_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recommendations_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouTubeRecommendations::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.YouTubeRecommendations)
  GOOGLE_DCHECK_NE(&from, this);
  const YouTubeRecommendations* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YouTubeRecommendations>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.YouTubeRecommendations)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.YouTubeRecommendations)
    MergeFrom(*source);
  }
}

void YouTubeRecommendations::MergeFrom(const YouTubeRecommendations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.YouTubeRecommendations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recommendations_ids_.MergeFrom(from.recommendations_ids_);
}

void YouTubeRecommendations::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.YouTubeRecommendations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YouTubeRecommendations::CopyFrom(const YouTubeRecommendations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.YouTubeRecommendations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouTubeRecommendations::IsInitialized() const {
  return true;
}

void YouTubeRecommendations::Swap(YouTubeRecommendations* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouTubeRecommendations::InternalSwap(YouTubeRecommendations* other) {
  using std::swap;
  recommendations_ids_.InternalSwap(&other->recommendations_ids_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YouTubeRecommendations::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouTubeRecommendations

// repeated string recommendations_ids = 1;
int YouTubeRecommendations::recommendations_ids_size() const {
  return recommendations_ids_.size();
}
void YouTubeRecommendations::clear_recommendations_ids() {
  recommendations_ids_.Clear();
}
const ::std::string& YouTubeRecommendations::recommendations_ids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
  return recommendations_ids_.Get(index);
}
::std::string* YouTubeRecommendations::mutable_recommendations_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
  return recommendations_ids_.Mutable(index);
}
void YouTubeRecommendations::set_recommendations_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
  recommendations_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void YouTubeRecommendations::set_recommendations_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
  recommendations_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void YouTubeRecommendations::set_recommendations_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  recommendations_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
}
void YouTubeRecommendations::set_recommendations_ids(int index, const char* value, size_t size) {
  recommendations_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
}
::std::string* YouTubeRecommendations::add_recommendations_ids() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
  return recommendations_ids_.Add();
}
void YouTubeRecommendations::add_recommendations_ids(const ::std::string& value) {
  recommendations_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
}
#if LANG_CXX11
void YouTubeRecommendations::add_recommendations_ids(::std::string&& value) {
  recommendations_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
}
#endif
void YouTubeRecommendations::add_recommendations_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  recommendations_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
}
void YouTubeRecommendations::add_recommendations_ids(const char* value, size_t size) {
  recommendations_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
YouTubeRecommendations::recommendations_ids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
  return recommendations_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
YouTubeRecommendations::mutable_recommendations_ids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
  return &recommendations_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoMarkupHtmlInput::kUrlFieldNumber;
const int VideoMarkupHtmlInput::kContentFieldNumber;
const int VideoMarkupHtmlInput::kEncFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoMarkupHtmlInput::VideoMarkupHtmlInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
}
VideoMarkupHtmlInput::VideoMarkupHtmlInput(const VideoMarkupHtmlInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  enc_ = from.enc_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
}

void VideoMarkupHtmlInput::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_ = 0;
}

VideoMarkupHtmlInput::~VideoMarkupHtmlInput() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
  SharedDtor();
}

void VideoMarkupHtmlInput::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoMarkupHtmlInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoMarkupHtmlInput::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoMarkupHtmlInput& VideoMarkupHtmlInput::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoMarkupHtmlInput* VideoMarkupHtmlInput::New(::google::protobuf::Arena* arena) const {
  VideoMarkupHtmlInput* n = new VideoMarkupHtmlInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoMarkupHtmlInput::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
  }
  enc_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoMarkupHtmlInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.Encoding enc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Encoding_IsValid(value)) {
            set_enc(static_cast< ::ru::mail::go::webbase::blobs::Encoding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
  return false;
#undef DO_
}

void VideoMarkupHtmlInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required bytes content = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  // required .ru.mail.go.webbase.blobs.Encoding enc = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->enc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
}

::google::protobuf::uint8* VideoMarkupHtmlInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required bytes content = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  // required .ru.mail.go.webbase.blobs.Encoding enc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->enc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
  return target;
}

size_t VideoMarkupHtmlInput::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_content()) {
    // required bytes content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_enc()) {
    // required .ru.mail.go.webbase.blobs.Encoding enc = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enc());
  }

  return total_size;
}
size_t VideoMarkupHtmlInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required bytes content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required .ru.mail.go.webbase.blobs.Encoding enc = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoMarkupHtmlInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoMarkupHtmlInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoMarkupHtmlInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
    MergeFrom(*source);
  }
}

void VideoMarkupHtmlInput::MergeFrom(const VideoMarkupHtmlInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      enc_ = from.enc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoMarkupHtmlInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoMarkupHtmlInput::CopyFrom(const VideoMarkupHtmlInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoMarkupHtmlInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void VideoMarkupHtmlInput::Swap(VideoMarkupHtmlInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoMarkupHtmlInput::InternalSwap(VideoMarkupHtmlInput* other) {
  using std::swap;
  url_.Swap(&other->url_);
  content_.Swap(&other->content_);
  swap(enc_, other->enc_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoMarkupHtmlInput::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoMarkupHtmlInput

// required string url = 1;
bool VideoMarkupHtmlInput::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoMarkupHtmlInput::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoMarkupHtmlInput::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoMarkupHtmlInput::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& VideoMarkupHtmlInput::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url)
  return url_.GetNoArena();
}
void VideoMarkupHtmlInput::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url)
}
#if LANG_CXX11
void VideoMarkupHtmlInput::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url)
}
#endif
void VideoMarkupHtmlInput::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url)
}
void VideoMarkupHtmlInput::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url)
}
::std::string* VideoMarkupHtmlInput::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupHtmlInput::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupHtmlInput::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url)
}

// required bytes content = 2;
bool VideoMarkupHtmlInput::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VideoMarkupHtmlInput::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void VideoMarkupHtmlInput::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void VideoMarkupHtmlInput::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& VideoMarkupHtmlInput::content() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.content)
  return content_.GetNoArena();
}
void VideoMarkupHtmlInput::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.content)
}
#if LANG_CXX11
void VideoMarkupHtmlInput::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.content)
}
#endif
void VideoMarkupHtmlInput::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.content)
}
void VideoMarkupHtmlInput::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.content)
}
::std::string* VideoMarkupHtmlInput::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupHtmlInput::release_content() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupHtmlInput::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.content)
}

// required .ru.mail.go.webbase.blobs.Encoding enc = 3;
bool VideoMarkupHtmlInput::has_enc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VideoMarkupHtmlInput::set_has_enc() {
  _has_bits_[0] |= 0x00000004u;
}
void VideoMarkupHtmlInput::clear_has_enc() {
  _has_bits_[0] &= ~0x00000004u;
}
void VideoMarkupHtmlInput::clear_enc() {
  enc_ = 0;
  clear_has_enc();
}
::ru::mail::go::webbase::blobs::Encoding VideoMarkupHtmlInput::enc() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.enc)
  return static_cast< ::ru::mail::go::webbase::blobs::Encoding >(enc_);
}
void VideoMarkupHtmlInput::set_enc(::ru::mail::go::webbase::blobs::Encoding value) {
  assert(::ru::mail::go::webbase::blobs::Encoding_IsValid(value));
  set_has_enc();
  enc_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.enc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoMarkupDescription::kVideoMarkupDetectedFieldNumber;
const int VideoMarkupDescription::kOpenGraphFieldNumber;
const int VideoMarkupDescription::kSchemaOrgFieldNumber;
const int VideoMarkupDescription::kTwitterCardFieldNumber;
const int VideoMarkupDescription::kHtml5VideoFieldNumber;
const int VideoMarkupDescription::kNumberOfUnparsedOpenGraphVideosFieldNumber;
const int VideoMarkupDescription::kNumberOfUnparsedSchemaOrgVideosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoMarkupDescription::VideoMarkupDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VideoMarkupDescription)
}
VideoMarkupDescription::VideoMarkupDescription(const VideoMarkupDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      schema_org_(from.schema_org_),
      html5_video_(from.html5_video_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_open_graph()) {
    open_graph_ = new ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph(*from.open_graph_);
  } else {
    open_graph_ = NULL;
  }
  if (from.has_twitter_card()) {
    twitter_card_ = new ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard(*from.twitter_card_);
  } else {
    twitter_card_ = NULL;
  }
  ::memcpy(&video_markup_detected_, &from.video_markup_detected_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_unparsed_schema_org_videos_) -
    reinterpret_cast<char*>(&video_markup_detected_)) + sizeof(number_of_unparsed_schema_org_videos_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VideoMarkupDescription)
}

void VideoMarkupDescription::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&open_graph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_unparsed_schema_org_videos_) -
      reinterpret_cast<char*>(&open_graph_)) + sizeof(number_of_unparsed_schema_org_videos_));
}

VideoMarkupDescription::~VideoMarkupDescription() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VideoMarkupDescription)
  SharedDtor();
}

void VideoMarkupDescription::SharedDtor() {
  if (this != internal_default_instance()) delete open_graph_;
  if (this != internal_default_instance()) delete twitter_card_;
}

void VideoMarkupDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoMarkupDescription::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoMarkupDescription& VideoMarkupDescription::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoMarkupDescription* VideoMarkupDescription::New(::google::protobuf::Arena* arena) const {
  VideoMarkupDescription* n = new VideoMarkupDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoMarkupDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VideoMarkupDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schema_org_.Clear();
  html5_video_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(open_graph_ != NULL);
      open_graph_->::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(twitter_card_ != NULL);
      twitter_card_->::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard::Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&video_markup_detected_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_unparsed_schema_org_videos_) -
        reinterpret_cast<char*>(&video_markup_detected_)) + sizeof(number_of_unparsed_schema_org_videos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoMarkupDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VideoMarkupDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool video_markup_detected = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_video_markup_detected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &video_markup_detected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VideoMarkupOpenGraph open_graph = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg schema_org = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_schema_org()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VideoMarkupTwitterCard twitter_card = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_twitter_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.VideoMarkupHtml5Video html5_video = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_html5_video()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 number_of_unparsed_open_graph_videos = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_number_of_unparsed_open_graph_videos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_unparsed_open_graph_videos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 number_of_unparsed_schema_org_videos = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_number_of_unparsed_schema_org_videos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_unparsed_schema_org_videos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VideoMarkupDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VideoMarkupDescription)
  return false;
#undef DO_
}

void VideoMarkupDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VideoMarkupDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool video_markup_detected = 1 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->video_markup_detected(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VideoMarkupOpenGraph open_graph = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->open_graph_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg schema_org = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->schema_org_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->schema_org(static_cast<int>(i)), output);
  }

  // optional .ru.mail.go.webbase.blobs.VideoMarkupTwitterCard twitter_card = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->twitter_card_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.VideoMarkupHtml5Video html5_video = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->html5_video_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->html5_video(static_cast<int>(i)), output);
  }

  // required uint32 number_of_unparsed_open_graph_videos = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->number_of_unparsed_open_graph_videos(), output);
  }

  // required uint32 number_of_unparsed_schema_org_videos = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->number_of_unparsed_schema_org_videos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VideoMarkupDescription)
}

::google::protobuf::uint8* VideoMarkupDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VideoMarkupDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool video_markup_detected = 1 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->video_markup_detected(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VideoMarkupOpenGraph open_graph = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->open_graph_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg schema_org = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->schema_org_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->schema_org(static_cast<int>(i)), deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.VideoMarkupTwitterCard twitter_card = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->twitter_card_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.VideoMarkupHtml5Video html5_video = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->html5_video_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->html5_video(static_cast<int>(i)), deterministic, target);
  }

  // required uint32 number_of_unparsed_open_graph_videos = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->number_of_unparsed_open_graph_videos(), target);
  }

  // required uint32 number_of_unparsed_schema_org_videos = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->number_of_unparsed_schema_org_videos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VideoMarkupDescription)
  return target;
}

size_t VideoMarkupDescription::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.VideoMarkupDescription)
  size_t total_size = 0;

  if (has_video_markup_detected()) {
    // required bool video_markup_detected = 1 [default = false];
    total_size += 1 + 1;
  }

  if (has_number_of_unparsed_open_graph_videos()) {
    // required uint32 number_of_unparsed_open_graph_videos = 6 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_unparsed_open_graph_videos());
  }

  if (has_number_of_unparsed_schema_org_videos()) {
    // required uint32 number_of_unparsed_schema_org_videos = 7 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_unparsed_schema_org_videos());
  }

  return total_size;
}
size_t VideoMarkupDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VideoMarkupDescription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required bool video_markup_detected = 1 [default = false];
    total_size += 1 + 1;

    // required uint32 number_of_unparsed_open_graph_videos = 6 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_unparsed_open_graph_videos());

    // required uint32 number_of_unparsed_schema_org_videos = 7 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_unparsed_schema_org_videos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg schema_org = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->schema_org_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schema_org(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.blobs.VideoMarkupHtml5Video html5_video = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->html5_video_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->html5_video(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .ru.mail.go.webbase.blobs.VideoMarkupOpenGraph open_graph = 2;
    if (has_open_graph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->open_graph_);
    }

    // optional .ru.mail.go.webbase.blobs.VideoMarkupTwitterCard twitter_card = 4;
    if (has_twitter_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->twitter_card_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoMarkupDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VideoMarkupDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoMarkupDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoMarkupDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VideoMarkupDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VideoMarkupDescription)
    MergeFrom(*source);
  }
}

void VideoMarkupDescription::MergeFrom(const VideoMarkupDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VideoMarkupDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  schema_org_.MergeFrom(from.schema_org_);
  html5_video_.MergeFrom(from.html5_video_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_open_graph()->::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph::MergeFrom(from.open_graph());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_twitter_card()->::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard::MergeFrom(from.twitter_card());
    }
    if (cached_has_bits & 0x00000004u) {
      video_markup_detected_ = from.video_markup_detected_;
    }
    if (cached_has_bits & 0x00000008u) {
      number_of_unparsed_open_graph_videos_ = from.number_of_unparsed_open_graph_videos_;
    }
    if (cached_has_bits & 0x00000010u) {
      number_of_unparsed_schema_org_videos_ = from.number_of_unparsed_schema_org_videos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoMarkupDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VideoMarkupDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoMarkupDescription::CopyFrom(const VideoMarkupDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VideoMarkupDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoMarkupDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->schema_org())) return false;
  if (has_open_graph()) {
    if (!this->open_graph_->IsInitialized()) return false;
  }
  if (has_twitter_card()) {
    if (!this->twitter_card_->IsInitialized()) return false;
  }
  return true;
}

void VideoMarkupDescription::Swap(VideoMarkupDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoMarkupDescription::InternalSwap(VideoMarkupDescription* other) {
  using std::swap;
  schema_org_.InternalSwap(&other->schema_org_);
  html5_video_.InternalSwap(&other->html5_video_);
  swap(open_graph_, other->open_graph_);
  swap(twitter_card_, other->twitter_card_);
  swap(video_markup_detected_, other->video_markup_detected_);
  swap(number_of_unparsed_open_graph_videos_, other->number_of_unparsed_open_graph_videos_);
  swap(number_of_unparsed_schema_org_videos_, other->number_of_unparsed_schema_org_videos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoMarkupDescription::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoMarkupDescription

// required bool video_markup_detected = 1 [default = false];
bool VideoMarkupDescription::has_video_markup_detected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VideoMarkupDescription::set_has_video_markup_detected() {
  _has_bits_[0] |= 0x00000004u;
}
void VideoMarkupDescription::clear_has_video_markup_detected() {
  _has_bits_[0] &= ~0x00000004u;
}
void VideoMarkupDescription::clear_video_markup_detected() {
  video_markup_detected_ = false;
  clear_has_video_markup_detected();
}
bool VideoMarkupDescription::video_markup_detected() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupDescription.video_markup_detected)
  return video_markup_detected_;
}
void VideoMarkupDescription::set_video_markup_detected(bool value) {
  set_has_video_markup_detected();
  video_markup_detected_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupDescription.video_markup_detected)
}

// optional .ru.mail.go.webbase.blobs.VideoMarkupOpenGraph open_graph = 2;
bool VideoMarkupDescription::has_open_graph() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoMarkupDescription::set_has_open_graph() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoMarkupDescription::clear_has_open_graph() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoMarkupDescription::clear_open_graph() {
  if (open_graph_ != NULL) open_graph_->::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph::Clear();
  clear_has_open_graph();
}
const ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph& VideoMarkupDescription::open_graph() const {
  const ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph* p = open_graph_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupDescription.open_graph)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph*>(
      &::ru::mail::go::webbase::blobs::_VideoMarkupOpenGraph_default_instance_);
}
::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph* VideoMarkupDescription::mutable_open_graph() {
  set_has_open_graph();
  if (open_graph_ == NULL) {
    open_graph_ = new ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupDescription.open_graph)
  return open_graph_;
}
::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph* VideoMarkupDescription::release_open_graph() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupDescription.open_graph)
  clear_has_open_graph();
  ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph* temp = open_graph_;
  open_graph_ = NULL;
  return temp;
}
void VideoMarkupDescription::set_allocated_open_graph(::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph* open_graph) {
  delete open_graph_;
  open_graph_ = open_graph;
  if (open_graph) {
    set_has_open_graph();
  } else {
    clear_has_open_graph();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupDescription.open_graph)
}

// repeated .ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg schema_org = 3;
int VideoMarkupDescription::schema_org_size() const {
  return schema_org_.size();
}
void VideoMarkupDescription::clear_schema_org() {
  schema_org_.Clear();
}
const ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg& VideoMarkupDescription::schema_org(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupDescription.schema_org)
  return schema_org_.Get(index);
}
::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg* VideoMarkupDescription::mutable_schema_org(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupDescription.schema_org)
  return schema_org_.Mutable(index);
}
::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg* VideoMarkupDescription::add_schema_org() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoMarkupDescription.schema_org)
  return schema_org_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg >*
VideoMarkupDescription::mutable_schema_org() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoMarkupDescription.schema_org)
  return &schema_org_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg >&
VideoMarkupDescription::schema_org() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoMarkupDescription.schema_org)
  return schema_org_;
}

// optional .ru.mail.go.webbase.blobs.VideoMarkupTwitterCard twitter_card = 4;
bool VideoMarkupDescription::has_twitter_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VideoMarkupDescription::set_has_twitter_card() {
  _has_bits_[0] |= 0x00000002u;
}
void VideoMarkupDescription::clear_has_twitter_card() {
  _has_bits_[0] &= ~0x00000002u;
}
void VideoMarkupDescription::clear_twitter_card() {
  if (twitter_card_ != NULL) twitter_card_->::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard::Clear();
  clear_has_twitter_card();
}
const ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard& VideoMarkupDescription::twitter_card() const {
  const ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard* p = twitter_card_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupDescription.twitter_card)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard*>(
      &::ru::mail::go::webbase::blobs::_VideoMarkupTwitterCard_default_instance_);
}
::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard* VideoMarkupDescription::mutable_twitter_card() {
  set_has_twitter_card();
  if (twitter_card_ == NULL) {
    twitter_card_ = new ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupDescription.twitter_card)
  return twitter_card_;
}
::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard* VideoMarkupDescription::release_twitter_card() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupDescription.twitter_card)
  clear_has_twitter_card();
  ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard* temp = twitter_card_;
  twitter_card_ = NULL;
  return temp;
}
void VideoMarkupDescription::set_allocated_twitter_card(::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard* twitter_card) {
  delete twitter_card_;
  twitter_card_ = twitter_card;
  if (twitter_card) {
    set_has_twitter_card();
  } else {
    clear_has_twitter_card();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupDescription.twitter_card)
}

// repeated .ru.mail.go.webbase.blobs.VideoMarkupHtml5Video html5_video = 5;
int VideoMarkupDescription::html5_video_size() const {
  return html5_video_.size();
}
void VideoMarkupDescription::clear_html5_video() {
  html5_video_.Clear();
}
const ::ru::mail::go::webbase::blobs::VideoMarkupHtml5Video& VideoMarkupDescription::html5_video(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupDescription.html5_video)
  return html5_video_.Get(index);
}
::ru::mail::go::webbase::blobs::VideoMarkupHtml5Video* VideoMarkupDescription::mutable_html5_video(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupDescription.html5_video)
  return html5_video_.Mutable(index);
}
::ru::mail::go::webbase::blobs::VideoMarkupHtml5Video* VideoMarkupDescription::add_html5_video() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoMarkupDescription.html5_video)
  return html5_video_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoMarkupHtml5Video >*
VideoMarkupDescription::mutable_html5_video() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoMarkupDescription.html5_video)
  return &html5_video_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoMarkupHtml5Video >&
VideoMarkupDescription::html5_video() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoMarkupDescription.html5_video)
  return html5_video_;
}

// required uint32 number_of_unparsed_open_graph_videos = 6 [default = 0];
bool VideoMarkupDescription::has_number_of_unparsed_open_graph_videos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VideoMarkupDescription::set_has_number_of_unparsed_open_graph_videos() {
  _has_bits_[0] |= 0x00000008u;
}
void VideoMarkupDescription::clear_has_number_of_unparsed_open_graph_videos() {
  _has_bits_[0] &= ~0x00000008u;
}
void VideoMarkupDescription::clear_number_of_unparsed_open_graph_videos() {
  number_of_unparsed_open_graph_videos_ = 0u;
  clear_has_number_of_unparsed_open_graph_videos();
}
::google::protobuf::uint32 VideoMarkupDescription::number_of_unparsed_open_graph_videos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupDescription.number_of_unparsed_open_graph_videos)
  return number_of_unparsed_open_graph_videos_;
}
void VideoMarkupDescription::set_number_of_unparsed_open_graph_videos(::google::protobuf::uint32 value) {
  set_has_number_of_unparsed_open_graph_videos();
  number_of_unparsed_open_graph_videos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupDescription.number_of_unparsed_open_graph_videos)
}

// required uint32 number_of_unparsed_schema_org_videos = 7 [default = 0];
bool VideoMarkupDescription::has_number_of_unparsed_schema_org_videos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VideoMarkupDescription::set_has_number_of_unparsed_schema_org_videos() {
  _has_bits_[0] |= 0x00000010u;
}
void VideoMarkupDescription::clear_has_number_of_unparsed_schema_org_videos() {
  _has_bits_[0] &= ~0x00000010u;
}
void VideoMarkupDescription::clear_number_of_unparsed_schema_org_videos() {
  number_of_unparsed_schema_org_videos_ = 0u;
  clear_has_number_of_unparsed_schema_org_videos();
}
::google::protobuf::uint32 VideoMarkupDescription::number_of_unparsed_schema_org_videos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupDescription.number_of_unparsed_schema_org_videos)
  return number_of_unparsed_schema_org_videos_;
}
void VideoMarkupDescription::set_number_of_unparsed_schema_org_videos(::google::protobuf::uint32 value) {
  set_has_number_of_unparsed_schema_org_videos();
  number_of_unparsed_schema_org_videos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupDescription.number_of_unparsed_schema_org_videos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoMarkupOpenGraph::kTitleFieldNumber;
const int VideoMarkupOpenGraph::kPageUrlFieldNumber;
const int VideoMarkupOpenGraph::kPreviewFieldNumber;
const int VideoMarkupOpenGraph::kVideoPlayerUrlFieldNumber;
const int VideoMarkupOpenGraph::kVideoTypeFieldNumber;
const int VideoMarkupOpenGraph::kWidthFieldNumber;
const int VideoMarkupOpenGraph::kHeightFieldNumber;
const int VideoMarkupOpenGraph::kDurationFieldNumber;
const int VideoMarkupOpenGraph::kDescriptionFieldNumber;
const int VideoMarkupOpenGraph::kAdultFieldNumber;
const int VideoMarkupOpenGraph::kHdFieldNumber;
const int VideoMarkupOpenGraph::kFullHdFieldNumber;
const int VideoMarkupOpenGraph::kSeasonFieldNumber;
const int VideoMarkupOpenGraph::kEpisodeFieldNumber;
const int VideoMarkupOpenGraph::kAllowEmbedFieldNumber;
const int VideoMarkupOpenGraph::kUploadDateIso8601FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoMarkupOpenGraph::VideoMarkupOpenGraph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
}
VideoMarkupOpenGraph::VideoMarkupOpenGraph(const VideoMarkupOpenGraph& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  page_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_page_url()) {
    page_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_url_);
  }
  preview_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preview()) {
    preview_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_);
  }
  video_player_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_player_url()) {
    video_player_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_player_url_);
  }
  video_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_type()) {
    video_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_type_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  upload_date_iso8601_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_upload_date_iso8601()) {
    upload_date_iso8601_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_date_iso8601_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&episode_) -
    reinterpret_cast<char*>(&width_)) + sizeof(episode_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
}

void VideoMarkupOpenGraph::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_player_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_date_iso8601_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&episode_) -
      reinterpret_cast<char*>(&width_)) + sizeof(episode_));
}

VideoMarkupOpenGraph::~VideoMarkupOpenGraph() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
  SharedDtor();
}

void VideoMarkupOpenGraph::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_player_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_date_iso8601_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoMarkupOpenGraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoMarkupOpenGraph::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoMarkupOpenGraph& VideoMarkupOpenGraph::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoMarkupOpenGraph* VideoMarkupOpenGraph::New(::google::protobuf::Arena* arena) const {
  VideoMarkupOpenGraph* n = new VideoMarkupOpenGraph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoMarkupOpenGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!page_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*page_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!preview_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*preview_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!video_player_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*video_player_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!video_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*video_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!upload_date_iso8601_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*upload_date_iso8601_.UnsafeRawStringPointer())->clear();
    }
  }
  width_ = 0;
  if (cached_has_bits & 65280u) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&episode_) -
        reinterpret_cast<char*>(&height_)) + sizeof(episode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoMarkupOpenGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string page_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->page_url().data(), static_cast<int>(this->page_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string preview = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preview().data(), static_cast<int>(this->preview().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string video_player_url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_player_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_player_url().data(), static_cast<int>(this->video_player_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string video_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_type().data(), static_cast<int>(this->video_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 duration = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool adult = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_adult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hd = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_hd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool full_hd = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_full_hd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &full_hd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 season = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_season();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 episode = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_episode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &episode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_embed = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_allow_embed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_embed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string upload_date_iso8601 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upload_date_iso8601()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->upload_date_iso8601().data(), static_cast<int>(this->upload_date_iso8601().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
  return false;
#undef DO_
}

void VideoMarkupOpenGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // required string page_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_url().data(), static_cast<int>(this->page_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_url(), output);
  }

  // required string preview = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview().data(), static_cast<int>(this->preview().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->preview(), output);
  }

  // optional string video_player_url = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_player_url().data(), static_cast<int>(this->video_player_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->video_player_url(), output);
  }

  // optional string video_type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_type().data(), static_cast<int>(this->video_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->video_type(), output);
  }

  // optional int32 width = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->width(), output);
  }

  // optional int32 height = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->height(), output);
  }

  // optional int32 duration = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->duration(), output);
  }

  // optional string description = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->description(), output);
  }

  // optional bool adult = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->adult(), output);
  }

  // optional bool hd = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->hd(), output);
  }

  // optional bool full_hd = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->full_hd(), output);
  }

  // optional int32 season = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->season(), output);
  }

  // optional int32 episode = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->episode(), output);
  }

  // optional bool allow_embed = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->allow_embed(), output);
  }

  // optional string upload_date_iso8601 = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upload_date_iso8601().data(), static_cast<int>(this->upload_date_iso8601().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->upload_date_iso8601(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
}

::google::protobuf::uint8* VideoMarkupOpenGraph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // required string page_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_url().data(), static_cast<int>(this->page_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_url(), target);
  }

  // required string preview = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview().data(), static_cast<int>(this->preview().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->preview(), target);
  }

  // optional string video_player_url = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_player_url().data(), static_cast<int>(this->video_player_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->video_player_url(), target);
  }

  // optional string video_type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_type().data(), static_cast<int>(this->video_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->video_type(), target);
  }

  // optional int32 width = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->width(), target);
  }

  // optional int32 height = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->height(), target);
  }

  // optional int32 duration = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->duration(), target);
  }

  // optional string description = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->description(), target);
  }

  // optional bool adult = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->adult(), target);
  }

  // optional bool hd = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->hd(), target);
  }

  // optional bool full_hd = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->full_hd(), target);
  }

  // optional int32 season = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->season(), target);
  }

  // optional int32 episode = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->episode(), target);
  }

  // optional bool allow_embed = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->allow_embed(), target);
  }

  // optional string upload_date_iso8601 = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upload_date_iso8601().data(), static_cast<int>(this->upload_date_iso8601().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->upload_date_iso8601(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
  return target;
}

size_t VideoMarkupOpenGraph::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
  size_t total_size = 0;

  if (has_title()) {
    // required string title = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  if (has_page_url()) {
    // required string page_url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_url());
  }

  if (has_preview()) {
    // required string preview = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->preview());
  }

  return total_size;
}
size_t VideoMarkupOpenGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string title = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());

    // required string page_url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_url());

    // required string preview = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->preview());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 248u) {
    // optional string video_player_url = 4;
    if (has_video_player_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_player_url());
    }

    // optional string video_type = 5;
    if (has_video_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_type());
    }

    // optional string description = 9;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string upload_date_iso8601 = 16;
    if (has_upload_date_iso8601()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upload_date_iso8601());
    }

    // optional int32 width = 6;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 height = 7;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 duration = 8;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional bool adult = 10;
    if (has_adult()) {
      total_size += 1 + 1;
    }

    // optional bool hd = 11;
    if (has_hd()) {
      total_size += 1 + 1;
    }

    // optional bool full_hd = 12;
    if (has_full_hd()) {
      total_size += 1 + 1;
    }

    // optional bool allow_embed = 15;
    if (has_allow_embed()) {
      total_size += 1 + 1;
    }

    // optional int32 season = 13;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season());
    }

    // optional int32 episode = 14;
    if (has_episode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->episode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoMarkupOpenGraph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoMarkupOpenGraph* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoMarkupOpenGraph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
    MergeFrom(*source);
  }
}

void VideoMarkupOpenGraph::MergeFrom(const VideoMarkupOpenGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_page_url();
      page_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_preview();
      preview_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_video_player_url();
      video_player_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_player_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_video_type();
      video_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_type_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_upload_date_iso8601();
      upload_date_iso8601_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_date_iso8601_);
    }
    if (cached_has_bits & 0x00000080u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000200u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000400u) {
      adult_ = from.adult_;
    }
    if (cached_has_bits & 0x00000800u) {
      hd_ = from.hd_;
    }
    if (cached_has_bits & 0x00001000u) {
      full_hd_ = from.full_hd_;
    }
    if (cached_has_bits & 0x00002000u) {
      allow_embed_ = from.allow_embed_;
    }
    if (cached_has_bits & 0x00004000u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00008000u) {
      episode_ = from.episode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoMarkupOpenGraph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoMarkupOpenGraph::CopyFrom(const VideoMarkupOpenGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoMarkupOpenGraph::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void VideoMarkupOpenGraph::Swap(VideoMarkupOpenGraph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoMarkupOpenGraph::InternalSwap(VideoMarkupOpenGraph* other) {
  using std::swap;
  title_.Swap(&other->title_);
  page_url_.Swap(&other->page_url_);
  preview_.Swap(&other->preview_);
  video_player_url_.Swap(&other->video_player_url_);
  video_type_.Swap(&other->video_type_);
  description_.Swap(&other->description_);
  upload_date_iso8601_.Swap(&other->upload_date_iso8601_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(duration_, other->duration_);
  swap(adult_, other->adult_);
  swap(hd_, other->hd_);
  swap(full_hd_, other->full_hd_);
  swap(allow_embed_, other->allow_embed_);
  swap(season_, other->season_);
  swap(episode_, other->episode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoMarkupOpenGraph::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoMarkupOpenGraph

// required string title = 1;
bool VideoMarkupOpenGraph::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoMarkupOpenGraph::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoMarkupOpenGraph::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoMarkupOpenGraph::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& VideoMarkupOpenGraph::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title)
  return title_.GetNoArena();
}
void VideoMarkupOpenGraph::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title)
}
#if LANG_CXX11
void VideoMarkupOpenGraph::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title)
}
#endif
void VideoMarkupOpenGraph::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title)
}
void VideoMarkupOpenGraph::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title)
}
::std::string* VideoMarkupOpenGraph::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupOpenGraph::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupOpenGraph::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title)
}

// required string page_url = 2;
bool VideoMarkupOpenGraph::has_page_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VideoMarkupOpenGraph::set_has_page_url() {
  _has_bits_[0] |= 0x00000002u;
}
void VideoMarkupOpenGraph::clear_has_page_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void VideoMarkupOpenGraph::clear_page_url() {
  page_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_page_url();
}
const ::std::string& VideoMarkupOpenGraph::page_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url)
  return page_url_.GetNoArena();
}
void VideoMarkupOpenGraph::set_page_url(const ::std::string& value) {
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url)
}
#if LANG_CXX11
void VideoMarkupOpenGraph::set_page_url(::std::string&& value) {
  set_has_page_url();
  page_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url)
}
#endif
void VideoMarkupOpenGraph::set_page_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url)
}
void VideoMarkupOpenGraph::set_page_url(const char* value, size_t size) {
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url)
}
::std::string* VideoMarkupOpenGraph::mutable_page_url() {
  set_has_page_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url)
  return page_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupOpenGraph::release_page_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url)
  clear_has_page_url();
  return page_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupOpenGraph::set_allocated_page_url(::std::string* page_url) {
  if (page_url != NULL) {
    set_has_page_url();
  } else {
    clear_has_page_url();
  }
  page_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url)
}

// required string preview = 3;
bool VideoMarkupOpenGraph::has_preview() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VideoMarkupOpenGraph::set_has_preview() {
  _has_bits_[0] |= 0x00000004u;
}
void VideoMarkupOpenGraph::clear_has_preview() {
  _has_bits_[0] &= ~0x00000004u;
}
void VideoMarkupOpenGraph::clear_preview() {
  preview_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preview();
}
const ::std::string& VideoMarkupOpenGraph::preview() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview)
  return preview_.GetNoArena();
}
void VideoMarkupOpenGraph::set_preview(const ::std::string& value) {
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview)
}
#if LANG_CXX11
void VideoMarkupOpenGraph::set_preview(::std::string&& value) {
  set_has_preview();
  preview_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview)
}
#endif
void VideoMarkupOpenGraph::set_preview(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview)
}
void VideoMarkupOpenGraph::set_preview(const char* value, size_t size) {
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview)
}
::std::string* VideoMarkupOpenGraph::mutable_preview() {
  set_has_preview();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview)
  return preview_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupOpenGraph::release_preview() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview)
  clear_has_preview();
  return preview_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupOpenGraph::set_allocated_preview(::std::string* preview) {
  if (preview != NULL) {
    set_has_preview();
  } else {
    clear_has_preview();
  }
  preview_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preview);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview)
}

// optional string video_player_url = 4;
bool VideoMarkupOpenGraph::has_video_player_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VideoMarkupOpenGraph::set_has_video_player_url() {
  _has_bits_[0] |= 0x00000008u;
}
void VideoMarkupOpenGraph::clear_has_video_player_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void VideoMarkupOpenGraph::clear_video_player_url() {
  video_player_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_player_url();
}
const ::std::string& VideoMarkupOpenGraph::video_player_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url)
  return video_player_url_.GetNoArena();
}
void VideoMarkupOpenGraph::set_video_player_url(const ::std::string& value) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url)
}
#if LANG_CXX11
void VideoMarkupOpenGraph::set_video_player_url(::std::string&& value) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url)
}
#endif
void VideoMarkupOpenGraph::set_video_player_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url)
}
void VideoMarkupOpenGraph::set_video_player_url(const char* value, size_t size) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url)
}
::std::string* VideoMarkupOpenGraph::mutable_video_player_url() {
  set_has_video_player_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url)
  return video_player_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupOpenGraph::release_video_player_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url)
  clear_has_video_player_url();
  return video_player_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupOpenGraph::set_allocated_video_player_url(::std::string* video_player_url) {
  if (video_player_url != NULL) {
    set_has_video_player_url();
  } else {
    clear_has_video_player_url();
  }
  video_player_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_player_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url)
}

// optional string video_type = 5;
bool VideoMarkupOpenGraph::has_video_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VideoMarkupOpenGraph::set_has_video_type() {
  _has_bits_[0] |= 0x00000010u;
}
void VideoMarkupOpenGraph::clear_has_video_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void VideoMarkupOpenGraph::clear_video_type() {
  video_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_type();
}
const ::std::string& VideoMarkupOpenGraph::video_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type)
  return video_type_.GetNoArena();
}
void VideoMarkupOpenGraph::set_video_type(const ::std::string& value) {
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type)
}
#if LANG_CXX11
void VideoMarkupOpenGraph::set_video_type(::std::string&& value) {
  set_has_video_type();
  video_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type)
}
#endif
void VideoMarkupOpenGraph::set_video_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type)
}
void VideoMarkupOpenGraph::set_video_type(const char* value, size_t size) {
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type)
}
::std::string* VideoMarkupOpenGraph::mutable_video_type() {
  set_has_video_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type)
  return video_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupOpenGraph::release_video_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type)
  clear_has_video_type();
  return video_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupOpenGraph::set_allocated_video_type(::std::string* video_type) {
  if (video_type != NULL) {
    set_has_video_type();
  } else {
    clear_has_video_type();
  }
  video_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type)
}

// optional int32 width = 6;
bool VideoMarkupOpenGraph::has_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VideoMarkupOpenGraph::set_has_width() {
  _has_bits_[0] |= 0x00000080u;
}
void VideoMarkupOpenGraph::clear_has_width() {
  _has_bits_[0] &= ~0x00000080u;
}
void VideoMarkupOpenGraph::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 VideoMarkupOpenGraph::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.width)
  return width_;
}
void VideoMarkupOpenGraph::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.width)
}

// optional int32 height = 7;
bool VideoMarkupOpenGraph::has_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VideoMarkupOpenGraph::set_has_height() {
  _has_bits_[0] |= 0x00000100u;
}
void VideoMarkupOpenGraph::clear_has_height() {
  _has_bits_[0] &= ~0x00000100u;
}
void VideoMarkupOpenGraph::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 VideoMarkupOpenGraph::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.height)
  return height_;
}
void VideoMarkupOpenGraph::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.height)
}

// optional int32 duration = 8;
bool VideoMarkupOpenGraph::has_duration() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VideoMarkupOpenGraph::set_has_duration() {
  _has_bits_[0] |= 0x00000200u;
}
void VideoMarkupOpenGraph::clear_has_duration() {
  _has_bits_[0] &= ~0x00000200u;
}
void VideoMarkupOpenGraph::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
::google::protobuf::int32 VideoMarkupOpenGraph::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.duration)
  return duration_;
}
void VideoMarkupOpenGraph::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.duration)
}

// optional string description = 9;
bool VideoMarkupOpenGraph::has_description() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VideoMarkupOpenGraph::set_has_description() {
  _has_bits_[0] |= 0x00000020u;
}
void VideoMarkupOpenGraph::clear_has_description() {
  _has_bits_[0] &= ~0x00000020u;
}
void VideoMarkupOpenGraph::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& VideoMarkupOpenGraph::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description)
  return description_.GetNoArena();
}
void VideoMarkupOpenGraph::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description)
}
#if LANG_CXX11
void VideoMarkupOpenGraph::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description)
}
#endif
void VideoMarkupOpenGraph::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description)
}
void VideoMarkupOpenGraph::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description)
}
::std::string* VideoMarkupOpenGraph::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupOpenGraph::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupOpenGraph::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description)
}

// optional bool adult = 10;
bool VideoMarkupOpenGraph::has_adult() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VideoMarkupOpenGraph::set_has_adult() {
  _has_bits_[0] |= 0x00000400u;
}
void VideoMarkupOpenGraph::clear_has_adult() {
  _has_bits_[0] &= ~0x00000400u;
}
void VideoMarkupOpenGraph::clear_adult() {
  adult_ = false;
  clear_has_adult();
}
bool VideoMarkupOpenGraph::adult() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.adult)
  return adult_;
}
void VideoMarkupOpenGraph::set_adult(bool value) {
  set_has_adult();
  adult_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.adult)
}

// optional bool hd = 11;
bool VideoMarkupOpenGraph::has_hd() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VideoMarkupOpenGraph::set_has_hd() {
  _has_bits_[0] |= 0x00000800u;
}
void VideoMarkupOpenGraph::clear_has_hd() {
  _has_bits_[0] &= ~0x00000800u;
}
void VideoMarkupOpenGraph::clear_hd() {
  hd_ = false;
  clear_has_hd();
}
bool VideoMarkupOpenGraph::hd() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.hd)
  return hd_;
}
void VideoMarkupOpenGraph::set_hd(bool value) {
  set_has_hd();
  hd_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.hd)
}

// optional bool full_hd = 12;
bool VideoMarkupOpenGraph::has_full_hd() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VideoMarkupOpenGraph::set_has_full_hd() {
  _has_bits_[0] |= 0x00001000u;
}
void VideoMarkupOpenGraph::clear_has_full_hd() {
  _has_bits_[0] &= ~0x00001000u;
}
void VideoMarkupOpenGraph::clear_full_hd() {
  full_hd_ = false;
  clear_has_full_hd();
}
bool VideoMarkupOpenGraph::full_hd() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.full_hd)
  return full_hd_;
}
void VideoMarkupOpenGraph::set_full_hd(bool value) {
  set_has_full_hd();
  full_hd_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.full_hd)
}

// optional int32 season = 13;
bool VideoMarkupOpenGraph::has_season() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VideoMarkupOpenGraph::set_has_season() {
  _has_bits_[0] |= 0x00004000u;
}
void VideoMarkupOpenGraph::clear_has_season() {
  _has_bits_[0] &= ~0x00004000u;
}
void VideoMarkupOpenGraph::clear_season() {
  season_ = 0;
  clear_has_season();
}
::google::protobuf::int32 VideoMarkupOpenGraph::season() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.season)
  return season_;
}
void VideoMarkupOpenGraph::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.season)
}

// optional int32 episode = 14;
bool VideoMarkupOpenGraph::has_episode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VideoMarkupOpenGraph::set_has_episode() {
  _has_bits_[0] |= 0x00008000u;
}
void VideoMarkupOpenGraph::clear_has_episode() {
  _has_bits_[0] &= ~0x00008000u;
}
void VideoMarkupOpenGraph::clear_episode() {
  episode_ = 0;
  clear_has_episode();
}
::google::protobuf::int32 VideoMarkupOpenGraph::episode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.episode)
  return episode_;
}
void VideoMarkupOpenGraph::set_episode(::google::protobuf::int32 value) {
  set_has_episode();
  episode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.episode)
}

// optional bool allow_embed = 15;
bool VideoMarkupOpenGraph::has_allow_embed() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VideoMarkupOpenGraph::set_has_allow_embed() {
  _has_bits_[0] |= 0x00002000u;
}
void VideoMarkupOpenGraph::clear_has_allow_embed() {
  _has_bits_[0] &= ~0x00002000u;
}
void VideoMarkupOpenGraph::clear_allow_embed() {
  allow_embed_ = false;
  clear_has_allow_embed();
}
bool VideoMarkupOpenGraph::allow_embed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.allow_embed)
  return allow_embed_;
}
void VideoMarkupOpenGraph::set_allow_embed(bool value) {
  set_has_allow_embed();
  allow_embed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.allow_embed)
}

// optional string upload_date_iso8601 = 16;
bool VideoMarkupOpenGraph::has_upload_date_iso8601() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VideoMarkupOpenGraph::set_has_upload_date_iso8601() {
  _has_bits_[0] |= 0x00000040u;
}
void VideoMarkupOpenGraph::clear_has_upload_date_iso8601() {
  _has_bits_[0] &= ~0x00000040u;
}
void VideoMarkupOpenGraph::clear_upload_date_iso8601() {
  upload_date_iso8601_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_upload_date_iso8601();
}
const ::std::string& VideoMarkupOpenGraph::upload_date_iso8601() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601)
  return upload_date_iso8601_.GetNoArena();
}
void VideoMarkupOpenGraph::set_upload_date_iso8601(const ::std::string& value) {
  set_has_upload_date_iso8601();
  upload_date_iso8601_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601)
}
#if LANG_CXX11
void VideoMarkupOpenGraph::set_upload_date_iso8601(::std::string&& value) {
  set_has_upload_date_iso8601();
  upload_date_iso8601_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601)
}
#endif
void VideoMarkupOpenGraph::set_upload_date_iso8601(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_upload_date_iso8601();
  upload_date_iso8601_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601)
}
void VideoMarkupOpenGraph::set_upload_date_iso8601(const char* value, size_t size) {
  set_has_upload_date_iso8601();
  upload_date_iso8601_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601)
}
::std::string* VideoMarkupOpenGraph::mutable_upload_date_iso8601() {
  set_has_upload_date_iso8601();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601)
  return upload_date_iso8601_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupOpenGraph::release_upload_date_iso8601() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601)
  clear_has_upload_date_iso8601();
  return upload_date_iso8601_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupOpenGraph::set_allocated_upload_date_iso8601(::std::string* upload_date_iso8601) {
  if (upload_date_iso8601 != NULL) {
    set_has_upload_date_iso8601();
  } else {
    clear_has_upload_date_iso8601();
  }
  upload_date_iso8601_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upload_date_iso8601);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoMarkupSchemaOrg::kDeclarationTypeFieldNumber;
const int VideoMarkupSchemaOrg::kTitleFieldNumber;
const int VideoMarkupSchemaOrg::kPageUrlFieldNumber;
const int VideoMarkupSchemaOrg::kPreviewFieldNumber;
const int VideoMarkupSchemaOrg::kVideoPlayerUrlFieldNumber;
const int VideoMarkupSchemaOrg::kVideoTypeFieldNumber;
const int VideoMarkupSchemaOrg::kWidthFieldNumber;
const int VideoMarkupSchemaOrg::kHeightFieldNumber;
const int VideoMarkupSchemaOrg::kDurationIso8601FieldNumber;
const int VideoMarkupSchemaOrg::kDescriptionFieldNumber;
const int VideoMarkupSchemaOrg::kIsFamilyFriendlyFieldNumber;
const int VideoMarkupSchemaOrg::kPaidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoMarkupSchemaOrg::VideoMarkupSchemaOrg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
}
VideoMarkupSchemaOrg::VideoMarkupSchemaOrg(const VideoMarkupSchemaOrg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  page_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_page_url()) {
    page_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_url_);
  }
  preview_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preview()) {
    preview_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_);
  }
  video_player_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_player_url()) {
    video_player_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_player_url_);
  }
  video_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_type()) {
    video_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_type_);
  }
  duration_iso8601_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_duration_iso8601()) {
    duration_iso8601_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.duration_iso8601_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&declaration_type_) -
    reinterpret_cast<char*>(&width_)) + sizeof(declaration_type_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
}

void VideoMarkupSchemaOrg::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_player_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_iso8601_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&paid_) -
      reinterpret_cast<char*>(&width_)) + sizeof(paid_));
  declaration_type_ = 1;
}

VideoMarkupSchemaOrg::~VideoMarkupSchemaOrg() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
  SharedDtor();
}

void VideoMarkupSchemaOrg::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_player_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_iso8601_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoMarkupSchemaOrg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoMarkupSchemaOrg::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoMarkupSchemaOrg& VideoMarkupSchemaOrg::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoMarkupSchemaOrg* VideoMarkupSchemaOrg::New(::google::protobuf::Arena* arena) const {
  VideoMarkupSchemaOrg* n = new VideoMarkupSchemaOrg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoMarkupSchemaOrg::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!page_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*page_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!preview_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*preview_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!video_player_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*video_player_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!video_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*video_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!duration_iso8601_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*duration_iso8601_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
  }
  width_ = 0;
  if (cached_has_bits & 3840u) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&paid_) -
        reinterpret_cast<char*>(&height_)) + sizeof(paid_));
    declaration_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoMarkupSchemaOrg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.DeclarationType declaration_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg_DeclarationType_IsValid(value)) {
            set_declaration_type(static_cast< ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg_DeclarationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string page_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->page_url().data(), static_cast<int>(this->page_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string preview = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preview().data(), static_cast<int>(this->preview().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string video_player_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_player_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_player_url().data(), static_cast<int>(this->video_player_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string video_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_type().data(), static_cast<int>(this->video_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string duration_iso8601 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_duration_iso8601()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->duration_iso8601().data(), static_cast<int>(this->duration_iso8601().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_family_friendly = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_is_family_friendly();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_family_friendly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool paid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_paid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
  return false;
#undef DO_
}

void VideoMarkupSchemaOrg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.DeclarationType declaration_type = 1;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->declaration_type(), output);
  }

  // required string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // required string page_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_url().data(), static_cast<int>(this->page_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_url(), output);
  }

  // required string preview = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview().data(), static_cast<int>(this->preview().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->preview(), output);
  }

  // optional string video_player_url = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_player_url().data(), static_cast<int>(this->video_player_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->video_player_url(), output);
  }

  // optional string video_type = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_type().data(), static_cast<int>(this->video_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->video_type(), output);
  }

  // optional int32 width = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->width(), output);
  }

  // optional int32 height = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->height(), output);
  }

  // optional string duration_iso8601 = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->duration_iso8601().data(), static_cast<int>(this->duration_iso8601().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->duration_iso8601(), output);
  }

  // optional string description = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->description(), output);
  }

  // optional bool is_family_friendly = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_family_friendly(), output);
  }

  // optional bool paid = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->paid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
}

::google::protobuf::uint8* VideoMarkupSchemaOrg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.DeclarationType declaration_type = 1;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->declaration_type(), target);
  }

  // required string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // required string page_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_url().data(), static_cast<int>(this->page_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_url(), target);
  }

  // required string preview = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview().data(), static_cast<int>(this->preview().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->preview(), target);
  }

  // optional string video_player_url = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_player_url().data(), static_cast<int>(this->video_player_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->video_player_url(), target);
  }

  // optional string video_type = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_type().data(), static_cast<int>(this->video_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->video_type(), target);
  }

  // optional int32 width = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->width(), target);
  }

  // optional int32 height = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->height(), target);
  }

  // optional string duration_iso8601 = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->duration_iso8601().data(), static_cast<int>(this->duration_iso8601().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->duration_iso8601(), target);
  }

  // optional string description = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->description(), target);
  }

  // optional bool is_family_friendly = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_family_friendly(), target);
  }

  // optional bool paid = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->paid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
  return target;
}

size_t VideoMarkupSchemaOrg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
  size_t total_size = 0;

  if (has_title()) {
    // required string title = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  if (has_page_url()) {
    // required string page_url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_url());
  }

  if (has_preview()) {
    // required string preview = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->preview());
  }

  if (has_declaration_type()) {
    // required .ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.DeclarationType declaration_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->declaration_type());
  }

  return total_size;
}
size_t VideoMarkupSchemaOrg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000807) ^ 0x00000807) == 0) {  // All required fields are present.
    // required string title = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());

    // required string page_url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_url());

    // required string preview = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->preview());

    // required .ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.DeclarationType declaration_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->declaration_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 248u) {
    // optional string video_player_url = 5;
    if (has_video_player_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_player_url());
    }

    // optional string video_type = 6;
    if (has_video_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_type());
    }

    // optional string duration_iso8601 = 9;
    if (has_duration_iso8601()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->duration_iso8601());
    }

    // optional string description = 10;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional int32 width = 7;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 height = 8;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional bool is_family_friendly = 11;
    if (has_is_family_friendly()) {
      total_size += 1 + 1;
    }

    // optional bool paid = 12;
    if (has_paid()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoMarkupSchemaOrg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoMarkupSchemaOrg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoMarkupSchemaOrg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
    MergeFrom(*source);
  }
}

void VideoMarkupSchemaOrg::MergeFrom(const VideoMarkupSchemaOrg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_page_url();
      page_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_preview();
      preview_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_video_player_url();
      video_player_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_player_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_video_type();
      video_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_type_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_duration_iso8601();
      duration_iso8601_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.duration_iso8601_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000080u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_family_friendly_ = from.is_family_friendly_;
    }
    if (cached_has_bits & 0x00000400u) {
      paid_ = from.paid_;
    }
    if (cached_has_bits & 0x00000800u) {
      declaration_type_ = from.declaration_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoMarkupSchemaOrg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoMarkupSchemaOrg::CopyFrom(const VideoMarkupSchemaOrg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoMarkupSchemaOrg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000807) != 0x00000807) return false;
  return true;
}

void VideoMarkupSchemaOrg::Swap(VideoMarkupSchemaOrg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoMarkupSchemaOrg::InternalSwap(VideoMarkupSchemaOrg* other) {
  using std::swap;
  title_.Swap(&other->title_);
  page_url_.Swap(&other->page_url_);
  preview_.Swap(&other->preview_);
  video_player_url_.Swap(&other->video_player_url_);
  video_type_.Swap(&other->video_type_);
  duration_iso8601_.Swap(&other->duration_iso8601_);
  description_.Swap(&other->description_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(is_family_friendly_, other->is_family_friendly_);
  swap(paid_, other->paid_);
  swap(declaration_type_, other->declaration_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoMarkupSchemaOrg::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoMarkupSchemaOrg

// required .ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.DeclarationType declaration_type = 1;
bool VideoMarkupSchemaOrg::has_declaration_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VideoMarkupSchemaOrg::set_has_declaration_type() {
  _has_bits_[0] |= 0x00000800u;
}
void VideoMarkupSchemaOrg::clear_has_declaration_type() {
  _has_bits_[0] &= ~0x00000800u;
}
void VideoMarkupSchemaOrg::clear_declaration_type() {
  declaration_type_ = 1;
  clear_has_declaration_type();
}
::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg_DeclarationType VideoMarkupSchemaOrg::declaration_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.declaration_type)
  return static_cast< ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg_DeclarationType >(declaration_type_);
}
void VideoMarkupSchemaOrg::set_declaration_type(::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg_DeclarationType value) {
  assert(::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg_DeclarationType_IsValid(value));
  set_has_declaration_type();
  declaration_type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.declaration_type)
}

// required string title = 2;
bool VideoMarkupSchemaOrg::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoMarkupSchemaOrg::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoMarkupSchemaOrg::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoMarkupSchemaOrg::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& VideoMarkupSchemaOrg::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title)
  return title_.GetNoArena();
}
void VideoMarkupSchemaOrg::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title)
}
#if LANG_CXX11
void VideoMarkupSchemaOrg::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title)
}
#endif
void VideoMarkupSchemaOrg::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title)
}
void VideoMarkupSchemaOrg::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title)
}
::std::string* VideoMarkupSchemaOrg::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupSchemaOrg::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupSchemaOrg::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title)
}

// required string page_url = 3;
bool VideoMarkupSchemaOrg::has_page_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VideoMarkupSchemaOrg::set_has_page_url() {
  _has_bits_[0] |= 0x00000002u;
}
void VideoMarkupSchemaOrg::clear_has_page_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void VideoMarkupSchemaOrg::clear_page_url() {
  page_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_page_url();
}
const ::std::string& VideoMarkupSchemaOrg::page_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url)
  return page_url_.GetNoArena();
}
void VideoMarkupSchemaOrg::set_page_url(const ::std::string& value) {
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url)
}
#if LANG_CXX11
void VideoMarkupSchemaOrg::set_page_url(::std::string&& value) {
  set_has_page_url();
  page_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url)
}
#endif
void VideoMarkupSchemaOrg::set_page_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url)
}
void VideoMarkupSchemaOrg::set_page_url(const char* value, size_t size) {
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url)
}
::std::string* VideoMarkupSchemaOrg::mutable_page_url() {
  set_has_page_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url)
  return page_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupSchemaOrg::release_page_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url)
  clear_has_page_url();
  return page_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupSchemaOrg::set_allocated_page_url(::std::string* page_url) {
  if (page_url != NULL) {
    set_has_page_url();
  } else {
    clear_has_page_url();
  }
  page_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url)
}

// required string preview = 4;
bool VideoMarkupSchemaOrg::has_preview() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VideoMarkupSchemaOrg::set_has_preview() {
  _has_bits_[0] |= 0x00000004u;
}
void VideoMarkupSchemaOrg::clear_has_preview() {
  _has_bits_[0] &= ~0x00000004u;
}
void VideoMarkupSchemaOrg::clear_preview() {
  preview_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preview();
}
const ::std::string& VideoMarkupSchemaOrg::preview() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview)
  return preview_.GetNoArena();
}
void VideoMarkupSchemaOrg::set_preview(const ::std::string& value) {
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview)
}
#if LANG_CXX11
void VideoMarkupSchemaOrg::set_preview(::std::string&& value) {
  set_has_preview();
  preview_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview)
}
#endif
void VideoMarkupSchemaOrg::set_preview(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview)
}
void VideoMarkupSchemaOrg::set_preview(const char* value, size_t size) {
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview)
}
::std::string* VideoMarkupSchemaOrg::mutable_preview() {
  set_has_preview();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview)
  return preview_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupSchemaOrg::release_preview() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview)
  clear_has_preview();
  return preview_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupSchemaOrg::set_allocated_preview(::std::string* preview) {
  if (preview != NULL) {
    set_has_preview();
  } else {
    clear_has_preview();
  }
  preview_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preview);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview)
}

// optional string video_player_url = 5;
bool VideoMarkupSchemaOrg::has_video_player_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VideoMarkupSchemaOrg::set_has_video_player_url() {
  _has_bits_[0] |= 0x00000008u;
}
void VideoMarkupSchemaOrg::clear_has_video_player_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void VideoMarkupSchemaOrg::clear_video_player_url() {
  video_player_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_player_url();
}
const ::std::string& VideoMarkupSchemaOrg::video_player_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url)
  return video_player_url_.GetNoArena();
}
void VideoMarkupSchemaOrg::set_video_player_url(const ::std::string& value) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url)
}
#if LANG_CXX11
void VideoMarkupSchemaOrg::set_video_player_url(::std::string&& value) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url)
}
#endif
void VideoMarkupSchemaOrg::set_video_player_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url)
}
void VideoMarkupSchemaOrg::set_video_player_url(const char* value, size_t size) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url)
}
::std::string* VideoMarkupSchemaOrg::mutable_video_player_url() {
  set_has_video_player_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url)
  return video_player_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupSchemaOrg::release_video_player_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url)
  clear_has_video_player_url();
  return video_player_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupSchemaOrg::set_allocated_video_player_url(::std::string* video_player_url) {
  if (video_player_url != NULL) {
    set_has_video_player_url();
  } else {
    clear_has_video_player_url();
  }
  video_player_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_player_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url)
}

// optional string video_type = 6;
bool VideoMarkupSchemaOrg::has_video_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VideoMarkupSchemaOrg::set_has_video_type() {
  _has_bits_[0] |= 0x00000010u;
}
void VideoMarkupSchemaOrg::clear_has_video_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void VideoMarkupSchemaOrg::clear_video_type() {
  video_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_type();
}
const ::std::string& VideoMarkupSchemaOrg::video_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type)
  return video_type_.GetNoArena();
}
void VideoMarkupSchemaOrg::set_video_type(const ::std::string& value) {
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type)
}
#if LANG_CXX11
void VideoMarkupSchemaOrg::set_video_type(::std::string&& value) {
  set_has_video_type();
  video_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type)
}
#endif
void VideoMarkupSchemaOrg::set_video_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type)
}
void VideoMarkupSchemaOrg::set_video_type(const char* value, size_t size) {
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type)
}
::std::string* VideoMarkupSchemaOrg::mutable_video_type() {
  set_has_video_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type)
  return video_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupSchemaOrg::release_video_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type)
  clear_has_video_type();
  return video_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupSchemaOrg::set_allocated_video_type(::std::string* video_type) {
  if (video_type != NULL) {
    set_has_video_type();
  } else {
    clear_has_video_type();
  }
  video_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type)
}

// optional int32 width = 7;
bool VideoMarkupSchemaOrg::has_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VideoMarkupSchemaOrg::set_has_width() {
  _has_bits_[0] |= 0x00000080u;
}
void VideoMarkupSchemaOrg::clear_has_width() {
  _has_bits_[0] &= ~0x00000080u;
}
void VideoMarkupSchemaOrg::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 VideoMarkupSchemaOrg::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.width)
  return width_;
}
void VideoMarkupSchemaOrg::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.width)
}

// optional int32 height = 8;
bool VideoMarkupSchemaOrg::has_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VideoMarkupSchemaOrg::set_has_height() {
  _has_bits_[0] |= 0x00000100u;
}
void VideoMarkupSchemaOrg::clear_has_height() {
  _has_bits_[0] &= ~0x00000100u;
}
void VideoMarkupSchemaOrg::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 VideoMarkupSchemaOrg::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.height)
  return height_;
}
void VideoMarkupSchemaOrg::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.height)
}

// optional string duration_iso8601 = 9;
bool VideoMarkupSchemaOrg::has_duration_iso8601() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VideoMarkupSchemaOrg::set_has_duration_iso8601() {
  _has_bits_[0] |= 0x00000020u;
}
void VideoMarkupSchemaOrg::clear_has_duration_iso8601() {
  _has_bits_[0] &= ~0x00000020u;
}
void VideoMarkupSchemaOrg::clear_duration_iso8601() {
  duration_iso8601_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_duration_iso8601();
}
const ::std::string& VideoMarkupSchemaOrg::duration_iso8601() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601)
  return duration_iso8601_.GetNoArena();
}
void VideoMarkupSchemaOrg::set_duration_iso8601(const ::std::string& value) {
  set_has_duration_iso8601();
  duration_iso8601_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601)
}
#if LANG_CXX11
void VideoMarkupSchemaOrg::set_duration_iso8601(::std::string&& value) {
  set_has_duration_iso8601();
  duration_iso8601_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601)
}
#endif
void VideoMarkupSchemaOrg::set_duration_iso8601(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_duration_iso8601();
  duration_iso8601_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601)
}
void VideoMarkupSchemaOrg::set_duration_iso8601(const char* value, size_t size) {
  set_has_duration_iso8601();
  duration_iso8601_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601)
}
::std::string* VideoMarkupSchemaOrg::mutable_duration_iso8601() {
  set_has_duration_iso8601();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601)
  return duration_iso8601_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupSchemaOrg::release_duration_iso8601() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601)
  clear_has_duration_iso8601();
  return duration_iso8601_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupSchemaOrg::set_allocated_duration_iso8601(::std::string* duration_iso8601) {
  if (duration_iso8601 != NULL) {
    set_has_duration_iso8601();
  } else {
    clear_has_duration_iso8601();
  }
  duration_iso8601_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duration_iso8601);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601)
}

// optional string description = 10;
bool VideoMarkupSchemaOrg::has_description() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VideoMarkupSchemaOrg::set_has_description() {
  _has_bits_[0] |= 0x00000040u;
}
void VideoMarkupSchemaOrg::clear_has_description() {
  _has_bits_[0] &= ~0x00000040u;
}
void VideoMarkupSchemaOrg::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& VideoMarkupSchemaOrg::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description)
  return description_.GetNoArena();
}
void VideoMarkupSchemaOrg::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description)
}
#if LANG_CXX11
void VideoMarkupSchemaOrg::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description)
}
#endif
void VideoMarkupSchemaOrg::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description)
}
void VideoMarkupSchemaOrg::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description)
}
::std::string* VideoMarkupSchemaOrg::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupSchemaOrg::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupSchemaOrg::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description)
}

// optional bool is_family_friendly = 11;
bool VideoMarkupSchemaOrg::has_is_family_friendly() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VideoMarkupSchemaOrg::set_has_is_family_friendly() {
  _has_bits_[0] |= 0x00000200u;
}
void VideoMarkupSchemaOrg::clear_has_is_family_friendly() {
  _has_bits_[0] &= ~0x00000200u;
}
void VideoMarkupSchemaOrg::clear_is_family_friendly() {
  is_family_friendly_ = false;
  clear_has_is_family_friendly();
}
bool VideoMarkupSchemaOrg::is_family_friendly() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.is_family_friendly)
  return is_family_friendly_;
}
void VideoMarkupSchemaOrg::set_is_family_friendly(bool value) {
  set_has_is_family_friendly();
  is_family_friendly_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.is_family_friendly)
}

// optional bool paid = 12;
bool VideoMarkupSchemaOrg::has_paid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VideoMarkupSchemaOrg::set_has_paid() {
  _has_bits_[0] |= 0x00000400u;
}
void VideoMarkupSchemaOrg::clear_has_paid() {
  _has_bits_[0] &= ~0x00000400u;
}
void VideoMarkupSchemaOrg::clear_paid() {
  paid_ = false;
  clear_has_paid();
}
bool VideoMarkupSchemaOrg::paid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.paid)
  return paid_;
}
void VideoMarkupSchemaOrg::set_paid(bool value) {
  set_has_paid();
  paid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.paid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoMarkupTwitterCard::kCardTypeFieldNumber;
const int VideoMarkupTwitterCard::kTitleFieldNumber;
const int VideoMarkupTwitterCard::kPageUrlFieldNumber;
const int VideoMarkupTwitterCard::kPreviewFieldNumber;
const int VideoMarkupTwitterCard::kVideoTypeFieldNumber;
const int VideoMarkupTwitterCard::kVideoPlayerUrlFieldNumber;
const int VideoMarkupTwitterCard::kStreamPlayerUrlFieldNumber;
const int VideoMarkupTwitterCard::kWidthFieldNumber;
const int VideoMarkupTwitterCard::kHeightFieldNumber;
const int VideoMarkupTwitterCard::kDurationFieldNumber;
const int VideoMarkupTwitterCard::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoMarkupTwitterCard::VideoMarkupTwitterCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
}
VideoMarkupTwitterCard::VideoMarkupTwitterCard(const VideoMarkupTwitterCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_type()) {
    card_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_type_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  page_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_page_url()) {
    page_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_url_);
  }
  preview_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preview()) {
    preview_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_);
  }
  video_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_type()) {
    video_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_type_);
  }
  video_player_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_player_url()) {
    video_player_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_player_url_);
  }
  stream_player_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stream_player_url()) {
    stream_player_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_player_url_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&width_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
}

void VideoMarkupTwitterCard::SharedCtor() {
  _cached_size_ = 0;
  card_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_player_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_player_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&width_)) + sizeof(duration_));
}

VideoMarkupTwitterCard::~VideoMarkupTwitterCard() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
  SharedDtor();
}

void VideoMarkupTwitterCard::SharedDtor() {
  card_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_player_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_player_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoMarkupTwitterCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoMarkupTwitterCard::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoMarkupTwitterCard& VideoMarkupTwitterCard::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoMarkupTwitterCard* VideoMarkupTwitterCard::New(::google::protobuf::Arena* arena) const {
  VideoMarkupTwitterCard* n = new VideoMarkupTwitterCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoMarkupTwitterCard::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!card_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!page_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*page_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!preview_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*preview_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!video_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*video_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!video_player_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*video_player_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!stream_player_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*stream_player_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 1792u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&width_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoMarkupTwitterCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string card_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_type().data(), static_cast<int>(this->card_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string page_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->page_url().data(), static_cast<int>(this->page_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string preview = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preview().data(), static_cast<int>(this->preview().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string video_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_type().data(), static_cast<int>(this->video_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string video_player_url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_player_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_player_url().data(), static_cast<int>(this->video_player_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stream_player_url = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_player_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stream_player_url().data(), static_cast<int>(this->stream_player_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 duration = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
  return false;
#undef DO_
}

void VideoMarkupTwitterCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string card_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_type().data(), static_cast<int>(this->card_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->card_type(), output);
  }

  // required string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // required string page_url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_url().data(), static_cast<int>(this->page_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_url(), output);
  }

  // required string preview = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview().data(), static_cast<int>(this->preview().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->preview(), output);
  }

  // required string video_type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_type().data(), static_cast<int>(this->video_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->video_type(), output);
  }

  // optional string video_player_url = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_player_url().data(), static_cast<int>(this->video_player_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->video_player_url(), output);
  }

  // optional string stream_player_url = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_player_url().data(), static_cast<int>(this->stream_player_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->stream_player_url(), output);
  }

  // optional int32 width = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->width(), output);
  }

  // optional int32 height = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->height(), output);
  }

  // optional int32 duration = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->duration(), output);
  }

  // optional string description = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
}

::google::protobuf::uint8* VideoMarkupTwitterCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string card_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_type().data(), static_cast<int>(this->card_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->card_type(), target);
  }

  // required string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // required string page_url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_url().data(), static_cast<int>(this->page_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_url(), target);
  }

  // required string preview = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview().data(), static_cast<int>(this->preview().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->preview(), target);
  }

  // required string video_type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_type().data(), static_cast<int>(this->video_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->video_type(), target);
  }

  // optional string video_player_url = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_player_url().data(), static_cast<int>(this->video_player_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->video_player_url(), target);
  }

  // optional string stream_player_url = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_player_url().data(), static_cast<int>(this->stream_player_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->stream_player_url(), target);
  }

  // optional int32 width = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->width(), target);
  }

  // optional int32 height = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->height(), target);
  }

  // optional int32 duration = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->duration(), target);
  }

  // optional string description = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
  return target;
}

size_t VideoMarkupTwitterCard::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
  size_t total_size = 0;

  if (has_card_type()) {
    // required string card_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_type());
  }

  if (has_title()) {
    // required string title = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  if (has_page_url()) {
    // required string page_url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_url());
  }

  if (has_preview()) {
    // required string preview = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->preview());
  }

  if (has_video_type()) {
    // required string video_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->video_type());
  }

  return total_size;
}
size_t VideoMarkupTwitterCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string card_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_type());

    // required string title = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());

    // required string page_url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_url());

    // required string preview = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->preview());

    // required string video_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->video_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional string video_player_url = 6;
    if (has_video_player_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_player_url());
    }

    // optional string stream_player_url = 7;
    if (has_stream_player_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_player_url());
    }

    // optional string description = 11;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 width = 8;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 9;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 duration = 10;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoMarkupTwitterCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoMarkupTwitterCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoMarkupTwitterCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
    MergeFrom(*source);
  }
}

void VideoMarkupTwitterCard::MergeFrom(const VideoMarkupTwitterCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_card_type();
      card_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_page_url();
      page_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_preview();
      preview_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_video_type();
      video_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_type_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_video_player_url();
      video_player_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_player_url_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_stream_player_url();
      stream_player_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_player_url_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000200u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000400u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoMarkupTwitterCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoMarkupTwitterCard::CopyFrom(const VideoMarkupTwitterCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoMarkupTwitterCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void VideoMarkupTwitterCard::Swap(VideoMarkupTwitterCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoMarkupTwitterCard::InternalSwap(VideoMarkupTwitterCard* other) {
  using std::swap;
  card_type_.Swap(&other->card_type_);
  title_.Swap(&other->title_);
  page_url_.Swap(&other->page_url_);
  preview_.Swap(&other->preview_);
  video_type_.Swap(&other->video_type_);
  video_player_url_.Swap(&other->video_player_url_);
  stream_player_url_.Swap(&other->stream_player_url_);
  description_.Swap(&other->description_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoMarkupTwitterCard::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoMarkupTwitterCard

// required string card_type = 1;
bool VideoMarkupTwitterCard::has_card_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoMarkupTwitterCard::set_has_card_type() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoMarkupTwitterCard::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoMarkupTwitterCard::clear_card_type() {
  card_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_type();
}
const ::std::string& VideoMarkupTwitterCard::card_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type)
  return card_type_.GetNoArena();
}
void VideoMarkupTwitterCard::set_card_type(const ::std::string& value) {
  set_has_card_type();
  card_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type)
}
#if LANG_CXX11
void VideoMarkupTwitterCard::set_card_type(::std::string&& value) {
  set_has_card_type();
  card_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type)
}
#endif
void VideoMarkupTwitterCard::set_card_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_type();
  card_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type)
}
void VideoMarkupTwitterCard::set_card_type(const char* value, size_t size) {
  set_has_card_type();
  card_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type)
}
::std::string* VideoMarkupTwitterCard::mutable_card_type() {
  set_has_card_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type)
  return card_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupTwitterCard::release_card_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type)
  clear_has_card_type();
  return card_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupTwitterCard::set_allocated_card_type(::std::string* card_type) {
  if (card_type != NULL) {
    set_has_card_type();
  } else {
    clear_has_card_type();
  }
  card_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type)
}

// required string title = 2;
bool VideoMarkupTwitterCard::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VideoMarkupTwitterCard::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void VideoMarkupTwitterCard::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void VideoMarkupTwitterCard::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& VideoMarkupTwitterCard::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title)
  return title_.GetNoArena();
}
void VideoMarkupTwitterCard::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title)
}
#if LANG_CXX11
void VideoMarkupTwitterCard::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title)
}
#endif
void VideoMarkupTwitterCard::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title)
}
void VideoMarkupTwitterCard::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title)
}
::std::string* VideoMarkupTwitterCard::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupTwitterCard::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupTwitterCard::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title)
}

// required string page_url = 3;
bool VideoMarkupTwitterCard::has_page_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VideoMarkupTwitterCard::set_has_page_url() {
  _has_bits_[0] |= 0x00000004u;
}
void VideoMarkupTwitterCard::clear_has_page_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void VideoMarkupTwitterCard::clear_page_url() {
  page_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_page_url();
}
const ::std::string& VideoMarkupTwitterCard::page_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url)
  return page_url_.GetNoArena();
}
void VideoMarkupTwitterCard::set_page_url(const ::std::string& value) {
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url)
}
#if LANG_CXX11
void VideoMarkupTwitterCard::set_page_url(::std::string&& value) {
  set_has_page_url();
  page_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url)
}
#endif
void VideoMarkupTwitterCard::set_page_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url)
}
void VideoMarkupTwitterCard::set_page_url(const char* value, size_t size) {
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url)
}
::std::string* VideoMarkupTwitterCard::mutable_page_url() {
  set_has_page_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url)
  return page_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupTwitterCard::release_page_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url)
  clear_has_page_url();
  return page_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupTwitterCard::set_allocated_page_url(::std::string* page_url) {
  if (page_url != NULL) {
    set_has_page_url();
  } else {
    clear_has_page_url();
  }
  page_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url)
}

// required string preview = 4;
bool VideoMarkupTwitterCard::has_preview() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VideoMarkupTwitterCard::set_has_preview() {
  _has_bits_[0] |= 0x00000008u;
}
void VideoMarkupTwitterCard::clear_has_preview() {
  _has_bits_[0] &= ~0x00000008u;
}
void VideoMarkupTwitterCard::clear_preview() {
  preview_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preview();
}
const ::std::string& VideoMarkupTwitterCard::preview() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview)
  return preview_.GetNoArena();
}
void VideoMarkupTwitterCard::set_preview(const ::std::string& value) {
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview)
}
#if LANG_CXX11
void VideoMarkupTwitterCard::set_preview(::std::string&& value) {
  set_has_preview();
  preview_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview)
}
#endif
void VideoMarkupTwitterCard::set_preview(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview)
}
void VideoMarkupTwitterCard::set_preview(const char* value, size_t size) {
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview)
}
::std::string* VideoMarkupTwitterCard::mutable_preview() {
  set_has_preview();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview)
  return preview_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupTwitterCard::release_preview() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview)
  clear_has_preview();
  return preview_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupTwitterCard::set_allocated_preview(::std::string* preview) {
  if (preview != NULL) {
    set_has_preview();
  } else {
    clear_has_preview();
  }
  preview_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preview);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview)
}

// required string video_type = 5;
bool VideoMarkupTwitterCard::has_video_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VideoMarkupTwitterCard::set_has_video_type() {
  _has_bits_[0] |= 0x00000010u;
}
void VideoMarkupTwitterCard::clear_has_video_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void VideoMarkupTwitterCard::clear_video_type() {
  video_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_type();
}
const ::std::string& VideoMarkupTwitterCard::video_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type)
  return video_type_.GetNoArena();
}
void VideoMarkupTwitterCard::set_video_type(const ::std::string& value) {
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type)
}
#if LANG_CXX11
void VideoMarkupTwitterCard::set_video_type(::std::string&& value) {
  set_has_video_type();
  video_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type)
}
#endif
void VideoMarkupTwitterCard::set_video_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type)
}
void VideoMarkupTwitterCard::set_video_type(const char* value, size_t size) {
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type)
}
::std::string* VideoMarkupTwitterCard::mutable_video_type() {
  set_has_video_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type)
  return video_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupTwitterCard::release_video_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type)
  clear_has_video_type();
  return video_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupTwitterCard::set_allocated_video_type(::std::string* video_type) {
  if (video_type != NULL) {
    set_has_video_type();
  } else {
    clear_has_video_type();
  }
  video_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type)
}

// optional string video_player_url = 6;
bool VideoMarkupTwitterCard::has_video_player_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VideoMarkupTwitterCard::set_has_video_player_url() {
  _has_bits_[0] |= 0x00000020u;
}
void VideoMarkupTwitterCard::clear_has_video_player_url() {
  _has_bits_[0] &= ~0x00000020u;
}
void VideoMarkupTwitterCard::clear_video_player_url() {
  video_player_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_player_url();
}
const ::std::string& VideoMarkupTwitterCard::video_player_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url)
  return video_player_url_.GetNoArena();
}
void VideoMarkupTwitterCard::set_video_player_url(const ::std::string& value) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url)
}
#if LANG_CXX11
void VideoMarkupTwitterCard::set_video_player_url(::std::string&& value) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url)
}
#endif
void VideoMarkupTwitterCard::set_video_player_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url)
}
void VideoMarkupTwitterCard::set_video_player_url(const char* value, size_t size) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url)
}
::std::string* VideoMarkupTwitterCard::mutable_video_player_url() {
  set_has_video_player_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url)
  return video_player_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupTwitterCard::release_video_player_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url)
  clear_has_video_player_url();
  return video_player_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupTwitterCard::set_allocated_video_player_url(::std::string* video_player_url) {
  if (video_player_url != NULL) {
    set_has_video_player_url();
  } else {
    clear_has_video_player_url();
  }
  video_player_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_player_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url)
}

// optional string stream_player_url = 7;
bool VideoMarkupTwitterCard::has_stream_player_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VideoMarkupTwitterCard::set_has_stream_player_url() {
  _has_bits_[0] |= 0x00000040u;
}
void VideoMarkupTwitterCard::clear_has_stream_player_url() {
  _has_bits_[0] &= ~0x00000040u;
}
void VideoMarkupTwitterCard::clear_stream_player_url() {
  stream_player_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stream_player_url();
}
const ::std::string& VideoMarkupTwitterCard::stream_player_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url)
  return stream_player_url_.GetNoArena();
}
void VideoMarkupTwitterCard::set_stream_player_url(const ::std::string& value) {
  set_has_stream_player_url();
  stream_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url)
}
#if LANG_CXX11
void VideoMarkupTwitterCard::set_stream_player_url(::std::string&& value) {
  set_has_stream_player_url();
  stream_player_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url)
}
#endif
void VideoMarkupTwitterCard::set_stream_player_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stream_player_url();
  stream_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url)
}
void VideoMarkupTwitterCard::set_stream_player_url(const char* value, size_t size) {
  set_has_stream_player_url();
  stream_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url)
}
::std::string* VideoMarkupTwitterCard::mutable_stream_player_url() {
  set_has_stream_player_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url)
  return stream_player_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupTwitterCard::release_stream_player_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url)
  clear_has_stream_player_url();
  return stream_player_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupTwitterCard::set_allocated_stream_player_url(::std::string* stream_player_url) {
  if (stream_player_url != NULL) {
    set_has_stream_player_url();
  } else {
    clear_has_stream_player_url();
  }
  stream_player_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_player_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url)
}

// optional int32 width = 8;
bool VideoMarkupTwitterCard::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VideoMarkupTwitterCard::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
void VideoMarkupTwitterCard::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
void VideoMarkupTwitterCard::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 VideoMarkupTwitterCard::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.width)
  return width_;
}
void VideoMarkupTwitterCard::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.width)
}

// optional int32 height = 9;
bool VideoMarkupTwitterCard::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VideoMarkupTwitterCard::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
void VideoMarkupTwitterCard::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
void VideoMarkupTwitterCard::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 VideoMarkupTwitterCard::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.height)
  return height_;
}
void VideoMarkupTwitterCard::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.height)
}

// optional int32 duration = 10;
bool VideoMarkupTwitterCard::has_duration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VideoMarkupTwitterCard::set_has_duration() {
  _has_bits_[0] |= 0x00000400u;
}
void VideoMarkupTwitterCard::clear_has_duration() {
  _has_bits_[0] &= ~0x00000400u;
}
void VideoMarkupTwitterCard::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
::google::protobuf::int32 VideoMarkupTwitterCard::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.duration)
  return duration_;
}
void VideoMarkupTwitterCard::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.duration)
}

// optional string description = 11;
bool VideoMarkupTwitterCard::has_description() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VideoMarkupTwitterCard::set_has_description() {
  _has_bits_[0] |= 0x00000080u;
}
void VideoMarkupTwitterCard::clear_has_description() {
  _has_bits_[0] &= ~0x00000080u;
}
void VideoMarkupTwitterCard::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& VideoMarkupTwitterCard::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description)
  return description_.GetNoArena();
}
void VideoMarkupTwitterCard::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description)
}
#if LANG_CXX11
void VideoMarkupTwitterCard::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description)
}
#endif
void VideoMarkupTwitterCard::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description)
}
void VideoMarkupTwitterCard::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description)
}
::std::string* VideoMarkupTwitterCard::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoMarkupTwitterCard::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoMarkupTwitterCard::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoMarkupHtml5Video::VideoMarkupHtml5Video()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
}
VideoMarkupHtml5Video::VideoMarkupHtml5Video(const VideoMarkupHtml5Video& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
}

void VideoMarkupHtml5Video::SharedCtor() {
  _cached_size_ = 0;
}

VideoMarkupHtml5Video::~VideoMarkupHtml5Video() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
  SharedDtor();
}

void VideoMarkupHtml5Video::SharedDtor() {
}

void VideoMarkupHtml5Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoMarkupHtml5Video::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoMarkupHtml5Video& VideoMarkupHtml5Video::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoMarkupHtml5Video* VideoMarkupHtml5Video::New(::google::protobuf::Arena* arena) const {
  VideoMarkupHtml5Video* n = new VideoMarkupHtml5Video;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoMarkupHtml5Video::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoMarkupHtml5Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
  return false;
#undef DO_
}

void VideoMarkupHtml5Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
}

::google::protobuf::uint8* VideoMarkupHtml5Video::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
  return target;
}

size_t VideoMarkupHtml5Video::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoMarkupHtml5Video::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoMarkupHtml5Video* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoMarkupHtml5Video>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
    MergeFrom(*source);
  }
}

void VideoMarkupHtml5Video::MergeFrom(const VideoMarkupHtml5Video& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void VideoMarkupHtml5Video::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoMarkupHtml5Video::CopyFrom(const VideoMarkupHtml5Video& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoMarkupHtml5Video::IsInitialized() const {
  return true;
}

void VideoMarkupHtml5Video::Swap(VideoMarkupHtml5Video* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoMarkupHtml5Video::InternalSwap(VideoMarkupHtml5Video* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoMarkupHtml5Video::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoMarkupHtml5Video

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecoBuildInfo::kUrlRecommendedFieldNumber;
const int RecoBuildInfo::kRecommendedForFieldNumber;
const int RecoBuildInfo::kIndexedVideoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecoBuildInfo::RecoBuildInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.RecoBuildInfo)
}
RecoBuildInfo::RecoBuildInfo(const RecoBuildInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_recommended_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_recommended()) {
    url_recommended_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_recommended_);
  }
  recommended_for_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_recommended_for()) {
    recommended_for_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recommended_for_);
  }
  if (from.has_indexed_video()) {
    indexed_video_ = new ::ru::mail::go::webbase::blobs::IndexedVideo(*from.indexed_video_);
  } else {
    indexed_video_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.RecoBuildInfo)
}

void RecoBuildInfo::SharedCtor() {
  _cached_size_ = 0;
  url_recommended_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recommended_for_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indexed_video_ = NULL;
}

RecoBuildInfo::~RecoBuildInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.RecoBuildInfo)
  SharedDtor();
}

void RecoBuildInfo::SharedDtor() {
  url_recommended_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recommended_for_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete indexed_video_;
}

void RecoBuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoBuildInfo::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecoBuildInfo& RecoBuildInfo::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecoBuildInfo* RecoBuildInfo::New(::google::protobuf::Arena* arena) const {
  RecoBuildInfo* n = new RecoBuildInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecoBuildInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.RecoBuildInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_recommended_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_recommended_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!recommended_for_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*recommended_for_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(indexed_video_ != NULL);
      indexed_video_->::ru::mail::go::webbase::blobs::IndexedVideo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecoBuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.RecoBuildInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url_recommended = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_recommended()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_recommended().data(), static_cast<int>(this->url_recommended().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string recommended_for = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recommended_for()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recommended_for().data(), static_cast<int>(this->recommended_for().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.IndexedVideo indexed_video = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indexed_video()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.RecoBuildInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.RecoBuildInfo)
  return false;
#undef DO_
}

void RecoBuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.RecoBuildInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url_recommended = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_recommended().data(), static_cast<int>(this->url_recommended().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url_recommended(), output);
  }

  // optional string recommended_for = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recommended_for().data(), static_cast<int>(this->recommended_for().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->recommended_for(), output);
  }

  // optional .ru.mail.go.webbase.blobs.IndexedVideo indexed_video = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->indexed_video_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.RecoBuildInfo)
}

::google::protobuf::uint8* RecoBuildInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.RecoBuildInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url_recommended = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_recommended().data(), static_cast<int>(this->url_recommended().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url_recommended(), target);
  }

  // optional string recommended_for = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recommended_for().data(), static_cast<int>(this->recommended_for().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->recommended_for(), target);
  }

  // optional .ru.mail.go.webbase.blobs.IndexedVideo indexed_video = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->indexed_video_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.RecoBuildInfo)
  return target;
}

size_t RecoBuildInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.RecoBuildInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string url_recommended = 1;
    if (has_url_recommended()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_recommended());
    }

    // optional string recommended_for = 2;
    if (has_recommended_for()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recommended_for());
    }

    // optional .ru.mail.go.webbase.blobs.IndexedVideo indexed_video = 3;
    if (has_indexed_video()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->indexed_video_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoBuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.RecoBuildInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RecoBuildInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecoBuildInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.RecoBuildInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.RecoBuildInfo)
    MergeFrom(*source);
  }
}

void RecoBuildInfo::MergeFrom(const RecoBuildInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.RecoBuildInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url_recommended();
      url_recommended_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_recommended_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_recommended_for();
      recommended_for_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recommended_for_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_indexed_video()->::ru::mail::go::webbase::blobs::IndexedVideo::MergeFrom(from.indexed_video());
    }
  }
}

void RecoBuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.RecoBuildInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoBuildInfo::CopyFrom(const RecoBuildInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.RecoBuildInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoBuildInfo::IsInitialized() const {
  if (has_indexed_video()) {
    if (!this->indexed_video_->IsInitialized()) return false;
  }
  return true;
}

void RecoBuildInfo::Swap(RecoBuildInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecoBuildInfo::InternalSwap(RecoBuildInfo* other) {
  using std::swap;
  url_recommended_.Swap(&other->url_recommended_);
  recommended_for_.Swap(&other->recommended_for_);
  swap(indexed_video_, other->indexed_video_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecoBuildInfo::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecoBuildInfo

// optional string url_recommended = 1;
bool RecoBuildInfo::has_url_recommended() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecoBuildInfo::set_has_url_recommended() {
  _has_bits_[0] |= 0x00000001u;
}
void RecoBuildInfo::clear_has_url_recommended() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecoBuildInfo::clear_url_recommended() {
  url_recommended_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url_recommended();
}
const ::std::string& RecoBuildInfo::url_recommended() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended)
  return url_recommended_.GetNoArena();
}
void RecoBuildInfo::set_url_recommended(const ::std::string& value) {
  set_has_url_recommended();
  url_recommended_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended)
}
#if LANG_CXX11
void RecoBuildInfo::set_url_recommended(::std::string&& value) {
  set_has_url_recommended();
  url_recommended_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended)
}
#endif
void RecoBuildInfo::set_url_recommended(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url_recommended();
  url_recommended_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended)
}
void RecoBuildInfo::set_url_recommended(const char* value, size_t size) {
  set_has_url_recommended();
  url_recommended_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended)
}
::std::string* RecoBuildInfo::mutable_url_recommended() {
  set_has_url_recommended();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended)
  return url_recommended_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RecoBuildInfo::release_url_recommended() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended)
  clear_has_url_recommended();
  return url_recommended_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RecoBuildInfo::set_allocated_url_recommended(::std::string* url_recommended) {
  if (url_recommended != NULL) {
    set_has_url_recommended();
  } else {
    clear_has_url_recommended();
  }
  url_recommended_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_recommended);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended)
}

// optional string recommended_for = 2;
bool RecoBuildInfo::has_recommended_for() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecoBuildInfo::set_has_recommended_for() {
  _has_bits_[0] |= 0x00000002u;
}
void RecoBuildInfo::clear_has_recommended_for() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecoBuildInfo::clear_recommended_for() {
  recommended_for_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recommended_for();
}
const ::std::string& RecoBuildInfo::recommended_for() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for)
  return recommended_for_.GetNoArena();
}
void RecoBuildInfo::set_recommended_for(const ::std::string& value) {
  set_has_recommended_for();
  recommended_for_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for)
}
#if LANG_CXX11
void RecoBuildInfo::set_recommended_for(::std::string&& value) {
  set_has_recommended_for();
  recommended_for_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for)
}
#endif
void RecoBuildInfo::set_recommended_for(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_recommended_for();
  recommended_for_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for)
}
void RecoBuildInfo::set_recommended_for(const char* value, size_t size) {
  set_has_recommended_for();
  recommended_for_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for)
}
::std::string* RecoBuildInfo::mutable_recommended_for() {
  set_has_recommended_for();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for)
  return recommended_for_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RecoBuildInfo::release_recommended_for() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for)
  clear_has_recommended_for();
  return recommended_for_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RecoBuildInfo::set_allocated_recommended_for(::std::string* recommended_for) {
  if (recommended_for != NULL) {
    set_has_recommended_for();
  } else {
    clear_has_recommended_for();
  }
  recommended_for_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recommended_for);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for)
}

// optional .ru.mail.go.webbase.blobs.IndexedVideo indexed_video = 3;
bool RecoBuildInfo::has_indexed_video() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecoBuildInfo::set_has_indexed_video() {
  _has_bits_[0] |= 0x00000004u;
}
void RecoBuildInfo::clear_has_indexed_video() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecoBuildInfo::clear_indexed_video() {
  if (indexed_video_ != NULL) indexed_video_->::ru::mail::go::webbase::blobs::IndexedVideo::Clear();
  clear_has_indexed_video();
}
const ::ru::mail::go::webbase::blobs::IndexedVideo& RecoBuildInfo::indexed_video() const {
  const ::ru::mail::go::webbase::blobs::IndexedVideo* p = indexed_video_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RecoBuildInfo.indexed_video)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::IndexedVideo*>(
      &::ru::mail::go::webbase::blobs::_IndexedVideo_default_instance_);
}
::ru::mail::go::webbase::blobs::IndexedVideo* RecoBuildInfo::mutable_indexed_video() {
  set_has_indexed_video();
  if (indexed_video_ == NULL) {
    indexed_video_ = new ::ru::mail::go::webbase::blobs::IndexedVideo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.RecoBuildInfo.indexed_video)
  return indexed_video_;
}
::ru::mail::go::webbase::blobs::IndexedVideo* RecoBuildInfo::release_indexed_video() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.RecoBuildInfo.indexed_video)
  clear_has_indexed_video();
  ::ru::mail::go::webbase::blobs::IndexedVideo* temp = indexed_video_;
  indexed_video_ = NULL;
  return temp;
}
void RecoBuildInfo::set_allocated_indexed_video(::ru::mail::go::webbase::blobs::IndexedVideo* indexed_video) {
  delete indexed_video_;
  indexed_video_ = indexed_video;
  if (indexed_video) {
    set_has_indexed_video();
  } else {
    clear_has_indexed_video();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.RecoBuildInfo.indexed_video)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkVideoView::kUserIdFieldNumber;
const int VkVideoView::kReferrerUrlFieldNumber;
const int VkVideoView::kStartTimeFieldNumber;
const int VkVideoView::kViewedPartFieldNumber;
const int VkVideoView::kOurRecommendationsFieldNumber;
const int VkVideoView::kVideoUrlFieldNumber;
const int VkVideoView::kVideoMetadataFieldNumber;
const int VkVideoView::kEventTimestampFieldNumber;
const int VkVideoView::kRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkVideoView::VkVideoView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkVideoView)
}
VkVideoView::VkVideoView(const VkVideoView& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  referrer_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_referrer_url()) {
    referrer_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referrer_url_);
  }
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_url()) {
    video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
  }
  ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ref()) {
    ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_);
  }
  if (from.has_video_metadata()) {
    video_metadata_ = new ::ru::mail::go::webbase::blobs::VideoImportDoc(*from.video_metadata_);
  } else {
    video_metadata_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&our_recommendations_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(our_recommendations_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkVideoView)
}

void VkVideoView::SharedCtor() {
  _cached_size_ = 0;
  referrer_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&video_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&our_recommendations_) -
      reinterpret_cast<char*>(&video_metadata_)) + sizeof(our_recommendations_));
}

VkVideoView::~VkVideoView() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkVideoView)
  SharedDtor();
}

void VkVideoView::SharedDtor() {
  referrer_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete video_metadata_;
}

void VkVideoView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkVideoView::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkVideoView& VkVideoView::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkVideoView* VkVideoView::New(::google::protobuf::Arena* arena) const {
  VkVideoView* n = new VkVideoView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkVideoView::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkVideoView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!referrer_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*referrer_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!video_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*video_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!ref_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ref_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(video_metadata_ != NULL);
      video_metadata_->::ru::mail::go::webbase::blobs::VideoImportDoc::Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_timestamp_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(event_timestamp_));
  }
  our_recommendations_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkVideoView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkVideoView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string referrer_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referrer_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->referrer_url().data(), static_cast<int>(this->referrer_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkVideoView.referrer_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float viewed_part = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_viewed_part();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &viewed_part_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool our_recommendations = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_our_recommendations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &our_recommendations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string video_url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_url().data(), static_cast<int>(this->video_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkVideoView.video_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 event_timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_event_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &event_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ref = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ref().data(), static_cast<int>(this->ref().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkVideoView.ref");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkVideoView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkVideoView)
  return false;
#undef DO_
}

void VkVideoView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkVideoView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // optional string referrer_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referrer_url().data(), static_cast<int>(this->referrer_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkVideoView.referrer_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->referrer_url(), output);
  }

  // optional int64 start_time = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_time(), output);
  }

  // optional float viewed_part = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->viewed_part(), output);
  }

  // optional bool our_recommendations = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->our_recommendations(), output);
  }

  // optional string video_url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), static_cast<int>(this->video_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkVideoView.video_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->video_url(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->video_metadata_, output);
  }

  // optional int64 event_timestamp = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->event_timestamp(), output);
  }

  // optional string ref = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref().data(), static_cast<int>(this->ref().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkVideoView.ref");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ref(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkVideoView)
}

::google::protobuf::uint8* VkVideoView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkVideoView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // optional string referrer_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referrer_url().data(), static_cast<int>(this->referrer_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkVideoView.referrer_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->referrer_url(), target);
  }

  // optional int64 start_time = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start_time(), target);
  }

  // optional float viewed_part = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->viewed_part(), target);
  }

  // optional bool our_recommendations = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->our_recommendations(), target);
  }

  // optional string video_url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), static_cast<int>(this->video_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkVideoView.video_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->video_url(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->video_metadata_, deterministic, target);
  }

  // optional int64 event_timestamp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->event_timestamp(), target);
  }

  // optional string ref = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref().data(), static_cast<int>(this->ref().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkVideoView.ref");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ref(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkVideoView)
  return target;
}

size_t VkVideoView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkVideoView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string referrer_url = 2;
    if (has_referrer_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->referrer_url());
    }

    // optional string video_url = 6;
    if (has_video_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_url());
    }

    // optional string ref = 9;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }

    // optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 7;
    if (has_video_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_metadata_);
    }

    // optional int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional float viewed_part = 4;
    if (has_viewed_part()) {
      total_size += 1 + 4;
    }

    // optional int64 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional int64 event_timestamp = 8;
    if (has_event_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->event_timestamp());
    }

  }
  // optional bool our_recommendations = 5;
  if (has_our_recommendations()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkVideoView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkVideoView)
  GOOGLE_DCHECK_NE(&from, this);
  const VkVideoView* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkVideoView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkVideoView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkVideoView)
    MergeFrom(*source);
  }
}

void VkVideoView::MergeFrom(const VkVideoView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkVideoView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_referrer_url();
      referrer_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referrer_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_video_url();
      video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ref();
      ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_video_metadata()->::ru::mail::go::webbase::blobs::VideoImportDoc::MergeFrom(from.video_metadata());
    }
    if (cached_has_bits & 0x00000010u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      viewed_part_ = from.viewed_part_;
    }
    if (cached_has_bits & 0x00000040u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      event_timestamp_ = from.event_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_our_recommendations(from.our_recommendations());
  }
}

void VkVideoView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkVideoView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkVideoView::CopyFrom(const VkVideoView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkVideoView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkVideoView::IsInitialized() const {
  return true;
}

void VkVideoView::Swap(VkVideoView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkVideoView::InternalSwap(VkVideoView* other) {
  using std::swap;
  referrer_url_.Swap(&other->referrer_url_);
  video_url_.Swap(&other->video_url_);
  ref_.Swap(&other->ref_);
  swap(video_metadata_, other->video_metadata_);
  swap(user_id_, other->user_id_);
  swap(viewed_part_, other->viewed_part_);
  swap(start_time_, other->start_time_);
  swap(event_timestamp_, other->event_timestamp_);
  swap(our_recommendations_, other->our_recommendations_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkVideoView::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkVideoView

// optional int32 user_id = 1;
bool VkVideoView::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VkVideoView::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
void VkVideoView::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void VkVideoView::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
::google::protobuf::int32 VkVideoView::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.user_id)
  return user_id_;
}
void VkVideoView::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoView.user_id)
}

// optional string referrer_url = 2;
bool VkVideoView::has_referrer_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkVideoView::set_has_referrer_url() {
  _has_bits_[0] |= 0x00000001u;
}
void VkVideoView::clear_has_referrer_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkVideoView::clear_referrer_url() {
  referrer_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_referrer_url();
}
const ::std::string& VkVideoView::referrer_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.referrer_url)
  return referrer_url_.GetNoArena();
}
void VkVideoView::set_referrer_url(const ::std::string& value) {
  set_has_referrer_url();
  referrer_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoView.referrer_url)
}
#if LANG_CXX11
void VkVideoView::set_referrer_url(::std::string&& value) {
  set_has_referrer_url();
  referrer_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkVideoView.referrer_url)
}
#endif
void VkVideoView::set_referrer_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_referrer_url();
  referrer_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkVideoView.referrer_url)
}
void VkVideoView::set_referrer_url(const char* value, size_t size) {
  set_has_referrer_url();
  referrer_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkVideoView.referrer_url)
}
::std::string* VkVideoView::mutable_referrer_url() {
  set_has_referrer_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkVideoView.referrer_url)
  return referrer_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkVideoView::release_referrer_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkVideoView.referrer_url)
  clear_has_referrer_url();
  return referrer_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkVideoView::set_allocated_referrer_url(::std::string* referrer_url) {
  if (referrer_url != NULL) {
    set_has_referrer_url();
  } else {
    clear_has_referrer_url();
  }
  referrer_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referrer_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkVideoView.referrer_url)
}

// optional int64 start_time = 3;
bool VkVideoView::has_start_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VkVideoView::set_has_start_time() {
  _has_bits_[0] |= 0x00000040u;
}
void VkVideoView::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void VkVideoView::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
  clear_has_start_time();
}
::google::protobuf::int64 VkVideoView::start_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.start_time)
  return start_time_;
}
void VkVideoView::set_start_time(::google::protobuf::int64 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoView.start_time)
}

// optional float viewed_part = 4;
bool VkVideoView::has_viewed_part() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VkVideoView::set_has_viewed_part() {
  _has_bits_[0] |= 0x00000020u;
}
void VkVideoView::clear_has_viewed_part() {
  _has_bits_[0] &= ~0x00000020u;
}
void VkVideoView::clear_viewed_part() {
  viewed_part_ = 0;
  clear_has_viewed_part();
}
float VkVideoView::viewed_part() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.viewed_part)
  return viewed_part_;
}
void VkVideoView::set_viewed_part(float value) {
  set_has_viewed_part();
  viewed_part_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoView.viewed_part)
}

// optional bool our_recommendations = 5;
bool VkVideoView::has_our_recommendations() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VkVideoView::set_has_our_recommendations() {
  _has_bits_[0] |= 0x00000100u;
}
void VkVideoView::clear_has_our_recommendations() {
  _has_bits_[0] &= ~0x00000100u;
}
void VkVideoView::clear_our_recommendations() {
  our_recommendations_ = false;
  clear_has_our_recommendations();
}
bool VkVideoView::our_recommendations() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.our_recommendations)
  return our_recommendations_;
}
void VkVideoView::set_our_recommendations(bool value) {
  set_has_our_recommendations();
  our_recommendations_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoView.our_recommendations)
}

// optional string video_url = 6;
bool VkVideoView::has_video_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkVideoView::set_has_video_url() {
  _has_bits_[0] |= 0x00000002u;
}
void VkVideoView::clear_has_video_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkVideoView::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_url();
}
const ::std::string& VkVideoView::video_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.video_url)
  return video_url_.GetNoArena();
}
void VkVideoView::set_video_url(const ::std::string& value) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoView.video_url)
}
#if LANG_CXX11
void VkVideoView::set_video_url(::std::string&& value) {
  set_has_video_url();
  video_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkVideoView.video_url)
}
#endif
void VkVideoView::set_video_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkVideoView.video_url)
}
void VkVideoView::set_video_url(const char* value, size_t size) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkVideoView.video_url)
}
::std::string* VkVideoView::mutable_video_url() {
  set_has_video_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkVideoView.video_url)
  return video_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkVideoView::release_video_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkVideoView.video_url)
  clear_has_video_url();
  return video_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkVideoView::set_allocated_video_url(::std::string* video_url) {
  if (video_url != NULL) {
    set_has_video_url();
  } else {
    clear_has_video_url();
  }
  video_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkVideoView.video_url)
}

// optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 7;
bool VkVideoView::has_video_metadata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkVideoView::set_has_video_metadata() {
  _has_bits_[0] |= 0x00000008u;
}
void VkVideoView::clear_has_video_metadata() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkVideoView::clear_video_metadata() {
  if (video_metadata_ != NULL) video_metadata_->::ru::mail::go::webbase::blobs::VideoImportDoc::Clear();
  clear_has_video_metadata();
}
const ::ru::mail::go::webbase::blobs::VideoImportDoc& VkVideoView::video_metadata() const {
  const ::ru::mail::go::webbase::blobs::VideoImportDoc* p = video_metadata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.video_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VideoImportDoc*>(
      &::ru::mail::go::webbase::blobs::_VideoImportDoc_default_instance_);
}
::ru::mail::go::webbase::blobs::VideoImportDoc* VkVideoView::mutable_video_metadata() {
  set_has_video_metadata();
  if (video_metadata_ == NULL) {
    video_metadata_ = new ::ru::mail::go::webbase::blobs::VideoImportDoc;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkVideoView.video_metadata)
  return video_metadata_;
}
::ru::mail::go::webbase::blobs::VideoImportDoc* VkVideoView::release_video_metadata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkVideoView.video_metadata)
  clear_has_video_metadata();
  ::ru::mail::go::webbase::blobs::VideoImportDoc* temp = video_metadata_;
  video_metadata_ = NULL;
  return temp;
}
void VkVideoView::set_allocated_video_metadata(::ru::mail::go::webbase::blobs::VideoImportDoc* video_metadata) {
  delete video_metadata_;
  video_metadata_ = video_metadata;
  if (video_metadata) {
    set_has_video_metadata();
  } else {
    clear_has_video_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkVideoView.video_metadata)
}

// optional int64 event_timestamp = 8;
bool VkVideoView::has_event_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VkVideoView::set_has_event_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
void VkVideoView::clear_has_event_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
void VkVideoView::clear_event_timestamp() {
  event_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_event_timestamp();
}
::google::protobuf::int64 VkVideoView::event_timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.event_timestamp)
  return event_timestamp_;
}
void VkVideoView::set_event_timestamp(::google::protobuf::int64 value) {
  set_has_event_timestamp();
  event_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoView.event_timestamp)
}

// optional string ref = 9;
bool VkVideoView::has_ref() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkVideoView::set_has_ref() {
  _has_bits_[0] |= 0x00000004u;
}
void VkVideoView::clear_has_ref() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkVideoView::clear_ref() {
  ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ref();
}
const ::std::string& VkVideoView::ref() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.ref)
  return ref_.GetNoArena();
}
void VkVideoView::set_ref(const ::std::string& value) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoView.ref)
}
#if LANG_CXX11
void VkVideoView::set_ref(::std::string&& value) {
  set_has_ref();
  ref_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkVideoView.ref)
}
#endif
void VkVideoView::set_ref(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkVideoView.ref)
}
void VkVideoView::set_ref(const char* value, size_t size) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkVideoView.ref)
}
::std::string* VkVideoView::mutable_ref() {
  set_has_ref();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkVideoView.ref)
  return ref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkVideoView::release_ref() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkVideoView.ref)
  clear_has_ref();
  return ref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkVideoView::set_allocated_ref(::std::string* ref) {
  if (ref != NULL) {
    set_has_ref();
  } else {
    clear_has_ref();
  }
  ref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ref);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkVideoView.ref)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoView::kMrcuFieldNumber;
const int VideoView::kVideoUrlFieldNumber;
const int VideoView::kVideoMetadataFieldNumber;
const int VideoView::kEventTimestampFieldNumber;
const int VideoView::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoView::VideoView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VideoView)
}
VideoView::VideoView(const VideoView& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mrcu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mrcu()) {
    mrcu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mrcu_);
  }
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_url()) {
    video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.has_video_metadata()) {
    video_metadata_ = new ::ru::mail::go::webbase::blobs::VideoImportDoc(*from.video_metadata_);
  } else {
    video_metadata_ = NULL;
  }
  event_timestamp_ = from.event_timestamp_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VideoView)
}

void VideoView::SharedCtor() {
  _cached_size_ = 0;
  mrcu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&video_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_timestamp_) -
      reinterpret_cast<char*>(&video_metadata_)) + sizeof(event_timestamp_));
}

VideoView::~VideoView() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VideoView)
  SharedDtor();
}

void VideoView::SharedDtor() {
  mrcu_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete video_metadata_;
}

void VideoView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoView::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoView& VideoView::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoView* VideoView::New(::google::protobuf::Arena* arena) const {
  VideoView* n = new VideoView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoView::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VideoView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!mrcu_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mrcu_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!video_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*video_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(video_metadata_ != NULL);
      video_metadata_->::ru::mail::go::webbase::blobs::VideoImportDoc::Clear();
    }
  }
  event_timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VideoView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mrcu = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mrcu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mrcu().data(), static_cast<int>(this->mrcu().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoView.mrcu");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string video_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_url().data(), static_cast<int>(this->video_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoView.video_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 event_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_event_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &event_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoView.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VideoView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VideoView)
  return false;
#undef DO_
}

void VideoView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VideoView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string mrcu = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mrcu().data(), static_cast<int>(this->mrcu().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoView.mrcu");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mrcu(), output);
  }

  // required string video_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), static_cast<int>(this->video_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoView.video_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->video_url(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->video_metadata_, output);
  }

  // optional int64 event_timestamp = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->event_timestamp(), output);
  }

  // optional string query = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoView.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VideoView)
}

::google::protobuf::uint8* VideoView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VideoView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string mrcu = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mrcu().data(), static_cast<int>(this->mrcu().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoView.mrcu");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mrcu(), target);
  }

  // required string video_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), static_cast<int>(this->video_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoView.video_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->video_url(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->video_metadata_, deterministic, target);
  }

  // optional int64 event_timestamp = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->event_timestamp(), target);
  }

  // optional string query = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoView.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VideoView)
  return target;
}

size_t VideoView::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.VideoView)
  size_t total_size = 0;

  if (has_mrcu()) {
    // required string mrcu = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mrcu());
  }

  if (has_video_url()) {
    // required string video_url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->video_url());
  }

  return total_size;
}
size_t VideoView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VideoView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string mrcu = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mrcu());

    // required string video_url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->video_url());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 28u) {
    // optional string query = 5;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 3;
    if (has_video_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_metadata_);
    }

    // optional int64 event_timestamp = 4;
    if (has_event_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->event_timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VideoView)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoView* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VideoView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VideoView)
    MergeFrom(*source);
  }
}

void VideoView::MergeFrom(const VideoView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VideoView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mrcu();
      mrcu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mrcu_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_video_url();
      video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_video_metadata()->::ru::mail::go::webbase::blobs::VideoImportDoc::MergeFrom(from.video_metadata());
    }
    if (cached_has_bits & 0x00000010u) {
      event_timestamp_ = from.event_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VideoView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoView::CopyFrom(const VideoView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VideoView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoView::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void VideoView::Swap(VideoView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoView::InternalSwap(VideoView* other) {
  using std::swap;
  mrcu_.Swap(&other->mrcu_);
  video_url_.Swap(&other->video_url_);
  query_.Swap(&other->query_);
  swap(video_metadata_, other->video_metadata_);
  swap(event_timestamp_, other->event_timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoView::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoView

// required string mrcu = 1;
bool VideoView::has_mrcu() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoView::set_has_mrcu() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoView::clear_has_mrcu() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoView::clear_mrcu() {
  mrcu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mrcu();
}
const ::std::string& VideoView::mrcu() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoView.mrcu)
  return mrcu_.GetNoArena();
}
void VideoView::set_mrcu(const ::std::string& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoView.mrcu)
}
#if LANG_CXX11
void VideoView::set_mrcu(::std::string&& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoView.mrcu)
}
#endif
void VideoView::set_mrcu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoView.mrcu)
}
void VideoView::set_mrcu(const char* value, size_t size) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoView.mrcu)
}
::std::string* VideoView::mutable_mrcu() {
  set_has_mrcu();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoView.mrcu)
  return mrcu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoView::release_mrcu() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoView.mrcu)
  clear_has_mrcu();
  return mrcu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoView::set_allocated_mrcu(::std::string* mrcu) {
  if (mrcu != NULL) {
    set_has_mrcu();
  } else {
    clear_has_mrcu();
  }
  mrcu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mrcu);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoView.mrcu)
}

// required string video_url = 2;
bool VideoView::has_video_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VideoView::set_has_video_url() {
  _has_bits_[0] |= 0x00000002u;
}
void VideoView::clear_has_video_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void VideoView::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_url();
}
const ::std::string& VideoView::video_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoView.video_url)
  return video_url_.GetNoArena();
}
void VideoView::set_video_url(const ::std::string& value) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoView.video_url)
}
#if LANG_CXX11
void VideoView::set_video_url(::std::string&& value) {
  set_has_video_url();
  video_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoView.video_url)
}
#endif
void VideoView::set_video_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoView.video_url)
}
void VideoView::set_video_url(const char* value, size_t size) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoView.video_url)
}
::std::string* VideoView::mutable_video_url() {
  set_has_video_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoView.video_url)
  return video_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoView::release_video_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoView.video_url)
  clear_has_video_url();
  return video_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoView::set_allocated_video_url(::std::string* video_url) {
  if (video_url != NULL) {
    set_has_video_url();
  } else {
    clear_has_video_url();
  }
  video_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoView.video_url)
}

// optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 3;
bool VideoView::has_video_metadata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VideoView::set_has_video_metadata() {
  _has_bits_[0] |= 0x00000008u;
}
void VideoView::clear_has_video_metadata() {
  _has_bits_[0] &= ~0x00000008u;
}
void VideoView::clear_video_metadata() {
  if (video_metadata_ != NULL) video_metadata_->::ru::mail::go::webbase::blobs::VideoImportDoc::Clear();
  clear_has_video_metadata();
}
const ::ru::mail::go::webbase::blobs::VideoImportDoc& VideoView::video_metadata() const {
  const ::ru::mail::go::webbase::blobs::VideoImportDoc* p = video_metadata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoView.video_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VideoImportDoc*>(
      &::ru::mail::go::webbase::blobs::_VideoImportDoc_default_instance_);
}
::ru::mail::go::webbase::blobs::VideoImportDoc* VideoView::mutable_video_metadata() {
  set_has_video_metadata();
  if (video_metadata_ == NULL) {
    video_metadata_ = new ::ru::mail::go::webbase::blobs::VideoImportDoc;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoView.video_metadata)
  return video_metadata_;
}
::ru::mail::go::webbase::blobs::VideoImportDoc* VideoView::release_video_metadata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoView.video_metadata)
  clear_has_video_metadata();
  ::ru::mail::go::webbase::blobs::VideoImportDoc* temp = video_metadata_;
  video_metadata_ = NULL;
  return temp;
}
void VideoView::set_allocated_video_metadata(::ru::mail::go::webbase::blobs::VideoImportDoc* video_metadata) {
  delete video_metadata_;
  video_metadata_ = video_metadata;
  if (video_metadata) {
    set_has_video_metadata();
  } else {
    clear_has_video_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoView.video_metadata)
}

// optional int64 event_timestamp = 4;
bool VideoView::has_event_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VideoView::set_has_event_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void VideoView::clear_has_event_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void VideoView::clear_event_timestamp() {
  event_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_event_timestamp();
}
::google::protobuf::int64 VideoView::event_timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoView.event_timestamp)
  return event_timestamp_;
}
void VideoView::set_event_timestamp(::google::protobuf::int64 value) {
  set_has_event_timestamp();
  event_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoView.event_timestamp)
}

// optional string query = 5;
bool VideoView::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VideoView::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
void VideoView::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
void VideoView::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& VideoView::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoView.query)
  return query_.GetNoArena();
}
void VideoView::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoView.query)
}
#if LANG_CXX11
void VideoView::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoView.query)
}
#endif
void VideoView::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoView.query)
}
void VideoView::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoView.query)
}
::std::string* VideoView::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoView.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoView::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoView.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoView::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoView.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoViewsList::kViewsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoViewsList::VideoViewsList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VideoViewsList)
}
VideoViewsList::VideoViewsList(const VideoViewsList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      views_(from.views_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VideoViewsList)
}

void VideoViewsList::SharedCtor() {
  _cached_size_ = 0;
}

VideoViewsList::~VideoViewsList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VideoViewsList)
  SharedDtor();
}

void VideoViewsList::SharedDtor() {
}

void VideoViewsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoViewsList::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoViewsList& VideoViewsList::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoViewsList* VideoViewsList::New(::google::protobuf::Arena* arena) const {
  VideoViewsList* n = new VideoViewsList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoViewsList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VideoViewsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  views_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoViewsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VideoViewsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.VideoView views = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_views()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VideoViewsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VideoViewsList)
  return false;
#undef DO_
}

void VideoViewsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VideoViewsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.VideoView views = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->views_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->views(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VideoViewsList)
}

::google::protobuf::uint8* VideoViewsList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VideoViewsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.VideoView views = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->views_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->views(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VideoViewsList)
  return target;
}

size_t VideoViewsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VideoViewsList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.VideoView views = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->views_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->views(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoViewsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VideoViewsList)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoViewsList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoViewsList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VideoViewsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VideoViewsList)
    MergeFrom(*source);
  }
}

void VideoViewsList::MergeFrom(const VideoViewsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VideoViewsList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  views_.MergeFrom(from.views_);
}

void VideoViewsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VideoViewsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoViewsList::CopyFrom(const VideoViewsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VideoViewsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoViewsList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->views())) return false;
  return true;
}

void VideoViewsList::Swap(VideoViewsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoViewsList::InternalSwap(VideoViewsList* other) {
  using std::swap;
  views_.InternalSwap(&other->views_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoViewsList::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoViewsList

// repeated .ru.mail.go.webbase.blobs.VideoView views = 1;
int VideoViewsList::views_size() const {
  return views_.size();
}
void VideoViewsList::clear_views() {
  views_.Clear();
}
const ::ru::mail::go::webbase::blobs::VideoView& VideoViewsList::views(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoViewsList.views)
  return views_.Get(index);
}
::ru::mail::go::webbase::blobs::VideoView* VideoViewsList::mutable_views(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoViewsList.views)
  return views_.Mutable(index);
}
::ru::mail::go::webbase::blobs::VideoView* VideoViewsList::add_views() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoViewsList.views)
  return views_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoView >*
VideoViewsList::mutable_views() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoViewsList.views)
  return &views_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoView >&
VideoViewsList::views() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoViewsList.views)
  return views_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoViewForRecs::kVideoUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoViewForRecs::VideoViewForRecs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VideoViewForRecs)
}
VideoViewForRecs::VideoViewForRecs(const VideoViewForRecs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_url()) {
    video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VideoViewForRecs)
}

void VideoViewForRecs::SharedCtor() {
  _cached_size_ = 0;
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VideoViewForRecs::~VideoViewForRecs() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VideoViewForRecs)
  SharedDtor();
}

void VideoViewForRecs::SharedDtor() {
  video_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoViewForRecs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoViewForRecs::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoViewForRecs& VideoViewForRecs::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoViewForRecs* VideoViewForRecs::New(::google::protobuf::Arena* arena) const {
  VideoViewForRecs* n = new VideoViewForRecs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoViewForRecs::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VideoViewForRecs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_video_url()) {
    GOOGLE_DCHECK(!video_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*video_url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoViewForRecs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VideoViewForRecs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string video_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_url().data(), static_cast<int>(this->video_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VideoViewForRecs.video_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VideoViewForRecs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VideoViewForRecs)
  return false;
#undef DO_
}

void VideoViewForRecs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VideoViewForRecs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string video_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), static_cast<int>(this->video_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoViewForRecs.video_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->video_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VideoViewForRecs)
}

::google::protobuf::uint8* VideoViewForRecs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VideoViewForRecs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string video_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), static_cast<int>(this->video_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VideoViewForRecs.video_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->video_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VideoViewForRecs)
  return target;
}

size_t VideoViewForRecs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VideoViewForRecs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string video_url = 1;
  if (has_video_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->video_url());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoViewForRecs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VideoViewForRecs)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoViewForRecs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoViewForRecs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VideoViewForRecs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VideoViewForRecs)
    MergeFrom(*source);
  }
}

void VideoViewForRecs::MergeFrom(const VideoViewForRecs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VideoViewForRecs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_video_url()) {
    set_has_video_url();
    video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
  }
}

void VideoViewForRecs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VideoViewForRecs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoViewForRecs::CopyFrom(const VideoViewForRecs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VideoViewForRecs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoViewForRecs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void VideoViewForRecs::Swap(VideoViewForRecs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoViewForRecs::InternalSwap(VideoViewForRecs* other) {
  using std::swap;
  video_url_.Swap(&other->video_url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoViewForRecs::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoViewForRecs

// required string video_url = 1;
bool VideoViewForRecs::has_video_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoViewForRecs::set_has_video_url() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoViewForRecs::clear_has_video_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoViewForRecs::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_url();
}
const ::std::string& VideoViewForRecs::video_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoViewForRecs.video_url)
  return video_url_.GetNoArena();
}
void VideoViewForRecs::set_video_url(const ::std::string& value) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoViewForRecs.video_url)
}
#if LANG_CXX11
void VideoViewForRecs::set_video_url(::std::string&& value) {
  set_has_video_url();
  video_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoViewForRecs.video_url)
}
#endif
void VideoViewForRecs::set_video_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoViewForRecs.video_url)
}
void VideoViewForRecs::set_video_url(const char* value, size_t size) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoViewForRecs.video_url)
}
::std::string* VideoViewForRecs::mutable_video_url() {
  set_has_video_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoViewForRecs.video_url)
  return video_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoViewForRecs::release_video_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoViewForRecs.video_url)
  clear_has_video_url();
  return video_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoViewForRecs::set_allocated_video_url(::std::string* video_url) {
  if (video_url != NULL) {
    set_has_video_url();
  } else {
    clear_has_video_url();
  }
  video_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoViewForRecs.video_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkVideoSession::kSessionIdFieldNumber;
const int VkVideoSession::kIsMaleSessionFieldNumber;
const int VkVideoSession::kViewsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkVideoSession::VkVideoSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkVideoSession)
}
VkVideoSession::VkVideoSession(const VkVideoSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      views_(from.views_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_male_session_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(is_male_session_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkVideoSession)
}

void VkVideoSession::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_male_session_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(is_male_session_));
}

VkVideoSession::~VkVideoSession() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkVideoSession)
  SharedDtor();
}

void VkVideoSession::SharedDtor() {
}

void VkVideoSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkVideoSession::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkVideoSession& VkVideoSession::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkVideoSession* VkVideoSession::New(::google::protobuf::Arena* arena) const {
  VkVideoSession* n = new VkVideoSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkVideoSession::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkVideoSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  views_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_male_session_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(is_male_session_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkVideoSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkVideoSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_male_session = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_male_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_male_session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.VkVideoView views = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_views()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkVideoSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkVideoSession)
  return false;
#undef DO_
}

void VkVideoSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkVideoSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->session_id(), output);
  }

  // optional bool is_male_session = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_male_session(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.VkVideoView views = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->views_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->views(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkVideoSession)
}

::google::protobuf::uint8* VkVideoSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkVideoSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->session_id(), target);
  }

  // optional bool is_male_session = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_male_session(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.VkVideoView views = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->views_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->views(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkVideoSession)
  return target;
}

size_t VkVideoSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkVideoSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.VkVideoView views = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->views_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->views(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional bool is_male_session = 2;
    if (has_is_male_session()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkVideoSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkVideoSession)
  GOOGLE_DCHECK_NE(&from, this);
  const VkVideoSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkVideoSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkVideoSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkVideoSession)
    MergeFrom(*source);
  }
}

void VkVideoSession::MergeFrom(const VkVideoSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkVideoSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  views_.MergeFrom(from.views_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_male_session_ = from.is_male_session_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkVideoSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkVideoSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkVideoSession::CopyFrom(const VkVideoSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkVideoSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkVideoSession::IsInitialized() const {
  return true;
}

void VkVideoSession::Swap(VkVideoSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkVideoSession::InternalSwap(VkVideoSession* other) {
  using std::swap;
  views_.InternalSwap(&other->views_);
  swap(session_id_, other->session_id_);
  swap(is_male_session_, other->is_male_session_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkVideoSession::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkVideoSession

// optional int32 session_id = 1;
bool VkVideoSession::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkVideoSession::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
void VkVideoSession::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkVideoSession::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
::google::protobuf::int32 VkVideoSession::session_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoSession.session_id)
  return session_id_;
}
void VkVideoSession::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoSession.session_id)
}

// optional bool is_male_session = 2;
bool VkVideoSession::has_is_male_session() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkVideoSession::set_has_is_male_session() {
  _has_bits_[0] |= 0x00000002u;
}
void VkVideoSession::clear_has_is_male_session() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkVideoSession::clear_is_male_session() {
  is_male_session_ = false;
  clear_has_is_male_session();
}
bool VkVideoSession::is_male_session() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoSession.is_male_session)
  return is_male_session_;
}
void VkVideoSession::set_is_male_session(bool value) {
  set_has_is_male_session();
  is_male_session_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoSession.is_male_session)
}

// repeated .ru.mail.go.webbase.blobs.VkVideoView views = 3;
int VkVideoSession::views_size() const {
  return views_.size();
}
void VkVideoSession::clear_views() {
  views_.Clear();
}
const ::ru::mail::go::webbase::blobs::VkVideoView& VkVideoSession::views(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoSession.views)
  return views_.Get(index);
}
::ru::mail::go::webbase::blobs::VkVideoView* VkVideoSession::mutable_views(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkVideoSession.views)
  return views_.Mutable(index);
}
::ru::mail::go::webbase::blobs::VkVideoView* VkVideoSession::add_views() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkVideoSession.views)
  return views_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkVideoView >*
VkVideoSession::mutable_views() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkVideoSession.views)
  return &views_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkVideoView >&
VkVideoSession::views() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkVideoSession.views)
  return views_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoJointWatchesData::kCommonFieldNumber;
const int VideoJointWatchesData::kHighlyRecommendedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoJointWatchesData::VideoJointWatchesData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VideoJointWatchesData)
}
VideoJointWatchesData::VideoJointWatchesData(const VideoJointWatchesData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      common_(from.common_),
      highly_recommended_(from.highly_recommended_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VideoJointWatchesData)
}

void VideoJointWatchesData::SharedCtor() {
  _cached_size_ = 0;
}

VideoJointWatchesData::~VideoJointWatchesData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VideoJointWatchesData)
  SharedDtor();
}

void VideoJointWatchesData::SharedDtor() {
}

void VideoJointWatchesData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoJointWatchesData::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoJointWatchesData& VideoJointWatchesData::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoJointWatchesData* VideoJointWatchesData::New(::google::protobuf::Arena* arena) const {
  VideoJointWatchesData* n = new VideoJointWatchesData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoJointWatchesData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VideoJointWatchesData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  common_.Clear();
  highly_recommended_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoJointWatchesData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VideoJointWatchesData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.VideoViewForRecs common = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.VideoViewForRecs highly_recommended = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_highly_recommended()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VideoJointWatchesData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VideoJointWatchesData)
  return false;
#undef DO_
}

void VideoJointWatchesData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VideoJointWatchesData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.VideoViewForRecs common = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->common_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.webbase.blobs.VideoViewForRecs highly_recommended = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->highly_recommended_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->highly_recommended(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VideoJointWatchesData)
}

::google::protobuf::uint8* VideoJointWatchesData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VideoJointWatchesData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.VideoViewForRecs common = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->common_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->common(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.VideoViewForRecs highly_recommended = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->highly_recommended_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->highly_recommended(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VideoJointWatchesData)
  return target;
}

size_t VideoJointWatchesData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VideoJointWatchesData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.VideoViewForRecs common = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->common_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.blobs.VideoViewForRecs highly_recommended = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->highly_recommended_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->highly_recommended(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoJointWatchesData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VideoJointWatchesData)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoJointWatchesData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoJointWatchesData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VideoJointWatchesData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VideoJointWatchesData)
    MergeFrom(*source);
  }
}

void VideoJointWatchesData::MergeFrom(const VideoJointWatchesData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VideoJointWatchesData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  common_.MergeFrom(from.common_);
  highly_recommended_.MergeFrom(from.highly_recommended_);
}

void VideoJointWatchesData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VideoJointWatchesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoJointWatchesData::CopyFrom(const VideoJointWatchesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VideoJointWatchesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoJointWatchesData::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->common())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->highly_recommended())) return false;
  return true;
}

void VideoJointWatchesData::Swap(VideoJointWatchesData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoJointWatchesData::InternalSwap(VideoJointWatchesData* other) {
  using std::swap;
  common_.InternalSwap(&other->common_);
  highly_recommended_.InternalSwap(&other->highly_recommended_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoJointWatchesData::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoJointWatchesData

// repeated .ru.mail.go.webbase.blobs.VideoViewForRecs common = 1;
int VideoJointWatchesData::common_size() const {
  return common_.size();
}
void VideoJointWatchesData::clear_common() {
  common_.Clear();
}
const ::ru::mail::go::webbase::blobs::VideoViewForRecs& VideoJointWatchesData::common(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoJointWatchesData.common)
  return common_.Get(index);
}
::ru::mail::go::webbase::blobs::VideoViewForRecs* VideoJointWatchesData::mutable_common(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoJointWatchesData.common)
  return common_.Mutable(index);
}
::ru::mail::go::webbase::blobs::VideoViewForRecs* VideoJointWatchesData::add_common() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoJointWatchesData.common)
  return common_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoViewForRecs >*
VideoJointWatchesData::mutable_common() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoJointWatchesData.common)
  return &common_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoViewForRecs >&
VideoJointWatchesData::common() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoJointWatchesData.common)
  return common_;
}

// repeated .ru.mail.go.webbase.blobs.VideoViewForRecs highly_recommended = 2;
int VideoJointWatchesData::highly_recommended_size() const {
  return highly_recommended_.size();
}
void VideoJointWatchesData::clear_highly_recommended() {
  highly_recommended_.Clear();
}
const ::ru::mail::go::webbase::blobs::VideoViewForRecs& VideoJointWatchesData::highly_recommended(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoJointWatchesData.highly_recommended)
  return highly_recommended_.Get(index);
}
::ru::mail::go::webbase::blobs::VideoViewForRecs* VideoJointWatchesData::mutable_highly_recommended(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoJointWatchesData.highly_recommended)
  return highly_recommended_.Mutable(index);
}
::ru::mail::go::webbase::blobs::VideoViewForRecs* VideoJointWatchesData::add_highly_recommended() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoJointWatchesData.highly_recommended)
  return highly_recommended_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoViewForRecs >*
VideoJointWatchesData::mutable_highly_recommended() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoJointWatchesData.highly_recommended)
  return &highly_recommended_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoViewForRecs >&
VideoJointWatchesData::highly_recommended() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoJointWatchesData.highly_recommended)
  return highly_recommended_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkSessionOrVideoInfo::kVideoMetadataFieldNumber;
const int VkSessionOrVideoInfo::kIsIndexedFieldNumber;
const int VkSessionOrVideoInfo::kSessionIdFieldNumber;
const int VkSessionOrVideoInfo::kIsMaleSessionFieldNumber;
const int VkSessionOrVideoInfo::kViewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkSessionOrVideoInfo::VkSessionOrVideoInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
}
VkSessionOrVideoInfo::VkSessionOrVideoInfo(const VkSessionOrVideoInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_video_metadata()) {
    video_metadata_ = new ::ru::mail::go::webbase::blobs::VideoImportDoc(*from.video_metadata_);
  } else {
    video_metadata_ = NULL;
  }
  if (from.has_view()) {
    view_ = new ::ru::mail::go::webbase::blobs::VkVideoView(*from.view_);
  } else {
    view_ = NULL;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_male_session_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(is_male_session_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
}

void VkSessionOrVideoInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&video_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_male_session_) -
      reinterpret_cast<char*>(&video_metadata_)) + sizeof(is_male_session_));
}

VkSessionOrVideoInfo::~VkSessionOrVideoInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
  SharedDtor();
}

void VkSessionOrVideoInfo::SharedDtor() {
  if (this != internal_default_instance()) delete video_metadata_;
  if (this != internal_default_instance()) delete view_;
}

void VkSessionOrVideoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkSessionOrVideoInfo::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkSessionOrVideoInfo& VkSessionOrVideoInfo::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkSessionOrVideoInfo* VkSessionOrVideoInfo::New(::google::protobuf::Arena* arena) const {
  VkSessionOrVideoInfo* n = new VkSessionOrVideoInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkSessionOrVideoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(video_metadata_ != NULL);
      video_metadata_->::ru::mail::go::webbase::blobs::VideoImportDoc::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(view_ != NULL);
      view_->::ru::mail::go::webbase::blobs::VkVideoView::Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_male_session_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(is_male_session_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkSessionOrVideoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_indexed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_indexed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_indexed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_male_session = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_male_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_male_session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkVideoView view = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
  return false;
#undef DO_
}

void VkSessionOrVideoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->video_metadata_, output);
  }

  // optional bool is_indexed = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_indexed(), output);
  }

  // optional int32 session_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->session_id(), output);
  }

  // optional bool is_male_session = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_male_session(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkVideoView view = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->view_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
}

::google::protobuf::uint8* VkSessionOrVideoInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->video_metadata_, deterministic, target);
  }

  // optional bool is_indexed = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_indexed(), target);
  }

  // optional int32 session_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->session_id(), target);
  }

  // optional bool is_male_session = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_male_session(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkVideoView view = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->view_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
  return target;
}

size_t VkSessionOrVideoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 1;
    if (has_video_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_metadata_);
    }

    // optional .ru.mail.go.webbase.blobs.VkVideoView view = 5;
    if (has_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->view_);
    }

    // optional int32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional bool is_indexed = 2;
    if (has_is_indexed()) {
      total_size += 1 + 1;
    }

    // optional bool is_male_session = 4;
    if (has_is_male_session()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkSessionOrVideoInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VkSessionOrVideoInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkSessionOrVideoInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
    MergeFrom(*source);
  }
}

void VkSessionOrVideoInfo::MergeFrom(const VkSessionOrVideoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_video_metadata()->::ru::mail::go::webbase::blobs::VideoImportDoc::MergeFrom(from.video_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_view()->::ru::mail::go::webbase::blobs::VkVideoView::MergeFrom(from.view());
    }
    if (cached_has_bits & 0x00000004u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_indexed_ = from.is_indexed_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_male_session_ = from.is_male_session_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkSessionOrVideoInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkSessionOrVideoInfo::CopyFrom(const VkSessionOrVideoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkSessionOrVideoInfo::IsInitialized() const {
  return true;
}

void VkSessionOrVideoInfo::Swap(VkSessionOrVideoInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkSessionOrVideoInfo::InternalSwap(VkSessionOrVideoInfo* other) {
  using std::swap;
  swap(video_metadata_, other->video_metadata_);
  swap(view_, other->view_);
  swap(session_id_, other->session_id_);
  swap(is_indexed_, other->is_indexed_);
  swap(is_male_session_, other->is_male_session_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkSessionOrVideoInfo::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkSessionOrVideoInfo

// optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 1;
bool VkSessionOrVideoInfo::has_video_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkSessionOrVideoInfo::set_has_video_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void VkSessionOrVideoInfo::clear_has_video_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkSessionOrVideoInfo::clear_video_metadata() {
  if (video_metadata_ != NULL) video_metadata_->::ru::mail::go::webbase::blobs::VideoImportDoc::Clear();
  clear_has_video_metadata();
}
const ::ru::mail::go::webbase::blobs::VideoImportDoc& VkSessionOrVideoInfo::video_metadata() const {
  const ::ru::mail::go::webbase::blobs::VideoImportDoc* p = video_metadata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.video_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VideoImportDoc*>(
      &::ru::mail::go::webbase::blobs::_VideoImportDoc_default_instance_);
}
::ru::mail::go::webbase::blobs::VideoImportDoc* VkSessionOrVideoInfo::mutable_video_metadata() {
  set_has_video_metadata();
  if (video_metadata_ == NULL) {
    video_metadata_ = new ::ru::mail::go::webbase::blobs::VideoImportDoc;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.video_metadata)
  return video_metadata_;
}
::ru::mail::go::webbase::blobs::VideoImportDoc* VkSessionOrVideoInfo::release_video_metadata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.video_metadata)
  clear_has_video_metadata();
  ::ru::mail::go::webbase::blobs::VideoImportDoc* temp = video_metadata_;
  video_metadata_ = NULL;
  return temp;
}
void VkSessionOrVideoInfo::set_allocated_video_metadata(::ru::mail::go::webbase::blobs::VideoImportDoc* video_metadata) {
  delete video_metadata_;
  video_metadata_ = video_metadata;
  if (video_metadata) {
    set_has_video_metadata();
  } else {
    clear_has_video_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.video_metadata)
}

// optional bool is_indexed = 2;
bool VkSessionOrVideoInfo::has_is_indexed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkSessionOrVideoInfo::set_has_is_indexed() {
  _has_bits_[0] |= 0x00000008u;
}
void VkSessionOrVideoInfo::clear_has_is_indexed() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkSessionOrVideoInfo::clear_is_indexed() {
  is_indexed_ = false;
  clear_has_is_indexed();
}
bool VkSessionOrVideoInfo::is_indexed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.is_indexed)
  return is_indexed_;
}
void VkSessionOrVideoInfo::set_is_indexed(bool value) {
  set_has_is_indexed();
  is_indexed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.is_indexed)
}

// optional int32 session_id = 3;
bool VkSessionOrVideoInfo::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkSessionOrVideoInfo::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void VkSessionOrVideoInfo::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkSessionOrVideoInfo::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
::google::protobuf::int32 VkSessionOrVideoInfo::session_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.session_id)
  return session_id_;
}
void VkSessionOrVideoInfo::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.session_id)
}

// optional bool is_male_session = 4;
bool VkSessionOrVideoInfo::has_is_male_session() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VkSessionOrVideoInfo::set_has_is_male_session() {
  _has_bits_[0] |= 0x00000010u;
}
void VkSessionOrVideoInfo::clear_has_is_male_session() {
  _has_bits_[0] &= ~0x00000010u;
}
void VkSessionOrVideoInfo::clear_is_male_session() {
  is_male_session_ = false;
  clear_has_is_male_session();
}
bool VkSessionOrVideoInfo::is_male_session() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.is_male_session)
  return is_male_session_;
}
void VkSessionOrVideoInfo::set_is_male_session(bool value) {
  set_has_is_male_session();
  is_male_session_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.is_male_session)
}

// optional .ru.mail.go.webbase.blobs.VkVideoView view = 5;
bool VkSessionOrVideoInfo::has_view() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkSessionOrVideoInfo::set_has_view() {
  _has_bits_[0] |= 0x00000002u;
}
void VkSessionOrVideoInfo::clear_has_view() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkSessionOrVideoInfo::clear_view() {
  if (view_ != NULL) view_->::ru::mail::go::webbase::blobs::VkVideoView::Clear();
  clear_has_view();
}
const ::ru::mail::go::webbase::blobs::VkVideoView& VkSessionOrVideoInfo::view() const {
  const ::ru::mail::go::webbase::blobs::VkVideoView* p = view_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.view)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkVideoView*>(
      &::ru::mail::go::webbase::blobs::_VkVideoView_default_instance_);
}
::ru::mail::go::webbase::blobs::VkVideoView* VkSessionOrVideoInfo::mutable_view() {
  set_has_view();
  if (view_ == NULL) {
    view_ = new ::ru::mail::go::webbase::blobs::VkVideoView;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.view)
  return view_;
}
::ru::mail::go::webbase::blobs::VkVideoView* VkSessionOrVideoInfo::release_view() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.view)
  clear_has_view();
  ::ru::mail::go::webbase::blobs::VkVideoView* temp = view_;
  view_ = NULL;
  return temp;
}
void VkSessionOrVideoInfo::set_allocated_view(::ru::mail::go::webbase::blobs::VkVideoView* view) {
  delete view_;
  view_ = view;
  if (view) {
    set_has_view();
  } else {
    clear_has_view();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.view)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkVideoIds::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkVideoIds::VkVideoIds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkVideoIds)
}
VkVideoIds::VkVideoIds(const VkVideoIds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkVideoIds)
}

void VkVideoIds::SharedCtor() {
  _cached_size_ = 0;
}

VkVideoIds::~VkVideoIds() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkVideoIds)
  SharedDtor();
}

void VkVideoIds::SharedDtor() {
}

void VkVideoIds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkVideoIds::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkVideoIds& VkVideoIds::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkVideoIds* VkVideoIds::New(::google::protobuf::Arena* arena) const {
  VkVideoIds* n = new VkVideoIds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkVideoIds::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkVideoIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkVideoIds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkVideoIds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ids(this->ids_size() - 1).data(),
            static_cast<int>(this->ids(this->ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkVideoIds.ids");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkVideoIds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkVideoIds)
  return false;
#undef DO_
}

void VkVideoIds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkVideoIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ids(i).data(), static_cast<int>(this->ids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkVideoIds.ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkVideoIds)
}

::google::protobuf::uint8* VkVideoIds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkVideoIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ids(i).data(), static_cast<int>(this->ids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkVideoIds.ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkVideoIds)
  return target;
}

size_t VkVideoIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkVideoIds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ids_size());
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkVideoIds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkVideoIds)
  GOOGLE_DCHECK_NE(&from, this);
  const VkVideoIds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkVideoIds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkVideoIds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkVideoIds)
    MergeFrom(*source);
  }
}

void VkVideoIds::MergeFrom(const VkVideoIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkVideoIds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void VkVideoIds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkVideoIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkVideoIds::CopyFrom(const VkVideoIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkVideoIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkVideoIds::IsInitialized() const {
  return true;
}

void VkVideoIds::Swap(VkVideoIds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkVideoIds::InternalSwap(VkVideoIds* other) {
  using std::swap;
  ids_.InternalSwap(&other->ids_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkVideoIds::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkVideoIds

// repeated string ids = 1;
int VkVideoIds::ids_size() const {
  return ids_.size();
}
void VkVideoIds::clear_ids() {
  ids_.Clear();
}
const ::std::string& VkVideoIds::ids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoIds.ids)
  return ids_.Get(index);
}
::std::string* VkVideoIds::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkVideoIds.ids)
  return ids_.Mutable(index);
}
void VkVideoIds::set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoIds.ids)
  ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VkVideoIds::set_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoIds.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
#endif
void VkVideoIds::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkVideoIds.ids)
}
void VkVideoIds::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkVideoIds.ids)
}
::std::string* VkVideoIds::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkVideoIds.ids)
  return ids_.Add();
}
void VkVideoIds::add_ids(const ::std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkVideoIds.ids)
}
#if LANG_CXX11
void VkVideoIds::add_ids(::std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkVideoIds.ids)
}
#endif
void VkVideoIds::add_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkVideoIds.ids)
}
void VkVideoIds::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkVideoIds.ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkVideoIds::ids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkVideoIds.ids)
  return ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VkVideoIds::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkVideoIds.ids)
  return &ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeriesEpisode::kSeriesIdFieldNumber;
const int SeriesEpisode::kSeasonFieldNumber;
const int SeriesEpisode::kEpisodeFieldNumber;
const int SeriesEpisode::kDurationFieldNumber;
const int SeriesEpisode::kSourceIdFieldNumber;
const int SeriesEpisode::kVideoTableKeyFieldNumber;
const int SeriesEpisode::kTrustedSourceFieldNumber;
const int SeriesEpisode::kHostingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeriesEpisode::SeriesEpisode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SeriesEpisode)
}
SeriesEpisode::SeriesEpisode(const SeriesEpisode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  video_table_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_table_key()) {
    video_table_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_table_key_);
  }
  hosting_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hosting()) {
    hosting_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hosting_);
  }
  ::memcpy(&series_id_, &from.series_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trusted_source_) -
    reinterpret_cast<char*>(&series_id_)) + sizeof(trusted_source_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SeriesEpisode)
}

void SeriesEpisode::SharedCtor() {
  _cached_size_ = 0;
  video_table_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hosting_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&series_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trusted_source_) -
      reinterpret_cast<char*>(&series_id_)) + sizeof(trusted_source_));
}

SeriesEpisode::~SeriesEpisode() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SeriesEpisode)
  SharedDtor();
}

void SeriesEpisode::SharedDtor() {
  video_table_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hosting_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SeriesEpisode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeriesEpisode::descriptor() {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeriesEpisode& SeriesEpisode::default_instance() {
  protobuf_video_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeriesEpisode* SeriesEpisode::New(::google::protobuf::Arena* arena) const {
  SeriesEpisode* n = new SeriesEpisode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeriesEpisode::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SeriesEpisode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!video_table_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*video_table_key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!hosting_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hosting_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&series_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trusted_source_) -
        reinterpret_cast<char*>(&series_id_)) + sizeof(trusted_source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SeriesEpisode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SeriesEpisode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 series_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_series_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 season = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_season();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 episode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_episode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &episode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sourceId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sourceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes video_table_key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_video_table_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool trusted_source = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_trusted_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trusted_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hosting = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hosting()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hosting().data(), static_cast<int>(this->hosting().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SeriesEpisode.hosting");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SeriesEpisode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SeriesEpisode)
  return false;
#undef DO_
}

void SeriesEpisode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SeriesEpisode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 series_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->series_id(), output);
  }

  // optional int32 season = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->season(), output);
  }

  // optional int32 episode = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->episode(), output);
  }

  // optional int32 duration = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->duration(), output);
  }

  // optional int32 sourceId = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sourceid(), output);
  }

  // optional bytes video_table_key = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->video_table_key(), output);
  }

  // optional bool trusted_source = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->trusted_source(), output);
  }

  // optional string hosting = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hosting().data(), static_cast<int>(this->hosting().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SeriesEpisode.hosting");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->hosting(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SeriesEpisode)
}

::google::protobuf::uint8* SeriesEpisode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SeriesEpisode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 series_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->series_id(), target);
  }

  // optional int32 season = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->season(), target);
  }

  // optional int32 episode = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->episode(), target);
  }

  // optional int32 duration = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->duration(), target);
  }

  // optional int32 sourceId = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sourceid(), target);
  }

  // optional bytes video_table_key = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->video_table_key(), target);
  }

  // optional bool trusted_source = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->trusted_source(), target);
  }

  // optional string hosting = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hosting().data(), static_cast<int>(this->hosting().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SeriesEpisode.hosting");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->hosting(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SeriesEpisode)
  return target;
}

size_t SeriesEpisode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SeriesEpisode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes video_table_key = 6;
    if (has_video_table_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->video_table_key());
    }

    // optional string hosting = 8;
    if (has_hosting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hosting());
    }

    // optional int32 series_id = 1;
    if (has_series_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->series_id());
    }

    // optional int32 season = 2;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season());
    }

    // optional int32 episode = 3;
    if (has_episode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->episode());
    }

    // optional int32 duration = 4;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 sourceId = 5;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourceid());
    }

    // optional bool trusted_source = 7;
    if (has_trusted_source()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeriesEpisode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SeriesEpisode)
  GOOGLE_DCHECK_NE(&from, this);
  const SeriesEpisode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeriesEpisode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SeriesEpisode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SeriesEpisode)
    MergeFrom(*source);
  }
}

void SeriesEpisode::MergeFrom(const SeriesEpisode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SeriesEpisode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_video_table_key();
      video_table_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_table_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hosting();
      hosting_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hosting_);
    }
    if (cached_has_bits & 0x00000004u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000010u) {
      episode_ = from.episode_;
    }
    if (cached_has_bits & 0x00000020u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000040u) {
      sourceid_ = from.sourceid_;
    }
    if (cached_has_bits & 0x00000080u) {
      trusted_source_ = from.trusted_source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SeriesEpisode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SeriesEpisode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeriesEpisode::CopyFrom(const SeriesEpisode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SeriesEpisode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeriesEpisode::IsInitialized() const {
  return true;
}

void SeriesEpisode::Swap(SeriesEpisode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeriesEpisode::InternalSwap(SeriesEpisode* other) {
  using std::swap;
  video_table_key_.Swap(&other->video_table_key_);
  hosting_.Swap(&other->hosting_);
  swap(series_id_, other->series_id_);
  swap(season_, other->season_);
  swap(episode_, other->episode_);
  swap(duration_, other->duration_);
  swap(sourceid_, other->sourceid_);
  swap(trusted_source_, other->trusted_source_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeriesEpisode::GetMetadata() const {
  protobuf_video_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeriesEpisode

// optional int32 series_id = 1;
bool SeriesEpisode::has_series_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SeriesEpisode::set_has_series_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SeriesEpisode::clear_has_series_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SeriesEpisode::clear_series_id() {
  series_id_ = 0;
  clear_has_series_id();
}
::google::protobuf::int32 SeriesEpisode::series_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SeriesEpisode.series_id)
  return series_id_;
}
void SeriesEpisode::set_series_id(::google::protobuf::int32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SeriesEpisode.series_id)
}

// optional int32 season = 2;
bool SeriesEpisode::has_season() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SeriesEpisode::set_has_season() {
  _has_bits_[0] |= 0x00000008u;
}
void SeriesEpisode::clear_has_season() {
  _has_bits_[0] &= ~0x00000008u;
}
void SeriesEpisode::clear_season() {
  season_ = 0;
  clear_has_season();
}
::google::protobuf::int32 SeriesEpisode::season() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SeriesEpisode.season)
  return season_;
}
void SeriesEpisode::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SeriesEpisode.season)
}

// optional int32 episode = 3;
bool SeriesEpisode::has_episode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SeriesEpisode::set_has_episode() {
  _has_bits_[0] |= 0x00000010u;
}
void SeriesEpisode::clear_has_episode() {
  _has_bits_[0] &= ~0x00000010u;
}
void SeriesEpisode::clear_episode() {
  episode_ = 0;
  clear_has_episode();
}
::google::protobuf::int32 SeriesEpisode::episode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SeriesEpisode.episode)
  return episode_;
}
void SeriesEpisode::set_episode(::google::protobuf::int32 value) {
  set_has_episode();
  episode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SeriesEpisode.episode)
}

// optional int32 duration = 4;
bool SeriesEpisode::has_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SeriesEpisode::set_has_duration() {
  _has_bits_[0] |= 0x00000020u;
}
void SeriesEpisode::clear_has_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
void SeriesEpisode::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
::google::protobuf::int32 SeriesEpisode::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SeriesEpisode.duration)
  return duration_;
}
void SeriesEpisode::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SeriesEpisode.duration)
}

// optional int32 sourceId = 5;
bool SeriesEpisode::has_sourceid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SeriesEpisode::set_has_sourceid() {
  _has_bits_[0] |= 0x00000040u;
}
void SeriesEpisode::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000040u;
}
void SeriesEpisode::clear_sourceid() {
  sourceid_ = 0;
  clear_has_sourceid();
}
::google::protobuf::int32 SeriesEpisode::sourceid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SeriesEpisode.sourceId)
  return sourceid_;
}
void SeriesEpisode::set_sourceid(::google::protobuf::int32 value) {
  set_has_sourceid();
  sourceid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SeriesEpisode.sourceId)
}

// optional bytes video_table_key = 6;
bool SeriesEpisode::has_video_table_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SeriesEpisode::set_has_video_table_key() {
  _has_bits_[0] |= 0x00000001u;
}
void SeriesEpisode::clear_has_video_table_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void SeriesEpisode::clear_video_table_key() {
  video_table_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_table_key();
}
const ::std::string& SeriesEpisode::video_table_key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SeriesEpisode.video_table_key)
  return video_table_key_.GetNoArena();
}
void SeriesEpisode::set_video_table_key(const ::std::string& value) {
  set_has_video_table_key();
  video_table_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SeriesEpisode.video_table_key)
}
#if LANG_CXX11
void SeriesEpisode::set_video_table_key(::std::string&& value) {
  set_has_video_table_key();
  video_table_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SeriesEpisode.video_table_key)
}
#endif
void SeriesEpisode::set_video_table_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_table_key();
  video_table_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SeriesEpisode.video_table_key)
}
void SeriesEpisode::set_video_table_key(const void* value, size_t size) {
  set_has_video_table_key();
  video_table_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SeriesEpisode.video_table_key)
}
::std::string* SeriesEpisode::mutable_video_table_key() {
  set_has_video_table_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SeriesEpisode.video_table_key)
  return video_table_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SeriesEpisode::release_video_table_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SeriesEpisode.video_table_key)
  clear_has_video_table_key();
  return video_table_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SeriesEpisode::set_allocated_video_table_key(::std::string* video_table_key) {
  if (video_table_key != NULL) {
    set_has_video_table_key();
  } else {
    clear_has_video_table_key();
  }
  video_table_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_table_key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SeriesEpisode.video_table_key)
}

// optional bool trusted_source = 7;
bool SeriesEpisode::has_trusted_source() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SeriesEpisode::set_has_trusted_source() {
  _has_bits_[0] |= 0x00000080u;
}
void SeriesEpisode::clear_has_trusted_source() {
  _has_bits_[0] &= ~0x00000080u;
}
void SeriesEpisode::clear_trusted_source() {
  trusted_source_ = false;
  clear_has_trusted_source();
}
bool SeriesEpisode::trusted_source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SeriesEpisode.trusted_source)
  return trusted_source_;
}
void SeriesEpisode::set_trusted_source(bool value) {
  set_has_trusted_source();
  trusted_source_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SeriesEpisode.trusted_source)
}

// optional string hosting = 8;
bool SeriesEpisode::has_hosting() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SeriesEpisode::set_has_hosting() {
  _has_bits_[0] |= 0x00000002u;
}
void SeriesEpisode::clear_has_hosting() {
  _has_bits_[0] &= ~0x00000002u;
}
void SeriesEpisode::clear_hosting() {
  hosting_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hosting();
}
const ::std::string& SeriesEpisode::hosting() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SeriesEpisode.hosting)
  return hosting_.GetNoArena();
}
void SeriesEpisode::set_hosting(const ::std::string& value) {
  set_has_hosting();
  hosting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SeriesEpisode.hosting)
}
#if LANG_CXX11
void SeriesEpisode::set_hosting(::std::string&& value) {
  set_has_hosting();
  hosting_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SeriesEpisode.hosting)
}
#endif
void SeriesEpisode::set_hosting(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hosting();
  hosting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SeriesEpisode.hosting)
}
void SeriesEpisode::set_hosting(const char* value, size_t size) {
  set_has_hosting();
  hosting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SeriesEpisode.hosting)
}
::std::string* SeriesEpisode::mutable_hosting() {
  set_has_hosting();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SeriesEpisode.hosting)
  return hosting_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SeriesEpisode::release_hosting() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SeriesEpisode.hosting)
  clear_has_hosting();
  return hosting_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SeriesEpisode::set_allocated_hosting(::std::string* hosting) {
  if (hosting != NULL) {
    set_has_hosting();
  } else {
    clear_has_hosting();
  }
  hosting_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hosting);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SeriesEpisode.hosting)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
