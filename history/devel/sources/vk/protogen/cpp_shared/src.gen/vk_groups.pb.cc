// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vk_groups.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vk_groups.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class VkGroupLocationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkGroupLocation>
     _instance;
} _VkGroupLocation_default_instance_;
class VkGroupContactInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkGroupContactInfo>
     _instance;
} _VkGroupContactInfo_default_instance_;
class VkGroupImageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkGroupImageInfo>
     _instance;
} _VkGroupImageInfo_default_instance_;
class VkGroupCoverInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkGroupCoverInfo>
     _instance;
} _VkGroupCoverInfo_default_instance_;
class VkGroupMarketInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkGroupMarketInfo>
     _instance;
} _VkGroupMarketInfo_default_instance_;
class VkGroupPlaceInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkGroupPlaceInfo>
     _instance;
} _VkGroupPlaceInfo_default_instance_;
class VkGroupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkGroup>
     _instance;
} _VkGroup_default_instance_;

namespace protobuf_vk_5fgroups_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupLocation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupLocation, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupLocation, title_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupContactInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupContactInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupContactInfo, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupContactInfo, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupContactInfo, phone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupContactInfo, email_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupImageInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupImageInfo, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupImageInfo, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupImageInfo, height_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupCoverInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupCoverInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupCoverInfo, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupCoverInfo, images_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupMarketInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupMarketInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupMarketInfo, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupMarketInfo, price_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupMarketInfo, price_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupMarketInfo, main_album_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupMarketInfo, contact_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupMarketInfo, currency_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupMarketInfo, currency_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupMarketInfo, currency_text_),
  2,
  3,
  7,
  4,
  5,
  6,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupPlaceInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupPlaceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupPlaceInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupPlaceInfo, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupPlaceInfo, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupPlaceInfo, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupPlaceInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupPlaceInfo, country_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupPlaceInfo, city_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroupPlaceInfo, address_),
  3,
  0,
  4,
  5,
  1,
  6,
  7,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, screen_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, access_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, deactivation_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, has_photo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, page_status_bar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, age_limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, city_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, contacts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, cover_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, fixed_wall_post_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, main_album_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, main_section_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, members_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, place_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, public_date_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, site_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, start_date_ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, finish_date_ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, group_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, trending_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, verified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkGroup, wiki_page_),
  13,
  0,
  1,
  14,
  15,
  16,
  22,
  2,
  17,
  8,
  ~0u,
  9,
  10,
  3,
  18,
  19,
  21,
  11,
  20,
  12,
  4,
  5,
  25,
  26,
  6,
  23,
  24,
  7,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(VkGroupLocation)},
  { 9, 18, sizeof(VkGroupContactInfo)},
  { 22, 30, sizeof(VkGroupImageInfo)},
  { 33, 40, sizeof(VkGroupCoverInfo)},
  { 42, 55, sizeof(VkGroupMarketInfo)},
  { 63, 76, sizeof(VkGroupPlaceInfo)},
  { 84, 117, sizeof(VkGroup)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkGroupLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkGroupContactInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkGroupImageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkGroupCoverInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkGroupMarketInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkGroupPlaceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkGroup_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "vk_groups.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _VkGroupLocation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkGroupLocation_default_instance_);_VkGroupContactInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkGroupContactInfo_default_instance_);_VkGroupImageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkGroupImageInfo_default_instance_);_VkGroupCoverInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkGroupCoverInfo_default_instance_);_VkGroupMarketInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkGroupMarketInfo_default_instance_);_VkGroupPlaceInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkGroupPlaceInfo_default_instance_);_VkGroup_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkGroup_default_instance_);_VkGroup_default_instance_._instance.get_mutable()->city_ = const_cast< ::ru::mail::go::webbase::blobs::VkGroupLocation*>(
      ::ru::mail::go::webbase::blobs::VkGroupLocation::internal_default_instance());
  _VkGroup_default_instance_._instance.get_mutable()->country_ = const_cast< ::ru::mail::go::webbase::blobs::VkGroupLocation*>(
      ::ru::mail::go::webbase::blobs::VkGroupLocation::internal_default_instance());
  _VkGroup_default_instance_._instance.get_mutable()->cover_ = const_cast< ::ru::mail::go::webbase::blobs::VkGroupCoverInfo*>(
      ::ru::mail::go::webbase::blobs::VkGroupCoverInfo::internal_default_instance());
  _VkGroup_default_instance_._instance.get_mutable()->market_ = const_cast< ::ru::mail::go::webbase::blobs::VkGroupMarketInfo*>(
      ::ru::mail::go::webbase::blobs::VkGroupMarketInfo::internal_default_instance());
  _VkGroup_default_instance_._instance.get_mutable()->place_ = const_cast< ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo*>(
      ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017vk_groups.proto\022\030ru.mail.go.webbase.bl"
      "obs\",\n\017VkGroupLocation\022\n\n\002id\030\001 \001(\003\022\r\n\005ti"
      "tle\030\002 \001(\t\"Q\n\022VkGroupContactInfo\022\017\n\007user_"
      "id\030\001 \001(\003\022\014\n\004desc\030\002 \001(\t\022\r\n\005phone\030\003 \001(\t\022\r\n"
      "\005email\030\004 \001(\t\">\n\020VkGroupImageInfo\022\013\n\003url\030"
      "\001 \001(\t\022\r\n\005width\030\002 \001(\005\022\016\n\006height\030\003 \001(\005\"_\n\020"
      "VkGroupCoverInfo\022\017\n\007enabled\030\001 \001(\010\022:\n\006ima"
      "ges\030\002 \003(\0132*.ru.mail.go.webbase.blobs.VkG"
      "roupImageInfo\"\270\001\n\021VkGroupMarketInfo\022\017\n\007e"
      "nabled\030\001 \001(\010\022\021\n\tprice_min\030\002 \001(\005\022\021\n\tprice"
      "_max\030\003 \001(\005\022\025\n\rmain_album_id\030\004 \001(\003\022\022\n\ncon"
      "tact_id\030\005 \001(\003\022\023\n\013currency_id\030\006 \001(\003\022\025\n\rcu"
      "rrency_sign\030\007 \001(\t\022\025\n\rcurrency_text\030\010 \001(\t"
      "\"\226\001\n\020VkGroupPlaceInfo\022\n\n\002id\030\001 \001(\003\022\r\n\005tit"
      "le\030\002 \001(\t\022\020\n\010latitude\030\003 \001(\001\022\021\n\tlongitude\030"
      "\004 \001(\001\022\014\n\004type\030\005 \001(\t\022\022\n\ncountry_id\030\006 \001(\003\022"
      "\017\n\007city_id\030\007 \001(\003\022\017\n\007address\030\010 \001(\t\"\245\010\n\007Vk"
      "Group\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\023\n\013scree"
      "n_name\030\003 \001(\t\022A\n\014access_level\030\004 \001(\0162+.ru."
      "mail.go.webbase.blobs.VkGroupAccessType\022"
      "P\n\023deactivation_reason\030\005 \001(\01623.ru.mail.g"
      "o.webbase.blobs.VkGroupDeactivationReaso"
      "n\0223\n\004type\030\006 \001(\0162%.ru.mail.go.webbase.blo"
      "bs.VkGroupType\022\021\n\thas_photo\030\007 \001(\010\022\027\n\017pag"
      "e_status_bar\030\010 \001(\t\022=\n\nage_limits\030\t \001(\0162)"
      ".ru.mail.go.webbase.blobs.VkGroupAgeLimi"
      "t\0227\n\004city\030\n \001(\0132).ru.mail.go.webbase.blo"
      "bs.VkGroupLocation\022>\n\010contacts\030\013 \003(\0132,.r"
      "u.mail.go.webbase.blobs.VkGroupContactIn"
      "fo\022:\n\007country\030\014 \001(\0132).ru.mail.go.webbase"
      ".blobs.VkGroupLocation\0229\n\005cover\030\r \001(\0132*."
      "ru.mail.go.webbase.blobs.VkGroupCoverInf"
      "o\022\023\n\013description\030\016 \001(\t\022\032\n\022fixed_wall_pos"
      "t_id\030\017 \001(\003\022\025\n\rmain_album_id\030\020 \001(\003\022F\n\014mai"
      "n_section\030\021 \001(\01620.ru.mail.go.webbase.blo"
      "bs.VkGroupMainSectionType\022;\n\006market\030\022 \001("
      "\0132+.ru.mail.go.webbase.blobs.VkGroupMark"
      "etInfo\022\025\n\rmembers_count\030\023 \001(\003\0229\n\005place\030\024"
      " \001(\0132*.ru.mail.go.webbase.blobs.VkGroupP"
      "laceInfo\022\031\n\021public_date_label\030\025 \001(\t\022\020\n\010s"
      "ite_url\030\026 \001(\t\022\025\n\rstart_date_ts\030\027 \001(\003\022\026\n\016"
      "finish_date_ts\030\030 \001(\003\022\024\n\014group_status\030\031 \001"
      "(\t\022\020\n\010trending\030\032 \001(\010\022\020\n\010verified\030\033 \001(\010\022\021"
      "\n\twiki_page\030\034 \001(\t*6\n\021VkGroupAccessType\022\010"
      "\n\004OPEN\020\000\022\n\n\006CLOSED\020\001\022\013\n\007PRIVATE\020\002*-\n\013VkG"
      "roupType\022\t\n\005GROUP\020\000\022\010\n\004PAGE\020\001\022\t\n\005EVENT\020\002"
      "*9\n\017VkGroupAgeLimit\022\014\n\010NO_LIMIT\020\000\022\013\n\007FRO"
      "M_16\020\001\022\013\n\007FROM_18\020\002*4\n\031VkGroupDeactivati"
      "onReason\022\013\n\007DELETED\020\000\022\n\n\006BANNED\020\001*^\n\026VkG"
      "roupMainSectionType\022\010\n\004NONE\020\000\022\n\n\006PHOTOS\020"
      "\001\022\n\n\006TOPICS\020\002\022\n\n\006AUDIOS\020\003\022\n\n\006VIDEOS\020\004\022\n\n"
      "\006MARKET\020\005B\nB\010VkGroups"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2061);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vk_groups.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_vk_5fgroups_2eproto

const ::google::protobuf::EnumDescriptor* VkGroupAccessType_descriptor() {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_enum_descriptors[0];
}
bool VkGroupAccessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VkGroupType_descriptor() {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_enum_descriptors[1];
}
bool VkGroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VkGroupAgeLimit_descriptor() {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_enum_descriptors[2];
}
bool VkGroupAgeLimit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VkGroupDeactivationReason_descriptor() {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_enum_descriptors[3];
}
bool VkGroupDeactivationReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VkGroupMainSectionType_descriptor() {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_enum_descriptors[4];
}
bool VkGroupMainSectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkGroupLocation::kIdFieldNumber;
const int VkGroupLocation::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkGroupLocation::VkGroupLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fgroups_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkGroupLocation)
}
VkGroupLocation::VkGroupLocation(const VkGroupLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkGroupLocation)
}

void VkGroupLocation::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
}

VkGroupLocation::~VkGroupLocation() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkGroupLocation)
  SharedDtor();
}

void VkGroupLocation::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkGroupLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkGroupLocation::descriptor() {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkGroupLocation& VkGroupLocation::default_instance() {
  protobuf_vk_5fgroups_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkGroupLocation* VkGroupLocation::New(::google::protobuf::Arena* arena) const {
  VkGroupLocation* n = new VkGroupLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkGroupLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkGroupLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_title()) {
    GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*title_.UnsafeRawStringPointer())->clear();
  }
  id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkGroupLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkGroupLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroupLocation.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkGroupLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkGroupLocation)
  return false;
#undef DO_
}

void VkGroupLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkGroupLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupLocation.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkGroupLocation)
}

::google::protobuf::uint8* VkGroupLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkGroupLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupLocation.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkGroupLocation)
  return target;
}

size_t VkGroupLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkGroupLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkGroupLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkGroupLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const VkGroupLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkGroupLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkGroupLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkGroupLocation)
    MergeFrom(*source);
  }
}

void VkGroupLocation::MergeFrom(const VkGroupLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkGroupLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkGroupLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkGroupLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkGroupLocation::CopyFrom(const VkGroupLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkGroupLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkGroupLocation::IsInitialized() const {
  return true;
}

void VkGroupLocation::Swap(VkGroupLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkGroupLocation::InternalSwap(VkGroupLocation* other) {
  using std::swap;
  title_.Swap(&other->title_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkGroupLocation::GetMetadata() const {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkGroupLocation

// optional int64 id = 1;
bool VkGroupLocation::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkGroupLocation::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void VkGroupLocation::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkGroupLocation::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 VkGroupLocation::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupLocation.id)
  return id_;
}
void VkGroupLocation::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupLocation.id)
}

// optional string title = 2;
bool VkGroupLocation::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkGroupLocation::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void VkGroupLocation::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkGroupLocation::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& VkGroupLocation::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupLocation.title)
  return title_.GetNoArena();
}
void VkGroupLocation::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupLocation.title)
}
#if LANG_CXX11
void VkGroupLocation::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupLocation.title)
}
#endif
void VkGroupLocation::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupLocation.title)
}
void VkGroupLocation::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupLocation.title)
}
::std::string* VkGroupLocation::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupLocation.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroupLocation::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupLocation.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroupLocation::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupLocation.title)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkGroupContactInfo::kUserIdFieldNumber;
const int VkGroupContactInfo::kDescFieldNumber;
const int VkGroupContactInfo::kPhoneFieldNumber;
const int VkGroupContactInfo::kEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkGroupContactInfo::VkGroupContactInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fgroups_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkGroupContactInfo)
}
VkGroupContactInfo::VkGroupContactInfo(const VkGroupContactInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_phone()) {
    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email()) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkGroupContactInfo)
}

void VkGroupContactInfo::SharedCtor() {
  _cached_size_ = 0;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = GOOGLE_LONGLONG(0);
}

VkGroupContactInfo::~VkGroupContactInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkGroupContactInfo)
  SharedDtor();
}

void VkGroupContactInfo::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkGroupContactInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkGroupContactInfo::descriptor() {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkGroupContactInfo& VkGroupContactInfo::default_instance() {
  protobuf_vk_5fgroups_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkGroupContactInfo* VkGroupContactInfo::New(::google::protobuf::Arena* arena) const {
  VkGroupContactInfo* n = new VkGroupContactInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkGroupContactInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkGroupContactInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*desc_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!phone_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*phone_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!email_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*email_.UnsafeRawStringPointer())->clear();
    }
  }
  user_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkGroupContactInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkGroupContactInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroupContactInfo.desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string phone = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone().data(), static_cast<int>(this->phone().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroupContactInfo.phone");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string email = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), static_cast<int>(this->email().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroupContactInfo.email");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkGroupContactInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkGroupContactInfo)
  return false;
#undef DO_
}

void VkGroupContactInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkGroupContactInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 user_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupContactInfo.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // optional string phone = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupContactInfo.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->phone(), output);
  }

  // optional string email = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupContactInfo.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->email(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkGroupContactInfo)
}

::google::protobuf::uint8* VkGroupContactInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkGroupContactInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 user_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupContactInfo.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // optional string phone = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupContactInfo.phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phone(), target);
  }

  // optional string email = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupContactInfo.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->email(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkGroupContactInfo)
  return target;
}

size_t VkGroupContactInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkGroupContactInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string phone = 3;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkGroupContactInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkGroupContactInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VkGroupContactInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkGroupContactInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkGroupContactInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkGroupContactInfo)
    MergeFrom(*source);
  }
}

void VkGroupContactInfo::MergeFrom(const VkGroupContactInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkGroupContactInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_phone();
      phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (cached_has_bits & 0x00000008u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkGroupContactInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkGroupContactInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkGroupContactInfo::CopyFrom(const VkGroupContactInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkGroupContactInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkGroupContactInfo::IsInitialized() const {
  return true;
}

void VkGroupContactInfo::Swap(VkGroupContactInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkGroupContactInfo::InternalSwap(VkGroupContactInfo* other) {
  using std::swap;
  desc_.Swap(&other->desc_);
  phone_.Swap(&other->phone_);
  email_.Swap(&other->email_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkGroupContactInfo::GetMetadata() const {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkGroupContactInfo

// optional int64 user_id = 1;
bool VkGroupContactInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkGroupContactInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void VkGroupContactInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkGroupContactInfo::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 VkGroupContactInfo::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupContactInfo.user_id)
  return user_id_;
}
void VkGroupContactInfo::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupContactInfo.user_id)
}

// optional string desc = 2;
bool VkGroupContactInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkGroupContactInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
void VkGroupContactInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkGroupContactInfo::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& VkGroupContactInfo::desc() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupContactInfo.desc)
  return desc_.GetNoArena();
}
void VkGroupContactInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupContactInfo.desc)
}
#if LANG_CXX11
void VkGroupContactInfo::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupContactInfo.desc)
}
#endif
void VkGroupContactInfo::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupContactInfo.desc)
}
void VkGroupContactInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupContactInfo.desc)
}
::std::string* VkGroupContactInfo::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupContactInfo.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroupContactInfo::release_desc() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupContactInfo.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroupContactInfo::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupContactInfo.desc)
}

// optional string phone = 3;
bool VkGroupContactInfo::has_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkGroupContactInfo::set_has_phone() {
  _has_bits_[0] |= 0x00000002u;
}
void VkGroupContactInfo::clear_has_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkGroupContactInfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone();
}
const ::std::string& VkGroupContactInfo::phone() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupContactInfo.phone)
  return phone_.GetNoArena();
}
void VkGroupContactInfo::set_phone(const ::std::string& value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupContactInfo.phone)
}
#if LANG_CXX11
void VkGroupContactInfo::set_phone(::std::string&& value) {
  set_has_phone();
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupContactInfo.phone)
}
#endif
void VkGroupContactInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupContactInfo.phone)
}
void VkGroupContactInfo::set_phone(const char* value, size_t size) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupContactInfo.phone)
}
::std::string* VkGroupContactInfo::mutable_phone() {
  set_has_phone();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupContactInfo.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroupContactInfo::release_phone() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupContactInfo.phone)
  clear_has_phone();
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroupContactInfo::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    set_has_phone();
  } else {
    clear_has_phone();
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupContactInfo.phone)
}

// optional string email = 4;
bool VkGroupContactInfo::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkGroupContactInfo::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
void VkGroupContactInfo::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkGroupContactInfo::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
const ::std::string& VkGroupContactInfo::email() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupContactInfo.email)
  return email_.GetNoArena();
}
void VkGroupContactInfo::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupContactInfo.email)
}
#if LANG_CXX11
void VkGroupContactInfo::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupContactInfo.email)
}
#endif
void VkGroupContactInfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupContactInfo.email)
}
void VkGroupContactInfo::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupContactInfo.email)
}
::std::string* VkGroupContactInfo::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupContactInfo.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroupContactInfo::release_email() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupContactInfo.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroupContactInfo::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupContactInfo.email)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkGroupImageInfo::kUrlFieldNumber;
const int VkGroupImageInfo::kWidthFieldNumber;
const int VkGroupImageInfo::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkGroupImageInfo::VkGroupImageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fgroups_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkGroupImageInfo)
}
VkGroupImageInfo::VkGroupImageInfo(const VkGroupImageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkGroupImageInfo)
}

void VkGroupImageInfo::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

VkGroupImageInfo::~VkGroupImageInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkGroupImageInfo)
  SharedDtor();
}

void VkGroupImageInfo::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkGroupImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkGroupImageInfo::descriptor() {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkGroupImageInfo& VkGroupImageInfo::default_instance() {
  protobuf_vk_5fgroups_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkGroupImageInfo* VkGroupImageInfo::New(::google::protobuf::Arena* arena) const {
  VkGroupImageInfo* n = new VkGroupImageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkGroupImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkGroupImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkGroupImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkGroupImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroupImageInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkGroupImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkGroupImageInfo)
  return false;
#undef DO_
}

void VkGroupImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkGroupImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupImageInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional int32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkGroupImageInfo)
}

::google::protobuf::uint8* VkGroupImageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkGroupImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupImageInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional int32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkGroupImageInfo)
  return target;
}

size_t VkGroupImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkGroupImageInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkGroupImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkGroupImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VkGroupImageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkGroupImageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkGroupImageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkGroupImageInfo)
    MergeFrom(*source);
  }
}

void VkGroupImageInfo::MergeFrom(const VkGroupImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkGroupImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkGroupImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkGroupImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkGroupImageInfo::CopyFrom(const VkGroupImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkGroupImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkGroupImageInfo::IsInitialized() const {
  return true;
}

void VkGroupImageInfo::Swap(VkGroupImageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkGroupImageInfo::InternalSwap(VkGroupImageInfo* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkGroupImageInfo::GetMetadata() const {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkGroupImageInfo

// optional string url = 1;
bool VkGroupImageInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkGroupImageInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void VkGroupImageInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkGroupImageInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& VkGroupImageInfo::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupImageInfo.url)
  return url_.GetNoArena();
}
void VkGroupImageInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupImageInfo.url)
}
#if LANG_CXX11
void VkGroupImageInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupImageInfo.url)
}
#endif
void VkGroupImageInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupImageInfo.url)
}
void VkGroupImageInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupImageInfo.url)
}
::std::string* VkGroupImageInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupImageInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroupImageInfo::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupImageInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroupImageInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupImageInfo.url)
}

// optional int32 width = 2;
bool VkGroupImageInfo::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkGroupImageInfo::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
void VkGroupImageInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkGroupImageInfo::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 VkGroupImageInfo::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupImageInfo.width)
  return width_;
}
void VkGroupImageInfo::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupImageInfo.width)
}

// optional int32 height = 3;
bool VkGroupImageInfo::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkGroupImageInfo::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void VkGroupImageInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkGroupImageInfo::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 VkGroupImageInfo::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupImageInfo.height)
  return height_;
}
void VkGroupImageInfo::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupImageInfo.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkGroupCoverInfo::kEnabledFieldNumber;
const int VkGroupCoverInfo::kImagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkGroupCoverInfo::VkGroupCoverInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fgroups_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
}
VkGroupCoverInfo::VkGroupCoverInfo(const VkGroupCoverInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      images_(from.images_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
}

void VkGroupCoverInfo::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
}

VkGroupCoverInfo::~VkGroupCoverInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
  SharedDtor();
}

void VkGroupCoverInfo::SharedDtor() {
}

void VkGroupCoverInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkGroupCoverInfo::descriptor() {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkGroupCoverInfo& VkGroupCoverInfo::default_instance() {
  protobuf_vk_5fgroups_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkGroupCoverInfo* VkGroupCoverInfo::New(::google::protobuf::Arena* arena) const {
  VkGroupCoverInfo* n = new VkGroupCoverInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkGroupCoverInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkGroupCoverInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.VkGroupImageInfo images = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
  return false;
#undef DO_
}

void VkGroupCoverInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.VkGroupImageInfo images = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->images(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
}

::google::protobuf::uint8* VkGroupCoverInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.VkGroupImageInfo images = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->images(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
  return target;
}

size_t VkGroupCoverInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.VkGroupImageInfo images = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->images_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->images(static_cast<int>(i)));
    }
  }

  // optional bool enabled = 1;
  if (has_enabled()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkGroupCoverInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VkGroupCoverInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkGroupCoverInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
    MergeFrom(*source);
  }
}

void VkGroupCoverInfo::MergeFrom(const VkGroupCoverInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void VkGroupCoverInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkGroupCoverInfo::CopyFrom(const VkGroupCoverInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkGroupCoverInfo::IsInitialized() const {
  return true;
}

void VkGroupCoverInfo::Swap(VkGroupCoverInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkGroupCoverInfo::InternalSwap(VkGroupCoverInfo* other) {
  using std::swap;
  images_.InternalSwap(&other->images_);
  swap(enabled_, other->enabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkGroupCoverInfo::GetMetadata() const {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkGroupCoverInfo

// optional bool enabled = 1;
bool VkGroupCoverInfo::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkGroupCoverInfo::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void VkGroupCoverInfo::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkGroupCoverInfo::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool VkGroupCoverInfo::enabled() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupCoverInfo.enabled)
  return enabled_;
}
void VkGroupCoverInfo::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupCoverInfo.enabled)
}

// repeated .ru.mail.go.webbase.blobs.VkGroupImageInfo images = 2;
int VkGroupCoverInfo::images_size() const {
  return images_.size();
}
void VkGroupCoverInfo::clear_images() {
  images_.Clear();
}
const ::ru::mail::go::webbase::blobs::VkGroupImageInfo& VkGroupCoverInfo::images(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupCoverInfo.images)
  return images_.Get(index);
}
::ru::mail::go::webbase::blobs::VkGroupImageInfo* VkGroupCoverInfo::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupCoverInfo.images)
  return images_.Mutable(index);
}
::ru::mail::go::webbase::blobs::VkGroupImageInfo* VkGroupCoverInfo::add_images() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkGroupCoverInfo.images)
  return images_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkGroupImageInfo >*
VkGroupCoverInfo::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkGroupCoverInfo.images)
  return &images_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkGroupImageInfo >&
VkGroupCoverInfo::images() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkGroupCoverInfo.images)
  return images_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkGroupMarketInfo::kEnabledFieldNumber;
const int VkGroupMarketInfo::kPriceMinFieldNumber;
const int VkGroupMarketInfo::kPriceMaxFieldNumber;
const int VkGroupMarketInfo::kMainAlbumIdFieldNumber;
const int VkGroupMarketInfo::kContactIdFieldNumber;
const int VkGroupMarketInfo::kCurrencyIdFieldNumber;
const int VkGroupMarketInfo::kCurrencySignFieldNumber;
const int VkGroupMarketInfo::kCurrencyTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkGroupMarketInfo::VkGroupMarketInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fgroups_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
}
VkGroupMarketInfo::VkGroupMarketInfo(const VkGroupMarketInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency_sign()) {
    currency_sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_sign_);
  }
  currency_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency_text()) {
    currency_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_text_);
  }
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_max_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(price_max_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
}

void VkGroupMarketInfo::SharedCtor() {
  _cached_size_ = 0;
  currency_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_max_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(price_max_));
}

VkGroupMarketInfo::~VkGroupMarketInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
  SharedDtor();
}

void VkGroupMarketInfo::SharedDtor() {
  currency_sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkGroupMarketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkGroupMarketInfo::descriptor() {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkGroupMarketInfo& VkGroupMarketInfo::default_instance() {
  protobuf_vk_5fgroups_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkGroupMarketInfo* VkGroupMarketInfo::New(::google::protobuf::Arena* arena) const {
  VkGroupMarketInfo* n = new VkGroupMarketInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkGroupMarketInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!currency_sign_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currency_sign_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!currency_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currency_text_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_max_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(price_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkGroupMarketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 price_min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_price_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 price_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_price_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 main_album_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_main_album_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &main_album_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 contact_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_contact_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &contact_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 currency_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_currency_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currency_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string currency_sign = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency_sign().data(), static_cast<int>(this->currency_sign().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string currency_text = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency_text().data(), static_cast<int>(this->currency_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
  return false;
#undef DO_
}

void VkGroupMarketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional int32 price_min = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price_min(), output);
  }

  // optional int32 price_max = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price_max(), output);
  }

  // optional int64 main_album_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->main_album_id(), output);
  }

  // optional int64 contact_id = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->contact_id(), output);
  }

  // optional int64 currency_id = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->currency_id(), output);
  }

  // optional string currency_sign = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency_sign().data(), static_cast<int>(this->currency_sign().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->currency_sign(), output);
  }

  // optional string currency_text = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency_text().data(), static_cast<int>(this->currency_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->currency_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
}

::google::protobuf::uint8* VkGroupMarketInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional int32 price_min = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price_min(), target);
  }

  // optional int32 price_max = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price_max(), target);
  }

  // optional int64 main_album_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->main_album_id(), target);
  }

  // optional int64 contact_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->contact_id(), target);
  }

  // optional int64 currency_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->currency_id(), target);
  }

  // optional string currency_sign = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency_sign().data(), static_cast<int>(this->currency_sign().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->currency_sign(), target);
  }

  // optional string currency_text = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency_text().data(), static_cast<int>(this->currency_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->currency_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
  return target;
}

size_t VkGroupMarketInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string currency_sign = 7;
    if (has_currency_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_sign());
    }

    // optional string currency_text = 8;
    if (has_currency_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_text());
    }

    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional int32 price_min = 2;
    if (has_price_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_min());
    }

    // optional int64 main_album_id = 4;
    if (has_main_album_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->main_album_id());
    }

    // optional int64 contact_id = 5;
    if (has_contact_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->contact_id());
    }

    // optional int64 currency_id = 6;
    if (has_currency_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currency_id());
    }

    // optional int32 price_max = 3;
    if (has_price_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_max());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkGroupMarketInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VkGroupMarketInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkGroupMarketInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
    MergeFrom(*source);
  }
}

void VkGroupMarketInfo::MergeFrom(const VkGroupMarketInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_currency_sign();
      currency_sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_sign_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_currency_text();
      currency_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_text_);
    }
    if (cached_has_bits & 0x00000004u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      price_min_ = from.price_min_;
    }
    if (cached_has_bits & 0x00000010u) {
      main_album_id_ = from.main_album_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      contact_id_ = from.contact_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      currency_id_ = from.currency_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      price_max_ = from.price_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkGroupMarketInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkGroupMarketInfo::CopyFrom(const VkGroupMarketInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkGroupMarketInfo::IsInitialized() const {
  return true;
}

void VkGroupMarketInfo::Swap(VkGroupMarketInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkGroupMarketInfo::InternalSwap(VkGroupMarketInfo* other) {
  using std::swap;
  currency_sign_.Swap(&other->currency_sign_);
  currency_text_.Swap(&other->currency_text_);
  swap(enabled_, other->enabled_);
  swap(price_min_, other->price_min_);
  swap(main_album_id_, other->main_album_id_);
  swap(contact_id_, other->contact_id_);
  swap(currency_id_, other->currency_id_);
  swap(price_max_, other->price_max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkGroupMarketInfo::GetMetadata() const {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkGroupMarketInfo

// optional bool enabled = 1;
bool VkGroupMarketInfo::has_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkGroupMarketInfo::set_has_enabled() {
  _has_bits_[0] |= 0x00000004u;
}
void VkGroupMarketInfo::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkGroupMarketInfo::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool VkGroupMarketInfo::enabled() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupMarketInfo.enabled)
  return enabled_;
}
void VkGroupMarketInfo::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupMarketInfo.enabled)
}

// optional int32 price_min = 2;
bool VkGroupMarketInfo::has_price_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkGroupMarketInfo::set_has_price_min() {
  _has_bits_[0] |= 0x00000008u;
}
void VkGroupMarketInfo::clear_has_price_min() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkGroupMarketInfo::clear_price_min() {
  price_min_ = 0;
  clear_has_price_min();
}
::google::protobuf::int32 VkGroupMarketInfo::price_min() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupMarketInfo.price_min)
  return price_min_;
}
void VkGroupMarketInfo::set_price_min(::google::protobuf::int32 value) {
  set_has_price_min();
  price_min_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupMarketInfo.price_min)
}

// optional int32 price_max = 3;
bool VkGroupMarketInfo::has_price_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VkGroupMarketInfo::set_has_price_max() {
  _has_bits_[0] |= 0x00000080u;
}
void VkGroupMarketInfo::clear_has_price_max() {
  _has_bits_[0] &= ~0x00000080u;
}
void VkGroupMarketInfo::clear_price_max() {
  price_max_ = 0;
  clear_has_price_max();
}
::google::protobuf::int32 VkGroupMarketInfo::price_max() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupMarketInfo.price_max)
  return price_max_;
}
void VkGroupMarketInfo::set_price_max(::google::protobuf::int32 value) {
  set_has_price_max();
  price_max_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupMarketInfo.price_max)
}

// optional int64 main_album_id = 4;
bool VkGroupMarketInfo::has_main_album_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VkGroupMarketInfo::set_has_main_album_id() {
  _has_bits_[0] |= 0x00000010u;
}
void VkGroupMarketInfo::clear_has_main_album_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void VkGroupMarketInfo::clear_main_album_id() {
  main_album_id_ = GOOGLE_LONGLONG(0);
  clear_has_main_album_id();
}
::google::protobuf::int64 VkGroupMarketInfo::main_album_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupMarketInfo.main_album_id)
  return main_album_id_;
}
void VkGroupMarketInfo::set_main_album_id(::google::protobuf::int64 value) {
  set_has_main_album_id();
  main_album_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupMarketInfo.main_album_id)
}

// optional int64 contact_id = 5;
bool VkGroupMarketInfo::has_contact_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VkGroupMarketInfo::set_has_contact_id() {
  _has_bits_[0] |= 0x00000020u;
}
void VkGroupMarketInfo::clear_has_contact_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void VkGroupMarketInfo::clear_contact_id() {
  contact_id_ = GOOGLE_LONGLONG(0);
  clear_has_contact_id();
}
::google::protobuf::int64 VkGroupMarketInfo::contact_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupMarketInfo.contact_id)
  return contact_id_;
}
void VkGroupMarketInfo::set_contact_id(::google::protobuf::int64 value) {
  set_has_contact_id();
  contact_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupMarketInfo.contact_id)
}

// optional int64 currency_id = 6;
bool VkGroupMarketInfo::has_currency_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VkGroupMarketInfo::set_has_currency_id() {
  _has_bits_[0] |= 0x00000040u;
}
void VkGroupMarketInfo::clear_has_currency_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void VkGroupMarketInfo::clear_currency_id() {
  currency_id_ = GOOGLE_LONGLONG(0);
  clear_has_currency_id();
}
::google::protobuf::int64 VkGroupMarketInfo::currency_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_id)
  return currency_id_;
}
void VkGroupMarketInfo::set_currency_id(::google::protobuf::int64 value) {
  set_has_currency_id();
  currency_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_id)
}

// optional string currency_sign = 7;
bool VkGroupMarketInfo::has_currency_sign() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkGroupMarketInfo::set_has_currency_sign() {
  _has_bits_[0] |= 0x00000001u;
}
void VkGroupMarketInfo::clear_has_currency_sign() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkGroupMarketInfo::clear_currency_sign() {
  currency_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency_sign();
}
const ::std::string& VkGroupMarketInfo::currency_sign() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign)
  return currency_sign_.GetNoArena();
}
void VkGroupMarketInfo::set_currency_sign(const ::std::string& value) {
  set_has_currency_sign();
  currency_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign)
}
#if LANG_CXX11
void VkGroupMarketInfo::set_currency_sign(::std::string&& value) {
  set_has_currency_sign();
  currency_sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign)
}
#endif
void VkGroupMarketInfo::set_currency_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_currency_sign();
  currency_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign)
}
void VkGroupMarketInfo::set_currency_sign(const char* value, size_t size) {
  set_has_currency_sign();
  currency_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign)
}
::std::string* VkGroupMarketInfo::mutable_currency_sign() {
  set_has_currency_sign();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign)
  return currency_sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroupMarketInfo::release_currency_sign() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign)
  clear_has_currency_sign();
  return currency_sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroupMarketInfo::set_allocated_currency_sign(::std::string* currency_sign) {
  if (currency_sign != NULL) {
    set_has_currency_sign();
  } else {
    clear_has_currency_sign();
  }
  currency_sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency_sign);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign)
}

// optional string currency_text = 8;
bool VkGroupMarketInfo::has_currency_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkGroupMarketInfo::set_has_currency_text() {
  _has_bits_[0] |= 0x00000002u;
}
void VkGroupMarketInfo::clear_has_currency_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkGroupMarketInfo::clear_currency_text() {
  currency_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency_text();
}
const ::std::string& VkGroupMarketInfo::currency_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text)
  return currency_text_.GetNoArena();
}
void VkGroupMarketInfo::set_currency_text(const ::std::string& value) {
  set_has_currency_text();
  currency_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text)
}
#if LANG_CXX11
void VkGroupMarketInfo::set_currency_text(::std::string&& value) {
  set_has_currency_text();
  currency_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text)
}
#endif
void VkGroupMarketInfo::set_currency_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_currency_text();
  currency_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text)
}
void VkGroupMarketInfo::set_currency_text(const char* value, size_t size) {
  set_has_currency_text();
  currency_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text)
}
::std::string* VkGroupMarketInfo::mutable_currency_text() {
  set_has_currency_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text)
  return currency_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroupMarketInfo::release_currency_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text)
  clear_has_currency_text();
  return currency_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroupMarketInfo::set_allocated_currency_text(::std::string* currency_text) {
  if (currency_text != NULL) {
    set_has_currency_text();
  } else {
    clear_has_currency_text();
  }
  currency_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkGroupPlaceInfo::kIdFieldNumber;
const int VkGroupPlaceInfo::kTitleFieldNumber;
const int VkGroupPlaceInfo::kLatitudeFieldNumber;
const int VkGroupPlaceInfo::kLongitudeFieldNumber;
const int VkGroupPlaceInfo::kTypeFieldNumber;
const int VkGroupPlaceInfo::kCountryIdFieldNumber;
const int VkGroupPlaceInfo::kCityIdFieldNumber;
const int VkGroupPlaceInfo::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkGroupPlaceInfo::VkGroupPlaceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fgroups_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
}
VkGroupPlaceInfo::VkGroupPlaceInfo(const VkGroupPlaceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&city_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(city_id_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
}

void VkGroupPlaceInfo::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&city_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(city_id_));
}

VkGroupPlaceInfo::~VkGroupPlaceInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
  SharedDtor();
}

void VkGroupPlaceInfo::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkGroupPlaceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkGroupPlaceInfo::descriptor() {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkGroupPlaceInfo& VkGroupPlaceInfo::default_instance() {
  protobuf_vk_5fgroups_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkGroupPlaceInfo* VkGroupPlaceInfo::New(::google::protobuf::Arena* arena) const {
  VkGroupPlaceInfo* n = new VkGroupPlaceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkGroupPlaceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*address_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&city_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(city_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkGroupPlaceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 country_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_country_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &country_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 city_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_city_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &city_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string address = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
  return false;
#undef DO_
}

void VkGroupPlaceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional double latitude = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // optional double longitude = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // optional string type = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  // optional int64 country_id = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->country_id(), output);
  }

  // optional int64 city_id = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->city_id(), output);
  }

  // optional string address = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
}

::google::protobuf::uint8* VkGroupPlaceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional double latitude = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // optional double longitude = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // optional string type = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  // optional int64 country_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->country_id(), target);
  }

  // optional int64 city_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->city_id(), target);
  }

  // optional string address = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
  return target;
}

size_t VkGroupPlaceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string address = 8;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional double latitude = 3;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 4;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional int64 country_id = 6;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->country_id());
    }

    // optional int64 city_id = 7;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->city_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkGroupPlaceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VkGroupPlaceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkGroupPlaceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
    MergeFrom(*source);
  }
}

void VkGroupPlaceInfo::MergeFrom(const VkGroupPlaceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      country_id_ = from.country_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      city_id_ = from.city_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkGroupPlaceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkGroupPlaceInfo::CopyFrom(const VkGroupPlaceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkGroupPlaceInfo::IsInitialized() const {
  return true;
}

void VkGroupPlaceInfo::Swap(VkGroupPlaceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkGroupPlaceInfo::InternalSwap(VkGroupPlaceInfo* other) {
  using std::swap;
  title_.Swap(&other->title_);
  type_.Swap(&other->type_);
  address_.Swap(&other->address_);
  swap(id_, other->id_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(country_id_, other->country_id_);
  swap(city_id_, other->city_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkGroupPlaceInfo::GetMetadata() const {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkGroupPlaceInfo

// optional int64 id = 1;
bool VkGroupPlaceInfo::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkGroupPlaceInfo::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void VkGroupPlaceInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkGroupPlaceInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 VkGroupPlaceInfo::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.id)
  return id_;
}
void VkGroupPlaceInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.id)
}

// optional string title = 2;
bool VkGroupPlaceInfo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkGroupPlaceInfo::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void VkGroupPlaceInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkGroupPlaceInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& VkGroupPlaceInfo::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title)
  return title_.GetNoArena();
}
void VkGroupPlaceInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title)
}
#if LANG_CXX11
void VkGroupPlaceInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title)
}
#endif
void VkGroupPlaceInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title)
}
void VkGroupPlaceInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title)
}
::std::string* VkGroupPlaceInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroupPlaceInfo::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroupPlaceInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title)
}

// optional double latitude = 3;
bool VkGroupPlaceInfo::has_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VkGroupPlaceInfo::set_has_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
void VkGroupPlaceInfo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void VkGroupPlaceInfo::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double VkGroupPlaceInfo::latitude() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.latitude)
  return latitude_;
}
void VkGroupPlaceInfo::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.latitude)
}

// optional double longitude = 4;
bool VkGroupPlaceInfo::has_longitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VkGroupPlaceInfo::set_has_longitude() {
  _has_bits_[0] |= 0x00000020u;
}
void VkGroupPlaceInfo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000020u;
}
void VkGroupPlaceInfo::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double VkGroupPlaceInfo::longitude() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.longitude)
  return longitude_;
}
void VkGroupPlaceInfo::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.longitude)
}

// optional string type = 5;
bool VkGroupPlaceInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkGroupPlaceInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void VkGroupPlaceInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkGroupPlaceInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& VkGroupPlaceInfo::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type)
  return type_.GetNoArena();
}
void VkGroupPlaceInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type)
}
#if LANG_CXX11
void VkGroupPlaceInfo::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type)
}
#endif
void VkGroupPlaceInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type)
}
void VkGroupPlaceInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type)
}
::std::string* VkGroupPlaceInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroupPlaceInfo::release_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroupPlaceInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type)
}

// optional int64 country_id = 6;
bool VkGroupPlaceInfo::has_country_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VkGroupPlaceInfo::set_has_country_id() {
  _has_bits_[0] |= 0x00000040u;
}
void VkGroupPlaceInfo::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void VkGroupPlaceInfo::clear_country_id() {
  country_id_ = GOOGLE_LONGLONG(0);
  clear_has_country_id();
}
::google::protobuf::int64 VkGroupPlaceInfo::country_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.country_id)
  return country_id_;
}
void VkGroupPlaceInfo::set_country_id(::google::protobuf::int64 value) {
  set_has_country_id();
  country_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.country_id)
}

// optional int64 city_id = 7;
bool VkGroupPlaceInfo::has_city_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VkGroupPlaceInfo::set_has_city_id() {
  _has_bits_[0] |= 0x00000080u;
}
void VkGroupPlaceInfo::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void VkGroupPlaceInfo::clear_city_id() {
  city_id_ = GOOGLE_LONGLONG(0);
  clear_has_city_id();
}
::google::protobuf::int64 VkGroupPlaceInfo::city_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.city_id)
  return city_id_;
}
void VkGroupPlaceInfo::set_city_id(::google::protobuf::int64 value) {
  set_has_city_id();
  city_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.city_id)
}

// optional string address = 8;
bool VkGroupPlaceInfo::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkGroupPlaceInfo::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
void VkGroupPlaceInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkGroupPlaceInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& VkGroupPlaceInfo::address() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address)
  return address_.GetNoArena();
}
void VkGroupPlaceInfo::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address)
}
#if LANG_CXX11
void VkGroupPlaceInfo::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address)
}
#endif
void VkGroupPlaceInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address)
}
void VkGroupPlaceInfo::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address)
}
::std::string* VkGroupPlaceInfo::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroupPlaceInfo::release_address() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroupPlaceInfo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkGroup::kIdFieldNumber;
const int VkGroup::kNameFieldNumber;
const int VkGroup::kScreenNameFieldNumber;
const int VkGroup::kAccessLevelFieldNumber;
const int VkGroup::kDeactivationReasonFieldNumber;
const int VkGroup::kTypeFieldNumber;
const int VkGroup::kHasPhotoFieldNumber;
const int VkGroup::kPageStatusBarFieldNumber;
const int VkGroup::kAgeLimitsFieldNumber;
const int VkGroup::kCityFieldNumber;
const int VkGroup::kContactsFieldNumber;
const int VkGroup::kCountryFieldNumber;
const int VkGroup::kCoverFieldNumber;
const int VkGroup::kDescriptionFieldNumber;
const int VkGroup::kFixedWallPostIdFieldNumber;
const int VkGroup::kMainAlbumIdFieldNumber;
const int VkGroup::kMainSectionFieldNumber;
const int VkGroup::kMarketFieldNumber;
const int VkGroup::kMembersCountFieldNumber;
const int VkGroup::kPlaceFieldNumber;
const int VkGroup::kPublicDateLabelFieldNumber;
const int VkGroup::kSiteUrlFieldNumber;
const int VkGroup::kStartDateTsFieldNumber;
const int VkGroup::kFinishDateTsFieldNumber;
const int VkGroup::kGroupStatusFieldNumber;
const int VkGroup::kTrendingFieldNumber;
const int VkGroup::kVerifiedFieldNumber;
const int VkGroup::kWikiPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkGroup::VkGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fgroups_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkGroup)
}
VkGroup::VkGroup(const VkGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      contacts_(from.contacts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  screen_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_screen_name()) {
    screen_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.screen_name_);
  }
  page_status_bar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_page_status_bar()) {
    page_status_bar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_status_bar_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  public_date_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_date_label()) {
    public_date_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_date_label_);
  }
  site_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_site_url()) {
    site_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_url_);
  }
  group_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_group_status()) {
    group_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_status_);
  }
  wiki_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wiki_page()) {
    wiki_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wiki_page_);
  }
  if (from.has_city()) {
    city_ = new ::ru::mail::go::webbase::blobs::VkGroupLocation(*from.city_);
  } else {
    city_ = NULL;
  }
  if (from.has_country()) {
    country_ = new ::ru::mail::go::webbase::blobs::VkGroupLocation(*from.country_);
  } else {
    country_ = NULL;
  }
  if (from.has_cover()) {
    cover_ = new ::ru::mail::go::webbase::blobs::VkGroupCoverInfo(*from.cover_);
  } else {
    cover_ = NULL;
  }
  if (from.has_market()) {
    market_ = new ::ru::mail::go::webbase::blobs::VkGroupMarketInfo(*from.market_);
  } else {
    market_ = NULL;
  }
  if (from.has_place()) {
    place_ = new ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo(*from.place_);
  } else {
    place_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&finish_date_ts_) -
    reinterpret_cast<char*>(&id_)) + sizeof(finish_date_ts_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkGroup)
}

void VkGroup::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  screen_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_status_bar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_date_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wiki_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&city_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finish_date_ts_) -
      reinterpret_cast<char*>(&city_)) + sizeof(finish_date_ts_));
}

VkGroup::~VkGroup() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkGroup)
  SharedDtor();
}

void VkGroup::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  screen_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_status_bar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_date_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wiki_page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete city_;
  if (this != internal_default_instance()) delete country_;
  if (this != internal_default_instance()) delete cover_;
  if (this != internal_default_instance()) delete market_;
  if (this != internal_default_instance()) delete place_;
}

void VkGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkGroup::descriptor() {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkGroup& VkGroup::default_instance() {
  protobuf_vk_5fgroups_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkGroup* VkGroup::New(::google::protobuf::Arena* arena) const {
  VkGroup* n = new VkGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contacts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!screen_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*screen_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!page_status_bar_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*page_status_bar_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!public_date_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*public_date_label_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!site_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*site_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!group_status_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*group_status_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!wiki_page_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wiki_page_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(city_ != NULL);
      city_->::ru::mail::go::webbase::blobs::VkGroupLocation::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(country_ != NULL);
      country_->::ru::mail::go::webbase::blobs::VkGroupLocation::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(cover_ != NULL);
      cover_->::ru::mail::go::webbase::blobs::VkGroupCoverInfo::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(market_ != NULL);
      market_->::ru::mail::go::webbase::blobs::VkGroupMarketInfo::Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(place_ != NULL);
      place_->::ru::mail::go::webbase::blobs::VkGroupPlaceInfo::Clear();
    }
  }
  if (cached_has_bits & 57344u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deactivation_reason_) -
        reinterpret_cast<char*>(&id_)) + sizeof(deactivation_reason_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trending_) -
        reinterpret_cast<char*>(&type_)) + sizeof(trending_));
  }
  if (cached_has_bits & 117440512u) {
    ::memset(&verified_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&finish_date_ts_) -
        reinterpret_cast<char*>(&verified_)) + sizeof(finish_date_ts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroup.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string screen_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_screen_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->screen_name().data(), static_cast<int>(this->screen_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroup.screen_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkGroupAccessType access_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::VkGroupAccessType_IsValid(value)) {
            set_access_level(static_cast< ::ru::mail::go::webbase::blobs::VkGroupAccessType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkGroupDeactivationReason deactivation_reason = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::VkGroupDeactivationReason_IsValid(value)) {
            set_deactivation_reason(static_cast< ::ru::mail::go::webbase::blobs::VkGroupDeactivationReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkGroupType type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::VkGroupType_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::blobs::VkGroupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_photo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_has_photo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_photo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string page_status_bar = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_status_bar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->page_status_bar().data(), static_cast<int>(this->page_status_bar().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroup.page_status_bar");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkGroupAgeLimit age_limits = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::VkGroupAgeLimit_IsValid(value)) {
            set_age_limits(static_cast< ::ru::mail::go::webbase::blobs::VkGroupAgeLimit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkGroupLocation city = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.VkGroupContactInfo contacts = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contacts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkGroupLocation country = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_country()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkGroupCoverInfo cover = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cover()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroup.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 fixed_wall_post_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_fixed_wall_post_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fixed_wall_post_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 main_album_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_main_album_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &main_album_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkGroupMainSectionType main_section = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::VkGroupMainSectionType_IsValid(value)) {
            set_main_section(static_cast< ::ru::mail::go::webbase::blobs::VkGroupMainSectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                17, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkGroupMarketInfo market = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_market()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 members_count = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_members_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &members_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkGroupPlaceInfo place = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_place()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string public_date_label = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_date_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_date_label().data(), static_cast<int>(this->public_date_label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroup.public_date_label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string site_url = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->site_url().data(), static_cast<int>(this->site_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroup.site_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_date_ts = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_start_date_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_date_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 finish_date_ts = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_finish_date_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finish_date_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string group_status = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_status().data(), static_cast<int>(this->group_status().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroup.group_status");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool trending = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_trending();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool verified = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_verified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string wiki_page = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wiki_page()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wiki_page().data(), static_cast<int>(this->wiki_page().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkGroup.wiki_page");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkGroup)
  return false;
#undef DO_
}

void VkGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroup.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string screen_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->screen_name().data(), static_cast<int>(this->screen_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroup.screen_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->screen_name(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupAccessType access_level = 4;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->access_level(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupDeactivationReason deactivation_reason = 5;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->deactivation_reason(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupType type = 6;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // optional bool has_photo = 7;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_photo(), output);
  }

  // optional string page_status_bar = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_status_bar().data(), static_cast<int>(this->page_status_bar().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroup.page_status_bar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->page_status_bar(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupAgeLimit age_limits = 9;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->age_limits(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupLocation city = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->city_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.VkGroupContactInfo contacts = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contacts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->contacts(static_cast<int>(i)), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupLocation country = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->country_, output);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupCoverInfo cover = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->cover_, output);
  }

  // optional string description = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroup.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->description(), output);
  }

  // optional int64 fixed_wall_post_id = 15;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->fixed_wall_post_id(), output);
  }

  // optional int64 main_album_id = 16;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->main_album_id(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupMainSectionType main_section = 17;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->main_section(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupMarketInfo market = 18;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->market_, output);
  }

  // optional int64 members_count = 19;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->members_count(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupPlaceInfo place = 20;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->place_, output);
  }

  // optional string public_date_label = 21;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_date_label().data(), static_cast<int>(this->public_date_label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroup.public_date_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->public_date_label(), output);
  }

  // optional string site_url = 22;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_url().data(), static_cast<int>(this->site_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroup.site_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->site_url(), output);
  }

  // optional int64 start_date_ts = 23;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->start_date_ts(), output);
  }

  // optional int64 finish_date_ts = 24;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->finish_date_ts(), output);
  }

  // optional string group_status = 25;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_status().data(), static_cast<int>(this->group_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroup.group_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->group_status(), output);
  }

  // optional bool trending = 26;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->trending(), output);
  }

  // optional bool verified = 27;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->verified(), output);
  }

  // optional string wiki_page = 28;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wiki_page().data(), static_cast<int>(this->wiki_page().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroup.wiki_page");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->wiki_page(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkGroup)
}

::google::protobuf::uint8* VkGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroup.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string screen_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->screen_name().data(), static_cast<int>(this->screen_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroup.screen_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->screen_name(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupAccessType access_level = 4;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->access_level(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupDeactivationReason deactivation_reason = 5;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->deactivation_reason(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupType type = 6;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // optional bool has_photo = 7;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_photo(), target);
  }

  // optional string page_status_bar = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_status_bar().data(), static_cast<int>(this->page_status_bar().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroup.page_status_bar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->page_status_bar(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupAgeLimit age_limits = 9;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->age_limits(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupLocation city = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->city_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.VkGroupContactInfo contacts = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contacts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->contacts(static_cast<int>(i)), deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupLocation country = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->country_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupCoverInfo cover = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->cover_, deterministic, target);
  }

  // optional string description = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroup.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->description(), target);
  }

  // optional int64 fixed_wall_post_id = 15;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->fixed_wall_post_id(), target);
  }

  // optional int64 main_album_id = 16;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->main_album_id(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupMainSectionType main_section = 17;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->main_section(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupMarketInfo market = 18;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->market_, deterministic, target);
  }

  // optional int64 members_count = 19;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->members_count(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkGroupPlaceInfo place = 20;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->place_, deterministic, target);
  }

  // optional string public_date_label = 21;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_date_label().data(), static_cast<int>(this->public_date_label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroup.public_date_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->public_date_label(), target);
  }

  // optional string site_url = 22;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_url().data(), static_cast<int>(this->site_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroup.site_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->site_url(), target);
  }

  // optional int64 start_date_ts = 23;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->start_date_ts(), target);
  }

  // optional int64 finish_date_ts = 24;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->finish_date_ts(), target);
  }

  // optional string group_status = 25;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_status().data(), static_cast<int>(this->group_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroup.group_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->group_status(), target);
  }

  // optional bool trending = 26;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->trending(), target);
  }

  // optional bool verified = 27;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->verified(), target);
  }

  // optional string wiki_page = 28;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wiki_page().data(), static_cast<int>(this->wiki_page().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkGroup.wiki_page");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->wiki_page(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkGroup)
  return target;
}

size_t VkGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.VkGroupContactInfo contacts = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->contacts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contacts(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string screen_name = 3;
    if (has_screen_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->screen_name());
    }

    // optional string page_status_bar = 8;
    if (has_page_status_bar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_status_bar());
    }

    // optional string description = 14;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string public_date_label = 21;
    if (has_public_date_label()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_date_label());
    }

    // optional string site_url = 22;
    if (has_site_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->site_url());
    }

    // optional string group_status = 25;
    if (has_group_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_status());
    }

    // optional string wiki_page = 28;
    if (has_wiki_page()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wiki_page());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .ru.mail.go.webbase.blobs.VkGroupLocation city = 10;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->city_);
    }

    // optional .ru.mail.go.webbase.blobs.VkGroupLocation country = 12;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->country_);
    }

    // optional .ru.mail.go.webbase.blobs.VkGroupCoverInfo cover = 13;
    if (has_cover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cover_);
    }

    // optional .ru.mail.go.webbase.blobs.VkGroupMarketInfo market = 18;
    if (has_market()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->market_);
    }

    // optional .ru.mail.go.webbase.blobs.VkGroupPlaceInfo place = 20;
    if (has_place()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->place_);
    }

    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional .ru.mail.go.webbase.blobs.VkGroupAccessType access_level = 4;
    if (has_access_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_level());
    }

    // optional .ru.mail.go.webbase.blobs.VkGroupDeactivationReason deactivation_reason = 5;
    if (has_deactivation_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->deactivation_reason());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .ru.mail.go.webbase.blobs.VkGroupType type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ru.mail.go.webbase.blobs.VkGroupAgeLimit age_limits = 9;
    if (has_age_limits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->age_limits());
    }

    // optional int64 fixed_wall_post_id = 15;
    if (has_fixed_wall_post_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fixed_wall_post_id());
    }

    // optional int64 main_album_id = 16;
    if (has_main_album_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->main_album_id());
    }

    // optional int64 members_count = 19;
    if (has_members_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->members_count());
    }

    // optional .ru.mail.go.webbase.blobs.VkGroupMainSectionType main_section = 17;
    if (has_main_section()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->main_section());
    }

    // optional bool has_photo = 7;
    if (has_has_photo()) {
      total_size += 1 + 1;
    }

    // optional bool trending = 26;
    if (has_trending()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 117440512u) {
    // optional bool verified = 27;
    if (has_verified()) {
      total_size += 2 + 1;
    }

    // optional int64 start_date_ts = 23;
    if (has_start_date_ts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_date_ts());
    }

    // optional int64 finish_date_ts = 24;
    if (has_finish_date_ts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->finish_date_ts());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const VkGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkGroup)
    MergeFrom(*source);
  }
}

void VkGroup::MergeFrom(const VkGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contacts_.MergeFrom(from.contacts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_screen_name();
      screen_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.screen_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_page_status_bar();
      page_status_bar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_status_bar_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_public_date_label();
      public_date_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_date_label_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_site_url();
      site_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_url_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_group_status();
      group_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_status_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_wiki_page();
      wiki_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wiki_page_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_city()->::ru::mail::go::webbase::blobs::VkGroupLocation::MergeFrom(from.city());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_country()->::ru::mail::go::webbase::blobs::VkGroupLocation::MergeFrom(from.country());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_cover()->::ru::mail::go::webbase::blobs::VkGroupCoverInfo::MergeFrom(from.cover());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_market()->::ru::mail::go::webbase::blobs::VkGroupMarketInfo::MergeFrom(from.market());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_place()->::ru::mail::go::webbase::blobs::VkGroupPlaceInfo::MergeFrom(from.place());
    }
    if (cached_has_bits & 0x00002000u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00004000u) {
      access_level_ = from.access_level_;
    }
    if (cached_has_bits & 0x00008000u) {
      deactivation_reason_ = from.deactivation_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00020000u) {
      age_limits_ = from.age_limits_;
    }
    if (cached_has_bits & 0x00040000u) {
      fixed_wall_post_id_ = from.fixed_wall_post_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      main_album_id_ = from.main_album_id_;
    }
    if (cached_has_bits & 0x00100000u) {
      members_count_ = from.members_count_;
    }
    if (cached_has_bits & 0x00200000u) {
      main_section_ = from.main_section_;
    }
    if (cached_has_bits & 0x00400000u) {
      has_photo_ = from.has_photo_;
    }
    if (cached_has_bits & 0x00800000u) {
      trending_ = from.trending_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 117440512u) {
    if (cached_has_bits & 0x01000000u) {
      verified_ = from.verified_;
    }
    if (cached_has_bits & 0x02000000u) {
      start_date_ts_ = from.start_date_ts_;
    }
    if (cached_has_bits & 0x04000000u) {
      finish_date_ts_ = from.finish_date_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkGroup::CopyFrom(const VkGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkGroup::IsInitialized() const {
  return true;
}

void VkGroup::Swap(VkGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkGroup::InternalSwap(VkGroup* other) {
  using std::swap;
  contacts_.InternalSwap(&other->contacts_);
  name_.Swap(&other->name_);
  screen_name_.Swap(&other->screen_name_);
  page_status_bar_.Swap(&other->page_status_bar_);
  description_.Swap(&other->description_);
  public_date_label_.Swap(&other->public_date_label_);
  site_url_.Swap(&other->site_url_);
  group_status_.Swap(&other->group_status_);
  wiki_page_.Swap(&other->wiki_page_);
  swap(city_, other->city_);
  swap(country_, other->country_);
  swap(cover_, other->cover_);
  swap(market_, other->market_);
  swap(place_, other->place_);
  swap(id_, other->id_);
  swap(access_level_, other->access_level_);
  swap(deactivation_reason_, other->deactivation_reason_);
  swap(type_, other->type_);
  swap(age_limits_, other->age_limits_);
  swap(fixed_wall_post_id_, other->fixed_wall_post_id_);
  swap(main_album_id_, other->main_album_id_);
  swap(members_count_, other->members_count_);
  swap(main_section_, other->main_section_);
  swap(has_photo_, other->has_photo_);
  swap(trending_, other->trending_);
  swap(verified_, other->verified_);
  swap(start_date_ts_, other->start_date_ts_);
  swap(finish_date_ts_, other->finish_date_ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkGroup::GetMetadata() const {
  protobuf_vk_5fgroups_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fgroups_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkGroup

// optional int64 id = 1;
bool VkGroup::has_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VkGroup::set_has_id() {
  _has_bits_[0] |= 0x00002000u;
}
void VkGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void VkGroup::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 VkGroup::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.id)
  return id_;
}
void VkGroup::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.id)
}

// optional string name = 2;
bool VkGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void VkGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& VkGroup::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.name)
  return name_.GetNoArena();
}
void VkGroup::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.name)
}
#if LANG_CXX11
void VkGroup::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroup.name)
}
#endif
void VkGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroup.name)
}
void VkGroup::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroup.name)
}
::std::string* VkGroup::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroup::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.name)
}

// optional string screen_name = 3;
bool VkGroup::has_screen_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkGroup::set_has_screen_name() {
  _has_bits_[0] |= 0x00000002u;
}
void VkGroup::clear_has_screen_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkGroup::clear_screen_name() {
  screen_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_screen_name();
}
const ::std::string& VkGroup::screen_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.screen_name)
  return screen_name_.GetNoArena();
}
void VkGroup::set_screen_name(const ::std::string& value) {
  set_has_screen_name();
  screen_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.screen_name)
}
#if LANG_CXX11
void VkGroup::set_screen_name(::std::string&& value) {
  set_has_screen_name();
  screen_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroup.screen_name)
}
#endif
void VkGroup::set_screen_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_screen_name();
  screen_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroup.screen_name)
}
void VkGroup::set_screen_name(const char* value, size_t size) {
  set_has_screen_name();
  screen_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroup.screen_name)
}
::std::string* VkGroup::mutable_screen_name() {
  set_has_screen_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.screen_name)
  return screen_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroup::release_screen_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.screen_name)
  clear_has_screen_name();
  return screen_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroup::set_allocated_screen_name(::std::string* screen_name) {
  if (screen_name != NULL) {
    set_has_screen_name();
  } else {
    clear_has_screen_name();
  }
  screen_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), screen_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.screen_name)
}

// optional .ru.mail.go.webbase.blobs.VkGroupAccessType access_level = 4;
bool VkGroup::has_access_level() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VkGroup::set_has_access_level() {
  _has_bits_[0] |= 0x00004000u;
}
void VkGroup::clear_has_access_level() {
  _has_bits_[0] &= ~0x00004000u;
}
void VkGroup::clear_access_level() {
  access_level_ = 0;
  clear_has_access_level();
}
::ru::mail::go::webbase::blobs::VkGroupAccessType VkGroup::access_level() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.access_level)
  return static_cast< ::ru::mail::go::webbase::blobs::VkGroupAccessType >(access_level_);
}
void VkGroup::set_access_level(::ru::mail::go::webbase::blobs::VkGroupAccessType value) {
  assert(::ru::mail::go::webbase::blobs::VkGroupAccessType_IsValid(value));
  set_has_access_level();
  access_level_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.access_level)
}

// optional .ru.mail.go.webbase.blobs.VkGroupDeactivationReason deactivation_reason = 5;
bool VkGroup::has_deactivation_reason() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VkGroup::set_has_deactivation_reason() {
  _has_bits_[0] |= 0x00008000u;
}
void VkGroup::clear_has_deactivation_reason() {
  _has_bits_[0] &= ~0x00008000u;
}
void VkGroup::clear_deactivation_reason() {
  deactivation_reason_ = 0;
  clear_has_deactivation_reason();
}
::ru::mail::go::webbase::blobs::VkGroupDeactivationReason VkGroup::deactivation_reason() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.deactivation_reason)
  return static_cast< ::ru::mail::go::webbase::blobs::VkGroupDeactivationReason >(deactivation_reason_);
}
void VkGroup::set_deactivation_reason(::ru::mail::go::webbase::blobs::VkGroupDeactivationReason value) {
  assert(::ru::mail::go::webbase::blobs::VkGroupDeactivationReason_IsValid(value));
  set_has_deactivation_reason();
  deactivation_reason_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.deactivation_reason)
}

// optional .ru.mail.go.webbase.blobs.VkGroupType type = 6;
bool VkGroup::has_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void VkGroup::set_has_type() {
  _has_bits_[0] |= 0x00010000u;
}
void VkGroup::clear_has_type() {
  _has_bits_[0] &= ~0x00010000u;
}
void VkGroup::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::blobs::VkGroupType VkGroup::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.type)
  return static_cast< ::ru::mail::go::webbase::blobs::VkGroupType >(type_);
}
void VkGroup::set_type(::ru::mail::go::webbase::blobs::VkGroupType value) {
  assert(::ru::mail::go::webbase::blobs::VkGroupType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.type)
}

// optional bool has_photo = 7;
bool VkGroup::has_has_photo() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void VkGroup::set_has_has_photo() {
  _has_bits_[0] |= 0x00400000u;
}
void VkGroup::clear_has_has_photo() {
  _has_bits_[0] &= ~0x00400000u;
}
void VkGroup::clear_has_photo() {
  has_photo_ = false;
  clear_has_has_photo();
}
bool VkGroup::has_photo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.has_photo)
  return has_photo_;
}
void VkGroup::set_has_photo(bool value) {
  set_has_has_photo();
  has_photo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.has_photo)
}

// optional string page_status_bar = 8;
bool VkGroup::has_page_status_bar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkGroup::set_has_page_status_bar() {
  _has_bits_[0] |= 0x00000004u;
}
void VkGroup::clear_has_page_status_bar() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkGroup::clear_page_status_bar() {
  page_status_bar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_page_status_bar();
}
const ::std::string& VkGroup::page_status_bar() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.page_status_bar)
  return page_status_bar_.GetNoArena();
}
void VkGroup::set_page_status_bar(const ::std::string& value) {
  set_has_page_status_bar();
  page_status_bar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.page_status_bar)
}
#if LANG_CXX11
void VkGroup::set_page_status_bar(::std::string&& value) {
  set_has_page_status_bar();
  page_status_bar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroup.page_status_bar)
}
#endif
void VkGroup::set_page_status_bar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_page_status_bar();
  page_status_bar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroup.page_status_bar)
}
void VkGroup::set_page_status_bar(const char* value, size_t size) {
  set_has_page_status_bar();
  page_status_bar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroup.page_status_bar)
}
::std::string* VkGroup::mutable_page_status_bar() {
  set_has_page_status_bar();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.page_status_bar)
  return page_status_bar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroup::release_page_status_bar() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.page_status_bar)
  clear_has_page_status_bar();
  return page_status_bar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroup::set_allocated_page_status_bar(::std::string* page_status_bar) {
  if (page_status_bar != NULL) {
    set_has_page_status_bar();
  } else {
    clear_has_page_status_bar();
  }
  page_status_bar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_status_bar);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.page_status_bar)
}

// optional .ru.mail.go.webbase.blobs.VkGroupAgeLimit age_limits = 9;
bool VkGroup::has_age_limits() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void VkGroup::set_has_age_limits() {
  _has_bits_[0] |= 0x00020000u;
}
void VkGroup::clear_has_age_limits() {
  _has_bits_[0] &= ~0x00020000u;
}
void VkGroup::clear_age_limits() {
  age_limits_ = 0;
  clear_has_age_limits();
}
::ru::mail::go::webbase::blobs::VkGroupAgeLimit VkGroup::age_limits() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.age_limits)
  return static_cast< ::ru::mail::go::webbase::blobs::VkGroupAgeLimit >(age_limits_);
}
void VkGroup::set_age_limits(::ru::mail::go::webbase::blobs::VkGroupAgeLimit value) {
  assert(::ru::mail::go::webbase::blobs::VkGroupAgeLimit_IsValid(value));
  set_has_age_limits();
  age_limits_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.age_limits)
}

// optional .ru.mail.go.webbase.blobs.VkGroupLocation city = 10;
bool VkGroup::has_city() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VkGroup::set_has_city() {
  _has_bits_[0] |= 0x00000100u;
}
void VkGroup::clear_has_city() {
  _has_bits_[0] &= ~0x00000100u;
}
void VkGroup::clear_city() {
  if (city_ != NULL) city_->::ru::mail::go::webbase::blobs::VkGroupLocation::Clear();
  clear_has_city();
}
const ::ru::mail::go::webbase::blobs::VkGroupLocation& VkGroup::city() const {
  const ::ru::mail::go::webbase::blobs::VkGroupLocation* p = city_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.city)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkGroupLocation*>(
      &::ru::mail::go::webbase::blobs::_VkGroupLocation_default_instance_);
}
::ru::mail::go::webbase::blobs::VkGroupLocation* VkGroup::mutable_city() {
  set_has_city();
  if (city_ == NULL) {
    city_ = new ::ru::mail::go::webbase::blobs::VkGroupLocation;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.city)
  return city_;
}
::ru::mail::go::webbase::blobs::VkGroupLocation* VkGroup::release_city() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.city)
  clear_has_city();
  ::ru::mail::go::webbase::blobs::VkGroupLocation* temp = city_;
  city_ = NULL;
  return temp;
}
void VkGroup::set_allocated_city(::ru::mail::go::webbase::blobs::VkGroupLocation* city) {
  delete city_;
  city_ = city;
  if (city) {
    set_has_city();
  } else {
    clear_has_city();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.city)
}

// repeated .ru.mail.go.webbase.blobs.VkGroupContactInfo contacts = 11;
int VkGroup::contacts_size() const {
  return contacts_.size();
}
void VkGroup::clear_contacts() {
  contacts_.Clear();
}
const ::ru::mail::go::webbase::blobs::VkGroupContactInfo& VkGroup::contacts(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.contacts)
  return contacts_.Get(index);
}
::ru::mail::go::webbase::blobs::VkGroupContactInfo* VkGroup::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.contacts)
  return contacts_.Mutable(index);
}
::ru::mail::go::webbase::blobs::VkGroupContactInfo* VkGroup::add_contacts() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkGroup.contacts)
  return contacts_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkGroupContactInfo >*
VkGroup::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkGroup.contacts)
  return &contacts_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkGroupContactInfo >&
VkGroup::contacts() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkGroup.contacts)
  return contacts_;
}

// optional .ru.mail.go.webbase.blobs.VkGroupLocation country = 12;
bool VkGroup::has_country() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VkGroup::set_has_country() {
  _has_bits_[0] |= 0x00000200u;
}
void VkGroup::clear_has_country() {
  _has_bits_[0] &= ~0x00000200u;
}
void VkGroup::clear_country() {
  if (country_ != NULL) country_->::ru::mail::go::webbase::blobs::VkGroupLocation::Clear();
  clear_has_country();
}
const ::ru::mail::go::webbase::blobs::VkGroupLocation& VkGroup::country() const {
  const ::ru::mail::go::webbase::blobs::VkGroupLocation* p = country_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.country)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkGroupLocation*>(
      &::ru::mail::go::webbase::blobs::_VkGroupLocation_default_instance_);
}
::ru::mail::go::webbase::blobs::VkGroupLocation* VkGroup::mutable_country() {
  set_has_country();
  if (country_ == NULL) {
    country_ = new ::ru::mail::go::webbase::blobs::VkGroupLocation;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.country)
  return country_;
}
::ru::mail::go::webbase::blobs::VkGroupLocation* VkGroup::release_country() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.country)
  clear_has_country();
  ::ru::mail::go::webbase::blobs::VkGroupLocation* temp = country_;
  country_ = NULL;
  return temp;
}
void VkGroup::set_allocated_country(::ru::mail::go::webbase::blobs::VkGroupLocation* country) {
  delete country_;
  country_ = country;
  if (country) {
    set_has_country();
  } else {
    clear_has_country();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.country)
}

// optional .ru.mail.go.webbase.blobs.VkGroupCoverInfo cover = 13;
bool VkGroup::has_cover() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VkGroup::set_has_cover() {
  _has_bits_[0] |= 0x00000400u;
}
void VkGroup::clear_has_cover() {
  _has_bits_[0] &= ~0x00000400u;
}
void VkGroup::clear_cover() {
  if (cover_ != NULL) cover_->::ru::mail::go::webbase::blobs::VkGroupCoverInfo::Clear();
  clear_has_cover();
}
const ::ru::mail::go::webbase::blobs::VkGroupCoverInfo& VkGroup::cover() const {
  const ::ru::mail::go::webbase::blobs::VkGroupCoverInfo* p = cover_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.cover)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkGroupCoverInfo*>(
      &::ru::mail::go::webbase::blobs::_VkGroupCoverInfo_default_instance_);
}
::ru::mail::go::webbase::blobs::VkGroupCoverInfo* VkGroup::mutable_cover() {
  set_has_cover();
  if (cover_ == NULL) {
    cover_ = new ::ru::mail::go::webbase::blobs::VkGroupCoverInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.cover)
  return cover_;
}
::ru::mail::go::webbase::blobs::VkGroupCoverInfo* VkGroup::release_cover() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.cover)
  clear_has_cover();
  ::ru::mail::go::webbase::blobs::VkGroupCoverInfo* temp = cover_;
  cover_ = NULL;
  return temp;
}
void VkGroup::set_allocated_cover(::ru::mail::go::webbase::blobs::VkGroupCoverInfo* cover) {
  delete cover_;
  cover_ = cover;
  if (cover) {
    set_has_cover();
  } else {
    clear_has_cover();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.cover)
}

// optional string description = 14;
bool VkGroup::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkGroup::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
void VkGroup::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkGroup::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& VkGroup::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.description)
  return description_.GetNoArena();
}
void VkGroup::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.description)
}
#if LANG_CXX11
void VkGroup::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroup.description)
}
#endif
void VkGroup::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroup.description)
}
void VkGroup::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroup.description)
}
::std::string* VkGroup::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroup::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroup::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.description)
}

// optional int64 fixed_wall_post_id = 15;
bool VkGroup::has_fixed_wall_post_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void VkGroup::set_has_fixed_wall_post_id() {
  _has_bits_[0] |= 0x00040000u;
}
void VkGroup::clear_has_fixed_wall_post_id() {
  _has_bits_[0] &= ~0x00040000u;
}
void VkGroup::clear_fixed_wall_post_id() {
  fixed_wall_post_id_ = GOOGLE_LONGLONG(0);
  clear_has_fixed_wall_post_id();
}
::google::protobuf::int64 VkGroup::fixed_wall_post_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.fixed_wall_post_id)
  return fixed_wall_post_id_;
}
void VkGroup::set_fixed_wall_post_id(::google::protobuf::int64 value) {
  set_has_fixed_wall_post_id();
  fixed_wall_post_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.fixed_wall_post_id)
}

// optional int64 main_album_id = 16;
bool VkGroup::has_main_album_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void VkGroup::set_has_main_album_id() {
  _has_bits_[0] |= 0x00080000u;
}
void VkGroup::clear_has_main_album_id() {
  _has_bits_[0] &= ~0x00080000u;
}
void VkGroup::clear_main_album_id() {
  main_album_id_ = GOOGLE_LONGLONG(0);
  clear_has_main_album_id();
}
::google::protobuf::int64 VkGroup::main_album_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.main_album_id)
  return main_album_id_;
}
void VkGroup::set_main_album_id(::google::protobuf::int64 value) {
  set_has_main_album_id();
  main_album_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.main_album_id)
}

// optional .ru.mail.go.webbase.blobs.VkGroupMainSectionType main_section = 17;
bool VkGroup::has_main_section() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void VkGroup::set_has_main_section() {
  _has_bits_[0] |= 0x00200000u;
}
void VkGroup::clear_has_main_section() {
  _has_bits_[0] &= ~0x00200000u;
}
void VkGroup::clear_main_section() {
  main_section_ = 0;
  clear_has_main_section();
}
::ru::mail::go::webbase::blobs::VkGroupMainSectionType VkGroup::main_section() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.main_section)
  return static_cast< ::ru::mail::go::webbase::blobs::VkGroupMainSectionType >(main_section_);
}
void VkGroup::set_main_section(::ru::mail::go::webbase::blobs::VkGroupMainSectionType value) {
  assert(::ru::mail::go::webbase::blobs::VkGroupMainSectionType_IsValid(value));
  set_has_main_section();
  main_section_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.main_section)
}

// optional .ru.mail.go.webbase.blobs.VkGroupMarketInfo market = 18;
bool VkGroup::has_market() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VkGroup::set_has_market() {
  _has_bits_[0] |= 0x00000800u;
}
void VkGroup::clear_has_market() {
  _has_bits_[0] &= ~0x00000800u;
}
void VkGroup::clear_market() {
  if (market_ != NULL) market_->::ru::mail::go::webbase::blobs::VkGroupMarketInfo::Clear();
  clear_has_market();
}
const ::ru::mail::go::webbase::blobs::VkGroupMarketInfo& VkGroup::market() const {
  const ::ru::mail::go::webbase::blobs::VkGroupMarketInfo* p = market_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.market)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkGroupMarketInfo*>(
      &::ru::mail::go::webbase::blobs::_VkGroupMarketInfo_default_instance_);
}
::ru::mail::go::webbase::blobs::VkGroupMarketInfo* VkGroup::mutable_market() {
  set_has_market();
  if (market_ == NULL) {
    market_ = new ::ru::mail::go::webbase::blobs::VkGroupMarketInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.market)
  return market_;
}
::ru::mail::go::webbase::blobs::VkGroupMarketInfo* VkGroup::release_market() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.market)
  clear_has_market();
  ::ru::mail::go::webbase::blobs::VkGroupMarketInfo* temp = market_;
  market_ = NULL;
  return temp;
}
void VkGroup::set_allocated_market(::ru::mail::go::webbase::blobs::VkGroupMarketInfo* market) {
  delete market_;
  market_ = market;
  if (market) {
    set_has_market();
  } else {
    clear_has_market();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.market)
}

// optional int64 members_count = 19;
bool VkGroup::has_members_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void VkGroup::set_has_members_count() {
  _has_bits_[0] |= 0x00100000u;
}
void VkGroup::clear_has_members_count() {
  _has_bits_[0] &= ~0x00100000u;
}
void VkGroup::clear_members_count() {
  members_count_ = GOOGLE_LONGLONG(0);
  clear_has_members_count();
}
::google::protobuf::int64 VkGroup::members_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.members_count)
  return members_count_;
}
void VkGroup::set_members_count(::google::protobuf::int64 value) {
  set_has_members_count();
  members_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.members_count)
}

// optional .ru.mail.go.webbase.blobs.VkGroupPlaceInfo place = 20;
bool VkGroup::has_place() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VkGroup::set_has_place() {
  _has_bits_[0] |= 0x00001000u;
}
void VkGroup::clear_has_place() {
  _has_bits_[0] &= ~0x00001000u;
}
void VkGroup::clear_place() {
  if (place_ != NULL) place_->::ru::mail::go::webbase::blobs::VkGroupPlaceInfo::Clear();
  clear_has_place();
}
const ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo& VkGroup::place() const {
  const ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo* p = place_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.place)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo*>(
      &::ru::mail::go::webbase::blobs::_VkGroupPlaceInfo_default_instance_);
}
::ru::mail::go::webbase::blobs::VkGroupPlaceInfo* VkGroup::mutable_place() {
  set_has_place();
  if (place_ == NULL) {
    place_ = new ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.place)
  return place_;
}
::ru::mail::go::webbase::blobs::VkGroupPlaceInfo* VkGroup::release_place() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.place)
  clear_has_place();
  ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo* temp = place_;
  place_ = NULL;
  return temp;
}
void VkGroup::set_allocated_place(::ru::mail::go::webbase::blobs::VkGroupPlaceInfo* place) {
  delete place_;
  place_ = place;
  if (place) {
    set_has_place();
  } else {
    clear_has_place();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.place)
}

// optional string public_date_label = 21;
bool VkGroup::has_public_date_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VkGroup::set_has_public_date_label() {
  _has_bits_[0] |= 0x00000010u;
}
void VkGroup::clear_has_public_date_label() {
  _has_bits_[0] &= ~0x00000010u;
}
void VkGroup::clear_public_date_label() {
  public_date_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_date_label();
}
const ::std::string& VkGroup::public_date_label() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.public_date_label)
  return public_date_label_.GetNoArena();
}
void VkGroup::set_public_date_label(const ::std::string& value) {
  set_has_public_date_label();
  public_date_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.public_date_label)
}
#if LANG_CXX11
void VkGroup::set_public_date_label(::std::string&& value) {
  set_has_public_date_label();
  public_date_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroup.public_date_label)
}
#endif
void VkGroup::set_public_date_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_date_label();
  public_date_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroup.public_date_label)
}
void VkGroup::set_public_date_label(const char* value, size_t size) {
  set_has_public_date_label();
  public_date_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroup.public_date_label)
}
::std::string* VkGroup::mutable_public_date_label() {
  set_has_public_date_label();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.public_date_label)
  return public_date_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroup::release_public_date_label() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.public_date_label)
  clear_has_public_date_label();
  return public_date_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroup::set_allocated_public_date_label(::std::string* public_date_label) {
  if (public_date_label != NULL) {
    set_has_public_date_label();
  } else {
    clear_has_public_date_label();
  }
  public_date_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_date_label);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.public_date_label)
}

// optional string site_url = 22;
bool VkGroup::has_site_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VkGroup::set_has_site_url() {
  _has_bits_[0] |= 0x00000020u;
}
void VkGroup::clear_has_site_url() {
  _has_bits_[0] &= ~0x00000020u;
}
void VkGroup::clear_site_url() {
  site_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site_url();
}
const ::std::string& VkGroup::site_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.site_url)
  return site_url_.GetNoArena();
}
void VkGroup::set_site_url(const ::std::string& value) {
  set_has_site_url();
  site_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.site_url)
}
#if LANG_CXX11
void VkGroup::set_site_url(::std::string&& value) {
  set_has_site_url();
  site_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroup.site_url)
}
#endif
void VkGroup::set_site_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_site_url();
  site_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroup.site_url)
}
void VkGroup::set_site_url(const char* value, size_t size) {
  set_has_site_url();
  site_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroup.site_url)
}
::std::string* VkGroup::mutable_site_url() {
  set_has_site_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.site_url)
  return site_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroup::release_site_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.site_url)
  clear_has_site_url();
  return site_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroup::set_allocated_site_url(::std::string* site_url) {
  if (site_url != NULL) {
    set_has_site_url();
  } else {
    clear_has_site_url();
  }
  site_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.site_url)
}

// optional int64 start_date_ts = 23;
bool VkGroup::has_start_date_ts() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void VkGroup::set_has_start_date_ts() {
  _has_bits_[0] |= 0x02000000u;
}
void VkGroup::clear_has_start_date_ts() {
  _has_bits_[0] &= ~0x02000000u;
}
void VkGroup::clear_start_date_ts() {
  start_date_ts_ = GOOGLE_LONGLONG(0);
  clear_has_start_date_ts();
}
::google::protobuf::int64 VkGroup::start_date_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.start_date_ts)
  return start_date_ts_;
}
void VkGroup::set_start_date_ts(::google::protobuf::int64 value) {
  set_has_start_date_ts();
  start_date_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.start_date_ts)
}

// optional int64 finish_date_ts = 24;
bool VkGroup::has_finish_date_ts() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void VkGroup::set_has_finish_date_ts() {
  _has_bits_[0] |= 0x04000000u;
}
void VkGroup::clear_has_finish_date_ts() {
  _has_bits_[0] &= ~0x04000000u;
}
void VkGroup::clear_finish_date_ts() {
  finish_date_ts_ = GOOGLE_LONGLONG(0);
  clear_has_finish_date_ts();
}
::google::protobuf::int64 VkGroup::finish_date_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.finish_date_ts)
  return finish_date_ts_;
}
void VkGroup::set_finish_date_ts(::google::protobuf::int64 value) {
  set_has_finish_date_ts();
  finish_date_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.finish_date_ts)
}

// optional string group_status = 25;
bool VkGroup::has_group_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VkGroup::set_has_group_status() {
  _has_bits_[0] |= 0x00000040u;
}
void VkGroup::clear_has_group_status() {
  _has_bits_[0] &= ~0x00000040u;
}
void VkGroup::clear_group_status() {
  group_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group_status();
}
const ::std::string& VkGroup::group_status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.group_status)
  return group_status_.GetNoArena();
}
void VkGroup::set_group_status(const ::std::string& value) {
  set_has_group_status();
  group_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.group_status)
}
#if LANG_CXX11
void VkGroup::set_group_status(::std::string&& value) {
  set_has_group_status();
  group_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroup.group_status)
}
#endif
void VkGroup::set_group_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_group_status();
  group_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroup.group_status)
}
void VkGroup::set_group_status(const char* value, size_t size) {
  set_has_group_status();
  group_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroup.group_status)
}
::std::string* VkGroup::mutable_group_status() {
  set_has_group_status();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.group_status)
  return group_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroup::release_group_status() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.group_status)
  clear_has_group_status();
  return group_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroup::set_allocated_group_status(::std::string* group_status) {
  if (group_status != NULL) {
    set_has_group_status();
  } else {
    clear_has_group_status();
  }
  group_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_status);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.group_status)
}

// optional bool trending = 26;
bool VkGroup::has_trending() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void VkGroup::set_has_trending() {
  _has_bits_[0] |= 0x00800000u;
}
void VkGroup::clear_has_trending() {
  _has_bits_[0] &= ~0x00800000u;
}
void VkGroup::clear_trending() {
  trending_ = false;
  clear_has_trending();
}
bool VkGroup::trending() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.trending)
  return trending_;
}
void VkGroup::set_trending(bool value) {
  set_has_trending();
  trending_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.trending)
}

// optional bool verified = 27;
bool VkGroup::has_verified() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void VkGroup::set_has_verified() {
  _has_bits_[0] |= 0x01000000u;
}
void VkGroup::clear_has_verified() {
  _has_bits_[0] &= ~0x01000000u;
}
void VkGroup::clear_verified() {
  verified_ = false;
  clear_has_verified();
}
bool VkGroup::verified() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.verified)
  return verified_;
}
void VkGroup::set_verified(bool value) {
  set_has_verified();
  verified_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.verified)
}

// optional string wiki_page = 28;
bool VkGroup::has_wiki_page() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VkGroup::set_has_wiki_page() {
  _has_bits_[0] |= 0x00000080u;
}
void VkGroup::clear_has_wiki_page() {
  _has_bits_[0] &= ~0x00000080u;
}
void VkGroup::clear_wiki_page() {
  wiki_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wiki_page();
}
const ::std::string& VkGroup::wiki_page() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.wiki_page)
  return wiki_page_.GetNoArena();
}
void VkGroup::set_wiki_page(const ::std::string& value) {
  set_has_wiki_page();
  wiki_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.wiki_page)
}
#if LANG_CXX11
void VkGroup::set_wiki_page(::std::string&& value) {
  set_has_wiki_page();
  wiki_page_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroup.wiki_page)
}
#endif
void VkGroup::set_wiki_page(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wiki_page();
  wiki_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroup.wiki_page)
}
void VkGroup::set_wiki_page(const char* value, size_t size) {
  set_has_wiki_page();
  wiki_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroup.wiki_page)
}
::std::string* VkGroup::mutable_wiki_page() {
  set_has_wiki_page();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.wiki_page)
  return wiki_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkGroup::release_wiki_page() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.wiki_page)
  clear_has_wiki_page();
  return wiki_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkGroup::set_allocated_wiki_page(::std::string* wiki_page) {
  if (wiki_page != NULL) {
    set_has_wiki_page();
  } else {
    clear_has_wiki_page();
  }
  wiki_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wiki_page);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.wiki_page)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
